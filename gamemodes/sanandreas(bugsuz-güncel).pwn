/*
* San Andreas Roleplay - sa-rp.com © 2019 - 2020
* Developers: Rufio, Marvellous
*/

#pragma warning disable 239
#pragma warning disable 214

//Libraries
#include <a_samp>

#undef MAX_PLAYERS
#define MAX_PLAYERS                     (200)

#undef MAX_VEHICLES
#define MAX_VEHICLES                    (1500)

native IsValidVehicle(vehicleid);
native CUSTOM_GivePlayerWeapon(playerid, weaponid, ammo) = GivePlayerWeapon;
native CUSTOM_ResetPlayerWeapons(playerid) = ResetPlayerWeapons;
native CUSTOM_SetPlayerHealth(playerid, Float:health) = SetPlayerHealth;
native CUSTOM_SetPlayerArmour(playerid, Float:armour) = SetPlayerArmour;

native GetPlayerCustomSkin(playerid);
//native gpci(playerid, serial[], len);

#include <a_mysql>
#include <streamer>
#include <foreach>
#include <file-import>
#include <sscanf>
#include <selection>
#include <useful>
#include <pawn.cmd>
#include <anti_airbreak>
#include <dialogs>
#include <AntiAFK>
#include <virtual-canvas>
#include <bitmapper>
#include <GPS>
#include <timerfix>
#include <crashdetect>

forward GYM(playerid);

// Sunucu Bilgileri //
#define     SUNUCU_ADI          "San Andreas Roleplay - MAINTENANCE!"
#define     SUNUCU_VERSION      "SA-RP 1.0.0"
#define     SUNUCU_DIL          "Türkçe/Turkish"
#define     SUNUCU_URL          "sandreas-roleplay.com/forum"
#define     SUNUCU_SIFRE        "serhan23cm"

//Staff Ranks
#define USER                            (0)
#define SUPPORTER                       (1)
#define SUPPORTER2                      (2)
#define SUPPORTER3                      (3)
#define GAMEADMIN1                      (4)
#define GAMEADMIN2                      (5)
#define GAMEADMIN3                      (6)
#define GAMEADMIN4                      (7)
#define OWNER                           (8)
#define DEVELOPER                       (9)
#define LEVEL8                          (10)
#define LEVEL9                          (11)
#define LEVEL10                         (12)
#define LEVEL11                         (13)
#define LEVEL12                         (14)
#define LEVEL13                         (15)
#define LEVEL14                         (16)
#define LEVEL15                         (17)
#define LEVEL16                         (18)
#define LEVEL17                         (19)
#define LEVEL18                         (20)
#define LEVEL19                         (21)
#define LEVEL20                         (22)

#define KEY_AIM KEY_HANDBRAKE

//Body parts
#define BODY_PART_GOVDE 3
#define BODY_PART_KASIK 4
#define BODY_PART_SOL_KOL 5
#define BODY_PART_SAG_KOL 6
#define BODY_PART_SOL_BACAK 7
#define BODY_PART_SAG_BACAK 8
#define BODY_PART_KAFA 9

//Limits
#define MAX_YERDEKIESYALAR              (200)
#define MAX_OWNED_CHARACTERS            (7)
#define MAX_HOUSES                      (2000)
#define MAX_BUILDINGS                   (750)
#define MAX_LABORATORIES                (50)
#define MAX_ILLEGAL_INDUSTRIES          (50)
#define MAX_FACTIONS                    (50)
#define MAX_FACTION_RANKS               (30)
#define MAX_OWNED_VEHICLES              (10)
#define MAX_DEALERS                     (10)
#define MAX_DEALER_VEHICLES             (30)
#define MAX_INVENTORY_ITEMS             (10)
#define MAX_TRUNK_ITEMS                 (37)
#define MAX_STORAGE_ITEMS               (20)
#define MAX_INVENTORY_OBJECTS           (112)
#define MAX_PAYPHONES                   (200)
#define MAX_PAGE_FURNITURE              (30)
#define MAX_PAGE_PHONE                  (30)
#define MAX_PAGE_LOG                    (30)
#define MAX_PAGE_APB                    (15)
#define MAX_DPS                         (3)
#define MAX_FURNITURES                  (300)
#define MAX_FURNITURES_BRONZE           (400)
#define MAX_FURNITURES_SILVER           (500)
#define MAX_FURNITURES_GOLD             (600)
#define MAX_FURNITURES_PLATINUM         (700)
#define MAX_FURNITURES_DIAMOND          (800)
#define MAX_SPAWNED_VEH                 (6)
#define MAX_SPAWNED_VEH_BRONZE          (8)
#define MAX_SPAWNED_VEH_SILVER          (9)
#define MAX_SPAWNED_VEH_GOLD            (10)
#define MAX_SPAWNED_VEH_PLATINUM        (11)
#define MAX_SPAWNED_VEH_DIAMOND         (12)
#define MAX_DROPPED_ITEMS               (200)
#define MAX_BIZ_ITEMS                   (20)
#define MAX_FREQUENCES                  (1000)
#define MAX_GRAFFITIS                   (180)
#define MAX_WEATHERS                    (45)
#define MAX_TYPES                       (22)
#define MAX_CRATES                      (300)
#define MAX_ROADBLOCKS                  (350)
#define MAX_ZONE_NAME                   (28)
#define MAX_FINES                       (20)
#define MAX_MEALS                       (30)
#define MAX_REQUESTS_FOR_PLAYER         (1) //
#define MAX_DAMAGES_FOR_PLAYER          (24)
#define MAX_CAR_WEAPONS                 (11)
#define MAX_REQUESTS                    (100)
#define MAX_IMPORT_FOR_PLAYER           (28) // 15
#define MAX_RADIO_LINKS                 (50)
#define MAX_CIMICI                      (500)
#define MAX_PLAYER_CIMICI               (10)
#define MAX_TELEPORTS                   (100)
#define MAX_COMMODITIES_SLOT            (36)
#define MAX_COMPANIES                   (50)
#define MAX_OWNED_HOUSE                 (10)
#define MAX_OWNED_BIZ                   (10)
#define MIN_SAVINGS_AMOUNT              (20000)
#define MAX_SAVINGS_AMOUNT              (100000)
#define MAX_GAMES                       (150)
#define MAX_TUNING_COMPONENTS           (14)
#define MAX_IP_CONNECTIONS              (10)
#define MAX_GATES                       (100)
#define MAX_OWNED_VEHICLES_BRONZE       (11)
#define MAX_OWNED_VEHICLES_SILVER       (12)
#define MAX_OWNED_VEHICLES_GOLD         (13)
#define MAX_OWNED_VEHICLES_PLATINUM     (14)
#define MAX_OWNED_VEHICLES_DIAMOND      (15)
#define MAX_FUEL_LITERS_TO_ADD          (1)
#define MAX_PRODUCTS                    (60)
#define MAX_CESET                       (100)
#define MAX_TORBA                       (100)
//#define MAX_YANGIN                    (100)
#define MAX_DOLAP                       (30)
#define MAX_ATM                         (50)
#define MAX_IHBAR                       (12)
#define MAX_CALINTI                     (20)
#define MAX_EKIP                        (50)
#define MAX_YONLENME                    (8)
#define MAX_REKLAM                      (50)
#define MAX_STAND                       (20)
#define MAX_COPKUTUSU                   (50)
#define MAX_COP                         (96)
#define MAX_YERDEKICOP                  (50)
#define MAX_OTEL                        (30)


//Player Objects System
#define MAX_PLAYER_OBJECTS              (5) // 20

#define OBJECT_OTHER                    (0)
#define OBJECT_BANDANA                  (1)
#define OBJECT_HAT                      (2)
#define OBJECT_OTHER_HAT                (3)
#define OBJECT_WATCH                    (4)
#define OBJECT_GLASSES                  (5)
#define OBJECT_HELMET                   (6)
#define OBJECT_MASK                     (7)
#define OBJECT_EXTRA                    (8)
#define OBJECT_POLICE                   (9)
#define OBJECT_FIRE                     (10)
#define OBJECT_HALLOWEEN                (11)
#define OBJECT_GOVERNMENT               (12)

#define BONE_SPINE                      (1)
#define BONE_HEAD                       (2)
#define BONE_RHAND                      (6)
#define BONE_RFOOT                      (10)

//Anti Cheat System
#define AC_AIRBREAK_CODE                (0)
#define AC_INVISIBLE_CODE               (1)
#define AC_ARMOUR_CODE                  (2)
#define AC_COMMAND_CODE                 (3)
#define AC_HEALTH_CODE                  (4)
#define AC_VEHICLEREPAIR_CODE           (5)
#define AC_JETPACK_CODE                 (6)
#define AC_SPAWNEDGUNS_CODE             (7)
#define AC_CRASHER_CODE                 (8)
#define AC_CARHACK_CODE                 (9)
#define AC_SILENTAIM_CODE               (10)
#define AC_AMMO_CODE                    (11)
#define AC_TELEPORT_CODE                (12)

#define MAX_CHEAT_CODES                 (13)

//Fishing System - Rufio
#define FISHES_FOOT                    (20)

// Piyango Sistemi - Rufio
new BASLANGICPARASI = 2000;// oyuncularýn alacaðý miktar, baþta 2000 dolar
#define BILETPARASI                     (200) // oyuncularýn bir bilete kaç dolar vereceði
#define MAKSBILETNUMARASI               (100) // bir bilete maks kaç gelebileceði, her zaman maksimum deðerden 1 fazla yazýlmasý gerekiyor, array için
#define MAKSPARA                        (50000) // sýfýrlanmadan önce maksimum çýkabilecek para
new PiyangoAlindi[MAKSBILETNUMARASI]; // bir biletin alýnýp alýnmadýðýnýn tutulduðu array

// Ýþletme Reklam Sistemi - Rufio
new sonIsletmeReklam;
new sonIsletme;

// Yarýþ Sistemi - Rufio
#define MAX_YARIS                       (2) // oyun içerisinde aktif olabilecek maksimum yarýþ sayýsý
#define MAX_YARIS_CHECKPOINT            (20) // her yarýþ baþýna maksimum checkpoint sayýsý


// Bahis Sistemi - Rufio
#define MAX_YARIS_ATI                   (4) // toplam kaç at olduðu
new bahisAktif = 0; // bilet satýn alýnýp alýnamayacaðýný kontrol ediyor
new bahisOyunAktif = 0; // oyunun aktif olup olmadýðýný kontrol ediyor
new bahisTimer = 0; // bahiste atlarýn son durumunu bildiren timer
new bahisHazirlikAktif = 0; // oyunun hazýrlanmasý için
new atlarinDurumu[MAX_YARIS_ATI]; // atlarýn yarýþý bitirme durumlarý
new atIsimleri[MAX_YARIS_ATI][32]; // atlarýn isimleri


new g_ModelsAwaiting = 0;

new audience = 0;

//Server Mesajlari
#define SunucuMesaji(%0,%1) \
    SendFormattedMessage(%0, COLOR_LIGHTRED, "[SA-RP] {C8C8C8}"%1)

#define SunucuMesajicp(%0,%1) \
    SendFormattedMessage(%0, COLOR_NEW, %1)
    
#define SunucuMesajiC(%0,%1) \
    SendClientMessage(%0, COLOR_LIGHTRED, "[SA-RP] {C8C8C8}"%1)

#define KullanimMesaji(%0,%1) \
    SendFormattedMessage(%0, RENK_KULLANIM, "[SA-RP] {C8C8C8}"%1)

#define KullanimMesajiC(%0,%1) \
    SendClientMessage(%0, RENK_KULLANIM, "[SA-RP] {C8C8C8}"%1)

#define HataMesaji(%0,%1) \
    SendFormattedMessage(%0, COLOR_ERROR, "[SA-RP] {C8C8C8}"%1)

#define HataMesajiC(%0,%1) \
    SendClientMessage(%0, COLOR_ERROR, "[SA-RP] {C8C8C8}"%1)

#define KickMesaji(%0,%1) \
    SendFormattedMessage(%0, 0xa52a2aFF, "[SA-RP] {C8C8C8}"%1)

#define BasariMesaji(%0,%1) \
    SendFormattedMessage(%0, COLOR_GREEN, "[SA-RP] {C8C8C8}"%1)

#define BasariMesajiC(%0,%1) \
    SendClientMessage(%0, COLOR_GREEN, "[SA-RP] {C8C8C8}"%1)

//Colors
#define COLOR_NEW 0xC8C8C8FF
#define COLOR_BRHELPER
#define COLOR_MECHANIC                  (0x005A83FF)
#define COLOR_TURQUOISE                 (0x40E0D0FF)
#define COLOR_TAXI                      (0xB8860BFF)
#define COLOR_EMOTE                     (0xC2A2DAFF)
#define COLOR_WHITE                     (0xFFFFFFFF)
#define COLOR_ERROR                     (0xa52a2aff)
#define COLOR_YELLOW                    (0xFFFF00AA)
#define COLOR_ADMIN                     (0xFF6347FF)
#define COLOR_ORANGE                    (0xEA7500FF)
#define COLOR_PURPLE                    (0xD0AEEBFF)
#define COLOR_FADE1                     (0xE6E6E6E6)
#define COLOR_FADE2                     (0xC8C8C8C8)
#define COLOR_FADE3                     (0xAAAAAAAA)
#define COLOR_FADE4                     (0x8C8C8C8C)
#define COLOR_FADE5                     (0x6E6E6E6E)
#define COLOR_HOUSE                     (0xE0EA64AA)
#define COLOR_BIZ                       (0x33CCFFFF)
#define COLOR_LIGHTBLUE                 (0xA9C4E4FF)
#define COLOR_SENDPM                    (0xFFE536FF)
#define COLOR_RECEIVEPM                 (0xFCF545AA)
#define COLOR_GREEN                     (0x33AA33AA)
#define COLOR_DARKGREEN                 (0x33AA33FF)
#define COLOR_LGREEN                    (0x33CC33FF)
#define COLOR_MODCHAT                   (0xE1A400FF)
#define COLOR_ADMINCHAT                 (0x876200FF)
#define COLOR_LIGHTGREEN                (0x9ACD32FF)
#define COLOR_SUPPORTER                 (0xe9de98ff)
#define COLOR_SUPPORTERNICK             (0xa52a2aff)
#define COLOR_SLATEBLUE                 (0x6A5ACDFF)
#define COLOR_BREEZEADMIN               (0x62869dFF)
#define COLOR_RUFIOGREY                 (0x00FF00FF)
#define COLOR_YENI1                     (0xBFC0C2FF)
#define COLOR_LIGHTRED                  (0xFF6347FF)
#define COLOR_BRHELP                    (0x919FAFFF)
#define COLOR_RADIO                     (0xFDE39DAA)
#define RENK_KULLANIM                   (0x007DFAFF)
#define RENK_LSPD                       (0x9999FFFF)
#define RENK_LSFD                       (0xFF8282FF)
#define COLOR_GREY                      (0xAFAFAFFF)
#define COLOR_GREY1                     (0xE6E6E6FF)
#define COLOR_GREY2                     (0xC8C8C8FF)
#define COLOR_GREY3                     (0xAAAAAAFF)
#define COLOR_GREY4                     (0x8C8C8CFF)
#define COLOR_GREY5                     (0x6E6E6EFF)
#define COLOR_GRAD1                     (0xCCE6E6FF)
#define COLOR_GRAD2                     (0xE2FFFFFF)
#define COLOR_ACIKMAVI                  (0x00FFFFFF)

//Industries Types
#define APPLIANCES                      (0)
#define FOOD                            (1)
#define ICECEK                          (2)
#define KIYAFET                         (3)
#define MEAT                            (4)
#define YUMURTA                         (5)
#define MEYVE                           (6)
#define BOYA                            (7)
#define PAMUK                           (8)
#define ARPA                            (9)
#define MALT                            (10)
#define SHAPES                          (11) //super pasif
#define VEHICLE_PART                    (12)
#define ILLEGAL_BOX                     (13)
#define PETROL                          (14)
#define YAKIT                           (15)
#define BIRA                            (16)
#define SUT                             (17)
#define TAHTA_PARCALARI                 (18)
#define MOBILYA                         (19)
#define GAZOZ                           (20)
#define DERI                            (21)
#define HIRSIZLIK                       (22)

//Pickups Types
#define ELEMENT_NULL                    (0)
#define ELEMENT_LICENSE                 (1)
#define ELEMENT_JOB                     (2)
#define ELEMENT_ARREST                  (3)
#define ELEMENT_SELL_FISH               (4)
#define ELEMENT_IMPOUND                 (5)
#define ELEMENT_TUNE                    (6)
#define ELEMENT_INDUSTRY                (7)
#define ELEMENT_LABORATORY              (8)
#define ELEMENT_COMPANY                 (9)
#define ELEMENT_TELEPORT                (10)
#define ELEMENT_BUILDING                (11)
#define ELEMENT_DEALER                  (12)
#define ELEMENT_ATM                     (13)
#define ELEMENT_GYM                     (14)
#define ELEMENT_DOLAP                   (15)
#define ELEMENT_BALIKYEM                (16)
#define ELEMENT_KULUBE                  (17)
#define VERONAMALL                      (18)
#define ELEMENT_KANTIN                  (19)
#define ELEMENT_SIREN                   (20)
#define ELEMENT_TEZGAH                  (21)
#define ELEMENT_CADIR                   (22)
#define ELEMENT_YAKITYUKLE              (23)
#define ELEMENT_YAKITTESLIM             (24)
#define ELEMENT_COPSAT                  (25)
#define ELEMENT_OTEL                    (26)

//Types
#define ENTITY_TYPE_PLAYER          (1)
#define ENTITY_TYPE_HOUSE           (2)
#define ENTITY_TYPE_VEHICLE         (3)

#define OPTION_SETUP_GAME           (0)
#define OPTION_BUY_IN_MAX           (1)
#define OPTION_BUY_IN_MIN           (2)
#define OPTION_BLINDS               (3)
#define OPTION_PLAYERS_LIMIT        (4)
#define OPTION_SET_KEY              (5)
#define OPTION_ROUND_DELAY          (6)
#define OPTION_BUY_IN               (7)
#define OPTION_CALL                 (8)
#define OPTION_RAISE                (9)
#define OPTION_SEAT_PRICE           (10)

#define EDITING_TYPE_SKIN               (0)
#define EDITING_TYPE_SALARY             (1)
#define EDITING_TYPE_RANK               (2)

#define SMOKING_TYPE_NULL               (0)
#define SMOKING_TYPE_CIGARETTE          (1)
#define SMOKING_TYPE_WEED               (2)
#define SMOKING_TYPE_HASHISH            (3)

#define SPAWN_POINT                     (1)

#define TYPE_SMS                        (1)
#define TYPE_CALL                       (2)

#define CIMICE_PLAYER_HOURS             (24)
#define CIMICE_VEHICLE_HOURS            (24)
#define CIMICE_HOUSE_HOURS              (24)
#define CIMICE_BUILDING_HOURS           (24)

#define CIMICE_TYPE_PLAYER              (0)
#define CIMICE_TYPE_VEHICLE             (1)
#define CIMICE_TYPE_HOUSE               (2)
#define CIMICE_TYPE_BUILDING            (3)

#define WEAPONLICENSE_ACTION_GIVE       (0)
#define WEAPONLICENSE_ACTION_REMOVE     (1)
#define WEAPONLICENSE_ACTION_EDIT       (2)
#define WEAPONLICENSE_ACTION_BUY        (3)
#define WEAPONLICENSE_ACTION_RENEW      (4)

//Taxes
#define TAX_GREEN                       (1)
#define TAX_YELLOW                      (2)
#define TAX_RED                         (3)

//Licenses Exam
#define EXAM_TYPE_VEHICLES              (1)
#define EXAM_TYPE_BOATS                 (2)
#define EXAM_TYPE_PLANES                (3)

//Prices
#define DRIVE_PRICE                     (500)
#define BOAT_PRICE                      (300)
#define FLY_PRICE                       (2500)
#define CELL_PRICE                      (2)

//Custom Worlds
#define HOUSE_WORLD                     (1000)
#define BUILDING_WORLD                  (5000)

//MapAndreas
#define MAP_ANDREAS_MODE_NONE           (0)
#define MAP_ANDREAS_MODE_MINIMAL        (1)
#define MAP_ANDREAS_MODE_MEDIUM         (2)
#define MAP_ANDREAS_MODE_FULL           (3)
#define MAP_ANDREAS_MODE_NOBUFFER       (4)

#define MAP_ANDREAS_ERROR_SUCCESS       (0)
#define MAP_ANDREAS_ERROR_FAILURE       (1)
#define MAP_ANDREAS_ERROR_MEMORY        (2)
#define MAP_ANDREAS_ERROR_DATA_FILES    (3)
#define MAP_ANDREAS_ERROR_INVALID_AREA  (4)

//GVar
#define GLOBAL_VARTYPE_NONE             (0)
#define GLOBAL_VARTYPE_INT              (1)
#define GLOBAL_VARTYPE_STRING           (2)
#define GLOBAL_VARTYPE_FLOAT            (3)

//Numbers
#define POLICE_NUMBER                   (911)
#define MECHANIC_NUMBER                 (555)
#define TAXI_NUMBER                     (444)
#define RENTER_NUMBER                   (800129)
#define GOVERNMENT_NUMBER               (333)

//Inventory
#define ITEM_NONE                       (-1)
#define ITEM_WEAPON                     (0)
#define ITEM_CLOTHES                    (1)
#define ITEM_BIZ                        (2)
#define ITEM_PHONE                      (3)
#define ITEM_DRUG                       (4)
#define ITEM_INGREDIENT                 (5)

//Objects
#define BOX_OBJECT                      (2912)
#define BOOMBOX_OBJECT                  (2226)
#define BURNER_PHONE_OBJECT             (2886)
#define RADIO_OBJECT                    (19942)

//Keys
#define KEY_VEHICLE                     (1)
#define KEY_HOUSE                       (2)
#define KEY_BUILDING                    (3)

//Coordinates
#define EXTERIOR_TUNING_X               (418.0252)
#define EXTERIOR_TUNING_Y               (-1324.3462)
#define EXTERIOR_TUNING_Z               (14.9415)

#define INTERIOR_TUNING_X               (434.0549)
#define INTERIOR_TUNING_Y               (-1299.4264)
#define INTERIOR_TUNING_Z               (15.3104)

#define SPAWN_X                         (1685.9399)
#define SPAWN_Y                         (-2239.8137)
#define SPAWN_Z                         (-2.7011)
#define SPAWN_A                         (181.4398)

#define ARREST_X                        (64.8541)
#define ARREST_Y                        (1824.6005)
#define ARREST_Z                        (-2.6170)

#define SELL_X                          (2472.4744)
#define SELL_Y                          (-2710.5137)
#define SELL_Z                          (3.1963)

#define JAIL_X                          (264.5743)
#define JAIL_Y                          (77.5118)
#define JAIL_Z                          (1001.0391)

#define IC_JAIL_X                       (64.8541)
#define IC_JAIL_Y                       (1824.6005)
#define IC_JAIL_Z                       (5.6170)

#define IMPOUND_X                       (1866.1210)
#define IMPOUND_Y                       (-1792.6871)
#define IMPOUND_Z                       (13.5469)

#define IMPOUND_SPAWN_X                 (1872.8749)
#define IMPOUND_SPAWN_Y                 (-1795.5455)
#define IMPOUND_SPAWN_Z                 (13.1474)
#define IMPOUND_SPAWN_ANGLE             (89.6163)

//Factions
#define POLICE                          (1)
#define GOVERNMENT                      (2)
#define MEDICAL                         (3)
#define LSNN                            (4)
#define SADECEUYUSTURUCU                (5)
#define ONAYLIFACT                      (6)
#define OTHER                           (7)

//Buildings
#define NONE                            (-1)
#define CLEAN                           (0)
#define STORE                           (1)
#define CLUCKIN                         (2)
#define PIZZA                           (3)
#define BURGER                          (4)
#define CLOTHING                        (5)
#define BAR                             (6)
#define BUILDING                        (7)
#define COMPLEX                         (8) // PARA KAZANMAYACAK
#define ADVERTISEMENT                   (9)
#define BANK                            (10)
#define AMMUNATION                      (11) // PARA KAZANMAYACAK
#define BLACK_MARKET                    (12) // PARA KAZANMAYACAK
#define PNS                             (13) // PARA KAZANMAYACAK
#define FUEL_STATION                    (14) // PARA KAZANMAYACAK
#define GARAJ                           (15)
#define TAMIRHANE                       (16)
#define KANTIN                          (17)
#define CUSTOM                          (18)
#define KUMARHANE                       (19)
#define HASTANE                         (20)
#define GANYAN                          (21)

//Menu Selection
#define TBARIKAT                        (1)
#define TMOBILYA                        (2)
#define TAKSESUAR                       (3)
#define TEVKIYAFET                      (4)
#define TKIYAFET                        (5)
#define TCOPKUTUSU                      (6)
#define TTEZGAH                         (7)
#define TISYIYECEK                      (8)
#define DKIYAFET                        (9)
#define TTELEFON                        (10)

//Threaded Queries
#define THREAD_CREATE_HOUSE             (1)
#define THREAD_CREATE_FACTION           (2)
#define THREAD_CREATE_BUILDING          (3)
#define THREAD_FACTION_MEMBERS          (4)
#define THREAD_CREATE_VEHICLE           (5)
#define THREAD_LOAD_SELLCARS            (6)
#define THREAD_CREATE_DEALER            (7)
#define THREAD_ADD_PAYPHONE             (8)
#define THREAD_CREATE_GRAFFITO          (9)
#define THREAD_ADD_CIMICE               (10)
#define THREAD_CREATE_LAB               (11)
#define THREAD_SEARCH_NAME_LAB          (12)
#define THREAD_CREATE_ILLEGALINDUSTRY   (13)
#define THREAD_CREATE_TELEPORT          (14)
#define THREAD_ADD_DEALERVEH            (15)
#define THREAD_CREATE_COMPANY           (16)
#define THREAD_BUY_FURNITURE            (17)
#define THREAD_CREATE_GAME              (18)
#define THREAD_CREATE_GATE              (19)
#define THREAD_CREATE_EU                (20)
#define THREAD_CREATE_ATM               (21)
#define THREAD_CREATE_SIRKET            (22)
#define THREAD_CREATE_DOLAP             (23)

//Houses Interiors
#define HOUSE_VERYLITTLE                (1)
#define HOUSE_LITTLE                    (2)
#define HOUSE_MEDIUM                    (3)
#define HOUSE_BIG                       (4)
#define HOUSE_HUGE                      (5)
#define HOUSE_CIFTKATLI                 (6)
#define HOUSE_BUGGED                    (-1)

//Steal vehicle system
#define STEALVEH_MISTAKES               (3)
#define STEALVEH_SUCCESS                (8)

//Static Arrays

static const Float:RandomTuningSpawn[][] =
{
    {345.8079, -1358.1921, 14.1357, 118.4599},
    {344.5041, -1355.7866, 14.1322, 118.4599},
    {343.1835, -1353.3506, 14.1286, 118.4599},
    {341.8597, -1350.9081, 14.1250, 118.4599},
    {340.5688, -1348.5264, 14.1215, 118.4599},
    {339.2497, -1346.0927, 14.1179, 118.4599},
    {338.0098, -1343.8055, 14.1145, 118.4599},
    {336.7597, -1341.4994, 14.1111, 118.4599}
};

static const Float:FishingPoints[][] =
{
    {403.8615, -2088.7983, 7.8359},
    {398.6964, -2088.7981, 7.8359},
    {396.1438, -2088.7981, 7.8359},
    {391.0257, -2088.7983, 7.8359},
    {383.4240, -2088.7983, 7.8359},
    {374.9918, -2088.7983, 7.8359},
    {369.8525, -2088.7981, 7.8359},
    {367.2137, -2088.7954, 7.8359},
    {362.1895, -2088.7983, 7.8359},
    {354.3215, -2088.6377, 7.8359}
};

#define MAX_DYNAMIC_ACTORS 100
#define MAX_ACTORS_RANGE 50.0
enum DynamicActorData
{
    dynamicActor,
    dynamicActorID,
    dynamicActorExists,
    Float:dynamicActorPos[4],
    dynamicActorVW,
    dynamicActorInt,
    dynamicActorSkin,
    Text3D:dynamicActorLabel,
    dynamicActorName[32],
    dynamicActorAnimLib[36],
    dynamicActorAnimName[36],
    dynamicActorAnimLoop
};
new AktorBilgi[MAX_DYNAMIC_ACTORS][DynamicActorData];

enum xbb
{
    isim[64],
    Float:minX,
    Float:minY,
    Float:maxX,
    Float:maxY,
    Rectangle
};

new GuvenliBolge[][xbb] =
{
    {"Pershing Square", 1392.0, -1829.5, 1590.0, -1585.5},
    {"Grotti & Banka", 500.0, -1323.5, 629.0, -1218.5},
    {"Verona Mall", 1054.0, -1564.5, 1200.0, -1410.5},
    {"Market Hastane", 1088.0, -1398.5, 1193.0, -1272.5},
    {"Batý Verona", 122.0, -2101.5, 417.0, -1763.5},
    {"Doðu Verona", 415.96875, -2075.484375, 861.96875, -1754.484375},
    {"Hastane", 1995.0, -1449.5, 2070.0, -1372.5},
    {"SANetwork", 644.0, -1389.5, 796.0, -1318.5},
    {"Lojmanlar", 1536.0, -1153.5, 1826.0, -991.5},
    {"LSFD", 1211.0, -1281.5, 1339.0, -1156.5},
    {"ASGH Otopark", 1156.0, -1396.0, 1288.0, -1268.0},
    {"LS Airport", 1247.71875, -2625.47265625, 2090.71875, -2166.47265625},
    {"Ocean Docks", 2713.0, -2580.5, 2855.0, -2325.5}, // eski
    {"Ocean Docks", 2765.0, -2592.0, 2870.0, -2307.0}, // yeni
    {"Ocean Docks", 2432.0, -2733.0, 2765.0, -2180.0}, // yeni
    {"Ocean Docks", 2197.0, -2732.0, 2434.0, -2398.0}, // yeni
    {"Ocean Docks", 2281.0, -2405.0, 2437.0, -2298.0}, // yeni
    {"Ocean Docks", 2370.0, -2305.0, 2443.0, -2239.0}, // yeni
    {"Ocean Docks", 2253.0, -2469.0, 2353.0, -2369.0}, // yeni
    {"Ocean Docks", 2343.0, -2379.0, 2443.0, -2279.0}, // yeni
    {"Ocean Docks", 2401.0, -2298.0, 2501.0, -2198.0}, // yeni
    {"Idlewood", 2099.0, -1828.0, 2190.0, -1744.0}, // yeni
    {"Idlewood", 2078.0, -1838.0, 2098.0, -1744.0}, // yeni
    {"Skate PD", 1781.0, -1467.0, 1860.0, -1393.0}, // yeni
    {"SM PD", 542.0, -1577.0, 643.0, -1413.0}, // yeni
    {"Rodeo Plaza", 241.0, -1632.0, 323.0, -1579.0}, // yeni
    {"Rodeo Plaza Fix", 217.0, -1653.0, 352.0, -1559.0},
    {"Kamyon1", -461.02081298828125, -1488.4791870117188, -344.02081298828125, -1373.4791870117188},
    {"Kamyon2", -1201.8333129882812, -1173.666748046875, -941.8333129882812, -891.666748046875},
    {"Kamyon3", -1170.5234375, -1736.4921875, -966.5234375, -1574.4921875},
    {"Kamyon4", -1134.515625, -761.4921875, -972.515625, -576.4921875},
    {"Kamyon5", -2204.015625, -280.4921875, -2090.015625, -180.4921875},
    {"Kamyon6", -1874.015625, -114.4765625, -1800.015625, 180.5234375},
    {"Kamyon7", -240.515625, -321.4765625, 8.484375, -201.4765625},
    {"Kamyon8", -165.515625, 1093.5234375, -88.515625, 1169.5234375},
    {"Kamyon9", -274.015625, 2689.5078125, -181.015625, 2753.5078125},
    {"Kamyon10", 914.484375, 2204.5078125, 1014.484375, 2304.5078125},
    {"Kamyon11", 1690.484375, 655.515625, 1752.484375, 723.515625},
    {"Kamyon12", -124.03125, -58.4765625, -49.03125, 3.5234375},
    {"Kamyon13", 2794.984375, 836.5078125, 2894.984375, 936.5078125},
    {"Alhambra Side", 1753.0, -1754.0, 1832.0, -1685.0},
    {"Alhambra Evleri", 1811.0, -1757.0, 1950.0, -1604.0}
};

enum akatEnum
{
    katno,
    katad[64],
    asINT,
    asVW,
    Float:gX,
    Float:gY,
    Float:gZ,
    Float:gA
};

new const asansor[][akatEnum] =
{
    {12, "Kat 12", 0, 0, 288.0746,-1609.5396,96.7807,81.2869}, // 12
    {11, "Kat 11", 0, 0, 288.0746,-1609.5396,92.2808,81.2869}, // 11
    {10, "Kat 10", 0, 0, 288.0746,-1609.5396,87.7808,81.2869}, // 10
    {9, "Kat 9", 0, 0, 287.7428,-1609.4899,83.2808,81.2869}, // 9
    {8, "Kat 8", 0, 0, 287.7428,-1609.4899,78.7809,81.2869}, // 8
    {7, "Kat 7", 0, 0, 287.4109,-1609.4402,74.2809,81.2869}, // 7
    {6, "Kat 6", 0, 0, 287.4109,-1609.4402,69.7809,81.2869}, // 6
    {5, "Kat 5", 0, 0, 287.9636,-1609.3484,65.2809,229.8808}, // 5
    {4, "Kat 4", 0, 0, 288.2211,-1609.5651,60.7710,229.8808}, // 4
    {3, "Kat 3", 0, 0, 288.2211,-1609.5651,56.2710,229.8808}, // 3
    {2, "Kat 2", 0, 0, 288.2211,-1609.5651,51.7810,229.8808}, // 2
    {1, "Kat 1", 0, 0, 288.0706,-1609.7008,47.0810,166.2735}, // 1
    {0, "Giriþ Katý", 0, 0, 287.8880,-1609.6382,33.0210,350.2743}, // zemin
    {-1, "Otopark", 0, 0, 287.8913,-1609.4176,17.9310,162.9951} // otopark
};

enum enum_OAC
{
    OACusername[24],
    OACPremium,
    OACCoyn,
    OAUyari
};

enum OAECenum
{
    EnvanterListe[10],
    EnvanterMiktar[10],
    EnvanterKalite[10],
    EnvanterExtra[10],
    Silahlar[12],
    Mermiler[12]
};

new OACheck[MAX_PLAYERS][enum_OAC];
new OAECheck[MAX_PLAYERS][OAECenum];

enum E_FACTION_WEAPONS
{
    weaponID,
    weaponAmmo,
    weaponAllowed,
    weaponFaction
};
static const CarFactionWeaponsInfo[MAX_CAR_WEAPONS][E_FACTION_WEAPONS] =
{
    {25, 100, 1, POLICE},
    {29, 3000, 1, POLICE},
    {31, 5000, 1, POLICE},
    {24, 150, 1, POLICE},
    {43, 1000, 1, POLICE},
    {41, 1000, 1, POLICE},
    {25, 100, 1, GOVERNMENT},
    {29, 3000, 1, GOVERNMENT},
    {43, 1000, 1, GOVERNMENT},
    {42, 1000, 1, MEDICAL},
    {42, 1000,1, MEDICAL}
};

#define MAX_EKILEN_UYUSTURUCU 150

enum E_EkilenUyusturucu
{
    euID,
    euObject,
    Text3D:euLabel,
    euObjectID,
    Float:euPos[3],
    euInterior,
    euVWorld,
    euOwner,
    euTime,
    euType,
    bool:euStatus
};
new EUBilgi[MAX_EKILEN_UYUSTURUCU][E_EkilenUyusturucu];

enum E_PremiumVehicles
{
    pvmodeladi[64],
    pvmodelid,
    pvdonator
};

new const PremiumVehicles[][E_PremiumVehicles] =
{
    {"Infernus", 411, 5},
    {"NRG-500", 522, 5},
    {"Patriot", 470, 5},
    {"Turismo", 451, 3},
    {"BMX", 481, 1},
    {"Bike", 509, 1},
    {"Mountain Bike", 510, 1},
    {"Sanchez", 468, 1},
    {"Shamal", 519,  5},
    {"Maverick", 487, 4},
    {"Skimmer", 460, 3}
};

enum E_AracVergi
{
    avModelAdi[64],
    avModelID,
    avVergi
};

new const AracVergi[][E_AracVergi] =
{
    {"Admiral", 445, 7},
    {"Blista Compact", 496, 7},
    {"Regina", 479, 3},
    {"Sabre", 475, 7},
    {"Landstalker", 400, 7},
    {"Merit", 551, 7},
    {"Club", 589, 7},
    {"Cadrona", 527, 3},
    {"Sentinel", 405, 9},
    {"Stafford", 580, 7},
    {"Stratum", 561, 7},
    {"Virgo", 491, 3},
    {"Washington", 421, 5},
    {"Premier", 426, 9},
    {"Solair", 458, 7},
    {"Fortune", 526, 5},
    {"Rancher", 489, 5},
    {"Sunrise", 550, 3},
    {"Primo", 547, 3},
    {"Stallion", 439, 5},
    {"Savanna", 567, 5},
    {"Blade", 536, 5},
    {"Remington", 534, 5},
    {"Voodoo", 412, 5},
    {"Buccaneer", 518, 5},
    {"Faggio", 462, 2},
    {"Wayfarer", 586, 3},
    {"Freeway", 463, 3},
    {"BF-400", 581, 5},
    {"PCJ-600", 461, 7},
    {"FCR-900", 521, 9},
    {"Sanchez", 468, 5},
    {"Quad", 471, 5},
    {"Pizzaboy", 448, 2},
    {"Tropic", 454, 51},
    {"Marquis", 484, 13},
    {"Squalo", 446, 21},
    {"Jetmax", 493, 17},
    {"Speeder", 452, 17},
    {"Reefer", 453, 15},
    {"Dinghy", 473, 3},
    {"Willard", 529, 2},
    {"Esperanto", 419, 2},
    {"Bravura", 401, 2},
    {"Glendale", 466, 2},
    {"Greenwood", 492, 2},
    {"Previon", 436, 2},
    {"Tampa", 549, 2},
    {"Perennial", 404, 2},
    {"Moonbeam", 418, 2},
    {"Manana", 410, 2},
    {"Slamvan", 535, 5},
    {"Tornado", 576, 3},
    {"Hermes", 474, 3},
    {"Hustler", 545, 3},
    {"Oceanic", 467,  3},
    {"Elegant", 507, 3},
    {"Tahoma", 566, 3},
    {"Nebula", 516, 3},
    {"Majestic", 517, 3},
    {"Clover", 542, 2},
    {"Emperor", 582, 2},
    {"Intruder", 546, 2},
    {"Vincent", 540, 2},
    {"Bobcat", 422, 2},
    {"Picador", 600, 2},
    {"Sadler", 543, 2},
    {"Walton", 478, 2},
    {"Yosemite", 554,  3},
    {"Pony", 413, 7},
    {"Berkley's RC,", 459, 9},
    {"Rumpo", 440, 10},
    {"Buritto", 482, 11},
    {"Mule", 414, 19},
    {"Boxville", 498, 19},
    {"Benson", 499, 23},
    {"Yankee", 456, 23},
    {"Cabbie", 438, 3},
    {"Taxi", 420, 3},
    {"Towtruck", 525, 3},
    {"Tractor", 531, 2},
    {"Linerunner", 403, 61},
    {"Roadtrain", 515, 81},
    {"Tanker", 514, 71},
    {"Buffalo", 402, 41},
    {"Cheetah", 415, 51},
    {"Banshee", 429, 53},
    {"Alpha", 602, 13},
    {"ZR-350", 477, 37},
    {"Comet", 480, 37},
    {"Mesa", 500, 9},
    {"Bullet", 541, 55},
    {"Super-GT", 506, 31},
    {"Windsor", 555, 13},
    {"Feltzer", 533, 13},
    {"Sultan", 560, 23},
    {"Jester", 559, 25},
    {"Elegy", 562, 27},
    {"Uranus", 558, 11},
    {"Flash", 565, 13},
    {"Huntley", 579, 21},
    {"Euros", 587, 11},
    {"Phoenix", 603, 19},
    {"Camper", 483, 11},
    {"Journey", 508, 13},
    {"Stretch", 409, 101},
    {"Turismo", 451, 113},
    {"BF Injection", 424, 15},
    {"News Van", 582, 3},
    {"SAN Maverick", 488, 11},
    {"Ambulance", 416, 4},
    {"Infernus", 411, 181},
    {"NRG-500", 522, 161},
    {"Patriot", 470, 80},
    {"Shamal", 519, 156},
    {"Maverick", 487, 126},
    {"Skimmer", 460, 61},
    {"Stuntplane", 513, 91},
    {"Hotdog", 588, 3}
};

#define MAX_KIRALIK_ARAC 20
enum E_KIRALIK_ARAC
{
    kaID,
    kaSQLID,
    bool:kaKiralandi,
    kaKiralayan
}
new KiralikArac[MAX_KIRALIK_ARAC][E_KIRALIK_ARAC];

enum E_TPLISTE // Trisha
{
    Float:tpx,
    Float:tpy,
    Float:tpz,
    Float:tpa,
    tpisim[64]
};
new const tpInfo[][E_TPLISTE] = // Trisha
{
    {2089.4866,-1734.4131,13.5529,173.8157, "Idlewood"},
    {1814.7896,-1843.7277,13.5781,268.1991, "Unity Station"},
    {1189.3069,-1324.2451,13.5670,269.0008, "LSMD"},
    {1129.6182,-1425.0977,15.7979,359.6870, "Verona Mall"},
    {591.1243,-1239.0177,17.8856,23.3921, "Banka - Rodeo"},
    {547.9515,-1265.8826,17.2422,196.9317, "Grotti"},
    {71.5871,-1534.3779,5.1971,83.8221, "Giþe 1"},
    {622.7327,-1201.5934,18.4063,201.7002, "Giþe 2"},
    {596.0078,364.8625,18.9297,36.9843, "Giþe 3"},
    {1733.9467,509.2658,28.7171,339.4293, "Giþe 4"},
    {-198.228134, 252.448348, 12.078125, 0.0, "Giþe 5"},
    {384.2718,-2074.7500,7.8359,180.5504, "Santa Maria 1"},
    {154.5204,-1843.0039,3.7734,181.4402, "Santa Maria 2"},
    {1089.4905,-1796.2126,13.6201,92.5218, "Sürücü Kursu"},
    {2788.5295,-2442.4597,13.6335,273.4189, "Ocean Docks - Gemi"},
    {1582.3567,-2286.5330,13.5396,91.1354, "LS Airport"}
};

#define MAX_TSIRKET 100

enum E_TSIRKET // Trisha
{
    sid,
    sname[64],
    Float:sX,
    Float:sY,
    Float:sZ,
    sd
};
new tsInfo[MAX_TSIRKET][E_TSIRKET];

static const Float:FarmerZones[3][4] =
{
    {-305.748748, -1419.240478, -169.748748, -1323.240478},
    {-320.512207, -1553.339111, -232.512207, -1473.339111},
    {-592.265441, -1415.175537, -352.265441, -1271.175537}
};

static const Float:FishingZones[2][4] =
{
    {-182.210800, -1984.648193, 129.789199, -1752.648193},
    {88.508728, -2417.549560, 680.508728, -2065.549560}
};

static const Float:PlateZones[2][3] =
{
    {-1916.5311, -1663.2332, 23.1062},
    {-1821.7512, -152.4367, 9.4617}
};

enum E_JOBS
{
    jobName[32],
    Float:jobX,
    Float:jobY,
    Float:jobZ
};
static const Jobs[][E_JOBS] =
{
    {"Kamyon Þöförü", 2729.7517, -2451.5034, 17.5937},
    {"Tamirci", 1607.9742, -1557.3059, 13.5781},
    {"Taksici", 1743.1215, -1864.0278, 13.5744},
    {"Pizza Kuryesi", 792.6245, -1626.4695, 13.3906}
};

enum E_LICENSES
{
    Float:licenseX,
    Float:licenseY,
    Float:licenseZ,
    licenseType
};
static const LicensesPoint[][E_LICENSES] =
{
    {1111.9210, -1795.5494, 16.5938, EXAM_TYPE_VEHICLES},
    {1111.9205, -1798.2742, 16.5938, EXAM_TYPE_BOATS},
    {1111.9219, -1801.1891, 16.5938, EXAM_TYPE_PLANES}
};

static const Float:VehiclesCheckpoints[][] =
{
    {1077.9421, -1760.8413, 13.1062},
    {1069.7742, -1743.6262, 13.1792},
    {1125.6846, -1742.9705, 13.1255},
    {1173.2028, -1795.8419, 13.1255},
    {1171.8732, -1848.7852, 13.1255},
    {1064.7334, -1848.9559, 13.1275},
    {868.2761, -1767.7832, 13.1099},
    {662.2955, -1734.7739, 13.3051},
    {638.0414, -1608.3522, 15.2394},
    {637.0955, -1437.5593, 13.7718},
    {777.1824, -1402.8928, 13.0962},
    {1003.7480, -1403.3344, 12.7427},
    {1056.4824, -1461.9592, 13.0966},
    {1035.2485, -1601.7378, 13.1099},
    {1035.6083, -1708.9515, 13.1176},
    {1153.0645, -1714.3525, 13.5083},
    {1105.6610, -1738.3989, 13.2321}
};

static const Float:BoatCheckpoints[][] =
{
    {727.4661, -1666.3586, 0.2809},
    {723.5377, -1982.4436, 0.0888},
    {888.5245, -2217.5752, 0.3867},
    {948.2952, -2436.8877, 0.2301},
    {817.9743, -2402.8032, 0.3553},
    {636.3235, -2252.9739, -0.268},
    {266.1196, -2009.4774, -0.064},
    {073.9761, -1747.9764, 0.1840},
    {053.8207, -1324.1001, 0.0670},
    {120.4853, -1142.0376, -0.106},
    {059.5887, -1215.6620, 0.0118},
    {047.4178, -1406.1908, 0.1741},
    {068.7567, -1802.8402, 0.4297},
    {316.2246, -2129.4150, 0.5696},
    {670.3423, -2154.7117, 0.1586},
    {725.7950, -1955.5662, 0.0710},
    {719.1813, -1635.8275, -0.132}
};

static const Float:PlaneCheckpoints[][] =
{
    {1865.8528, -2493.6243, 14.0206},
    {1563.2400, -2498.1423, 52.9784},
    {1433.8646, -2183.6011, 130.979},
    {1335.1072, -1939.5640, 137.020},
    {1124.7063, -1567.8174, 215.672},
    {1416.3463, -1464.9330, 210.027},
    {1881.0192, -1355.0537, 176.554},
    {2343.5874, -1535.4296, 188.288},
    {2490.6567, -1746.6843, 198.788},
    {2551.4136, -1982.3473, 191.512},
    {2300.9019, -2448.9773, 100.085},
    {1828.0278, -2495.6440, 14.0391},
    {1761.8984, -2496.6870, 14.0280}
};

enum E_AWARDS
{
    awardCoyns,
    awardName[100]
};
static const AwardsList[][E_AWARDS] =
{
    {75, "Özel Telefon Numarasý"},
    {150, "Karakter Yapýlandýrma"}, // 50 idi
    {75, "Özel Plaka"},
    {50, "PM Kapatma Ýzni (/pm)"},
    {25, "OOC Kanal Kapatma Ýzni (/b)"},
    {100, "Bisiklet Alma Ýzni"},
    {200, "Seviye Atlama"},
    {500, "Donator (Bronz)"},
    {1000, "Donator (Silver)"},
    {1500, "Donator (Gold)"},
    {2000, "Donator (Platinum)"},
    {4000, "Donator (Diamond)"},
    {400, "Gate"},
    {1, "Harita (Bilgilendirme)"},
    {400, "Model Hakký (LQ Skin/Obje)"},
    {300, "Trucker Geliri Sýfýrlama"},
    {2000, "2X Payday"},
    {150, "Forum Adý Deðiþikliði"},
    {400, "TP Noktasý"},
    {350, "Trucker Yakýt Geliri Sýfýrlama"},
    {30, "Sürücü Lisansý"},
    {40, "Denizcilik Lisansý"},
    {50, "Uçuþ Lisansý"},
    {100, "Üçü bir arada! (Lisans)"},
    {300, "Karakter Slotu"}
};

enum matLISTESI
{
    modelID,
    TxdIsim[64],
    TextureIsim[64],
    Isim[64]
};

new MateryalIDleri[121][matLISTESI] =
{
    // {ID, txd, texture, isim},
    {0,"null","null", "Varsayýlan"},
    {4242,"seabed","des_dirt1", "Kum"},
    {3942, "bistro", "mp_snow", "Kar"},
    {3942, "bistro", "ahoodfence2", "Kaldýrým Taþý"},
    {3908, "libertyfar", "Grass_128HV", "Çim"},
    {3903, "libertyhi", "Grass", "Çim 2"},
    {3953, "rczero_track", "waterclear256", "Temiz su"},
    {3933, "weemap", "rocktb128", "Gri kayalar"},
    {4242, "seabed", "des_dirt1", "Kirli kum"},
    {4242, "seabed", "sw_sand", "Kirli kum 2"},
    {16008, "des_n", "des_ripplsand", "Çöl Kum Tepeleri (Sahara)"},
    {13734, "hillcliff_lahills", "cobbles_kb_256", "Kaldýrým taþý 2 (LS lighthouse)"},
    {16503, "desert", "des_redrock1", "Kýrmýzý kaya (Çölden)"},
    {16407, "des_airfieldhus", "btdeck256", "Ahþap zemin 2 (daha parlak)"},
    {16102, "des_cen", "sm_conc_hatch", "Sarý çizgiler (zeminde)"},
    {16021, "des_geyser", "shingles1", "Koyu gri çatý"},
    {16016, "des_n", "ranchwall1", "Çakýllý duvar"},
    {16571, "des_se1", "des_crackeddirt1", "Çatlamýþ zemin"},
    {18752, "Volcano","rocktb128", "Gri kaya"},
    {18752, "Volcano","lavalake", "Lav"},
    {18752, "Volcano","redgravel", "Lavýn altýndaki zemin"},
    {16503, "desert","des_redrock1", "Kýrmýzý kaya (çölde)"},
    {16407, "des_airfieldhus","btdeck256", "Ahþap zemin 2 (daha parlak)"},
    {16102, "des_cen","sm_conc_hatch", "Sarý çizgiler (zeminde)"},
    {16021, "des_geyser","shingles1", "Koyu gri çatý"},
    {16016, "des_n","ranchwall1", "Çakýllý duvar"},
    {16571, "des_se1","des_crackeddirt1", "Çatlamýþ zemin"},
    {19128, "dancefloors","dancefloor1", "Dans Zemini"},
    {2068, "cj_ammo_net","CJ_cammonet", "Kamuflaj aðý"},
    {18646, "matcolours","white", "Beyaz"},
    {18646, "matcolours","red", "Kýrmýzý"},
    {18646, "matcolours", "blue", "Mavi"},
    {18646, "matcolours","orange", "Turuncu"},
    {18646, "matcolours","green", "Yeþil"},
    {964, "cj_crate_will","CJ_FLIGHT_CASE", "Metal Plaka"},
    {967, "cj_barr_set_1","Stop2_64", "Dur Tabelasý"},
    {7981, "vgsairport02","chevronYB_64", "Siyah-Sarý Çizgiler"},
    {7981, "vgsairport02","redwhite_stripe", "Kýrmýzý-Beyaz Çizgiler"},
    {7980, "vegasairprtland","gridchev_64HV", "Siyah-Sarý Zemin"},
    {7980, "vegasairprtland","chevron64HVa", "Sarý-Beyaz Çizgiler"},
    {6866, "vgncnstrct1","Circus_gls_05", "Kýrmýzý Kareler"},
    {1281, "benches","trafficcone", "Beyaz-Kýrmýzý Çizgiler"},
    {6295, "lawland2","lightglass", "Büyük cam"},
    {6295, "lawland2","boardwalk2_la", "Ahþap"},
    {12938, "sw_apartments","sw_policeline", "Polis Çizgisi"},
    {16004, "des_teepee","des_wigwam", "Wigwam Motel - Duvar"},
    {16004, "des_teepee","des_wigwamdoor", "Wigwam Motel - Kapý"},
    {16004, "des_teepee","des_dustconc", "Tozlu Çimento"},
    {16005, "des_stownmain2","sanruf", "Gri Çatý"},
    {16005, "des_stownmain2","des_redslats", "Kýrmýzý Ahþap Zemin"},
    {16005, "des_stownmain2","duskyred_64", "Açýk Mor"},
    {16005, "des_stownmain2","des_ghotwood1", "Eski Ahþap Zemin"},
    {16005, "des_stownmain2","ws_green_wall1", "Duvar 1 (Yeþil)"},
    {16005, "des_stownmain2","alleydoor3", "Duvar 1 (Mavi)"},
    {16005, "des_stownmain2","newall4-4", "Duvar 2 (Normal)"},
    {16005, "vdes_stownmain2","crencouwall1", "Duvar 3 (Normal)"},
    {16005, "des_stownmain2", "black32", "Siyah"},
    {5016, "ground3_las", "ws_bigstones", "Cynder Bloklarý"},
    {5016, "ground3_las", "mural01_LA", "Jesus Saves"},
    {5033, "union_las", "lasunion98", "Camlý Beyaz Duvar"},
    {5033, "union_las", "ws_carparkwall2", "Dikey Sarý-Gri Çizgiler"},
    {14526, "sweetsmain", "ab_kitchunit2", "Beyaz panel"},
    {14526, "sweetsmain", "GB_Pan01", "Restaurant duvarý"},
    {14444, "carter_block_2", "cd_wall1", "Siyah Kulüp Duvarý"},
    {14593, "papaerchaseoffice", "ab_hosWallUpr", "Beyaz Duvar"},
    {15046, "svcunthoose", "sl_gallerywall1", "Beyaz duvar/zemin"},
    {14383, "burg_1", "hospital_wall2", "Hastane duvarý"},
    {15058, "svvgmid", "ah_wpaper3", "Çiçekli duvar kaðýdý"},
    {14533, "pleas_dome", "ab_velvor", "Siyah kulüp zemini"},
    {14526, "sweetsmain", "ab_tile1", "Fayans"},
    {4011, "lanblokb", "sl_rotnbrik", "Kýrmýzý tuðla"},
    {12931, "sw_brewery", "sw_brewbrick01", "Gri tuðla"},
    {12951, "ce_bankalley2", "sw_brick04", "Beyaz tuðla"},
    {18282, "cw_truckstopcs_t", "cw2_logwall", "Ahþap duvar"},
    {16475, "des_stownmots1", "des_redslats", "Kýrmýzý ahþap"},
    {4014, "civic01_lan", "parking1plain", "Tamamen gri çimento"},
    {10945, "skyscrap_sfse", "ws_carparkwall1", "Çizgili gri duvar"},
    {10086, "slapart01sfe", "sl_hirisergrnconc", "Yeþil duvar"},
    {7417, "vgnbball", "vgngewall1_256", "Gri tavan"},
    {8136, "vgsbikeschool", "ws_carparknew2", "Siyah perde"},
    {14672, "genintintsex", "la_carp3", "Beyaz perde"},
    {14847, "mp_policesf", "mp_cop_carpet", "Mavi perde"},
    {14707, "labig3int2", "HS2_3Wall9", "Kýrmýzý perde"},
    {16475, "des_stownmots1", "des_motelwall3", "Kumdan duvar"},
    {14771, "int_brothelint3", "GB_nastybar12", "Ahþap duvar"},
    {14777, "int_casinoint3", "GB_midbar05", "Ahþap zemin deseni"},
    {14709, "lamidint2", "mp_apt1_roomfloor", "Kýrmýzý ahþap zemin"},
    {14789, "ab_sfgymmain", "gym_floor6", "Koyup ahþap zemin"},
    {14709, "lamidint2", "mp_apt1_bathfloor1", "Banyo fayansý"},
    {14847, "mp_policesf", "mp_cop_marble", "Mermer duvar"},
    {18023, "genintintfastc", "CJ_PIZZA_WALL", "Pizza restaurant duvarý"},
    {14708, "labig1int2", "GB_restaursmll32", "Kýrmýzý panelli duvar"},
    {14709, "lamidint2", "mp_apt1_woodpanel", "Beyaz panelli duvar"},
    {18029, "genintintsmallrest", "GB_restaursmll05", "Taþtan duvar"},
    {14417, "dr_gsnew", "mp_gs_libwall", "Panelli koyu kahverengi duvar"},
    {14789, "ab_sfgymmain", "ab_wood02", "Koyu gri ahþap duvar"},
    {14847, "mp_policesf", "mp_cop_ceiling", "Beyaz ahþap"},
    {14417, "dr_gsnew", "mp_cloth_subwall", "Açýk mavi duvar"},
    {14444, "carter_block_2", "mp_carter_smoothwall", "Kirli beyaz duvar"},
    {14444, "carter_block_2", "mp_carter_ceiling", "Kirli koyu gri duvar"},
    {15031, "lasmallsave", "ab_marble_checks", "Kareli zemin"},
    {10826, "subpen1_sfse", "ws_sub_pen_conc3", "Koyu yeþil duvar"},
    {18030, "gap", "mp_furn_floor", "Açýk ahþap duvar"},
    {4014, "civic01_lan", "sl_laglasswall2", "Pencere/Mavi"},
    {18018, "genintintbarb", "GB_midbar07", "Panelli yeþil duvar"},
    {15042, "svsfsm", "GB_rapposter01", "Base5 Gangster poster"},
    {15042, "svsfsm", "GB_rapposter03", "Base5 Gangster poster2"},
    {14803, "bdupsnew", "Bdup2_wallpaperC", "Turuncu duvar"},
    {1823, "cj_tables", "CJ_WOOD6", "Ahþap materyal"},
    {1775, "cj_commercial", "cj_sheetmetal2", "Metal"},
    {1726, "mrk_couches2", "kb_sofa5_256", "Koltuk materyali"},
    {4833, "airprtrunway_las", "ws_bluelino", "Mavi muþamba"},
    {4833, "airprtrunway_las", "greyground256", "Gri Zemin"},
    {3440, "airportpillar", "metalic_64", "Metalik(64)"},
    {14652, "ab_trukstpa", "wood01", "Ahþap(01)"},
    {16646, "a51_alpha", "waterdirty256", "Kirli su"},
    {16640, "a51", "wallgreyred128", "Duvar(gri-kýrmýzý)"},
    {14534, "ab_wooziea", "ab_tileDiamond", "Elmas"},
    {3925, "weemap", "skyclouds", "Bulut"},
    {19893, "LaptopSAMP1", "LaptopScreen1", "Laptop (LS Haritasý)"},
    {19893, "LaptopSAMP1", "LaptopScreen2", "Laptop (Konsol)"}
};

enum E_OBJECTSLIST
{
    obFaction,
    obObject,
    obName[48],
    obType,
    obDefaultBone
};

static const PlayerObjectsList[][E_OBJECTSLIST] =
{
    {-1, 11746, "Anahtar", OBJECT_OTHER, BONE_RHAND},
    {-1, 19920, "Televizyon Kumandasý 1", OBJECT_OTHER, BONE_RHAND},
    {-1, 2344, "Televizyon Kumandasý 2", OBJECT_OTHER, BONE_RHAND},
    {-1, 19874, "Sabun", OBJECT_OTHER, BONE_RHAND},
    {-1, 19896, "Sigara Paketi", OBJECT_OTHER, BONE_RHAND},
    {-1, 19873, "Rulo Peçete", OBJECT_OTHER, BONE_RHAND},
    {-1, 19627, "Ýngiliz Anahtarý", OBJECT_OTHER, BONE_RHAND},
    {-1, 19621, "Benzin Bidonu", OBJECT_OTHER, BONE_RHAND},
    {-1, 19623, "Fotoðraf Makinesi", OBJECT_OTHER, BONE_RHAND},
    {-1, 18635, "Çekiç", OBJECT_OTHER, BONE_RHAND},
    {-1, 19583, "Býçak", OBJECT_OTHER, BONE_RHAND},
    {-1, 11719, "Cezve", OBJECT_OTHER, BONE_RHAND},
    {-1, 2713, "Temizlik Kovasý", OBJECT_OTHER, BONE_RHAND},
    {-1, 18634, "Levye", OBJECT_OTHER, BONE_RHAND},
    {-1, 19878, "Kaykay", OBJECT_OTHER, BONE_RFOOT},
    {-1, 19626, "Kürek", OBJECT_OTHER, BONE_RHAND},
    {-1, 18632, "Olta", OBJECT_OTHER, BONE_RHAND},

    {-1, 18894, "Sarý Bandana", OBJECT_BANDANA, BONE_HEAD},
    {-1, 18903, "Kahverengi Bandana", OBJECT_BANDANA, BONE_HEAD},
    {-1, 18905, "Zeytin Sarýsý Bandana", OBJECT_BANDANA, BONE_HEAD},
    {-1, 18907, "Mor ve Sarý Bandana", OBJECT_BANDANA, BONE_HEAD},
    {-1, 18910, "Turuncu Bandana", OBJECT_BANDANA, BONE_HEAD},
    {-1, 18909, "Açýk Mavi Bandana", OBJECT_BANDANA, BONE_HEAD},
    {-1, 18908, "Açýk & Koyu Mavi Bandana", OBJECT_BANDANA, BONE_HEAD},
    {-1, 18906, "Turuncu Bandana 2", OBJECT_BANDANA, BONE_HEAD},
    {-1, 18900, "Gökkuþaðý Bandana", OBJECT_BANDANA, BONE_HEAD},
    {-1, 18895, "Siyah, Kurukafalý Bandana", OBJECT_BANDANA, BONE_HEAD},
    {-1, 18893, "Krem & Kýrmýzý Bandana", OBJECT_BANDANA, BONE_HEAD},
    {-1, 18892, "Koyu Kýrmýzý, Desenli Bandana", OBJECT_BANDANA, BONE_HEAD},
    {-1, 18896, "Siyah Bandana", OBJECT_BANDANA, BONE_HEAD},
    {-1, 18901, "Kaplan Rengi Bandana", OBJECT_BANDANA, BONE_HEAD},
    {-1, 18891, "Mavi Bandana", OBJECT_BANDANA, BONE_HEAD},
    {-1, 18902, "Açýk Sarý Bandana", OBJECT_BANDANA, BONE_HEAD},
    {-1, 18904, "Bandana blu & nera", OBJECT_BANDANA, BONE_HEAD},

    {-1, 18922, "Kýrmýzý golf þapkasý", OBJECT_HAT, BONE_HEAD},
    {-1, 18923, "Mavi golf þapkasý", OBJECT_HAT,    BONE_HEAD},
    {-1, 18924, "Asker rengi gol þapkasý", OBJECT_HAT, BONE_HEAD},
    {-1, 18925, "Kýrmýzý golf þapkasý 2", OBJECT_HAT, BONE_HEAD},
    {-1, 18939, "Mavi, þimþek desenli Þapka", OBJECT_HAT, BONE_HEAD},
    {-1, 18940, "Mavi Þapka", OBJECT_HAT, BONE_HEAD},
    {-1, 18941, "Siyah Þapka", OBJECT_HAT, BONE_HEAD},
    {-1, 18942, "Gri Þapka", OBJECT_HAT, BONE_HEAD},
    {-1, 18943, "Yeþil Þapka", OBJECT_HAT, BONE_HEAD},
    {-1, 19160, "Ýþçi Þapkasý", OBJECT_HAT, BONE_HEAD},
    {-1, 18952, "Boks Kaský", OBJECT_HAT, BONE_HEAD},
    {-1, 18926, "Asker desenli Þapka", OBJECT_HAT, BONE_HEAD},
    {-1, 18927, "Asker desenli mavi Þapka", OBJECT_HAT, BONE_HEAD},
    {-1, 18928, "Gökkuþaðý Þapka", OBJECT_HAT, BONE_HEAD},
    {-1, 18929, "Yeþil desenli Þapka", OBJECT_HAT, BONE_HEAD},
    {-1, 18930, "Ateþ desenli Þapka", OBJECT_HAT, BONE_HEAD},
    {-1, 18932, "Turuncu Desenli Þapka ", OBJECT_HAT, BONE_HEAD},
    {-1, 18933, "Beyaz, siyah desenli Þapka", OBJECT_HAT, BONE_HEAD},
    {-1, 18934, "Kýrmýzý Þapka", OBJECT_HAT, BONE_HEAD},
    {-1, 18935, "Açýk Sarý cap ", OBJECT_HAT,   BONE_HEAD},
    {-1, 18961, "Kamyoncu Þapkasý", OBJECT_HAT, BONE_HEAD},
    {-1, 19558, "Pizzacý Þapkasý", OBJECT_HAT, BONE_HEAD},
    {-1, 18967, "Kamyoncu Þapkasý", OBJECT_HAT, BONE_HEAD},
    {-1, 18968, "Kase Tip Þapka", OBJECT_HAT,   BONE_HEAD},
    {-1, 18969, "Kase Tip Turuncu Þapka", OBJECT_HAT,   BONE_HEAD},
    {-1, 19064, "Noel Baba Beresi", OBJECT_HAT, BONE_HEAD},
    {-1, 19137, "Tavuk Kafasý, (Kostüm)", OBJECT_HAT, BONE_HEAD},
    {-1, 19528, "Cadý Þapkasý", OBJECT_HAT, BONE_HEAD},

    {-1, 19114, "Siyah ''Don't Shoot Me!'' Þapka", OBJECT_OTHER_HAT, BONE_HEAD},
    {-1, 19115, "Siyah, Kuru Kafalý Þapka", OBJECT_OTHER_HAT, BONE_HEAD},
    {-1, 19116, "Siyah Þapka", OBJECT_OTHER_HAT, BONE_HEAD},
    {-1, 19117, "Kýrmýzý Þapka Tip 2", OBJECT_OTHER_HAT, BONE_HEAD},
    {-1, 19118, "Yeþil Þapka Tip 2", OBJECT_OTHER_HAT, BONE_HEAD},
    {-1, 19119, "Mavi Þapka Tip 2", OBJECT_OTHER_HAT, BONE_HEAD},
    {-1, 19120, "Sarý Þapka Tip 2",  OBJECT_OTHER_HAT, BONE_HEAD},
    {-1, 19107, "Asker Desenli Þapka Tip 2", OBJECT_OTHER_HAT, BONE_HEAD},
    {-1, 19108, "Asker Desenli Þapka(2) Tip 2", OBJECT_OTHER_HAT, BONE_HEAD},
    {-1, 18638, "Ýþçi Kaský", OBJECT_OTHER_HAT, BONE_HEAD},
    {-1, 18947, "Yatay Þapka", OBJECT_OTHER_HAT, BONE_HEAD},
    {-1, 18948, "Mavi Fötr Þapka", OBJECT_OTHER_HAT, BONE_HEAD},
    {-1, 18949, "Yeþil Fötr Þapka", OBJECT_OTHER_HAT, BONE_HEAD},
    {-1, 18950, "Kýrmýzý Fötr Þapka", OBJECT_OTHER_HAT, BONE_HEAD},
    {-1, 18951, "Koyu Sarý Fötr Þapka", OBJECT_OTHER_HAT, BONE_HEAD},
    {-1, 19488, "Krem Rengi Fötr Þapka", OBJECT_OTHER_HAT, BONE_HEAD},
    {-1, 18946, "Fötr Þapka", OBJECT_OTHER_HAT, BONE_HEAD},
    {-1, 18639, "Siyah Kovboy Þapkasý", OBJECT_OTHER_HAT, BONE_HEAD},

    {-1, 19039, "Kol Saati", OBJECT_WATCH, BONE_RHAND},
    {-1, 19040, "Kol Saati (Gri, Siyah)", OBJECT_WATCH, BONE_RHAND},
    {-1, 19041, "Kol Saati (Kahverengi)", OBJECT_WATCH, BONE_RHAND},
    {-1, 19042, "Kol Saati (Altýn)", OBJECT_WATCH, BONE_RHAND},
    {-1, 19043, "Kol Saati (Gümüþ)", OBJECT_WATCH, BONE_RHAND},
    {-1, 19044, "Kol Saati (Mor)", OBJECT_WATCH, BONE_RHAND},
    {-1, 19045, "Kol Saati (Kýrmýzý)", OBJECT_WATCH, BONE_RHAND},
    {-1, 19046, "Kol Saati (Yeþil)", OBJECT_WATCH, BONE_RHAND},
    {-1, 19053, "Kol Saati (Askeri)", OBJECT_WATCH, BONE_RHAND},

    {-1, 19015, "Gözlük", OBJECT_GLASSES, BONE_HEAD},
    {-1, 19030, "Gözlük (Siyah)", OBJECT_GLASSES, BONE_HEAD},
    {-1, 19033, "Gözlük (Koyu Siyah) 2", OBJECT_GLASSES, BONE_HEAD},
    {-1, 19035, "Gözlük (Mavi)", OBJECT_GLASSES,    BONE_HEAD},
    {-1, 19023, "Gözlük (Açýk Mavi)", OBJECT_GLASSES, BONE_HEAD},
    {-1, 19024, "Gözlük (Mor)", OBJECT_GLASSES, BONE_HEAD},
    {-1, 19026, "Gözlük (Kýrmýzý)", OBJECT_GLASSES, BONE_HEAD},
    {-1, 19027, "Gözlük (Sarý)", OBJECT_GLASSES, BONE_HEAD},
    {-1, 19028, "Gözlük (Açýk Sarý)", OBJECT_GLASSES, BONE_HEAD},
    {-1, 19029, "Gözlük (Yeþil)", OBJECT_GLASSES, BONE_HEAD},
    {-1, 18977, "Kask (Kýrmýzý)", OBJECT_HELMET, BONE_HEAD},
    {-1, 18978, "Kask (Krem)", OBJECT_HELMET, BONE_HEAD},
    {-1, 18979, "Kask (Mor)",   OBJECT_HELMET, BONE_HEAD},
    {-1, 18645, "Kask (Kýrmýzý) 2", OBJECT_HELMET, BONE_HEAD},
    {-1, 18976, "Kask (Mavi)", OBJECT_HELMET, BONE_HEAD},

    {-1, 19038, "Maske (Yeþil)", OBJECT_MASK, BONE_HEAD},
    {-1, 19037, "Maske (Kýrmýzý)", OBJECT_MASK, BONE_HEAD},
    {-1, 19036, "Maske (Krem)", OBJECT_MASK, BONE_HEAD},
    {-1, 19801, "Hýrsýz Maskesi (Siyah)", OBJECT_MASK, BONE_HEAD},

    {-1, 19421, "Kulaklýk", OBJECT_EXTRA, BONE_HEAD},
    {-1, 19422, "Kulaklýk (Siyah)", OBJECT_EXTRA, BONE_HEAD},
    {-1, 19423, "Kulaklýk (Turuncu)", OBJECT_EXTRA, BONE_HEAD},
    {-1, 19472, "Gaz Maskesi", OBJECT_EXTRA, BONE_HEAD},
    {-1, 19517, "Saç 1", OBJECT_EXTRA, BONE_HEAD},
    {-1, 19077, "Saç 2", OBJECT_EXTRA, BONE_HEAD},
    {-1, 18975, "Saç 3", OBJECT_EXTRA, BONE_HEAD},
    {-1, 19516, "Saç 4", OBJECT_EXTRA, BONE_HEAD},
    {-1, 19518, "Afro Saç", OBJECT_EXTRA, BONE_HEAD},
    {-1, 19555, "Boks Eldiveni", OBJECT_EXTRA, BONE_HEAD},
    {-1, 19556, "Boks Eldiveni 2", OBJECT_EXTRA, BONE_HEAD},

    {-1, 1210,  "Kasa Çantasý", OBJECT_OTHER, BONE_RHAND},
    {-1, 11745, "Büyük Çanta/Valiz (Siyah)", OBJECT_OTHER, BONE_RHAND},
    {-1, 19559, "Seyahat Çantasý", OBJECT_OTHER, BONE_SPINE},
    {-1, 1550, "Aðzý Dolu Para Çantasý", OBJECT_OTHER, BONE_SPINE},
    {-1, 1310, "Paraþüt", OBJECT_OTHER, BONE_SPINE},
    {-1, 371, "Çanta", OBJECT_OTHER, BONE_SPINE},
    {-1, 19624, "Ýþ Çantasý",   OBJECT_OTHER, BONE_RHAND},
    {-1, 1212, "1 deste para", OBJECT_OTHER, BONE_RHAND},
    {-1, 19893, "Dizüstü Bilgisayar", OBJECT_OTHER, BONE_RHAND},
    {-1, 1650, "Benzin Bidonu 2", OBJECT_OTHER, BONE_RHAND},
    {-1, 19592, "Sepet", OBJECT_OTHER, BONE_RHAND},
    {-1, 1265, "Küçük Çöp Torbasý", OBJECT_OTHER, BONE_RHAND},
    {-1, 19610, "Mikrofon", OBJECT_OTHER, BONE_RHAND},
    {-1, 19317, "Siyah-Beyaz Elektro Gitar", OBJECT_OTHER, BONE_SPINE},

    {-1, 18641, "El Feneri", OBJECT_EXTRA, BONE_RHAND},
    {-1, 11738, "Ýlk Yardým Çantasý", OBJECT_EXTRA, BONE_RHAND},
    {-1, 1640, "Plaj Havlusu", OBJECT_EXTRA, BONE_RHAND},
    {-1, 1641, "Plaj Havlusu 1", OBJECT_EXTRA, BONE_RHAND},
    {-1, 1642, "Plaj Havlusu 2", OBJECT_EXTRA, BONE_RHAND},
    {-1, 1643, "Plaj Havlusu 3", OBJECT_EXTRA, BONE_RHAND},
    {-1, 19818, "Viski Bardaðý", OBJECT_EXTRA, BONE_RHAND},
    {-1, 19820, "Alkol Þiþesi", OBJECT_EXTRA, BONE_RHAND},
    {-1, 19823, "Big Cock Alkol Þiþesi", OBJECT_EXTRA, BONE_RHAND},
    {-1, 1485,  "Sigara", OBJECT_EXTRA, BONE_RHAND},

    {-1, 18912, "Siyah Maske/Bandana", OBJECT_BANDANA, BONE_HEAD},
    {-1, 18913, "Koyu Yeþil Maske/Bandana", OBJECT_BANDANA, BONE_HEAD},
    {-1, 18914, "Asker Desenli Maske/Bandana", OBJECT_BANDANA, BONE_HEAD},
    {-1, 18915, "Mor&Pembe Maske/Bandana", OBJECT_BANDANA, BONE_HEAD},
    {-1, 18916, "Açýk Sarý Maske/Bandana", OBJECT_BANDANA, BONE_HEAD},
    {-1, 18917, "Þimþek Desenli Maske/Bandana", OBJECT_BANDANA, BONE_HEAD},
    {-1, 18918, "Koyu Yeþil Maske/Bandana 2", OBJECT_BANDANA, BONE_HEAD},
    {-1, 18919, "Beyaz Maske/Bandana", OBJECT_BANDANA, BONE_HEAD},

    {-1, 11704, "Þeytan Maskesi", OBJECT_HALLOWEEN, BONE_HEAD},
    {-1, 19136, "Saç/Þapka", OBJECT_HALLOWEEN, BONE_HEAD},
    {-1, 19352, "Þapka/Fötr", OBJECT_HALLOWEEN, BONE_HEAD},
    {-1, 19557, "Seksi Maske", OBJECT_HALLOWEEN, BONE_HEAD},
    {-1, 19553, "Kovboy Þapkasý 2", OBJECT_HALLOWEEN, BONE_HEAD},
    {-1, 19320, "Bal kabaðý", OBJECT_HALLOWEEN, BONE_HEAD},

    {-1, 19318, "Elektro Gitar 2", OBJECT_OTHER, BONE_SPINE},
    {-1, 18640, "Kývýrcýk Saç", OBJECT_EXTRA, BONE_HEAD},
    {-1, 2404, "Rockstar Sörf Tahtasý 1", OBJECT_EXTRA, BONE_HEAD},
    {-1, 2405, "Sörf Tahtasý 2", OBJECT_EXTRA, BONE_HEAD},

    // LSFD
    {1, 366, "Yangýn Söndürücü", OBJECT_EXTRA, BONE_RHAND},
    {1, 19330, "FD Þapkasý", OBJECT_EXTRA, BONE_HEAD},
    {1, 19331, "FD Þapkasý 2", OBJECT_EXTRA, BONE_HEAD},
    {1, 11747, "Bandajlar", OBJECT_EXTRA, BONE_RHAND},
    {1, 11736, "Ýlkyardim Kiti", OBJECT_EXTRA, BONE_RHAND},
    {1, 19521, "Tören Þapkasý", OBJECT_EXTRA, BONE_HEAD},
    {1, -2011, "Gaz Maskesi", OBJECT_EXTRA, BONE_HEAD},
    {1, -2013, "Testere", OBJECT_EXTRA, BONE_HEAD},
    {1, -2015, "ALS Çantasý", OBJECT_EXTRA, BONE_HEAD},
    {1, -2016, "Telsiz", OBJECT_EXTRA, BONE_HEAD},
    {1, -2017, "Balyoz", OBJECT_EXTRA, BONE_HEAD},
    {1, -2018, "Vest", OBJECT_EXTRA, BONE_HEAD},
    {1, -2019, "Kep", OBJECT_EXTRA, BONE_HEAD},
    {1, -2020, "Kask", OBJECT_EXTRA, BONE_HEAD},
    {1, -2021, "SCBA", OBJECT_EXTRA, BONE_HEAD},

    // GOV
    {2, 18636, "PSS Þapkasý", OBJECT_GOVERNMENT, BONE_HEAD},
    {2, 18637, "PSS Kalkaný", OBJECT_GOVERNMENT, BONE_RHAND},
    {2, 19142, "Dýþ Yelek", OBJECT_GOVERNMENT, BONE_SPINE},
    {2, 19200, "Kask", OBJECT_GOVERNMENT, BONE_HEAD},
    {2, 18642, "Elektroþok", OBJECT_GOVERNMENT, BONE_RHAND},
    {2, 19904, "Turuncu Yelek", OBJECT_GOVERNMENT, BONE_SPINE},
    {2, 19631, "Balyoz", OBJECT_GOVERNMENT, BONE_RHAND},
    {2, 19622, "Süpürge", OBJECT_GOVERNMENT, BONE_RHAND},
    {2, 11749, "Kelepçe", OBJECT_GOVERNMENT, BONE_SPINE},
    {2, 19418, "Kelepçe", OBJECT_GOVERNMENT, BONE_SPINE},
    {2, 19558, "Pizzacý Þapkasý", OBJECT_GOVERNMENT, BONE_HEAD},
    {2, 19521, "Polis Tören Þapkasý", OBJECT_GOVERNMENT, BONE_HEAD},
    {2, 19773, "Silah Kýlýfý", OBJECT_GOVERNMENT, BONE_SPINE},
    {2, 19774, "Rozet", OBJECT_GOVERNMENT, BONE_SPINE},
    {2, 19942, "Telsiz", OBJECT_GOVERNMENT, BONE_SPINE},
    {2, 19330, "Fire Marshall Hat", OBJECT_GOVERNMENT, BONE_HEAD},
    {2, -2005, "FTF Yelek(Custom)", OBJECT_GOVERNMENT, BONE_SPINE},

    // LSPD
    {0, 19161, "Polis Þapkasý (Siyah)", OBJECT_POLICE, BONE_HEAD},
    {0, 19162, "Polis Þapkasý (Mavi)", OBJECT_POLICE, BONE_HEAD},
    {0, 19520, "Pilot Þapkasý", OBJECT_POLICE, BONE_HEAD},
    {0, 19515, "SWAT Zýrhý (Gri)", OBJECT_POLICE, BONE_SPINE},
    {0, 19142, "SWAT Zýrhý", OBJECT_POLICE, BONE_SPINE},
    {0, 19904, "Ýþ Yeleði", OBJECT_POLICE, BONE_SPINE},
    {0, 19200, "Polis Kaský", OBJECT_POLICE, BONE_HEAD},
    {0, 19141, "SWAT Kaský", OBJECT_POLICE, BONE_HEAD},
    {0, 19138, "Polis Gözlüðü (Siyah)", OBJECT_POLICE, BONE_HEAD},
    {0, 19139, "Polis Gözlüðü (Kýrmýzý)", OBJECT_POLICE, BONE_HEAD},
    {0, 19140, "Polis Gözlüðü (Mavi)", OBJECT_POLICE, BONE_HEAD},
    {0, 19773, "Silah Kýlýfý", OBJECT_POLICE, BONE_SPINE},
    {0, 19775, "Polis Valizi", OBJECT_POLICE, BONE_SPINE},
    {0, 19942, "Telsiz", OBJECT_POLICE, BONE_SPINE},
    {0, 11750, "Kapalý Kelepçe", OBJECT_POLICE, BONE_SPINE},
    {0, 18637, "Polis Kalkaný", OBJECT_POLICE, BONE_RHAND},
    {0, 19347, "Polis Rozeti", OBJECT_POLICE, BONE_SPINE},
    {0, 19418, "Kelepçe", OBJECT_POLICE, BONE_SPINE},
    {0, 19942, "Telsiz", OBJECT_POLICE, BONE_SPINE},
    {0, 19521, "Polis Þapkasý", OBJECT_POLICE, BONE_SPINE},
    {0, 18636, "Polis Þapkasý (Siyah 2)", OBJECT_POLICE, BONE_SPINE},
    {0, 19942, "Baton (Nightstick)", OBJECT_POLICE, BONE_SPINE},
    {0, 19778, "Rütbe 1", OBJECT_POLICE, BONE_SPINE},
    {0, 19779, "Rütbe 2", OBJECT_POLICE, BONE_SPINE},
    {0, 19780, "Rütbe 3", OBJECT_POLICE, BONE_SPINE},
    {0, 19781, "Rütbe 4", OBJECT_POLICE, BONE_SPINE},
    {0, 19782, "Rütbe 5", OBJECT_POLICE, BONE_SPINE},
    {0, 19783, "Rütbe 6", OBJECT_POLICE, BONE_SPINE},
    {0, 19784, "Rütbe 7", OBJECT_POLICE, BONE_SPINE},
    {0, 19785, "Rütbe 8", OBJECT_POLICE, BONE_SPINE},
    {0, -2006, "Yelek", OBJECT_POLICE, BONE_SPINE}
};

enum E_VEHICLE_COMMODITIES
{
    sModel,
    sSlot,
    bool:sVisible,
    Float:sX,
    Float:sY,
    Float:sZ,
    Float:sRX,
    Float:sRY,
    Float:sRZ
};
static const VehicleCommoditiesInfo[][E_VEHICLE_COMMODITIES] =
{
    {600, 2, true, -0.349999, -0.999999, 0.204999, 0.000000, 0.000000, 0.000000}, //Picador - primo
    {600, 2, true, 0.384999, -0.999999, 0.204999, 0.000000, 0.000000, 0.000000}, //Picador - secondo

    {543, 2, true, -0.004999, -2.064999, -0.10, 0.000000, 0.000000, 0.000000}, //Sadler - primo
    {543, 2, true, -0.019999, -1.049999, -0.10, 0.000000, 0.000000, 0.000000}, //Sadler - secondo

    {422, 2, true, 0.000000, -1.884998, -0.10, 0.000000, 0.000000, 0.000000}, //Bobcat - primo
    {422, 2, true, -0.004999, -0.994999, -0.10, 0.000000, 0.000000, 0.000000}, //Bobcat - secondo

    {478, 4, true, -0.524999, -1.899998, -0.10, 0.000000, 0.000000, 0.000000}, //Walton - primo
    {478, 4, true, -0.519999, -0.994999, -0.10, 0.000000, 0.000000, 0.000000}, //Walton - secondo
    {478, 4, true, 0.439999, -0.989999, -0.10, 0.000000, 0.000000, 0.000000}, //Walton - terzo
    {478, 4, true, 0.439999, -1.914998, -0.10, 0.000000, 0.000000, 0.000000}, //Walton - quarto

    {554, 4, true, -0.524999, -2.150001, -0.10, 0.000000, 0.000000, 0.000000}, //Yosemite - primo
    {554, 4, true, -0.519999, -1.099999, -0.10, 0.000000, 0.000000, 0.000000}, //Yosemite - secondo
    {554, 4, true, 0.439999, -1.114999, -0.10, 0.000000, 0.000000, 0.000000}, //Yosemite - terzo
    {554, 4, true, 0.439999, -2.150001, -0.10, 0.000000, 0.000000, 0.000000}, //Yosemite - quarto

    {413, 8, false, 0.000000, -3.745038, 0.469999, 0.000000, 0.000000, 0.000000}, //Pony
    {459, 8, false, 0.000000, -3.745038, 0.469999, 0.000000, 0.000000, 0.000000}, //TopFun
    {482, 8, false, 0.000000, -3.745038, 0.469999, 0.000000, 0.000000, 0.000000}, //Burrito
    {440, 8, false, 0.000000, -3.745038, 0.469999, 0.000000, 0.000000, 0.000000}, //Rumpo
    {498, 16, false, 0.000000, -3.745038, 0.469999, 0.000000, 0.000000, 0.000000}, //Boxville
    {499, 16, false, 0.000000, -3.745038, 0.469999, 0.000000, 0.000000, 0.000000}, //Benson
    {414, 16, false, 0.000000, -3.745038, 0.469999, 0.000000, 0.000000, 0.000000}, //Mule
    {456, 19, false, 0.000000, -3.745038, 0.469999, 0.000000, 0.000000, 0.000000}, //Yankee
    {483, 4, false, 0.000000, -3.745038, 0.469999, 0.000000, 0.000000, 0.000000}, //Camper

    {591, 28, false, 0.000000, -3.745038, 0.469999, 0.000000, 0.000000, 0.000000}, // Kasa 1
    {435, 32, false, 0.000000, -3.745038, 0.469999, 0.000000, 0.000000, 0.000000} // Kasa 2
};

enum E_BUYFURNITURES
{
    oSlot,
    oModelID,
    oStr[100],
    oPrice
};

static const BuyableFurnitures[][E_BUYFURNITURES] =
{
//duvarlar 19
    {0, 19353, "Duvar 1(Turuncu-Beyaz)", 5},
    {0, 19354, "Duvar 2(Siyah Desenli)", 5},
    {0, 19355, "Duvar 3(Tuðla)", 5},
    {0, 19356, "Duvar 4(Ahþap)", 5},
    {0, 19357, "Duvar 5(Beton)", 5},
    {0, 19358, "Duvar 6(Gri-Siyah)", 5},
    {0, 19359, "Duvar 7(Beton2)", 5},
    {0, 19360, "Duvar 8(Ahþap2)", 5},
    {0, 19361, "Duvar 9(Turuncu)", 5},
    {0, 19362, "Duvar 10(Taþ)", 5},
    {0, 19363, "Duvar 11(Beton2)", 5},
    {0, 19364, "Duvar 12(Tuðla2)", 5},
    {0, 19365, "Duvar 13(Beton2)", 5},
    {0, 19366, "Duvar 14(Ahþap3)", 5},
    {0, 19367, "Duvar 15(Beton3)", 5},
    {0, 19368, "Duvar 16(Beton4)", 5},
    {0, 19369, "Duvar 17(Beton5)", 5},
    {0, 19370, "Duvar 18(Ahþap4)", 5},
    {0, 19371, "Duvar 19(Beton6)", 5},
    {0, 19372, "Duvar 20(Taþ2)", 5},
    {0, 19373, "Duvar 21(Yeþil)", 5},
    {0, 19375, "Duvar 22(Ahþap5)", 5},
    {0, 19376, "Duvar 23(Ahþap6)", 5},
    {0, 19377, "Duvar 24(Beton7)", 5},
    {0, 19378, "Duvar 25(Ahþap7)", 5},
    {0, 19379, "Duvar 26(Ahþap8)", 5},
    {0, 19380, "Duvar 27(Taþ3)", 5},
    {0, 19381, "Duvar 28(Yeþil2)", 5},
    {0, 19383, "Kapý Giriþi 1(Turuncu-Beyaz)", 5},
    {0, 19384, "Kapý Giriþi 2(Siyah Desenli)", 5},
    {0, 19385, "Kapý Giriþi 3(Tuðla)", 5},
    {0, 19386, "Kapý Giriþi 4(Ahþap)", 5},
    {0, 19387, "Kapý Giriþi 5(Beton)", 5},
    {0, 19388, "Kapý Giriþi 6(Gri-Siyah)", 5},
    {0, 19389, "Kapý Giriþi 7(Beton2)", 5},
    {0, 19390, "Kapý Giriþi 8(Turuncu)", 5},
    {0, 19391, "Kapý Giriþi 9(Beton)", 5},
    {0, 19392, "Kapý Giriþi 10(Beton2)", 5},
    {0, 19393, "Kapý Giriþi 11(Tuðla)", 5},
    {0, 19394, "Kapý Giriþi 12(Beton3)", 5},
    {0, 19395, "Kapý Giriþi 12(Taþ)", 5},
    {0, 19396, "Kapý Giriþi 13(Beton4)", 5},
    {0, 19397, "Kapý Giriþi 14(Beton5)", 5},
    {0, 19465, "Kapý Giriþi 15(Gri)", 5},
    {0, 19398, "Kapý Giriþi 15(Beton6)", 5},
    {0, 19399, "Pencere Giriþi 1(Kýrmýzý-Beyaz)", 5},
    {0, 19400, "Pencere Giriþi 2(Siyah Desenli)", 5},
    {0, 19401, "Pencere Giriþi 3(Tuðla)", 5},
    {0, 19402, "Pencere Giriþi 4(Ahþap)", 5},
    {0, 19403, "Pencere Giriþi 5(Beton)", 5},
    {0, 19404, "Pencere Giriþi 6(Siyah-Gri)", 5},
    {0, 19405, "Pencere Giriþi 7(Beton2)", 5},
    {0, 19406, "Pencere Giriþi 8(Ahþap2)", 5},
    {0, 19407, "Pencere Giriþi 9(Turuncu)", 5},
    {0, 19408, "Pencere Giriþi 10(Taþ)", 5},
    {0, 19409, "Pencere Giriþi 11(Beton3)", 5},
    {0, 19410, "Pencere Giriþi 12(Tuðla)", 5},
    {0, 19411, "Pencere Giriþi 13(Taþ2)", 5},
    {0, 19412, "Pencere Giriþi 14(Ahþap3)", 5},
    {0, 19413, "Pencere Giriþi 15(Beton4)", 5},
    {0, 19414, "Pencere Giriþi 16(Beton5)", 5},
    {0, 19415, "Pencere Giriþi 17(Beton6)", 5},
    {0, 19416, "Pencere Giriþi 18(Ahþap4)", 5},
    {0, 19417, "Pencere Giriþi 19(Beton7)", 5},
    {0, 3034, "Pencere Giriþi 1", 5},
    {0, 3032, "Pencere Giriþi 2", 5},
    {0, 19426, "Ýnce Duvar 1(Kýrmýzý-Beyaz)", 5},
    {0, 19427, "Ýnce Duvar 2(Siyah Desenli)", 5},
    {0, 19428, "Ýnce Duvar 3(Tuðla)", 5},
    {0, 19429, "Ýnce Duvar 4(Ahþap)", 5},
    {0, 19430, "Ýnce Duvar 5(Beton)", 5},
    {0, 19431, "Ýnce Duvar 6(Gri-Siyah)", 5},
    {0, 19432, "Ýnce Duvar 7(Beton2)", 5},
    {0, 19433, "Ýnce Duvar 8(Ahþap2)", 5},
    {0, 19434, "Ýnce Duvar 9(Turuncu)", 5},
    {0, 19435, "Ýnce Duvar 10(Taþ)", 5},
    {0, 19436, "Ýnce Duvar 11(Taþ2)", 5},
    {0, 19437, "Ýnce Duvar 12(Tuðla)", 5},
    {0, 19438, "Ýnce Duvar 13(Beton)", 5},
    {0, 19439, "Ýnce Duvar 14(Ahþap3)", 5},
    {0, 19440, "Ýnce Duvar 15(Tuðla1)", 5},
    {0, 19441, "Ýnce Duvar 16(Taþ3)", 5},
    {0, 19442, "Ýnce Duvar 17(Taþ4)", 5},
    {0, 19443, "Ýnce Duvar 18(Ahþap3)", 5},
    {0, 19444, "Ýnce Duvar 19(Beton2)", 5},
    {0, 19445, "Geniþ Duvar 1(Kýrmýzý Beyaz)", 5},
    {0, 19446, "Geniþ Duvar 2(Siyah Desenli)", 5},
    {0, 19447, "Geniþ Duvar 3(Taþ)", 5},
    {0, 19448, "Geniþ Duvar 4(Ahþap)", 5},
    {0, 19449, "Geniþ Duvar 5(Beton)", 5},
    {0, 19450, "Geniþ Duvar 6(Gri-Siyah)", 5},
    {0, 19451, "Geniþ Duvar 7(Beton2)", 5},
    {0, 19452, "Geniþ Duvar 8(Ahþap)", 5},
    {0, 19453, "Geniþ Duvar 9(Turuncu)", 5},
    {0, 19454, "Geniþ Duvar 10(Taþ2)", 5},
    {0, 19455, "Geniþ Duvar 11(Beton3)", 5},
    {0, 19456, "Geniþ Duvar 22(Tuðla)", 5},
    {0, 19457, "Geniþ Duvar 13(Beton4)", 5},
    {0, 19458, "Geniþ Duvar 14(Ahþap2)", 5},
    {0, 19459, "Geniþ Duvar 15(Taþ3)", 5},
    {0, 19460, "Geniþ Duvar 16(Taþ4)", 5},
    {0, 19461, "Geniþ Duvar 17(Taþ5)", 5},
    {0, 19462, "Geniþ Duvar 18(Ahþap3)", 5},
    {0, 19463, "Geniþ Duvar 19(Beton4)", 5},
    {0, 19464, "Geniþ Duvar 20(Gri)", 5},

// mutfak 19
    {1, 2013, "Tahta mutfak dolabý 1", 5},
    {1, 2014, "Tahta mutfak dolabý 2", 5},
    {1, 2015, "Tahta mutfak dolabý 3", 5},
    {1, 2016, "Tahta mutfak dolabý 4", 5},
    {1, 2017, "Tahta mutfak dolabý 5", 5},
    {1, 2018, "Tahta mutfak dolabý 6", 5},
    {1, 2019, "Tahta mutfak dolabý 7 ", 5},
    {1, 2022, "Tahta mutfak dolabý 8", 5},
    {1, 2142, "Tahta mutfak dolabý 9", 5},
    {1, 2143, "Tahta mutfak dolabý 10", 5},
    {1, 2145, "Tahta mutfak dolabý 11", 5},
    {1, 2148, "Tahta mutfak dolabý 12", 5},
    {1, 2334, "Tahta mutfak dolabý 13", 5},
    {1, 2335, "Tahta mutfak dolabý 14", 5},
    {1, 2336, "Tahta mutfak dolabý 15", 5},
    {1, 2337, "Tahta mutfak dolabý 16", 5},
    {1, 2156, "Tahta mutfak dolabý 17", 5},
    {1, 2157, "Tahta mutfak dolabý 18", 5},
    {1, 2158, "Tahta mutfak dolabý 19", 5},
    {1, 2159, "Tahta mutfak dolabý 20", 5},
    {1, 2160, "Tahta mutfak dolabý 21", 5},
    {1, 2131, "Beyaz mutfak dolabý 1", 5},
    {1, 2132, "Beyaz mutfak dolabý 2", 5},
    {1, 2133, "Beyaz mutfak dolabý 3", 5},
    {1, 2134, "Beyaz mutfak dolabý 4", 5},
    {1, 2141, "Beyaz mutfak dolabý 5", 5},
    {1, 2151, "Beyaz mutfak dolabý 6", 5},
    {1, 2152, "Beyaz mutfak dolabý 7", 5},
    {1, 2153, "Beyaz mutfak dolabý 8", 5},
    {1, 2154, "Beyaz mutfak dolabý 9", 5},
    {1, 2155, "Beyaz mutfak dolabý 10", 5},
    {1, 2135, "Modern mutfak dolabý 1", 5},
    {1, 2136, "Modern mutfak dolabý 2", 5},
    {1, 2137, "Modern mutfak dolabý 3", 5},
    {1, 2138, "Modern mutfak dolabý 4", 5},
    {1, 2139, "Modern mutfak dolabý 5", 5},
    {1, 2140, "Modern mutfak dolabý 6", 5},
    {1, 2305, "Modern mutfak dolabý 7", 5},
    {1, 2127, "Kýrmýzý mutfak dolabý 1", 5},
    {1, 2128, "Kýrmýzý mutfak dolabý 2", 5},
    {1, 2129, "Kýrmýzý mutfak dolabý 3", 5},
    {1, 2130, "Kýrmýzý mutfak dolabý 4", 5},
    {1, 2304, "Kýrmýzý mutfak dolabý 5", 5},
    {1, 2812, "Kirli tabaklar 1", 5},
    {1, 2830, "Kirli tabaklar 2", 5},
    {1, 2831, "Kirli tabaklar 3", 5},
    {1, 2832, "Kirli yemek takýmý 1", 5},
    {1, 2848, "Kirli yemek takýmý 2", 5},
    {1, 2849, "Kirli yemek takýmý 3", 5},
    {1, 2850, "Kirli yemek takýmý 4", 5},
    {1, 2851, "Kirli yemek takýmý 5", 5},
    {1, 2820, "Kirli yemek takýmý 6", 5},
    {1, 2822, "Tabaklar", 5},
    {1, 2829,  "Tabak çatal býçak", 5},
    {1, 19583, "Býçak", 5},
    {1, 19586, "Spatula", 5},
    {1, 2862, "Tabaklar ve kaseler 1", 5},
    {1, 2863, "Tabaklar ve kaseler 2", 5},
    {1, 2865, "Tabaklar ve kaseler 3", 5},
    {1, 2864, "Kaseler", 5},
    {1, 2423, "Mutfak tezgahý 1", 5},
    {1, 2424, "Mutfak tezgahý 2", 5},
    {1, 19584, "Kap 1", 5},
    {1, 19585, "Kap 2", 5},
    {1, 19818, "Kadeh 1", 5},
    {1, 19819, "Kadeh 2", 5},
    {1, 2434, "Tahta mutfak tezgahý 1", 5},
    {1, 2435, "Tahta mutfak tezgahý 2", 5},
    {1, 2439, "Siyah mutfak tezgahý 1", 5},
    {1, 2440, "Siyah mutfak tezgahý 2", 5},
    {1, 2441, "Taþ mutfak tezgahý 1", 5},
    {1, 2442, "Taþ mutfak tezgahý 2", 5},
    {1, 2444, "Taþ mutfak tezgahý 3", 5},
    {1, 2445, "Taþ mutfak tezgahý 4", 5},
    {1, 2446, "Kýrmýzý mutfak tezgahý 1", 5},
    {1, 2450, "Kýrmýzý mutfak tezgahý 2", 5},
    {1, 2454, "Renkli mutfak tezgahý 1", 5},
    {1, 2455, "Renkli mutfak tezgahý 2", 5},
    {1, 2645, "Pizza Stack Menüsü", 5},
    {1, 2439, "Pizza Stack Tezgahý", 5},
    {1, 2451, "Pizza Stack Izgara", 5},
    {1, 19581, "Tava", 5},
    {1, 2453, "Pizza Alaný", 5},
    {1, 14384, "Hazýr Mutfak Seti 1", 5},
    {1, 14720, "Hazýr Mutfak Seti 2", 5},
    {1,19937, "Büfe Parçasý 1", 5},
    {1,19938, "Büfe Parçasý 2", 5},
    {1,19939, "Büfe Parçasý 3", 5},
    {1,19940, "Büfe Parçasý 4", 5},
    {1,19993, "Tekli Kase", 5},
    {1, 11744, "Tek Tabak", 5},
    {1, 11719, "Küçük Tencere", 5},
    {1, 11718, "Büyük Tencere", 5},
    {1, 11715, "Catal", 5},
    {1, 19924, "Davlumbaz", 5},
    {1, 19927, "Büfe Lavabosu", 5},
    {1, 19923, "Büyük Ocak", 5},
    {1, 19916, "Buz Dolabý", 5},
    {1, 2447, "Kýrmýzý mutfak tezgahý 3", 5},
    {1, 2448, "Kýrmýzý mutfak tezgahý 4", 5},
    {1, 2449, "Kýrmýzý mutfak tezgahý 5", 5},
    //Koltuklar ve Sandalyeler
    {2, 2571, "2 Koltuk - 1 Masa", 5},
    {2, 2808, "Kýrmýzý Döþemeli Koltuk", 5},
    {2, 3657, "Büyük Bank", 5},
    {2, 1704, "Tekli Siyah Deri Koltuk", 5},
    {2, 1705, "Tekli Kahverengi Deri Koltuk", 5},
    {2, 1708, "Tekli Siyah Deri Koltuk 2", 5},
    {2, 1711, "Kahverengi Tekli Koltuk", 5},
    {2, 1727, "Tekli Siyah Deri Koltuk 3", 5},
    {2, 1735, "Sarý Desenli Tekli Koltuk", 5},
    {2, 1746, "Kahverengi Deri Tabure", 5},
    {2, 1754, "Tekli Kahverengi Deri Koltuk", 5},
    {2, 1755, "Desenli Kaplamalý Tekli Koltuk", 5},
    {2, 1758, "Kahverengi Kaplamalý Tekli Koltuk", 5},
    {2, 1759, "Tekli Kahverengi Ayaklý Koltuk", 5},
    {2, 1762, "Desenli Kaplamalý Tekli Koltuk 2", 5},
    {2, 1765, "Desenli Kaplamalý Tekli Koltuk 3", 5},
    {2, 1767, "Desenli Kaplamalý Tekli Koltuk 4", 5},
    {2, 1769, "Desenli Kaplamalý Tekli Koltuk 5", 5},
    {2, 1702, "Kahverengi Deri Kanepe", 5},
    {2, 1703, "Siyah Deri Kanepe", 5},
    {2, 1706, "Kahverengi Kaplamalý Kanepe", 5},
    {2, 1707, "Turuncu-Gri Kanepe", 5},
    {2, 1709, "Köþe Koltuk Takýmý", 5},
    {2, 1710, "Kahverengi Geniþ Koltuk", 5},
    {2, 1712, "Kahverengi Kanepe", 5},
    {2, 1713, "Siyah Deri Kanepe", 5},
    {2, 1753, "Kahverengi Deri Kanepe", 5},
    {2, 1756, "Kahverengi Kaplama Kanepe", 5},
    {2, 1757, "Kahverengi Kaplama Kanepe 2", 5},
    {2, 1760, "Desenli Kaplama Kanepe", 5},
    {2, 1761, "Desenli Kaplama Kanepe 2", 5},
    {2, 1763, "Ayaklý Kanepe", 5},
    {2, 1764, "Desenli Kaplama Kanepe 3", 5},
    {2, 1766, "Desenli Kaplama Kanepe 4", 5},
    {2, 1768, "Desenli Kaplama Kanepe 5", 5},
    {2, 11717, "Turuncu Kanepe", 5},
    {2, 1663, "Siyah Ofis Sandalyesi 1", 5},
    {2, 1671, "Siyah Ofis Sandalyesi 2", 5},
    {2, 1714, "Siyah Ofis Sandalyesi 3", 5},
    {2, 1720, "Tahta Sandalye 1", 5},
    {2, 1721, "Ofis Sandalyesi", 5},
    {2, 1722, "Ofis Sandalyesi 2", 5},
    {2, 1739, "Yemek Masasý Sandalyesi 1", 5},
    {2, 1811, "Yemek Masasý Sandalyesi 2", 5},
    {2, 2079, "Yemek Masasý Sandalyesi 3", 5},
    {2, 2120, "Yemek Masasý Sandalyesi 4", 5},
    {2, 2122, "Yemek Masasý Sandalyesi 5", 5},
    {2, 2788, "Yemek Masasý Sandalyesi 6", 5},
    {2, 1806, "Bilgisayar Sandalyesi", 5},
    {2, 1810, "Katlanýr Sandalye", 5},
    {2, 2096, "Sallanan Sandalye 1", 5},
    {2, 11734, "Sallanan Sandalye 2", 5},
    {2, 2121, "Kýrmýzý Plasik Sandalye", 5},
    {2, 2123, "Beyaz Kaplama Sandalye", 5},
    {2, 2124, "Tahta Sandalye 2", 5},
    {2, 2310, "Tahta Sandalye 3", 5},
    {2, 2724, "Deri Kaplama Sandalye 1", 5},
    {2, 2776, "Deri Kaplama Sandalye 2", 5},
    {2, 1716, "Bar Taburesi", 5},
    {2, 1805, "Kýrmýzý Kaplama Tabure", 5},
    {2, 2125, "Kýrmýzý Yemek Taburesi", 5},
    {2, 2350, "Tahta Tabure", 5},
    {2, 2723, "Deri Kaplama Tabure", 5},
    {2, 11687, "Yeþil Tabure", 5},
    {2, 1562, "Uçak koltuðu", 5},
    {2, 11689, "Geniþ Koltuk", 5},
    {2, 11682, "Deri Kanepe Köþe 1", 5},
    {2, 11683, "Deri Kanepe Köþe 2", 5},
    {2, 11685, "Deri Kanepe Orta", 5},

    //Yataklar 19
    {3, 1800, "Tek kiþilik yatak 1", 5},
    {3, 1794, "Tek kiþilik yatak 2", 5},
    {3, 1796, "Tek kiþilik yatak 3", 5},
    {3, 1812, "Tek kiþilik yatak 4", 5},
    {3, 2603, "Tek kiþilik yatak 4", 5},
    {3, 2302, "Tek kiþilik yatak 5", 5},
    {3, 1700, "Çift kiþilik yatak 1", 5},
    {3, 1701, "Çift kiþilik yatak 2", 5},
    {3, 1745, "Çift kiþilik yatak 3", 5},
    {3, 1700, "Çift kiþilik yatak 4", 5},
    {3, 2300, "Çift kiþilik yatak 5", 5},
    {3, 2301, "Çift kiþilik yatak 6", 5},
    {3, 1793, "Alçak yatak", 5},
    {3, 1797, "Yatak 1", 5},
    {3, 1798, "Yatak 2", 5},
    {3, 1799, "Orta boy çift kiþilik yatak 1", 5},
    {3, 1802, "Orta boy çift kiþilik yatak 2", 5},
    {3, 1803, "Orta boy çift kiþilik yatak 3", 5},
    {3, 2299, "Orta boy çift kiþilik yatak 4", 5},
    {3, 1801, "Orta boy çift kiþilik yatak 5", 5},
    {3, 2090, "Orta boy çift kiþilik yatak 6", 5},
    {3, 2563, "Büyük boy çift kiþilik yatak 1", 5},
    {3, 2298, "Büyük boy çift kiþilik yatak 2", 5},
    {3, 2566, "Büyük boy çift kiþilik yatak 2", 5},
    {3, 2564, "Ýki ayrý yatak", 5},
    {3, 15035, "Hazýr yatak odasý", 5},
    {3, 11720, "Kýrmýzý Örtülü Yatak", 5},
    {3, 1799, "Sarý Yastýklý Yatak", 5},

    //Aydýnlatma 19
    {4, 2238, "Siyah Lav Lambasý", 5},
    {4, 2196, "Beyaz Masa Lambasý", 5},
    {4, 2726, "Kýrmýzý Lamba 1", 5},
    {4, 3534, "Kýrmýzý Lamba 2", 5},
    {4, 2069, "Ayaklý Lamba 1", 5},
    {4, 2108, "Ayaklý Lamba 2", 5},
    {4, 2239, "Ayaklý Lamba 3", 5},
    {4, 3801, "Duvar Þamdaný 1", 5},
    {4, 3809, "Duvar Þamdaný 2", 5},
    {4, 1731, "Duvar Þamdaný 3", 5},
    {4, 3785, "Led Projektör", 5},
    {4, 1734, "Avize 1", 5},
    {4, 2073, "Avize 2", 5},
    {4, 2076, "Avize 3", 5},
    {4, 11726, "Avize 4", 5},
    {4, 19806, "Avize 5", 5},
    {4, 2074, "Tavan Lambasý 1", 5},
    {4, 2075, "Tavan Lambasý 2", 5},
    {4, 1893, "Tavan Lambasý 3", 5},
    {4, 16779, "Pervaneli Avize", 5},
    {4, 18647, "Kýrmýzý Neon", 5},
    {4, 18648, "Mavi Neon", 5},
    {4, 18649, "Yeþil Neon", 5},
    {4, 18650, "Sarý Neon", 5},
    {4, 18651, "Pembe Neon", 5},
    {4, 18652, "Beyaz Neon", 5},
    {4, 19145, "Yeþil Spot", 5},
    {4, 19146, "Beyaz Spot", 5},
    {4, 19147, "Sarý Spot", 5},
    {4, 19148, "Pembe Spot", 5},
    {4, 11727, "Duvar Lambasý", 5},
    {4, 19121, "Beyaz ýþýk direði", 5},
    {4, 19122, "Mavi ýþýk direði", 5},
    {4, 19123, "Yeþil ýþýk direði", 5},
    {4, 19124, "Kýrmýzý ýþýk direði", 5},
    {4, 19125, "Sarý ýþýk direði", 5},
    {4, 19126, "Turkuaz ýþýk direði", 5},
    {4, 19127, "Pembe ýþýk direði", 5},

   //Masalar
    {5, 1432, "Yemek Masasý 1", 5},
    {5, 1433, "Yemek Masasý 2", 5},
    {5, 1516, "Yemek Masasý 3", 5},
    {5, 1770, "Yemek Masasý 5", 5},
    {5, 2029, "Yemek Masasý 6", 5},
    {5, 2030, "Yemek Masasý 7", 5},
    {5, 2031, "Yemek Masasý 8", 5},
    {5, 2032, "Yemek Masasý 9", 5},
    {5, 2080, "Yemek Masasý 10", 5},
    {5, 2109, "Yemek Masasý 11", 5},
    {5, 2110, "Yemek Masasý 12", 5},
    {5, 2111, "Yemek Masasý 13", 5},
    {5, 2112, "Yemek Masasý 14", 5},
    {5, 2115, "Yemek Masasý 15", 5},
    {5, 2116, "Yemek Masasý 16", 5},
    {5, 2117, "Yemek Masasý 17", 5},
    {5, 2118, "Yemek Masasý 18", 5},
    {5, 2119, "Yemek Masasý 19", 5},
    {5, 1826, "Masa 1", 5},
    {5, 1737, "Yemek Masasý 4", 5},
    {5, 1827, "Cam Masa", 5},
    {5, 2370, "Ahþap Sehpa 1", 5},
    {5, 2635, "Ahþap Kare Masa 1", 5},
    {5, 2637, "Ahþap Geniþ Masa 1", 5},
    {5, 2644, "Ahþap Kare Masa 2", 5},
    {5, 2725, "Ahþap Sehpa 2", 5},
    {5, 2747, "Ahþap Geniþ Masa 2", 5},
    {5, 2762, "Kýrmýzý Geniþ Masa", 5},
    {5, 2763, "Kýrmýzý Kare Masa", 5},
    {5, 2764, "Örtülü Masa", 5},
    {5, 14869, "Tahta Masa", 5},
    {5, 11690, "Yeþil Kare Masa", 5},
    {5, 11691, "Yeþil Dikdörtgen Masa", 5},
    {5, 1814, "Dikdörtgen Sehpa(Tahta) 1", 5},
    {5, 1815, "Tahta Yuvarlak Sehpa 1", 5},
    {5, 1816, "Tahta Dikdörtgen Sehpa 2", 5},
    {5, 1818, "Tahta Kare Sehpa", 5},
    {5, 1817, "Dikdörtgen Camlý Sehpa", 5},
    {5, 1819, "Tahta Yuvarlak Sehpa 2", 5},
    {5, 1820, "Tahta Yuvarlak Sehpa 3", 5},
    {5, 1822, "Yuvarlak Camlý Sehpa", 5},
    {5, 1823, "Ahþap Dikdörtgen Sehpa(Ahþap)", 5},
    {5, 2236, "Ahþap Dikdörtgen Sehpa", 5},
    {5, 2085, "Cam Masa", 5},
    {5, 2126, "Camlý Dikdörtgen Sehpa", 5},
    {5, 2169, "Ofis Masasý 1", 5},
    {5, 2173, "Ofis Masasý 2", 5},
    {5, 2205, "Ofis Masasý 3", 5},
    {5, 1963, "Ofis Masasý 5", 5},
    {5, 1964, "Ofis Masasý 6", 5},
    {5, 1999, "Ofis Masasý 7", 5},
    {5, 2008, "Ofis Masasý 8", 5},
    {5, 2009, "Ofis Masasý 9", 5},
    {5, 2165, "Ofis Masasý 10", 5},
    {5, 2166, "Ofis Masasý 11", 5},
    {5, 2171, "Ofis Masasý 12", 5},
    {5, 2172, "Ofis Masasý 13", 5},
    {5, 2175, "Ofis Masasý 14", 5},
    {5, 2180, "Ofis Masasý 15", 5},
    {5, 2181, "Ofis Masasý 16", 5},
    {5, 2182, "Ofis Masasý 17", 5},
    {5, 2184, "Ofis Masasý 18", 5},
    {5, 2206, "Ofis Masasý 19", 5},
    {5, 2207, "Ofis Masasý 20", 5},
    {5, 2208, "Ofis Masasý 21", 5},
    {5, 2605, "Ofis Masasý 22", 5},
    {5, 2607, "Ofis Masasý 23", 5},
    {5, 11631, "Ofis Masasý 24", 5},
    {5, 2357, "Uzun Masa", 5},
    {5, 2181, "Çalýþma Masasý", 5},
    {5, 2568, "Çalýþma Masasý 2", 5},
    {5, 2569, "Çalýþma Masasý 3", 5},
    {5, 1969, "Masa ve Sandalye 1", 5},
    {5, 1968, "Masa ve Sandalye 2", 5},
    {5, 941, "Masa", 5},
    {5, 1825, "Beyaz Sandalyeler ve Tahta Masa", 5},
    {5, 2319, "Alçak Masa", 5},
    {5, 2081, "Modern Sehpa", 5},
    {5, 2802, "Kýrmýzý masa sandalye", 5},
    {5, 2366, "Tahta Bar Masasý", 5},
    {5, 2313, "Ahþap Ünite", 5},
    

    //Dolaplar
    {6, 14455, "Kitaplýk", 5},
    {6, 2078, "Vitrin", 5},
    {6, 2092, "Silindir Dolap", 5},
    {6, 2330, "Dolap 1", 5},
    {6, 1417, "Dolap 2", 5},
    {6, 2708, "Dolap 3", 5},
    {6, 2573, "Dolap 4", 5},
    {6, 2087, "Dolap 5", 5},
    {6, 2020, "Dolap 6", 5},
    {6, 1743, "Dolap 7", 5},
    {6, 2088, "Dolap 8",5},
    {6, 2307, "Dolap 9",5},
    {6, 2329, "Dolap 10",5},
    {6, 2573, "Dolap 11",5},
    {6, 2574, "Dolap 12",5},
    {6, 2576, "Dolap 13",5},
    {6, 2025, "Dolap 14",5},
    {6, 14556, "Dolap 15",5},
    {6, 2708, "Dolap 16",5},
    {6, 2204, "Büyük Dolap", 535},
    {6, 1742, "Kitap Dolabý 1",260},
    {6, 2161, "Kitap Dolabý 2",5},
    {6, 2167, "Ofis Dolabý 1",235},
    {6, 2197, "Ofis Dolabý 2",5},
    {6, 2000, "Ofis Dolabý 3",5},
    {6, 2007, "Ofis Dolabý 4",5},
    {6, 2163, "Ofis Dolabý 5",5},
    {6, 2164, "Ofis Dolabý 6",5},
    {6, 2167, "Ofis Dolabý 7",5},
    {6, 2200, "Ofis Dolabý 8",5},
    {6, 2610, "Ofis Dolabý 9",5},
    {6, 2609, "Ofis Dolabý 10",5},
    {6, 2065, "Ofis Dolabý 11",5},
    {6, 2066, "Ofis Dolabý 12",5},
    {6, 2067, "Ofis Dolabý 13",5},
    {6, 911, "Kýyafet Dolabý 1",5},
    {6, 912, "Kýyafet Dolabý 2",5},
    {6, 913, "Kýyafet Dolabý 3",5},
    {6, 1741, "Kýyafet Dolabý 4",5},
    {6, 2089, "Kýyafet Dolabý 5",5},
    {6, 2094, "Kýyafet Dolabý 6",5},
    {6, 1740, "Komodin 1",5},
    {6, 2094, "Komodin 2",5},
    {6, 2306, "Komodin 3",5},
    {6, 2328, "Komodin 4",5},
    {6, 2021, "Komodin 5",5},
    {6, 11729, "Soyunma Dolabý 1", 5},
    {6, 11730, "Soyunma Dolabý 2", 5},
    {6, 1742, "Kitaplýk 1", 5},
    {6, 2608, "Kitaplýk 2", 5},
    {6, 2403, "Ayakkabý Dolabý 1", 5},

    //Elektronik 19
    {7, 3384, "Ofis Klimasý", 5},
    {7, 19942, "Telsiz", 5},
    {7, 19421, "Beyaz kulaklýk", 5},
    {7, 19422, "Siyah kulaklýk", 5},
    {7, 19423, "Kýrmýzý kulaklýk", 5},
    {7, 19424, "Mavi kulaklýk", 5},
    {7, 19893, "Laptop açýk", 5},
    {7, 19894, "Laptop kapalý", 5},
    {7, 2190, "Monitor", 5},
    {7, 19808, "Klavye", 5},
    {7, 1515, "Slot makinesi", 5},
    {7, 2681, "Oyun makinesi 1", 5},
    {7, 2778, "Oyun makinesi 2", 5},
    {7, 2779, "Oyun makinesi 3", 5},
    {7, 2028, "Oyun konsolu 1", 350},
    {7, 1719, "Oyun konsolu 2", 350},
    {7, 1718, "Oyun konsolu 3", 5},
    {7, 14820, "DJ seti", 5},
    {7, 1785, "DVD oynatýcý 1", 5},
    {7, 1782, "DVD oynatýcý 2", 5},
    {7, 1783, "DVD oynatýcý 3", 5},
    {7, 1787, "DVD oynatýcý 4", 5},
    {7, 1788, "DVD oynatýcý 5", 5},
    {7, 1790, "DVD oynatýcý 6", 5},
    {7, 2101, "DVD oynatýcý 7", 5},
    {7, 2225, "DVD oynatýcý 8", 5},
    {7, 2227, "DVD oynatýcý 9", 5},
    {7, 1839, "DVD oynatýcý 10", 5},
    {7, 1841, "Küçük hoparlör", 5},
    {7, 2229, "Büyük hoparlör 1", 5},
    {7, 2230, "Büyük hoparlör 2", 5},
    {7, 2104, "Büyük hoparlör 3", 5},
    {7, 2231, "Büyük hoparlör 4", 5},
    {7, 2232, "Büyük hoparlör 5", 5},
    {7, 2233, "Büyük hoparlör 6", 5},
    {7, 2226, "Boombox", 5},
    {7, 2102, "Radyo", 5},
    {7, 2103, "Büyük radyo", 5},
    {7, 2099, "Müzik seti 1", 5},
    {7, 2100, "Müzik seti 2", 5},
    {7, 1518, "TV 1", 5},
    {7, 1747, "TV 2", 5},
    {7, 1748, "TV 3", 5},
    {7, 1749, "TV 4", 5},
    {7, 1750, "TV 5", 5},
    {7, 1751, "TV 6", 5},
    {7, 1752, "TV 7", 5},
    {7, 1781, "TV 8", 5},
    {7, 1786, "TV 9", 5},
    {7, 1791, "TV 10", 5},
    {7, 1792, "TV 11", 5},
    {7, 2224, "TV 12", 5},
    {7, 2595, "TV 13", 5},
    {7, 2596, "TV 14", 5},
    {7, 2606, "4lü televizyon", 5},
    {7, 2648, "TV 16", 5},
    {7, 1781, "TV 17", 5},
    {7, 14604, "TV 18", 460},
    {7, 14772, "TV 19", 5},
    {7, 19786, "Büyük plazma TV", 5},
    {7, 19787, "LCD TV", 5},
    {7, 1622, "Güvenlik kamerasý 1", 5},
    {7, 1616, "Güvenlik kamerasý 2", 5},
    {7, 1886, "Güvenlik kamerasý 3", 5},
    {7, 2921, "Güvenlik kamerasý 4", 5},
    {7, 1892, "Dedektör 1", 5},
    {7, 2412, "Dedektör 2", 5},
    {7, 19623, "Fotoðraf makinesi", 5},
    {7, 2202, "Fotokopi makinesi 1", 5},
    {7, 2186, "Fotokopi makinesi 2", 5},
    {7, 18865, "Cep telefonu 1", 5},
    {7, 18866, "Cep telefonu 2", 5},
    {7, 18867, "Cep telefonu 3", 5},
    {7, 18868, "Cep telefonu 4", 5},
    {7, 18869, "Cep telefonu 5", 5},
    {7, 18870, "Cep telefonu 6", 5},
    {7, 18871, "Cep telefonu 7", 5},
    {7, 18872, "Cep telefonu 8", 5},
    {7, 18873, "Cep telefonu 9", 5},
    {7, 18874, "Cep telefonu 10", 5},
    {7, 2967, "Cep telefonu 11", 5},
    {7, 1514, "Yazar kasa 1", 5},
    {7, 1959, "Yazar kasa 2", 5},
    {7, 2753, "Yazar kasa 3", 5},
    {7, 19273, "Þifre paneli", 5},
    {7, 2192, "Vantilatör", 5},
    {7, 2750, "Saç kurutma makinesi", 5},
    {7, 19317, "Elektronik Gitar 1", 5},
    {7, 19318, "Elektronik Gitar 2", 5},
    {7, 19319, "Elektronik Gitar 3", 5},
    {7, 11743, "Kahve makinesi", 5},
    {7, 19830, "Blender", 5},
    {7, 19814, "Elektrik Prizi 1", 5},
    {7, 19813, "Elektrik Prizi 2", 5},
    {7, 19826, "Iþýk Düðmesi 1", 5},
    {7, 19827, "Iþýk Düðmesi 2", 5},
    {7, 19828, "Iþýk Düðmesi 3", 5},
    {7, 19829, "Iþýk Düðmesi 4", 5},
    {7, 19807, "Ev Telefonu", 5},
    {7, 19933, "Beyaz fýrýn", 5},
    {7, 2421, "Mikrodalga 1", 5},
    {7, 2149, "Mikrodalga 2", 5},
    {7, 2421, "Pizza fýrýný", 5},
    {7, 1780, "Eski buzdolabý", 5},
    {7, 2147, "Küçük buzdolabý", 5},
    {7, 2531, "Baskýlý buzdolabý", 5},
    {7, 2532, "Baskýlý buzdolabý", 5},
    {7, 2533, "Baskýlý buzdolabý", 5},
    {7, 2534, "Baskýlý buzdolabý", 5},
    {7, 2577, "Baskýlý buzdolabý", 5},
    {7, 2452, "Baskýlý buzdolabý", 5},
    {7, 2360, "Derin dondurucu 1", 5},
    {7, 2361, "Derin dondurucu 2", 5},
    {7, 2425, "Küçük gazoz makinesi 1", 5},
    {7, 2427, "Küçük gazoz makinesi 2", 5},
    {7, 2296, "Televizyon Ünitesi 1", 5},
    {7, 2297, "Televizyon Ünitesi 2", 5},
    {7, 2091, "Televizyon Ünitesi 3", 5},
    {7, 11728, "Telefon", 5},
    {7, 19610, "Mikrofon", 5},
    {7, 1960, "Plak 1", 5},
    {7, 1961, "Plak 2", 5},
    {7, 1962, "Plak 3", 5},
    {7, 19609, "Müzik Seti", 5},
    {7, 19609, "19616", 5},
    {7, 19609, "19615", 5},
    {7, 19609, "19612", 5},
    {7, 19609, "19614", 5},
    {7, 19915, "Eski Fýrýn", 5},
    {7, 1208, "Çamaþýr Makinesi", 5},
    {7, 19612, "Amfi 1", 5},
    {7, 19613, "Amfi 2", 5},
    {7, 19614, "Amfi 3", 5},
    {7, 19615, "Amfi 4", 5},
    {7, 19616, "Amfi 5", 5},
    {7, 19920, "TV Kumandasý", 5},
    {7, 11705, "Antika Telefon", 5},
    {7, 330, "Eski Telefon", 5},

    //Banyo Malzemeleri 19
    {8, 11709, "Büyük lavabo", 5},
    {8, 1640, "Plaj havlusu 1", 5},
    {8, 1641, "Plaj havlusu 2", 5},
    {8, 1642, "Plaj havlusu 3", 5},
    {8, 1643, "Plaj havlusu 4", 5},
    {8, 11707, "Küçük ve büyük havlu", 5},
    {8, 2514, "Tuvalet 1", 5},
    {8, 2521, "Tuvalet 2", 5},
    {8, 2525, "Tuvalet 3", 5},
    {8, 2528, "Tuvalet 4", 5},
    {8, 2738, "Tuvalet 5", 5},
    {8, 2602, "Tuvalet 6", 5},
    {8, 2515, "Lavabo 1", 5},
    {8, 2518, "Lavabo 2", 5},
    {8, 2523, "Lavabo 3", 5},
    {8, 2524, "Lavabo 4", 5},
    {8, 2739, "Lavabo 5", 5},
    {8, 2150, "Lavabo 6", 5},
    {8, 11709, "Lavabo 7", 5},
    {8, 2517, "Duþakabin 1", 5},
    {8, 2520, "Duþakabin 2", 5},
    {8, 2527, "Duþakabin 3", 5},
    {8, 2519, "Küvet 1", 5},
    {8, 2522, "Küvet 2", 5},
    {8, 2526, "Küvet 3", 5},
    {8, 2097, "Küvet 4", 5},
    {8, 2516, "Küvet 5", 5},
    {8, 11732, "Küvet 6", 5},
    {8, 19873, "Tuvalet kaðýdý", 5},
    {8, 19874, "Sabun", 5},
    {8, 2741, "Sensörlü peçete makinesi", 5},
    {8, 2742, "Sensörlü kurutma makinesi", 5},

     //Kapýlar // 19 (yiðit)
    {9, 2988, "Büyük Tahta Kapý", 5},
    {9, 11714, "Depo Kapýsý", 5},
    {9, 2875, "Kapý-Zip", 5},
    {9, 2876, "Kapý-Train Hard", 5},
    {9, 2879, "Kapý-DS", 5},
    {9, 2878, "Kapý-Victim", 5},
    {9, 1502, "Ahþap Kapý", 5},
    {9, 1491, "Desenli Ahþap Kapý", 5},
    {9, 3089, "Camlý Ahþap Kapý", 5},
    {9, 1492, "Açýk Yeþil Kapý", 5},
    {9, 1494, "Eskitilmiþ Kapý", 5},
    {9, 1493, "Sineklilki Kapý", 5},
    {9, 1495, "Telli Kapý", 5},
    {9, 1498, "Beyaz Kapý", 5},
    {9, 1499, "Metal Eski Kapý", 5},
    {9, 1535, "Pudra Renk Kapý", 5},
    {9, 1537, "Demir Kapý", 5},
    {9, 1536, "Aynalý Kapý", 5},
    {9, 1557, "Desenli Kapý", 5},
    {9, 1504, "Kýrmýzý Ahþap Kapý", 5},
    {9, 1507, "Sarý Ahþap Kapý", 5},
    {9, 1567, "Panjurlu Kapý", 5},
    {9, 2963, "Çelik Kapý", 5},
    {9, 19302, "Parmaklýklý Kapý 1", 5},
    {9, 19303, "Parmaklýklý Kapý 2", 5},
    {9, 19304, "Parmaklýklý Kapý 3", 5},
    {9, 2930, "Parmaklýklý Kapý 4", 5},
    {9, 2947, "Mavi Kapý", 5},
    {9, 19860, "Gri Kapý 1", 5},
    {9, 3109, "Gri Kapý 2", 5},
    {9, 1566, "Camlý Kapý 1", 5},
    {9, 1538, "Camlý Kapý 2", 5},
    {9, 1497, "Tahta Kapý", 5},
    {9, 1500, "Telli Kapý 1", 5},
    {9, 1502, "Telli Kapý 2", 5},
    {9, 1505, "Mavi Kapý", 5},
    {9, 1506, "Beyaz Ahþap Kapý", 5},
    {9, 1523, "Yuvarlak Camlý Kapý", 5},
    {9, 1532, "Afiþle Kaplý Kapý 1", 5},
    {9, 1522, "Afiþle Kaplý Kapý 2", 5},
    {9, 14819, "Perdeli Kapý", 5},
    {9, 3061, "Düz Kapý", 5},
    {9, 2955, "Eski Kapý", 5},
    {9, 19880, "Garaj Kapýsý", 5},
    {9, 19875, "Mavi Numaralý Kapý", 5},
    {9, 2949, "Depo Kapýsý", 5},
    {9, 1501, "Aðlý Ahþap Kapý", 5},
    {9, 1496, "Aðlý Kapý", 5},

     //Çeþitli Dekorasyonlar 1 // Yiðit
    {10, 14387, "Beyaz Merdiven", 5},
    {10, 19592, "Turuncu Market Sepeti", 5},
    {10, 335, "Mutfak Býçaðý", 5},
    {10, 11737, "Rockstar Paspas", 5},
    {10, 11733, "Oyuncak AT", 5},
    {10, 19793, "Odun", 5},
    {10, 11711, "Çýkýþ Simgesi", 5},
    {10, 11710, "Yangýn Çýkýþý Simgesi", 5},
    {10, 11738, "Ýlk Yardým Kiti", 5},
    {10, 2714, "Açýk Tabela", 5},
    {10, 2961, "Yangýn Alarmý", 5},
    {10, 2752, "Saç Spreyi", 5},
    {10, 2251, "Çiçekli Saksý", 5},
    {10, 2189, "Poker Dartý", 5},
    {10, 1580, "Kýrmýzý Paket", 5},
    {10, 1576, "Turuncu Paket", 5},
    {10, 1577, "Sarý Paket", 5},
    {10, 1578, "Yeþil Paket", 5},
    {10, 14781, "Boks Ringi", 5},
    {10, 1808, "Su Sebili", 5},
    {10, 1667, "Þarap Kadehi", 5},
    {10, 1510, "Kül Tablasý", 5},
    {10, 19896, "Sigara Paketi 1", 5},
    {10, 19897, "Sigara Paketi 2", 5},
    {10, 2814, "Pizza Kutusu", 5},
    {10, 2805, "Et Çantasý 1", 5},
    {10, 2803, "Et Çantasý 2", 5},
    {10, 2745, "Heykel 1", 5},
    {10, 2809, "Heykel 2", 5},
    {10, 14467, "Heykel 3", 5},
    {10, 19611, "Mikrofon Standý", 5},
    {10, 19617, "Altýn Plak", 5},
    {10, 1665, "Kül Tablasý ve Sigara", 5},
    {10, 19466, "Pencere", 5},
    {10, 1649, "Cam", 5},
    {10, 2828, "Fotoðraflar", 5},
    {10, 2827, "Dergiler 1", 5},
    {10, 2826, "Dergiler 2", 5},
    {10, 2816, "Dergiler 3", 5},
    {10, 2813, "Kitap 1", 5},
    {10, 2825, "Kitap 2", 5},
    {10, 2894, "Kitap 3", 5},
    {10, 2725, "Yuvarlak Sehpa", 5},
    {10, 2751, "Saç Kremi", 5},
    {10, 2767, "Tepsi", 5},
    {10, 19473, "Ekilmiþ Çalý", 5},
    {10, 19471, "Satýlýk Ýlaný", 5},
    {10, 2558, "Perde 1", 5},
    {10, 2559, "Perde 2", 5},
    {10, 14752, "Perde 3", 5},
    {10, 11245, "Amerika Bayraðý", 5},
    {10, 19632, "Yanan Odun", 5},
    {10, 2435, "Komidin", 5},
    {10, 2434, "Komidin U", 5},
    {10, 625, "Saksý 1", 5},
    {10, 630, "Saksý 2", 5},
    {10, 644, "Saksý 3", 5},
    {10, 1361, "Saksý 4", 5},
    {10, 2001, "Saksý 5", 5},
    {10, 2241, "Saksý 6", 5},
    {10, 2245, "Saksý 7", 5},
    {10, 2811, "Saksý 8", 5},
    {10, 638, "Saksý 9", 5},
    {10, 2901, "Saman", 5},
    {10, 2670, "Ivýr Zývýr 1", 5},
    {10, 2671, "Ivýr Zývýr 2", 5},
    {10, 2672, "Ivýr Zývýr 3", 5},
    {10, 2673, "Ivýr Zývýr 4", 5},
    {10, 2674, "Ivýr Zývýr 5", 5},
    {10, 2675, "Ivýr Zývýr 6", 5},
    {10, 2676, "Ivýr Zývýr 7", 5},
    {10, 2677, "Ivýr Zývýr 8", 5},
    {10, 2342, "Ivýr Zývýr 9", 5},
    {10, 11686, "Bar Tezgahý 1", 5},
    {10, 18090, "Bar Tezgahý 2", 5},
    {10, 16151, "Bar Tezgahý 3", 5},
    {10, 14582, "Bar Tezgahý 4", 5},
    {10, 14537, "Bar Tezgahý 5", 5},
    {10, 14560, "Bar Tezgahý 6", 5},
    {10, 2784, "Casino Tezgahý", 5},
    {10, 11725, "Þömine 1", 5},
    {10, 11724, "Þömine 2", 5},
    {10, 997, "Bariyer", 5},
    {10, 3850, "Çit", 5},
    {10, 1738, "Radyatör", 5},
    {10, 2146, "Sedye", 5},
    {10, 2609, "Dolap", 5},
    {10, 19273, "Dijital Klavye", 5},
    {10, 2663, "Kese Kaðýdý", 5},
    {10, 19054, "Hediye Paketi 1", 5},
    {10, 19055, "Hediye Paketi 2", 5},
    {10, 19056, "Hediye Paketi 3", 5},
    {10, 19057, "Hediye Paketi 4", 5},
    {10, 19058, "Hediye Paketi 5", 5},
    {10, 19619, "Gömme Duvar Kasasý", 5},
    {10, 19059, "Disko Topu 1", 5},
    {10, 19060, "Disko Topu 2", 5},
    {10, 19061, "Disko Topu 3", 5},
    {10, 19062, "Disko Topu 4", 5},
    {10, 19063, "Disko Topu 5", 5},
    {10, 1481, "Barbekü", 5},
    {10, 3440, "Sütun 1", 5},
    {10, 3494, "Sütun 2", 5},
    {10, 3529, "Sütun 3", 5},
    {10, 3530, "Sütun 4", 5},
    {10, 19943, "Sütun 5", 5},
    {10, 2774, "Sütun 6", 5},
    {10, 3675, "Havalandýrma Borusu", 5},
    {10, 3399, "Merdiven", 5},
    {10, 14416, "Merdiven 2", 5},
    {10, 14877, "Merdiven 3", 5},
    {10, 4206, "Küçük Havuz", 5},
    {10, 2114, "Basketbol Topu", 5},
    {10, 2690, "Yangýn Tüpü", 5},
    {10, 19878, "Kaykay", 5},
    {10, 10244, "Ahþap Merdiven", 5},
    {10, 10008, "Döner Merdiven", 5},
    {10, 10009, "Döner Merdiven 2", 5},
    {10, 3471, "Aslan Heykeli", 5},
    {10, 2002, "Modern Su Sebili", 5},
    {10, 19625, "Sigara", 5},
    {10, 15038, "Saksý", 5},
    {10, 949, "Saksý", 5},

    //Çeþitli Dekorasyonlar 2
    {11, 2368, "Yatay Camlý Raf 1", 5},
    {11, 2413, "Yatay  Camlý Raf 2", 5},
    {11, 14804, "Saksýda Palmiye", 5},
    {11, 14399, "Bar ve dolaplar", 5},
    {11, 11701, "Kýrmýzý ýþýk", 5},
    {11, 19797, "Kýrmýzý mavi polis sireni 1", 5},
    {11, 19803, "Kýrmýzý sarý ýþýk", 5},
    {11, 19804, "Kilit", 5},
    {11, 19813, "Ýkili Amerikan prizi", 5},
    {11, 19814, "Ýkili Avrupa prizi", 5},
    {11, 19998, "Zippo", 5},
    {11, 11749, "Kelepçe", 5},
    {11, 19528, "Halloween þapkasý", 5},
    {11, 19587, "Plastik sepet", 5},
    {11, 19620, "Polis sireni", 5},
    {11, 19078, "Papaðan 1", 5},
    {11, 19079, "Papaðan 2", 5},
    {11, 19885, "Silah otomatý", 5},
    {11, 19308, "TAXI 1", 5},
    {11, 19309, "TAXI 2", 5},
    {11, 19310, "TAXI 3", 5},
    {11, 19311, "TAXI 4", 5},
    {11, 19314, "Boynuzlar", 5},
    {11, 19320, "Balkabaðý", 5},
    {11, 2406, "Sörf tahtasý 1", 5},
    {11, 8644, "Çapraz tahta kýlýçlar", 5},
    {11, 955, "Sprite otomatý 1", 5},
    {11, 956, "Cips otomatý", 5},
    {11, 1209, "Kola otomatý 1", 5},
    {11, 1302, "Kola otomatý 2", 5},
    {11, 1775, "Sprite otomatý 2", 5},
    {11, 1776, "Cips otomatý", 5},
    {11, 1977, "Boþ otomat", 5},
    {11, 2452, "Ýçecek dolabý", 5},
    {11, 2404, "Sörf tahtasý 2", 5},
    {11, 2405, "Sörf tahtasý 3", 5},
    {11, 1340, "Hot Dog tezgahý", 5},
    {11, 1342, "Makarna tezgahý", 5},
    {11, 1341, "Dondurma tezgahý", 5},
    {11, 2047, "Los Santos bayraðý", 5},
    {11, 19590, "Süs Býçak", 5},
    {11, 19591, "Yelpaze", 5},
    {11, 3810, "Asmalý Saksý", 5},
    {11, 2755, "Paravan", 5},
    {11, 948, "Beyaz Saksý", 5},
    {11, 2194, "Kaktüs", 5},
    {11, 2964, "Bilardo Masasý 1", 5},
    {11, 14651, "Bilardo Masasý 2", 5},
    {11, 2027, "Bar Masasý", 390},
    {11, 2614, "Amerika Bayraðý ", 5},
    {11, 1736, "Geyik Kafasý, Doldurulmuþ", 5},
    {11, 2833, "Halý 1", 5},
    {11, 2834, "Halý 2", 5},
    {11, 2835, "Halý 3", 5},
    {11, 2836, "Halý 4", 5},
    {11, 2841, "Halý 5", 5},
    {11, 2817, "Halý 6", 5},
    {11, 2818, "Halý 7", 5},
    {11, 1828, "Halý 8", 5},
    {11, 2631, "Halý 9", 5},
    {11, 2510, "Uçak Maketi", 5},
    {11, 19816, "Oksijen Tanký", 5},
    {11, 1549, "Kül Tablasý, Ayaklý", 5},
    {11, 19831, "Barbekü", 5},
    {11, 11729, "Demir Dolap", 5},
    {11, 11730, "Açýk Demir Dolap", 5},
    {11, 11712, "Haç", 5},
    {11, 19339, "Tabut", 5},
    {11, 1428, "Merdiven 1", 5},
    {11, 11416, "Merdiven 2", 5},
    {11, 1073, "Tekerlek", 5},
    {11, 19320, "Kabak", 5},
    {11, 19076, "Yýlbaþý Aðacý", 5},
    {11, 14882, "Borular", 5},
    {11, 19088, "Ýp 1", 5},
    {11, 19087, "Ýp 2", 5},
    {11, 19089, "Ýp 3", 5},
    {11, 1572, "Market Arabasý 1", 5},
    {11, 1349, "Market Arabasý 2", 5},
    {11, 1369, "Paslý tekerlekli sandalye", 5},
    {11, 334, "Cop", 5},
    {11, 19468, "Kova", 5},
    {11, 19092, "Yeþil Ponpon", 5},
    {11, 3470, "Havalandýrma sistemi", 5},
    {11, 1579, "Mavi paket",  5},
    {11, 2057, "Paslanma kutularý", 5},
    {11, 2057, "Demir kutu", 5},
    {11, 1650, "Benzin kutusu", 5},
    {11, 2869, "Þamdan", 5},
    {11, 19825, "Saat", 5},
    {11, 2332, "Çelik Para Kasasý", 5},
    {11, 2737, "Sýnýf Tahtasý 1", 5},
    {11, 2616, "Sýnýf Tahtasý 2", 5},
    {11, 2611, "Mantar Tablo 1", 5},
    {11, 2612, "Mantar Tablo 2", 5},
    {11, 3077, "Kara Tahta", 5},
    {11, 19805, "Beyaz Tahta", 5},
    {11, 741, "Vazo 1", 5},
    {11, 742, "Vazo 2", 5},
    {11, 743, "Vazo 3", 5},
    {11, 741, "Vazo 4", 5},
    {11, 14705, "Vazo 5", 5},
    {11, 19619, "Duvar Kasasý", 5},
    {11, 1649, "Cam", 5},
    {11, 1472, "Merdiven", 5},
    {11, 2615, "Gazeteler", 5},
    {11, 19998, "Zippo", 5},
    {11, 11704, "Þeytan Maskesi", 5},
    {11, 2854, "Kitaplar", 5},
    {11, 2048, "Konfederasyon Bayraðý", 5},
    {11, 2047, "Sivil Savunma Bayraðý", 5},
    {11, 1605, "Balýklar 1", 5},
    {11, 1601, "Balýklar 2", 5},
    {11, 1606, "Balýklar 3", 5},
    {11, 1604, "Balýklar 4", 5},
    {11, 902, "Deniz Yýldýzý", 5},
    {11, 339, "Bilardo Istakasý", 5},
    {11, 3000, "Bilardo Topu Yeþil", 5},
    {11, 3100, "Bilardo Topu Mavi", 5},
    {11, 3104, "Bilardo Topu Yeþil 2", 5},
    {11, 3105, "Bilardo Topu Kýrmýzý", 5},
    {11, 2995, "Bilardo Topu Sarý", 5},
    {11, 2998, "Bilardo Topu Mavi 2", 5},
    {11, 3000, "Bilardo Topu Yeþil", 5},
    {11, 2491, "Stand", 5},
    {11, 19619, "Çelik Kasa Kapaðý", 5},
    {11, 19618, "Kapaksýz Çelik Kasa", 5},
    {11, 2332, "Çelik Casa", 5},
    {11, 19325, "Cam", 5},
    {11, 19466, "Cam", 5},
    {11, 1901, "Poker Çipleri 1", 5},
    {11, 1902, "Poker Çipleri 2", 5},
    {11, 1903, "Poker Çipleri 3", 5},
    {11, 1904, "Poker Çipleri 4", 5},
    {11, 1911, "Poker Çipleri 5", 5},
    {11, 1921, "Poker Çipleri 6", 5},
    {11, 1930, "Poker Çipleri 7", 5},
    {11, 1931, "Poker Çipleri 8", 5},
    {11, 1932, "Poker Çipleri 9", 5},
    {11, 1933, "Poker Çipleri 10", 5},
    {11, 1940, "Poker Çipleri 11", 5},
    {11, 1941, "Poker Çipleri 12", 5},
    {11, 1923, "Poker Çipleri 13", 5},
    {11, 1916, "Poker Çipleri 14", 5},
    {11, 1924, "Poker Çipleri 15", 5},
    {11, 1934, "Poker Çipleri 16", 5},
    {11, 1915, "Poker Çipleri 17", 5},
    {11, 1909, "Poker Çipleri 18", 5},
    {11, 1906, "Poker Çipleri 19", 5},
    {11, 1905, "Poker Çipleri 20", 5},


    //Duvar Tablolarý // (yiðit)
    {12, 2255, "Duvar Tablosu 1", 5},
    {12, 2256, "Duvar Tablosu 2", 5},
    {12, 2257, "Duvar Tablosu 3", 5},
    {12, 2258, "Duvar Tablosu 4", 5},
    {12, 2259, "Duvar Tablosu 5", 5},
    {12, 2260, "Duvar Tablosu 6", 5},
    {12, 2261, "Duvar Tablosu 7", 5},
    {12, 2262, "Duvar Tablosu 8", 5},
    {12, 2263, "Duvar Tablosu 9", 5},
    {12, 2264, "Duvar Tablosu 10", 5},
    {12, 2265, "Duvar Tablosu 11", 5},
    {12, 2266, "Duvar Tablosu 12", 5},
    {12, 2267, "Duvar Tablosu 13", 5},
    {12, 2268, "Duvar Tablosu 14", 5},
    {12, 2269, "Duvar Tablosu 15", 5},
    {12, 2270, "Duvar Tablosu 16", 5},
    {12, 2271, "Duvar Tablosu 17", 5},
    {12, 2272, "Duvar Tablosu 18", 5},
    {12, 2273, "Duvar Tablosu 19", 5},
    {12, 2274, "Duvar Tablosu 20", 5},
    {12, 2275, "Duvar Tablosu 21", 5},
    {12, 2276, "Duvar Tablosu 22", 5},
    {12, 2277, "Duvar Tablosu 23", 5},
    {12, 2278, "Duvar Tablosu 24", 5},
    {12, 2279, "Duvar Tablosu 25", 5},
    {12, 2280, "Duvar Tablosu 26", 5},
    {12, 2281, "Duvar Tablosu 27", 5},
    {12, 2282, "Duvar Tablosu 28", 5},
    {12, 2283, "Duvar Tablosu 29", 5},
    {12, 2284, "Duvar Tablosu 30", 5},
    {12, 2285, "Duvar Tablosu 31", 5},
    {12, 2286, "Duvar Tablosu 32", 5},
    {12, 2287, "Duvar Tablosu 33", 5},
    {12, 2288, "Duvar Tablosu 34", 5},
    {12, 2289, "Duvar Tablosu 35", 5},
    {12, 2254, "Duvar Tablosu 36", 5},
    {12, 19172, "Duvar Tablosu 37", 5},
    {12, 19175, "Duvar Tablosu 37", 5},
    {12, 19173, "Duvar Tablosu 38", 5},
    {12, 19174, "Duvar Tablosu 39", 5},
    {12, 19617, "Duvar Tablosu 40", 5},

     //Yiyecekler ve Ýçecekler
    {13, 1670, "Þarap ve Küllük", 5},
    {13, 1582, "Pizza Kutusu 2", 5},
    {13, 19580, "Biftek", 5},
    {13, 19582, "Biftek", 5},
    {13, 19882, "Yanmýþ Biftek", 5},
    {13, 2212, "Burger Tepsisi 1", 5},
    {13, 2213, "Burger Tepsisi 2", 5},
    {13, 2214, "Burger Tepsisi 3", 5},
    {13, 2218, "Pizza Tepsisi 1", 5},
    {13, 2219, "Pizza Tepsisi 2", 5},
    {13, 2220, "Pizza Tepsisi 3", 5},
    {13, 2663, "Hamburger paketi", 5},
    {13, 2768, "Hamburger kutusu 1", 5},
    {13, 19811, "Hamburger kutusu 2", 5},
    {13, 2769, "Dürüm", 5},
    {13, 2821, "Mýsýr gevreði kutusu 1", 5},
    {13, 19561, "Mýsýr gevreði kutusu 2", 5},
    {13, 19562, "Mýsýr gevreði kutusu 3", 5},
    {13, 2823, "Hamburger kutularý ve içecek", 5},
    {13, 2837, "Hamburger kutularý ve içecekler 1", 5},
    {13, 2859, "Hamburger kutularý ve içecekler 2", 5},
    {13, 2840, "Hamburger kutularý ve içecekler 3", 5},
    {13, 2860, "Pizza kutusu", 5},
    {13, 2838, "Pizza kutularý 1", 5},
    {13, 2857, "Pizza kutularý 2", 5},
    {13, 2839, "Noodle kutularý 1", 5},
    {13, 2858, "Noodle kutularý 2", 5},
    {13, 2861, "Kurabiye kutularý 1", 5},
    {13, 2866, "Kurabiye kutularý 2", 5},
    {13, 2867, "Mýsýr gevreði süt ve kurabiye kutusu", 5},
    {13, 19560, "Et paketi", 5},
    {13, 19571, "Pizza kutusu 2", 5},
    {13, 19525, "3 Katlý Düðün Pastasý", 5},
    {13, 19574, "Portakal", 5},
    {13, 19575, "Kýrmýzý Elma", 5},
    {13, 19576, "Yeþil Elma", 5},
    {13, 19577, "Domates", 5},
    {13, 19578, "Muz", 5},
    {13, 19579, "Ekmek", 5},
    {13, 19565, "Dondurma kutusu", 5},
    {13, 19566, "Ton balýðý kutusu", 5},
    {13, 11722, "Ketçap", 5},
    {13, 11723, "Hardal", 5},
    {13, 2221, "Kahve Tepsisi 1", 5},
    {13, 2222, "Kahve Tepsisi 2", 5},
    {13, 2223, "Kahve Tepsisi 3", 5},
    {13, 19835, "Kahve Bardaðý", 5},
    {13, 2856, "Süt kutularý", 5},
    {13, 9564, "Süt Kutusu", 5},
    {13, 19569, "Karton Süt", 5},
    {13, 19570, "Cam Þiþe Süt", 5},
    {13, 19563, "Meyve Suyu Portakal", 5},
    {13, 19564, "Meyve Suyu Elma" , 5},
    {13, 19572, "Altýlý kasa içecek", 5},
    {13, 1543, "Bira þiþesi 1", 5},
    {13, 1544, "Bira þiþesi 2", 5},
    {13, 1486, "Yeþil bira þiþesi 1", 5},
    {13, 1512, "Yeþil bira þiþesi 2", 5},
    {13, 1517, "Yeþil bira þiþesi 3", 5},
    {13, 1950, "Siyah bira þiþesi 1", 5},
    {13, 1951, "Siyah bira þiþesi 2", 5},
    {13, 1664, "Þarap þiþesi 1", 5},
    {13, 1520, "Þarap þiþesi 2", 5},
    {13, 1668, "Votka þiþesi", 5},
    {13, 19820, "Viski þiþesi", 5},
    {13, 19821, "Alkol þiþesi 1", 5},
    {13, 19822, "Alkol þiþesi 2", 5},
    {13, 19823, "Alkol þiþesi 3", 5},
    {13, 19824, "Alkol þiþesi 4", 5},
    {13, 1509, "Yeþil þarap þiþesi", 5},
    {13, 1551, "Yeþil büyük þarap þiþesi", 5},
    {13, 1546, "Karton Sprunk Bardaðý", 5},
    {13, 2601, "Sprunk", 5},
    {13, 2683, "Tuzluklar", 5},
    {13, 19567, "Dondurma Kutusu", 5},

   //Mekanik Alet Edevat
    {14, 341, "Testere", 5},
    {14, 11748, "Bandajlar", 5},
    {14, 18634, "Levye", 5},
    {14, 3111, "Mavi Kroki", 5},
    {14, 19900, "Alet Edevat Dolabý", 5},
    {14, 19815, "Alet Edevat Rafý", 5},
    {14, 2711, "Dövme Makinesi", 5},
    {14, 18635, "Çekiç", 5},
    {14, 19626, "Kürek", 5},
    {14, 19631, "Tokmak", 5},
    {14, 18644, "Düz Tornavida", 5},
    {14, 18633, "Ýngiliz Anahtarý 1", 5},
    {14, 19627, "Ýngiliz Anahtarý 2", 5},
    {14, 19622, "Süpürge", 5},
    {14, 19804, "Kilit", 5},
    {14, 2680, "Zincir", 5},
    {14, 11746, "Anahtar", 5},
    {14, 19904, "Ýþçi Yeleði", 5},
    {14, 19621, "Yað Kutusu", 5},
    {14, 19872, "Sarý Tamir Asansörü", 5},
    {14, 19899, "Tamirhane Dolabý", 5},
    {14, 19903, "Tamir Bilgisayarý", 5},
    {14, 19815, "Alet Panosu", 5},
    {14, 1000,  "Spoiler 1", 5},
    {14, 1001,  "Spoiler 2", 5},
    {14, 1002,  "Spoiler 3", 5},
    {14, 1003,  "Spoiler 4", 5},
    {14, 1008,  "1x NOS tüpü", 5},
    {14, 1009,  "5x NOS tüpü", 5},
    {14, 1010, "10x NOS tüpü", 5},
    {14, 1013, "Farlar", 5},
    {14, 1018, "Egzoz 1", 5},
    {14, 1019, "Egzoz 2", 5},
    {14, 1020, "Egzoz 3", 5},
    {14, 929, "Jeneratör 1", 5},
    {14, 934, "Jeneratör 2", 5},
    {14, 920, "Jeneratör 3", 5},
    {14, 1353, "Havalandýrma Sistemi 1", 5},
    {14, 1635, "Havalandýrma Sistemi 2", 5},
    {14, 14584, "Kýyma Makinesi", 5},
    {14, 19631, "Balyoz", 5},

    //Kýyafet ve Askýlar // (yiðit)
    {15, 2819, "Daðýnýk Kýyafetler 1", 5},
    {15, 2843, "Daðýnýk Kýyafetler 2", 5},
    {15, 2844, "Daðýnýk Kýyafetler 3", 5},
    {15, 2845, "Daðýnýk Kýyafetler 4", 5},
    {15, 2846, "Daðýnýk Kýyafetler 5", 5},
    {15, 2391, "Askýda Pantolonlar 1", 5},
    {15, 2377, "Askýlý Pantolonlar 2", 5},
    {15, 2378, "Askýlý Pantolonlar 3", 5},
    {15, 2391, "Askýlý Pantolonlar 4", 5},
    {15, 2704, "Askýlý Kýyafet 1", 5},
    {15, 2705, "Askýlý Kýyafet 2", 5},
    {15, 2706, "Askýlý Kýyafet 3", 5},
    {15, 2374, "Askýlý Kýyafet 4", 5},
    {15, 2383, "Askýlý Kýyafet 5", 5},
    {15, 2396, "Askýlý Kýyafet 7", 5},
    {15, 2399, "Askýlý Kýyafet 8", 5},
    {15, 2382, "Askýlý Kýyafet 9", 5},
    {15, 2389, "Askýlý Kýyafet 10", 5},
    {15, 2384, "Katlanmýþ Kýyafet 1", 5},
    {15, 2386, "Katlanmýþ Kýyafet 2", 5},
    {15, 371, "Sýrt Çantasý", 5},
    {15, 11735, "Çizme", 5},
    {15, 2689, "Rockstar Hoodie", 5},
    {15, 2411, "Kadýn Cansýz Manken 1", 5},
    {15, 2407, "Kadýn Cansýz Manken 2", 5},
    {15, 2408, "Kadýn Cansýz Manken Ayaklarý", 5},
    {15, 19064, "Yazýlý Yýlbaþý Beresi 1", 5},
    {15, 19065, "Yazýlý Yýlbaþý Beresi 2", 5},
    {15, 19066, "Yazýlý Yýlbaþý Beresi 3", 5},
    {15, 19472, "Gaz Maskesi", 5},
    {15, 19624, "Bavul 1", 5},
    {15, 11745, "Bavul 2", 5},
    {15, 2371, "Ayaklý Kiyafet Askýlýðý", 5},
    {15, 2372, "Elbise Askýlýðý", 5},

     //Plaj Malzemeleri // (yiðit)
    {16, 1639, "Tenis Filesi", 5},
    {16, 1640, "Plaj Havlusu 1", 5},
    {16, 1641, "Plaj Havlusu 2", 5},
    {16, 1642, "Plaj Havlusu 3", 5},
    {16, 1643, "Plaj Havlusu 4", 5},
    {16, 1644, "Bronzlaþtýrýcý Krem", 5},
    {16, 1645, "Þezlong", 5},
    {16, 1646, "Havlulu Þezlong", 5},
    {16, 1647, "Düz Þezlong", 5},
    {16, 2404, "Surf Tahtasý 1", 5},
    {16, 2405, "Surf Tahtasý 2", 5},
    {16, 2406, "Surf Tahtasý 3", 5},
    {16, 2410, "Surf Tahtasý 4", 5},
    {16, 1598, "Plaj Topu", 5},


    //Poster ve Grafitti // (yiðit)
    {17, 2055, "Büyük Gazete", 5},
    {17, 2661, "Mavi Poster (Büyük)", 5},
    {17, 2658, "Yeþil Poster", 5},
    {17, 2692, "Ayaklý Poster (1)", 5},
    {17, 2693, "Ayaklý Poster (2)", 5},
    {17, 19328, "Maymunlu Poster", 5},
    {17, 14860, "Poster 4", 5},
    {17, 19810, "Sadece Görevli Logosu", 5},
    {17, 2697, "Train Hard Afiþ", 5},
    {17, 18659, "Grafiti Groove", 5},
    {17, 18660, "Grafiti Seville Families", 5},
    {17, 18661, "Grafiti Varrio Los Aztecas", 5},
    {17, 18662, "Grafiti Kilo Tray Ballas", 5},
    {17, 18663, "Grafiti San Fierro Rifa", 5},
    {17, 18664, "Grafiti Temple Drive Ballas", 5},
    {17, 18665, "Grafiti Vagos", 5},
    {17, 18666, "Grafiti Front Yard Ballas", 5},
    {17, 18667, "Grafiti Rollin Heights Ballas", 5},
    {17, 1529, "Grafiti Ballas-Groove", 5},
    {17, 1530, "Grafiti Vagos-Groove", 5},
    {17, 1531, "Grafiti Aztecas-Groove", 5},
    {17, 2695, "Poster 1", 5},
    {17, 2696, "Poster 2", 5},
    {17, 2691, "Poster 3", 5},
    {17, 2662, "Poster 4", 5},
    {17, 2615, "Poster 5", 5},
    {17, 2580, "Poster XXX 1", 5},
    {17, 2587, "Poster XXX 2", 5},
    {17, 2588, "Poster XXX 3", 5},
    {17, 2599, "Sex Shop Ayaklý Poster", 5},
    {17, 2685, "Elleriniizi Yýkayýn Uyarý Posteri", 5},
    {17, 2687, "Hijyen Uyarý Posteri", 5},
    {17, 2049, "Hedef Poster 1", 5},
    {17, 2050, "Hedef Poster 2", 5},
    {17, 2051, "Hedef Poster 3", 5},
    {17, 2056, "Hedef Poster 4", 5},
    {17, 2056, "Hedef Poster 4", 5},
    {17, 2056, "Hedef Poster 4", 5},
    {17, 2684, "Sertifika", 5},
    {17, 2657, "Mavi Poster", 5},

     //Kutular ve Koliler //(yiðit)
    {18, 19921, "Kýrmýzý Kutu", 5},
    {18, 918, "Mavi Tüp", 5},
    {18, 925, "Varil kafesi", 5},
    {18, 930, "Oksijen Tüpleri", 5},
    {18, 1217, "Paslý Varil", 5},
    {18, 1218, "Sarý Varil", 5},
    {18, 1222, "Kýrmýzý Varil", 5},
    {18, 3632, "Yakýt Varili", 5},
    {18, 3633, "Dörtlü Varil", 5},
    {18, 931, "Çift raflý kafes", 5},
    {18, 3630, "Toplu Koliler", 5},
    {18, 2972, "Mavi Kutu", 5},
    {18, 2973, "File kaplý kutu", 5},
    {18, 1428, "Merdiven", 5},
    {18, 1437, "Büyük Merdiven", 5},
    {18, 964,  "Metal Kutu", 5},
    {18, 1264, "Çöp torbasý", 5},
    {18, 1271, "Büyük koli", 5},
    {18, 2040, "Dikdörtgen Kutu", 5},
    {18, 2328, "Küçük Koli", 5},
    {18, 2654,  "Ayakkabý Kutularý", 5},
    {18, 2969, "Ahþap Kutu", 5},
    {18, 1558, "Paletli Koli", 5},
    {18, 939, "Kolili Raf", 5},
    {18, 942, "Kolili Raf 2", 5},
    {18, 1230, "Kullanýlmýþ Koli 1", 5},
    {18, 926, "Kullanýlmýþ Koli 2", 5},
    {18, 928, "Kullanýlmýþ Koli 3", 5},
    {18, 1220, "Koli 1", 5},
    {18, 1221, "Koli 2", 5},
    {18, 3761, "Koli Dolu Raflar 1", 5},
    {18, 2583, "Sex Shop Raf 1", 5},
    {18, 2581, "Sex Shop Raf 2", 5},
    {18, 2063, "Boþ raflar 1", 5},
    {18, 1849, "Boþ raflar 2", 5},
    {18, 1850, "Boþ raflar 3", 5},
    {18, 2063, "Boþ raflar 4", 5},
    {18, 1744, "Boþ raflar 5", 5},
    {18, 2462, "Boþ raflar 6", 5},
    {18, 2463, "Boþ raflar 7", 5},
    {18, 2475, "Boþ raflar 8", 5},
    {18, 2482, "Boþ raflar 9", 5},
    {18, 2502, "Boþ raflar 10", 5},
    {18, 2509, "Boþ raflar 11", 5},
    {18, 2376, "Boþ raflar 12", 5},
    {18, 2413, "Boþ raflar 13", 5},
    {18, 2385, "Boþ raflar 14", 5},
    {18, 2359, "Mermi Kutusu", 5},
    {18, 19918, "Demir Kutu", 5},
    {18, 19812, "Bira varili", 5},
    {18, 2359, "Kapaðý Açýk Kutu 1", 5},
    {18, 3015, "Ýki üst üste kutu", 5},
    {18, 2041, "Kapaðý Açýk Kutu 2", 5},
    {18, 2043, "Kapaðý Açýk Kutu 3", 5},
    {18, 19918, "Siyah kaplamalý kutu", 5},
    {18, 3013, "Kapaklý kutu", 5},
    {18, 1421, "Daðýnýk Kutular", 5},
    {18, 2474, "Oyuncak Kutularý", 5},

    //Çöp Konteynýrlarý ve Kutularý // (yiðit)
    {19, 1235, "Çöp kutusu 1", 5},
    {19, 2613, "Çöp kutusu 2", 5},
    {19, 1300, "Metal çöp kutusu 1", 5},
    {19, 1347, "Silindir çöp kutusu 1", 5},
    {19, 1359, "Silindir çöp kutusu 2", 5},
    {19, 1442, "Silindir çöp kutusu 3", 5},
    {19, 1329, "Silindir çöp kutusu 4", 5},
    {19, 1330, "Silindir çöp kutusu 5", 5},
    {19, 1328, "Silindir çöp kutusu 6", 5},
    {19, 2770, "Cluckin Bell çöp kutusu", 5},
    {19, 11706, "Plastik çöp kutusu 1", 5},
    {19, 1409, "Plastik çöp kutusu 2", 5},
    {19, 1337, "Plastik çöp kutusu 3", 5},
    {19, 1339, "Plastik çöp kutusu 4", 5},
    {19, 3035, "Çöp konteynýrý 1", 5},
    {19, 1415, "Çöp konteynýrý 2", 5},
    {19, 1439, "Çöp konteynýrý 3", 5},
    {19, 1345, "Çöp konteynýrý 4", 5},
    {19, 1333, "Çöp konteynýrý 5", 5},
    {19, 1334, "Çöp konteynýrý 6", 5},
    {19, 1344, "Çöp konteynýrý 7", 5},
    {19, 1331, "Çöp konteynýrý 8", 5},
    {19, 1332, "Çöp konteynýrý 9", 5},
    {19, 2465, "RC Model Kutusu", 5},
    {19, 2477, "RC Model Kutusu 2", 5},
    {19, 2480, "RC Model Kutusu 3", 5},

    // Donator Dekorasyonlarý
    {20, 2785, "Beþli slot makinesi", 5},
    {20, 2783, "Sekizli slot makinesi", 5},
    {20, 18668, "Kýrmýzý Helikopter Iþýðý", 5},
    {20, 16444, "Ceset Torbalarý", 5},
    {20, 3092, "Rehine Polis", 5},
    {20, 1978, "Rulet Masasý", 5},
    {20, 19474, "Büyük Poker Masasý", 5},
    {20, 2188, "Blackjack Masasý", 5},
    {20, 16088, "N Ýnþaat Demiri", 5},
    {20, 14434, "Spot Iþýklarý", 5},
    {20, 18688, "Ateþ 1", 5},
    {20, 18689, "Ateþ 2", 5},
    {20, 18690, "Ateþ 3", 5},
    {20, 18691, "Ateþ 4", 5},
    {20, 18692, "Ateþ 5", 5},
    {20, 18694, "Ateþ 6", 5},
    {20, 18696, "Silah Dumaný", 5},
    {20, 18697, "Helikopter Kalkýþ Dumaný", 5},
    {20, 18699, "Jetpack Gazý 1", 5},
    {20, 18700, "Jetpack Gazý 2", 5},
    {20, 18702, "Jetpack Gazý 3", 5},
    {20, 18701, "Molotov Ateþi", 5},
    {20, 18703, "Duman 1", 5},
    {20, 18704, "Duman 2", 5},
    {20, 18725, "Duman 3", 5},
    {20, 18705, "Su Akýntýsý", 5},
    {20, 18672, "Akan Çimento", 5},
    {20, 18668, "Kýrmýzý Duman", 5},
    {20, 18682, "Patlama 1", 5},
    {20, 18683, "Patlama 2", 5},
    {20, 18684, "Patlama 3", 5},
    {20, 18685, "Patlama 4", 5},
    {20, 18686, "Patlama 5", 5},
    {20, 18725, "Beyaz Duman ", 5},
    {20, 18726, "Siyah Duman ", 5},
    {20, 18727, "Gri Duman ", 5},
    {20, 18728, "Ýþaret Fiþeði", 5},
    {20, 18729, "Spray Dumaný", 5},
    {20, 18716, "Büyük Duman", 5},
    {20, 18693, "Alev", 5},
    {20, 18723, "Yangýn Dumaný", 5},
    {20, 3066, "Yeþil Bezle Örtülmüþ Kasalar", 5},
    {20, 2960, "Çelik Kiriþ", 5},
    {20, 19912, "Demir Parmaklýklar 1", 5},
    {20, 998, "Bariyer 1", 5},
    {20, 989, "Demir Kapý", 5},
    {20, 11693, "Çim 1", 5},
    {20, 18863, "Çim 2", 5},
    {20, 19003, "Toprak 1", 5},
    {20, 19531, "Toprak 2", 5},
    {20, 19530, "Kum", 5},
    {20, 18720, "Su Akýntýsý 1", 5},
    {20, 18739, "Su Fýþkýrmasý 1", 5},
    {20, 18742, "Su Fýþkýrmasý 2", 5},
    {20, 18743, "Su Fýþkýrmasý 3", 5},
    {20, 355, "AK-47", 5},
    {20, 356, "M4", 5},
    {20, 357, "Rifle", 5},
    {20, 348, "Desert Eagle", 5},
    {20, 352, "UZI", 5},
    {20, 349, "Shotgun", 5},
    {20, 344, "Molotov", 5},
    {20, 2044, "MP5+", 5},
    {20, 2035, "M4+", 5},
    {20, 2041, "Mermi Kutusu 2", 5},
    {20, 2710, "Kutuda Saat", 5},
    {20, 3082, "Kapsül", 5},
    {20, 1583, "Atýþ Hedefi 1", 5},
    {20, 1584, "Atýþ Hedefi 2", 5},
    {20, 1585, "Atýþ Hedefi 3", 5},
    {20, 1586, "Atýþ Hedefi 4", 5},
    {20, 3496, "Abajur", 5},
    {20, 2905, "Kopmuþ Bacak", 5},
    {20, 2906, "Kopmuþ Kol", 5},
    {20, 2907, "Kopmuþ Gövde", 5},
    {20, 2908, "Ölü Kafasý", 5},
    {20, 1550, "Para dolu çanta", 5},
    {20, 1829, "Para dolu kasa", 5},
    {20, 19917, "Motor", 5},
    {20, 1212, "Para", 5},
    {20, 3243, "Çadýr", 5},
    {20, 19418, "Kelepçe", 5},
    {20, 372, "Tec9", 5},
    {20, 19995, "Þarjör", 5},
    {20, 13667, "Maskot", 5},
    {20, 14608, "Altýn heykel 3D", 5},
    {20, 13562, "Dev Sprite kutusu", 5},
    {20, 7388, "Dev otel logosu", 5},
    {20, 7392, "Dev kadýn heykeli 2D", 5},
    {20, 3524, "Kurukafa diki,li çubuk", 5},
    {20, 3525, "Meþale", 5},
    {20, 3461, "Uzun meþale", 5},
    {20, 6865, "Hayvan kurukafasý", 5},
    {20, 9833, "Dev süs havuzu fýþkiyesi", 5},
    {20, 7073, "Dev erkek heykeli 2D", 5},
    {20, 6965, "Süs havuzu", 5},
    {20, 1896, "Kumar Masasý", 5},

    // Spor Aletleri
    {21, 2913, "Halter", 5},
    {21, 2628, "Bench Press Aleti 1", 5},
    {21, 2629, "Bench Press Aleti 2", 5},
    {21, 2627, "Yürüyüþ Bandý", 5},
    {21, 2630, "Bisiklet Aleti", 5},
    {21, 3071, "Dumbbell 1", 5},
    {21, 2915, "Dumbbell 2", 5},
    {21, 2916, "Dumbbell 3", 5},
    {21, 3072, "Dumbbell 4", 5},
    {21, 2060, "Kum torbasý 1", 5},
    {21, 1985, "Kum torbasý 2", 5},

    // Administrator
    {22, 997, "Bariyer 1", 0},
    {22, 995, "Bariyer 2", 0},
    {22, 994, "Bariyer 3", 0},
    {22, 998, "Bariyer 4", 0},
    {22, 973, "Bariyer 5", 0},
    {22, 3578, "Bariyer 6", 0},
    {22, 19865, "Tahta Çit 1", 0},
    {22, 1408, "Tahta Çit 2", 0},
    {22, 1418, "Tahta Çit 3", 0},
    {22, 1446, "Tahta Çit 4", 0},
    {22, 1460, "Tahta Çit 5", 0},
    {22, 3276, "Tahta Çit 6", 0},
    {22, 1407, "Tahta Çit 7", 0},
    {22, 3260, "Tahta Çit 8", 0},
    {22, 982, "Demir Çit 1", 0},
    {22, 983, "Demir Çit 2", 0},
    {22, 984, "Demir Çit 3", 0},
    {22, 8674, "Demir Çit 4", 0},
    {22, 970, "Demir Çit 5", 0},
    {22, 1412, "Demir Çit 6", 0},
    {22, 1468, "Demir Çit 7", 0},
    {22, 19868, "Demir Çit 8", 0},
    {22, 19869, "Demir Çit 9", 0},
    {22, 3850, "Cam Çit 1", 0},
    {22, 1256, "Bank 1", 0},
    {22, 1280, "Bank 2", 0},
    {22, 1368, "Bank 3", 0},
    {22, 1364, "Bank 4", 0},
    {22, 10183, "Park Çizgileri 1", 0},
    {22, 10032, "Park Çizgileri 2", 0},
    {22, 1966, "Garaj Kapýsý 1", 0},
    {22, 3294, "Garaj Kapýsý 2", 0},
    {22, 4084, "Garaj Kapýsý 3", 0},
    {22, 5422, "Garaj Kapýsý 4", 0},
    {22, 5043, "Garaj Kapýsý 5", 0},
    {22, 5340, "Garaj Kapýsý 6", 0},
    {22, 5779, "Garaj Kapýsý 7", 0},
    {22, 5856, "Garaj Kapýsý 8", 0},
    {22, 6400, "Garaj Kapýsý 9", 0},
    {22, 9093, "Garaj Kapýsý 10", 0},
    {22, 10182, "Garaj Kapýsý 11", 0},
    {22, 10575, "Garaj Kapýsý 12", 0},
    {22, 8948, "Garaj Kapýsý 13", 0},
    {22, 9625, "Garaj Kapýsý 14", 0},
    {22, 11102, "Garaj Kapýsý 15", 0},
    {22, 11313, "Garaj Kapýsý 16", 0},
    {22, 13187, "Garaj Kapýsý 17", 0},
    {22, 13817, "Garaj Kapýsý 18", 0},
    {22, 13028, "Garaj Kapýsý 19", 0},
    {22, 11319, "Garaj Kapýsý 20", 0},
    {22, 11416, "Garaj Kapýsý 21", 0},
    {22, 13188, "Garaj Kapýsý 22", 0},
    {22, 1281, "Masa / Sandalye 1", 0},
    {22, 1432, "Masa / Sandalye 2", 0},
    {22, 1594, "Masa / Sandalye 3", 0},
    {22, 1679, "Masa / Sandalye 4", 0},
    {22, 1257, "Durak", 0},
    {22, 3881, "Güvenlik Kulübesi", 0},
    {22, 19817, "Garaj Rampa 1", 0},
    {22, 19872, "Garaj Rampa 2", 0},
    {22, 19982, "Hýz Levhasý 1", 0},
    {22, 19983, "Hýz Levhasý 2", 0},
    {22, 19984, "Hýz Levhasý 3", 0},
    {22, 19985, "Hýz Levhasý 4", 0},
    {22, 19986, "Hýz Levhasý 5", 0},
    {22, 19987, "Hýz Levhasý 6", 0},
    {22, 19988, "Hýz Levhasý 7", 0},
    {22, 19989, "Hýz Levhasý 8", 0},
    {22, 19990, "Hýz Levhasý 9", 0},
    {22, 19991, "Hýz Levhasý 10", 0},
    {22, 19992, "Hýz Levhasý 11", 0},
    {22, 19966, "Stop Levhasý", 0},
    {22, 19968, "No Park Levhasý 1", 0},
    {22, 19969, "No Park Levhasý 2", 0},
    {22, 19967, "Do Not Enter Levhasý", 0},
    {22, 19972, "Road Closed Levhasý", 0},
    {22, 19872, "Tamirhane Rampasý 1", 0},
    {22, 19817, "Tamirhane Rampasý 2", 0},
    {22, -2008, "LSFD Exterior", 0},
    {22, -2009, "Willowfield Garaj", 0},
    {22, -2010, "Airport Garaj", 0},
    {22, -2100, "colonel yat", 0},
    {22, -2101, "kopek", 0},
    {22, -2102, "unitypark 2", 0},
    {22, -2103, "zemin", 0},
    {22, -2104, "saintspark", 0},
    {22, -2105, "santv", 0},
    {22, -2106, "stadyumbinalar1", 0},
    {22, -2107, "stadyumbinalar2", 0},
    {22, -2108, "newscafe_dy", 0},
    {22, -2109, "phil", 0},
    {22, -2110, "lh_taxifirm01", 0},
    {22, -2111, "lh_taxifirm02", 0},
    {22, -2112, "lh_philsext", 0},
    {22, -2113, "odn_colony_nt", 0}
    
};

static const TuningCategories[10][32] =
{
    "Spoiler",
    "Hava Delikleri",
    "Egzoz",
    "On Tampon",
    "Arka Tampon",
    "Cati ve Etiket",
    "Tekerlekler",
    "Hidrolik",
    "Etekler",
    "Paintjob"
};

static const DrugsInformations[10][12] =
{
    //1. satir bilmiyorum bunun islevini derinlemesine bakmadim
    //2. satir ihtiyac duyulan toplam malzeme, farkli turlerdeki
    //3. ayni malzemeden kac tane olacak
    //4: malzeme envanter idsi // bundan sonra ikili ikili atlýyor 3-4 gibi

    {1, 1, 4, 76}, // Kokain - 4 Amonyak
    {5, 3, 1, 75, 1, 76, 3, 74}, // Eroin
    {9, 5, 3, 77, 2, 78, 1, 79, 1, 80, 2, 81}, // Amfetamin
    {6, 5, 1, 83, 1, 84, 1, 85, 1, 86, 2, 82}, // Ecstasy
    {3, 2, 1, 88, 2, 87}, // LSD
    {4, 2, 3, 89, 1, 71}, // PCP
    {4, 3, 1, 72, 2, 71, 1, 75}, // Ketamin
    {5, 3, 2, 90, 1, 91, 1, 93}, // Metamfetamin
    {1, 1, 1, 77}, // Crack
    {3, 3, 1, 8, 1, 93, 1, 92} // Purple Drank
};

new CarColors[256] =
{
    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,
    26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
    52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69 , 70, 71, 72, 73, 74, 75, 76, 77,
    78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
    104, 105, 106, 107, 108, 109, 110, 111, 112,113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126,
    128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149,
    150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172,
    173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195,
    196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
    219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
    242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255
};

enum E_CASINOWHEEL_INFO
{
    colorName[15],
    colorChar,
    colorWin
};
static const ColorWheelInfo[5][E_CASINOWHEEL_INFO] =
{
    {"Kýrmýzý", 'r', 6},
    {"Sarý", 'y', 5},
    {"Yeþil", 'g', 4},
    {"Mor", 'p', 2},
    {"fwruqunkotl", 'b', 1}
};

enum E_INTERIORS_HOUSE
{
    iHouseInt,
    Float:iHouseX,
    Float:iHouseY,
    Float:iHouseZ,
    iType
};
static const Float:allHouseInteriors[][E_INTERIORS_HOUSE] =
{
//  {interior, x, y, z, ev tipi},

    {1, 243.72, 304.91, 999.15, HOUSE_VERYLITTLE}, // (0) Sergen'in içi silah dolu ev (Eþyalý)
    {1, 243.7188, 305.1196, 1999.1484, HOUSE_VERYLITTLE}, // (1) Sergen'in içi silah dolu ev (Eþyasýz)
    {2, 266.50, 304.90, 999.15, HOUSE_VERYLITTLE}, // (2) Kumar sistemini ilk denediðimiz ev (Eþyalý)
    {1, 267.1153, 304.8967, 1999.1484, HOUSE_VERYLITTLE}, // (3) Kumar sistemini ilk denediðimiz ev (Eþyasýz)
    {4, 261.12, 1284.30, 1080.26, HOUSE_LITTLE}, // (4) Çok ufak ev. (Eþyalý)
    {1, 261.0424, 1284.8021, 2080.2578, HOUSE_LITTLE}, // (5) Çok ufak ev. (Eþyasýz)
    {11, 2283.04, -1140.28, 1050.90, HOUSE_VERYLITTLE}, // (6) SBC benzer. (Eþyalý)
    {1, 2282.8577, -1139.9983, 2050.8984, HOUSE_VERYLITTLE}, // 7 SBC benzer. (Eþyasýz)
    {5, 2233.7888, -1114.2689, 1050.8828, HOUSE_VERYLITTLE}, // 8 Rina videosundaki ev. (Eþyalý)
    {1, 2233.9485, -1114.5917, 2050.8828, HOUSE_VERYLITTLE}, // 9 Rina videosundaki ev. (Eþyasýz)
    {1, 2218.40, -1076.18, 1050.48, HOUSE_VERYLITTLE}, // 10 BR'deki Airport Ev (Eþyalý)
    {1, 2218.1658, -1076.3433, 2050.4844, HOUSE_VERYLITTLE}, // 11 BR'deki Airport Ev (Eþyasýz)
    {10, 2259.38, -1135.77, 1050.64, HOUSE_VERYLITTLE}, // 12 Otel Odasý (Eþyalý)
    {1, 2260.0759, -1135.9066, 2050.6328, HOUSE_VERYLITTLE}, // 13 Otel Odasý (Eþyasýz)
    {1, 223.1618, 1287.5175, 1082.1406, HOUSE_LITTLE}, // 14 SBC (Eþyalý)
    {1, 223.1723, 1287.6208, 2082.1406, HOUSE_LITTLE}, // 15 SBC (Eþyasýz)
    {8, -42.59, 1405.47, 1084.43, HOUSE_LITTLE}, // 16 YN'de beleþe aldýðým ev. (Eþyalý)
    {1, -42.4194, 1405.9885, 2084.4297, HOUSE_LITTLE},// 17 YN'de beleþe aldýðým ev. (Eþyasýz.)
    {15, 376.4421, 1417.3984, 1081.00, HOUSE_MEDIUM}, // 18 Labirent (Eþyalý) [PROBLEM YOK)
    {1, 376.4421, 1417.3984, 2081.3281, HOUSE_MEDIUM}, // 19 Labirent (Eþyasýz)
    {15, 387.0598, 1471.8989, 1080.1875, HOUSE_MEDIUM},// 20 emrelerin kapalý betada kullandýðý ev (eþyalý)
    {1, 386.7025, 1471.7888, 2080.1875, HOUSE_MEDIUM},// 21 emrelerin kapalý betada kullandýðý ev (eþysýz)
    {2, 2237.59, -1081.64, 1049.02, HOUSE_MEDIUM}, // 22 Hill Lüks Ev (Eþyalý)[PROBLEM YOK]
    {1, 2237.4016, -1081.2715, 2049.0234, HOUSE_MEDIUM},// 23 Hill Lüks Ev (Eþyasýz)
    {15, 295.1485, 1473.1080, 1080.2578, HOUSE_MEDIUM}, // 24 Kýrmýzý (Eþyalý)
    {1, 295.0743, 1472.4122, 2080.2578, HOUSE_MEDIUM},// 25 Kýrmýzý (Eþyasýz)
    {6, -68.81, 1351.21, 1080.21, HOUSE_LITTLE}, // 26Mavi Kaitlyn Chandler (Eþyalý)
    {1, -68.8283, 1351.6528, 2080.2109, HOUSE_LITTLE},// 27Mavi Kaitlyn Chandler (Eþyasýz)
    {9, 260.7421, 1238.2261, 1084.2578, HOUSE_LITTLE},// 28Mavi ufak ev, yeni nesil temel interior (eþyalý)
    {1, 260.8091, 1237.7085, 2084.2578, HOUSE_LITTLE},// 29Mavi ufak ev, yeni nesil temel interior (eþyasýz)
    {2, 2468.2576, -1698.2361, 1013.5078, HOUSE_MEDIUM}, // 30Ryder House (Eþyalý)
    {1, 2468.7876, -1698.3311, 2013.5078, HOUSE_MEDIUM},// 31Ryder House (Eþyasýz)
    {15, 328.05, 1477.73, 1084.44, HOUSE_MEDIUM}, // 32Köpek baðlasan durmaz. (Eþyalý)
    {1, 328.1050, 1477.9358, 2084.4375, HOUSE_MEDIUM}, // 33Köpek baðlasan durmaz. (Eþyasýz)
    {8, 2365.31, -1135.60, 1050.88, HOUSE_MEDIUM}, // 34Yerleri Parlak Ev (Eþyalý)
    {5, 22.8827, 1403.3101, 2084.4370, HOUSE_MEDIUM}, // 35Yerleri Parlak Ev (Eþyasýz ve Karanlýk)
    {2, 446.99, 1397.07, 1084.30, HOUSE_BIG}, // 36(Eþyalý)
    {1, 446.99, 1398.07, 2084.30, HOUSE_BIG}, // 37(Eþyasýz)
    {4, 300.4356, 310.8415, 1003.3047, HOUSE_BIG}, // 38Musa'nýn evi (Eþyalý)
    {1, 300.2058, 310.2670, 2003.3047, HOUSE_BIG}, // 39Musa'nýn evi (Eþyasýz)
    {15, -283.8380, 1471.0853, 1084.3750, HOUSE_BIG},// 40Beyaz Tasarým (Eþyalý)
    {1, -283.7555, 1471.0939, 2084.3750, HOUSE_BIG},// 41Beyaz Tasarým (Eþyasýz)
    {3, 2495.8711, -1693.0996, 1014.7422, HOUSE_BIG}, // 42 CJ (Eþyalý)
    {1, 2496.0137, -1692.5302, 2014.7422, HOUSE_BIG},// 43 CJ (Eþyasýz)
    {10, 2270.2844, -1210.5540, 1047.5625, HOUSE_BIG}, // 44Rina videosunda gördüm (Eþyalý)
    {1, 2269.6895, -1210.4908, 2047.5625, HOUSE_BIG}, // 45Rina videosunda gördüm (Eþyasýz)
    {5, 318.5645, 1118.2079, 1083.8828, HOUSE_MEDIUM},// 46 Pot Evi (Eþyalý)
    {1, 318.6007, 1115.3239, 2083.8828, HOUSE_MEDIUM},// 47 Pot Evi (Eþyasýz)
    {3, 235.2923, 1187.3684, 1080.2578, HOUSE_HUGE}, // 48 Kýrmýzý Çift Katlý (Eþyalý)
    {1, 235.5473, 1187.1680, 2080.2578, HOUSE_HUGE}, // 49 Kýrmýzý Çift Katlý (Eþyasýz)
    {4, -261.1430, 1456.6396, 1084.3672, HOUSE_BIG}, // 50tahta eþyalý
    {1, -264.09381, 1449.44531, 2085.36719, HOUSE_BIG}, // 51tahta eþyasýz
    {6, 234.3149, 1064.2772, 1084.2114, HOUSE_HUGE}, // 52Mavi ev Varol (Eþyalý)
    {1, 234.20, 1064.18, 2084.21, HOUSE_HUGE}, // 53Mavi ev Varol (Eþyasýz)
    {2, 491.0733, 1399.0709, 1080.2578, HOUSE_HUGE}, // 54Pembe çift katlý (Eþyalý)
    {1, 491.2603, 1398.8422, 2080.2578, HOUSE_HUGE}, // 55Pembe çift katlý (Eþyasýz)
    {5, 226.3934, 1114.1824, 1081.9934, HOUSE_HUGE},// 56Felipe Quante (eþyalý)
    {1, 226.3934, 1114.1824, 2080.9934, HOUSE_HUGE},// 57Felipe Quante (eþyasýz)
    {5, 140.3138, 1366.3210, 1083.8594, HOUSE_BIG},// 58blueberry warehouse yn eþyalý
    {1, 150.6786, 1369.1771, 2081.9778, HOUSE_BIG},// 59blueberry warehouse yn eþyasýz
    {9, 83.1882, 1322.5930, 1083.8662, HOUSE_BIG},// 60yndeki çift kalý ev eþyalý
    {1, 83.1882, 1322.5930, 2083.8662, HOUSE_BIG},// 61yndeki çift kalý ev eþyasýz
    {6, 2196.85, -1204.25, 1049.02, HOUSE_BIG}, // 62sheila vynn eþyalý
    {1, 2196.1416, -1204.3132, 2049.0234, HOUSE_BIG},// 63sheila vynn eþyasýz
    {12, 2324.53, -1149.54, 1050.71, HOUSE_BIG}, // 64Tony Serrano (Eþyalý)
    {1, 2324.4143, -1149.2026, 2050.7422, HOUSE_BIG}, // 65Tony Serrano (Eþyasýz)
    {8, 2807.7336, -1174.5930, 1025.5703, HOUSE_BIG}, // 66CJ'in soyduðu ev (Eþyalý)
    {1, 2807.8198, -1174.2395, 2025.5703, HOUSE_BIG}, // 67CJ'in soyduðu ev (Eþyasýz)
    {7, 225.68, 1021.45, 1084.02, HOUSE_HUGE}, // 68Güzel Ev (Eþyalý)
    {1, 225.7984, 1021.8391, 2083.7170, HOUSE_HUGE}, // 69Güzel Ev (Eþyasýz)
    {5, 22.9676, 1403.8368, 1084.4297, HOUSE_MEDIUM}, // 70 Yerleri Parlak Ev (Eþyasýz ve Karanlýk)
    {5, 22.8827, 1403.3101, 2084.4370, HOUSE_MEDIUM}, // 71 Yerleri Parlak Ev (Eþyasýz ve Karanlýk)
    {1, 1412.4752, -1.0650, 1000.9940, HOUSE_VERYLITTLE}, //72 boþ en küçük
    {1, 1412.4752, -1.0650, 1000.9940, HOUSE_LITTLE}, // 73 boþ küçük
    {1, 1412.4752, -1.0650, 1000.9940, HOUSE_MEDIUM}, // 74 boþ orta
    {1, 1412.4752, -1.0650, 1000.9940, HOUSE_BIG}, // 75 boþ büyük
    {1, 1412.4752, -1.0650, 1000.9940, HOUSE_HUGE} // 76 boþ kocaman
};

//Command Flags

enum(<<=1)
{
    CMD_jamyPlus = 1,
    CMD_Marvellous,
    CMD_DEVELOPER,
    CMD_iglead,
    CMD_GAME3,
    CMD_GAME2,
    CMD_GAME1,
    CMD_SUPPORTER3,
    CMD_SUPPORTER2,
    CMD_SUPPORTER,
    CMD_PDFDLSNNMOD,
    CMD_PDFDLSNNMODGOV,
    CMD_USER,
    CMD_USEROOC,
    CMD_LSPD,
    CMD_SERVERFACTS,
    CMD_LEGALFACT,
    CMD_LSFD,
    CMD_GOV,
    CMD_PDFDGOV,
    CMD_PDFD,
    CMD_LSNN,
    CMD_ILLEGAL,
    CMD_FDGOV,
    CMD_PDGOV
};

//Streamer Array

enum g_custom_pickups
{
    cp_type,
    cp_id
};
new g_pks[g_custom_pickups];
new siz_g_pks = g_custom_pickups;

enum g_custom_objects
{
    co_database_id,
    co_price,
    Float:co_pos_x,
    Float:co_pos_y,
    Float:co_pos_z,
    Float:co_rot_x,
    Float:co_rot_y,
    Float:co_rot_z,
    co_opened,
    co_name[100],
    co_table_active,
    co_table_placed
};
new g_obj[g_custom_objects];
new siz_g_obj = g_custom_objects;

enum newTEXTURES
{
    xmodelID,
    xTxdIsim[64],
    xTextureIsim[64],
    xIsim[64]
};

new TextureMATERIALS[112][newTEXTURES] =
{
    {0, "none", "none", "Varsayýlan"},
    {13691, "bevcunto2_lahills", "crazypave", "Taþlý Duvar 1"},
    {13691, "bevcunto2_lahills", "stonewall3_la", "Taþlý Duvar 2"},
    {13691, "bevcunto2_lahills", "ws_floortiles2", "Fayans (Zemin)"},
    {13691, "bevcunto2_lahills", "ws_patio1", "Veranda Zemini"},
    {13686, "cunte1_lahills", "Bow_Abattoir_Conc2", "Ýnþaat Duvar"},
    {13724, "docg01_lahills", "ab_tile2", "Fayans (Zemin) 2"},
    {13724, "docg01_lahills", "Bow_dlct_plstrb_gen", "Aþýnmýþ Duvar 1"},
    {13724, "docg01_lahills", "Bow_sub_decortop", "Kirli Duvar"},
    {13724, "docg01_lahills", "chr_flags_256", "Fayans (Zemin) 3"},
    {13724, "docg01_lahills", "concpanel_la", "Panelli Beyaz Duvar"},
    {13724, "docg01_lahills", "des_ranchwall1", "Taþlý Duvar 2"},
    {13724, "docg01_lahills", "glassblock4_law", "Cam Kaplama"},
    {13724, "docg01_lahills", "redbrickground256", "Tuðla (Zemin)"},
    {13724, "docg01_lahills", "ston10S", "Fayans (Zemin) 4"},
    {13724, "docg01_lahills", "ws_stationfloor", "Ýstasyon Zemini"},
    {13710, "easthills_lahills", "indund_64", "Balkon Zemini"},
    {13710, "easthills_lahills", "Pave04_128", "Kirli Fayans"},
    {13710, "easthills_lahills", "pavetilealley256128", "Bahçe Zemini"},
    {13710, "easthills_lahills", "sjmoran4", "Aþýnmýþ Duvar 2"},
    {13710, "easthills_lahills", "sw_wallbrick_06", "Taþlý Duvar 3"},
    {13675, "lahillsgrounds", "sjmlahus29", "Fayans (Zemin) 5"},
    {13701, "lahillshilhs1c", "man_cellarfloor128", "Bodrum Zemini"},
    {13673, "mullho03a_lahills", "stonewalls1_LA", "Taþlý Duvar 4"},
    {13673, "mullho03a_lahills", "sw_wall02", "Taþlý Duvar 5"},
    {13711, "mullho03_lahills", "des_flatlogs", "Ahþap Tomruk"},
    {13715, "richman02_lahills", "fakestone1_LA", "Taþlý Duvar 5"},
    {13716, "richman04_lahills", "brick", "Aþýnmýþ Tuðla Duvar"},
    {13676, "roads_tunnellahills", "tunwill1law2", "Galeri Duvarý"},
    {9514,  "711_sfw",  "shingles2", "Taþlý Duvar 6"},
    {16640, "a51",  "wallgreyred128", "Gri Kýrmýzý Duvar"},
    {16639, "a51_labs", "a51_labwall1", "Kýrmýzý Çizgili Duvar"},
    {16639, "a51_labs", "dam_terazzo", "Fayans (Zemin) 6"},
    {16322, "a51_stores", "metalic128",  "Metal"},
    {1564,  "ab_jetlite",   "CJ_BULLETBRASS", "Mermi Kaplamasý"},
    {4835,  "airoads_las",  "ws_carparkwall1", "Otopark Duvarý"},
    {4833,  "airprtrunway_las", "tuntest1las", "Parlak Taþlý Duvar"},
    {4552, "ammu_lan2", "sl_lavicdtwall1", "Desenli Duvar Kaðýdý (Yýldýz)"},
    {5397, "barrio1_lae", "closedblank1_256", "Soluk Duvar"},
    {11100, "bendytunnel_sfse", "Bow_sub_walltiles", "Fayans (Zemin) 7"},
    {18028, "cj_bar2", "gb_nastybar09", "Yýrtýk Döþeme"},
    {18028, "cj_bar2", "gb_nastybar13", "Pencere"},
    {18028, "cj_bar2", "gb_nastybar01", "Ahþap Duvar"},
    {3603, "bevmans01_la", "cemebuild03_law", "Kýrmýzý tuðla duvar"},
    {3603, "bevmans01_la", "pavepat2_128", "Desenli tuðla"},
    {9583, "bigshap_sfw", "boatfunnel1_128", "Mavi kýrmýzý beyaz çizgiler"},
    {3922, "bistro", "ahoodfence2", "Açýk renk tuðla duvar"},
    {3922, "bistro", "barbersflr1_LA", "Mermer duvar"},
    {3922, "bistro", "Marble", "Dalgalý granit 1"},
    {3922, "bistro", "Marble2", "Dalgalý granit 2"},
    {3922, "bistro", "StainedGlass", "Karýþýk renkli camlar"},
    {3922, "bistro", "Tablecloth", "Karýþýk renkli duvar"},
    {4593, "buildblk55", "sl_plazatile01", "Gri tuðla duvar"},
    {17545, "burnsground", "newall10_seamless", "Taþlý duvar"},
    {11145, "carrierint_sfs", "ws_floor2", "Yeþil Duvar 2"},
    {5710, "cemetery_law", "churcharch_law", "Taþla örülü kapý giriþi"},
    {1594, "chairsntable", "mallfloor6", "Mavi-Turuncu mermer"},
    {10031, "chinatown2", "ws_plasterwall2", "Beton duvar"},
    {10031, "chinatown2", "ws_red_wood2", "Kýrmýzý ahþap"},
    {8639, "chinatownmall", "ctmall04_64", "Açýk renk kýrmýzý"},
    {8639, "chinatownmall", "ctmall11_64", "Kýrmýzý üzerine beyaz ve turuncu çizgi"},
    {8639, "chinatownmall", "ctmall12_128", "Beyaz üzerine turuncu çizgi"},
    {8639, "chinatownmall", "ctmall15_128", "Sarý üzerine turuncu çizgi"},
    {8639, "chinatownmall", "ctmall17_128", "Gri þeritli beton duvar"},
    {3980, "cityhall_lan", "citywall1", "Beyaz kare mermer duvar"},
    {10947, "cityhall_sfse", "ws_oldoffice5", "Gri dikdörtgen mermer duvar"},
    {3979, "civic01_lan", "airportwall_256128", "Gri dikdörtgen taþlar"},
    {3979, "civic01_lan", "crazy paving", "Karýþýk renkli taþlar"},
    {3998, "civic04_lan", "twintWall1_LAn", "Krem rengi mermer"},
    {3988, "civic06_lan", "LAcityhwal2", "Beyaz dikdörtgen taþlar"},
    {4004, "civic07_lan", "badmarb1_LAn", "Gri dikdörtgen taþlar 2"},
    {4004, "civic07_lan", "oldbrwall1_LA", "Karýþýk taþlý duvar"},
    {5706, "ci_studio5", "tw@t_wall1", "Turkuaz"},
    {12844, "cos_liquorstore", "cos_beercab", "Bar dolabý"},
    {12844, "cos_liquorstore", "cos_liqbots", "Bar dolabý 2"},
    {12841, "cos_pizzaplace", "swimpoolside1_128", "Mavi-Beyaz banyo fayansý"},
    {3178, "counthousmisc", "shackwood01", "Soluk renk ahþap"},
    {10398, "countryclub_sfs", "hc_brickwall1", "Kýrmýzý tuðla duvar"},
    {6522, "cuntclub_law2", "vgschapelwall01_128", "Soluk renk tuðla"},
    {12850, "cunte_block1", "ws_redbrickold", "Karýþýk renkli tuðlalar"},
    {13131, "cunte_blockammo", "newall10", "Karýþýk renkli taþlar 2"},
    {12855, "cunte_cop", "ws_bigstones", "Dikdörtgen betonlar"},
    {12853, "cunte_gas01", "cj_flag2", "Konfederasyon bayraðý"},
    {12853, "cunte_gas01", "starspangban1_256", "Amerikan bayraðý"},
    {17049, "cuntwf", "sw_slate01", "Daðýnýk dizilmiþ taþlar"},
    {17067, "cw2_logcabins", "cw2_logwall", "Dizili kütükler"},
    {3187, "cxref_quarrytest", "gs_wood2", "Kýrmýzý ahþap"},
    {16102, "des_cen", "CJ-COUCHL2", "Kahverengi deri"},
    {16021, "des_geyser", "sjmbigold1", "Karýþýk renkli taþlar"},
    {16136, "des_telescopestuff", "stoneclad1", "Taþ kaplý duvar"},
    {3595, "dingbat01_la", "mosaic1_LAwn", "Mavi kare taþlar"},
    {3853, "gay_xref", "ws_gayflag2", "LGBT bayraðý"},
    {4806, "ground5_las", "newcut3_LAS", "Yansýtmalý renkli zemin"},
    {10429, "hashblock1_sfs", "ws_apartmentblue2", "Mor tuðlalar"},
    {10434, "hashblock2b_sfs", "ws_apartmentgrn2", "Yeþil tuðlalar"},
    {5126, "imrancomp_las2", "lastat97", "Beyaz-Kahverengi kare mermerler"},
    {5401, "jeffers4_lae", "stainwinLAe", "Ýþlemeli camlar"},
    {849, "junkpiles", "ws_oldredbrick", "Eskimiþ kýrmýzý tuðlalar"},
    {5267, "lashops91_las2", "laspowrec2", "Kýrmýzý tuðlalar"},
    {5120, "lasroads_las2", "lasunion994", "Kýrmýzý mermer zemin"},
    {3961, "lee_kitch", "dinerfloor01_128", "Siyah-beyaz damalý zemin"},
    {5787, "melrose02_lawn", "LAbluewall", "Mavi solgun duvar"},
    {5787, "melrose02_lawn", "LAgreenwall", "Yeþil solgun duvar"},
    {6351, "rodeo02_law2", "woodboards1", "Parlak ahþap"},
    {10226, "sfeship1", "CJ_RED_LEATHER", "Kýrmýzý deri"},
    {5040,  "shopliquor_las", "lasjmliq1", "Solgun tuðlalar"},
    {6095, "shops01_law", "GB_chatwall03b", "Mavili beyaz çizgili duvar"},
    {6095, "shops01_law", "hotwall1_law", "Dikdörtgen taþ duvar"},
    {5717, "sunrise11_lawn", "ShopWall1_LAn", "Mavi-Sarý þeritli duvar"},
    {17511, "stadium_lae2", "stadt_banner1", "Karýþýk renkli þeritli duvar"},
    {8399, "vgs_shops", "vegasclub02_128", "Figuranlar"},
    {1677, "wshxrefhse2", "awning1256", "Kýrmýzý Þerit"}
};

//Dynamic Arrays

enum SunucuDegiskenleri
{
    CurrentWeather,
    CurrentHour,
    LastAdv,
    CheatKick,
    IncomingIP[16],
    IncomingCount,
    IncomingTime,
    TollTax,
    HealTax,
    TruckerTax,
    Payday,
    /*bool:LSNNYayin,
    bool:LSNNYayinDurum,
    Float:LSNNYayinPos[6],
    LSNNYayinINT,
    LSNNYayinVW,
    LSNNKamera,*/
    TepsiSistemi,
    DekorSecDurum,
    ISSY,
    ESSY,
    ASSY,
    NPPayday,
    Oylama,
    OylamaSebebi[120],
    OylamaSecenekSayi,
    VerilenOy[5],
    MobilyaSatinAlma,
    MobilyaSatma,
    CasinoCevir,
    PaydayOrani,
    AntiSpam,
/*  CekilisAdi[124],
    CekilisDurum,
    CekilisTuru,
    CekilisHavuzu,
    BiletUcreti,*/
    AntiDinamikObje,
    AntiDekorasyonSilme,
    GaleriDurum,
    SiparisNoktalari,
    ReklamVerildi,
    HirsizlikNokta,
    TextureliObje
};
new SunucuBilgi[SunucuDegiskenleri];
new OylamaSecenek[5][32];

enum E_GAMES
{
    gameExists,
    gameID,
    gameType,
    Float:gameX,
    Float:gameY,
    Float:gameZ,
    gameWorld,
    gameInterior,
    gameArea,
    Text3D:gameText
};
new GameInfo[MAX_GAMES][E_GAMES];

enum E_COMPANIES
{
    cReference,
    cValid,
    cName[50],
    Float:cBuyPosX,
    Float:cBuyPosY,
    Float:cBuyPosZ,
    cInterior,
    cWorld,
    cBuyType,
    cUnit,
    cPrice,
    Text3D:cText,
    cPoint,
    stok,
    mstok,
    sirketid,
    aliyor,
    satiyor
};
new CompanyInfo[MAX_COMPANIES][E_COMPANIES];

enum E_TELEPORTS
{
    tExists,
    teleportID,
    Float:teleportX,
    Float:teleportY,
    Float:teleportZ,
    Float:teleportA,
    Float:teleportGX,
    Float:teleportGY,
    Float:teleportGZ,
    Float:teleportGA,
    teleportWorld,
    teleportGWorld,
    teleportFaction,
    teleportPickup,
    teleportGPickup,
    teleportInterior,
    teleportGInterior,
    tSahip,
    tKilitli,
    tSifre[8]
};
new TeleportInfo[MAX_TELEPORTS][E_TELEPORTS];

enum E_GATES
{
    gateID,
    gateExists,
    Float:gateClosePX,
    Float:gateClosePY,
    Float:gateClosePZ,
    Float:gateCloseRX,
    Float:gateCloseRY,
    Float:gateCloseRZ,
    Float:gateOpenPX,
    Float:gateOpenPY,
    Float:gateOpenPZ,
    Float:gateOpenRX,
    Float:gateOpenRY,
    Float:gateOpenRZ,
    gateFaction,
    gateOwner,
    gateModel,
    gateObject,
    bool:gateOpened,
    gateInt,
    gateVW,
    Float:gateHiz,
    Float:gateMenzil,
    gatePass[24],
    GateGise,
    bool:GiseDurum,
    GiseTimer,
    Text3D:GiseLabel
};
new GateBilgi[MAX_GATES][E_GATES];

enum E_ROADBLOCKS
{
    rbExists,
    rbType,
    rbModelID,
    Float:rbPosX,
    Float:rbPosY,
    Float:rbPosZ,
    rOwner[MAX_PLAYER_NAME],
    rbObject,
    rbFaction
};
new RoadBlockInfo[MAX_ROADBLOCKS][E_ROADBLOCKS];

enum E_MEALS
{
    mExists,
    mModel,
    mObject,
    Float:mPosX,
    Float:mPosY,
    Float:mPosZ,
    mInterior,
    mWorld,
    mPlayer,
    mEditing
};
new MealInfo[MAX_MEALS][E_MEALS];

enum E_CRATES
{
    crPlayer,
    crExists,
    crType,
    crAmount,
    crVehicleID,
    Float:crPosX,
    Float:crPosY,
    Float:crPosZ,
    crInterior,
    crWorld,
    crObject,
    Text3D:crLabel,
    crItems[MAX_IMPORT_FOR_PLAYER],
    crAmounts[MAX_IMPORT_FOR_PLAYER],
    crQuality[MAX_IMPORT_FOR_PLAYER],
    crItemsCount,
    crCompany
};
new CrateInfo[MAX_CRATES][E_CRATES];

enum E_GRAFFITIS
{
    gID,
    gExists,
    gText[128],
    gFont[30],
    Float:gX,
    Float:gY,
    Float:gZ,
    Float:gRX,
    Float:gRY,
    Float:gRZ,
    gINT,
    gVW,
    gObject,
    gSize
};
new GraffitoInfo[MAX_GRAFFITIS][E_GRAFFITIS];

enum E_FREQUENCES
{
    rID,
    rExists,
    rPassword[32],
    rOwner,
    rFaction
    //rHour
}
new FrequenceInfo[MAX_FREQUENCES][E_FREQUENCES];

enum E_DROPPEDITEMS
{
    idPlayer[MAX_PLAYER_NAME],
    idAmount,
    Float:idPosX,
    Float:idPosY,
    Float:idPosZ,
    Float:idRotX,
    Float:idRotY,
    Float:idRotZ,
    idInt,
    idWorld,
    idObject,
    idList,
    idLink[128],
    idArea,
    idQuality,
    Text3D:idLabel,
    bool:Trisha
};
new IDroppedInfo[MAX_DROPPED_ITEMS][E_DROPPEDITEMS];

enum E_DPS
{
    dpExists,
    Text3D:dpText,
    Float:dpX,
    Float:dpY,
    Float:dpZ,
    dpTimer
};
new DPInfo[MAX_PLAYERS][MAX_DPS][E_DPS];

enum E_PAYPHONES
{
    cID,
    cExists,
    Float:cPosX,
    Float:cPosY,
    Float:cPosZ,
    Float:cRotX,
    Float:cRotY,
    Float:cRotZ,
    cNumber,
    cObject,
    cDialing,
    cDialObject,
    Text3D:KulubeLabel
};
new PayPhoneInfo[MAX_PAYPHONES][E_PAYPHONES];

enum E_CIMICI
{
    cID,
    cOwner,
    cType,
    cSubject,
    cPrivate,
    cExpires,
    cEnabled,
    Float:cPos[3],
    cInterior,
    cVirtualWorld
};
new CimiceInfo[MAX_CIMICI][E_CIMICI];

enum E_CESET
{
    cID,
    cName[MAX_PLAYER_NAME],
    cSkin,
    cExists,
    cOlduren[MAX_PLAYER_NAME],
    cSilah[24],
    Float:ceX,
    Float:ceY,
    Float:ceZ,
    Float:ceA,
    ceInterior,
    ceVW,
    Text3D:cNameTag,
    cBagaj,
    cAktor,
    cYaniyor,
    cYanginObjesi,
    cOccupied[24]
};
new CesetInfo[MAX_CESET][E_CESET];


enum E_IHBAR {
    ihbarExists,
    ihbarID,
    ihbarYapan[MAX_PLAYER_NAME],
    ihbarTarihi[24],
    ihbarAsilKonum[MAX_ZONE_NAME],
    ihbarIcerigi[128],
    ihbarTarifKonum[128],
    ihbarYonlenenEkipSayisi,
    ihbarCozuldu,
    ihbarNumara
};
new IhbarInfo[MAX_IHBAR][E_IHBAR];

enum E_CALINTI {
    caExists,
    caID,
    caPlaka[13],
    caTarih[20],
    caCozuldu,
    caKonum[MAX_ZONE_NAME],
    Float:caPosX,
    Float:caPosY,
    Float:caPosZ,
    caYonlenenEkipSayisi,
    caModel[64]
};
new CalintiInfo[MAX_CALINTI][E_CALINTI];

enum E_COPKUTUSU {
    copExists,
    copID,
    copSayisi,
    Float:copPosX,
    Float:copPosY,
    Float:copPosZ,
    Float:copPosRX,
    Float:copPosRY,
    Float:copPosRZ,
    copLabelText[256],
    Text3D:copLabel,
    copObje,
    copModel
};
new CopKutusuInfo[MAX_COPKUTUSU][E_COPKUTUSU];

enum E_REKLAM {
    reklamExists,
    reklamID,
    reklamYapan[MAX_PLAYER_NAME],
    reklamText[124],
    reklamTelefon
};
new ReklamInfo[MAX_REKLAM][E_REKLAM];

enum E_STAND {
    sExists,
    sID,
    sKuran[MAX_PLAYER_NAME],
    sModel,
    sObje,
    Float:sPosX,
    Float:sPosY,
    Float:sPosZ,
    Float:sRotX,
    Float:sRotY,
    Float:sRotZ,
    sMasaObje,
    sMasaModel,
    Float:sMasaPosX,
    Float:sMasaPosY,
    Float:sMasaPosZ,
    Float:sMasaRotX,
    Float:sMasaRotY,
    Float:sMasaRotZ,
    Text3D:sLabel,
    sLabelText[128],
    sUrunFiyati[3],
    sIcecekFiyati[3],
    sCalisan[3],
    bool:sArabali,
    sKasa,
    sCalisanSayisi,
    saracID,
    sCalisanPay
};
new StandInfo[MAX_STAND][E_STAND];
new StandUrunInfo[MAX_STAND][3][80];
new StandIcecekInfo[MAX_STAND][3][80];

enum E_KAMPATESI {
    kExists,
    kKuran[MAX_PLAYER_NAME],
    kObje,
    Float:kPos[6],
    Text3D:kLabelText[2],
    kBalik[2],
    kBalikPismeTimer[2],
    kBalikPisti[2],
    kBalikYandi[2]
};
new KampInfo[MAX_PLAYERS][E_KAMPATESI];

enum E_COP {
    ycopExists,
    ycopID,
    ycopObje,
    Float:ycopPosX,
    Float:ycopPosY,
    Float:ycopPosZ,
    ycopInterior,
    ycopVW,
    Text3D:ycopLabel
};
new YerdekiCopInfo[MAX_YERDEKICOP][E_COP];

enum E_Ekip
{
    eKullanim,
    eID,
    eMerkez,
    eKisaltma[12],
    eUye[4],
    eNO[12],
    eIhbaraGidiyor,
    eTamNumara[20],
    eCalintiGidiyor,
    eUyeSayisi,
    eUyeIsim1[MAX_PLAYER_NAME],
    eUyeIsim2[MAX_PLAYER_NAME],
    eUyeIsim3[MAX_PLAYER_NAME],
    eUyeIsim4[MAX_PLAYER_NAME]
}

new EkipBilgi[MAX_EKIP][E_Ekip];

enum weaponSettings
{
    Float:Position[6],
    Bone,
    Hidden,
    duzenlendi
}
new WeaponSettings[MAX_PLAYERS][17][weaponSettings], WeaponTick[MAX_PLAYERS], EditingWeapon[MAX_PLAYERS];

enum E_DOLAP {
    doID,
    doFaction,
    Float:doX,
    Float:doY,
    Float:doZ,
    doINT,
    doVW,
    Text3D:doLabel,
    doPickup
};
new DolapInfo[MAX_DOLAP][E_DOLAP];

enum E_ATM {
    atmID,
    atmExists,
    Float:atmX,
    Float:atmY,
    Float:atmZ,
    Float:atmRX,
    Float:atmRY,
    Float:atmRZ,
    atmInterior,
    atmVW,
    Float:atmPickupX,
    Float:atmPickupY,
    Float:atmPickupZ,
    atmObjeli,
    atmObjeID,
    atmPickupID
};
new ATMInfo[MAX_ATM][E_ATM];

enum E_TORBA {
    toID,
    toExists,
    Float:toX,
    Float:toY,
    Float:toZ,
    Float:toA,
    toInterior,
    toVW,
    toYerde,
    toObje,
    toElindeki,
    bool:toCeset
};
new TorbaInfo[MAX_TORBA][E_TORBA];

enum E_DEALERS
{
    dExists,
    dID,
    dName[64],
    Float:dPosX,
    Float:dPosY,
    Float:dPosZ,
    dPickup,
    Text3D:dLabel,
    dModel[MAX_DEALER_VEHICLES],
    dPrice[MAX_DEALER_VEHICLES],
    dVehiclesID[MAX_DEALER_VEHICLES],
    Float:dVehX,
    Float:dVehY,
    Float:dVehZ,
    vCount
}
new DealerInfo[MAX_DEALERS][E_DEALERS];

enum E_VEHICLES
{
    vID,
    vModel,
    vFirstColor,
    vSecondColor,
    Float:vSpawnPosX,
    Float:vSpawnPosY,
    Float:vSpawnPosZ,
    Float:vSpawnPosA,
    vFaction,
    vPlate[13],
    vLocked,
    vEngine,
    vBoot,
    vBonnet,
    vLights,
    vScript,
    vTemporary,
    vOwner,
    Float:vHealth,
    Float:vMaxHealth,
    Float:vEngineHealth,
    Float:vBatteryHealth,
    Float:vDoorHealth,
    vDamages[4],
    vFuel,
    vPrice,
    vSlotObject[MAX_COMMODITIES_SLOT],
    bool:vSirenOn,
    vSirenObject,
    bool:vCallSign,
    vComponents,
    vAutovelox,
    vInvList[MAX_TRUNK_ITEMS],
    vInvAmount[MAX_TRUNK_ITEMS],
    vInvExtra[MAX_TRUNK_ITEMS],
    vSlotUsed[MAX_CAR_WEAPONS],
    vWindows[4],
    vInterior,
    vWorld,
    bool:vStereo,
    vStereoLink[128],
    vImpounded,
    vSpawnExpires,
    vRespraying,
    vJob,
    bool:vShowingCargo,
    bool:vDestroyed,
    vAlarm,
    vDoorLevel,
    vAlarmOn,
    Text3D:vSignText,
    vTuning[MAX_TUNING_COMPONENTS],
    vPaintjob,
    vUnregistered,
    bool:vELM,
    vCeset[3],
    vSkin[3],
    vIsim1[MAX_PLAYER_NAME],
    vIsim2[MAX_PLAYER_NAME],
    vIsim3[MAX_PLAYER_NAME],
    /*vRehine[3],
    vRehineIsim1[MAX_PLAYER_NAME],
    vRehineIsim2[MAX_PLAYER_NAME],
    vRehineIsim3[MAX_PLAYER_NAME],
    */
    Float:vKM,
    vKMGosteren,
    vSpawnEdildi,
    vObje,
    vVergi,
    vHirsizlik,
    vSandik,
    vYakit,
    vKiralayan,
    vKiralik,
    vIAKS, // ikincil sistemsel arac kiralama
    vKoruma,
    vHurda,
    vSigortaSeviyesi
};
new VehicleInfo[MAX_VEHICLES][E_VEHICLES];

enum E_BUILDINGS
{
    bExists,
    bID,
    bOwner,
    bName[32],
    Float:bPosX,
    Float:bPosY,
    Float:bPosZ,
    Float:bPosA,
    Float:bPosIntX,
    Float:bPosIntY,
    Float:bPosIntZ,
    bInterior,
    bPosWorld,
    bPosInterior,
    bLocked,
    Text3D:bLabel,
    bPickup,
    bPrice,
    bCash,
    bType,
    bWorld,
    bEntrance,
    bPrices[MAX_BIZ_ITEMS],
    bProducts,
    bRequestTruck,
    bFaction,
    bool:bStereo,
    bStereoLink[128],
    bCalisanSayisi,
    Calisanlar[256],
    Calisan[20],
    bVergi,
    bCeza,
    bMuhurlu,
    bDekorKilit,
    bUrunFiyat[5],
    bUrunTip[5],
    bUrunObje[5],
    bDekor,
    bGPS
};
new BuildingInfo[MAX_BUILDINGS][E_BUILDINGS];
new BuildingUrunInfo[MAX_BUILDINGS][5][80];

enum E_PRODUCTS
{
    productName[32],
    productPrice,
    productBiz
};
new ProductInfo[MAX_PRODUCTS][E_PRODUCTS];

enum E_LAB
{
    lID,
    lExists,
    lOwner,
    lLevel,
    Float:lPosX,
    Float:lPosY,
    Float:lPosZ,
    lInterior,
    lWorld,
    lFaction,
    lPickup,
    lDrugs[12],
    lProducing[12],
    lProducingQuantity[12],
    lProducingQuality[12],
    lProducingExpires[12],
    lUretimSayisi
};
new LabInfo[MAX_LABORATORIES][E_LAB];

enum E_ILLEGALINDUSTRIES
{
    iID,
    iExists,
    Float:iPosX,
    Float:iPosY,
    Float:iPosZ,
    iIngredients[29],
    iPrices[29],
    iAmounts[29],
    iRefreshTime,
    iRefreshAmount,
    Text3D:iLabel,
    iPickup
};
new IllegalIndustryInfo[MAX_ILLEGAL_INDUSTRIES][E_ILLEGALINDUSTRIES];

enum E_FACTIONS
{
    fExists,
    fID,
    fType,
    fName[32],
    fShortName[17],
    fSkins[MAX_FACTION_RANKS],
    fSalary[MAX_FACTION_RANKS],
    fCash,
    fOOC,
    fMembersCount,
    fSkinsCount,
    fMaleSkin,
    fFemaleSkin,
    fGraffiti,
    fOlusumPuani,
    fNitroVerebilir
};
new FactionInfo[MAX_FACTIONS][E_FACTIONS];
new fRanks[MAX_FACTIONS][MAX_FACTION_RANKS][80];

//new iRanks[MAX_BUILDINGS][MAX_ISYERI_RUTBE][24];

enum E_HOUSES
{
    hExists,
    hID,
    hOwner,
    Float:hPosX,
    Float:hPosY,
    Float:hPosZ,
    Float:hPosIntX,
    Float:hPosIntY,
    Float:hPosIntZ,
    hInterior,
    hPosWorld,
    hPosInterior,
    hLocked,
    hCash,
    hPrice,
    hWorld,
    hComplex,
    hCheckpoint,
    hInvList[MAX_STORAGE_ITEMS],
    hInvAmount[MAX_STORAGE_ITEMS],
    hInvExtra[MAX_STORAGE_ITEMS],
    hIGInterior,
    Float:hInvPosX,
    Float:hInvPosY,
    Float:hInvPosZ,
    hVergi,
    hKiyafet[3],
    hDekorKilit,
    hEnvanterKilit,
    Kira,
    Kiraci,
    Satis
};
new HouseInfo[MAX_HOUSES][E_HOUSES];


enum E_OTEL {
    otelExists,
    otelID,
    otelSahibi,
    Float:otelDisX,
    Float:otelDisY,
    Float:otelDisZ,
    otelDisInterior,
    otelDisWorld,
    Float:otelIntX,
    Float:otelIntY,
    Float:otelIntZ,
    otelIntInterior,
    otelIntWorld,
    otelKilitli,
    otelKalanSure,
    otelCheckpoint,
    otelUcret,
    otelKiralik
};
new OtelInfo[MAX_OTEL][E_OTEL];

#define BALIKSAYISI     (22)
#define COPESYASAYISI   (16)

enum CopEsyaEnum {
    esyaID,
    esyaIsim[30],
    esyaPara
};

new CopEsya[][CopEsyaEnum] = {
    // {id, isim, vereceði para},
    {0, "Kýrýk Telefon", 14},
    {1, "Teneke Kutu", 3},
    {2, "Boþ Kutu", 4},
    {3, "Bozulmuþ Yemek", 3},
    {4, "Anlamsýz Kaðýt", 2},
    {5, "Kýrýk Kart", 6},
    {6, "Kullanýlmýþ Kýyafet", 7},
    {7, "Kullanýlmýþ Ýç Çamaþýr", 6},
    {8, "Ambalaj", 3},
    {9, "Alüminyum Folyo", 2},
    {10, "Boþ Süt Kutusu", 2},
    {11, "Kýrýk Oyuncak", 4},
    {12, "Kullanýlmýþ Makyaj Malzemesi", 3},
    {13, "Metal Parçasý", 3},
    {14, "Kýrýk Koltuk", 12},
    {15, "Yýrtýk Kitap", 7}
};


enum BalikEnum {
    balikID,
    bIsim[25],
    bMinAgirlik,
    bMaxAgirlik,
    bAgirlikPara,
    bool:bAcikDeniz
};

new BalikIsimleri[][BalikEnum] = {
    // {id, isim, min aðýrlýk, max aðýrlýk, aðýrlýk baþýna para, açýk deniz boolean}
    {0, "Somon", 2, 5, 15, false},
    {1, "Ton Balýðý", 4, 12, 6, false},
    {2, "Gökkuþaðý Alabalýðý", 3, 6, 12, false},
    {3, "Pasifik Tütün Balýðý", 2, 5, 15, false},
    {4, "Uskumru", 1, 4, 15, false},
    {5, "Sazan Balýðý", 3, 7, 9, false},
    {6, "Yýlan Balýðý", 1, 3, 21, false},
    {7, "Sardalya", 1, 4, 15, false},
    {8, "Ringa Balýðý", 2, 8, 9, false},
    {9, "Levrek", 3, 6, 12, false},
    {10, "Çipura", 1, 8, 9, false},
    {11, "Pisi Balýðý", 2, 6, 12, false},
    {12, "Dil Balýðý", 1, 3, 24, false},
    {13, "Perca", 2, 6, 9, false},
    {14, "Turna Balýðý", 1, 3, 21, false},
    {15, "Sarý Kuyruk Akya", 2, 6, 12, false},
    {16, "Snapper", 3, 6, 12, false},
    {17, "Alabalýk", 4, 8, 9, false},
    {18, "Lüfer", 2, 6, 9, false},
    {19, "Ançüez", 3, 6, 12, false},
    {20, "Kedi Balýðý", 2, 6, 21, true},
    {21, "Kýlýç Balýðý", 2, 5, 21, true}
};

enum E_SANDIK {
    sandikID,
    sandikExists,
    sandikAracID,
    sandikAgirlik,
    sandikFiyat,
    sandikKapasite,
    bool:sandikAracaBagli,
    Text3D:sandikLabel,
    sandikLabelText[128]
};
new SandikInfo[MAX_VEHICLES][E_SANDIK];

enum eIsletmeInt
{
    intid,
    intname[32],
    isyeritip,
    isletmeintno,
    Float:intx,
    Float:inty,
    Float:intz
};

new IsletmeInt[][eIsletmeInt] =
{
    {1, "Boþ Depo", -1, 1, 1412.0, -1.0, 1001.0},
    {2, "24/7 1", 1, 17, -25.884498, -185.868988, 1003.546875},
    {3, "24/7 2", 1, 10, 6.091179, -29.271898, 1003.549438},
    {4, "24/7 3", 1, 18, -30.946699, -89.609596, 1003.546875},
    {5, "24/7 4", 1, 16, -25.132598, -139.066986, 1003.546875},
    {6, "24/7 5", 1, 4, -27.312299, -29.277599, 1003.557250},
    {7, "24/7 6", 1, 6, -26.691598, -55.714897, 1003.546875},
    {8, "Binco", 5, 15, 207.737991, -109.019996, 1005.132812},
    {9, "Didier Sachs", 5, 14, 204.332992, -166.694992, 1000.523437},
    {10, "Prolaps", 5, 3, 207.054992, -138.804992, 1003.507812},
    {11, "Suburban", 5, 1, 203.777999, -48.492397, 1001.804687},
    {12, "Victim", 5, 5, 226.293991, -7.431529, 1002.210937},
    {13, "Zip", 5, 18, 161.391006, -93.159156, 1001.804687},
    {14, "Lil' probe inn", 6, 18, -227.027999,1401.229980,27.765625},
    {15, "Lil' probe inn", 2, 18, -227.027999,1401.229980,27.765625},
    {16, "Lil' probe inn", 3, 18, -227.027999,1401.229980,27.765625},
    {17, "Lil' probe inn", 4, 18, -227.027999,1401.229980,27.765625},
    {18, "Jay's dinner", 2, 4, 457.304748,-88.428497,999.554687},
    {19, "Jay's dinner", 3, 4, 457.304748,-88.428497,999.554687},
    {20, "Jay's dinner", 4, 4, 457.304748,-88.428497,999.554687},
    {21, "Gant bridge diner", 2, 1, 459.0011, -111.0997, 2999.5459},
    {22, "Gant bridge diner", 3, 1, 459.0011, -111.0997, 2999.5459},
    {23, "Gant bridge diner", 4, 1, 459.0011, -111.0997, 2999.5459},
    {24, "Burger shot", 4, 10, 375.962463,-65.816848,1001.507812},
    {25, "Cluckin' Bell", 2, 9, 369.579528,-4.487294,1001.858886},
    {26, "Well stacked pizza", 3, 5, 373.825653,-117.270904,1001.499511},
    {27, "Garaj", 15, 1, 612.068847, -125.904228, 1022.999694}
};

enum enum_IsyeriInterior
{
    interior_id,
    interior_isim[32],
    interiorno,
    Float:interior_x,
    Float:interior_y,
    Float:interior_z
};

new IsyeriInterior[][enum_IsyeriInterior] =
{
//  {id, isim, interior, x, y, z}
    {1, "24/7 1", 17, -25.884498,-185.868988,1003.546875},
    {2, "24/7 2", 10, 6.091179,-29.271898,1003.549438},
    {3, "24/7 3", 18, -30.946699,-89.609596,1003.546875},
    {4, "24/7 4", 16, -25.132598,-139.066986,1003.546875},
    {5, "24/7 5", 4, -27.312299,-29.277599,1003.557250},
    {6, "24/7 6", 6, -26.691598,-55.714897,1003.546875},
    {7, "Ammunation 1", 1, 286.148986,-40.644397,1001.515625},
    {8, "Ammunation 2", 4, 286.800994,-82.547599,1001.515625},
    {9, "Ammunation 3", 6, 296.919982,-108.071998,1001.515625},
    {10, "Ammunation 4", 7, 314.820983,-141.431991,999.601562},
    {11, "Ammunation 5", 6, 316.524993,-167.706985,999.593750},
    {12, "Ammunation Atýþ Poligonu", 7, 302.292877,-143.139099,1004.062500},
    {13, "Budget inn otel odasý", 12, 444.646911,508.239044,1001.419494},
    {14, "Jefferson Motel", 15, 2215.454833,-1147.475585,1025.796875},
    {15, "Off track betting shop", 3, 833.269775,10.588416,1004.179687},
    {16, "Sex Shop", 3, -103.559165,-24.225606,1000.718750},
    {17, "Meat factory", 1, 963.418762,2108.292480,1011.030273},
    {18, "Zero's RC Shop", 6, -2240.468505,137.060440,1035.414062},
    {19, "Dillimore gas station", 0, 663.836242,-575.605407,16.343263},
    {20, "Catigula's basement", 1, 2169.461181,1618.798339,999.976562},
    {21, "Woozie's Office", 1, -2159.122802,641.517517,1052.381713},
    {22, "Binco", 15, 207.737991,-109.019996,1005.132812},
    {23, "Didier Sachs", 14, 204.332992,-166.694992,1000.523437},
    {24, "Prolaps", 3, 207.054992,-138.804992,1003.507812},
    {25, "Suburban", 1, 203.777999,-48.492397,1001.804687},
    {26, "Victim", 5, 226.293991,-7.431529,1002.210937},
    {27, "Zip", 18, 161.391006,-93.159156,1001.804687},
    {28, "Club", 17, 493.390991,-22.722799,1000.679687},
    {29, "Bar", 11, 501.980987,-69.150199,998.757812},
    {30, "Lil' probe inn", 18, -227.027999,1401.229980,27.765625},
    {31, "Jay's dinner", 4, 457.304748,-88.428497,999.554687},
    {32, "Gant bridge diner", 1, 459.0011, -111.0997, 2999.5459},
    {33, "Burger shot", 10, 375.962463,-65.816848,1001.507812},
    {34, "Cluckin' Bell", 9, 369.579528,-4.487294,1001.858886},
    {35, "Well stacked pizza", 5, 373.825653,-117.270904,1001.499511},
    {36, "Rusty browns donuts", 17, 381.169189,-188.803024,1000.632812},
    {37, "Planning dept.", 3, 384.808624,173.804992,1008.382812},
    {38, "LS gym", 5, 772.111999,-3.898649,1000.728820},
    {39, "SF gym", 6, 774.213989,-48.924297,1000.585937},
    {40, "LV gym", 7, 773.579956,-77.096694,1000.655029},
    {41, "Uyuþturucu labý", 2, 2543.462646,-1308.379882,1026.728393},
    {42, "Big spread ranch", 3, 1212.019897,-28.663099,1000.953125},
    {43, "Strip club", 2, 1204.809936,-11.586799,1000.921875},
    {44, "Strip club private room", 2, 1204.809936,13.897239,1000.921875},
    {45, "Pleasure domes", 3, -2640.762939,1406.682006,906.460937},
    {46, "Depo 1", 1, 1412.639892,-1.787510,1000.924377},
    {47, "Depo 2", 18, 1302.519897,-1.787510,1001.028259},
    {48, "Berber 1", 2, 411.625976,-21.433298,1001.804687},
    {49, "Berber 2", 3, 418.652984,-82.639793,1001.804687},
    {50, "Berber 3", 12, 412.021972,-52.649898,1001.898437},
    {51, "Dövmeci 1", 16, -204.439987,-26.453998,1002.273437},
    {52, "Dövmeci 2", 17, -204.439987,-8.469599,1002.273437},
    {53, "Dövmeci 3", 3, -204.439987,-43.652496,1002.273437},
    {54, "LSPD", 6, 246.783996,63.900199,1003.640625},
    {55, "SFPD", 10, 246.375991,109.245994,1003.218750},
    {56, "LVPD", 3, 288.745971,169.350997,1007.171875},
    {57, "Ehliyet kursu", 3, -2029.798339,-106.675910,1035.171875},
    {58, "Blueberry Depo", 0, 76.632553,-301.156829,1.578125},
    {59, "LV Depo 1", 0, 1059.895996,2081.685791,10.820312},
    {60, "Banka", 0, 2315.952880,-1.618174,26.742187},
    {61, "Bisiklet okulu", 3, 1494.325195,1304.942871,1093.289062},
    {62, "Caligulas Casino", 1, 2233.8032,1712.2303,1011.7632},
    {63, "Casino", 12, 1133.35,-7.8462,1000.6797},
    {64, "4 Dragons Casino", 10, 2016.2699,1017.7790,996.8750},
    {65, "Striptiz Kulübü[B]", 1, 1136.1995,-690.9539,1201.9359},
    {66, "LSFD(Ana Bina)", 1, 1380.2269,-795.7247,1085.8781},
    {67, "Donelly Restoran [1]", 1, 441.8564,-50.0273,1999.6869},
    {68, "Maltese Falcon [1]", 1, 316.7911,298.9156,3003.9460},
    {69, "Donelly Bar [1]", 1, 1000.0542,1575.6357,2010.6327},
    {70, "Donelly House [1]", 1, 889.9613,-1515.0826,1121.1219},
    {71, "Apartman [1]", 1, -701.4276,1848.8379,9942.5098},
    {72, "Apartman [2]", 1, 304.5591,1739.9458,935.3225},
    {73, "Apartman [3]", 1, 2325.1533,-1168.5850,3030.9443},
    {74, "Apartman [4]", 1, 913.3597,-1012.0836,8106.3916},
    {75, "Apartman [5]", 1, -2122.6919,-332.6762,1233.7660},
    {76, "Apartman [6]", 1, 601.2818,219.3194,1006.2641},
    {77, "Apartman [7]", 1, 1562.3523,-1370.0867,1466.0959},
    {78, "Highschool [1]", 1, 1819.4824, -1302.2253, 1066.0349},
    {79, "Apartman [8]", 1, 1119.7676, -39.3219, 998.8978},
    {81, "Motel(ghetto)", 1, 2369.3008, -1159.7390, 1029.9359},
    {82, "Jefferson (PD)", 1, 1342.7065, -874.3007, 842.9869},
    {83, "Kapalý Spor Salonu", 1, -3174.7456,-33.1014,239.1547},
    {84, "Ofis", 1, 1474.5487,-1229.9540,1384.8389},
    {85, "Ofis 2", 1, 1561.3783,-1666.1763,1334.0859},
    {86, "Arþiv", 1, 1546.0044,-1659.3263,1334.0859},
    {87, "Ofis 3", 1, 1548.7538,-1666.4612,1334.0859},
    {88, "Vice City", 1, 1170.7832,1423.3610,903.9578},
    {89, "Mona Sax for rascalov", 1, 2243.8508,3266.2034,492.8474},
    {90, "Boþ Depo", 1, 1388.3406, -20.0140, 1000.9871},
    {91, "Alper Ofis", 1, -2035.6362, -116.6769, 1035.2360},
    {92, "Welcome Pump", 1, 681.3900, -447.8581, -13.1187},
    {93, "Tamirhane", 1, -1290.593139, 2414.860351, 3503.686035}
};

enum E_PLAYERS
{
    pAccountID,
    pCharacterName[MAX_PLAYER_NAME],
    pMaxSlot,
    pID,
    pHouse,
    pSex,
    pLoginDate[36],
    pAdmin,
    pFaction,
    pRank,
    pLevel,
    pCash,
    pCashBank,
    pExperience,
    Float:pSpawnHealth,
    pBanned,
    pIP[16],
    pSkin,
    Float:pHealth,
    Float:pArmour,
    pSpawnPoint,
    pJailTime,
    pCrashed,
    Float:pPosX,
    Float:pPosY,
    Float:pPosZ,
    Float:pPosA,
    pCrashInt,
    pCrashWorld,
    pHousePrice,
    pOriginalSkin,
    pMinutes,
    pPlayingHours,
    pLicenses[3],
    pLicenseWarn,
    pJob,
    pShortcut,
    pDivision[5],
    pInvList[MAX_INVENTORY_ITEMS],
    pInvAmount[MAX_INVENTORY_ITEMS],
    pInvExtra[MAX_INVENTORY_ITEMS],
    pInvZilSesi[MAX_INVENTORY_ITEMS],
    pSelectUniform,
    pLoginAttempts,
    pUsername[30],
    pLogged,
    pDeath,
    pInterior,
    pWorld,
    pAdminDuty,
    pSupporterDuty,
    pAdminAlert,
    pSupporterAlert,
    pInvCredit[MAX_INVENTORY_ITEMS],
    PlayerText:pTextdraws[4],
    pFreezed,
    pFreezeTimer,
    pGiveItem,
    pAmount,
    pWeapons[12],
    pAmmo[12],
    pRequestHPrice,
    pRequesterHouse,
    pRequestSHPrice,
    pRequesterHSell,
    Text3D:pNameTag,
    pFactionMOD,
    pLabMOD,
    pIndustryMOD,
    pSelectedSlot,
    pFactionOOC,
    pRequesterFaction,
    pFactionDuty,
    pFactionSkin,
    pRequestSBPrice,
    pRequesterBSell,
    pEditingMode,
    pFurnituresID[sizeof(BuyableFurnitures)],
    pObjectsID[sizeof(PlayerObjectsList)],
    pIngredientsID[41],
    pCimicesID[MAX_CIMICI],
    pPhonesID[MAX_PAGE_PHONE],
    pDealerMOD,
    pDealerVehicle,
    pFurnitureObject,
    pDealerListitem,
    pVehiclePrice,
    pIndex,
    pModelID,
    pTxdName[64],
    pTextName[64],
    pMobile,
    pRequestSVPrice,
    pRequesterVSell,
    pTaser,
    pBeanBag,
    pStunned,
    pVehiclesID[MAX_OWNED_VEHICLES_DIAMOND],
    pVehicleHud,
    pPage,
    pFuelTimer,
    pNumber,
    pOldFuel,
    pCallTime,
    pCallTimer,
    pListType,
    pCuffed,
    pFrisk,
    pCare,
    pNews,
    pReklam,
    pTalkingLive,
    pRequestLive,
    pGangZone,
    pBuyID[MAX_BIZ_ITEMS],
    bool:pLoopAnim,
    bool:EtkisizEleman,
    bool:pAuthorized[MAX_FREQUENCES],
    pAFKTime,
    bool:pAFKMode,
    pInRecon,
    bool:Started,
    Vehicle,
    Checkpoint,
    Type,
    pMasked,
    pMaskName[24],
    bool:pBoxShowed,
    bool:pNotifications[2],
    pNotificationsTimer[2],
    pDealersID[MAX_DEALERS],
    pFactionsID[MAX_FACTIONS],
    pLabsID[MAX_LABORATORIES],
    pIndustriesID[MAX_ILLEGAL_INDUSTRIES],
    pSpeakerPhone,
    pCrates[36],
    pTPDA[50],
    pCarryCrate,
    pFrequence,
    pSelectedRequest,
    pRequestRepair,
    pRepairType,
    pRepairPrice,
    pRequestSpray,
    pSprayPrice,
    pFirstColor,
    pSecondColor,
    bool:pStartFarmer,
    pRevokeItem,
    bool:pDragged,
    pDraggedBy,
    pDragTimer,
    pEmergency,
    pRequiredService,
    pBalik[50],
    pBalikAgirlik[50],
    pBalikUcret,
    pBalikCount,
    pBalikListe,
    pZone[2],
    pFishTime,
    pFines[MAX_FINES],
    pMeal,
    pSips,
    pPhoneID,
    pTaxPrice,
    pTaxRequest,
    pTaxi,
    tPassenger,
    tCash,
    Float:tStartPos[3],
    pFarmerCash,
    bool:pTracing,
    bool:pLocalize,
    pBuyingVehicle,
    pUsingPP,
    pReportTime,
    bool:pImporting,
    pScriptedGun[12],
    pScriptedAmmo[12],
    Float:CheckpointX,
    Float:CheckpointY,
    Float:CheckpointZ,
    pPremium,
    pTogOOCPremium,
    pTogOOC,
    pTogOOCPlayer[MAX_PLAYERS],
    pTogPMPremium,
    pTogPM,
    pTogPMPlayer[MAX_PLAYERS],
    pConvOOC,
    pRadiosID[MAX_RADIO_LINKS],
    pRadioOptions,
    pRadioSlot[8],
    pRadioDefault,
    pTargetName[50],
    pListsID[100],
    pRecordID,
    pCimiceRequest,
    pCimiceSelected,
    pJailC,
    pOldGun,
    pCimiceTime,
    pCoyn,
    pNickChange,
    pPlateChange,
    pNumberChange,
    pBMXPermission,
    pTempName[MAX_PLAYER_NAME],
    pRequestCount,
    pWeaponsLicense[2],
    pWeaponsLicenseGuns[4],
    pWeaponsLicenseRequest,
    pWeaponsLicenseRequestInfo[3],
    pUsingMDC,
    pHud,
    pRequestsID[MAX_REQUESTS],
    pText[256],
    bool:pContinueTrucking,
    pCheatTimer,
    bool:pJustSpawned,
    pPickupID,
    pCheckpointID,
    pIncomingCall,
    pDeathTime,
    pShakeOffer,
    pShakeType,
    pSendedCare,
    pParkingRequest,
    pTeleportLastTick,
    pVehicleTime,
    pGiveTime,
    pKeyTick,
    pPoliceTick,
    pClickedTick,
    pTelefonTick,
    bool:AramaYanitlandi,
    pCargoTime[2],
    Float:pClickedX,
    Float:pClickedY,
    Float:pClickedZ,
    pSelectedColors[2],
    bool:pForceSpawn,
    bool:CheckpointEnabled,
    pChatStyle,
    pSellFish,
    pTmpText[256],
    pCheatNotified,
    pViewingCargo,
    pAdminLog,
    pObjectSelected,
    pObjectSlotOccupied[10],
    pObjectEditingSlot,
    pObjectWearing[MAX_PLAYER_OBJECTS],
    pObjectWearingVar[MAX_PLAYER_OBJECTS],
    pFightStyle,
    pBlindFold,
    pSelectedVehicle,
    bool:pShowingID,
    Text3D:pLabelsID[MAX_FURNITURES_DIAMOND],
    pLegHit,
    pInCare,
    pStealTime,
    pStealLevel,
    pStealWord[64],
    pStealScrambleWord[64],
    pStealWrong,
    pStealCorrect,
    Float:pStealHit,
    pStealHitTimeout,
    pHouseSpawn,
    bool:pBreakOpen,
    pSavings,
    pPaycheck,
    pJobDuty,
    pToggleArmour,
    pSnakeCamActor,
    pSnakeCamActorSkin,
    pSnakeCamObject,
    pCasinoWheelBet,
    pInCasinoWheel,
    pCurrentGameID,
    Float:pOldX,
    Float:pOldY,
    Float:pOldZ,
    Float:pOldAngle,
    pOldSkin,
    pOldWorld,
    pOldInterior,
    pOldVehicleID,
    pOldVehicleSeat,
    pCimice,
    pCheatWarnings[MAX_CHEAT_CODES],
    pCarTick,
    pInTuning,
    pTamirciyim,
    pTuningCategoryID,
    pTuningCount,
    pTuningComponent,
    pTuningComponentAldi,
    pSmoking,
    pSmokingType,
    pSmokingThrows,
    pSmokingQuality,
    pSelectedItem,
    pMyBoombox,
    pIngredientID,
    pContactID,
    pRequestID,
    pProductID,
    pPhoneLogID,
    pMdcID,
    pFineID,
    pItemID,
    pAmmoID,
    pLogsID[MAX_PAGE_LOG],
    pLogID,
    pLogTarget[MAX_PLAYER_NAME],
    pLogCommand[64],
    pAPBP[MAX_PAGE_APB],
    pAirPassenger,
    pPlateVeh,
    pPlateOption,
    pPlateTime,
    pTorba,
    pTorbaIndex,
    pCalistigiIsyeri[2],
    pIsyeriRutbe,
    pTenRengi,
    pKarakterYapti,
    pAge,
    pGizliAdmin,
    pParcalaTimer,
    pKamyoncuTimer,
    pYakitTimer,
    pSetStatID,
    pPM,
    pBalikYemi,
    pBalikAgi,
    oKampAtesi,
    KamyoncuGeliri,
    //pGuvenlik,
    pGuvenlikLisansi,
    bool:pTelDinle,
    pDinlenenTelNo,
    pDrugAddiction[12],
    pDrugAddictionQuality[12],
    pDrugEffects[12],
    pDrugAbstinence[12],
    pDrugster,
    pDrugCrisis,
    pDrugRemainingTime,
    bool:pDrugRunJumpBlock,
    bool:pDrugUnconscious,
    bool:pDrugVar,
    BagimlilikTedavi,
    pCoynPayday,
    pKelepceSayisi,
    pPolisDutySaniye,
    pPolisDutyDakika,
    pPolisDutySaat,
    pAracCekmeIstegi,
    pSnakeCamMode,
    pSpecMode,
    pSilahTick,
    pAtesTick,
    pUzerindekiSilah,
    pOzellik[256],
    bool:pOzellikGosteriyor,
    Text3D:pOzellikLabel,
    pTarget,
    CCWGunID,
    CCWGunDate,
    pDonateSkin[5],
    bool:TepsiEdit,
    bool:UyusturucuEfektleri,
    //bool:Rehineyim,
    //bool:Rehineyimm,
    //bool:pTVMode,
    //pTVActor,
    //Text3D:TVLabel,
    bool:TepsiBiraktim,
    pTedaviSure,
    pKonserIzin,
    bool:IsletmeSatiyorum,
    pTamirKiti,
    pAletCantasi,
    AradigimKisi,
    OyVerdim,
    pAntiSpamer,
    pAntiSpam,
    pStrength,
    pUpgradePoints,
    bool:pTackleMode,
    Float:pSirenCustom[6],
    bool:pSirenCustomYapti,
    bool:pEvdeKiyafet,
    pGelisimListItem,
    pToplamCeza,
    pIhbarSecenek,
    pIhbarKod,
    pSoruPuani,
    pAlincakBenzin,
    pBalikCheckpoint,
    pOBanKullanici[32],
    pOBanSebep[80],
    pBarikatObje,
    pIhbarUyariAldi,
    pDestekIstedi[2],
    pUyariSayisi,
    bool:pKaravanda,
    bool:pGemide,
    bool:pPlastikMermi,
    bool:pPlastikMermiDustu,
    pRadyo,
    pSWATSkin,
    pSWAT,
    pSWATOncesi,
    pReklamID[50],
    pVerdigiReklam,
    pIlgilendigiReklam,
    pAgirYarali,
    pTezgah,
    pTezgahMasa,
    pActigiTezgah,
    pCalistigiTezgah,
    pCalinanArac,
    pTeleportNoktasi,
    pKampEkipmani,
    pKurduguKamp,
    bool:pBalikTutuyor,
    pAracMotorTimer,
    pAldigiBilet,
    pBiletMiktar,
    pTasidigiSandik,
    DoublePayday,
    pJobTime,
    bool:pLACH,
    bool:pACH,
    bool:AracSpawn,
    pIzleniyor,
    pYakitGelir,
    pSkinWorld,
    pLisansCeza,
    pHata,
    pHirsizlik,
    pHirsizlikGelir,
    pEmniyetKemeri,
    pListen,
    pBugKurtar,
    bool:pCopTasiyor,
    pCopObjeSlot,
    pCopTopla,
    pCopEsyaEnvanter[5],
    pCopEsyaAldi,
    pTelefonKilifi,
    pGovernment,
    pYarisSahibi,
    pKatildigiYaris,
    pYarisCP,
    pGidilecekCP,
    pYatirdigiBahis,
    pYatirdigiAt,
    pBahisKazandi,
    bool:pPizzaAldi,
    pPizzaObje,
    pPizzaPara,
    pPizzaTamamlanan,
    pPizzaSonEv,
    pKamyoncuYetenegi,
    pHirsizlikYetenegi,
    pBalikYetenegi,
    GYMPuani,
    KasSeviyesi,
    GYMYonTusu,
    GYMLoop,
    GYMPuaniVar,
    GYMPuaniX,
    GYMTimer,
    KullandigimAlet,
    pKiraladigiOtel
};
new PlayerInfo[MAX_PLAYERS][E_PLAYERS];

new lsbarbell, sfbarbell, lvbarbell, lvbarbell2, KullanilanAletler[11];

enum E_YARIS {
    yarisBaslatildi, // yarýþýn hazýr olup oyuncularýn davet edilebilceðini kontrol ediyor
    yarisAktif, // yarýþýn baþladýðý ve artýk oyuncularýn davet edilemeyeceðini kontrol ediyor
    yarisSahibi, // yarýþa oyuncu davet edebilecek kiþinin oyun içi ID'si, default -1
    yarisIsmi[32], // yarýþýn ismi, maksimum 32 bit
    Float:yarisCheckpointX[MAX_YARIS_CHECKPOINT], // 20 checkpointin hepsinin X deðeri
    Float:yarisCheckpointY[MAX_YARIS_CHECKPOINT], // 20 checkpointin hepsinin Y deðeri
    Float:yarisCheckpointZ[MAX_YARIS_CHECKPOINT], // 20 checkpointin hepsinin Z deðeri
    yarisCheckpointInterior[MAX_YARIS_CHECKPOINT], // 20 checkpointin hepsinin Interior deðeri
    yarisCheckpointVirtualWorld[MAX_YARIS_CHECKPOINT], // 20 checkpointin hepsinin Virtual World Deðeri
    yarisKatilanSayisi, // Yarýþa katýlan oyuncularýn sayýsý
    yarisKazananlar[3], // Yarýþý kazanan ilk 3 kiþi
    yarisAktifCheckpoint // yarýþta toplam kaç checkpoint olduðu
};
new YarisInfo[MAX_YARIS][E_YARIS];

/*
enum E_YANGIN
{
    yID,
    Float:yPosX,
    Float:yPosY,
    Float:yPosZ,
    Float:yHP,
    Float:yMaxHP,
    yPosInterior,
    yPosVW,
    yObj,
    Text3D:yNameTag
}
new YanginInfo[MAX_YANGIN][E_YANGIN];
*/
enum E_INVENTORY_OBJECTS
{
    invObject,
    invName[64],
    invType
};
new InventoryObjects[MAX_INVENTORY_OBJECTS][E_INVENTORY_OBJECTS];

enum E_DAMAGES
{
    eOccupied,
    eWeapon,
    eIssuer[MAX_PLAYER_NAME],
    eAmount,
    eBodypart[32]
};
new PlayerDamages[MAX_PLAYERS][MAX_DAMAGES_FOR_PLAYER][E_DAMAGES];

//Textdraws
//new Text:SunucuLogo;
new PlayerText:TDTuning_Component[MAX_PLAYERS],
    PlayerText:TDTuning_Dots[MAX_PLAYERS],
    PlayerText:TDTuning_Price[MAX_PLAYERS],
    PlayerText:TDTuning_ComponentName[MAX_PLAYERS],
    PlayerText:TDTuning_YN[MAX_PLAYERS];
new PlayerText:TDDealer_Select[MAX_PLAYERS][10];
new PlayerText:VehicleSpeed[MAX_PLAYERS],
    PlayerText:VehicleFuel[MAX_PLAYERS],
    Text:KMH;
new Text:BlindFold;
new Text:BlindFold2;
new Text:BrAdminEkran;

new PlayerText:YonTusu[MAX_PLAYERS];

new Text:SunucuHud[3];
//new PlayerText:YeniSunucuHud[3][MAX_PLAYERS];
new PlayerText:ParaBilgilendirme[2][MAX_PLAYERS];


//Useful
new FarmerAreas[sizeof(FarmerZones)];
new FishingAreas[sizeof(FishingZones)];
new MySQL: ourConnection;
new queryx[4096];
new stringx[2048];

//Foreach Iterators
new Iterator:Buildings<MAX_BUILDINGS>;
new Iterator:Lab<MAX_LABORATORIES>;
new Iterator:Vehicles<MAX_VEHICLES>;
new Iterator:Houses<MAX_HOUSES>;
new Iterator:Factions<MAX_FACTIONS>;
new Iterator:Graffitis<MAX_GRAFFITIS>;
new Iterator:DroppedItems<MAX_DROPPED_ITEMS>;
new Iterator:RoadBlocks<MAX_ROADBLOCKS>;
new Iterator:PayPhones<MAX_PAYPHONES>;
new Iterator:Dealers<MAX_DEALERS>;
new Iterator:Crates<MAX_CRATES>;
new Iterator:Meals<MAX_MEALS>;
new Iterator:Cimici<MAX_CIMICI>;
new Iterator:IllegalIndustry<MAX_ILLEGAL_INDUSTRIES>;
new Iterator:Requests<MAX_REQUESTS>;
new Iterator:Teleports<MAX_TELEPORTS>;
new Iterator:Companies<MAX_COMPANIES>;
new Iterator:Games<MAX_GAMES>;
new Iterator:Gates<MAX_GATES>;
new Iterator:InventoryObjects<MAX_INVENTORY_OBJECTS>;
new Iterator:Products<MAX_PRODUCTS>;
//new Iterator:Yanginlar<MAX_YANGIN>;
new Iterator:Dolaplar<MAX_DOLAP>;
new Iterator:Sirketler<MAX_TSIRKET>;
new Iterator:ATMler<MAX_ATM>;
new Iterator:EkilenUyusturucular<MAX_EKILEN_UYUSTURUCU>;
new Iterator:Aktorler<MAX_DYNAMIC_ACTORS>;
new Iterator:Ihbarlar<MAX_IHBAR>;
new Iterator:Ekipler<MAX_EKIP>;
new Iterator:Calintilar<MAX_CALINTI>;
new Iterator:CopKutulari<MAX_COPKUTUSU>;
new Iterator:YerdekiCopler<MAX_YERDEKICOP>;
new Iterator:Reklamlar<MAX_REKLAM>;
new Iterator:Tezgahlar<MAX_STAND>;
new Iterator:Kamp<MAX_PLAYERS>;
new Iterator:Sandik<MAX_VEHICLES>;
new Iterator:KiralikAraclar<MAX_KIRALIK_ARAC>;
new Iterator:Oteller<MAX_OTEL>;

new ArayanNumara[MAX_PAYPHONES];
new ELMTimer[MAX_VEHICLES];
new Flash[MAX_VEHICLES];
new ELMOncesiIsik[MAX_VEHICLES];
new ELMOncesiIsikHasar[MAX_VEHICLES];
new RehberIsim[MAX_PLAYERS][32];
new ExecuteShots[MAX_PLAYERS];
new CesetList[MAX_PLAYERS][3];
//new RehineList[MAX_PLAYERS][3];
//new RehinTimer[MAX_PLAYERS];
//new YanginTimer[MAX_PLAYERS];
new AracKMTimer[MAX_PLAYERS];
new CesetBodyPart[MAX_CESET][24][32];
new OldCar[MAX_PLAYERS];
new IsTeklifiTimer[MAX_PLAYERS];
new GozunuBaglayan[MAX_PLAYERS];
new GozuBaglandi[MAX_PLAYERS];
new GozBaglaIstegi[MAX_PLAYERS];
new GozBaglaTimer[MAX_PLAYERS];
new BirlikteDinliyor[MAX_PLAYERS];
new BirlikteDinlenen[MAX_PLAYERS];
//new RehineAlan[MAX_PLAYERS];
new AracYolcu[MAX_VEHICLES][4];
new AracKoltuk[MAX_VEHICLES][4];
new ihbarSayisi;
new calintiSayisi;

#define TOTAL_M_WHITE 192
#define TOTAL_M_BLACK 77
#define TOTAL_F_WHITE 91
#define TOTAL_F_BLACK 28

new MaleWhite[TOTAL_M_WHITE] = { // buraya beyaz erkek
    1, 2, 3, 8, 23, 26, 27, 29, 30, 32, 33, 34, 35, 37, 42, 43, 44, 45, 46, 47, 48, 49, 52, 57, 58, 59, 60, 61, 62, 68, 72, 73, 78, 81, 82,
    94, 95, 96, 97, 98, 100, 101, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
    132, 133, 135, 137, 146, 147, 153, 154, 155, 159, 160, 161, 162, 164, 165, 167, 170, 171, 173, 174, 175, 177, 179, 181, 184, 185, 186,
    187, 188, 189, 202, 203, 204, 206, 208, 209, 210, 212, 213, 217, 223, 227, 228, 229, 230, 234, 235, 236, 240, 241, 242, 247, 248, 249, 250,
    254, 255, 258, 259, 261, 264, 268, 272, 273, 289, 290, 291, 292, 294, 295, 299, 303, 304, 305, 24000, 24001, 24002, 24003, 24005,
    24007, 24008, 24009, 24010, 24011, 24012, 24013, 24014, 24015, 24016, 24017, 24018, 24019, 24020, 24021, 24022, 24023, 24024, 24026, 24027,
    24028, 24030, 24031, 24033, 24034, 24035, 24036, 24037, 24038, 24039, 24040, 24041, 22057, 24043, 24044, 24045, 24046, 24047,
    24049, 24050, 24051, 24052, 24053, 24054, 24055, 24059, 24060, 24061, 24062, 24063
};

new MaleBlack[TOTAL_M_BLACK] = { // buraya siyah erkek
    4, 5, 6, 7, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 28, 66, 67, 80, 83, 84, 86, 102, 103, 104, 105, 106, 107, 136, 142, 143, 144,
    149, 156, 163, 166, 168, 180, 182, 183, 185, 220, 221, 222, 253, 262, 269, 270, 271, 293, 296, 297, 25000, 25001, 25002, 25003, 25004,
    25005, 25006, 25007, 25008, 25009, 25010, 25011, 25012, 25014, 25015, 25016, 25017, 25018, 25019, 25020, 25021, 25022, 25023, 25024, 25025
};

new FemaleWhite[TOTAL_F_WHITE] = {
    12, 31, 38, 39, 40, 41, 53, 54, 55, 56, 64, 75, 76, 77, 85, 87, 88, 90, 91, 93, 129, 130, 138, 140, 141, 145, 150, 151, 152, 157,
    169, 172, 178, 191, 192, 193, 194, 196, 197, 198, 191, 201, 205, 207, 211, 214, 216, 218, 219, 224, 225, 226, 231, 232, 233, 237, 243,
    246, 251, 257, 263, 298, 26000, 26001, 26002, 26003, 26004, 26005, 26006, 26007, 26008, 26009, 26010, 26011, 26012, 26013, 26014, 26015,
    26016, 26017, 26018, 26019, 26020, 26021, 26023, 26024, 26025, 26026, 26027, 26028, 26029
};

new FemaleBlack[TOTAL_F_BLACK] = {
    9, 10, 11, 13, 63, 65, 69, 76, 131, 139, 148, 195, 215, 238, 244, 245, 256, 27000, 27001, 27002, 27003, 27004, 27005, 27007, 27008,
    27009, 27010, 27011
};

new PlayerText:Textdraw0[MAX_PLAYERS];
new PlayerText:Textdraw1[MAX_PLAYERS];

//Natives

native MapAndreas_Init(mode, name[] = "", len = sizeof name);
native MapAndreas_FindZ_For2DCoord(Float:X, Float:Y, &Float:Z);
native WP_Hash(buffer[], len, const str[]);

#define function%0(%1) forward %0(%1); public %0(%1) // Trisha

//GameMode

#include "functions/basiccmds.pwn"
#include "functions/admincmdsA.pwn"
#include "functions/factioncmds.pwn"
#include "functions/sabitcmds.pwn"
#include "functions/natives.pwn"
#include "functions/jobs.pwn"
#include "functions/balik.pwn"
#include "functions/obje.pwn"


main()
{
    print("\n\t\t\tSan Andreas Roleplay");
    print("\t\t\tDeveloper: Marvellous, Rufio and jamy\n");
}


public OnGameModeInit()
{
//  sonIsletme = -1;
    YarislariSifirla();
    AtYarisiSifirla();
    SunucuBilgi[HirsizlikNokta] = -1;
    SunucuBilgi[ReklamVerildi] = 0;
    SunucuBilgi[GaleriDurum] = 0;
    SunucuBilgi[SiparisNoktalari] = 0;
    SunucuBilgi[AntiDinamikObje] = 0;
    SunucuBilgi[AntiDekorasyonSilme] = 0;
/*  format(SunucuBilgi[CekilisAdi], 124, "N/A");
    SunucuBilgi[CekilisTuru] = 0;
    SunucuBilgi[CekilisDurum] = 0;
    SunucuBilgi[BiletUcreti] = 0;
    SunucuBilgi[CekilisHavuzu] = 0;*/
    SunucuBilgi[AntiSpam] = 1; // 1 aktif - 0 pasif
    SunucuBilgi[PaydayOrani] = 1; // x1 payday normal
    SunucuBilgi[DekorSecDurum] = 1; // acik
    SunucuBilgi[TepsiSistemi] = 1; // acik
    SunucuBilgi[TextureliObje] = 0; // kapali
//  SunucuBilgi[LSNNYayin] = true;
//  SunucuBilgi[LSNNYayinDurum] = false;
//  SunucuBilgi[LSNNYayinPos][0] = 0;
//  SunucuBilgi[LSNNYayinPos][1] = 0;
//  SunucuBilgi[LSNNYayinPos][2] = 0;
//  SunucuBilgi[LSNNYayinPos][3] = 0;
//  SunucuBilgi[LSNNYayinPos][4] = 0;
//  SunucuBilgi[LSNNYayinPos][5] = 0;
//  SunucuBilgi[LSNNYayinINT] = 0;
//  SunucuBilgi[LSNNYayinVW] = 0;
    PiyangoSifirla();
    for(new i; i < sizeof(GuvenliBolge); ++i)
    {
        GuvenliBolge[i][Rectangle] = CreateDynamicRectangle(GuvenliBolge[i][minX], GuvenliBolge[i][minY], GuvenliBolge[i][maxX], GuvenliBolge[i][maxY], 0, 0);
    }

    new rcon[96];
    format(rcon, sizeof(rcon), "weburl %s", SUNUCU_URL);
    SendRconCommand(rcon);
    format(rcon, sizeof(rcon), "language %s", SUNUCU_DIL);
    SendRconCommand(rcon);
    format(rcon, sizeof(rcon), "hostname %s", SUNUCU_ADI);
    SendRconCommand(rcon);
    format(rcon, sizeof(rcon), "password %s", SUNUCU_SIFRE);
    SendRconCommand(rcon);

    SetGameModeText(SUNUCU_VERSION);

    BaslangicTumTorbalariSil();
    BaslangicTumCesetleriSil();
    ShowNameTags(true);

	/*//Unity(Test)
    CreateDynamicObject(-2001,2036.978,1344.697,9.820,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
    CreateDynamicObject(-2000,2037.151,1345.223,9.820,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
    CreateDynamicObject(-2002,2037.907,1343.988,9.820,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
    CreateDynamicObject(-2003,2037.229,1342.494,9.820,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
    CreateDynamicObject(-2000,1949.147,-2370.897,14.996,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);*/


	//Willowfield Clucking Bell(Object)
	CreateObject(5168, 2385.18750, -1906.51563, 18.44531,   356.85840, 0.00000, 3.14159);
    CreateObject(643, 2401.91406, -1908.45313, 13.02344,   3.14159, 0.00000, 1.57080);
    CreateObject(643, 2401.91406, -1905.10938, 13.02344,   3.14159, 0.00000, 1.57080);
    CreateObject(643, 2401.91406, -1901.56250, 13.02344,   3.14159, 0.00000, 1.57080);
    CreateObject(1687, 2398.39063, -1910.96094, 21.22656,   356.85840, 0.00000, -1.57080);
    CreateObject(1527, 2392.35938, -1914.57031, 14.74219,   0.00000, 0.00000, 0.00000);

	//Gilmore Park(Object)
	new tmpobjid;
    tmpobjid = CreateObject(1530,2092.085,-1940.430,14.218,0.000,0.000,-23.300,300.000);
    SetObjectMaterialText(tmpobjid, "GILMORE PARK", 0, 90, "Ariel", 40, 0, -1, 0, 1);
    tmpobjid = CreateObject(3335,2092.209,-1940.490,11.968,0.000,0.000,-113.300,300.000);
    SetObjectMaterial(tmpobjid, 2, 6404, "beafron1_law2", "Gen_Scaffold_Wood_Under", 0);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    tmpobjid = CreateObject(6959,2112.295,-1924.380,12.580,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(6959,2153.636,-1924.380,12.580,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(1413,2124.748,-1940.197,13.758,0.000,0.000,3.199,300.000);
    tmpobjid = CreateObject(5628,2145.318,-1916.228,16.634,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(1308,2091.675,-1928.961,12.548,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(1308,2071.339,-1922.050,11.979,-8.899,1.399,-140.100,300.000);
    tmpobjid = CreateObject(1308,2091.675,-1937.862,12.548,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(6959,2113.386,-1903.820,-7.417,-88.500,0.000,0.000,300.000);
    tmpobjid = CreateObject(18306,662.460,964.780,5938.560,4.000,-10.000,80.000,300.000);
    tmpobjid = CreateObject(16233,619.890,882.840,6003.680,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(18306,539.770,883.690,5936.750,3.000,-10.000,145.000,300.000);
    tmpobjid = CreateObject(18306,621.280,797.530,5934.120,8.000,-10.000,257.000,300.000);
    tmpobjid = CreateObject(18306,725.460,839.320,5933.310,0.000,0.000,-60.000,300.000);
    tmpobjid = CreateObject(18306,741.570,876.770,5941.520,10.000,-10.000,-24.000,300.000);
    tmpobjid = CreateObject(18306,723.030,931.780,5937.700,0.000,0.000,20.000,300.000);
    tmpobjid = CreateObject(18306,563.750,832.450,5935.040,4.000,-10.000,190.000,300.000);
    tmpobjid = CreateObject(866,626.280,894.960,5999.390,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(747,625.030,895.280,5998.660,0.000,30.000,0.000,300.000);
    tmpobjid = CreateObject(651,623.710,899.400,5999.430,0.000,0.000,90.000,300.000);
    tmpobjid = CreateObject(16104,660.340,910.000,5981.770,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(680,630.900,898.340,5999.080,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(865,624.250,899.460,5999.470,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(866,632.200,899.900,5998.970,0.000,0.000,56.000,300.000);
    tmpobjid = CreateObject(3800,630.960,896.190,5999.040,2.000,4.000,0.000,300.000);
    tmpobjid = CreateObject(866,631.090,896.280,5998.430,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(17058,652.530,875.460,5999.600,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(18765,642.530,878.030,5997.160,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(18765,642.530,872.900,5997.140,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(18765,652.570,878.030,5997.160,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(18765,652.530,872.900,5997.140,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(18765,662.590,878.030,5997.160,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(18765,662.570,872.900,5997.140,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(18981,654.960,882.460,5987.080,0.000,0.000,-90.000,300.000);
    tmpobjid = CreateObject(18981,654.450,868.460,5987.060,0.000,0.000,90.000,300.000);
    tmpobjid = CreateObject(14409,664.640,883.380,5996.310,0.000,0.000,-90.000,300.000);
    tmpobjid = CreateObject(14409,657.650,883.340,5996.310,0.000,0.000,90.000,300.000);
    tmpobjid = CreateObject(18766,661.400,885.890,5997.250,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(18762,661.190,883.580,5998.870,45.000,90.000,90.000,300.000);
    tmpobjid = CreateObject(18765,671.340,875.390,5995.580,-20.000,0.000,-90.000,300.000);
    tmpobjid = CreateObject(18765,640.150,873.030,5996.790,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(18765,639.570,873.630,5996.500,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(18765,640.780,872.400,5997.000,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(8614,636.630,873.440,6001.740,0.000,0.000,-90.000,300.000);
    tmpobjid = CreateObject(3799,651.460,876.630,6002.970,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(3798,654.020,876.900,6003.080,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(3798,643.150,873.780,6002.970,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(3800,647.030,875.210,6002.970,0.000,0.000,45.000,300.000);
    tmpobjid = CreateObject(3798,663.460,873.900,6002.990,0.000,0.000,-10.000,300.000);
    tmpobjid = CreateObject(3798,662.590,877.590,6002.970,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(18751,635.280,867.400,5993.250,0.000,2.000,90.000,300.000);
    tmpobjid = CreateObject(866,645.150,866.280,5999.520,0.000,0.000,6.000,300.000);
    tmpobjid = CreateObject(747,648.450,864.140,5998.790,0.000,30.000,-40.000,300.000);
    tmpobjid = CreateObject(865,637.840,882.650,5998.100,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(866,636.780,881.400,5998.600,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(747,635.090,881.780,5997.140,0.000,30.000,0.000,300.000);
    tmpobjid = CreateObject(866,660.340,899.460,5996.850,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(866,651.880,883.530,5997.850,0.000,0.000,45.000,300.000);
    tmpobjid = CreateObject(747,651.710,896.530,5996.850,0.000,30.000,0.000,300.000);
    tmpobjid = CreateObject(866,650.030,896.510,5997.680,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(680,660.840,890.380,5997.020,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(18765,669.650,878.010,5994.410,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(3798,668.580,881.380,5996.910,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(3800,671.000,882.270,5996.910,0.000,0.000,-20.000,300.000);
    tmpobjid = CreateObject(3800,672.340,882.130,5996.910,0.000,0.000,10.000,300.000);
    tmpobjid = CreateObject(3800,672.340,882.130,5997.970,0.000,0.000,10.000,300.000);
    tmpobjid = CreateObject(866,660.590,890.460,5997.180,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(865,663.340,886.710,5997.020,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(12957,615.960,881.640,6000.140,0.000,0.000,-10.000,300.000);
    tmpobjid = CreateObject(866,614.340,881.710,5999.060,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(747,624.650,902.400,5998.680,0.000,20.000,-70.000,300.000);
    tmpobjid = CreateObject(866,626.510,903.030,5999.240,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(651,641.400,908.280,5998.270,0.000,0.000,270.000,300.000);
    tmpobjid = CreateObject(865,641.590,908.210,5998.020,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(3800,643.340,901.400,5998.040,1.000,4.000,10.000,300.000);
    tmpobjid = CreateObject(3798,645.900,903.280,5997.830,2.000,2.000,40.000,300.000);
    tmpobjid = CreateObject(866,645.250,907.250,5997.540,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(680,646.960,863.030,5999.350,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(865,647.590,862.500,5999.220,0.000,0.000,40.000,300.000);
    tmpobjid = CreateObject(866,632.000,859.340,5999.200,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(747,633.650,858.780,5998.850,0.000,20.000,180.000,300.000);
    tmpobjid = CreateObject(3800,638.950,877.400,6003.140,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(3800,638.950,877.400,6004.200,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(3800,640.340,876.900,6002.970,0.000,0.000,25.000,300.000);
    tmpobjid = CreateObject(3800,646.710,877.460,6002.970,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(3800,645.710,877.460,6002.970,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(3800,647.900,877.400,6002.970,0.000,0.000,10.000,300.000);
    tmpobjid = CreateObject(3800,666.340,875.640,6003.100,0.000,0.000,-15.000,300.000);
    tmpobjid = CreateObject(12957,670.880,866.650,5998.540,3.000,6.000,100.000,300.000);
    tmpobjid = CreateObject(866,670.200,869.780,5997.330,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(865,667.900,870.030,5997.750,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(680,671.380,856.760,5998.390,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(680,676.710,851.270,5998.470,0.000,0.000,66.000,300.000);
    tmpobjid = CreateObject(866,677.090,851.710,5998.540,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(865,673.000,856.960,5998.490,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(747,673.440,853.030,5997.770,0.000,30.000,90.000,300.000);
    tmpobjid = CreateObject(8653,654.080,858.210,6000.250,0.000,0.000,90.000,300.000);
    tmpobjid = CreateObject(8649,654.080,858.150,6000.500,0.000,0.000,270.000,300.000);
    tmpobjid = CreateObject(18981,656.770,858.140,5987.410,0.000,0.000,90.000,300.000);
    tmpobjid = CreateObject(866,656.150,905.460,5997.430,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(865,657.000,904.140,5997.330,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(747,657.840,901.780,5996.430,0.000,30.000,20.000,300.000);
    tmpobjid = CreateObject(651,648.530,897.260,5997.660,0.000,0.000,45.000,300.000);
    tmpobjid = CreateObject(17033,598.020,914.090,5999.430,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(17033,593.590,925.340,6000.040,0.000,0.000,180.000,300.000);
    tmpobjid = CreateObject(747,590.650,932.090,5999.990,0.000,30.000,90.000,300.000);
    tmpobjid = CreateObject(866,590.030,935.020,5999.910,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(747,588.440,938.840,5998.310,3.000,86.000,115.000,300.000);
    tmpobjid = CreateObject(747,589.090,940.440,5997.410,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(747,588.780,938.030,5998.540,0.000,0.000,-90.000,300.000);
    tmpobjid = CreateObject(13590,600.900,904.280,6002.540,-3.000,-4.000,180.000,300.000);
    tmpobjid = CreateObject(12957,609.349,897.890,6001.080,0.000,0.000,-14.000,300.000);
    tmpobjid = CreateObject(866,601.900,884.900,6000.200,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(866,609.460,875.960,6000.100,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(680,609.140,881.840,5999.700,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(651,610.400,874.700,6000.240,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(865,612.080,865.200,5999.220,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(651,648.070,844.609,6000.790,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(651,620.650,845.320,5999.390,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(866,620.900,842.710,5999.310,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(865,618.900,846.780,5999.330,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(867,622.210,849.609,5999.660,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(866,634.400,849.169,6000.120,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(866,594.099,934.690,6000.600,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(866,587.169,929.020,6000.720,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(865,648.109,846.260,6000.700,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(867,686.400,923.919,5997.770,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(866,648.940,844.390,6000.720,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(866,677.419,913.140,5997.049,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(866,685.270,922.090,5997.700,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(680,637.830,857.830,5999.560,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(867,694.020,893.390,5996.500,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(680,679.630,929.150,5997.890,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(864,690.780,878.950,5996.790,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(863,691.760,876.479,5996.970,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(866,683.500,929.150,5997.830,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(863,661.969,887.229,5997.120,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(858,665.640,926.919,5998.350,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(860,669.590,926.400,5998.220,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(879,686.760,898.900,5996.450,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(866,672.330,928.650,5998.040,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(866,678.440,930.400,5997.850,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(866,676.340,929.479,5997.930,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(866,692.849,903.070,5996.600,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(866,687.590,909.880,5996.930,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(866,689.099,904.020,5996.560,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(866,689.580,896.299,5996.470,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(880,639.039,841.380,6000.470,0.000,0.000,150.000,300.000);
    tmpobjid = CreateObject(866,636.190,837.799,6000.310,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(3253,681.030,854.109,5998.629,0.000,0.000,180.000,300.000);
    tmpobjid = CreateObject(868,679.989,920.989,5997.660,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(868,675.190,911.000,5996.910,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(879,690.590,853.479,5998.810,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(879,682.299,841.289,5999.450,0.000,0.000,280.000,300.000);
    tmpobjid = CreateObject(3362,628.200,915.349,5998.819,0.000,0.000,-90.000,300.000);
    tmpobjid = CreateObject(866,675.359,841.520,5999.189,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(866,672.799,846.030,5999.100,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(866,633.650,924.909,5999.500,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(866,626.099,925.340,5999.870,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(866,620.669,924.270,6000.060,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(866,617.130,919.700,5999.990,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(866,619.489,913.510,5999.709,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(866,637.989,918.530,5998.970,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(866,629.520,920.679,5999.470,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(13590,606.669,828.669,5999.439,4.000,0.000,-76.000,300.000);
    tmpobjid = CreateObject(12957,610.950,838.409,5999.279,-5.000,0.000,90.000,300.000);
    tmpobjid = CreateObject(680,611.820,843.969,5998.660,0.000,0.000,90.000,300.000);
    tmpobjid = CreateObject(866,612.630,841.609,5998.850,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(865,603.000,842.979,5998.240,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(946,2117.358,-1932.017,14.708,0.000,0.000,270.699,300.000);
    tmpobjid = CreateObject(792,2123.952,-1943.174,12.948,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(792,2118.820,-1943.174,12.948,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(792,2110.456,-1943.174,12.948,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(1412,2119.538,-1940.425,13.766,0.000,0.000,2.499,300.000);
    tmpobjid = CreateObject(792,2103.578,-1943.174,12.948,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(1412,2132.679,-1926.869,13.766,0.000,0.000,89.199,300.000);
    tmpobjid = CreateObject(1412,2132.639,-1937.216,13.766,0.000,0.000,90.000,300.000);
    tmpobjid = CreateObject(1281,2105.665,-1929.915,13.358,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(1281,2105.665,-1937.486,13.358,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(1281,2099.222,-1937.486,13.358,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(1413,2132.558,-1932.048,13.768,0.000,0.000,270.000,300.000);
    tmpobjid = CreateObject(1281,2099.222,-1929.796,13.358,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(1440,2104.007,-1922.524,13.058,0.000,0.000,92.800,300.000);
    tmpobjid = CreateObject(1438,2106.041,-1922.845,12.548,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(1291,2090.908,-1928.349,13.068,0.000,0.000,-91.899,300.000);
    tmpobjid = CreateObject(1412,2130.028,-1939.967,13.766,0.000,0.000,2.499,300.000);
    tmpobjid = CreateObject(1412,2116.346,-1926.758,13.766,0.000,0.000,452.499,300.000);
    tmpobjid = CreateObject(2114,2123.368,-1932.173,12.692,47.299,0.000,-36.299,300.000);
    tmpobjid = CreateObject(1413,2116.374,-1932.048,13.768,0.000,0.000,270.000,300.000);
    tmpobjid = CreateObject(946,2131.553,-1931.844,14.708,0.000,0.000,450.699,300.000);
    tmpobjid = CreateObject(1413,2116.374,-1936.198,13.768,0.000,0.000,270.000,300.000);
    tmpobjid = CreateObject(1524,2129.651,-1924.182,14.108,0.000,0.000,89.800,300.000);
    tmpobjid = CreateObject(1531,2124.430,-1924.153,14.287,-17.500,0.000,89.800,300.000);
    tmpobjid = CreateObject(1257,2087.979,-1914.254,13.808,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(1229,2087.136,-1917.116,13.582,0.000,0.000,270.000,300.000);
    tmpobjid = CreateObject(2840,2106.168,-1929.963,13.378,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(3035,2102.176,-1924.940,13.248,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(3035,2108.842,-1924.940,13.248,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(3593,2131.417,-1902.899,13.039,0.000,0.000,-90.000,300.000);
    tmpobjid = CreateObject(3406,2131.933,-1905.528,16.578,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(3406,2105.621,-1905.338,18.398,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(1571,2096.919,-1942.708,13.872,0.000,0.000,180.000,300.000);
    tmpobjid = CreateObject(3806,2094.572,-1943.071,12.948,0.000,0.000,180.000,300.000);

	//Rent A Car
    tmpobjid = CreateObject(640,1541.043,-2332.252,13.206,0.000,0.000,0.000,300.000);
    SetObjectMaterial(tmpobjid, 0, 14668, "711c", "bwtilebroth", 0);
    tmpobjid = CreateObject(640,1541.012,-2302.237,13.206,0.000,0.000,0.000,300.000);
    SetObjectMaterial(tmpobjid, 0, 14668, "711c", "bwtilebroth", 0);
    tmpobjid = CreateObject(1259,1535.562,-2326.293,20.095,0.000,0.000,-122.799,300.000);
    SetObjectMaterialText(tmpobjid, "-1AAAA", 0, 60, "Webdings", 188, 1, -1, -1, 2);
    tmpobjid = CreateObject(7313,1560.332,-2303.455,14.667,0.000,0.000,540.000,300.000);
    SetObjectMaterialText(tmpobjid, "Sadece $150'a arac kirala.", 0, 70, "Calibri", 25, 0, -1, 1, 1);
    tmpobjid = CreateObject(19325,1534.148,-2325.807,25.795,0.000,0.000,-122.800,300.000);
    SetObjectMaterialText(tmpobjid, "A", 0, 90, "Engravers MT", 45, 0, -1, 1, 1);
    tmpobjid = CreateObject(19325,1537.931,-2328.243,25.795,0.000,0.000,-122.800,300.000);
    SetObjectMaterialText(tmpobjid, "RENT", 0, 90, "Engravers MT", 45, 0, -1, 1, 1);
    tmpobjid = CreateObject(19325,1530.061,-2323.174,25.795,0.000,0.000,-122.800,300.000);
    SetObjectMaterialText(tmpobjid, "CAR", 0, 90, "Engravers MT", 45, 0, -1, 1, 1);
    tmpobjid = CreateObject(19325,1537.925,-2328.252,26.605,0.000,0.000,-122.800,300.000);
    SetObjectMaterialText(tmpobjid, "RENT", 0, 90, "Engravers MT", 45, 0, 0, 1, 1);
    tmpobjid = CreateObject(19325,1532.353,-2324.662,26.605,0.000,0.000,-122.800,300.000);
    SetObjectMaterialText(tmpobjid, "RENT", 0, 90, "Engravers MT", 45, 0, 0, 1, 1);
    tmpobjid = CreateObject(19325,1530.057,-2323.185,26.605,0.000,0.000,-122.800,300.000);
    SetObjectMaterialText(tmpobjid, "RENT", 0, 90, "Engravers MT", 45, 0, 0, 1, 1);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    tmpobjid = CreateObject(984,1566.115,-2302.942,13.210,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(984,1566.115,-2315.756,13.210,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(19324,1499.731,-2352.265,13.197,0.000,0.000,180.000,300.000);
    tmpobjid = CreateObject(984,1559.714,-2334.960,13.210,1080.000,0.000,1170.000,300.000);
    tmpobjid = CreateObject(984,1546.915,-2334.960,13.210,1080.000,0.000,1170.000,300.000);
    tmpobjid = CreateObject(984,1540.536,-2328.570,13.210,1080.000,0.000,1260.000,300.000);
    tmpobjid = CreateObject(984,1540.536,-2315.772,13.210,1080.000,0.000,1260.000,300.000);
    tmpobjid = CreateObject(984,1540.536,-2303.006,13.210,1080.000,0.000,1260.000,300.000);
    tmpobjid = CreateObject(4641,1542.538,-2298.520,14.232,0.000,0.000,-179.800,300.000);
    tmpobjid = CreateObject(984,1566.115,-2328.566,13.210,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(956,1585.685,-2279.852,12.968,0.000,0.000,-90.000,300.000);
    tmpobjid = CreateObject(3660,1657.917,-2232.112,14.255,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(984,1559.716,-2296.527,13.210,0.000,0.000,-90.000,300.000);
    tmpobjid = CreateObject(643,1588.539,-2275.352,13.035,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(10829,1560.696,-2308.147,12.545,0.000,0.000,90.000,300.000);
    tmpobjid = CreateObject(19124,1540.510,-2296.506,13.102,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(19124,1553.321,-2296.506,13.102,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(3281,1540.413,-2298.588,13.272,0.000,0.000,-89.599,300.000);
    tmpobjid = CreateObject(8569,1555.437,-2355.331,14.656,0.000,0.000,-90.000,300.000);
    tmpobjid = CreateObject(643,1593.089,-2275.352,13.035,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(10439,1517.074,-2359.004,16.294,0.000,0.000,-90.000,300.000);
    tmpobjid = CreateObject(643,1597.928,-2275.352,13.035,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(12944,1494.379,-2359.128,12.554,0.000,0.000,90.000,300.000);
    tmpobjid = CreateObject(1290,1540.736,-2358.064,18.614,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(3658,1585.595,-2291.650,13.174,0.000,0.000,90.000,300.000);
    tmpobjid = CreateObject(3658,1585.595,-2284.599,13.174,0.000,0.000,90.000,300.000);
    tmpobjid = CreateObject(12947,1536.957,-2359.937,12.330,0.000,0.000,-180.000,300.000);
    tmpobjid = CreateObject(19968,1555.232,-2278.896,12.417,0.000,0.000,-42.799,300.000);
    
    //Crenshaw Block(Object)
    tmpobjid = CreateObject(3698,2231.386,-1464.349,25.795,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(645,2240.359,-1468.871,23.011,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(673,2240.281,-1460.819,23.068,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(3698,2249.275,-1464.349,25.795,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(3555,2264.542,-1463.671,25.498,0.000,0.000,19.700,300.000);
    tmpobjid = CreateObject(3698,2230.495,-1403.384,25.795,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(3698,2247.388,-1403.384,25.795,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(3555,2261.518,-1399.130,25.718,0.000,0.000,175.000,300.000);
    tmpobjid = CreateObject(1712,2267.253,-1401.531,23.000,0.000,0.000,38.299,300.000);
    tmpobjid = CreateObject(1712,2269.869,-1400.898,23.000,0.000,0.000,-46.800,300.000);
    tmpobjid = CreateObject(2115,2268.254,-1403.027,22.769,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(947,2277.484,-1401.908,25.109,0.000,0.000,450.000,300.000);
    tmpobjid = CreateObject(2281,2263.639,-1403.390,24.976,0.000,16.299,-6.799,300.000);
    tmpobjid = CreateObject(19831,2266.960,-1398.163,23.000,0.000,0.000,86.700,300.000);
    tmpobjid = CreateObject(19831,2267.020,-1397.115,23.000,0.000,0.000,86.700,300.000);
    tmpobjid = CreateObject(2103,2266.618,-1402.684,23.020,0.000,0.000,60.899,300.000);
    tmpobjid = CreateObject(2629,2267.483,-1395.317,22.990,0.000,0.000,87.500,300.000);
    tmpobjid = CreateObject(1546,2269.148,-1402.961,23.650,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(1546,2269.148,-1403.111,23.650,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(1546,2269.289,-1403.111,23.650,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(1546,2269.289,-1402.951,23.650,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(2654,2262.581,-1403.142,23.450,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(2683,2268.286,-1402.969,23.690,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(19874,2268.658,-1402.876,23.570,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(19874,2268.828,-1402.876,23.570,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(19874,2268.828,-1402.876,23.590,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(19874,2268.658,-1402.876,23.590,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(19874,2268.658,-1402.876,23.610,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(19874,2268.828,-1402.876,23.610,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(1411,2280.908,-1408.691,24.473,0.000,0.000,90.000,300.000);
    tmpobjid = CreateObject(1411,2280.908,-1403.502,24.473,0.000,0.000,90.000,300.000);
    tmpobjid = CreateObject(1411,2280.908,-1403.502,24.473,0.000,0.000,90.000,300.000);
    tmpobjid = CreateObject(1411,2280.908,-1403.502,24.473,0.000,0.000,90.000,300.000);
    tmpobjid = CreateObject(1411,2280.908,-1398.322,24.473,0.000,0.000,90.000,300.000);
    tmpobjid = CreateObject(1411,2278.572,-1395.222,24.473,0.000,0.000,164.300,300.000);
    tmpobjid = CreateObject(1411,2273.539,-1394.532,24.473,0.000,0.000,180.000,300.000);
    tmpobjid = CreateObject(1411,2268.359,-1394.532,24.473,0.000,0.000,180.000,300.000);
    tmpobjid = CreateObject(1411,2278.676,-1412.167,24.473,0.000,0.000,24.500,300.000);
    tmpobjid = CreateObject(1411,2273.839,-1413.060,24.473,0.000,0.000,-3.599,300.000);
    tmpobjid = CreateObject(1411,2268.951,-1411.885,24.473,0.000,0.000,-23.599,300.000);
    tmpobjid = CreateObject(1411,2264.206,-1409.812,24.473,0.000,0.000,-23.599,300.000);
    tmpobjid = CreateObject(1411,2259.478,-1407.746,24.473,0.000,0.000,-23.599,300.000);
    tmpobjid = CreateObject(2114,2274.471,-1401.983,23.135,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(19592,2277.986,-1402.679,23.450,0.000,0.000,90.000,300.000);
    tmpobjid = CreateObject(638,2279.834,-1410.755,23.585,0.000,0.000,-45.099,300.000);
    tmpobjid = CreateObject(638,2277.483,-1412.216,23.585,0.000,0.000,-71.100,300.000);
    tmpobjid = CreateObject(2121,2200.054,-1492.866,25.059,0.000,0.000,-151.199,300.000);
    tmpobjid = CreateObject(2121,2198.750,-1492.661,25.059,0.000,0.000,147.099,300.000);
    tmpobjid = CreateObject(1486,2199.118,-1493.011,24.689,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(1486,2199.218,-1493.011,24.689,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(1450,2202.015,-1487.896,25.119,0.000,0.000,265.000,300.000);
    tmpobjid = CreateObject(11706,2202.278,-1489.762,24.539,0.000,0.000,450.000,300.000);
    
    // Ganton Çevre Modu tarzý (Credits: Giotto ve unlocated)
    tmpobjid = CreateObject(1257,2256.306,-1740.050,13.832,0.000,0.000,270.000,300.000);
    tmpobjid = CreateObject(1229,2245.156,-1739.077,14.116,0.000,0.000,180.000,300.000);
    tmpobjid = CreateObject(1229,2290.221,-1738.788,14.126,0.000,0.000,180.000,300.000);
    tmpobjid = CreateObject(1257,2286.988,-1740.050,13.832,0.000,0.000,270.000,300.000);
    tmpobjid = CreateObject(1229,2260.138,-1739.077,14.116,0.000,0.000,180.000,300.000);
    tmpobjid = CreateObject(1257,2272.250,-1740.050,13.832,0.000,0.000,270.000,300.000);
    tmpobjid = CreateObject(928,2226.402,-1726.376,12.816,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(2670,2292.858,-1745.545,12.702,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(2673,2289.748,-1745.449,12.662,0.000,0.000,-28.099,300.000);
    tmpobjid = CreateObject(1229,2275.358,-1738.788,14.126,0.000,0.000,180.000,300.000);
    tmpobjid = CreateObject(1257,2241.235,-1740.050,13.832,0.000,0.000,270.000,300.000);
    tmpobjid = CreateObject(3035,2291.117,-1744.089,13.332,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(1440,2228.263,-1726.207,13.060,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(2059,2286.545,-1744.286,12.576,0.000,0.000,-30.500,300.000);
    tmpobjid = CreateObject(19878,2231.311,-1722.708,12.782,0.000,-29.599,90.000,300.000);
    tmpobjid = CreateObject(1810,2271.884,-1758.375,12.626,0.000,0.000,153.399,300.000);
    tmpobjid = CreateObject(1369,2255.750,-1758.565,13.026,0.000,0.000,164.499,300.000);
    tmpobjid = CreateObject(1810,2273.177,-1758.625,12.626,0.000,0.000,-172.500,300.000);
    tmpobjid = CreateObject(1334,2228.179,-1757.864,13.390,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(1343,2275.647,-1758.942,13.306,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(1486,2272.329,-1758.916,12.686,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(1486,2273.479,-1758.526,12.686,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(1486,2273.900,-1758.836,12.626,0.000,-90.000,0.000,300.000);
    tmpobjid = CreateObject(1440,2277.562,-1758.754,13.056,0.000,0.000,180.000,300.000);
    tmpobjid = CreateObject(910,2379.639,-1697.666,13.905,0.000,0.000,180.000,300.000);
    tmpobjid = CreateObject(1771,2302.341,-1697.497,13.335,0.000,55.000,90.000,300.000);
    tmpobjid = CreateObject(946,2243.811,-1835.942,14.734,0.000,0.000,0.000,300.000);
    tmpobjid = CreateObject(5410,2240.451,-1833.887,9.172,0.000,0.000,96.300,300.000);

    // GYM
    lsbarbell = CreateObject(2913, 774.4290, 1.883098, 1000.4883, 0, 270.0, 88.000,150);
    sfbarbell = CreateObject(2913, 765.8552, -48.8685, 1000.6409, 0, 89.50, 0.0000,150);
    lvbarbell = CreateObject(2913, 765.3403, -59.1827, 1000.6379, 0, 89.50, 181.25,150);
    lvbarbell2 = CreateObject(2913, 768.080, -59.0295, 1000.6379, 0, 90.0, 0, 150);

    //for(new i; i < MAX_YANGIN; i++) YanginInfo[i][yID] = -1;
    for(new i; i < MAX_PAYPHONES; i++) ArayanNumara[i] = 0;

    SunucuHud[0] = TextDrawCreate(450.000000, 392.000000, "i");
    TextDrawBackgroundColor(SunucuHud[0], 0);
    TextDrawFont(SunucuHud[0], 2);
    TextDrawLetterSize(SunucuHud[0], 22.800073, 2.600000);
    TextDrawColor(SunucuHud[0], 80);
    TextDrawSetOutline(SunucuHud[0], 0);
    TextDrawSetProportional(SunucuHud[0], 1);
    TextDrawSetShadow(SunucuHud[0], 1);
    TextDrawSetSelectable(SunucuHud[0], 0);

    SunucuHud[1] = TextDrawCreate(450.000000, 406.000000, "i");
    TextDrawBackgroundColor(SunucuHud[1], 0);
    TextDrawFont(SunucuHud[1], 2);
    TextDrawLetterSize(SunucuHud[1], 22.800073, 2.600000);
    TextDrawColor(SunucuHud[1], 80);
    TextDrawSetOutline(SunucuHud[1], 0);
    TextDrawSetProportional(SunucuHud[1], 1);
    TextDrawSetShadow(SunucuHud[1], 1);
    TextDrawSetSelectable(SunucuHud[1], 0);

    SunucuHud[2] = TextDrawCreate(450.000000, 420.000000, "i");
    TextDrawBackgroundColor(SunucuHud[2], 0);
    TextDrawFont(SunucuHud[2], 2);
    TextDrawLetterSize(SunucuHud[2], 22.800073, 2.600000);
    TextDrawColor(SunucuHud[2], 80);
    TextDrawSetOutline(SunucuHud[2], 0);
    TextDrawSetProportional(SunucuHud[2], 1);
    TextDrawSetShadow(SunucuHud[2], 1);
    TextDrawSetSelectable(SunucuHud[2], 0);
    
//    StadyumObjeler();
    
    AMXProtection();
    MapAndreas_Init(MAP_ANDREAS_MODE_FULL);
    //new MySQLOpt: option_id = mysql_init_options();
    //mysql_set_option(option_id, AUTO_RECONNECT, true);
    ourConnection = mysql_connect("localhost", "sandreas", "qbAZ3RfFmpHKVB5e", "game_database"); //monty
    //ourConnection = mysql_connect("127.0.0.1", "root", "þifre", "veritabaný");
    if(mysql_errno(ourConnection) != 0) printf("Veritabaný baðlý deðil.");

    mysql_log(ERROR | WARNING);

    for(new l, ls = sizeof(LicensesPoint); l < ls; l++)
        Pickup_Create(ELEMENT_LICENSE, l, 1239, 23, LicensesPoint[l][licenseX], LicensesPoint[l][licenseY], LicensesPoint[l][licenseZ], 0, 0);

    for(new c, cs = sizeof(FarmerZones); c < cs; c++)
        FarmerAreas[c] = CreateDynamicRectangle(FarmerZones[c][0], FarmerZones[c][1], FarmerZones[c][2], FarmerZones[c][3]);

    for(new f, fs = sizeof(FishingZones); f < fs; f++)
        FishingAreas[f] = CreateDynamicRectangle(FishingZones[f][0], FishingZones[f][1], FishingZones[f][2], FishingZones[f][3]);

    CreateDynamic3DTextLabel("[Balýkçýlýk]\n/balikyemal\n/agal($1000)\n/baliksandigi satinal", COLOR_WHITE, 359.916290, -2032.155029, 7.835937 + 0.6, 4.0);
    Pickup_Create(ELEMENT_BALIKYEM, 0, 1239, 1, 359.916290, -2032.155029, 7.835937, 0, 0);
    
    Pickup_Create(ELEMENT_SELL_FISH, 0, 1239, 23, 375.116790, -2055.140136, 8.015625, 0, 0);

    Pickup_Create(ELEMENT_KANTIN, 0, 1239, 1, 449.1310, -83.6897, 999.5547, 19, 4);
    CreateDynamic3DTextLabel("/satinal", COLOR_WHITE, 449.1310, -83.6897, 999.5547 + 0.6, 4.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 19, 4);

    Pickup_Create(ELEMENT_SIREN, 0, 1239, 1, -1773.5259, 2593.0930, 22.3893, 911, 0);
    CreateDynamic3DTextLabel("/siren 3", COLOR_WHITE, -1773.5259, 2593.0930, 22.3893 + 0.6, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 911, 0);

    Pickup_Create(ELEMENT_TEZGAH, 0, 1239, 1, 387.2847, -1897.2672, 7.8359, 0, 0);
    CreateDynamic3DTextLabel("/tezgah satinal\n/masaal", COLOR_WHITE, 387.2847, -1897.2672, 7.8359 + 0.6, 20.0);

    Pickup_Create(ELEMENT_CADIR, 0, 1239, 1, 821.4810,-1758.2771,13.6484, 0, 0);
    CreateDynamic3DTextLabel("/cadir satinal", COLOR_WHITE, 821.4810,-1758.2771,13.6484 + 0.6, 20.0);
    
    Pickup_Create(ELEMENT_YAKITYUKLE, 0, 1239, 1, 250.074401, 1420.627807, 10.585937, 0, 0);
    CreateDynamic3DTextLabel("[Trucker]\nYakýt Yükleme Noktasý\nTutar: $1000", COLOR_WHITE, 250.074401, 1420.627807, 10.585937 + 0.6, 4.0);

    Pickup_Create(ELEMENT_YAKITYUKLE, 0, 1239, 1, 250.074401, 1395.342407, 10.585937, 0, 0);
    CreateDynamic3DTextLabel("[Trucker]\nYakýt Yükleme Noktasý\nTutar: $1000", COLOR_WHITE, 250.074401, 1395.342407, 10.585937 + 0.6, 4.0);

    Pickup_Create(ELEMENT_YAKITYUKLE, 0, 1239, 1, 250.074401, 1370.814941, 10.585937, 0, 0);
    CreateDynamic3DTextLabel("[Trucker]\nYakýt Yükleme Noktasý\nTutar: $1000", COLOR_WHITE, 250.074401, 1370.814941, 10.585937 + 0.6, 4.0);

    Pickup_Create(ELEMENT_YAKITTESLIM, 0, 1239, 1, 2130.653564, 892.638488, 10.820312, 0, 0);
    CreateDynamic3DTextLabel("[Trucker]\nYakýt Teslim Noktasý\nTutar: $2750", COLOR_WHITE, 2130.653564, 892.638488, 10.820312 + 0.6, 4.0);

    Pickup_Create(ELEMENT_YAKITTESLIM, 0, 1239, 1, 665.944824, -582.788269, 16.335937, 0, 0);
    CreateDynamic3DTextLabel("[Trucker]\nYakýt Teslim Noktasý\nTutar: $3000", COLOR_WHITE, 665.944824, -582.788269, 16.335937 + 0.6, 4.0);

    Pickup_Create(ELEMENT_YAKITTESLIM, 0, 1239, 1, -2430.835205, 953.155029, 45.296875, 0, 0);
    CreateDynamic3DTextLabel("[Trucker]\nYakýt Teslim Noktasý\nTutar: $4500", COLOR_WHITE, -2430.835205, 953.155029, 45.296875 + 0.6, 4.0);

    Pickup_Create(ELEMENT_COPSAT, 0, 1239, 1, 2102.3074,-2001.5436,13.5469, 0, 0);
    CreateDynamic3DTextLabel("[Çöp Satma Noktasý]\n/copkaristir envanter", COLOR_WHITE, 2102.3074,-2001.5436,13.5469 + 0.6, 20.0);
    
    /*CreateDynamic3DTextLabel("/satinal", COLOR_WHITE, 1159.407226, -1444.683471, 15.786179 + 0.6, 4.0);
    Pickup_Create(VERONAMALL, 0, 1239, 1, 1159.407226, -1444.683471, 15.786179, 0, 0);
    CreateDynamic3DTextLabel("/satinal", COLOR_WHITE, 1163.574218, -1472.133666, 15.787181 + 0.6, 4.0);
    Pickup_Create(VERONAMALL, 0, 1239, 1, 1163.574218, -1472.133666, 15.787181, 0, 0);
    CreateDynamic3DTextLabel("/satinal", COLOR_WHITE, 1093.010009, -1473.170898, 15.788181 + 0.6, 4.0);
    Pickup_Create(VERONAMALL, 0, 1239, 1, 1093.010009, -1473.170898, 15.788181, 0, 0);
    CreateDynamic3DTextLabel("/satinal", COLOR_WHITE, 1098.170654, -1451.914672, 15.787182 + 0.6, 4.0);
    Pickup_Create(VERONAMALL, 0, 1239, 1, 1098.170654, -1451.914672, 15.787182, 0, 0);*/
    CreateDynamic3DTextLabel("/aksesuaral\n/kiyafetal\n/ekiyafetal", COLOR_WHITE, 1096.650512, -1435.518798, 15.787182 + 0.6, 4.0);
    Pickup_Create(VERONAMALL, 0, 1239, 1, 1096.650512, -1435.518798, 15.787182, 0, 0);

    for(new j, js = sizeof(Jobs); j < js; j++)
    {
        Pickup_Create(ELEMENT_JOB, j, 1239, 23, Jobs[j][jobX], Jobs[j][jobY], Jobs[j][jobZ], 0, 0);
        CreateDynamic3DTextLabel(Jobs[j][jobName], COLOR_WHITE, Jobs[j][jobX], Jobs[j][jobY], Jobs[j][jobZ]+0.4, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0, -1);
    }
    Pickup_Create(ELEMENT_ARREST, 0, 1247, 23, ARREST_X, ARREST_Y, ARREST_Z, 0, 0);
    Pickup_Create(ELEMENT_SELL_FISH, 0, 1239, 23, SELL_X, SELL_Y, SELL_Z, 0, 0);
    Pickup_Create(ELEMENT_IMPOUND, 0, 1239, 23, IMPOUND_X, IMPOUND_Y, IMPOUND_Z, 0, 0);
    Pickup_Create(ELEMENT_TUNE, 0, 1239, 23, EXTERIOR_TUNING_X, EXTERIOR_TUNING_Y, EXTERIOR_TUNING_Z, 0);
    Pickup_Create(ELEMENT_GYM, 0, 19556, 23, 767.6693,14.2660,1000.6997);
    Pickup_Create(ELEMENT_GYM, 1, 19556, 23, 768.1675,-36.8077,1000.6865);
    Pickup_Create(ELEMENT_GYM, 2, 19556, 23, 772.1833,-66.9453,1000.6563);
    ShowPlayerMarkers(0);
    EnableStuntBonusForAll(false);
    DisableInteriorEnterExits();
    ManualVehicleEngineAndLights();
    SetNameTagDrawDistance(20.0);

    KMH = TextDrawCreate(584.000000, 375.000000, "KM/H");
    TextDrawBackgroundColor(KMH, 255);
    TextDrawFont(KMH, 2);
    TextDrawLetterSize(KMH, 0.310000, 1.070000);
    TextDrawColor(KMH, -1);
    TextDrawSetOutline(KMH, 1);
    TextDrawSetProportional(KMH, 1);
    TextDrawSetSelectable(KMH, 0);

    /*SunucuLogo = TextDrawCreate(242.066223, 101.548034, "mdl-2001:sunuculogo");
    TextDrawLetterSize(SunucuLogo, 0.000000, 0.000000);
    TextDrawTextSize(SunucuLogo, 157.553253, 84.607414);
    TextDrawAlignment(SunucuLogo, 1);
    TextDrawColor(SunucuLogo, -1);
    TextDrawSetShadow(SunucuLogo, 0);
    TextDrawSetOutline(SunucuLogo, 0);
    TextDrawBackgroundColor(SunucuLogo, 255);
    TextDrawFont(SunucuLogo, 4);
    TextDrawSetProportional(SunucuLogo, 0);
    TextDrawSetShadow(SunucuLogo, 0);*/

    BlindFold = TextDrawCreate(0.0, 0.0, "_");
    TextDrawFont(BlindFold, 1);
    TextDrawLetterSize(BlindFold, 0.0, 50.0);
    TextDrawUseBox(BlindFold, true);
    TextDrawColor(BlindFold, 0);
    TextDrawBoxColor(BlindFold, 0x000000FF);
    
    BlindFold2 = TextDrawCreate(0.0, 0.0, "_");
    TextDrawFont(BlindFold2, 1);
    TextDrawLetterSize(BlindFold2, 0.0, 50.0);
    TextDrawUseBox(BlindFold2, true);
    TextDrawColor(BlindFold2, 0);
    TextDrawBoxColor(BlindFold2, 0xFF9E89FF);
    
    BrAdminEkran = TextDrawCreate(0.0, 0.0, "_");
    TextDrawFont(BrAdminEkran, 1);
    TextDrawLetterSize(BrAdminEkran, 0.0, 50.0);
    TextDrawUseBox(BrAdminEkran, true);
    TextDrawColor(BrAdminEkran, 0);
    TextDrawBoxColor(BrAdminEkran, 0x62869dFF);

    Inventory_CreateObjects();
    Building_CreateItems();

    mysql_tquery(ourConnection, "DELETE FROM staffrequests WHERE 1");
    mysql_tquery(ourConnection, "TRUNCATE TABLE loaded_furnitures");
    mysql_tquery(ourConnection, "UPDATE furnitures SET object_id = '0' WHERE 1");
    mysql_tquery(ourConnection, "UPDATE vehicles SET spawned = '0' WHERE 1");
    mysql_tquery(ourConnection, "SELECT * FROM buildings", "LoadBuildings");
    mysql_tquery(ourConnection, "SELECT * FROM factions", "LoadFactions");
    mysql_tquery(ourConnection, "SELECT * FROM houses", "LoadHouses");
    mysql_tquery(ourConnection, "SELECT * FROM otel", "OtelYukle");
    mysql_tquery(ourConnection, "SELECT * FROM laboratories", "LoadLaboratories");
    mysql_tquery(ourConnection, "SELECT * FROM illegal_industries", "LoadIllegalIndustries");
    mysql_tquery(ourConnection, "SELECT * FROM dealers", "LoadDealers");
    mysql_tquery(ourConnection, "SELECT * FROM payphones", "LoadPayPhones");
    mysql_tquery(ourConnection, "SELECT * FROM atmler", "LoadATM");
    mysql_tquery(ourConnection, "SELECT * FROM plantdrugs", "UyusturuculariYukle");
    mysql_tquery(ourConnection, "SELECT * FROM dolap", "LoadDolap");
    mysql_tquery(ourConnection, "SELECT * FROM sirket", "LoadSirket");
    mysql_tquery(ourConnection, "SELECT * FROM graffitis", "LoadGraffitis");
    mysql_tquery(ourConnection, "SELECT * FROM frequencies", "LoadFrequences");
    mysql_tquery(ourConnection, "SELECT * FROM taxes", "LoadTaxes");
    mysql_tquery(ourConnection, "SELECT * FROM surveillance_bugs", "LoadCimici");
    mysql_tquery(ourConnection, "SELECT * FROM teleports", "LoadTeleports");
    mysql_tquery(ourConnection, "SELECT * FROM companies", "LoadCompanies");
    mysql_tquery(ourConnection, "SELECT * FROM games", "LoadGames");
    mysql_tquery(ourConnection, "SELECT * FROM gates", "LoadGates");
    mysql_tquery(ourConnection, "SELECT * FROM loaded_furnitures WHERE world = 0", "OnCheckLoadingFurnitures", "d", 0);
    mysql_tquery(ourConnection, "SELECT * FROM vehicles WHERE faction != 65535 OR job != -1", "LoadVehicles");
    mysql_tquery(ourConnection, "SELECT * FROM vehicles WHERE sak > 0", "LoadVehicles2");
    mysql_tquery(ourConnection, "SELECT * FROM `mapler`", "MapleriYukle");
    mysql_tquery(ourConnection, "SELECT * FROM actors", "LoadDynamicActors");
    mysql_tquery(ourConnection, "SELECT * FROM ihbarlar", "IhbarYukle");
    mysql_tquery(ourConnection, "SELECT * FROM calintilar", "CalintiYukle");
    mysql_tquery(ourConnection, "SELECT * FROM copkutulari", "CopKutusuYukle");
    mysql_tquery(ourConnection, "UPDATE characters SET online = '0'");

    for(new i; i < MAX_VEHICLES; i++) {
        VehicleInfo[i][vELM] = false;
        Flash[i] = 0;
        ELMOncesiIsik[i] = 0;
        ELMOncesiIsikHasar[i] = 0;
        VehicleInfo[i][vCeset][0] = -1;
        VehicleInfo[i][vCeset][1] = -1;
        VehicleInfo[i][vCeset][2] = -1;
    }
    SetTimer("SaatlikTimer", 360000, true);
    SetTimer("DakikaTimer", 60000, true);
    SetTimer("SaniyeTimer", 1000, true);
    SetTimer("FrequentCheck", 1000 * 60 * 5, true);
    SetTimer("VehicleCheck", 120000, true);

    CreateDynamic3DTextLabel("Baðlanmýþ aracý çýkartmak için \"/araccikart\" kullanýn.", COLOR_WHITE, IMPOUND_X, IMPOUND_Y, IMPOUND_Z+0.4, 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0, -1);
    CreateDynamic3DTextLabel("[Modifiye Noktasý]\n/modifiye\n/aracboyat\n/akutamiri ($12.500)\n/motortamiri ($12.500)\n/kilometresifirla (KM x $50)", COLOR_WHITE, EXTERIOR_TUNING_X, EXTERIOR_TUNING_Y, EXTERIOR_TUNING_Z+0.5, 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0, -1);

    // kaan interior
    CreateDynamicObject(14795, 1388.88281, -20.88280, 2318.70313,   0.00000, 0.00000, 0.00000);

    // karavan
    CreateDynamicObject(14385, 2511.64404, -1725.43726, 779.20868,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(14386, 2511.68481, -1726.33496, 779.07117,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(6959, 2509.99048, -1725.06567, 777.64142,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(5856, 2509.53320, -1731.39014, 779.61633,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(5856, 2509.32837, -1728.60352, 779.61633,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(5856, 2509.53296, -1726.11255, 779.61633,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(5856, 2509.51270, -1722.17847, 779.61633,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(5856, 2508.47363, -1723.26416, 779.61633,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(5856, 2511.74902, -1732.35571, 779.64136,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(5856, 2512.50464, -1718.44873, 779.61633,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(5856, 2508.47217, -1720.57666, 779.61633,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(5856, 2510.49927, -1718.53540, 779.61633,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(5856, 2513.87134, -1722.26379, 779.61633,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(5856, 2513.82446, -1718.46497, 779.61633,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(5856, 2513.87915, -1726.26563, 779.61633,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(5856, 2513.85913, -1732.00610, 779.61633,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1506, 2513.85718, -1728.38867, 777.63519,   0.00000, 0.00000, 270.27026);
    CreateDynamicObject(1506, 2513.91235, -1728.40820, 779.47076,   0.00000, 0.00000, 270.26917);
    CreateDynamicObject(970, 2511.74829, -1732.07654, 778.16162,   90.00000, 180.00000, 0.00000);
    CreateDynamicObject(970, 2509.78394, -1732.34351, 778.18854,   90.00000, 168.46301, 281.53702);
    CreateDynamicObject(970, 2513.58301, -1732.32410, 778.08844,   90.00000, 165.52246, 104.47751);
    CreateDynamicObject(970, 2513.57886, -1725.89221, 778.06342,   90.00000, 191.09694, 78.89749);
    CreateDynamicObject(970, 2513.87695, -1726.11377, 778.08276,   90.00000, 179.99451, 0.00000);
    CreateDynamicObject(970, 2509.60205, -1728.10535, 778.76398,   90.00000, 173.27777, 276.71680);
    CreateDynamicObject(1271, 2510.17896, -1723.83093, 778.13721,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1271, 2510.17725, -1725.78589, 778.33740,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1271, 2510.12817, -1724.27319, 777.98706,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(970, 2508.42676, -1724.93640, 778.63782,   90.00000, 179.99451, 0.00000);
    CreateDynamicObject(970, 2508.71680, -1726.80579, 778.18854,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(970, 2508.71167, -1726.37329, 778.18854,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(970, 2513.85938, -1725.26685, 778.61395,   90.00000, 179.99451, 0.00000);
    CreateDynamicObject(970, 2513.40308, -1723.74866, 778.63898,   90.00000, 180.00000, 90.00000);
    CreateDynamicObject(970, 2513.82715, -1725.81848, 778.18854,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1271, 2509.66943, -1727.24377, 779.76306,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2238, 2509.91040, -1729.96411, 779.80548,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2238, 2510.36133, -1726.61914, 778.60480,   90.00000, 0.00000, 90.00000);
    CreateDynamicObject(970, 2511.14307, -1720.63074, 778.78912,   0.00000, 90.00000, 0.00000);
    CreateDynamicObject(970, 2513.45117, -1720.59961, 778.73907,   0.00000, 90.00000, 0.00000);
    CreateDynamicObject(970, 2512.92065, -1720.62817, 780.88885,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(970, 2510.53931, -1721.07861, 778.18854,   0.00000, 90.00000, 269.99997);
    CreateDynamicObject(970, 2510.78442, -1719.45984, 777.96332,   90.00000, 180.00549, 180.00000);
    CreateDynamicObject(970, 2510.71191, -1718.86914, 778.06152,   90.00000, 179.99451, 0.00000);
    CreateDynamicObject(2238, 2513.51245, -1724.43384, 779.59894,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2238, 2513.54004, -1723.88220, 779.57098,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2238, 2513.49609, -1722.42236, 779.68225,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2238, 2513.49609, -1721.91296, 779.62988,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2238, 2513.51782, -1723.09290, 779.81281,   0.00000, 90.00000, 89.99994);
    CreateDynamicObject(2238, 2512.33911, -1725.89258, 779.84576,   0.00000, 90.00000, 0.00000);
    CreateDynamicObject(2238, 2513.22021, -1725.83862, 779.86609,   0.00000, 90.00000, 0.00000);
    CreateDynamicObject(2238, 2510.31909, -1726.63354, 778.82574,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(5856, 2509.52271, -1728.52905, 782.33337,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(5856, 2511.66455, -1731.28613, 780.86902,   0.00000, 90.00000, 89.99994);
    CreateDynamicObject(1749, 2509.79565, -1725.85132, 778.65332,   0.00000, 0.00000, 89.73004);
    CreateDynamicObject(5856, 2511.68237, -1727.16394, 780.86902,   0.00000, 90.00000, 89.99994);
    CreateDynamicObject(5856, 2511.66943, -1723.12781, 780.86902,   0.00000, 90.00000, 89.99988);
    CreateDynamicObject(5856, 2511.67896, -1719.76563, 780.86902,   0.00000, 90.00000, 90.00000);
    CreateDynamicObject(970, 2510.54785, -1721.16504, 780.80316,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(3461, 2510.54175, -1722.73987, 779.88776,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(3461, 2510.53662, -1723.15808, 779.91278,   0.00000, 0.00000, 0.00000);

    // karavan son
    new tamirhane;
    tamirhane = CreateObject(19429, -1296.871459, 2387.373046, 3504.361328, 0.000000, 0.000000, 90.000000, 300.00);
    SetObjectMaterial(tamirhane, 0, 16093, "a51_ext", "block2_high", 0x00000000);
    tamirhane = CreateObject(19429, -1296.922241, 2387.410156, 3504.361328, 0.000000, 0.000000, 180.000000, 300.00);
    SetObjectMaterial(tamirhane, 0, 16093, "a51_ext", "block2_high", 0x00000000);
    tamirhane = CreateObject(19429, -1302.678833, 2387.539550, 3504.361328, 0.000000, 0.000000, 90.000000, 300.00);
    SetObjectMaterial(tamirhane, 0, 16093, "a51_ext", "block2_high", 0x00000000);
    tamirhane = CreateObject(19429, -1302.651245, 2387.410156, 3504.361328, 0.000000, 0.000000, 180.000000, 300.00);
    SetObjectMaterial(tamirhane, 0, 16093, "a51_ext", "block2_high", 0x00000000);
    tamirhane = CreateObject(19429, -1296.922241, 2387.410156, 3507.861328, 0.000000, 0.000000, 180.000000, 300.00);
    SetObjectMaterial(tamirhane, 0, 16093, "a51_ext", "block2_high", 0x00000000);
    tamirhane = CreateObject(19429, -1296.871459, 2387.373046, 3507.861328, 0.000000, 0.000000, 90.000000, 300.00);
    SetObjectMaterial(tamirhane, 0, 16093, "a51_ext", "block2_high", 0x00000000);
    tamirhane = CreateObject(19429, -1302.651245, 2387.410156, 3507.861328, 0.000000, 0.000000, 180.000000, 300.00);
    SetObjectMaterial(tamirhane, 0, 16093, "a51_ext", "block2_high", 0x00000000);
    tamirhane = CreateObject(19429, -1302.678833, 2387.539550, 3507.861328, 0.000000, 0.000000, 90.000000, 300.00);
    SetObjectMaterial(tamirhane, 0, 16093, "a51_ext", "block2_high", 0x00000000);
    tamirhane = CreateObject(19429, -1297.827880, 2387.409912, 3507.008056, 0.000000, 90.000000, 180.000000, 300.00);
    SetObjectMaterial(tamirhane, 0, 16093, "a51_ext", "block2_high", 0x00000000);
    tamirhane = CreateObject(19429, -1301.325317, 2387.410400, 3507.008056, 0.000000, 90.000000, 180.000000, 300.00);
    SetObjectMaterial(tamirhane, 0, 16093, "a51_ext", "block2_high", 0x00000000);
    tamirhane = CreateObject(19448, -1300.676513, 2386.695800, 3508.670166, 0.000000, 0.000000, 90.000000, 300.00);
    SetObjectMaterial(tamirhane, 0, 16093, "a51_ext", "block2_high", 0x00000000);
    tamirhane = CreateObject(19448, -1295.259521, 2386.693847, 3502.684082, 90.000000, 0.000000, 90.000000, 300.00);
    SetObjectMaterial(tamirhane, 0, 16093, "a51_ext", "block2_high", 0x00000000);
    tamirhane = CreateObject(19448, -1304.312500, 2386.693847, 3502.684082, 90.000000, 0.000000, 90.000000, 300.00);
    SetObjectMaterial(tamirhane, 0, 16093, "a51_ext", "block2_high", 0x00000000);
    tamirhane = CreateObject(19375, -1301.829101, 2414.910400, 3509.650390, 0.000000, 64.000000, 0.000000, 300.00);
    SetObjectMaterial(tamirhane, 0, 1413, "break_f_mesh", "meetwalv2", 0x00000000);
    tamirhane = CreateObject(19375, -1301.811279, 2403.154785, 3509.650390, 0.000000, 64.000000, 0.000000, 300.00);
    SetObjectMaterial(tamirhane, 0, 1407, "break_f_w", "CJ_GREENWOOD", 0x00000000);
    tamirhane = CreateObject(19375, -1302.270874, 2392.406738, 3509.650390, 0.000000, 64.000000, 0.000000, 300.00);
    SetObjectMaterial(tamirhane, 0, 1407, "break_f_w", "CJ_GREENWOOD", 0x00000000);
    tamirhane = CreateObject(19375, -1290.446655, 2400.364990, 3510.802734, 0.000000, 64.000000, 0.000000, 300.00);
    SetObjectMaterial(tamirhane, 0, 13659, "8bars", "barrier", 0x00000000);
    tamirhane = CreateObject(19375, -1290.673339, 2409.774902, 3510.802734, 0.000000, 64.000000, 0.000000, 300.00);
    SetObjectMaterial(tamirhane, 0, 13659, "8bars", "barrier", 0x00000000);
    tamirhane = CreateObject(19375, -1287.307495, 2412.853759, 3509.279052, 0.000000, -64.000000, 0.000000, 300.00);
    SetObjectMaterial(tamirhane, 0, 13659, "8bars", "barrier", 0x00000000);
    tamirhane = CreateObject(19375, -1300.103149, 2410.754394, 3510.937500, 0.000000, -64.000000, 0.000000, 300.00);
    SetObjectMaterial(tamirhane, 0, 13659, "8bars", "barrier", 0x00000000);
    tamirhane = CreateObject(19817, -1299.421386, 2416.161132, 3501.932128, 0.000000, 0.000000, 90.000000, 300.00);
    SetObjectMaterial(tamirhane, 0, 1717, "cj_tv", "CJ_STEEL", 0x00000000);
    tamirhane = CreateObject(19817, -1299.452514, 2407.774902, 3501.932128, 0.000000, 0.000000, 90.000000, 300.00);
    SetObjectMaterial(tamirhane, 0, 1717, "cj_tv", "CJ_STEEL", 0x00000000);
    tamirhane = CreateObject(19429, -1297.369628, 2407.735839, 3503.044921, 0.000000, -67.000000, 0.000000, 300.00);
    SetObjectMaterial(tamirhane, 0, 960, "cj_crate_will", "CJ_FLIGHT_CASE", 0x00000000);
    tamirhane = CreateObject(19429, -1300.708496, 2407.711181, 3503.725585, 0.000000, 90.000000, 0.000000, 300.00);
    SetObjectMaterial(tamirhane, 0, 960, "cj_crate_will", "CJ_FLIGHT_CASE", 0x00000000);
    tamirhane = CreateObject(19429, -1303.904541, 2407.711181, 3503.723632, 0.000000, 90.000000, 0.000000, 300.00);
    SetObjectMaterial(tamirhane, 0, 960, "cj_crate_will", "CJ_FLIGHT_CASE", 0x00000000);
    tamirhane = CreateObject(19429, -1297.337524, 2416.138671, 3503.044921, 0.000000, -67.000000, 0.000000, 300.00);
    SetObjectMaterial(tamirhane, 0, 960, "cj_crate_will", "CJ_FLIGHT_CASE", 0x00000000);
    tamirhane = CreateObject(19429, -1300.663085, 2416.213867, 3503.725585, 0.000000, 90.000000, 0.000000, 300.00);
    SetObjectMaterial(tamirhane, 0, 960, "cj_crate_will", "CJ_FLIGHT_CASE", 0x00000000);
    tamirhane = CreateObject(19429, -1304.001342, 2416.331054, 3503.723632, 0.000000, 90.000000, 0.000000, 300.00);
    SetObjectMaterial(tamirhane, 0, 960, "cj_crate_will", "CJ_FLIGHT_CASE", 0x00000000);
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    tamirhane = CreateObject(4866, -1332.316040, 2404.799072, 3502.686035, 0.000000, 0.000000, 0.000000, 300.00);
    tamirhane = CreateObject(11389, -1295.280151, 2404.195800, 3505.832519, 0.000000, 0.000000, 0.000000, 300.00);
    tamirhane = CreateObject(11390, -1295.501586, 2404.318115, 3507.093017, 0.000000, 0.000000, 0.000000, 300.00);
    tamirhane = CreateObject(11393, -1290.663818, 2398.767822, 3504.201660, 0.000000, 0.000000, 0.000000, 300.00);
    tamirhane = CreateObject(11360, -1286.455932, 2407.806396, 3504.798339, 0.000000, 0.000000, 180.000000, 300.00);
    tamirhane = CreateObject(11360, -1286.455932, 2416.288330, 3504.798339, 0.000000, 0.000000, 180.000000, 300.00);
    tamirhane = CreateObject(11388, -1295.208129, 2404.219482, 3509.401611, 0.000000, 0.000000, 0.000000, 300.00);
    tamirhane = CreateObject(5532, -1300.680786, 2372.776855, 3510.739013, 0.000000, 0.000000, 90.000000, 300.00);
    tamirhane = CreateObject(19429, -1304.824340, 2387.410400, 3507.008056, 0.000000, 90.000000, 180.000000, 300.00);
    tamirhane = CreateObject(19375, -1304.321655, 2392.243652, 3503.031494, 0.000000, 0.000000, 0.000000, 300.00);
    tamirhane = CreateObject(19375, -1304.321655, 2401.918701, 3503.031494, 0.000000, 0.000000, 0.000000, 300.00);
    tamirhane = CreateObject(19375, -1304.321655, 2411.458740, 3503.031494, 0.000000, 0.000000, 0.000000, 300.00);
    tamirhane = CreateObject(19375, -1304.321655, 2418.073730, 3503.031494, 0.000000, 0.000000, 0.000000, 300.00);
    tamirhane = CreateObject(19375, -1299.309570, 2420.294677, 3503.031494, 0.000000, 0.000000, 90.000000, 300.00);
    tamirhane = CreateObject(19375, -1289.388549, 2420.294677, 3503.031494, 0.000000, 0.000000, 90.000000, 300.00);
    tamirhane = CreateObject(19375, -1286.297607, 2415.322998, 3503.031494, 0.000000, 0.000000, 0.000000, 300.00);
    tamirhane = CreateObject(19375, -1286.297607, 2405.636962, 3503.031494, 0.000000, 0.000000, 0.000000, 300.00);
    tamirhane = CreateObject(19375, -1286.297607, 2395.950927, 3503.031494, 0.000000, 0.000000, 0.000000, 300.00);
    tamirhane = CreateObject(19375, -1286.297607, 2391.274902, 3503.031494, 0.000000, 0.000000, 0.000000, 300.00);
    tamirhane = CreateObject(19375, -1292.150268, 2388.094482, 3503.031494, 0.000000, 0.000000, 90.000000, 300.00);
    tamirhane = CreateObject(19375, -1285.086059, 2388.069824, 3503.031494, 0.000000, 0.000000, 90.000000, 300.00);
    tamirhane = CreateObject(1649, -1294.233886, 2393.608642, 3504.253173, 0.000000, 0.000000, 90.000000, 300.00);
    tamirhane = CreateObject(1649, -1294.231323, 2389.170410, 3504.253173, 0.000000, 0.000000, 90.000000, 300.00);
    tamirhane = CreateObject(1649, -1288.310180, 2398.544189, 3504.253173, 0.000000, 0.000000, 0.000000, 300.00);
    tamirhane = CreateObject(1649, -1291.985229, 2398.545898, 3504.253173, 0.000000, 0.000000, 0.000000, 300.00);
    tamirhane = CreateObject(1499, -1294.183105, 2397.393310, 3502.687500, 0.000000, 0.000000, -90.000000, 300.00);
    tamirhane = CreateObject(19429, -1303.627441, 2388.106933, 3504.361328, 0.000000, 0.000000, 90.000000, 300.00);
    tamirhane = CreateObject(1428, -1294.056518, 2397.851806, 3504.178222, 20.879999, -5.220008, -90.120002, 300.00);
    tamirhane = CreateObject(1428, -1293.689086, 2398.385009, 3504.178222, 14.219960, -2.220010, 4.079998, 300.00);
    tamirhane = CreateObject(19375, -1288.942504, 2388.812011, 3501.071289, 0.000000, 0.000000, 90.000000, 300.00);
    tamirhane = CreateObject(19903, -1299.861450, 2412.897949, 3502.668457, 0.000000, 0.000000, 48.659999, 300.00);
    tamirhane = CreateObject(19898, -1295.733276, 2409.828369, 3502.699462, 0.000000, 0.000000, 0.000000, 300.00);
    tamirhane = CreateObject(19898, -1295.309570, 2412.129394, 3502.699462, 0.000000, 0.000000, -72.900009, 300.00);
    tamirhane = CreateObject(19898, -1298.813964, 2413.849365, 3502.699462, 0.000000, 0.000000, -165.480041, 300.00);
    tamirhane = CreateObject(19899, -1292.169921, 2419.662109, 3502.657470, 0.000000, 0.000000, -90.000000, 300.00);
    tamirhane = CreateObject(19900, -1302.822265, 2399.344482, 3502.672119, 0.000000, 0.000000, 117.539993, 300.00);
    tamirhane = CreateObject(19900, -1301.666381, 2402.338867, 3502.672119, 0.000000, 0.000000, 73.800003, 300.00);
    tamirhane = CreateObject(19903, -1290.197631, 2419.395507, 3502.668457, 0.000000, 0.000000, -103.199996, 300.00);
    tamirhane = CreateObject(19903, -1299.989624, 2404.576904, 3502.668457, 0.000000, 0.000000, 9.960020, 300.00);
    tamirhane = CreateObject(11393, -1303.988403, 2395.346435, 3504.206542, 0.000000, 0.000000, -90.000000, 300.00);
    tamirhane = CreateObject(19900, -1303.430053, 2394.345214, 3502.672119, 0.000000, 0.000000, 117.539993, 300.00);
    tamirhane = CreateObject(19899, -1303.705200, 2411.730957, 3502.657470, 0.000000, 0.000000, 0.000000, 300.00);

    //pdgaraj
    CreateObject(7244, -1744.96375, 2582.57520, 20.05300,   0.00000, 0.00000, 0.00000);
    CreateObject(7184, -1762.53455, 2610.51953, 31.27180,   0.00000, 0.00000, 90.00000);
    CreateObject(7010, -1670.09131, 2551.69312, 30.76390,   0.00000, 0.00000, 0.00000);
    CreateObject(16773, -1719.24829, 2617.89893, 24.57590,   0.00000, 0.00000, 90.00000);
    CreateObject(16773, -1693.78564, 2566.13184, 23.86790,   0.00000, 0.00000, 90.00000);

    //lsfd
    new retrolsfd;
    retrolsfd = CreateDynamicObject(19124, 1226.553833, -1271.651611, 13.026000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(retrolsfd, 1, 19467, "speed_bumps", "speed_bump01", 0x00000000);
    retrolsfd = CreateDynamicObject(19124, 1239.384033, -1271.285156, 13.026000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(retrolsfd, 1, 19467, "speed_bumps", "speed_bump01", 0x00000000);
    retrolsfd = CreateDynamicObject(19124, 1243.992553, -1271.256225, 13.036000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(retrolsfd, 1, 19467, "speed_bumps", "speed_bump01", 0x00000000);
    retrolsfd = CreateDynamicObject(19124, 1256.638793, -1271.418334, 13.036000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(retrolsfd, 1, 19467, "speed_bumps", "speed_bump01", 0x00000000);
    retrolsfd = CreateDynamicObject(19124, 1269.482299, -1271.370239, 13.038000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(retrolsfd, 1, 19467, "speed_bumps", "speed_bump01", 0x00000000);
    retrolsfd = CreateDynamicObject(19124, 1281.869018, -1271.677490, 13.036000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(retrolsfd, 1, 19467, "speed_bumps", "speed_bump01", 0x00000000);
    retrolsfd = CreateDynamicObject(1294, 1269.542480, -1270.967529, 13.300000, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
    retrolsfd = CreateDynamicObject(1294, 1256.781250, -1270.967529, 13.300000, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
    retrolsfd = CreateDynamicObject(-2001, 1254.367065, -1251.024902, 23.262805, 0.000000, 0.000000, 90.100112, -1, -1, -1, 300.00, 300.00);

    // santa maria pier
    CreateDynamicObject(3361, 142.38570, -1841.19080, 1.29710,   0.00000, 0.00000, 180.00000);
    CreateDynamicObject(1571, 143.76195, -1856.15430, 1.99640,   0.00000, 0.00000, -123.50000);
    CreateDynamicObject(1432, 138.64984, -1847.70007, 0.77550,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1432, 141.02174, -1851.76379, 0.77550,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(17055, 142.49921, -1825.17200, 0.46200,   0.00000, 0.00000, 1.94200);
    CreateDynamicObject(1244, 143.16530, -1821.76453, 1.46170,   0.00000, 0.00000, -90.00000);
    CreateDynamicObject(1244, 137.28810, -1825.61023, 1.46170,   0.00000, 0.00000, 180.00000);
    CreateDynamicObject(3406, 131.67841, -1841.18030, -1.40800,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(3406, 122.87795, -1841.18494, -1.40800,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(3406, 114.07840, -1841.18494, -1.40800,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(3406, 110.09300, -1854.86218, -1.40800,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(3406, 92.54530, -1854.86255, -1.40800,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(3406, 92.54530, -1846.06201, -1.40800,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(3406, 92.54530, -1835.26294, -1.40800,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(3406, 110.09300, -1846.06250, -1.40800,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(3406, 105.27850, -1841.18494, -1.40800,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(3406, 110.09300, -1826.46643, -1.40800,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(3406, 110.09300, -1835.26355, -1.40800,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(1650, 136.67070, -1849.78442, 0.41110,   0.00000, 0.00000, 180.00000);
    CreateDynamicObject(1472, 147.36270, -1841.21960, 2.95650,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(1432, 142.97182, -1847.27380, 0.77550,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1461, 141.48199, -1842.41235, 1.46870,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1461, 141.48500, -1839.95801, 1.46870,   0.00000, 0.00000, 180.00000);
    CreateDynamicObject(10834, 287.88461, -1843.91138, -4.37000,   0.00000, 0.00000, 180.00000);
    CreateDynamicObject(10827, 178.45171, -1821.77209, -37.04040,   0.00000, 0.00000, -90.00000);
    CreateDynamicObject(10827, 182.95570, -1821.77612, -30.08520,   0.00000, 0.00000, -90.00000);
    CreateDynamicObject(3406, 92.54530, -1826.46362, -1.40800,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(3406, 125.72490, -1846.06262, -1.40800,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(3406, 125.71960, -1854.86145, -1.40800,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(3406, 125.72490, -1835.26428, -1.40800,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(3406, 125.72490, -1826.46643, -1.40800,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(3406, 96.47850, -1841.18494, -1.40800,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1231, 135.60930, -1840.34363, 1.48600,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1231, 124.81280, -1840.17896, 1.48400,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1231, 109.18140, -1840.17896, 1.48400,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1231, 91.63320, -1840.17896, 1.48400,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1481, 144.70663, -1856.88647, 1.68390,   0.00000, 0.00000, -123.50000);
    CreateDynamicObject(2417, 145.29260, -1855.92383, 0.98230,   0.00000, 0.00000, -122.88000);

    SunucuBilgi[CurrentHour] = ReturnHour();
    SunucuBilgi[CurrentWeather] = 0;

    SetWeather(SunucuBilgi[CurrentWeather]);
    SetWorldTime(SunucuBilgi[CurrentHour]);

    Streamer_TickRate(50); // 30
    Streamer_SetVisibleItems(STREAMER_TYPE_OBJECT, 1000); // 900

    return 1;
}

public OnGameModeExit()
{
    foreach(new i : Player) if(IsPlayerConnected(i) && PlayerInfo[i][pLogged])
        SaveCharacter(i);

    foreach(new v : Vehicles) if(IsValidVehicle(v) && !VehicleInfo[v][vTemporary])
        SaveVehicle(v);

    foreach(new h : Houses) if(HouseInfo[h][hExists])
        SaveHouse(h);

    foreach(new b : Buildings) if(BuildingInfo[b][bExists])
        SaveBuilding(b);

    foreach(new f : Factions) if(FactionInfo[f][fExists])
        SaveFaction(f);

    foreach(new c : Companies) if(CompanyInfo[c][cReference])
        SaveCompany(c);

    foreach(new l : Lab) if(LabInfo[l][lExists])
        SaveLab(l);

    foreach(new uid : EkilenUyusturucular) if(EUBilgi[uid][euStatus])
        SaveEU(uid);

    foreach(new i : Ihbarlar) if(IhbarInfo[i][ihbarExists])
        IhbarKaydet(i);

    foreach(new i : Calintilar) if(CalintiInfo[i][caExists])
        CalintiKaydet(i);

    foreach(new i : CopKutulari) if(CopKutusuInfo[i][copExists])
        CopKutusuKaydet(i);
    Taxes_Update();

    mysql_close(ourConnection);
    return 1;
}

public OnQueryError(errorid, const error[], const callback[], const query[], MySQL:handle)
{
    printf("%s\n%s", query, error);

   // return SendAdminAlert(false, COLOR_ERROR, "MYSQL HATASI: %s - %s", query, error); MYSQL HATALARI GELMESÝ KAPATTIK.
}

public OnPlayerGiveDamage(playerid, damagedid, Float:amount, weaponid, bodypart)
{
    if(weaponid >= 22 && Faction_GetType(PlayerInfo[playerid][pFaction]) == POLICE && PlayerInfo[playerid][pPlastikMermi] && !PlayerInfo[damagedid][pPlastikMermiDustu])
    {
        ApplyAnimation(damagedid, "CRACK", "crckdeth4", 4.0, 0, 0, 0, 1, 0, 1);
        PlayerInfo[damagedid][pPlastikMermiDustu] = true;
        new vucut[20];
        switch(bodypart) {
            case 0 .. 3: {
                format(vucut, 20, "Gövde");
            }
            case 4: {
                format(vucut, 20, "Kasýk");
            }
            case 5: {
                format(vucut, 20, "Sol kol");
            }
            case 6: {
                format(vucut, 20, "Sað kol");
            }
            case 7: {
                format(vucut, 20, "Sol bacak");
            }
            case 8: {
                format(vucut, 20, "Sað bacak");
            }
            case 9: {
                format(vucut, 20, "Kafa");
            }
            default: {
                format(vucut, 20, "Gövde");
            }
        }
        SunucuMesaji(playerid, "%s (%d) kiþisini plastik mermi ile vurdunuz. Bölge: %s", ReturnRoleplayName(damagedid), damagedid, vucut);
        SunucuMesaji(damagedid, "%s (%d) kiþisi tarafýndan plastik mermi ile vuruldunuz. Bölge: %s", ReturnRoleplayName(playerid), playerid, vucut);
        new Float:pHP;
        GetPlayerHealth(damagedid, pHP);
        return AC_SetPlayerHealth(damagedid, pHP + amount);
    }
    else if(PlayerInfo[playerid][pPlastikMermi]) {
        new Float:pHP;
        GetPlayerHealth(damagedid, pHP);
        return AC_SetPlayerHealth(damagedid, pHP + amount);
    }
    else if((weaponid == 0 || weaponid == 3) && (Faction_GetType(PlayerInfo[playerid][pFaction]) == POLICE || Faction_GetType(PlayerInfo[playerid][pFaction]) == GOVERNMENT) && PlayerInfo[playerid][pFactionDuty] && PlayerInfo[playerid][pTackleMode] && !PlayerInfo[damagedid][pDeath])
    {
        new Float:playerHealth;
        AC_GetPlayerHealth(damagedid, playerHealth);
        if(PlayerInfo[playerid][pTackleMode] && !PlayerInfo[damagedid][EtkisizEleman])
        {
            if(!SetPlayerArmedWeapon(playerid, 0) && !SetPlayerArmedWeapon(playerid, 3)) return 1;
            BasariMesaji(damagedid, "%s (%d) adlý memur tarafýndan yere düþürüldün.", ReturnRoleplayName(playerid), playerid);
            SendFormattedMessage(playerid, COLOR_YELLOW, "%s (%d) adlý þahsý yere düþürdün.", ReturnRoleplayName(damagedid), damagedid);
            PlayerMEPlayer(playerid, damagedid, "kiþisini yere düþürdü");
            PlayerInfo[damagedid][pStunned] = 10;
            PlayerInfo[damagedid][EtkisizEleman] = true;
            GameTextForPlayer(damagedid, "~r~ETKISIZ HALDESIN.", 2000, 3);
            ApplyAnimation(damagedid, "CRACK", "crckdeth4", 4.0, 0, 0, 0, 1, 0, 1);
            ApplyAnimationEx(playerid, "PED", "KO_shot_stom", 4.0, 0, 1, 1, 1, 0, 1);
            PlayerInfo[playerid][pTackleMode] = false;
        }
    }
    return 0;
}

public OnPlayerShootDynamicObject(playerid, weaponid, objectid, Float:x, Float:y, Float:z) {
    if(PlayerInfo[playerid][pFactionDuty] && (Faction_GetType(PlayerInfo[playerid][pFaction]) == POLICE || Faction_GetType(PlayerInfo[playerid][pFaction]) == GOVERNMENT) && weaponid == 25) {
        if(IsValidDynamicObject(objectid)) {
            new tmpModel = Streamer_GetIntData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_MODEL_ID);
            if(OpenableDoor(tmpModel) == -1) return 1;
            new Float:oRotX, Float:oRotY, Float:oRotZ;
            GetDynamicObjectRot(objectid, oRotX, oRotY, oRotZ);
            Streamer_GetArrayData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID, g_obj, siz_g_obj);
            if(g_obj[co_opened] == 1) return 1;
            g_obj[co_opened] = 1;
            oRotZ = oRotZ - 90.0;
            SetDynamicObjectRot(objectid, oRotX, oRotY, oRotZ);
            Streamer_SetArrayData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID, g_obj, siz_g_obj);
            PlayerAME(playerid, "breaching shotgun ile kapýyý açar.");
        }
    }
    return 1;
}

public OnPlayerWeaponShot(playerid, weaponid, hittype, hitid, Float:fX, Float:fY, Float:fZ)
{
    if(PlayerInfo[playerid][pDeath] != 0)
        return SendAdminAlert(false, COLOR_ADMIN, "[BUG ABUSE] %s yaralýyken ateþ etmeyi deniyor olabilir. [Silah: %s]", ReturnRoleplayName(playerid), GetWeaponNameEx(weaponid));
        
    if(!PlayerInfo[playerid][pFactionDuty] && GetTickCount() - PlayerInfo[playerid][pAtesTick] > 10000)
    {
        if(/*PlayerInfo[playerid][pGuvenlik] ||*/PlayerInfo[playerid][pGuvenlikLisansi] || (gettime() < PlayerInfo[playerid][pWeaponsLicense][1]))
        {
            if(weaponid == 22 || weaponid == 24 || weaponid == 25 || weaponid == 33)
            {
                if(IsPlayerConnected(hitid))
                {
                    SendAdminAlert(false, COLOR_YELLOW, "AdmWarn: %s adlý lisans sahibi %s adlý kiþiye ateþ açtý. (Silah: %s)", ReturnRoleplayName(playerid), ReturnRoleplayName(hitid), GetWeaponNameEx(weaponid));
                    printf("[LALERT] %s kisisi %s kisisine ates acti. Silah: %s [%s]", ReturnRoleplayName(playerid), ReturnRoleplayName(hitid), GetWeaponNameEx(weaponid), ReturnDate());
                }
                else
                {
                    SendAdminAlert(false, COLOR_YELLOW, "AdmWarn: %s adlý lisans sahibi %s model silahla ateþ açtý.", ReturnRoleplayName(playerid), GetWeaponNameEx(weaponid));
                    printf("[LALERT] %s adli oyuncu ates acti. Silah: %s [%s]", ReturnRoleplayName(playerid), GetWeaponNameEx(weaponid), ReturnDate());
                }
                PlayerInfo[playerid][pAtesTick] = GetTickCount();
            }
        }
    }
    if(IsPlayerInAnyVehicle(playerid))
    {
        if(GetPlayerCameraMode(playerid) == 55)
        {
            if(AC_GetPlayerAmmo(playerid) == 1)
            {
                if(AC_PlayerHasWeapon(playerid, weaponid))
                {
                    AC_RemovePlayerWeapon(playerid, weaponid);
                }
                else return SendAdminAlert(true, COLOR_ADMIN, "[SA-AC] %s silah hilesi kullanýyor olabilir. [Silah: %s]", ReturnRoleplayName(playerid), GetWeaponNameEx(weaponid));
            }
        }
        else return 0;
    }
    if(hittype == BULLET_HIT_TYPE_PLAYER && PlayerInfo[hitid][pDeath] == 1 && AtesliSilah(weaponid))
    {
        if(ExecuteShots[hitid] >= 1)
        {
            LogYaz(playerid, "Aðýr Yaraladý", hitid);
            PlayerInfo[hitid][pDeath] = 3;
            SunucuMesajiC(hitid, "Aðýr yaralýsýnýz, süre dolduðunda '/tedaviol' ile ayaða kalkabilirsiniz.");
            SunucuMesajiC(hitid, "(Ýkinci Tercih) '/kabulet ck' komutu ile karakterinizi yasaklatabilirsiniz.");
            new xyazi[64];
            format(xyazi, sizeof xyazi, "(( BU KARAKTER ÖLÜ. [/hasarlar %d] ))", hitid);
            PlayerInfo[hitid][pAgirYarali] = 1;
            PlayerInfo[hitid][pTedaviSure] = 360;
            PlayerTextDrawShow(hitid, PlayerInfo[hitid][pTextdraws][0]);
            UpdateDynamic3DTextLabelText(PlayerInfo[hitid][pNameTag], COLOR_ADMIN, xyazi);
            ApplyAnimation(hitid, "WUZI", "CS_Dead_Guy", 4.1, 0, 1, 1, 1, 0, 1);
            return 0;
        }
        else if(ExecuteShots[hitid] >= 0 && ExecuteShots[hitid] < 1)
        {
            ExecuteShots[hitid]++;
            return 0;
        }
        else return 0;
    }
    else if(hittype == BULLET_HIT_TYPE_PLAYER && PlayerInfo[hitid][pDeath] >= 1) return 0;
    else
    {
        if(!IsPlayerInAnyVehicle(playerid) && hittype == BULLET_HIT_TYPE_PLAYER && !IsPlayerInAnyVehicle(hitid) && GetPlayerSurfingVehicleID(playerid) == INVALID_VEHICLE_ID && GetPlayerSurfingVehicleID(hitid) == INVALID_VEHICLE_ID && NetStats_PacketLossPercent(hitid) < 0.7 && NetStats_PacketLossPercent(playerid) < 0.7)
        {
            new Float:g_fOriginX, Float:g_fOriginY, Float:g_fOriginZ;
            new Float:g_fHitPosX, Float:g_fHitPosY, Float:g_fHitPosZ;

            GetPlayerLastShotVectors(playerid, g_fOriginX, g_fOriginY, g_fOriginZ, g_fHitPosX, g_fHitPosY, g_fHitPosZ);

            if(IsPlayerInRangeOfPoint(hitid, 3.0, g_fHitPosX, g_fHitPosY, g_fHitPosZ) == 0)
                AC_Detect(playerid, AC_SILENTAIM_CODE);
        }

        if(weaponid == 23 && PlayerInfo[playerid][pTaser])
            ApplyAnimation (playerid , "PYTHON" , "python_reload" , 4.0 , 0 , 0 , 0 , 0 , 500);

        if(GetPlayerWeaponState(playerid) == WEAPONSTATE_LAST_BULLET && AC_GetPlayerAmmo(playerid) == 1 && AC_PlayerHasWeapon(playerid, weaponid))
        {
            LogYaz(playerid, "SilahiSilindi", -1, weaponid);
            AC_RemovePlayerWeapon(playerid, weaponid);
        }
        if(hittype == BULLET_HIT_TYPE_VEHICLE) Vehicle_DegraseComponentHP(hitid);
    }
    return 1;
}

public OnPlayerTakeDamage(playerid, issuerid, Float: amount, weaponid, bodypart)
{
    if(issuerid != INVALID_PLAYER_ID && weaponid >= 22 && Faction_GetType(PlayerInfo[issuerid][pFaction]) == POLICE && PlayerInfo[issuerid][pPlastikMermi])return 1;
    if(PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] > SUPPORTER)return 1;
    if(weaponid == 51 || weaponid == 49 || weaponid == 54) return 1;
    new Float:weapon_damage, Float:hp, Float:ap,Float:px, Float:py,Float:pz, Float:azalt, Float:playerHealth, Float:Kalan, xweapons[12], xammo[12];
    AC_GetPlayerArmour(playerid, ap);
    AC_GetPlayerHealth(playerid, hp);
    if(PlayerInfo[playerid][pDeath] != 0) return 0;
    if(issuerid != INVALID_PLAYER_ID)
    {
        if((Faction_GetType(PlayerInfo[issuerid][pFaction]) == POLICE || Faction_GetType(PlayerInfo[issuerid][pFaction]) == GOVERNMENT) && PlayerInfo[issuerid][pFactionDuty] && (PlayerInfo[issuerid][pTaser]  || PlayerInfo[issuerid][pBeanBag]) && !PlayerInfo[playerid][pDeath])
        {
            AC_GetPlayerHealth(playerid, playerHealth);

            if(ProxDetectorS(10.0, issuerid, playerid) && PlayerInfo[issuerid][pTaser] && weaponid == 23)
            {
                if(!SetPlayerArmedWeapon(playerid, 23)) return 1;
                BasariMesaji(playerid, "%s (%d) tarafýndan taser silahýyla þoklandýn. (Ölümcül etki/Kalýcý hasar yok.)", ReturnRoleplayName(issuerid, true), issuerid);
                SendFormattedMessage(issuerid, COLOR_YELLOW, "Taser silahýnla %s (%d) kiþisini þokladýn. (10 saniye hareketsiz kalacak)", ReturnRoleplayName(playerid), playerid);
                format(stringx, sizeof stringx, "taser silahýný %s'a doðrultur ve ateþler.", ReturnRoleplayName(playerid));
                PlayerME(issuerid, stringx);
                PlayerInfo[playerid][pStunned] = 10;
                PlayerInfo[playerid][EtkisizEleman] = true;
                GameTextForPlayer(playerid, "~r~ETKISIZ HALDESIN.", 2000, 3);
                if(IsPlayerInAnyVehicle(playerid))RemovePlayerFromVehicle(playerid);
                ApplyAnimation(playerid, "CRACK", "crckdeth4", 4.0, 0, 0, 0, 1, 0, 1);
                return 0;
            }
            else if(ProxDetectorS(30.0, issuerid, playerid) && PlayerInfo[issuerid][pBeanBag] && weaponid == 25)
            {
                if(!SetPlayerArmedWeapon(playerid, 25)) return 1;
                BasariMesaji(playerid, "%s (%d) tarafýndan Beanbag ile etkisiz hale getirildin. (Ölümcül etki/Kalýcý hasar yok.)", ReturnRoleplayName(issuerid, true), issuerid);
                SendFormattedMessage(issuerid, COLOR_YELLOW, "Beanbag tüfeðiyle %s (%d) adlý kiþiyi etkisiz hale getirdin. (15 saniye hareketsiz kalacak)", ReturnRoleplayName(playerid), playerid);
                format(stringx, sizeof stringx, "Beanbag tüfeðini %s'a doðrultur ve ateþler.", ReturnRoleplayName(playerid));
                PlayerME(issuerid, stringx);
                PlayerInfo[playerid][pStunned] = 15;
                GameTextForPlayer(playerid, "~r~ETKISIZ HALDESIN.", 2000, 3);
                PlayerInfo[playerid][EtkisizEleman] = true;
                if(IsPlayerInAnyVehicle(playerid))RemovePlayerFromVehicle(playerid);
                ApplyAnimation(playerid, "CRACK", "crckdeth4", 4.0, 0, 0, 0, 1, 0, 1);
//              weapon_damage = (weaponid == 23) ? 2 : 4; taserhpjamy
                return 0;
            }
        }

        if(AC_PlayerHasWeapon(issuerid, weaponid) <= 0)
        {
            AC_SetPlayerHealth(playerid, hp);
            AC_SetPlayerArmour(playerid, ap);
        }
        else switch(weaponid)
        {
            case 0: weapon_damage = 2.0;
            case 1: weapon_damage = 9.0;
            case 2: weapon_damage = 9.0;
            case 3: weapon_damage = 12.0;
            case 4: weapon_damage = 20.0;
            case 5: weapon_damage = 8.0;
            case 6: weapon_damage = 11.0;
            case 7: weapon_damage = 9.0;
            case 8: weapon_damage = 29.0;
            case 9: weapon_damage = 0.0;
            case 10: weapon_damage = 2.5;
            case 11: weapon_damage = 2.5;
            case 12: weapon_damage = 2.5;
            case 13: weapon_damage = 2.5;
            case 14: weapon_damage = 0.0;
            case 15: weapon_damage = 5.0;
            case 22: { // 9mm
                if(bodypart == 3) weapon_damage = 27; // gövde
                else if(bodypart == 4) weapon_damage = 25; // kasýk
                else if(bodypart == 5 || bodypart == 6) weapon_damage = 22; // kol
                else if(bodypart == 7 || bodypart == 8) weapon_damage = 24; // bacak
                else if(bodypart == 9) weapon_damage = 35; // kafa
                else weapon_damage = 27;
            }
            case 23: { // silenced
                if(!PlayerInfo[issuerid][pTaser]) {
                    if(bodypart == 3) weapon_damage = 24; // gövde
                    else if(bodypart == 4) weapon_damage = 22; // kasýk
                    else if(bodypart == 5 || bodypart == 6) weapon_damage = 20; // kol
                    else if(bodypart == 7 || bodypart == 8) weapon_damage = 18; // bacak
                    else if(bodypart == 9) weapon_damage = 37; // kafa
                    else weapon_damage = 30;
                }
            }
            case 24: { // deagle
                if(bodypart == 3) weapon_damage = 47; // gövde
                else if(bodypart == 4) weapon_damage = 47; // kasýk
                else if(bodypart == 5 || bodypart == 6) weapon_damage = 41; // kol
                else if(bodypart == 7 || bodypart == 8) weapon_damage = 41; // bacak
                else if(bodypart == 9) weapon_damage = 57; // kafa
                else weapon_damage = 41;
            }
            case 26: { // sawnoff
                GetPlayerPos(issuerid, px, py, pz);
                if(IsPlayerInRangeOfPoint(playerid, 2.5, px, py, pz)) azalt = 0.0;
                else if(IsPlayerInRangeOfPoint(playerid, 5.0, px, py, pz)) azalt = 2.5;
                else if(IsPlayerInRangeOfPoint(playerid, 7.5, px, py, pz)) azalt = 4.0;
                else if(IsPlayerInRangeOfPoint(playerid, 10.0, px, py, pz)) azalt = 5.5;
                else if(IsPlayerInRangeOfPoint(playerid, 12.5, px, py, pz)) azalt = 7.0;
                else if(IsPlayerInRangeOfPoint(playerid, 15.0, px, py, pz)) azalt = 8.5;
                else if(IsPlayerInRangeOfPoint(playerid, 17.5, px, py, pz)) azalt = 10.0;
                else if(IsPlayerInRangeOfPoint(playerid, 20.0, px, py, pz)) azalt = 11.5;
                else if(IsPlayerInRangeOfPoint(playerid, 22.5, px, py, pz)) azalt = 13.0;
                else azalt = 15.0;
                if(bodypart == 3) weapon_damage = 40; // gövde
                else if(bodypart == 4) weapon_damage = 30; // kasýk
                else if(bodypart == 5 || bodypart == 6) weapon_damage = 20; // kol
                else if(bodypart == 7 || bodypart == 8) weapon_damage = 30; // bacak
                else if(bodypart == 9) weapon_damage = 50; // kafa
                else weapon_damage = 28;
                weapon_damage -= azalt;
            }
            case 29: { // mp5
                if(bodypart == 3) weapon_damage = 30; // gövde
                else if(bodypart == 4) weapon_damage = 27; // kasýk
                else if(bodypart == 5 || bodypart == 6) weapon_damage = 24; // kol
                else if(bodypart == 7 || bodypart == 8) weapon_damage = 24; // bacak
                else if(bodypart == 9) weapon_damage = 45; // kafa
                else weapon_damage = 27;
            }
            case 28: { // uzi
                if(bodypart == 3) weapon_damage = 30; // gövde
                else if(bodypart == 4) weapon_damage = 25; // kasýk
                else if(bodypart == 5 || bodypart == 6) weapon_damage = 23; // kol
                else if(bodypart == 7 || bodypart == 8) weapon_damage = 23; // bacak
                else if(bodypart == 9) weapon_damage = 36; // kafa
                else weapon_damage = 25;
            }
            case 25: { // shotgun
                if(!PlayerInfo[issuerid][pBeanBag]) {
                    GetPlayerPos(issuerid, px, py, pz);
                    if(IsPlayerInRangeOfPoint(playerid, 2.5, px, py, pz)) azalt = 0.0;
                    else if(IsPlayerInRangeOfPoint(playerid, 5.0, px, py, pz)) azalt = 8.5;
                    else if(IsPlayerInRangeOfPoint(playerid, 7.5, px, py, pz)) azalt = 11.0;
                    else if(IsPlayerInRangeOfPoint(playerid, 10.0, px, py, pz)) azalt = 13.5;
                    else if(IsPlayerInRangeOfPoint(playerid, 12.5, px, py, pz)) azalt = 16.0;
                    else if(IsPlayerInRangeOfPoint(playerid, 15.0, px, py, pz)) azalt = 18.5;
                    else if(IsPlayerInRangeOfPoint(playerid, 17.5, px, py, pz)) azalt = 21.0;
                    else if(IsPlayerInRangeOfPoint(playerid, 20.0, px, py, pz)) azalt = 24.5;
                    else if(IsPlayerInRangeOfPoint(playerid, 22.5, px, py, pz)) azalt = 26.0;
                    else if(IsPlayerInRangeOfPoint(playerid, 25.0, px, py, pz)) azalt = 28.5;
                    else if(IsPlayerInRangeOfPoint(playerid, 27.5, px, py, pz)) azalt = 31.0;
                    else if(IsPlayerInRangeOfPoint(playerid, 30.0, px, py, pz)) azalt = 33.5;
                    else azalt = 39.0;
                    if(bodypart == 3) weapon_damage = 57; // gövde
                    else if(bodypart == 4) weapon_damage = 66; // kasýk
                    else if(bodypart == 5 || bodypart == 6) weapon_damage = 43; // kol
                    else if(bodypart == 7 || bodypart == 8) weapon_damage = 52; // bacak
                    else if(bodypart == 9) weapon_damage = 85; // kafa
                    else weapon_damage = 55;
                    weapon_damage -= azalt;
                }
            }
            case 32: { // tec9
                if(bodypart == 3) weapon_damage = 28; // gövde
                else if(bodypart == 4) weapon_damage = 24; // kasýk
                else if(bodypart == 5 || bodypart == 6) weapon_damage = 22; // kol
                else if(bodypart == 7 || bodypart == 8) weapon_damage = 22; // bacak
                else if(bodypart == 9) weapon_damage = 35; // kafa
                else weapon_damage = 24;
            }
            case 31: { // m4
                if(bodypart == 3) weapon_damage = 35; // gövde
                else if(bodypart == 4) weapon_damage = 30; // kasýk
                else if(bodypart == 5 || bodypart == 6) weapon_damage = 28; // kol
                else if(bodypart == 7 || bodypart == 8) weapon_damage = 28; // bacak
                else if(bodypart == 9) weapon_damage = 50; // kafa
                else weapon_damage = 28;
            }
            case 30: { // ak
                if(bodypart == 3) weapon_damage = 33; // gövde
                else if(bodypart == 4) weapon_damage = 29; // kasýk
                else if(bodypart == 5 || bodypart == 6) weapon_damage = 27; // kol
                else if(bodypart == 7 || bodypart == 8) weapon_damage = 27; // bacak
                else if(bodypart == 9) weapon_damage = 50; // kafa
                else weapon_damage = 27;
            }
            case 33: { // rifle
                if(bodypart == 3) weapon_damage = 60; // gövde
                else if(bodypart == 4) weapon_damage = 55; // kasýk
                else if(bodypart == 5 || bodypart == 6) weapon_damage = 50; // kol
                else if(bodypart == 7 || bodypart == 8) weapon_damage = 50; // bacak
                else if(bodypart == 9) weapon_damage = 70; // kafa
                else weapon_damage = 27;
            }
            case 34: { // sniper
                if(bodypart == 3) weapon_damage = 80; // gövde
                else if(bodypart == 4) weapon_damage = 75; // kasýk
                else if(bodypart == 5 || bodypart == 6) weapon_damage = 70; // kol
                else if(bodypart == 7 || bodypart == 8) weapon_damage = 70; // bacak
                else if(bodypart == 9) weapon_damage = 100; // kafa
                else weapon_damage = 27;
            }
        }
        if(bodypart == 9) {
            if(hp - weapon_damage > 0) {
                AC_SetPlayerHealth(playerid, hp - weapon_damage);
                AC_SetPlayerArmour(playerid, ap);
            }
            else {
                if(issuerid != INVALID_PLAYER_ID && PlayerInfo[issuerid][pFaction] == 0 && PlayerInfo[issuerid][pFactionDuty])
                {
                    for(new a; a < 12; a++)
                    {
                        GetPlayerWeaponData(playerid, a, xweapons[a], xammo[a]);

                        if(!xweapons[a] || !xammo[a])continue;

                        if(AC_PlayerHasWeapon(playerid, xweapons[a]) <= 0)
                            SendFormattedMessage(issuerid, COLOR_YELLOW, "%s kiþisine ait %s (%d) silaha el koyuldu. (%s | KOD: Delta)", ReturnRoleplayName(playerid), GetWeaponNameEx(xweapons[a]), xammo[a], ReturnDate());
                        else
                            SendFormattedMessage(issuerid, COLOR_YELLOW, "%s kiþisine ait %s (%d) silaha el koyuldu. (%s)", ReturnRoleplayName(playerid), GetWeaponNameEx(xweapons[a]), xammo[a], ReturnDate());
                    }
                    AC_ResetPlayerWeapons(playerid);
                    SunucuMesaji(playerid, "%s adlý memur tarafýndan vuruldunuz ve üzerinizdeki silahlarýnýz sýfýrlandý. (%s)", ReturnRoleplayName(issuerid), ReturnDate());
                    printf("%s > Vurulma Yoluyla Silah Silinmesi > %s (%s)", ReturnRoleplayName(issuerid), ReturnRoleplayName(playerid), ReturnDate());
                }
                Damages_Add(playerid, (issuerid != INVALID_PLAYER_ID) ? ReturnRoleplayName(issuerid, true) : "Kimse", weaponid, weapon_damage, bodypart);
                OyuncuOldur(playerid, issuerid);
                return 0;
            }
        }
        else {
            if(ap > 0.0) {
                if(ap > weapon_damage)
                    AC_SetPlayerArmour(playerid, ap - weapon_damage);
                else if(ap == weapon_damage)
                    AC_SetPlayerArmour(playerid, ap - weapon_damage);
                else if(ap < weapon_damage) {
                    Kalan = weapon_damage - ap;
                    AC_SetPlayerArmour(playerid, 0.0);
                    if(hp - Kalan > 0)
                        AC_SetPlayerHealth(playerid, hp - Kalan);
                    else {
                        if(issuerid != INVALID_PLAYER_ID && PlayerInfo[issuerid][pFaction] == 0 && PlayerInfo[issuerid][pFactionDuty])
                        {
                            for(new xa; xa < 12; xa++)
                            {
                                GetPlayerWeaponData(playerid, xa, xweapons[xa], xammo[xa]);

                                if(!xweapons[xa] || !xammo[xa])continue;

                                if(AC_PlayerHasWeapon(playerid, xweapons[xa]) <= 0)
                                    SendFormattedMessage(issuerid, COLOR_YELLOW, "%s kiþisine ait %s (%d) silaha el koyuldu. (%s | KOD: Delta)", ReturnRoleplayName(playerid), GetWeaponNameEx(xweapons[xa]), xammo[xa], ReturnDate());
                                else
                                    SendFormattedMessage(issuerid, COLOR_YELLOW, "%s kiþisine ait %s (%d) silaha el koyuldu. (%s)", ReturnRoleplayName(playerid), GetWeaponNameEx(xweapons[xa]), xammo[xa], ReturnDate());
                            }
                            AC_ResetPlayerWeapons(playerid);
                            SunucuMesaji(playerid, "%s adlý memur tarafýndan vuruldunuz ve üzerinizdeki silahlarýnýz sýfýrlandý. (%s)", ReturnRoleplayName(issuerid), ReturnDate());
                            printf("%s > Vurulma Yoluyla Silah Silinmesi > %s (%s)", ReturnRoleplayName(issuerid), ReturnRoleplayName(playerid), ReturnDate());
                        }
                        Damages_Add(playerid, (issuerid != INVALID_PLAYER_ID) ? ReturnRoleplayName(issuerid, true) : "Kimse", weaponid, weapon_damage, bodypart);
                        OyuncuOldur(playerid, issuerid);
                        return 0;
                    }
                }
            } else {
                if(hp-weapon_damage > 0)
                    AC_SetPlayerHealth(playerid, hp - weapon_damage);
                else {
                    if(issuerid != INVALID_PLAYER_ID && PlayerInfo[issuerid][pFaction] == 0 && PlayerInfo[issuerid][pFactionDuty])
                    {
                        for(new aa; aa < 12; aa++)
                        {
                            GetPlayerWeaponData(playerid, aa, xweapons[aa], xammo[aa]);

                            if(!xweapons[aa] || !xammo[aa])continue;

                            if(AC_PlayerHasWeapon(playerid, xweapons[aa]) <= 0)
                                SendFormattedMessage(issuerid, COLOR_YELLOW, "%s kiþisine ait %s (%d) silaha el koyuldu. (%s | KOD: Delta)", ReturnRoleplayName(playerid), GetWeaponNameEx(xweapons[aa]), xammo[aa], ReturnDate());
                            else
                                SendFormattedMessage(issuerid, COLOR_YELLOW, "%s kiþisine ait %s (%d) silaha el koyuldu. (%s)", ReturnRoleplayName(playerid), GetWeaponNameEx(xweapons[aa]), xammo[aa], ReturnDate());
                        }
                        AC_ResetPlayerWeapons(playerid);
                        SunucuMesaji(playerid, "%s adlý memur tarafýndan vuruldunuz ve üzerinizdeki silahlarýnýz sýfýrlandý. (%s)", ReturnRoleplayName(issuerid), ReturnDate());
                        printf("%s > Vurulma Yoluyla Silah Silinmesi > %s (%s)", ReturnRoleplayName(issuerid), ReturnRoleplayName(playerid), ReturnDate());
                    }
                    Damages_Add(playerid, (issuerid != INVALID_PLAYER_ID) ? ReturnRoleplayName(issuerid, true) : "Kimse", weaponid, weapon_damage, bodypart);
                    OyuncuOldur(playerid, issuerid);
                    return 0;
                }
            }
        }
        Damages_Add(playerid, (issuerid != INVALID_PLAYER_ID) ? ReturnRoleplayName(issuerid, true) : "Kimse", weaponid, weapon_damage, bodypart);
        if(weaponid && (weaponid == 23 && !PlayerInfo[issuerid][pTaser]) && (weaponid == 25 && !PlayerInfo[issuerid][pBeanBag]) && bodypart == 7 || bodypart == 8) PlayerInfo[playerid][pLegHit] = 1;
    }
    return 1;
}

public OnPlayerFinishedDownloading(playerid, virtualworld)
{
    /*if(!PlayerInfo[playerid][pLogged])
        return TextDrawShowForPlayer(playerid, Text:SunucuLogo);*/
        
    if(PlayerInfo[playerid][pSkinWorld] != -1 && virtualworld == 31)
    {
        AC_SetPlayerVirtualWorld(playerid, PlayerInfo[playerid][pSkinWorld]);
        PlayerInfo[playerid][pSkinWorld] = -1;
        PlayerInfo[playerid][pFreezed] = 0;
        TogglePlayerControllable(playerid, true);
    }
    return 1;
}

public OnPlayerRequestClass(playerid, classid)
{
    if(PlayerInfo[playerid][pLogged]) return 1;

    ClearChat(playerid, 20);

    TogglePlayerSpectating(playerid, true);
    //TextDrawShowForPlayer(playerid, Text:SunucuLogo);
    SetPlayerColor(playerid, COLOR_WHITE);

    mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT u.*, a.username FROM characters AS u JOIN accounts AS a ON a.id = u.account_id WHERE char_name = '%e' AND deleted_at IS NULL AND deleted = '0' LIMIT 1;", PlayerInfo[playerid][pCharacterName]);
    mysql_tquery(ourConnection, queryx, "OnLoadAccount", "d", playerid);
    return 1;
}

public OnPlayerConnect(playerid)
{
    if(IsPlayerNPC(playerid)) return Ban(playerid);
    Streamer_ToggleIdleUpdate(playerid, true);
    new pName[MAX_PLAYER_NAME];
    
    PlayerInfo[playerid][GYMYonTusu] = 0;
    PlayerInfo[playerid][GYMLoop] = 0;
    PlayerInfo[playerid][GYMPuaniVar] = 0;
    PlayerInfo[playerid][GYMPuaniX] = 0;
    PlayerInfo[playerid][GYMPuani] = 0;
    PlayerInfo[playerid][KasSeviyesi] = 0;
    PlayerInfo[playerid][pBalikYetenegi] = 0;
    /*YeniSunucuHud[0][playerid] = CreatePlayerTextDraw(playerid,621.000000, 399.000000, "SA-RP");
    PlayerTextDrawAlignment(playerid,YeniSunucuHud[0][playerid], 3);
    PlayerTextDrawBackgroundColor(playerid,YeniSunucuHud[0][playerid], 0);
    PlayerTextDrawFont(playerid,YeniSunucuHud[0][playerid], 1);
    PlayerTextDrawLetterSize(playerid,YeniSunucuHud[0][playerid], 0.330000, 1.299999);
    PlayerTextDrawColor(playerid,YeniSunucuHud[0][playerid], -100);
    PlayerTextDrawSetOutline(playerid,YeniSunucuHud[0][playerid], 0);
    PlayerTextDrawSetProportional(playerid,YeniSunucuHud[0][playerid], 1);
    PlayerTextDrawSetShadow(playerid,YeniSunucuHud[0][playerid], 1);
    PlayerTextDrawSetSelectable(playerid,YeniSunucuHud[0][playerid], 0);

    YeniSunucuHud[1][playerid] = CreatePlayerTextDraw(playerid,618.000000, 413.000000, "01/01/2020");
    PlayerTextDrawAlignment(playerid,YeniSunucuHud[1][playerid], 3);
    PlayerTextDrawBackgroundColor(playerid,YeniSunucuHud[1][playerid], 0);
    PlayerTextDrawFont(playerid,YeniSunucuHud[1][playerid], 2);
    PlayerTextDrawLetterSize(playerid,YeniSunucuHud[1][playerid], 0.250000, 1.159999);
    PlayerTextDrawColor(playerid,YeniSunucuHud[1][playerid], -100);
    PlayerTextDrawSetOutline(playerid,YeniSunucuHud[1][playerid], 0);
    PlayerTextDrawSetProportional(playerid,YeniSunucuHud[1][playerid], 1);
    PlayerTextDrawSetShadow(playerid,YeniSunucuHud[1][playerid], 1);
    PlayerTextDrawSetSelectable(playerid,YeniSunucuHud[1][playerid], 0);

    YeniSunucuHud[2][playerid] = CreatePlayerTextDraw(playerid,589.000000, 427.000000, "00:00");
    PlayerTextDrawAlignment(playerid,YeniSunucuHud[2][playerid], 2);
    PlayerTextDrawBackgroundColor(playerid,YeniSunucuHud[2][playerid], 0);
    PlayerTextDrawFont(playerid,YeniSunucuHud[2][playerid], 2);
    PlayerTextDrawLetterSize(playerid,YeniSunucuHud[2][playerid], 0.250000, 1.159999);
    PlayerTextDrawColor(playerid,YeniSunucuHud[2][playerid], -100);
    PlayerTextDrawSetOutline(playerid,YeniSunucuHud[2][playerid], 0);
    PlayerTextDrawSetProportional(playerid,YeniSunucuHud[2][playerid], 1);
    PlayerTextDrawSetShadow(playerid,YeniSunucuHud[2][playerid], 1);
    PlayerTextDrawSetSelectable(playerid,YeniSunucuHud[2][playerid], 0);*/
    
    ParaBilgilendirme[0][playerid] = CreatePlayerTextDraw(playerid, 637.405517, 1.000027, "_");
    PlayerTextDrawLetterSize(playerid, ParaBilgilendirme[0][playerid], 0.279835, 1.034166);
    PlayerTextDrawAlignment(playerid, ParaBilgilendirme[0][playerid], 3);
    PlayerTextDrawColor(playerid, ParaBilgilendirme[0][playerid], 1098134015);
    PlayerTextDrawSetShadow(playerid, ParaBilgilendirme[0][playerid], 0);
    PlayerTextDrawSetOutline(playerid, ParaBilgilendirme[0][playerid], 1);
    PlayerTextDrawBackgroundColor(playerid, ParaBilgilendirme[0][playerid], 255);
    PlayerTextDrawFont(playerid, ParaBilgilendirme[0][playerid], 3);
    PlayerTextDrawSetProportional(playerid, ParaBilgilendirme[0][playerid], 1);
    PlayerTextDrawSetShadow(playerid, ParaBilgilendirme[0][playerid], 0);

    ParaBilgilendirme[1][playerid] = CreatePlayerTextDraw(playerid, 636.905517, 11.700028, "_");
    PlayerTextDrawLetterSize(playerid, ParaBilgilendirme[1][playerid], 0.279835, 1.034166);
    PlayerTextDrawAlignment(playerid, ParaBilgilendirme[1][playerid], 3);
    PlayerTextDrawColor(playerid, ParaBilgilendirme[1][playerid], -801227009);
    PlayerTextDrawSetShadow(playerid, ParaBilgilendirme[1][playerid], 0);
    PlayerTextDrawSetOutline(playerid, ParaBilgilendirme[1][playerid], 1);
    PlayerTextDrawBackgroundColor(playerid, ParaBilgilendirme[1][playerid], 255);
    PlayerTextDrawFont(playerid, ParaBilgilendirme[1][playerid], 3);
    PlayerTextDrawSetProportional(playerid, ParaBilgilendirme[1][playerid], 1);
    PlayerTextDrawSetShadow(playerid, ParaBilgilendirme[1][playerid], 0);
    
    YonTusu[playerid] = CreatePlayerTextDraw(playerid, 172.000000, 364.000000, "ld_beat:left");
    PlayerTextDrawFont(playerid, YonTusu[playerid], 4);
    PlayerTextDrawLetterSize(playerid, YonTusu[playerid], 0.600000, 2.000000);
    PlayerTextDrawTextSize(playerid, YonTusu[playerid], 25.500000, -25.500000);
    PlayerTextDrawSetOutline(playerid, YonTusu[playerid], 0);
    PlayerTextDrawSetShadow(playerid, YonTusu[playerid], 0);
    PlayerTextDrawAlignment(playerid, YonTusu[playerid], 2);
    PlayerTextDrawColor(playerid, YonTusu[playerid], -1);
    PlayerTextDrawBackgroundColor(playerid, YonTusu[playerid], 255);
    PlayerTextDrawBoxColor(playerid, YonTusu[playerid], 50);
    PlayerTextDrawUseBox(playerid, YonTusu[playerid], 0);
    PlayerTextDrawSetProportional(playerid, YonTusu[playerid], 1);
    PlayerTextDrawSetSelectable(playerid, YonTusu[playerid], 0);
    
//    StadyumTemizle(playerid);
    
    PlayerInfo[playerid][pPizzaAldi] = false;
    PlayerInfo[playerid][pPizzaSonEv] = -1;
    PlayerInfo[playerid][pPizzaPara] = 0;
    PlayerInfo[playerid][pPizzaTamamlanan] = 0;
    PlayerInfo[playerid][pKiraladigiOtel] = -1;
    PlayerInfo[playerid][pPizzaObje] = INVALID_OBJECT_ID;
    PlayerInfo[playerid][pYatirdigiAt] = -1;
    PlayerInfo[playerid][pYatirdigiBahis] = 0;
    PlayerInfo[playerid][pBahisKazandi] = 0;
    PlayerInfo[playerid][pYarisCP] = -1;
    PlayerInfo[playerid][pGidilecekCP] = -1;
    PlayerInfo[playerid][pYarisSahibi] = -1;
    PlayerInfo[playerid][pKatildigiYaris] = -1;
    PlayerInfo[playerid][pCopTasiyor] = false;
    PlayerInfo[playerid][pCopTopla] = 0;
    PlayerInfo[playerid][pGovernment] = 0;
    PlayerInfo[playerid][pBugKurtar] = 0;
    PlayerInfo[playerid][pAPBP] = 0;
    PlayerInfo[playerid][pEmniyetKemeri] = 0;
    PlayerInfo[playerid][pListen] = 0;
    PlayerInfo[playerid][pSkinWorld] = -1;
    PlayerInfo[playerid][pLisansCeza] = -1;
    PlayerInfo[playerid][pBiletMiktar] = 0;
    PlayerInfo[playerid][pJobTime] = 0;
    PlayerInfo[playerid][DoublePayday] = 0;
    PlayerInfo[playerid][pAFKMode] = false;
    PlayerInfo[playerid][pTasidigiSandik] = -1;
    PlayerInfo[playerid][pHirsizlik] = 0;
    PlayerInfo[playerid][pHirsizlikGelir] = 0;
    PlayerInfo[playerid][pVerdigiReklam] = -1;
    PlayerInfo[playerid][pKurduguKamp] = -1;
    PlayerInfo[playerid][pTezgah] = 0;
    PlayerInfo[playerid][pTezgahMasa] = 0;
    PlayerInfo[playerid][pActigiTezgah] = -1;
    PlayerInfo[playerid][pCalistigiTezgah] = -1;
    PlayerInfo[playerid][pTeleportNoktasi] = -1;
    PlayerInfo[playerid][pBalikCount] = 0;
    PlayerInfo[playerid][pBalikListe] = 0;
    PlayerInfo[playerid][pBalikTutuyor] = false;
    PlayerInfo[playerid][pLACH] = true;
    PlayerInfo[playerid][pACH] = true;
    PlayerInfo[playerid][pIzleniyor] = -1;
    PlayerInfo[playerid][pHata] = 0;
    PlayerInfo[playerid][pYakitGelir] = 0;
    GetPlayerName(playerid, pName, MAX_PLAYER_NAME);
    DeletePVar(playerid, "TelefonuCaliyor");
    if(strfind(pName, "_", true) == -1)
    {
        KickPlayer(playerid, "SA-AC", "Ad_Soyad formatýný kullanýn.");
        return 1;
    }

    PlayerInfo[playerid][pForceSpawn] = false;
    PlayerInfo[playerid][pBeanBag] = false;
    PlayerInfo[playerid][pTaser] = false;
    PlayerInfo[playerid][pTackleMode] = false;
    PlayerInfo[playerid][pRadyo] = 1;
    CancelEdit(playerid);
    Player_ClearVars(playerid);
    SetPlayerTeam(playerid, 0);
    Dealer_CreateSelectTD(playerid);
    Tuning_CreateTD(playerid);
    if(PlayerInfo[playerid][pDestekIstedi][0] || PlayerInfo[playerid][pDestekIstedi][1])
        DestekBitir(playerid);
    PlayerInfo[playerid][pAntiSpam] = 0;
    PlayerInfo[playerid][pAntiSpamer] = 0;
    PlayerInfo[playerid][OyVerdim] = 0;
    PlayerInfo[playerid][IsletmeSatiyorum] = false;
    PlayerInfo[playerid][pMyBoombox] = -1;
    PlayerInfo[playerid][pTamirKiti] = 0;
    PlayerInfo[playerid][pAletCantasi] = 0;
    PlayerInfo[playerid][pAracCekmeIstegi] = -1;
    PlayerInfo[playerid][AracSpawn] = false;
    //PlayerInfo[playerid][Rehineyim] = false;
    //PlayerInfo[playerid][Rehineyimm] = false;
    PlayerInfo[playerid][pUzerindekiSilah] = 0;
    PlayerInfo[playerid][pSilahTick] = 0;
    PlayerInfo[playerid][pAtesTick] = 0;
    PlayerInfo[playerid][pSnakeCamMode] = 0;
    PlayerInfo[playerid][pSpecMode] = 0;
    PlayerInfo[playerid][pKarakterYapti] = 0;
    PlayerInfo[playerid][BagimlilikTedavi] = 0;
    DestroyDynamic3DTextLabelEx(PlayerInfo[playerid][pOzellikLabel]);
    PlayerInfo[playerid][pTarget] = INVALID_PLAYER_ID;
    PlayerInfo[playerid][pOzellikGosteriyor] = false;
    PlayerInfo[playerid][CCWGunID] = -1;
    PlayerInfo[playerid][CCWGunDate] = 0;
    PlayerInfo[playerid][pDonateSkin][0] = 0;
    PlayerInfo[playerid][pDonateSkin][1] = 0;
    PlayerInfo[playerid][pDonateSkin][2] = 0;
    PlayerInfo[playerid][pDonateSkin][3] = 0;
    PlayerInfo[playerid][pDonateSkin][4] = 0;
    PlayerInfo[playerid][TepsiEdit] = false;
    PlayerInfo[playerid][AramaYanitlandi] = false;
    KillTimer(PlayerInfo[playerid][pFreezeTimer]);
    PlayerInfo[playerid][UyusturucuEfektleri] = false;
    PlayerInfo[playerid][EtkisizEleman] = false;
    PlayerInfo[playerid][pLicenses][0] = 0;
    PlayerInfo[playerid][pLicenses][1] = 0;
    PlayerInfo[playerid][pLicenses][2] = 0;
    PlayerInfo[playerid][pHirsizlikYetenegi] = 0;
    PlayerInfo[playerid][pKamyoncuYetenegi] = 0;
    DeletePVar(playerid, "AracBoyatiyorum");
    //PlayerInfo[playerid][pTVMode] = false;
    //PlayerInfo[playerid][pTVActor] = -1;
    PlayerInfo[playerid][TepsiBiraktim] = false;
    PlayerInfo[playerid][pTedaviSure] = 0;
    PlayerInfo[playerid][pKonserIzin] = -1;
    KillTimer(PlayerInfo[playerid][pCallTimer]);
    PlayerInfo[playerid][pUpgradePoints] = 0;
    PlayerInfo[playerid][pStrength] = 0;
    PlayerInfo[playerid][pTackleMode] = false;
    PlayerInfo[playerid][pSirenCustomYapti] = false;
    PlayerInfo[playerid][pEvdeKiyafet] = false;
    PlayerInfo[playerid][pToplamCeza] = 0;
    PlayerInfo[playerid][pCalistigiIsyeri][0] = -1;
    PlayerInfo[playerid][pCalistigiIsyeri][1] = -1;
    PlayerInfo[playerid][pBarikatObje] = -1;
    PlayerInfo[playerid][pIhbarUyariAldi] = 0;
    PlayerInfo[playerid][pTextdraws][0] = CreatePlayerTextDraw(playerid, 499.000000, 101.000000, "~n~~g~KALAN SURE:~w~ 0 saniye");
    PlayerTextDrawBackgroundColor(playerid, PlayerInfo[playerid][pTextdraws][0], 255);
    PlayerTextDrawFont(playerid, PlayerInfo[playerid][pTextdraws][0], 1);
    PlayerTextDrawLetterSize(playerid, PlayerInfo[playerid][pTextdraws][0], 0.270000, 1.000000);
    PlayerTextDrawColor(playerid, PlayerInfo[playerid][pTextdraws][0], -1);
    PlayerTextDrawSetOutline(playerid, PlayerInfo[playerid][pTextdraws][0], 1);
    PlayerTextDrawSetProportional(playerid, PlayerInfo[playerid][pTextdraws][0], 1);
    PlayerTextDrawSetSelectable(playerid, PlayerInfo[playerid][pTextdraws][0], 0);

    PlayerInfo[playerid][pTextdraws][1] = CreatePlayerTextDraw(playerid, 23.000000, 180.000000, "Mesaj");
    PlayerTextDrawUseBox(playerid, PlayerInfo[playerid][pTextdraws][1],1);
    PlayerTextDrawBoxColor(playerid, PlayerInfo[playerid][pTextdraws][1],0x00000033);
    PlayerTextDrawTextSize(playerid, PlayerInfo[playerid][pTextdraws][1],180.000000, 5.000000);
    PlayerTextDrawAlignment(playerid, PlayerInfo[playerid][pTextdraws][1],0);
    PlayerTextDrawBackgroundColor(playerid, PlayerInfo[playerid][pTextdraws][1],0x000000ff);
    PlayerTextDrawFont(playerid, PlayerInfo[playerid][pTextdraws][1],2);
    PlayerTextDrawLetterSize(playerid, PlayerInfo[playerid][pTextdraws][1],0.250000, 1.099999);
    PlayerTextDrawColor(playerid, PlayerInfo[playerid][pTextdraws][1],0xffffffff);
    PlayerTextDrawSetOutline(playerid, PlayerInfo[playerid][pTextdraws][1],1);
    PlayerTextDrawSetProportional(playerid, PlayerInfo[playerid][pTextdraws][1],1);
    PlayerTextDrawSetShadow(playerid, PlayerInfo[playerid][pTextdraws][1],1);

    PlayerInfo[playerid][pTextdraws][2] = CreatePlayerTextDraw(playerid, 175.0, 385.0, "SIFRE KIRMA: ~w~Mesaj");
    PlayerTextDrawLetterSize(playerid, PlayerInfo[playerid][pTextdraws][2], 0.5, 1.5);
    PlayerTextDrawFont(playerid, PlayerInfo[playerid][pTextdraws][2], 3);
    PlayerTextDrawAlignment(playerid, PlayerInfo[playerid][pTextdraws][2], 1);
    PlayerTextDrawSetOutline(playerid, PlayerInfo[playerid][pTextdraws][2], 1);
    PlayerTextDrawBackgroundColor(playerid, PlayerInfo[playerid][pTextdraws][2], 0x000000FF);

    PlayerInfo[playerid][pTextdraws][3] = CreatePlayerTextDraw(playerid, 175.0, 400.0, "KALAN SANIYE: ~w~00");
    PlayerTextDrawLetterSize(playerid, PlayerInfo[playerid][pTextdraws][3], 0.5, 1.5);
    PlayerTextDrawFont(playerid, PlayerInfo[playerid][pTextdraws][3], 3);
    PlayerTextDrawAlignment(playerid, PlayerInfo[playerid][pTextdraws][3], 1);
    PlayerTextDrawSetOutline(playerid, PlayerInfo[playerid][pTextdraws][3], 1);
    PlayerTextDrawBackgroundColor(playerid, PlayerInfo[playerid][pTextdraws][3], 0x000000FF);

    Textdraw0[playerid] = CreatePlayerTextDraw(playerid, 279.166687, 298.148223, "ARAC PARCALANIYOR");
    PlayerTextDrawLetterSize(playerid, Textdraw0[playerid], 0.441666, 2.056294);
    PlayerTextDrawAlignment(playerid, Textdraw0[playerid], 1);
    PlayerTextDrawColor(playerid, Textdraw0[playerid], -2147483393);
    PlayerTextDrawSetShadow(playerid, Textdraw0[playerid], 0);
    PlayerTextDrawSetOutline(playerid, Textdraw0[playerid], 1);
    PlayerTextDrawBackgroundColor(playerid, Textdraw0[playerid], 51);
    PlayerTextDrawFont(playerid, Textdraw0[playerid], 2);
    PlayerTextDrawSetProportional(playerid, Textdraw0[playerid], 1);

    Textdraw1[playerid] = CreatePlayerTextDraw(playerid, 299.583404, 316.296264, "20 saniye");
    PlayerTextDrawLetterSize(playerid, Textdraw1[playerid], 0.449999, 1.600000);
    PlayerTextDrawAlignment(playerid, Textdraw1[playerid], 1);
    PlayerTextDrawColor(playerid, Textdraw1[playerid], -1);
    PlayerTextDrawSetShadow(playerid, Textdraw1[playerid], 0);
    PlayerTextDrawSetOutline(playerid, Textdraw1[playerid], 1);
    PlayerTextDrawBackgroundColor(playerid, Textdraw1[playerid], 51);
    PlayerTextDrawFont(playerid, Textdraw1[playerid], 2);
    PlayerTextDrawSetProportional(playerid, Textdraw1[playerid], 1);

    VehicleFuel[playerid] = CreatePlayerTextDraw(playerid, 584.000000, 364.000000, "~y~000%");
    PlayerTextDrawBackgroundColor(playerid, VehicleFuel[playerid], 255);
    PlayerTextDrawFont(playerid, VehicleFuel[playerid], 2);
    PlayerTextDrawLetterSize(playerid, VehicleFuel[playerid], 0.200000, 1.190000);
    PlayerTextDrawColor(playerid, VehicleFuel[playerid], 16711935);
    PlayerTextDrawSetOutline(playerid, VehicleFuel[playerid], 1);
    PlayerTextDrawSetProportional(playerid, VehicleFuel[playerid], 1);
    PlayerTextDrawSetSelectable(playerid, VehicleFuel[playerid], 0);

    VehicleSpeed[playerid] = CreatePlayerTextDraw(playerid, 581.000000, 358.000000, "000");
    PlayerTextDrawAlignment(playerid, VehicleSpeed[playerid], 3);
    PlayerTextDrawBackgroundColor(playerid, VehicleSpeed[playerid], 255);
    PlayerTextDrawFont(playerid, VehicleSpeed[playerid], 2);
    PlayerTextDrawLetterSize(playerid, VehicleSpeed[playerid], 0.430000, 3.299998);
    PlayerTextDrawColor(playerid, VehicleSpeed[playerid], -1);
    PlayerTextDrawSetOutline(playerid, VehicleSpeed[playerid], 1);
    PlayerTextDrawSetProportional(playerid, VehicleSpeed[playerid], 1);
    PlayerTextDrawSetSelectable(playerid, VehicleSpeed[playerid], 0);
    
    for (new i; i < 17; i++)
    {
        WeaponSettings[playerid][i][Position][0] = -0.116;
        WeaponSettings[playerid][i][Position][1] = 0.189;
        WeaponSettings[playerid][i][Position][2] = 0.088;
        WeaponSettings[playerid][i][Position][3] = 0.0;
        WeaponSettings[playerid][i][Position][4] = 44.5;
        WeaponSettings[playerid][i][Position][5] = 0.0;
        WeaponSettings[playerid][i][Bone] = 1;
        WeaponSettings[playerid][i][Hidden] = false;
        WeaponSettings[playerid][i][duzenlendi] = 0;
    }
    WeaponTick[playerid] = 0;
    EditingWeapon[playerid] = 0;


    // FD istasyon
    /*RemoveBuildingForPlayer(playerid, 5967, 1259.437, -1246.812, 17.109, 0.250);
    RemoveBuildingForPlayer(playerid, 1388, 1238.375, -1258.281, 57.203, 0.250);
    RemoveBuildingForPlayer(playerid, 1391, 1238.375, -1258.273, 44.664, 0.250);
    RemoveBuildingForPlayer(playerid, 5857, 1259.437, -1246.812, 17.109, 0.250);
    RemoveBuildingForPlayer(playerid, 1219, 1284.1797, -1239.6406, 12.9141, 0.25);
    RemoveBuildingForPlayer(playerid, 1286, 622.781, -1280.209, 16.093, 0.250);
    RemoveBuildingForPlayer(playerid, 1294, 1254.689, -1276.160, 17.078, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 1269.550, -1280.319, 15.710, 0.250);*/
    RemoveBuildingForPlayer(playerid, 1388, 1238.375, -1258.281, 57.203, 0.250);
    RemoveBuildingForPlayer(playerid, 5967, 1259.437, -1246.812, 17.109, 0.250);
    RemoveBuildingForPlayer(playerid, 1391, 1238.375, -1258.273, 44.664, 0.250);
    RemoveBuildingForPlayer(playerid, 5857, 1259.437, -1246.812, 17.109, 0.250);

	//Gilmore Park(Remove)
	RemoveBuildingForPlayer(playerid, 3335, 495.531, -147.147, 33.968, 0.250);
    RemoveBuildingForPlayer(playerid, 5182, 2115.000, -1921.520, 15.390, 0.250);
    RemoveBuildingForPlayer(playerid, 5208, 2115.000, -1921.520, 15.390, 0.250);
    RemoveBuildingForPlayer(playerid, 620, 2116.929, -1916.079, 10.804, 0.250);
    RemoveBuildingForPlayer(playerid, 620, 2115.669, -1922.770, 10.804, 0.250);
    RemoveBuildingForPlayer(playerid, 620, 2113.399, -1925.040, 10.804, 0.250);
    RemoveBuildingForPlayer(playerid, 620, 2123.360, -1928.069, 6.843, 0.250);
    RemoveBuildingForPlayer(playerid, 620, 2114.550, -1928.189, 5.031, 0.250);
    RemoveBuildingForPlayer(playerid, 620, 2122.659, -1916.790, 10.804, 0.250);
    RemoveBuildingForPlayer(playerid, 620, 2121.510, -1909.530, 10.804, 0.250);
    RemoveBuildingForPlayer(playerid, 1308, 2175.770, -1910.579, 12.703, 0.250);
    RemoveBuildingForPlayer(playerid, 620, 2110.270, -1906.589, 5.031, 0.250);
    RemoveBuildingForPlayer(playerid, 1308, 2071.979, -1922.130, 11.601, 0.250);
    
    //Rent A Car(Remove)
    RemoveBuildingForPlayer(playerid, 712, 1533.640, -2301.719, 21.648, 0.250);
    RemoveBuildingForPlayer(playerid, 1290, 1560.939, -2306.280, 18.718, 0.250);
    RemoveBuildingForPlayer(playerid, 620, 1531.089, -2329.139, 11.296, 0.250);
    RemoveBuildingForPlayer(playerid, 620, 1569.310, -2342.110, 11.296, 0.250);
    RemoveBuildingForPlayer(playerid, 620, 1531.089, -2250.379, 11.296, 0.250);
    RemoveBuildingForPlayer(playerid, 3427, 487.101, 1528.229, 0.125, 0.250);
    RemoveBuildingForPlayer(playerid, 16277, 487.101, 1528.229, 0.125, 0.250);
    RemoveBuildingForPlayer(playerid, 1290, 1560.199, -2341.639, 18.718, 0.250);
    RemoveBuildingForPlayer(playerid, 1290, 1523.729, -2361.030, 18.718, 0.250);
    RemoveBuildingForPlayer(playerid, 1290, 1489.209, -2361.030, 18.718, 0.250);
    RemoveBuildingForPlayer(playerid, 1226, 1478.800, -2365.399, 16.312, 0.250);
    RemoveBuildingForPlayer(playerid, 1290, 1558.699, -2361.030, 18.718, 0.250);
    
    //Crenshaw Block(Remove)
    RemoveBuildingForPlayer(playerid, 1224, 2225.679, -1468.619, 23.429, 0.250);
    RemoveBuildingForPlayer(playerid, 3555, 2229.919, -1276.150, 26.695, 0.250);
    RemoveBuildingForPlayer(playerid, 3563, 2229.919, -1276.150, 26.695, 0.250);
    RemoveBuildingForPlayer(playerid, 1230, 2225.800, -1470.729, 23.195, 0.250);
    RemoveBuildingForPlayer(playerid, 1220, 2225.129, -1471.729, 23.195, 0.250);
    RemoveBuildingForPlayer(playerid, 1221, 2225.090, -1471.130, 23.273, 0.250);
    RemoveBuildingForPlayer(playerid, 1220, 2222.959, -1469.739, 23.195, 0.250);
    RemoveBuildingForPlayer(playerid, 1230, 2223.629, -1468.750, 23.195, 0.250);
    RemoveBuildingForPlayer(playerid, 1221, 2225.850, -1466.650, 23.273, 0.250);
    RemoveBuildingForPlayer(playerid, 673, 2241.889, -1458.930, 22.960, 0.250);
    RemoveBuildingForPlayer(playerid, 645, 2239.570, -1468.800, 22.687, 0.250);
    RemoveBuildingForPlayer(playerid, 3582, 2247.530, -1464.800, 25.546, 0.250);
    RemoveBuildingForPlayer(playerid, 3562, 2247.530, -1464.800, 25.546, 0.250);
    RemoveBuildingForPlayer(playerid, 1221, 2251.290, -1461.829, 23.632, 0.250);
    RemoveBuildingForPlayer(playerid, 3582, 2263.719, -1464.800, 25.437, 0.250);
    RemoveBuildingForPlayer(playerid, 3562, 2263.719, -1464.800, 25.437, 0.250);
    RemoveBuildingForPlayer(playerid, 3582, 2256.659, -1401.780, 25.640, 0.250);
    RemoveBuildingForPlayer(playerid, 3562, 2256.659, -1401.780, 25.640, 0.250);
    RemoveBuildingForPlayer(playerid, 1221, 2253.219, -1409.890, 23.632, 0.250);
    RemoveBuildingForPlayer(playerid, 673, 2265.620, -1410.339, 21.773, 0.250);
    RemoveBuildingForPlayer(playerid, 620, 2274.580, -1398.489, 22.507, 0.250);
    RemoveBuildingForPlayer(playerid, 3582, 2230.610, -1401.780, 25.640, 0.250);
    RemoveBuildingForPlayer(playerid, 3562, 2230.610, -1401.780, 25.640, 0.250);
    RemoveBuildingForPlayer(playerid, 3582, 2243.709, -1401.780, 25.640, 0.250);
    RemoveBuildingForPlayer(playerid, 3562, 2243.709, -1401.780, 25.640, 0.250);
    RemoveBuildingForPlayer(playerid, 673, 2196.780, -1492.239, 24.445, 0.250);
    RemoveBuildingForPlayer(playerid, 3582, 2232.399, -1464.800, 25.648, 0.250);
    RemoveBuildingForPlayer(playerid, 3562, 2232.399, -1464.800, 25.648, 0.250);
    RemoveBuildingForPlayer(playerid, 3582, 2247.530, -1464.800, 25.546, 0.250);
    RemoveBuildingForPlayer(playerid, 3562, 2247.530, -1464.800, 25.546, 0.250);
    RemoveBuildingForPlayer(playerid, 3582, 2263.719, -1464.800, 25.437, 0.250);
    RemoveBuildingForPlayer(playerid, 3562, 2263.719, -1464.800, 25.437, 0.250);
    RemoveBuildingForPlayer(playerid, 3582, 2230.610, -1401.780, 25.640, 0.250);
    RemoveBuildingForPlayer(playerid, 3562, 2230.610, -1401.780, 25.640, 0.250);
    RemoveBuildingForPlayer(playerid, 1294, 2352.340, 56.687, 29.812, 0.250);
    RemoveBuildingForPlayer(playerid, 3582, 2243.709, -1401.780, 25.640, 0.250);
    RemoveBuildingForPlayer(playerid, 3562, 2243.709, -1401.780, 25.640, 0.250);


    AC_ResetPlayerWeapons(playerid);
    AC_SetPlayerVirtualWorld(playerid, playerid);
    SetPlayerTime(playerid, SunucuBilgi[CurrentHour], 0);

    GetPlayerName(playerid, PlayerInfo[playerid][pCharacterName], MAX_PLAYER_NAME);
    SetPlayerColor(playerid, COLOR_WHITE);
    return 1;
}

public OnPlayerDisconnect(playerid, reason)
{
    if(IsPlayerConnected(playerid) && PlayerInfo[playerid][pLogged])
        SaveCharacter(playerid);

	if(PlayerInfo[playerid][pNotifications][0] || PlayerInfo[playerid][pNotifications][1])
        ParaTDGizle(playerid);

    if(PlayerInfo[playerid][pListen])
    {
        PlayerInfo[playerid][pListen] = 0;
        audience -= 1;
    }
    if(PlayerInfo[playerid][pKatildigiYaris] != -1 && PlayerInfo[playerid][pYarisSahibi] == -1) {
        pc_cmd_yaris(playerid, "ayril");
    }
    if(PlayerInfo[playerid][pKatildigiYaris] != -1 && PlayerInfo[playerid][pYarisSahibi] != -1) {
        new yaris = PlayerInfo[playerid][pKatildigiYaris];
        YarisInfo[yaris][yarisKatilanSayisi]--;
        PlayerInfo[playerid][pKatildigiYaris] = -1;
        PlayerInfo[playerid][pYarisSahibi] = -1;
        YarisInfo[yaris][yarisSahibi] = -1; 
        PlayerInfo[playerid][pYarisCP] = -1;
        if(PlayerInfo[playerid][pGidilecekCP] != -1) {
            DestroyDynamicRaceCP(PlayerInfo[playerid][pGidilecekCP]);
            PlayerInfo[playerid][pGidilecekCP] = -1;
        } 
        if(YarisInfo[yaris][yarisKatilanSayisi] <= 0)
            YarisBitir(yaris);
    }
    if(GetPVarInt(playerid, "IstekAlindi") > 0)
    {
        new qid = GetPVarInt(playerid, "IstekGonderen");

        DeletePVar(playerid, "IstekAlindi");
        DeletePVar(playerid, "IstekGonderen");
        DeletePVar(playerid, "IstekGonderenVehID");
        DeletePVar(playerid, "IstekTutar");

        if(IsPlayerConnected(qid) && PlayerInfo[qid][pLogged])
        {
            DeletePVar(qid, "IstekGonderildi");
            DeletePVar(qid, "IstekGonderilenAracID");
            DeletePVar(qid, "IstekGonderdigimKisi");
        }
    }

    if(GetPVarInt(playerid, "IstekGonderildi") > 0)
    {
        new qid = GetPVarInt(playerid, "IstekGonderdigimKisi");

        DeletePVar(playerid, "IstekGonderildi");
        DeletePVar(playerid, "IstekGonderilenAracID");
        DeletePVar(playerid, "IstekGonderdigimKisi");

        if(IsPlayerConnected(qid) && PlayerInfo[qid][pLogged])
        {
            DeletePVar(qid, "IstekAlindi");
            DeletePVar(qid, "IstekGonderen");
            DeletePVar(qid, "IstekGonderenVehID");
            DeletePVar(qid, "IstekTutar");
        }
    }
    if(GetPVarInt(playerid, "CKIstedi") == 1)
        DeletePVar(playerid, "CKIstedi");
    DeletePVar(playerid, "NoControlForCamHack");
    if(GetPVarInt(playerid, "AracSuruyor") == 1)
        KillTimer(AracKMTimer[playerid]);
    if(PlayerInfo[playerid][pCalistigiTezgah] != -1) {
        new slot = -1;
        for(new i; i < 3; i++) {
            if(StandInfo[PlayerInfo[playerid][pCalistigiTezgah]][sCalisan][i] == playerid) {
                slot = i;
                break;
            }
        }
        if(slot != -1)
            StandInfo[PlayerInfo[playerid][pCalistigiTezgah]][sCalisan][slot] = -1;
        PlayerInfo[playerid][pCalistigiTezgah] = -1;
    }
    if(PlayerInfo[playerid][pKurduguKamp] != -1) {
        new kampObje = PlayerInfo[playerid][pKurduguKamp];
        DestroyDynamicObjectEx(kampObje);
        PlayerInfo[playerid][pKurduguKamp] = -1;
    }
    PlayerInfo[playerid][pAracMotorTimer] = 0;
    if(PlayerInfo[playerid][pAldigiBilet] > 0) {
        PiyangoAlindi[PlayerInfo[playerid][pAldigiBilet]] = 0;
        PlayerInfo[playerid][pAldigiBilet] = 0;
    }
    if(GetPVarInt(playerid, "SatinAliyor") == 1) {
        new karsiOyuncu = GetPVarInt(playerid, "TezgahSatan");
        DeletePVar(playerid, "TezgahSatis");
        DeletePVar(playerid, "TezgahSatan");
        DeletePVar(karsiOyuncu, "TezgahSatisID");
        DeletePVar(karsiOyuncu, "TezgahSatis");
        DeletePVar(karsiOyuncu, "SatisTezgah");
        DeletePVar(karsiOyuncu, "SatisUrun");
        DeletePVar(playerid, "SatinAliyor");
        DeletePVar(playerid, "TezgahIcecek");
        DeletePVar(karsiOyuncu, "TezgahIcecek");
        DeletePVar(karsiOyuncu, "SatisYapiyor");
        SunucuMesaji(karsiOyuncu, "%s (ID: %d) oyundan çýktýðý için satýþ iptal edildi.", ReturnRoleplayName(playerid), playerid);
    } else if(GetPVarInt(playerid, "SatisYapiyor") == 1) {
        new karsiOyuncu = GetPVarInt(playerid, "TezgahSatisID");
        DeletePVar(karsiOyuncu, "TezgahSatis");
        DeletePVar(karsiOyuncu, "TezgahSatan");
        DeletePVar(playerid, "TezgahSatisID");
        DeletePVar(playerid, "TezgahSatis");
        DeletePVar(playerid, "SatisTezgah");
        DeletePVar(playerid, "SatisUrun");
        DeletePVar(karsiOyuncu, "SatinAliyor");
        DeletePVar(playerid, "TezgahIcecek");
        DeletePVar(karsiOyuncu, "TezgahIcecek");
        DeletePVar(playerid, "SatisYapiyor");
        SunucuMesaji(karsiOyuncu, "%s (ID: %d) oyundan çýktýðý için satýþ iptal edildi.", ReturnRoleplayName(playerid), playerid);
    }
    PlayerInfo[playerid][pGemide] = false;
    PlayerInfo[playerid][pReklam] = 0;
    PlayerInfo[playerid][pAgirYarali] = 0;
    
    if(PlayerInfo[playerid][pTasidigiSandik] != -1)
    {
        SandikSil(PlayerInfo[playerid][pTasidigiSandik]);
    }
    
    if(PlayerInfo[playerid][pVerdigiReklam] != -1)
        ReklamSil(PlayerInfo[playerid][pVerdigiReklam]);
        
    static const reasonQuit[3][20] = {"Crash", "Kendi Ýsteði", "Kick/Ban"};
    
    new ekipID = Ekip(playerid);
    if(ekipID != -1)
    {
        new slot = -1;
        for(new i; i < 4; i++)
        {
            if(EkipBilgi[ekipID][eUye][i] == playerid)
            {
                slot = i;
                break;
            }
        }
        if(slot != -1)
        {
            EkipBilgi[ekipID][eUye][slot] = -1;
            EkipBilgi[ekipID][eUyeSayisi]--;
            if(EkipBilgi[ekipID][eUyeSayisi] > 0) SendFactionMessage(0, "HQ: %s %s, %s ekip kodundan ayrýlýyor. ((%s))", fRanks[0][PlayerInfo[playerid][pRank] - 1], ReturnRoleplayName(playerid), EkipBilgi[ekipID][eTamNumara], reasonQuit[reason]);
        }
        new str[32];
        if(EkipBilgi[ekipID][eUyeSayisi] <= 0)
        {
            format(str, sizeof str, "sil %d", ekipID);
            pc_cmd_ekip(playerid, str);
        }
    }
    PlayerInfo[playerid][pKaravanda] = false;

    if(PlayerInfo[playerid][pMyBoombox] > -1) Item_Delete(PlayerInfo[playerid][pMyBoombox]);

    new string[80];
    if(PlayerInfo[playerid][pDestekIstedi][0] || PlayerInfo[playerid][pDestekIstedi][1])
        DestekBitir(playerid);

    foreach(new j : Player) if(IsPlayerConnected(j) && PlayerInfo[j][pLogged] && PlayerInfo[j][pAdmin] > SUPPORTER && PlayerInfo[j][pAdminLog])
        SendFormattedMessage(j, COLOR_GREY, "** %s (%s - ID: %d) oyundan ayrýldý. (%s)", ReturnRoleplayName(playerid), PlayerInfo[playerid][pUsername], playerid, reasonQuit[reason]);

    mysql_format(ourConnection, queryx, sizeof(queryx), "UPDATE characters SET online = '0' WHERE char_name = '%e'", ReturnName(playerid));
    mysql_tquery(ourConnection, queryx);

    if(PlayerInfo[playerid][pInRecon] == -1)
    {
        format(string,sizeof(string), "(( %s sunucudan çýkýþ yaptý. Sebep: %s ))", ReturnRoleplayName(playerid), reasonQuit[reason]);
        ProxDetector(15.0, playerid, string, COLOR_GREY3, COLOR_GREY3, COLOR_GREY3, COLOR_GREY3, COLOR_GREY3);
    }

    DestroyDynamicObjectEx(KampInfo[playerid][kObje]);
    for(new i; i < 6; i++)
        KampInfo[playerid][kPos][i] = 0.0;
    KampInfo[playerid][kObje] = INVALID_OBJECT_ID;
    Iter_Remove(Kamp, playerid);
    KampInfo[playerid][kExists] = 0;
    format(KampInfo[playerid][kKuran],MAX_PLAYER_NAME,"Yok");
    for(new i; i < 2; i++) {
        if(IsValidDynamic3DTextLabel(KampInfo[playerid][kLabelText][i]))
            DestroyDynamic3DTextLabelEx(KampInfo[playerid][kLabelText][i]);
        KampInfo[playerid][kBalik][i] = -1;
        KampInfo[playerid][kBalikPismeTimer][i] = 0;
        KampInfo[playerid][kBalikPisti][i] = 0;
        KampInfo[playerid][kBalikYandi][i] = 0;
    }
    PlayerInfo[playerid][oKampAtesi] = -1;

    if(PlayerInfo[playerid][pLogged])
    {
        PlayerInfo[playerid][pCrashed] = (!reason) ? 1 : 0;

        if(PlayerInfo[playerid][pConvOOC] != -1) pc_cmd_pmodakbitir(playerid, NULL);

        CheatTimer(playerid);
        SaveCharacter(playerid);
        PolisDutyKayit(playerid);
        BalikKayit(playerid);
        CopEsyaKayit(playerid);
        Player_ClearTemporaryVars(playerid);

        KillTimer(PlayerInfo[playerid][pCheatTimer]);
        PlayerInfo[playerid][pCheatTimer] = 0;

        DestroyDynamic3DTextLabelEx(PlayerInfo[playerid][pNameTag]);
        Request_Reset(playerid);

        for(new dp; dp < MAX_DPS; dp++) if(DPInfo[playerid][dp][dpExists])
            DeleteDP(playerid, dp);

        foreach(new i : Player)
        {
            if(PlayerInfo[i][pInRecon] == playerid)
            {
                SendFormattedMessage(i, COLOR_ERROR, "%s (%d) adlý kullanýcý oyundan ayrýldý.", ReturnRoleplayName(playerid), playerid);
                pc_cmd_specoff(i);
            }
            if(PlayerInfo[i][pTogOOCPlayer][playerid]) PlayerInfo[i][pTogOOCPlayer][playerid] = 0;
            if(PlayerInfo[i][pTogPMPlayer][playerid]) PlayerInfo[i][pTogPMPlayer][playerid] = 0;
        }

        if(PlayerInfo[playerid][Started])
        {
            DestroyVehicle(PlayerInfo[playerid][Vehicle]);
            Iter_Remove(Vehicles, PlayerInfo[playerid][Vehicle]);
            Exam_ResetVars(playerid);
        }

        StopAudioStreamForPlayer(playerid);

        if(PlayerInfo[playerid][pActigiTezgah] != -1) {
            new id = PlayerInfo[playerid][pActigiTezgah];
            if(StandInfo[id][sExists]) {
                StandInfo[id][sExists] = 0;
                StandInfo[id][sID] = -1;
                format(StandInfo[id][sKuran], MAX_PLAYER_NAME, "Yok");
                StandInfo[id][sModel] = 0;
                DestroyDynamicObjectEx(StandInfo[id][sObje]);
                StandInfo[id][sPosX] = 0.0;
                StandInfo[id][sPosY] = 0.0;
                StandInfo[id][sPosZ] = 0.0;
                StandInfo[id][sRotX] = 0.0;
                StandInfo[id][sRotY] = 0.0;
                StandInfo[id][sRotZ] = 0.0;
                StandInfo[id][sMasaModel] = 0;
                DestroyDynamicObjectEx(StandInfo[id][sMasaObje]);
                StandInfo[id][sMasaPosX] = 0.0;
                StandInfo[id][sMasaPosY] = 0.0;
                StandInfo[id][sMasaPosZ] = 0.0;
                StandInfo[id][sMasaRotX] = 0.0;
                StandInfo[id][sMasaRotY] = 0.0;
                StandInfo[id][sMasaRotZ] = 0.0;
                if(IsValidDynamic3DTextLabel(StandInfo[id][sLabel]))
                    DestroyDynamic3DTextLabelEx(StandInfo[id][sLabel]);
                format(StandInfo[id][sLabelText], 128, "");
                StandInfo[id][sArabali] = false;
                for(new i; i < 3; i++) {
                    StandInfo[id][sCalisan][i] = -1;
                    StandInfo[id][sUrunFiyati][i] = 0;
                    format(StandUrunInfo[id][i], 80, "Yok");
                    format(StandIcecekInfo[id][i], 80, "Yok");
                    StandInfo[id][sIcecekFiyati][i] = 0;
                }
                StandInfo[id][saracID] = -1;
                SunucuMesaji(playerid, "Tezgahýnýzý sildiniz.");
                Iter_Remove(Tezgahlar, id);
                PlayerInfo[playerid][pActigiTezgah] = -1;
            }
        }
    }
    return 1;
}

public OnPlayerSpawn(playerid)
{
    SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL, 1);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_MICRO_UZI, 1);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_SAWNOFF_SHOTGUN, 1);

    SetPlayerSkinEx(playerid, (!PlayerInfo[playerid][pFactionDuty]) ? PlayerInfo[playerid][pSkin] : PlayerInfo[playerid][pFactionSkin]);
    if(GetPVarInt(playerid, "Oldu") == 1) {
        SetPlayerPos(playerid, GetPVarFloat(playerid, "OlumX"), GetPVarFloat(playerid, "OlumY"), GetPVarFloat(playerid, "OlumZ"));
        SetPlayerFacingAngle(playerid, GetPVarFloat(playerid, "OlumA"));
        SetPlayerInterior(playerid, GetPVarInt(playerid, "OlumINT"));
        AC_SetPlayerVirtualWorld(playerid, GetPVarInt(playerid, "OlumVW"));
        OyuncuOldur(playerid, -1);
        DeletePVar(playerid, "Olum");
        DeletePVar(playerid, "OlumX");
        DeletePVar(playerid, "OlumY");
        DeletePVar(playerid, "OlumZ");
        DeletePVar(playerid, "OlumA");
        DeletePVar(playerid, "OlumINT");
        DeletePVar(playerid, "OlumVW");
        for(new j; j < 12; j++)
        {
            if(PlayerInfo[playerid][pWeapons][j] != 0 && PlayerInfo[playerid][pAmmo][j] > 0)
                AC_GivePlayerWeapon(playerid, PlayerInfo[playerid][pWeapons][j], PlayerInfo[playerid][pAmmo][j]);

            PlayerInfo[playerid][pWeapons][j] = 0;
            PlayerInfo[playerid][pAmmo][j] = 0;
        }
        SetPlayerArmedWeapon(playerid, 0);
    } else if(GetPVarInt(playerid, "Oldu") == 2) {
        SetPlayerPos(playerid, GetPVarFloat(playerid, "OlumX"), GetPVarFloat(playerid, "OlumY"), GetPVarFloat(playerid, "OlumZ"));
        SetPlayerFacingAngle(playerid, GetPVarFloat(playerid, "OlumA"));
        SetPlayerInterior(playerid, GetPVarInt(playerid, "OlumINT"));
        AC_SetPlayerVirtualWorld(playerid, GetPVarInt(playerid, "OlumVW"));
        new yazi[64];
        format(yazi, sizeof yazi, "(( Bu karakter ölü. [/hasarlar %d] ))", playerid);
        PlayerInfo[playerid][pAgirYarali] = 1;
        PlayerTextDrawShow(playerid, PlayerInfo[playerid][pTextdraws][0]);
        PlayerInfo[playerid][pTedaviSure] = 360;
        PlayerInfo[playerid][pDeath] = 3;
        LogYaz(playerid, "PK login", -1);
        SunucuMesajiC(playerid, "Aðýr yaralýsýnýz, süre dolduðunda '/tedaviol' ile ayaða kalkabilirsiniz.");
        SunucuMesajiC(playerid, "(Ýkinci Tercih) '/kabulet ck' komutu ile karakterinizi yasaklatabilirsiniz.");
        UpdateDynamic3DTextLabelText(PlayerInfo[playerid][pNameTag], COLOR_ADMIN, yazi);
        ApplyAnimation(playerid, "WUZI", "CS_Dead_Guy", 4.1, 0, 1, 1, 1, 0, 1);
        DeletePVar(playerid, "Olum");
        DeletePVar(playerid, "OlumX");
        DeletePVar(playerid, "OlumY");
        DeletePVar(playerid, "OlumZ");
        DeletePVar(playerid, "OlumA");
        DeletePVar(playerid, "OlumINT");
        DeletePVar(playerid, "OlumVW");
        for(new j; j < 12; j++)
        {
            if(PlayerInfo[playerid][pWeapons][j] != 0 && PlayerInfo[playerid][pAmmo][j] > 0)
                AC_GivePlayerWeapon(playerid, PlayerInfo[playerid][pWeapons][j], PlayerInfo[playerid][pAmmo][j]);

            PlayerInfo[playerid][pWeapons][j] = 0;
            PlayerInfo[playerid][pAmmo][j] = 0;
        }
        SetPlayerArmedWeapon(playerid, 0);
    }
    return 1;
}

public OnPlayerDeath(playerid, killerid, reason)
{
    printf("%d idli oyuncu geberdi %d", playerid, PlayerInfo[playerid][pDeath]);

    if(PlayerInfo[playerid][pDeath] == 0 || GetPVarInt(playerid, "OyuncuOlu") == 1) {
        SetPVarInt(playerid, "Oldu", 1);
        DeletePVar(playerid, "OyuncuOlu");
        new Float:pX, Float:pY, Float:pZ, Float:pA, pINT, pVW;
        GetPlayerPos(playerid, pX, pY, pZ);
        GetPlayerFacingAngle(playerid, pA);
        pINT = GetPlayerInterior(playerid);
        pVW = GetPlayerVirtualWorld(playerid);
        SetPVarFloat(playerid, "OlumX", pX);
        SetPVarFloat(playerid, "OlumY", pY);
        SetPVarFloat(playerid, "OlumZ", pZ);
        SetPVarFloat(playerid, "OlumA", pA);
        SetPVarInt(playerid, "OlumINT", pINT);
        SetPVarInt(playerid, "OlumVW", pVW);
        for(new j; j < 12; j++)
        {
            if(PlayerInfo[playerid][pWeapons][j] != 0 && PlayerInfo[playerid][pAmmo][j] > 0)
                AC_GivePlayerWeapon(playerid, PlayerInfo[playerid][pWeapons][j], PlayerInfo[playerid][pAmmo][j]);

            PlayerInfo[playerid][pWeapons][j] = 0;
            PlayerInfo[playerid][pAmmo][j] = 0;
        }
        SetPlayerArmedWeapon(playerid, 0);
    } else if(PlayerInfo[playerid][pDeath] > 0) {
        SetPVarInt(playerid, "Oldu", 2);
        new Float:pX, Float:pY, Float:pZ, Float:pA, pINT, pVW;
        GetPlayerPos(playerid, pX, pY, pZ);
        GetPlayerFacingAngle(playerid, pA);
        pINT = GetPlayerInterior(playerid);
        pVW = GetPlayerVirtualWorld(playerid);
        SetPVarFloat(playerid, "OlumX", pX);
        SetPVarFloat(playerid, "OlumY", pY);
        SetPVarFloat(playerid, "OlumZ", pZ);
        SetPVarFloat(playerid, "OlumA", pA);
        SetPVarInt(playerid, "OlumINT", pINT);
        SetPVarInt(playerid, "OlumVW", pVW);
        for(new j; j < 12; j++)
        {
            if(PlayerInfo[playerid][pWeapons][j] != 0 && PlayerInfo[playerid][pAmmo][j] > 0)
                AC_GivePlayerWeapon(playerid, PlayerInfo[playerid][pWeapons][j], PlayerInfo[playerid][pAmmo][j]);

            PlayerInfo[playerid][pWeapons][j] = 0;
            PlayerInfo[playerid][pAmmo][j] = 0;
        }
        SetPlayerArmedWeapon(playerid, 0);
    }
    return 1;
}

public OnPlayerGiveDamageActor(playerid, damaged_actorid, Float: amount, weaponid, bodypart)
{
    new Float:a_hp;
    GetActorHealth(damaged_actorid, a_hp);

    if(a_hp > 20) return 1;

    foreach(new pid : Player) if(IsPlayerConnected(pid) && PlayerInfo[pid][pSnakeCamActor] == damaged_actorid)
    {
        DestroyDynamicActor(PlayerInfo[pid][pSnakeCamActor]);
        DestroyPlayerObject(pid, PlayerInfo[pid][pSnakeCamObject]);
        PlayerInfo[pid][pSnakeCamActor] = -1;
        TogglePlayerSpectating(pid, false);
        SetCameraBehindPlayer(pid);
        SetPlayerPos(pid, PlayerInfo[pid][pPosX], PlayerInfo[pid][pPosY], PlayerInfo[pid][pPosZ]);
        SetPlayerFacingAngle(pid, PlayerInfo[pid][pPosA]);
        AC_SetPlayerVirtualWorld(pid, 0);
        SetPlayerInterior(pid, 0);
        SetPlayerHealth(pid, 0);
    }

    return 1;
}

public OnPlayerText(playerid, text[])
{
    if(!IsPlayerConnected(playerid) || !PlayerInfo[playerid][pLogged] || PlayerInfo[playerid][pSnakeCamActor] != -1 || PlayerInfo[playerid][pDeath] || PlayerInfo[playerid][pSnakeCamActor] != -1 || !PlayerInfo[playerid][pKarakterYapti]) return 0;
    new string[256];

    if(PlayerInfo[playerid][pConvOOC] != -1)
    {
        format(string, sizeof(string), text);
        Player_SendPM(playerid, PlayerInfo[playerid][pConvOOC], string); return 0;
    }

    if(GetPVarInt(playerid, "TelefonuCaliyor") > 0 || PlayerInfo[playerid][pMobile] != -1 && PlayerInfo[playerid][pMobile] != POLICE_NUMBER && PlayerInfo[playerid][pMobile] != MECHANIC_NUMBER && PlayerInfo[playerid][pMobile] != TAXI_NUMBER && PlayerInfo[playerid][pMobile] != GOVERNMENT_NUMBER && PlayerInfo[playerid][AramaYanitlandi] == false)
    {
        format(string, sizeof(string), "%s: %s", ReturnRoleplayName(playerid, true), text);
        ProxDetector(10.0, playerid, string, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5, true);
        return 0;
    }

    if(PlayerInfo[playerid][pInCasinoWheel])
    {
        new bool:colorExists;

        for(new i, j = sizeof(ColorWheelInfo); i < j; i++) if(strcmp(text, ColorWheelInfo[i][colorName], true) == 0)
        {
            if(PlayerInfo[playerid][pCash] < PlayerInfo[playerid][pCasinoWheelBet])
            {
                SunucuMesajiC(playerid, "Yeterli paran yok."); break;
            }

            new building_id = GetPlayerBuilding(playerid, true);

            OAC_GivePlayerMoney(playerid, -PlayerInfo[playerid][pCasinoWheelBet]);
            if(building_id != -1) BuildingInfo[building_id][bCash] += PlayerInfo[playerid][pCasinoWheelBet];

            Casino_StartWheel(playerid, i);
            colorExists = true; break;
        }

        if(!colorExists)
            SunucuMesajiC(playerid, "Geçersiz renk veya paranýz yeterli deðil, tekrar deneyin veya oyundan ayrýlýn. (/casino durdur)");

        return 0;
    }

    if(PlayerInfo[playerid][pMobile] == POLICE_NUMBER || PlayerInfo[playerid][pMobile] == MECHANIC_NUMBER || PlayerInfo[playerid][pMobile] == TAXI_NUMBER || PlayerInfo[playerid][pMobile] == GOVERNMENT_NUMBER)
    {
        new itemid = PlayerInfo[playerid][pPhoneID], location[MAX_ZONE_NAME], Float:playerPos[3];
        new j = PlayerInfo[playerid][pUsingPP];
        new playerNumber = (j == -1) ?  PlayerInfo[playerid][pInvAmount][itemid] : PayPhoneInfo[j][cNumber];
        new str[128], strcek[128];

        GetDynamicPlayerPos(playerid, playerPos[0], playerPos[1], playerPos[2]);
        GetCoords2DZone(playerPos[0], playerPos[1], location, MAX_ZONE_NAME);

        if(PlayerInfo[playerid][AramaYanitlandi]) format(string, sizeof(string), "[Telefon] %s: %s", ReturnRoleplayName(playerid, true), text);
        else if(!PlayerInfo[playerid][AramaYanitlandi]) format(string, sizeof(string), "%s: %s", ReturnRoleplayName(playerid, true), text);

        ProxDetector(15.0, playerid, string, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5, true, false, true);
        SendClientMessageEx(playerid, COLOR_FADE1, string);
        LogYaz(playerid, string, -1);
        switch(PlayerInfo[playerid][pGovernment]) {
            case 1: {
                format(str, sizeof(str), "%s", text);
                SetPVarString(playerid,"ihbaricerik",str);
                PlayerInfo[playerid][pGovernment] = 2;
                SendClientMessageEx(playerid, COLOR_GREY, "Government Operatörü: Anlaþýldý, bulunduðunuz konumu tam olarak tarif edin.");
            }
            case 2: {
                SendClientMessageEx(playerid, COLOR_GREY, "Government Operatörü: Ýsteðiniz alýndý, ilgili birimler bilgilendirildi.");
                new factionType = GOVERNMENT;
                foreach(new f : Factions)
                {
                    if(!FactionInfo[f][fExists] || Faction_GetType(f) != factionType) continue;             
                    new payPhoneKullanilmis = 0;
                    foreach(new p: PayPhones) if(PayPhoneInfo[p][cExists]) {
                        if(PayPhoneInfo[p][cNumber] == playerNumber) {
                            payPhoneKullanilmis = 1;
                            break;
                        }
                    }
                    new kullaniciAdi[MAX_PLAYER_NAME];
                    if(payPhoneKullanilmis)
                        format(kullaniciAdi, MAX_PLAYER_NAME, "Telefon Kulübesi");
                    else
                        format(kullaniciAdi, MAX_PLAYER_NAME, "%s", ReturnRoleplayName(playerid));
                    SendFactionMessageTR(f, "___________________________[Yeni 333 Aramasý]___________________________");
                    SendFactionMessageTR(f, "Arama Yapan: %s, Numara: %d, Lokasyon: %s", kullaniciAdi, playerNumber, location);
                    GetPVarString(playerid, "ihbaricerik", strcek, sizeof(strcek));
                    SendFactionMessageTR(f, "Ýstek içeriði: %s", strcek);
                    SendFactionMessageTR(f, "Tarif edilen adres: %s", text);
                    SendFactionMessageTR(f, "___________________________[Yeni 333 Aramasý]___________________________");
                }
                Phone_HangupCall(playerid);
                DeletePVar(playerid,"ihbaricerik");
            }
        }
        switch(PlayerInfo[playerid][pEmergency])
        {
            case 1:
            {
                //if(strfind(text, "polis", true) != -1)
                if(!strfind(text, "polis", true) || !strfind(text, "pd", true) || !strfind(text, "lspd", true) || !strfind(text, "memur", true) || !strfind(text, "sasd", true))
                {
                    PlayerInfo[playerid][pEmergency] = 2;
                    SendClientMessageEx(playerid, COLOR_GREY, "911 Operatörü: Polis departmanýna yönlendirildiniz, acil çaðrýnýz nedir?");
                }
                //else if(strfind(text, "yangin", true) != -1)
                else if(!strfind(text, "hastane", true) || !strfind(text, "yangýn", true) || !strfind(text, "Ýtfaiye", true) || !strfind(text, "yangin", true) || !strfind(text, "itfaiye", true) || !strfind(text, "emt", true) || !strfind(text, "paramedik", true) || !strfind(text, "lsfd", true) || !strfind(text, "lsmd", true) || !strfind(text, "ambulans", true))
                {
                    PlayerInfo[playerid][pEmergency] = 3;
                    SendClientMessageEx(playerid, COLOR_GREY, "911 Operatörü: Yangýn ve kurtarma departmanýna yönlendirildiniz, acil çaðrýnýz nedir?");
                }
                else SendClientMessageEx(playerid, COLOR_GREY, "911 Operatörü: Çaðrýnýz anlaþýlmadý, hangi acil servisi talep ediyorsunuz? (Polis/Ambulans/Ýtfaiye)");
            }
            case 2:
            {
                format(str, sizeof(str), "%s", text);
                SetPVarString(playerid,"ihbaricerik",str);
                PlayerInfo[playerid][pEmergency] = 4;
                SendClientMessageEx(playerid, COLOR_GREY, "911 Operatörü: Anlaþýldý, bulunduðunuz konumu tam olarak tarif edin.");
            }
            case 3:
            {
                format(str, sizeof(str), "%s", text);
                SetPVarString(playerid,"ihbaricerik",str);
                PlayerInfo[playerid][pEmergency] = 5;
                SendClientMessageEx(playerid, COLOR_GREY, "911 Operatörü: Anlaþýldý, bulunduðunuz konumu tam olarak tarif edin.");
            }
            case 4:
            {
                SendClientMessageEx(playerid, COLOR_GREY, "911 Operatörü: Ýhbarýnýz alýndý, ilgili birimler bölgeye yönlendiriliyor.");

                new factionType = POLICE, ihbarIDnew;

                foreach(new f : Factions)
                {
                    if(!FactionInfo[f][fExists] || Faction_GetType(f) != factionType) continue;
                    if(GetPVarInt(playerid, "YoneticiAramasi") == 0) {
                        new payPhoneKullanilmis = 0;
                        foreach(new p: PayPhones) if(PayPhoneInfo[p][cExists]) {
                            if(PayPhoneInfo[p][cNumber] == playerNumber) {
                                payPhoneKullanilmis = 1;
                                break;
                            }
                        }
                        new kullaniciAdi[MAX_PLAYER_NAME];
                        if(payPhoneKullanilmis)
                            format(kullaniciAdi, MAX_PLAYER_NAME, "Telefon Kulübesi");
                        else
                            format(kullaniciAdi, MAX_PLAYER_NAME, "%s", ReturnRoleplayName(playerid));
                        SendFactionMessage(f, "___________________________[Yeni 911 Ýhbarý]___________________________");
                        SendFactionMessage(f, "Arama Yapan: %s, Numara: %d, Lokasyon: %s", kullaniciAdi, playerNumber, location);
                        SendFactionMessage(f, "Ýhtiyaç duyulan acil servis: LSPD");
                        GetPVarString(playerid, "ihbaricerik", strcek, sizeof(strcek));
                        SendFactionMessage(f, "Ýhbar içeriði: %s", strcek);
                        SendFactionMessage(f, "Tarif edilen adres: %s", text);
                        SendFactionMessage(f, "___________________________[Yeni 911 Ýhbarý]___________________________");
                        ihbarIDnew = IhbarIDBul();
                        Iter_Add(Ihbarlar, ihbarIDnew);
                        IhbarInfo[ihbarIDnew][ihbarExists] = 1;
                        format(IhbarInfo[ihbarIDnew][ihbarYapan], MAX_PLAYER_NAME, "%s", kullaniciAdi);
                        format(IhbarInfo[ihbarIDnew][ihbarAsilKonum], MAX_ZONE_NAME, "%s", location);
                        format(IhbarInfo[ihbarIDnew][ihbarIcerigi], 128, "%s", strcek);
                        format(IhbarInfo[ihbarIDnew][ihbarTarifKonum], 128, "%s", text);
                        IhbarInfo[ihbarIDnew][ihbarYonlenenEkipSayisi] = 0;
                        IhbarInfo[ihbarIDnew][ihbarCozuldu] = 0;
                        IhbarInfo[ihbarIDnew][ihbarNumara] = playerNumber;
                        IhbarKaydet(ihbarIDnew, 1);
                    } else {
                        SendFactionMessage(f, "___________________________[Yeni 911 Ýhbarý]___________________________");
                        SendFactionMessage(f, "Arama Yapan: Vatandaþ, Numara: Bilinmiyor, Lokasyon: %s", location);
                        SendFactionMessage(f, "Ýhtiyaç duyulan acil servis: LSPD");
                        GetPVarString(playerid, "ihbaricerik", strcek, sizeof(strcek));
                        SendFactionMessage(f, "Ýhbar içeriði: %s", strcek);
                        SendFactionMessage(f, "Tarif edilen adres: %s", text);
                        SendFactionMessage(f, "___________________________[Yeni 911 Ýhbarý]___________________________");
                        ihbarIDnew = IhbarIDBul();
                        Iter_Add(Ihbarlar, ihbarIDnew);
                        IhbarInfo[ihbarIDnew][ihbarExists] = 1;
                        format(IhbarInfo[ihbarIDnew][ihbarYapan], MAX_PLAYER_NAME, "Vatandaþ");
                        format(IhbarInfo[ihbarIDnew][ihbarAsilKonum], MAX_ZONE_NAME, "%s", location);
                        format(IhbarInfo[ihbarIDnew][ihbarIcerigi], 128, "%s", strcek);
                        format(IhbarInfo[ihbarIDnew][ihbarTarifKonum], 128, "%s", text);
                        IhbarInfo[ihbarIDnew][ihbarYonlenenEkipSayisi] = 0;
                        IhbarInfo[ihbarIDnew][ihbarCozuldu] = 0;
                        IhbarInfo[ihbarIDnew][ihbarNumara] = 0;
                        IhbarKaydet(ihbarIDnew, 1);
                        DeletePVar(playerid, "YoneticiAramasi");
                        SunucuMesajiC(playerid, "Yönetici arama modu kapatýldý, artýk 911 ihbarlarýnda isminiz ve numaranýz görünecek.");
                    }
                }
                Phone_HangupCall(playerid);
                DeletePVar(playerid,"ihbaricerik");
            }
            case 5:
            {
                SendClientMessageEx(playerid, COLOR_GREY, "911 Operatörü: Ýhbarýnýz alýndý, ilgili birimler bölgeye yönlendiriliyor.");

                new factionType = MEDICAL;

                foreach(new f : Factions)
                {
                    if(!FactionInfo[f][fExists] || Faction_GetType(f) != factionType) continue;
                    if(GetPVarInt(playerid, "YoneticiAramasi") == 0) {
                        new payPhoneKullanilmis = 0;
                        foreach(new p: PayPhones) if(PayPhoneInfo[p][cExists]) {
                            if(PayPhoneInfo[p][cNumber] == playerNumber) {
                                payPhoneKullanilmis = 1;
                                break;
                            }
                        }
                        new kullaniciAdi[MAX_PLAYER_NAME];
                        if(payPhoneKullanilmis)
                            format(kullaniciAdi, MAX_PLAYER_NAME, "Telefon Kulübesi");
                        else
                            format(kullaniciAdi, MAX_PLAYER_NAME, "%s", ReturnRoleplayName(playerid));
                        SendFactionMessageTR(f, "___________________________[Yeni 911 Ýhbarý]___________________________");
                        SendFactionMessageTR(f, "Arama Yapan: %s, Numara: %d, Lokasyon: %s", kullaniciAdi, playerNumber, location);
                        SendFactionMessageTR(f, "Ýhtiyaç duyulan acil servis: LSFD");
                        GetPVarString(playerid, "ihbaricerik", strcek, sizeof(strcek));
                        SendFactionMessageTR(f, "Ýhbar içeriði: %s", strcek);
                        SendFactionMessageTR(f, "Tarif edilen adres: %s", text);
                        SendFactionMessageTR(f, "___________________________[Yeni 911 Ýhbarý]___________________________");
                    } else {
                        SendFactionMessageTR(f, "___________________________[Yeni 911 Ýhbarý]___________________________");
                        SendFactionMessageTR(f, "Arama Yapan: Vatandaþ, Numara: Bilinmiyor, Lokasyon: %s", location);
                        SendFactionMessageTR(f, "Ýhtiyaç duyulan acil servis: LSFD");
                        GetPVarString(playerid, "ihbaricerik", strcek, sizeof(strcek));
                        SendFactionMessageTR(f, "Ýhbar içeriði: %s", strcek);
                        SendFactionMessageTR(f, "Tarif edilen adres: %s", text);
                        SendFactionMessageTR(f, "___________________________[Yeni 911 Ýhbarý]___________________________");
                        DeletePVar(playerid, "YoneticiAramasi");
                        SunucuMesajiC(playerid, "Yönetici arama modu kapatýldý, artýk 911 ihbarlarýnda isminiz ve numaranýz görünecek.");
                    }
                }
                Phone_HangupCall(playerid);
                DeletePVar(playerid,"ihbaricerik");
            }
            default: return 0;
        }

        return 0;
    }
    else if(PlayerInfo[playerid][pMobile] != -1)
    {
        new message[256], id = PlayerInfo[playerid][pMobile];

        format(message, sizeof(message), text);

        if(IsPlayerConnected(id) && PlayerInfo[id][pLogged])
        {
            new cinsiyet[2], cinsiyet2[6];
            switch(PlayerInfo[playerid][pSex]) {
                case 0: {
                    format(cinsiyet, sizeof(cinsiyet), "E");
                    format(cinsiyet2, sizeof(cinsiyet2), "Erkek");
                }
                case 1:
                {
                    format(cinsiyet, sizeof(cinsiyet), "K");
                    format(cinsiyet2, sizeof(cinsiyet2), "Kadýn");
                }
            }
            if(PlayerInfo[id][pSpeakerPhone])
            {
                format(string, sizeof(string), "[Telefon Hoparlörü] %s sesi: %s", cinsiyet2, text);
                SendClientMessageEx(id, COLOR_FADE1, string);

                foreach(new p : Player) if(PlayerInfo[p][pTelDinle] && PlayerInfo[p][pDinlenenTelNo] == GetPVarInt(playerid, "AradigiNumara"))
                {
                    SunucuMesaji(p, "%d > %d: %s", GetPVarInt(playerid, "AradigiNumara"), GetPVarInt(id, "AradigiNumara"), text);
                }

                foreach(new p : Player) if(PlayerInfo[p][pTelDinle] && PlayerInfo[p][pDinlenenTelNo] == GetPVarInt(id, "AradigiNumara"))
                {
                    SunucuMesaji(p, "%d > %d: %s", GetPVarInt(playerid, "AradigiNumara"), GetPVarInt(id, "AradigiNumara"), message);
                }

                ProxDetector(10.0, id, string, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5, true, false, true);
            } else {
                if(GetPVarInt(id, "RehberdeVar") == 1) {
                    if(GetPVarInt(id, "KulakliklaMuzik")) {
                        format(string, sizeof(string), "[Telefon] [%s] %s: %s", cinsiyet, RehberIsim[id], message);
                        SendClientMessageEx(id, COLOR_FADE1, string);
                        if(BirlikteDinlenen[id] != -1)
                            SendClientMessageEx(BirlikteDinlenen[id], COLOR_YELLOW, string);

                    } else {
                        format(string, sizeof(string), "[Telefon] [%s] %s: %s", cinsiyet, RehberIsim[id], message);
                        SendClientMessageEx(id, COLOR_FADE1, string);

                        foreach(new p : Player) if(PlayerInfo[p][pTelDinle] && PlayerInfo[p][pDinlenenTelNo] == GetPVarInt(playerid, "AradigiNumara"))
                        {
                            SunucuMesaji(p, "%d > %d: %s", GetPVarInt(playerid, "AradigiNumara"), GetPVarInt(id, "AradigiNumara"), message);
                        }

                        foreach(new p : Player) if(PlayerInfo[p][pTelDinle] && PlayerInfo[p][pDinlenenTelNo] == GetPVarInt(id, "AradigiNumara"))
                        {
                            SunucuMesaji(p, "%d > %d: %s", GetPVarInt(playerid, "AradigiNumara"), GetPVarInt(id, "AradigiNumara"), message);
                        }
                    }
                }
                else {
                    format(string, sizeof(string), "[Telefon] [%s] %d: %s", cinsiyet, GetPVarInt(id, "AradigiNumara"), message);
                    SendClientMessageEx(id, COLOR_FADE1, string);

                    foreach(new p : Player) if(PlayerInfo[p][pTelDinle] && PlayerInfo[p][pDinlenenTelNo] == GetPVarInt(playerid, "AradigiNumara"))
                    {
                        SunucuMesaji(p, "%d > %d: %s", GetPVarInt(playerid, "AradigiNumara"), GetPVarInt(id, "AradigiNumara"), message);
                    }

                    foreach(new p : Player) if(PlayerInfo[p][pTelDinle] && PlayerInfo[p][pDinlenenTelNo] == GetPVarInt(id, "AradigiNumara"))
                    {
                        SunucuMesaji(p, "%d > %d: %s", GetPVarInt(playerid, "AradigiNumara"), GetPVarInt(id, "AradigiNumara"), message);
                    }

                }
            }
        }
        if(PlayerInfo[playerid][AramaYanitlandi]) format(string, sizeof(string), "[Telefon] %s: %s", ReturnRoleplayName(playerid, true), text);
        else if(!PlayerInfo[playerid][AramaYanitlandi]) format(string, sizeof(string), "%s: %s", ReturnRoleplayName(playerid, true), text);
        ProxDetector(15.0, playerid, string, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5, true, false, true);

        if(PlayerInfo[playerid][AramaYanitlandi]) format(string, sizeof(string), "[Telefon] %s: %s", ReturnRoleplayName(playerid, true), text);
        else if(!PlayerInfo[playerid][AramaYanitlandi]) format(string, sizeof(string), "%s: %s", ReturnRoleplayName(playerid, true), text);
        SendClientMessageEx(playerid, COLOR_FADE1, string);
        return 0;
    }

    else if(PlayerInfo[playerid][pTalkingLive] != -1)
    {
        new targetid = PlayerInfo[playerid][pTalkingLive];

        if(!IsPlayerConnected(targetid) || !PlayerInfo[targetid][pLogged])
            PlayerInfo[playerid][pTalkingLive] = -1;

        foreach(new j : Player)
        {
            if(!IsPlayerConnected(j) || !PlayerInfo[j][pNews])continue;
            format(string, sizeof string, "[Canlý Yayýn] %s: %s", ReturnRoleplayName(playerid, true), text);
            SendFormattedMessage(j, COLOR_LIGHTGREEN, "[Canlý Yayýn] %s: %s", ReturnRoleplayName(playerid, true), text);

        }

        return 0;
    }

    if(!strcmp(text, ":)", true))
    {
        PlayerME(playerid, "gülümser.");
        return 0;
    }
    if(!strcmp(text, ";)", true))
    {
        PlayerME(playerid, "göz kýrpar.");
        return 0;
    }
    if(!strcmp(text, ":D", true))
    {
        PlayerME(playerid, "kahkaha atar.");
        return 0;
    }
    if(!strcmp(text, ":P", true))
    {
        PlayerME(playerid, "dil çýkartýr.");
        return 0;
    }
    if(!strcmp(text, ":(", true))
    {
        PlayerME(playerid, "somurtur.");
        return 0;
    }
    if(!strcmp(text, ":O", true))
    {
        PlayerME(playerid, "þaþýrýr.");
        return 0;
    }

    if(PlayerInfo[playerid][pAdmin] == 999)
    {
        format(string, sizeof(string), "(( [%d] {ff9900}%s{FFFFFF}: %s ))", playerid, ReturnRoleplayName(playerid), text);
        ProxDetector(15.0, playerid, string, COLOR_WHITE, COLOR_WHITE, COLOR_WHITE, COLOR_WHITE, COLOR_WHITE);
    }
    else
    {
        if(!PlayerInfo[playerid][pCuffed] && !PlayerInfo[playerid][pLoopAnim] && !PlayerInfo[playerid][pStunned] && PlayerInfo[playerid][pChatStyle] && !IsPlayerInAnyVehicle(playerid))
        {
            switch(PlayerInfo[playerid][pChatStyle])
            {
                case 1: ApplyAnimation(playerid, "GANGS", "prtial_gngtlkA", 4.1,1,0,0,1,1,1);
                case 2: ApplyAnimation(playerid, "GANGS", "prtial_gngtlkB", 4.1,1,0,0,1,1,1);
                case 3: ApplyAnimation(playerid, "GANGS", "prtial_gngtlkE", 4.1,1,0,0,1,1,1);
                case 4: ApplyAnimation(playerid, "GANGS", "prtial_gngtlkF", 4.1,1,0,0,1,1,1);
                case 5: ApplyAnimation(playerid, "GANGS", "prtial_gngtlkG", 4.1,1,0,0,1,1,1);
                case 6: ApplyAnimation(playerid, "GANGS", "prtial_gngtlkH", 4.1,1,0,0,1,1,1);
                case 7: ApplyAnimation(playerid, "GANGS", "prtial_gngtlkG", 4.1,1,0,0,1,1,1);
                case 8: ApplyAnimation(playerid, "GANGS", "prtial_gngtlkH", 4.1,1,0,0,1,1,1);
                case 9: ApplyAnimation(playerid, "GANGS", "prtial_gngtlkD", 4.1,1,1,1,1,1,1);
            }

            SetTimerEx("StopAnim", 50 * strlen(text), false, "d", playerid);
        }

        if(GetPlayerVirtualWorld(playerid) > 0)
        {
            format(string, sizeof(string), "%s: %s", ReturnRoleplayName(playerid, true), text);
            ProxDetector(7.0, playerid, string, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5, true);
        }
        else
        {
            format(string, sizeof(string), "%s: %s", ReturnRoleplayName(playerid, true), text);
            //LogYaz(playerid, string, -1);
            ProxDetector(15.0, playerid, string, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5, true);
        }
    }

    return 0;
}

public OnPlayerCommandText(playerid, cmdtext[])
{
    return 1;
}

public OnPlayerLeaveCheckpoint(playerid)
{
    return AC_DisablePlayerCheckpoint(playerid);
}

public OnPlayerClickMap(playerid, Float:fX, Float:fY, Float:fZ)
{
    if(PlayerInfo[playerid][pAdmin] < 1/* || PlayerInfo[playerid][Rehineyim]*/) return 0;

    PlayerInfo[playerid][pClickedX] = fX;
    PlayerInfo[playerid][pClickedY] = fY;
    MapAndreas_FindZ_For2DCoord(fX, fY, PlayerInfo[playerid][pClickedZ]);

    return PlayerInfo[playerid][pClickedTick] = GetTickCount();
}

public OnPlayerEnterCheckpoint(playerid)
{
    if(GetPVarInt(playerid, "AracParkCP")) {
        DeletePVar(playerid, "AracParkCP");
        AC_DisablePlayerCheckpoint(playerid);
    }
    if(PlayerInfo[playerid][CheckpointEnabled] == true)
        PlayerInfo[playerid][CheckpointEnabled] = false;

    new lastTick = GetTickCount() - PlayerInfo[playerid][pTeleportLastTick];

    if(PlayerInfo[playerid][pAdmin] < 2 && !IsPlayerInRangeOfPoint(playerid, 50.0, PlayerInfo[playerid][CheckpointX], PlayerInfo[playerid][CheckpointY], PlayerInfo[playerid][CheckpointZ]) && lastTick < 5000)
        AC_Detect(playerid, AC_TELEPORT_CODE);

    new vid = GetPlayerVehicleID(playerid);

    if(IsPlayerInRangeOfPoint(playerid, 2.0, SELL_X, SELL_Y, SELL_Z) || PlayerInfo[playerid][pLocalize])
        AC_DisablePlayerCheckpoint(playerid);

    if(PlayerInfo[playerid][pBalik] > 0 && FishingBoat(vid) && GetFishingZone(playerid, true) != -1)
    {
        new valueZone = GetFishingZone(playerid, true);

        valueZone = !valueZone;

        AC_DisablePlayerCheckpoint(playerid);
        PlayerInfo[playerid][pZone][valueZone] = 0;
    }

    if(PlayerInfo[playerid][pSelectedRequest] != -1 && Pickup_Nearest(playerid, ELEMENT_COMPANY) != -1)
    {
        new tmpID = PlayerInfo[playerid][pSelectedRequest];

        AC_SetPlayerCheckpoint(playerid, BuildingInfo[tmpID][bPosX], BuildingInfo[tmpID][bPosY], BuildingInfo[tmpID][bPosZ], 1.0);
        SunucuMesajiC(playerid, "Mallarý yükleyin ve indirmek için kontrol noktasýna gidin.");
    }

    else if(PlayerInfo[playerid][pSelectedRequest] != -1 || Pickup_Nearest(playerid, ELEMENT_COMPANY) != -1)
        AC_DisablePlayerCheckpoint(playerid);

    return 1;
}

public OnPlayerLeaveRaceCheckpoint(playerid)
{
    return 1;
}

public OnRconCommand(cmd[])
{
    return 1;
}

public OnPlayerRequestSpawn(playerid)
{
    return 0;
}

public OnObjectMoved(objectid)
{
    return 1;
}

public OnPlayerObjectMoved(playerid, objectid)
{
    return 1;
}

public OnPlayerPickUpDynamicPickup(playerid, pickupid)
{
    if(!IsValidDynamicPickup(pickupid))return 1;

    new string[300];

    Streamer_GetArrayData(STREAMER_TYPE_PICKUP, pickupid, E_STREAMER_EXTRA_ID, g_pks, siz_g_pks);

    new id = g_pks[cp_id];
    new type = g_pks[cp_type];

    switch(type)
    {
        case ELEMENT_BUILDING:
        {
            if(BuildingInfo[id][bType] != BUILDING && BuildingInfo[id][bType] != BANK)
            {
                if(BuildingInfo[id][bOwner])
                {
                    if(BuildingInfo[id][bType] != PNS && BuildingInfo[id][bType] != FUEL_STATION)format(string, sizeof(string), (!BuildingInfo[id][bEntrance]) ? ("~w~ID:~y~ %d") : ("~w~ID:~y~ %d~n~~w~Giris Ucreti ~y~$%d"), id, BuildingInfo[id][bEntrance]);
                    else format(string, sizeof(string), ("~w~ID:~y~ %d~n~~w~Servis Ucreti: ~y~$%d"), id, BuildingInfo[id][bPrices][0]);

                    if(PlayerInfo[playerid][pAdmin] > SUPPORTER) format(string, sizeof(string), "%s~n~~w~Sahip:~y~ %s", string, GetCharacterName(BuildingInfo[id][bOwner]));
                    if(PlayerInfo[playerid][pID] == BuildingInfo[id][bOwner]) Player_Info(playerid, "Kullanilabilir Komut: ~y~/isletme~w~");
                }
                else format(string, sizeof(string), "~w~ID:~y~ %d~n~~w~Fiyat: ~y~$%d~n~~w~/isletmesatinal", id, BuildingInfo[id][bPrice]);
            }
            else format(string, sizeof(string), (!BuildingInfo[id][bEntrance]) ? ("~w~ID:~y~ %d") : ("ID:~y~ %d~n~~w~Giris Ucreti ~y~$%d"), id, BuildingInfo[id][bEntrance]);

            if(PlayerInfo[playerid][pAdmin] > SUPPORTER)format(string, sizeof(string), "%s~n~~w~Tip: ~y~%d", string, BuildingInfo[id][bType]);
            if(BuildingInfo[id][bType] == PNS) Player_Info(playerid, "~y~/tamir~w~");

            GameTextForPlayer(playerid, string, 2000, 5);
        }
        case ELEMENT_OTEL: { // otel pickup
            format(string, sizeof(string), "~w~Otel Odasi %d~n~~y~Sahip: ~w~%s~n~~y~Fiyat: ~w~$%d", id, GetCharacterName(OtelInfo[id][otelSahibi]), OtelInfo[id][otelUcret]);
            GameTextForPlayer(playerid, string, 2000, 5);
        }
        case ELEMENT_LABORATORY:
        {
            format(string, sizeof(string), "~w~~n~Laboratuvar");

            if(PlayerInfo[playerid][pAdmin] > SUPPORTER) format(string, sizeof(string), "%s~n~ID:~y~ %d", string, id);

            GameTextForPlayer(playerid, string, 2000, 5);
            Player_Info(playerid, "Uyusturucu uretmek icin ~y~/uyusturucu~w~ komutunu kullan.");
        }
        case ELEMENT_INDUSTRY:
        {
            format(string, sizeof(string), "Siparis Noktasi");
            if(PlayerInfo[playerid][pAdmin] > SUPPORTER) format(string, sizeof(string), "%s~n~ID:~y~ %d", string, id);

            GameTextForPlayer(playerid, string, 2000, 5);
        }
        case ELEMENT_COMPANY:
        {
            format(string, sizeof(string), "~w~~n~Sirket");

            if(PlayerInfo[playerid][pAdmin] > SUPPORTER) format(string, sizeof(string), "%s~n~ID:~y~ %d", string, id);

            GameTextForPlayer(playerid, string, 2000, 5);
            Player_Info(playerid, "~y~/koli~w~.");
        }
        case ELEMENT_LICENSE: if(!IsPlayerInAnyVehicle(playerid) && PlayerInfo[playerid][Type] == -1)
        {
            static const licenseString[][32] = {"surucu", "denizcilik", "ucus"};

            format(string, sizeof(string), "%s lisans sinavi icin ~y~/satinal~w~ kullan.", licenseString[id]);
            Player_Info(playerid, string);
        }
        case ELEMENT_DEALER: if(!IsPlayerInAnyVehicle(playerid)) Player_Info(playerid, "~y~/satinal~w~");
        case ELEMENT_JOB: Player_Info(playerid, "~y~/meslekgir~w~");
        case ELEMENT_ARREST: Player_Info(playerid, "~y~/tutukla~w~");
        case ELEMENT_SELL_FISH: Player_Info(playerid, "~y~/baliksat~w~");
        case ELEMENT_TELEPORT:
        {
            format(string, sizeof(string), "~w~~n~Teleport");

            if(PlayerInfo[playerid][pAdmin] > SUPPORTER) format(string, sizeof(string), "%s~n~ID:~y~ %d", string, id);

            GameTextForPlayer(playerid, string, 2000, 5);
            Player_Info(playerid, "~y~/gir~w~");
        }
        case ELEMENT_ATM: {
            if(!IsPlayerInAnyVehicle(playerid))
                Player_Info(playerid, "~y~/atm~w~");
        }
        case ELEMENT_GYM: {
            Player_Info(playerid, "~y~/dovusstili~w~");
        }
        case ELEMENT_DOLAP:
        {
            Player_Info(playerid, "~y~/ekipman~w~");
        }
        case ELEMENT_BALIKYEM:
        {
            Player_Info(playerid, "~y~/balikyemal~w~");
        }
        case VERONAMALL: Player_Info(playerid, "~y~/satinal~w~");
        case ELEMENT_COPSAT: Player_Info(playerid, "~y~/copkaristir envanter~w~");
        default: return 1;
    }

    PlayerInfo[playerid][pPickupID] = pickupid;

    return 1;
}

public OnVehicleSpawn(vehicleid)
{
    VehicleInfo[vehicleid][vYakit] = 0;
    Vehicle_ClearCargo(vehicleid);
    if(VehicleInfo[vehicleid][vDestroyed] && VehicleInfo[vehicleid][vFaction] == INVALID_VEHICLE_ID && VehicleInfo[vehicleid][vJob] == -1)
    {
        VehicleInfo[vehicleid][vDestroyed] = false;
        AC_SetVehicleHealth(vehicleid, 350.0);
    }
    else Vehicle_Respray(vehicleid);
    
    VehicleInfo[vehicleid][vKiralayan] = -1;
    VehicleInfo[vehicleid][vKiralik] = -1;

    Tuning_SetComponents(vehicleid);
    SetVehicleParamsEx(vehicleid,  VEHICLE_PARAMS_OFF, VEHICLE_PARAMS_OFF, VEHICLE_PARAMS_OFF, VehicleInfo[vehicleid][vLocked], VEHICLE_PARAMS_OFF, VEHICLE_PARAMS_OFF, VehicleInfo[vehicleid][vObje]);
    ChangeVehicleColor(vehicleid, VehicleInfo[vehicleid][vFirstColor], VehicleInfo[vehicleid][vSecondColor]);
    SetVehicleVirtualWorld(vehicleid, VehicleInfo[vehicleid][vWorld]);
    LinkVehicleToInterior(vehicleid, VehicleInfo[vehicleid][vInterior]);
    Vehicle_SetPlate(vehicleid);
//  SetVehicleToRespawn(vehicleid);

    VehicleInfo[vehicleid][vObje] = VEHICLE_PARAMS_OFF;

    SetVehiclePos(vehicleid, VehicleInfo[vehicleid][vSpawnPosX], VehicleInfo[vehicleid][vSpawnPosY], VehicleInfo[vehicleid][vSpawnPosZ]);
    SetVehicleZAngle(vehicleid, VehicleInfo[vehicleid][vSpawnPosA]);

    if(VehicleInfo[vehicleid][vCallSign] == true)
    {
        DestroyDynamic3DTextLabelEx(VehicleInfo[vehicleid][vSignText]);
        VehicleInfo[vehicleid][vCallSign] = false;
    }

    if(Faction_GetType(VehicleInfo[vehicleid][vFaction]) == POLICE && VehicleInfo[vehicleid][vOwner] == -1)
    {
        for(new j; j < MAX_CAR_WEAPONS; j++)
            VehicleInfo[vehicleid][vSlotUsed][j] = 0;
    }

    if(VehicleInfo[vehicleid][vSirenOn] == true)
    {
        DestroyDynamicObjectEx(VehicleInfo[vehicleid][vSirenObject]);
        VehicleInfo[vehicleid][vSirenOn] = false;
    }

    VehicleInfo[vehicleid][vShowingCargo] = false;
    DestroyDynamic3DTextLabelEx(VehicleInfo[vehicleid][vSignText]);
    VehicleInfo[vehicleid][vCallSign] = false;
    VehicleInfo[vehicleid][vEngine] = 0;
    VehicleInfo[vehicleid][vLights] = 0;
    VehicleInfo[vehicleid][vBoot] = 0;
    VehicleInfo[vehicleid][vBonnet] = 0;
    if(VehicleInfo[vehicleid][vTemporary]) VehicleInfo[vehicleid][vFuel] = 100;

    return 1;
}

public OnVehicleDeath(vehicleid, killerid)
{
    VehicleInfo[vehicleid][vKiralayan] = -1;
    VehicleInfo[vehicleid][vKiralik] = -1;
    
    if(VehicleInfo[vehicleid][vIAKS] > 0)
    {
        new kai;
        foreach(new i : KiralikAraclar)
        {
            if(KiralikArac[i][kaID] == VehicleInfo[vehicleid][vID])
                kai = i;
        }
        
        KiralikArac[kai][kaKiralandi] = false;
        KiralikArac[kai][kaKiralayan] = -1;
        VehicleInfo[vehicleid][vYakit] = 0;

        if(VehicleInfo[vehicleid][vLocked])
        {
            VehicleInfo[vehicleid][vLocked] = !VehicleInfo[vehicleid][vLocked];
            SetVehicleParamsEx(vehicleid, VehicleInfo[vehicleid][vEngine], VehicleInfo[vehicleid][vLights], VEHICLE_PARAMS_OFF, VehicleInfo[vehicleid][vLocked], VehicleInfo[vehicleid][vBonnet], VehicleInfo[vehicleid][vBoot], VehicleInfo[vehicleid][vObje]);
        }
        
        Vehicle_ClearCargo(vehicleid);
        
        if(vehicleid != 0)
        {
            if(VehicleInfo[vehicleid][vSandik] != -1) {
                SandikSil(VehicleInfo[vehicleid][vSandik]);
                VehicleInfo[vehicleid][vSandik] = -1;
            }
            foreach(new id: Tezgahlar) {
                if(StandInfo[id][sExists]) {
                    if(StandInfo[id][saracID] == vehicleid) {
                        foreach(new i: Player) if(PlayerInfo[i][pLogged]) {
                            if(PlayerInfo[i][pID] == StandInfo[id][sID]) {
                                PlayerInfo[i][pActigiTezgah] = -1;
                                break;
                            }
                        }
                        StandInfo[id][sExists] = 0;
                        StandInfo[id][sID] = -1;
                        format(StandInfo[id][sKuran], MAX_PLAYER_NAME, "Yok");
                        StandInfo[id][sModel] = 0;
                        DestroyDynamicObjectEx(StandInfo[id][sObje]);
                        StandInfo[id][sPosX] = 0.0;
                        StandInfo[id][sPosY] = 0.0;
                        StandInfo[id][sPosZ] = 0.0;
                        StandInfo[id][sRotX] = 0.0;
                        StandInfo[id][sRotY] = 0.0;
                        StandInfo[id][sRotZ] = 0.0;
                        StandInfo[id][sMasaModel] = 0;
                        DestroyDynamicObjectEx(StandInfo[id][sMasaObje]);
                        StandInfo[id][sMasaPosX] = 0.0;
                        StandInfo[id][sMasaPosY] = 0.0;
                        StandInfo[id][sMasaPosZ] = 0.0;
                        StandInfo[id][sMasaRotX] = 0.0;
                        StandInfo[id][sMasaRotY] = 0.0;
                        StandInfo[id][sMasaRotZ] = 0.0;
                        if(IsValidDynamic3DTextLabel(StandInfo[id][sLabel]))
                            DestroyDynamic3DTextLabelEx(StandInfo[id][sLabel]);
                        format(StandInfo[id][sLabelText], 128, "");
                        StandInfo[id][sArabali] = false;
                        for(new i; i < 3; i++) {
                            StandInfo[id][sCalisan][i] = -1;
                            StandInfo[id][sUrunFiyati][i] = 0;
                            format(StandUrunInfo[id][i], 80, "Yok");
                            format(StandIcecekInfo[id][i], 80, "Yok");
                            StandInfo[id][sIcecekFiyati][i] = 0;
                        }
                        StandInfo[id][saracID] = -1;
                        Iter_Remove(Tezgahlar, id);
                        break;
                    }
                }
            }
        }
        Vehicle_Respawn2(vehicleid);
        return 1;
    }
    
    VehicleInfo[vehicleid][vYakit] = 0;
    if(vehicleid != 0)
    {
        new model = GetVehicleModel(vehicleid);

        if(VehicleInfo[vehicleid][vELM] == true)
        {
            VehicleInfo[vehicleid][vELM] = false;
            KillTimer(ELMTimer[vehicleid]);
            Flash[vehicleid] = 0;
        }
        if(model == 519 || model == 553 || model == 577 || model == 592) foreach (new i : Player)
        {
            if(PlayerInfo[i][pAirPassenger] == vehicleid)
            {
                PlayerInfo[i][pAirPassenger] = -1;
                AC_SetPlayerHealth(i, 0);

                new Float:x, Float:y, Float:z;

                GetPlayerPos(i, x, y, z);
                CreateExplosion(x, y, z, 2, 5.0);
            }
            else continue;
        }

        if(VehicleInfo[vehicleid][vTemporary])
        {
            Vehicle_ClearCargo(vehicleid);
            
            if(VehicleInfo[vehicleid][vFaction] == 65535) Vehicle_Despawn(vehicleid);
            else if(VehicleInfo[vehicleid][vFaction] != 65535) Vehicle_Respawn(vehicleid);
            
            //DestroyVehicle(vehicleid);
            //Iter_Remove(Vehicles, vehicleid);
            
            /*VehicleInfo[vehicleid][vEngineHealth] = (VehicleInfo[vehicleid][vEngineHealth] - 10.0 < 0.0) ? 0.0 : VehicleInfo[vehicleid][vEngineHealth] - 10.0;
            VehicleInfo[vehicleid][vBatteryHealth] = (VehicleInfo[vehicleid][vBatteryHealth] - 10.0 < 0.0) ? 0.0 : VehicleInfo[vehicleid][vBatteryHealth] - 10.0;

            Vehicle_ClearCargo(vehicleid);

            if(VehicleInfo[vehicleid][vFaction] == 65535) Vehicle_Despawn(vehicleid);
            else if(VehicleInfo[vehicleid][vFaction] != 65535) Vehicle_Respawn(vehicleid);*/
        }
        else
        {
            Vehicle_ClearCargo(vehicleid);
            if(VehicleInfo[vehicleid][vSandik] != -1) {
                SandikSil(VehicleInfo[vehicleid][vSandik]);
                VehicleInfo[vehicleid][vSandik] = -1;
            }
            foreach(new id: Tezgahlar) {
                if(StandInfo[id][sExists]) {
                    if(StandInfo[id][saracID] == vehicleid) {
                        foreach(new i: Player) if(PlayerInfo[i][pLogged]) {
                            if(PlayerInfo[i][pID] == StandInfo[id][sID]) {
                                PlayerInfo[i][pActigiTezgah] = -1;
                                break;
                            }
                        }
                        StandInfo[id][sExists] = 0;
                        StandInfo[id][sID] = -1;
                        format(StandInfo[id][sKuran], MAX_PLAYER_NAME, "Yok");
                        StandInfo[id][sModel] = 0;
                        DestroyDynamicObjectEx(StandInfo[id][sObje]);
                        StandInfo[id][sPosX] = 0.0;
                        StandInfo[id][sPosY] = 0.0;
                        StandInfo[id][sPosZ] = 0.0;
                        StandInfo[id][sRotX] = 0.0;
                        StandInfo[id][sRotY] = 0.0;
                        StandInfo[id][sRotZ] = 0.0;
                        StandInfo[id][sMasaModel] = 0;
                        DestroyDynamicObjectEx(StandInfo[id][sMasaObje]);
                        StandInfo[id][sMasaPosX] = 0.0;
                        StandInfo[id][sMasaPosY] = 0.0;
                        StandInfo[id][sMasaPosZ] = 0.0;
                        StandInfo[id][sMasaRotX] = 0.0;
                        StandInfo[id][sMasaRotY] = 0.0;
                        StandInfo[id][sMasaRotZ] = 0.0;
                        if(IsValidDynamic3DTextLabel(StandInfo[id][sLabel]))
                            DestroyDynamic3DTextLabelEx(StandInfo[id][sLabel]);
                        format(StandInfo[id][sLabelText], 128, "");
                        StandInfo[id][sArabali] = false;
                        for(new i; i < 3; i++) {
                            StandInfo[id][sCalisan][i] = -1;
                            StandInfo[id][sUrunFiyati][i] = 0;
                            format(StandUrunInfo[id][i], 80, "Yok");
                            format(StandIcecekInfo[id][i], 80, "Yok");
                            StandInfo[id][sIcecekFiyati][i] = 0;
                        }
                        StandInfo[id][saracID] = -1;
                        Iter_Remove(Tezgahlar, id);
                        break;
                    }
                }
            }
            //DestroyVehicle(vehicleid);
            //Iter_Remove(Vehicles, vehicleid);
            if(VehicleInfo[vehicleid][vFaction] == 65535) Vehicle_Despawn(vehicleid);
            else if(VehicleInfo[vehicleid][vFaction] != 65535) Vehicle_Respawn(vehicleid);
        }
    }
    return 1;
}

public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
{
    if(audience != 0)
    {
        foreach(new i : Player) if(IsPlayerConnected(i) && PlayerInfo[i][pLogged] && PlayerInfo[i][pListen] && PlayerInfo[i][pAdmin] > 3)
        {
            SunucuMesaji(i, "%s adlý oyuncu %s (VID: %d / SQLID: %d) aracýna bindi. (%s)", ReturnRoleplayName(playerid), GetVehicleModelName(VehicleInfo[vehicleid][vModel]), vehicleid, VehicleInfo[vehicleid][vID], ReturnDate());
        }
    }
    if(IsABike(vehicleid) && !VehicleInfo[vehicleid][vTemporary])
    {
        SetVehicleParamsEx(vehicleid, VEHICLE_PARAMS_ON, VehicleInfo[vehicleid][vLights], VEHICLE_PARAMS_OFF, VehicleInfo[vehicleid][vLocked], VehicleInfo[vehicleid][vBonnet], VehicleInfo[vehicleid][vBoot], VehicleInfo[vehicleid][vObje]);
        VehicleInfo[vehicleid][vEngine] = 1;
    }

    if((VehicleInfo[vehicleid][vJob] != -1 && (PlayerInfo[playerid][pJob] != VehicleInfo[vehicleid][vJob] || PlayerInfo[playerid][pLevel] > 5) && !ispassenger) && (VehicleInfo[vehicleid][vJob] != 0 && PlayerInfo[playerid][pAdmin] < 2))
    {
        Player_Info(playerid, "~r~MESLEK~w~ ARACINI KULLANAMAZSIN.");
        return ClearAnimations(playerid);
    }

    if(!ispassenger && VehicleInfo[vehicleid][vFaction] != INVALID_VEHICLE_ID && PlayerInfo[playerid][pFaction] != VehicleInfo[vehicleid][vFaction] && PlayerInfo[playerid][pAdminDuty] == 0)
    {
        Player_Info(playerid, "~r~FACTION~w~ UYESI OLMADAN ARACINI KULLANAMAZSIN.");
        return ClearAnimations(playerid);
    }

    new  model = GetVehicleModel(vehicleid);

    if(ispassenger) if(model == 519 || model == 553 || model == 577 || model == 592)
    {
        SetPlayerPos(playerid, 1.83, 23.13, 1199.59);
        AC_SetPlayerVirtualWorld(playerid, vehicleid);
        SetPlayerInterior(playerid, 1);
        PlayerInfo[playerid][pAirPassenger] = vehicleid;
    }

    //VehicleInfo[vehicleid][vSpawnExpires] = gettime() + (60 * 30);
    PlayerInfo[playerid][pStealWrong] = 0;
    PlayerInfo[playerid][pStealCorrect] = 0;

    return 1;
}

public OnPlayerExitVehicle(playerid, vehicleid)
{
    if(PlayerInfo[playerid][pEmniyetKemeri])
    {
        PlayerInfo[playerid][pEmniyetKemeri] = 0;
        PlayerAME(playerid, "emniyet kemerini çýkarýr.");
    }
    
    if(PlayerInfo[playerid][pTaxi] != -1) EndTaxi(playerid, PlayerInfo[playerid][pTaxi]);

    if(IsTaxi(vehicleid) && PlayerInfo[playerid][tPassenger] != -1)
        pc_cmd_taksimetre(playerid, NULL);

    if(PlayerInfo[playerid][pBalik] > 0 && FishingBoat(vehicleid) && GetFishingZone(playerid, true) != -1)
        RemovePlayerAttachedObject(playerid, 8);

    if(PlayerInfo[playerid][Started] && PlayerInfo[playerid][Vehicle] == vehicleid)
    {
        Exam_End(playerid, false);
        SunucuMesajiC(playerid, "Araçtan indiðin için sýnavýn iptal edildi.");
    }

    if(PlayerInfo[playerid][pDealerVehicle] != 0)
    {
        DestroyVehicle(PlayerInfo[playerid][pDealerVehicle]);
        PlayerInfo[playerid][pDealerVehicle] = 0;
        Iter_Remove(Vehicles, PlayerInfo[playerid][pDealerVehicle]);
    }

    if(VehicleInfo[vehicleid][vStereo])
        StopAudioStreamForPlayer(playerid);

    foreach(new boomboxid : DroppedItems)
    {
        new listid = IDroppedInfo[boomboxid][idList];

        if(!listid)continue;
        if(InventoryObjects[listid][invObject] != BOOMBOX_OBJECT || !IsValidDynamicArea(IDroppedInfo[boomboxid][idArea]) || !IsPlayerInDynamicArea(playerid, IDroppedInfo[boomboxid][idArea]) || strlen(IDroppedInfo[boomboxid][idLink]) <= 0)continue;

        PlayAudioStreamForPlayer(playerid, IDroppedInfo[boomboxid][idLink], IDroppedInfo[boomboxid][idPosX], IDroppedInfo[boomboxid][idPosY], IDroppedInfo[boomboxid][idPosZ], 25.0, 1); break;
    }

    foreach(new i : Player) if(IsPlayerConnected(i) && PlayerInfo[i][pInRecon] == playerid)
            PlayerSpectatePlayer(i, playerid);

    SetPlayerArmedWeapon(playerid, PlayerInfo[playerid][pOldGun]);
    PlayerInfo[playerid][pOldGun] = 0;

    if(PlayerInfo[playerid][pStealTime] != -1)
        DestroyDynamic3DTextLabelEx(PlayerInfo[playerid][pNameTag]);
        
    PlayerInfo[playerid][pStealCorrect] = 0;
    PlayerInfo[playerid][pStealWrong] = 0;
    PlayerInfo[playerid][pStealTime] = -1;
    TextStealVeh_Hide(playerid);
    return 1;
}

public OnPlayerStateChange(playerid, newstate, oldstate)
{
    new gunid = AC_GetPlayerWeapon(playerid);
    if(newstate == PLAYER_STATE_ONFOOT && oldstate == PLAYER_STATE_DRIVER && PlayerInfo[playerid][pAracMotorTimer] > 0)
    {
        PlayerInfo[playerid][pAracMotorTimer] = 0;
    }
    if(newstate == PLAYER_STATE_DRIVER || newstate == PLAYER_STATE_PASSENGER)
    {
        new vehid = GetPlayerVehicleID(playerid);
        OldCar[playerid] = vehid;
        if(PlayerInfo[playerid][pDeath] > 0)
        {
            //RemovePlayerFromVehicle(playerid);
            ClearAnimations(playerid);
            ApplyAnimation(playerid, "WUZI", "CS_Dead_Guy", 4.1, 0, 1, 1, 1, 0, 1);
        }
    }
    if(newstate == PLAYER_STATE_DRIVER)
    {
        new vehid = GetPlayerVehicleID(playerid);
        AracKMTimer[playerid] = SetTimerEx("AracTimer", 1000, true, "d", vehid);
        SetPVarInt(playerid, "AracSuruyor", 1);
    }
    if(newstate != PLAYER_STATE_DRIVER && GetPVarInt(playerid, "AracSuruyor") == 1)
    {
        DeletePVar(playerid, "AracSuruyor");
        KillTimer(AracKMTimer[playerid]);
    }
    if(oldstate == PLAYER_STATE_ONFOOT && newstate == PLAYER_STATE_DRIVER)
    {
        if(GetTickCount() - PlayerInfo[playerid][pCarTick] < 300) AC_Detect(playerid, AC_CARHACK_CODE);

        PlayerInfo[playerid][pCarTick] = GetTickCount();
    }
    if(newstate == PLAYER_STATE_PASSENGER && gunid) switch(gunid)
    {
        case 22, 25, 28 .. 33: if(gunid == WEAPON_SHOTGUN && !PlayerInfo[playerid][pBeanBag] || gunid != WEAPON_SHOTGUN)
        {
            SetPlayerArmedWeapon(playerid, gunid);
        }
        default: SetPlayerArmedWeapon(playerid, 0);
    }
    if(newstate == PLAYER_STATE_DRIVER)
    {
        new vehicleid = GetPlayerVehicleID(playerid);

        if(VehicleInfo[vehicleid][vOwner] == PlayerInfo[playerid][pID])
        {
            // new query[90];

            mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT * FROM police_fine_records WHERE vehicle_id = '%d'", VehicleInfo[vehicleid][vID]);
            mysql_tquery(ourConnection, queryx, "OnLoadFines", "d", playerid);
        }

        if(!IsABike(vehicleid) && PlayerInfo[playerid][pVehicleHud])
        {
            TextDrawShowForPlayer(playerid, KMH);
            PlayerTextDrawShow(playerid, VehicleSpeed[playerid]);
            PlayerTextDrawShow(playerid, VehicleFuel[playerid]);
        }

        PlayerInfo[playerid][pOldGun] = AC_GetPlayerWeapon(playerid);
        SetPlayerArmedWeapon(playerid, 0);
    }

    if(newstate == PLAYER_STATE_DRIVER || newstate == PLAYER_STATE_PASSENGER)
    {
        new vehicleid = GetPlayerVehicleID(playerid);

        foreach(new i : Player) if(IsPlayerConnected(i) && PlayerInfo[i][pInRecon] == playerid)
            PlayerSpectateVehicle(i, vehicleid);

        if(VehicleInfo[vehicleid][vStereo])
        {
            StopAudioStreamForPlayer(playerid);
            PlayAudioStreamForPlayer(playerid, VehicleInfo[vehicleid][vStereoLink]);
        }

        if(VehicleInfo[vehicleid][vModel] >= 400 && VehicleInfo[vehicleid][vModel] <= 611 && VehicleInfo[vehicleid][vOwner] != -1 && newstate == PLAYER_STATE_DRIVER)
        {

            new id = PlayerInfo[playerid][pCarryCrate];
            if(id > -1 && CrateInfo[id][crExists])
            {
                SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
                RemovePlayerAttachedObject(playerid, 9);
                new Float:x, Float:y, Float:z;
                GetPlayerPos(playerid, x, y, z);

                CrateInfo[id][crPosX] = x+2;
                CrateInfo[id][crPosY] = y+2;
                CrateInfo[id][crPosZ] = z - 0.9;
                CrateInfo[id][crInterior] = GetPlayerInterior(playerid);
                CrateInfo[id][crWorld] = GetPlayerVirtualWorld(playerid);
                CrateInfo[id][crPlayer] = -1;

                new companyid = CrateInfo[id][crCompany];
                new type = CrateInfo[id][crType];
                new tmpName[32] = "Mühürlü Kutu";
                if(type != ILLEGAL_BOX)format(tmpName, sizeof(tmpName), CompanyInfo[companyid][cName]);
                CrateInfo[id][crObject] = CreateDynamicObject(BOX_OBJECT, CrateInfo[id][crPosX], CrateInfo[id][crPosY], CrateInfo[id][crPosZ], 0.0, 0.0, 0.0, CrateInfo[id][crWorld], CrateInfo[id][crInterior]);
                CrateInfo[id][crLabel] = CreateDynamic3DTextLabel(tmpName, COLOR_WHITE, CrateInfo[id][crPosX], CrateInfo[id][crPosY], CrateInfo[id][crPosZ] + 1.0, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid), -1);
                Streamer_Update(playerid);
                PlayerInfo[playerid][pCarryCrate] = -1;
                SunucuMesajiC(playerid, "Koli ile araca binmeye teþebbüs etmek sistem suistimalidir.");
                printf("%s adli oyuncu koli ile araca binmeyi denedi.", ReturnRoleplayName(playerid));
            }

            new string[MAX_PLAYER_NAME];
            format(string, sizeof string, "%s", GetCharacterName(VehicleInfo[vehicleid][vOwner]));
            strreplace(string, '_', ' ');
            if(!VehicleInfo[vehicleid][vTemporary])
            {
                if(!IsABike(vehicleid))
                {
                    if(VehicleInfo[vehicleid][vIAKS] > 1 && VehicleInfo[vehicleid][vKiralayan] == -1) SendFormattedMessage(playerid, COLOR_GREEN, "[%s] Sahip: Rent a Car || Plaka: %s || Kira Ücreti: $%d", GetVehicleModelName(VehicleInfo[vehicleid][vModel]), VehicleInfo[vehicleid][vPlate], VehicleInfo[vehicleid][vIAKS]);
                    else if(VehicleInfo[vehicleid][vIAKS] != 0 && VehicleInfo[vehicleid][vKiralayan] != -1) SendFormattedMessage(playerid, COLOR_GREEN, "[%s] Sahip: Rent a Car || Plaka: %s || Vergi: $%d || Kiralýk araç: %d dakika. (Kiralayan: %s)", GetVehicleModelName(VehicleInfo[vehicleid][vModel]), VehicleInfo[vehicleid][vPlate], VehicleInfo[vehicleid][vVergi], VehicleInfo[vehicleid][vKiralik], GetCharacterName(VehicleInfo[vehicleid][vKiralayan]));
                    else if(VehicleInfo[vehicleid][vKiralayan] != -1) SendFormattedMessage(playerid, COLOR_GREEN, "[%s] Sahip: %s || Plaka: %s || Vergi: $%d || Kiralýk araç: %d dakika. (Kiralayan: %s)", GetVehicleModelName(VehicleInfo[vehicleid][vModel]), string, VehicleInfo[vehicleid][vPlate], VehicleInfo[vehicleid][vVergi], VehicleInfo[vehicleid][vKiralik], GetCharacterName(VehicleInfo[vehicleid][vKiralayan]));
                    else SendFormattedMessage(playerid, COLOR_GREEN, "[%s] Sahip: %s || Plaka: %s || Vergi: $%d", GetVehicleModelName(VehicleInfo[vehicleid][vModel]), string, VehicleInfo[vehicleid][vPlate], VehicleInfo[vehicleid][vVergi]);

                    if(!VehicleInfo[vehicleid][vSigortaSeviyesi]) SunucuMesajiC(playerid, "Bu aracýn sigortasý bulunmuyor, sigortasýz araçlarýn trafiðe çýkmasý yasal deðildir.");
                    if(PlayerInfo[playerid][pLicenses][0] == 0) SunucuMesaji(playerid, "Sürücü lisansýnýz bulunmuyor, bu durumda araç sürmeniz yasal deðil.");
                }
                else
                {
                    if(VehicleInfo[vehicleid][vKiralayan] != -1) SendFormattedMessage(playerid, COLOR_GREEN, "[%s] Sahip: %s || Kiralýk: %d dakika. (Kiralayan: %s)", GetVehicleModelName(VehicleInfo[vehicleid][vModel]), string, VehicleInfo[vehicleid][vKiralik], GetCharacterName(VehicleInfo[vehicleid][vKiralayan]));
                    else SendFormattedMessage(playerid, COLOR_GREEN, "[%s] Sahip: %s", GetVehicleModelName(VehicleInfo[vehicleid][vModel]), string);
                }
            }

            if(Commodities_GetSlotCount(vehicleid) > 0) Streamer_Update(playerid);
        }
    }

    if(oldstate == PLAYER_STATE_DRIVER && newstate != PLAYER_STATE_DRIVER)
    {
        TextDrawHideForPlayer(playerid, KMH);
        PlayerTextDrawHide(playerid, VehicleSpeed[playerid]);
        PlayerTextDrawHide(playerid, VehicleFuel[playerid]);
        TextStealVeh_Hide(playerid);
    }

    return 1;
}

public OnPlayerEnterRaceCheckpoint(playerid)
{
    new nextCheckpoint = PlayerInfo[playerid][Checkpoint] + 1, Float:vhealth;
    GetVehicleHealth(PlayerInfo[playerid][Vehicle], vhealth);

    if(IsPlayerInAnyVehicle(playerid) && PlayerInfo[playerid][Started] && PlayerInfo[playerid][Type] == EXAM_TYPE_VEHICLES)
    {
        #define lastCheckpoint sizeof(VehiclesCheckpoints) - 1
        #define finishCheckpoint sizeof(VehiclesCheckpoints)

        switch(PlayerInfo[playerid][Checkpoint])
        {
            case lastCheckpoint:
            {
                SetPlayerRaceCheckpoint(playerid, 1, VehiclesCheckpoints[lastCheckpoint][0], VehiclesCheckpoints[lastCheckpoint][1], VehiclesCheckpoints[lastCheckpoint][2], VehiclesCheckpoints[lastCheckpoint][0], VehiclesCheckpoints[lastCheckpoint][1], VehiclesCheckpoints[lastCheckpoint][2], 5.0);
                PlayerInfo[playerid][Checkpoint]++;
            }
            case finishCheckpoint: Exam_End(playerid, (vhealth >= 995.0) ? true : false);
            default: SetPlayerRaceCheckpoint(playerid, 0, VehiclesCheckpoints[PlayerInfo[playerid][Checkpoint]][0], VehiclesCheckpoints[PlayerInfo[playerid][Checkpoint]][1], VehiclesCheckpoints[PlayerInfo[playerid][Checkpoint]][2], VehiclesCheckpoints[nextCheckpoint][0], VehiclesCheckpoints[nextCheckpoint][1], VehiclesCheckpoints[nextCheckpoint][2], 5.0), PlayerInfo[playerid][Checkpoint]++;
        }

        #undef lastCheckpoint
        #undef finishCheckpoint
    }
    else if(IsPlayerInAnyVehicle(playerid) && PlayerInfo[playerid][Started] && PlayerInfo[playerid][Type] == EXAM_TYPE_BOATS)
    {
        #define lastCheckpoint sizeof(BoatCheckpoints) - 1
        #define finishCheckpoint sizeof(BoatCheckpoints)

        switch(PlayerInfo[playerid][Checkpoint])
        {
            case lastCheckpoint:
            {
                SetPlayerRaceCheckpoint(playerid, 1, BoatCheckpoints[lastCheckpoint][0], BoatCheckpoints[lastCheckpoint][1], BoatCheckpoints[lastCheckpoint][2], BoatCheckpoints[lastCheckpoint][0], BoatCheckpoints[lastCheckpoint][1], BoatCheckpoints[lastCheckpoint][2], 6.0);
                PlayerInfo[playerid][Checkpoint]++;
            }
            case finishCheckpoint: Exam_End(playerid, (vhealth >= 995.0) ? true : false);
            default: SetPlayerRaceCheckpoint(playerid, 0, BoatCheckpoints[PlayerInfo[playerid][Checkpoint]][0], BoatCheckpoints[PlayerInfo[playerid][Checkpoint]][1], BoatCheckpoints[PlayerInfo[playerid][Checkpoint]][2], BoatCheckpoints[nextCheckpoint][0], BoatCheckpoints[nextCheckpoint][1], BoatCheckpoints[nextCheckpoint][2], 6.0), PlayerInfo[playerid][Checkpoint]++;
        }

        #undef lastCheckpoint
        #undef finishCheckpoint
    }
    else if(IsPlayerInAnyVehicle(playerid) && PlayerInfo[playerid][Started] && PlayerInfo[playerid][Type] == EXAM_TYPE_PLANES)
    {
        #define lastCheckpoint sizeof(PlaneCheckpoints) - 1
        #define finishCheckpoint sizeof(PlaneCheckpoints)

        switch(PlayerInfo[playerid][Checkpoint])
        {
            case lastCheckpoint:
            {
                SetPlayerRaceCheckpoint(playerid, 4, PlaneCheckpoints[lastCheckpoint][0], PlaneCheckpoints[lastCheckpoint][1], PlaneCheckpoints[lastCheckpoint][2], PlaneCheckpoints[lastCheckpoint][0], PlaneCheckpoints[lastCheckpoint][1], PlaneCheckpoints[lastCheckpoint][2], 6.0);
                PlayerInfo[playerid][Checkpoint]++;
            }
            case finishCheckpoint: Exam_End(playerid, (vhealth >= 995.0) ? true : false);
            default: SetPlayerRaceCheckpoint(playerid, 3, PlaneCheckpoints[PlayerInfo[playerid][Checkpoint]][0], PlaneCheckpoints[PlayerInfo[playerid][Checkpoint]][1], PlaneCheckpoints[PlayerInfo[playerid][Checkpoint]][2], PlaneCheckpoints[nextCheckpoint][0], PlaneCheckpoints[nextCheckpoint][1], PlaneCheckpoints[nextCheckpoint][2], 6.0), PlayerInfo[playerid][Checkpoint]++;
        }

        #undef lastCheckpoint
        #undef finishCheckpoint
    }

    return 1;
}

public OnVehicleMod(playerid, vehicleid, componentid)
{
    return RemoveVehicleComponent(vehicleid, componentid);
}

public OnVehiclePaintjob(playerid, vehicleid, paintjobid)
{
    return 1;
}

public OnVehicleRespray(playerid, vehicleid, color1, color2)
{
    return 1;
}

public OnPlayerSelectedMenuRow(playerid, row)
{
    return 1;
}

public OnPlayerExitedMenu(playerid)
{
    return 1;
}

forward OnPlayerVirtualWorldChange(playerid, world);
public OnPlayerVirtualWorldChange(playerid, world)
{
    if(GetPlayerHouse(playerid, true) != -1 || GetPlayerBuilding(playerid, true) != -1 || GetPlayerTeleport(playerid) != -1)
    {
        if(world >= HOUSE_WORLD)
        {
            // new query[90];

            mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT time FROM time_interiors WHERE world = '%d'", world);
            mysql_tquery(ourConnection, queryx, "OnSetPropertyTime", "d", playerid);

            mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT * FROM loaded_furnitures WHERE world = '%d'", world);
            mysql_tquery(ourConnection, queryx, "OnCheckLoadingFurnitures", "d", world);
        }

    }

    return 1;
}

public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{
    if(!PlayerInfo[playerid][pLogged])
        return 1;
        
    if(PlayerInfo[playerid][pLogged])
    {
        if(newkeys == KEY_SECONDARY_ATTACK)
        {
            if(SporAletleri(playerid) != 0)
            {
                if(PlayerInfo[playerid][KullandigimAlet] != 0)
                {
                    GYMBitir(playerid);
                    return 1;
                }

                if(KullanilanAletler[SporAletleri(playerid)] == 1 && PlayerInfo[playerid][GYMLoop] == 0)
                {
                    HataMesaji(playerid, "Bu spor aleti baþka bir oyuncu tarafýndan kullanýlýyor.");
                    return 1;
                }

                if(PlayerInfo[playerid][GYMLoop] != 0)
                {
                    GYMBitir(playerid);
                    return 1;
                }

                PlayerInfo[playerid][KullandigimAlet] = SporAletleri(playerid);
                KullanilanAletler[PlayerInfo[playerid][KullandigimAlet]] = 1;
                SporAletineYolla(playerid, PlayerInfo[playerid][KullandigimAlet], 1);

                switch(PlayerInfo[playerid][KullandigimAlet])
                {
                    case 1 .. 3:
                    {
                        ApplyAnimation(playerid,"GYMNASIUM","gym_bike_geton",4.0,1,0,0,1,0,1);
                    }
                    case 4 .. 6:
                    {
                        ApplyAnimation(playerid,"GYMNASIUM","gym_tread_geton",4.0,1,0,0,1,0,1);
                    }
                    case 7 .. 10:
                    {
                        ApplyAnimation(playerid,"benchpress","gym_bp_geton",4.0,1,0,0,1,0,1);
                    }
                }

                PlayerInfo[playerid][GYMYonTusu] = random(4)+1;
                //GameTextForPlayer(playerid, YonTusuBelirle(PlayerInfo[playerid][GYMYonTusu]), 2000, 3);
                PlayerTextDrawHide(playerid, YonTusu[playerid]);
                PlayerTextDrawSetString(playerid, YonTusu[playerid], YonTusuBelirle(PlayerInfo[playerid][GYMYonTusu]));
                PlayerTextDrawShow(playerid, YonTusu[playerid]);

                KillTimer(PlayerInfo[playerid][GYMTimer]);
                PlayerInfo[playerid][GYMTimer] = SetTimerEx("GYM", 2000, true, "i", playerid);
            }
        }
    }
        
    if(PlayerInfo[playerid][pInTuning])
    {
        new string[64];
        new vehID = GetPlayerVehicleID(playerid);
        new categoryTuning = PlayerInfo[playerid][pTuningCategoryID];

        if(newkeys == KEY_LOOK_RIGHT || newkeys == KEY_LOOK_LEFT)
        {
            PlayerInfo[playerid][pTuningCategoryID] = (newkeys == KEY_LOOK_RIGHT) ? categoryTuning + 1 : categoryTuning - 1;

            if(PlayerInfo[playerid][pTuningCategoryID] > 9)PlayerInfo[playerid][pTuningCategoryID] = 9;
            if(PlayerInfo[playerid][pTuningCategoryID] < 0)PlayerInfo[playerid][pTuningCategoryID] = 0;

            categoryTuning = PlayerInfo[playerid][pTuningCategoryID];

            if(categoryTuning != 0 && categoryTuning != 9)
            {
                format(string, sizeof(string), "~y~%s~w~ (~<~) %s (~>~)~y~ %s", TuningCategories[categoryTuning - 1], TuningCategories[categoryTuning], TuningCategories[categoryTuning + 1]);
                PlayerTextDrawSetString(playerid, TDTuning_Component[playerid], string);
                PlayerTextDrawShow(playerid, TDTuning_Component[playerid]);
            }
            else
            {
                format(string, sizeof(string), (!categoryTuning) ? ("~w~%s (~>~)~y~ %s") : ("~y~%s~w~ (~>~) %s"), TuningCategories[(newkeys & KEY_LOOK_RIGHT) ? categoryTuning - 1 : categoryTuning], TuningCategories[(newkeys & KEY_LOOK_RIGHT) ? categoryTuning : categoryTuning + 1]);
                PlayerTextDrawSetString(playerid, TDTuning_Component[playerid], string);
                PlayerTextDrawShow(playerid, TDTuning_Component[playerid]);
            }

            Tuning_SetDisplay(playerid);
        }
        else if(newkeys == KEY_FIRE || newkeys == KEY_HANDBRAKE)
        {
            new validCount = GetVehicleComponentCount(categoryTuning, VehicleInfo[vehID][vModel]);
            new tuningCount = PlayerInfo[playerid][pTuningCount];

            if(tuningCount && (newkeys == KEY_FIRE && tuningCount != validCount) || (newkeys == KEY_HANDBRAKE && tuningCount != 0 && tuningCount != 1) && validCount)
            {
                PlayerInfo[playerid][pTuningCount] = (newkeys & KEY_FIRE) ? tuningCount + 1 : tuningCount - 1;
                Tuning_SetDisplay(playerid, PlayerInfo[playerid][pTuningCount]);
            }
            else return 1;
        }
        else if(newkeys == KEY_YES)
        {
            if(!PlayerInfo[playerid][pTuningCount])return
                SunucuMesajiC(playerid, "Satýn alýnacak uyumlu modifiye yok.");

            new componentPrice = (categoryTuning == 9) ? 700 : GetComponentPrice(PlayerInfo[playerid][pTuningComponent]);

            if(PlayerInfo[playerid][pTamirciyim])
                componentPrice = componentPrice / 2;

            if(componentPrice > PlayerInfo[playerid][pCash])return
                SunucuMesajiC(playerid, "Yeterli paran yok.");

            if(categoryTuning == 9)
            {
                VehicleInfo[vehID][vFirstColor] = 1;
                VehicleInfo[vehID][vSecondColor] = 1;
                ChangeVehiclePaintjobEx(vehID, PlayerInfo[playerid][pTuningComponent]);
                VehicleInfo[vehID][vPaintjob] = PlayerInfo[playerid][pTuningComponent];

                if(PlayerInfo[playerid][pJob] == 1 && PlayerInfo[playerid][pTamirciyim])
                {
                    AC_GivePlayerMoney(playerid, -350, "/modifiye");
                    SunucuMesajiC(playerid, "$350 karþýlýðýnda boyaiþi satýn aldýn.");
                }
                else
                {
                    AC_GivePlayerMoney(playerid, -700, "/modifiye");
                    SunucuMesajiC(playerid, "$700 karþýlýðýnda boyaiþi satýn aldýn.");
                }
                SaveVehicle(vehID);
            }
            else Tuning_AddComponent(playerid, vehID, PlayerInfo[playerid][pTuningComponent]);

            if(PlayerInfo[playerid][pTuningComponentAldi])
            {
                AC_GivePlayerMoney(playerid, -componentPrice, "/modifiye");
                PlayerInfo[playerid][pTuningComponentAldi] = 0;
                SunucuMesaji(playerid, "#%d ID'li modifiyeyi $%d karþýlýðýnda satýn aldýn.", PlayerInfo[playerid][pTuningComponent], componentPrice);
                SaveVehicle(vehID);
            }
        }
        else if(newkeys == KEY_NO)
        {
            if(!PlayerInfo[playerid][pTamirciyim]) Tuning_ExitDisplay(playerid);
            else Tuning_ExitDisplay2(playerid);
            PlayerInfo[playerid][pKeyTick] = GetTickCount();
        }
    }

    if(PlayerInfo[playerid][pBreakOpen] && RELEASED(KEY_FIRE) && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
    {
        new gun = AC_GetPlayerWeapon(playerid);
        new vehicleid = GetNearestVehicle(playerid);

        if(!InSafeZone(playerid))
        {
            if(vehicleid != -1)
            {
                if(VehicleInfo[vehicleid][vHurda]) return HataMesajiC(playerid, "Bu araç zaten hurda, parçalanmýþ aracý çalamazsýn.");
                if(VehicleInfo[vehicleid][vKoruma]) return HataMesajiC(playerid, "Bu aracýn motoru güvenli bölgede kapanmýþ, koruma aktif.");
                if(VehicleInfo[vehicleid][vIAKS] > 0) return HataMesajiC(playerid, "Sistemden kiralanan araçlar çalýnamaz.");
                if(VehicleInfo[vehicleid][vDoorLevel] >= 4) return HataMesajiC(playerid, "Bu araç çalýnamaz, son teknoloji güvenlik sistemiyle korunuyor.");
                Alarm_VehicleTurnOn(playerid, vehicleid);
                new Float:cX, Float:cY, Float:cZ;
                new Float:dX, Float:dY, Float:dZ;

                GetVehicleModelInfo(VehicleInfo[vehicleid][vModel], VEHICLE_MODEL_INFO_FRONTSEAT, cX, cY, cZ);
                GetVehicleRelativePos(vehicleid, dX, dY, dZ, -cX - 0.5, cY, cZ);

                if(GetVehicleDriver(vehicleid) != -1 || IsABike(vehicleid) || IsAMotorBike(vehicleid) || VehicleInfo[vehicleid][vDoorHealth] <= 0.0 || !IsPlayerInRangeOfPoint(playerid, 1.2, dX, dY, dZ))return 1;

                if(VehicleInfo[vehicleid][vFaction] >= 0 && VehicleInfo[vehicleid][vFaction] < MAX_FACTIONS)
                    return HataMesajiC(playerid, "Bu aracý çalamazsýnýz.");

                if(VehicleInfo[vehicleid][vModel] == 416) return HataMesajiC(playerid, "Bu aracý çalamazsýn.");

                if(VehicleInfo[vehicleid][vHirsizlik]) return HataMesajiC(playerid, "Bu aracý çalamazsýnýz.");

                switch(gun)
                {
                    case 0: VehicleInfo[vehicleid][vDoorHealth] = (VehicleInfo[vehicleid][vDoorHealth] - 1.0 <= 0.0) ? 0.0 : VehicleInfo[vehicleid][vDoorHealth] - 1.0;
                    case 5: VehicleInfo[vehicleid][vDoorHealth] = (VehicleInfo[vehicleid][vDoorHealth] - 2.0 <= 0.0) ? 0.0 : VehicleInfo[vehicleid][vDoorHealth] - 2.0;
                }

                new panels, doors, lights, tires;
                GetVehicleDamageStatus(vehicleid, panels, doors, lights, tires);

                if(VehicleInfo[vehicleid][vDoorHealth] <= 0.0)
                {
                    VehicleInfo[vehicleid][vLocked] = 0;
                    SetVehicleParamsEx(vehicleid, VehicleInfo[vehicleid][vEngine], VehicleInfo[vehicleid][vLights], VEHICLE_PARAMS_OFF, VehicleInfo[vehicleid][vLocked], VehicleInfo[vehicleid][vBonnet], VehicleInfo[vehicleid][vBoot], VehicleInfo[vehicleid][vObje]);
                    SetVehicleParamsCarDoors(vehicleid, 1, 0, 0, 0);
                    VehicleInfo[vehicleid][vHirsizlik] = 1;
                    SunucuMesajiC(playerid, "Kapýyý kýrdýn. Ýçeri girebilirsin.");
                    pc_cmd_kilitkir(playerid, "");
                    PlayerInfo[playerid][pAletCantasi] = 0;
                    SaveCharacter(playerid);
                    SaveVehicleElements(vehicleid);
                }

                switch(VehicleInfo[vehicleid][vDoorHealth])
                {
                    case 0: UpdateVehicleDamageStatus(vehicleid, panels, encode_doors(0, 0, 4, 0, 0, 0), lights, tires);
                    case 1 .. 100: UpdateVehicleDamageStatus(vehicleid, panels, encode_doors(0, 0, 2, 0, 0, 0), lights, tires);
                }

                PlayerInfo[playerid][pStealHit] = VehicleInfo[vehicleid][vDoorHealth];
                PlayerInfo[playerid][pStealHitTimeout] = 5;
            }
        }
        else
        {
            PlayerInfo[playerid][pBreakOpen] = !PlayerInfo[playerid][pBreakOpen];
            Player_Info(playerid, (PlayerInfo[playerid][pBreakOpen]) ? ("Kilit kirma ~g~aktif~w~.") : ("Kilit kirma ~r~deaktif~w~."), true);
            HataMesajiC(playerid, "Bu bölgede bu tarz aksiyonlu rollere giremezsiniz.");
        }

        if(vehicleid == -1) Player_Info(playerid, "Kilit kirmayi iptal etmek icin ~y~/kilitkir~w~ kullan.");
    }

    if(newkeys == KEY_CTRL_BACK)
    {
        if(PlayerInfo[playerid][pSips] && GetTickCount() - PlayerInfo[playerid][pKeyTick] > 2500)
        {
            PlayerInfo[playerid][pKeyTick] = GetTickCount();
            SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
            PlayerInfo[playerid][pSips] = 0;
            SetPlayerDrunkLevel(playerid, 0);
        }

        if(!IsPlayerInAnyVehicle(playerid) && PlayerInfo[playerid][pSmoking])
            Smoking_Stop(playerid);
    }

    if(newkeys == KEY_FIRE) if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_DRINK_BEER || GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_DRINK_SPRUNK)
    {
        if(!PlayerInfo[playerid][pSips])return
            SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);

        new Float:playerHealth;

        AC_GetPlayerHealth(playerid, playerHealth); playerHealth++;
        AC_SetPlayerHealth(playerid, (playerHealth > 100) ? 100.0 : playerHealth);

        PlayerInfo[playerid][pSips]--;
    }

    if(PlayerInfo[playerid][pBuyingVehicle])
    {
        if(newkeys == KEY_WALK)
        {
            SetCameraBehindPlayer(playerid);
            DestroyVehicle(PlayerInfo[playerid][pDealerVehicle]);
            Iter_Remove(Vehicles, PlayerInfo[playerid][pDealerVehicle]);
            PlayerInfo[playerid][pDealerVehicle] = 0;
            PlayerInfo[playerid][pVehiclePrice] = 0;
            TogglePlayerControllable(playerid, true);
            PlayerInfo[playerid][pFreezed] = 0;
            AC_SetPlayerVirtualWorld(playerid, 0);
            PlayerInfo[playerid][pBuyingVehicle] = 0;
            PlayerInfo[playerid][pSelectedColors][0] = -1;
            PlayerInfo[playerid][pSelectedColors][1] = -1;
        }
        else if(newkeys == KEY_SPRINT) Vehicle_Buy(playerid);
    }

    if(PlayerInfo[playerid][pShortcut])
    {
        if(newkeys & KEY_YES)
        {
            if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER && !PlayerInfo[playerid][pTamirciyim])
                pc_cmd_arac(playerid, "motor");
            else
               pc_cmd_gir(playerid, NULL);
        }

        if(newkeys & KEY_SUBMISSION && IsPlayerInAnyVehicle(playerid) > 0)
            pc_cmd_arac(playerid, "far");

        if(newkeys == KEY_CROUCH && IsPlayerInAnyVehicle(playerid)) {
            new id = YakindakiGate(playerid);
            if(id != -1) return pc_cmd_gate(playerid, "-1");
        }

    }

    // kirikbacak
    if(newkeys == KEY_JUMP && !PlayerInfo[playerid][pDeath] && !(oldkeys == KEY_JUMP) && (GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CUFFED || PlayerInfo[playerid][pLegHit] || PlayerInfo[playerid][pDrugRunJumpBlock] && !PlayerInfo[playerid][pDrugUnconscious]))
        ApplyAnimation(playerid, "GYMNASIUM", "gym_jog_falloff", 4.1, 0, 1, 1, 0, 0);

    if(PlayerInfo[playerid][pLegHit] && !PlayerInfo[playerid][pDeath] || PlayerInfo[playerid][pDrugRunJumpBlock] && !PlayerInfo[playerid][pDrugUnconscious]) if(RELEASED(KEY_SPRINT) || HOLDING(KEY_SPRINT) || newkeys == KEY_SPRINT)
        ApplyAnimation(playerid, "PED", "FALL_collapse", 4.1, 0, 1, 1, 0, 0);

    if(newkeys == KEY_FIRE) if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_DRINK_BEER || GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_DRINK_SPRUNK)
    {
        if(!PlayerInfo[playerid][pSips])return
            SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);

        new Float:playerHealth;

        AC_GetPlayerHealth(playerid, playerHealth); playerHealth++;
        AC_SetPlayerHealth(playerid, (playerHealth > 100) ? 100.0 : playerHealth);

        PlayerInfo[playerid][pSips]--;
    }

    if(PlayerInfo[playerid][pSelectUniform] != -1)
    {
        new fid = PlayerInfo[playerid][pFaction];

        if(newkeys == KEY_HANDBRAKE)
        {
            PlayerInfo[playerid][pSelectUniform]++;
            PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);

            if(PlayerInfo[playerid][pSelectUniform] > FactionInfo[fid][fSkinsCount] - 1) PlayerInfo[playerid][pSelectUniform] = 0;
            SetPlayerSkinEx(playerid, FactionInfo[fid][fSkins][PlayerInfo[playerid][pSelectUniform]]);
        }
        else if(newkeys == KEY_FIRE)
        {
            PlayerInfo[playerid][pSelectUniform]--;
            PlayerPlaySound(playerid, 1053, 0.0, 0.0, 0.0);

            if(PlayerInfo[playerid][pSelectUniform] < 0) PlayerInfo[playerid][pSelectUniform] = FactionInfo[fid][fSkinsCount] - 1;
            SetPlayerSkinEx(playerid, FactionInfo[fid][fSkins][PlayerInfo[playerid][pSelectUniform]]);
        }
        else if(newkeys == KEY_SECONDARY_ATTACK)
        {
            if(IsFemaleSkin(playerid) == PlayerInfo[playerid][pSex])
            {
                PlayerInfo[playerid][pSelectUniform] = -1;
                PlayerInfo[playerid][pFactionSkin] = GetPlayerCustomSkin(playerid);

                TogglePlayerControllable(playerid,true);
                PlayerInfo[playerid][pFreezed] = 0;
            }
            else return HataMesajiC(playerid, "Bu üniforma cinsiyetinize uygun deðil.");
        }
        else Player_Info(playerid, "Uniforma seciminden cikmak icin ~y~/isbasi~w~ yazin.");
    }

    if(newkeys & KEY_YES && (GetTickCount() - PlayerInfo[playerid][pKeyTick]) > 2500 && PlayerInfo[playerid][pSmoking])
    {
        if(!PlayerInfo[playerid][pSmokingThrows])Smoking_Stop(playerid);

        ApplyAnimation(playerid, "SMOKING", "M_smk_out", 4.1, 0, 0, 0, 0, 0);

        if(PlayerInfo[playerid][pSmokingType] == SMOKING_TYPE_WEED || PlayerInfo[playerid][pSmokingType] == SMOKING_TYPE_HASHISH)
        {
            new drug_id = PlayerInfo[playerid][pSmokingType] - 2;

            if(PlayerInfo[playerid][pSmokingThrows] < 10) Smoking_Effects(playerid, drug_id);
        }

        PlayerInfo[playerid][pSmokingThrows]--;
        PlayerInfo[playerid][pKeyTick] = GetTickCount();
    }

    if(newkeys & KEY_NO && (GetTickCount() - PlayerInfo[playerid][pKeyTick]) > 2500 && !PlayerInfo[playerid][pTamirciyim])
    {
        if(PlayerInfo[playerid][pSmoking] == 1)
        {
            RemovePlayerAttachedObject(playerid, 7);
            RemovePlayerAttachedObject(playerid, 6);
            SetPlayerAttachedObject(playerid, 7, 18673, 2, 0.0169, 0.1182+0.1, -1.6320, 0.0000, 0.0000, 0.0000, 1.0000, 1.0000,1.0000);
            SetPlayerAttachedObject(playerid, 6, 3027, 2, 0.0201, 0.0983, 0.0081, 262.2250, 353.1968, 65.1797, 1.0000, 1.0000, 1.0000);
            ApplyAnimation(playerid, "SMOKING", "M_smk_drag", 4.1, 0, 0, 0, 0, 0);
            return PlayerInfo[playerid][pSmoking] = 2;
        }
        else if(PlayerInfo[playerid][pSmoking] == 2)
        {
            RemovePlayerAttachedObject(playerid, 6);
            RemovePlayerAttachedObject(playerid, 7);
            SetPlayerAttachedObject(playerid, 7, 18673, 6, 0.1570, -0.0588, -1.6079, 0.0000, 0.0000, 0.0000, 1.0000, 1.0000, 1.0000);
            SetPlayerAttachedObject(playerid, 6, 3027, 6, 0.0852, 0.0303, 0.0194, 88.7970, 53.3082, 162.5791);
            ApplyAnimation(playerid, "SMOKING", "M_smk_out", 4.1, 0, 0, 0, 0, 0);
            return PlayerInfo[playerid][pSmoking] = 1;
        }
        else pc_cmd_arac(playerid, "kilit");

        PlayerInfo[playerid][pKeyTick] = GetTickCount();
    }

    if(newkeys == KEY_SPRINT && PlayerInfo[playerid][pLoopAnim] == true && GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_USEJETPACK)
    {
        ClearAnimations(playerid);
        ApplyAnimation(playerid, "CARRY", "crry_prtial", 2.0, 0, 0, 0, 0, 0);
        PlayerInfo[playerid][pLoopAnim] = false;
    }

    if(PlayerInfo[playerid][pInRecon] != -1 && PlayerInfo[playerid][pAdmin] > 3)
    {
        new id = PlayerInfo[playerid][pInRecon];

        if(newkeys == KEY_FIRE)
        {
            for(new pid = id + 1; pid < MAX_PLAYERS; pid++)
            {
                if(!IsPlayerConnected(pid) || pid == playerid || PlayerInfo[pid][pAdmin] > PlayerInfo[playerid][pAdmin]) continue;
                if(PlayerInfo[pid][pInRecon] != -1) pid = PlayerInfo[pid][pInRecon];

                return Player_Recon(playerid, pid);
            }
            for(new pid; pid < MAX_PLAYERS; pid++)
            {
                if(!IsPlayerConnected(pid) || pid == playerid || PlayerInfo[pid][pAdmin] > PlayerInfo[playerid][pAdmin]) continue;
                if(PlayerInfo[pid][pInRecon] != -1) pid = PlayerInfo[pid][pInRecon];

                return Player_Recon(playerid, pid);
            }
            return HataMesajiC(playerid, "Tekrar baðlanacak oyuncu yok.");
        }
        else if(newkeys == KEY_HANDBRAKE)
        {
            for(new pid = id - 1; pid >= 0; pid--)
            {
                if(!IsPlayerConnected(pid) || pid == playerid || PlayerInfo[pid][pAdmin] > PlayerInfo[playerid][pAdmin]) continue;
                if(PlayerInfo[pid][pInRecon] != -1) pid = PlayerInfo[pid][pInRecon];

                return Player_Recon(playerid, pid);
            }
            for(new pid = MAX_PLAYERS; pid >= 0; pid--)
            {
                if(!IsPlayerConnected(pid) || pid == playerid || PlayerInfo[pid][pAdmin] > PlayerInfo[playerid][pAdmin]) continue;
                if(PlayerInfo[pid][pInRecon] != -1) pid = PlayerInfo[pid][pInRecon];

                return Player_Recon(playerid, pid);
            }
            return HataMesajiC(playerid, "Tekrar baðlanacak oyuncu yok.");
        }
        if(newkeys == KEY_SPRINT) Player_Recon(playerid, PlayerInfo[playerid][pInRecon]);
    }

    if(IsPlayerInRangeOfPoint(playerid, 1.0, 1.83, 23.13, 1199.59) && PlayerInfo[playerid][pAirPassenger] != -1 && newkeys == KEY_SECONDARY_ATTACK)
    {
        new veh = PlayerInfo[playerid][pAirPassenger];

        PlayerInfo[playerid][pAirPassenger] = -1;

        new Float:vehX, Float:vehY, Float:vehZ;

        GetVehiclePos(veh, vehX, vehY, vehZ);
        SetPlayerPos(playerid, vehX+4, vehY, vehZ);
        AC_SetPlayerVirtualWorld(playerid, GetVehicleVirtualWorld(veh));
        SetPlayerInterior(playerid, 0);
        AC_GivePlayerWeapon(playerid, WEAPON_PARACHUTE, 1);
    }


    if ((newkeys & KEY_YES) && (newkeys & KEY_AIM) && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
    {
        if(PlayerInfo[playerid][pTarget] != INVALID_PLAYER_ID)
        {
            new targetid = PlayerInfo[playerid][pTarget];
            new interior, vw;
            if(!ProxDetectorS(5.0, playerid, targetid)) return HataMesajiC(playerid, "Özelliklerine bakmak istediðin oyuncuya yakýn deðilsin.");
            if(PlayerInfo[targetid][pOzellikGosteriyor]) return 1;
            //GetPlayerPos(targetid, x, y, z);
            interior = GetPlayerInterior(targetid);
            vw = GetPlayerVirtualWorld(targetid);
            new mesaj[200];
            format(mesaj, sizeof(mesaj), "** %s %s", ReturnRoleplayName(targetid, true), PlayerInfo[targetid][pOzellik]);
            PlayerInfo[targetid][pOzellikGosteriyor] = true;
            PlayerInfo[targetid][pOzellikLabel] = CreateDynamic3DTextLabel(mesaj, COLOR_EMOTE, 0, 0, 0.3, 10.0, targetid, INVALID_VEHICLE_ID, 1, vw, interior, playerid);
            SetTimerEx("LabelSil", 10000, false, "d", targetid);
            Streamer_Update(playerid);
        }
    }

    return 1;
}

public OnRconLoginAttempt(ip[], password[], success)
{
    new playerIP[16];

    foreach(new i : Player)
    {
        GetPlayerIp(i, playerIP, 16);

        if(!strcmp(ip, playerIP, true) && PlayerInfo[i][pAdmin] < GAMEADMIN1)
            SendAdminAlert(true, COLOR_YELLOW, (success) ? ("AdmWarn: %s (%d) rcona giriþ yaptý.") : ("AdmWarn: %s (%d) rcona giriþ yapmaya çalýþýyor."), ReturnRoleplayName(i), i);
    }

    return 1;
}

public OnPlayerUpdate(playerid)
{
    PlayerInfo[playerid][pAFKTime] = 0;
    if(PlayerInfo[playerid][pLogged] == 0) return 1;
    if(!PlayerInfo[playerid][pInTuning] && GetTickCount() - PlayerInfo[playerid][pSilahTick] > 500)
    {
        PlayerInfo[playerid][pUzerindekiSilah] = GetPlayerWeapon(playerid);

        new weaponid, ammo, objectslot, count, index;

        for (new i = 2; i <= 7; i++) //Loop only through the slots that may contain the wearable weapons
        {
            GetPlayerWeaponData(playerid, i, weaponid, ammo);
            index = weaponid - 22;

            if (weaponid && ammo && !WeaponSettings[playerid][index][Hidden] && IsWeaponWearable(weaponid) && EditingWeapon[playerid] != weaponid)
            {
                objectslot = GetWeaponObjectSlot(weaponid);

                if (GetPlayerWeapon(playerid) != weaponid)
                    SetPlayerAttachedObject(playerid, objectslot, GetWeaponModel(weaponid), WeaponSettings[playerid][index][Bone], WeaponSettings[playerid][index][Position][0], WeaponSettings[playerid][index][Position][1], WeaponSettings[playerid][index][Position][2], WeaponSettings[playerid][index][Position][3], WeaponSettings[playerid][index][Position][4], WeaponSettings[playerid][index][Position][5], 1.0, 1.0, 1.0);

                else if (IsPlayerAttachedObjectSlotUsed(playerid, objectslot)) RemovePlayerAttachedObject(playerid, objectslot);
            }
        }
        for (new i; i <= 5; i++) if (IsPlayerAttachedObjectSlotUsed(playerid, i))
        {
            count = 0;

            for (new j = 22; j <= 38; j++) if (PlayerHasWeapon(playerid, j) && GetWeaponObjectSlot(j) == i)
                count++;

            if (!count) RemovePlayerAttachedObject(playerid, i);
        }

        PlayerInfo[playerid][pSilahTick] = GetTickCount();
    }
    new vehicleid = GetPlayerVehicleID(playerid);
    if(vehicleid == -1) return 1;
    new panels, doors, lights, tires;
    foreach(new i : RoadBlocks)
    {
        if(RoadBlockInfo[i][rbExists] && RoadBlockInfo[i][rbType] == 2 && RoadBlockInfo[i][rbModelID] == 2899 && IsPlayerInRangeOfPoint(playerid, 2, RoadBlockInfo[i][rbPosX], RoadBlockInfo[i][rbPosY], RoadBlockInfo[i][rbPosZ]))
        {
            GetVehicleDamageStatus(vehicleid, panels, doors, lights, tires);
            if(tires != 15)
            {
                UpdateVehicleDamageStatus(vehicleid, panels, doors, lights, 15);
            }
            break;
        }
        if(RoadBlockInfo[i][rbExists] && RoadBlockInfo[i][rbType] == 2 && RoadBlockInfo[i][rbModelID] == 2892 && IsPlayerInRangeOfPoint(playerid, 2.5, RoadBlockInfo[i][rbPosX], RoadBlockInfo[i][rbPosY], RoadBlockInfo[i][rbPosZ]))
        {
            GetVehicleDamageStatus(vehicleid, panels, doors, lights, tires);
            if(tires != 15)
            {
                UpdateVehicleDamageStatus(vehicleid, panels, doors, lights, 15);
            }
            break;
        }
        if(RoadBlockInfo[i][rbExists] && RoadBlockInfo[i][rbType] == 2 && RoadBlockInfo[i][rbModelID] == 1593 && IsPlayerInRangeOfPoint(playerid, 1.0, RoadBlockInfo[i][rbPosX], RoadBlockInfo[i][rbPosY], RoadBlockInfo[i][rbPosZ]))
        {
            GetVehicleDamageStatus(vehicleid, panels, doors, lights, tires);
            if(tires != 15)
            {
                UpdateVehicleDamageStatus(vehicleid, panels, doors, lights, 15);
            }
            break;
        }
    }
    return 1;
}

public OnPlayerStreamIn(playerid, forplayerid)
{
    if(PlayerInfo[playerid][pMasked])
    {
        if(PlayerInfo[forplayerid][pAdminDuty])
        {
            SetPlayerMarkerForPlayer(forplayerid, playerid, (PlayerInfo[forplayerid][pAdminDuty]) ? COLOR_YELLOW : 0xFFFFFF00);
            ShowPlayerNameTagForPlayer(forplayerid, playerid, true);
        }
        else ShowPlayerNameTagForPlayer(forplayerid, playerid, false);
    }
    else ShowPlayerNameTagForPlayer(forplayerid, playerid, true);

    return 1;
}

public OnPlayerStreamOut(playerid, forplayerid)
{
    return 1;
}

public OnVehicleStreamIn(vehicleid, forplayerid)
{
    return 1;
}

public OnVehicleStreamOut(vehicleid, forplayerid)
{
    return 1;
}

public OnPlayerCommandPerformed(playerid, cmd[], params[], result, flags)
{
    if(!PlayerInfo[playerid][pLogged]) return 0;
    if(result == -1)
    {
        mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT * FROM cheat_words WHERE command = '%e'", cmd);
        mysql_tquery(ourConnection, queryx, "OnCommandSended", "ds", playerid, cmd);

        SendClientMessage(playerid, COLOR_BRHELP, "Server: {FFFFFF}Böyle bir komut bulunamadý. {919FAF}/yardim {FFFFFF}ya da {919FAF}/sorusor {FFFFFF}komutu ile yardým alabilirsiniz.");
    }

    return 1;
}

public OnPlayerCommandReceived(playerid, cmd[], params[], flags)
{
    if(!PlayerInfo[playerid][pLogged])
    {
        SunucuMesajiC(playerid, "Henüz giriþ yapmadýn."); return 0;
    }
    if(PlayerInfo[playerid][pAntiSpam] - gettime() > 0 && SunucuBilgi[AntiSpam] && PlayerInfo[playerid][pAdmin] < 2)
    {
        PlayerInfo[playerid][pAntiSpamer] += 1;

        if(PlayerInfo[playerid][pAntiSpamer] > 5)
            SendAdminAlert(true, COLOR_YELLOW, "AdmWarn: %s (%d) komut spamý yapýyor. [Saniye baþýna %d kod giriþi | /%s %s]", ReturnRoleplayName(playerid), playerid, PlayerInfo[playerid][pAntiSpamer], cmd, params);

        if(PlayerInfo[playerid][pAntiSpamer] >= 10)
            KickPlayer(playerid , "SA-AC", "Antispam");
        
        HataMesajiC(playerid, "Komut kullanýmýný bu kadar sýk kullanmayýn."); return 0;
    }

    if(PlayerInfo[playerid][pJailTime] > 1 && !PlayerInfo[playerid][pJailC])
    {
        HataMesajiC(playerid, "OOC hapis süren bitmeden bu komutu kullanamazsýn."); return 0;
    }

    if(SunucuBilgi[AntiSpam])
    {
        PlayerInfo[playerid][pAntiSpamer] = 0;
        PlayerInfo[playerid][pAntiSpam] = gettime() + 1;
        if(PlayerInfo[playerid][pIzleniyor] != -1)
        {
            if(PlayerInfo[PlayerInfo[playerid][pIzleniyor]][pAdmin] > 3) SunucuMesaji(PlayerInfo[playerid][pIzleniyor], "[CMD] %s: /%s %s - %s", ReturnRoleplayName(playerid), cmd, params, ReturnDate());
            else PlayerInfo[playerid][pIzleniyor] = -1;
        }
    }

    switch(flags)
    {
       case CMD_SUPPORTER: if(PlayerInfo[playerid][pAdmin] < 1)
        {
            HataMesajiC(playerid, "Yeterli yetkiye sahip deðilsin."); return 0;
        }
       case CMD_SUPPORTER2: if(PlayerInfo[playerid][pAdmin] < 2)
        {
            HataMesajiC(playerid, "Yeterli yetkiye sahip deðilsin."); return 0;
        }
       case CMD_SUPPORTER3: if(PlayerInfo[playerid][pAdmin] < 3)
        {
            HataMesajiC(playerid, "Yeterli yetkiye sahip deðilsin."); return 0;
        }
        case CMD_jamyPlus: if(PlayerInfo[playerid][pAdmin] < LEVEL11)
        {
            HataMesajiC(playerid, "Yeterli yetkiye sahip deðilsin."); return 0;
        }
        case CMD_Marvellous: if(PlayerInfo[playerid][pAdmin] < OWNER)
        {
            HataMesajiC(playerid, "Yeterli yetkiye sahip deðilsin."); return 0;
        }
        case CMD_iglead: if(PlayerInfo[playerid][pAdmin] < GAMEADMIN4)
        {
            HataMesajiC(playerid, "Yeterli yetkiye sahip deðilsin."); return 0;
        }
        case CMD_GAME3: if(PlayerInfo[playerid][pAdmin] < GAMEADMIN3)
        {
            HataMesajiC(playerid, "Yeterli yetkiye sahip deðilsin."); return 0;
        }
        case CMD_GAME2: if(PlayerInfo[playerid][pAdmin] < GAMEADMIN2)
        {
            HataMesajiC(playerid, "Yeterli yetkiye sahip deðilsin."); return 0;
        }
        case CMD_GAME1: if(PlayerInfo[playerid][pAdmin] < GAMEADMIN1)
        {
            HataMesajiC(playerid, "Yeterli yetkiye sahip deðilsin."); return 0;
        }
        case CMD_PDFDLSNNMODGOV: if(Faction_GetType(PlayerInfo[playerid][pFaction]) != POLICE && (PlayerInfo[playerid][pAdmin] < GAMEADMIN1) && Faction_GetType(PlayerInfo[playerid][pFaction]) != MEDICAL && Faction_GetType(PlayerInfo[playerid][pFaction]) != LSNN && Faction_GetType(PlayerInfo[playerid][pFaction]) != GOVERNMENT)
        {
            HataMesajiC(playerid, "Bu komutu kullanmak için polis veya yönetici olmalýsýn."); return 0;
        }
        case CMD_PDFDLSNNMOD: if(Faction_GetType(PlayerInfo[playerid][pFaction]) != POLICE && (PlayerInfo[playerid][pAdmin] < GAMEADMIN1) && Faction_GetType(PlayerInfo[playerid][pFaction]) != MEDICAL && Faction_GetType(PlayerInfo[playerid][pFaction]) != LSNN)
        {
            HataMesajiC(playerid, "Bu komutu kullanmak için polis veya yönetici olmalýsýn."); return 0;
        }
        case CMD_DEVELOPER: if(PlayerInfo[playerid][pAdmin] < DEVELOPER) {
            HataMesajiC(playerid, "Yeterli yetkiye sahip deðilsin."); return 0;
        }
        case CMD_USER: if(!PlayerInfo[playerid][pLogged] || (PlayerInfo[playerid][pJailTime] && !PlayerInfo[playerid][pJailC]) || PlayerInfo[playerid][pDeath])
        {
            HataMesajiC(playerid, "Hapiste veya yaralýyken bu komutu kullanamazsýn."); return 0;
        }
        case CMD_USEROOC: if(!PlayerInfo[playerid][pLogged] || (PlayerInfo[playerid][pJailTime] && !PlayerInfo[playerid][pJailC]))
        {
            HataMesajiC(playerid, "Hapiste bu komutu kullanamazsýn."); return 0;
        }
        case CMD_LSPD: if(PlayerInfo[playerid][pFaction] == -1 || Faction_GetType(PlayerInfo[playerid][pFaction]) != POLICE || !PlayerInfo[playerid][pFactionDuty] || PlayerInfo[playerid][pDeath])
        {
            HataMesajiC(playerid, "Bu komutu kullanmak için iþbaþýnda bir polis olmalýsýn."); return 0;
        }
        case CMD_LSFD: if(PlayerInfo[playerid][pFaction] == -1 || Faction_GetType(PlayerInfo[playerid][pFaction]) != MEDICAL || !PlayerInfo[playerid][pFactionDuty] || PlayerInfo[playerid][pDeath])
        {
            HataMesajiC(playerid, "Bu komutu kullanmak için iþbaþýnda bir yangýn departmaný çalýþaný olmalýsýn."); return 0;
        }
        case CMD_PDFD: if(PlayerInfo[playerid][pFaction] == -1 || Faction_GetType(PlayerInfo[playerid][pFaction]) != POLICE && Faction_GetType(PlayerInfo[playerid][pFaction]) != MEDICAL || !PlayerInfo[playerid][pFactionDuty] || PlayerInfo[playerid][pDeath])
        {
            HataMesajiC(playerid, "Bu komutu kullanmak için iþbaþýnda bir polis veya yangýn departmaný çalýþaný olmalýsýn."); return 0;
        }
        case CMD_PDGOV: if(PlayerInfo[playerid][pFaction] == -1 || Faction_GetType(PlayerInfo[playerid][pFaction]) != POLICE && Faction_GetType(PlayerInfo[playerid][pFaction]) != GOVERNMENT || !PlayerInfo[playerid][pFactionDuty] || PlayerInfo[playerid][pDeath])
        {
            HataMesajiC(playerid, "Bu komutu kullanmak için iþbaþýnda bir polis veya hükümet çalýþaný olmalýsýn."); return 0;
        }
        case CMD_PDFDGOV: if(PlayerInfo[playerid][pFaction] == -1 || Faction_GetType(PlayerInfo[playerid][pFaction]) != POLICE && Faction_GetType(PlayerInfo[playerid][pFaction]) != MEDICAL && Faction_GetType(PlayerInfo[playerid][pFaction]) != GOVERNMENT || !PlayerInfo[playerid][pFactionDuty] || PlayerInfo[playerid][pDeath])
        {
            HataMesajiC(playerid, "Bu komutu kullanmak için iþbaþýnda bir polis veya hükümet çalýþaný olmalýsýn."); return 0;
        }
        case CMD_FDGOV: if(PlayerInfo[playerid][pFaction] == -1 || Faction_GetType(PlayerInfo[playerid][pFaction]) != MEDICAL && Faction_GetType(PlayerInfo[playerid][pFaction]) != GOVERNMENT || !PlayerInfo[playerid][pFactionDuty] || PlayerInfo[playerid][pDeath])
        {
            HataMesajiC(playerid, "Bu komutu kullanmak için iþbaþýnda bir yangýn departmaný çalýþaný veya hükümet çalýþaný olmalýsýn."); return 0;
        }
        case CMD_LSNN: if(PlayerInfo[playerid][pFaction] == -1 || Faction_GetType(PlayerInfo[playerid][pFaction]) != LSNN || !PlayerInfo[playerid][pFactionDuty] || PlayerInfo[playerid][pDeath])
        {
            HataMesajiC(playerid, "Bu komutu kullanmak için iþbaþýnda bir televizyon kanalýnda çalýþmalýsýn."); return 0;
        }
        case CMD_SERVERFACTS: if(PlayerInfo[playerid][pFaction] == -1 || Faction_GetType(PlayerInfo[playerid][pFaction]) != POLICE && Faction_GetType(PlayerInfo[playerid][pFaction]) != GOVERNMENT && Faction_GetType(PlayerInfo[playerid][pFaction]) != MEDICAL && Faction_GetType(PlayerInfo[playerid][pFaction]) != LSNN || !PlayerInfo[playerid][pFactionDuty] || PlayerInfo[playerid][pDeath])
        {
            HataMesajiC(playerid, "Bu komutu kullanmak için iþbaþýnda bir kuruluþta çalýþmalýsýn."); return 0;
        }
        case CMD_LEGALFACT: if(PlayerInfo[playerid][pFaction] == -1 || Faction_GetType(PlayerInfo[playerid][pFaction]) > LSNN || !PlayerInfo[playerid][pFactionDuty] || PlayerInfo[playerid][pDeath])
        {
            HataMesajiC(playerid, "Bu komutu kullanmak için iþbaþý durumunda legal türünde bir oluþumda olmalýsýn."); return 0;
        }
        case CMD_GOV: if(PlayerInfo[playerid][pFaction] == -1 || Faction_GetType(PlayerInfo[playerid][pFaction]) != GOVERNMENT || !PlayerInfo[playerid][pFactionDuty] || PlayerInfo[playerid][pDeath])
        {
            HataMesajiC(playerid, "Bu komutu kullanmak için devlet çalýþaný olmalýsýn."); return 0;
        }
        default: return 1;
    }
    return 1;
}

public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
    return 1;
}

public OnPlayerClickPlayer(playerid, clickedplayerid, source)
{
    if(clickedplayerid != playerid && PlayerInfo[playerid][pLogged])
    {
        if(PlayerInfo[playerid][pJailTime] && !PlayerInfo[playerid][pJailC])
            return HataMesaji(playerid, "Bu fonksiyondan þu anda yararlanamazsýn.");

        Dialog_Show(playerid, DialogPMYolla, DIALOG_STYLE_INPUT, "Özel Mesaj", "%s kiþisine göndermek istediðin özel mesajý gir:", "Gönder", "Kapat", ReturnRoleplayName(clickedplayerid));
        SetPVarInt(playerid, "pmid", clickedplayerid);
    }
    return 1;
}

public OnPlayerClickTextDraw(playerid, Text:clickedid)
{
    if(clickedid == Text:INVALID_TEXT_DRAW && PlayerInfo[playerid][pDealerListitem] != -1)
        Dealer_CloseTD(playerid);
    return 1;
}

public OnPlayerClickPlayerTextDraw(playerid, PlayerText:playertextid)
{
    new j = Pickup_Nearest(playerid, ELEMENT_DEALER);

    if(playertextid == TDDealer_Select[playerid][8])
        Dealer_CloseTD(playerid);

    else if(playertextid == TDDealer_Select[playerid][7])
    {
        new listitem = PlayerInfo[playerid][pDealerListitem];

        if(PlayerInfo[playerid][pCash] < DealerInfo[j][dPrice][listitem])return
            HataMesaji(playerid, "Yeterli paran yok. ($%d)", DealerInfo[j][dPrice][listitem]);

        new model = DealerInfo[j][dModel][listitem];
        
        new problem = 0;
        for(new i; i < sizeof(PremiumVehicles); ++i)
        {
            if(PremiumVehicles[i][pvmodelid] == model)
            {
                if(PlayerInfo[playerid][pPremium] >= PremiumVehicles[i][pvdonator]) problem = 0;
                else problem = 1;
                
                if(problem == 1 && PremiumVehicles[i][pvdonator] == 1 && PremiumVehicles[i][pvmodelid] != 468 && PlayerInfo[playerid][pBMXPermission]) problem = 0;
                break;
            }
        }
        
        if(problem == 1) return HataMesaji(playerid, "Bu aracý satýn alamazsýnýz, gerekli izinlere sahip deðilsiniz.");

        new count = Vehicle_GetLimit(playerid);

        if(GetPlayerVehicleCount(playerid) >= count)return
            HataMesaji(playerid, "Zaten bir araca sahipsin. (limitin dolu)", count);

        new spawnedVehiclesLimit = (!PlayerInfo[playerid][pPremium]) ? MAX_SPAWNED_VEH : (PlayerInfo[playerid][pPremium] == 1) ? MAX_SPAWNED_VEH_BRONZE : (PlayerInfo[playerid][pPremium] == 2) ? MAX_SPAWNED_VEH_SILVER : MAX_SPAWNED_VEH_GOLD;

        if(Vehicle_SpawnedCount(playerid) >= spawnedVehiclesLimit)return
            HataMesaji(playerid, "Zaten %d tane araç çýkartmýþsýn. Bir tanesini sakla.", spawnedVehiclesLimit);

        PlayerInfo[playerid][pBuyingVehicle] = 1;
        PlayerInfo[playerid][pSelectedColors][0] = 0;
        PlayerInfo[playerid][pSelectedColors][1] = 0;

        new vehicleid = CreateVehicle(model, DealerInfo[j][dVehX], DealerInfo[j][dVehY], DealerInfo[j][dVehZ], 45.0, 0, 0, -1);

        SetVehicleParamsCarWindows(vehicleid, VEHICLE_PARAMS_ON, VEHICLE_PARAMS_ON, VEHICLE_PARAMS_ON, VehicleInfo[vehicleid][vObje]);

        PutPlayerInVehicle(playerid, vehicleid, 0);

        new Float:x, Float:y;
        GetXYInFrontOfPlayer(playerid, x, y, 10.0);

        SetPlayerCameraPos(playerid, x, y, DealerInfo[j][dVehZ] + 2.0);
        SetPlayerCameraLookAt(playerid, DealerInfo[j][dVehX], DealerInfo[j][dVehY], DealerInfo[j][dVehZ]);

        PlayerInfo[playerid][pDealerVehicle] = GetPlayerVehicleID(playerid);
        PlayerInfo[playerid][pVehiclePrice] = DealerInfo[j][dPrice][listitem];

        VehicleInfo[vehicleid][vTemporary] = 1;
        VehicleInfo[vehicleid][vDestroyed] = false;

        TogglePlayerControllable(playerid, false);
        PlayerInfo[playerid][pFreezed] = 1;

        new r = random(500);

        AC_SetPlayerVirtualWorld(playerid, r + playerid);
        SetVehicleVirtualWorld(vehicleid, r + playerid);

        Dealer_CloseTD(playerid);
        Dialog_Show(playerid, DialogRenkSecimi, DIALOG_STYLE_LIST, "Araç Renk Seçimi", "Renk kodunu gir", "Tamam", "");
//      Dialog_Show(playerid, DialogRenkSecimi, DIALOG_STYLE_LIST, "Araç Renk Seçimi", "Renk kodunu gir\nYön tuþlarý ile renk kodu seç", "Tamam", "");
        Iter_Add(Vehicles, vehicleid);
    }
    else if(playertextid == TDDealer_Select[playerid][3] || playertextid == TDDealer_Select[playerid][4])
    {
        new id = PlayerInfo[playerid][pDealerListitem]; id = (playertextid == TDDealer_Select[playerid][3]) ? id - 1 : id + 1;
        new string[32];

        Dealer_AssignValidValue(j, id);
        new premiumLevel;// = Vehicle_Premium(DealerInfo[j][dModel][id]);
        PlayerInfo[playerid][pDealerListitem] = id;

        PlayerTextDrawHide(playerid, TDDealer_Select[playerid][2]);
        PlayerTextDrawSetPreviewModel(playerid, TDDealer_Select[playerid][2], DealerInfo[j][dModel][id]);
        PlayerTextDrawShow(playerid, TDDealer_Select[playerid][2]);

        new model = DealerInfo[j][dModel][id];

        for(new i; i < sizeof(PremiumVehicles); ++i)
        {
            if(PremiumVehicles[i][pvmodelid] == model)
            {
                premiumLevel = PremiumVehicles[i][pvdonator];
                break;
            }
        }

        if(premiumLevel)
        {
            static const premiumName[5][20] = {"~y~DONATOR", "~y~DONATOR", "~y~DONATOR", "~y~DONATOR", "~y~DONATOR"};

            PlayerTextDrawShow(playerid, TDDealer_Select[playerid][9]);
            PlayerTextDrawSetString(playerid, TDDealer_Select[playerid][9], premiumName[premiumLevel - 1]);
        }
        else PlayerTextDrawHide(playerid, TDDealer_Select[playerid][9]);

        strmid(string, GetVehicleModelName(DealerInfo[j][dModel][id]), 0, 32);
        PlayerTextDrawSetString(playerid, TDDealer_Select[playerid][5], string);

        format(string,sizeof(string),"~w~Fiyat:~y~ %d$", DealerInfo[j][dPrice][id]);
        PlayerTextDrawSetString(playerid, TDDealer_Select[playerid][6], string);
    }
    return 1;
}

public OnVehicleDamageStatusUpdate(vehicleid, playerid)
{
    if(!PlayerInfo[playerid][pEmniyetKemeri] && !IsABike(vehicleid) && !IsAMotorBike(vehicleid) && VehicleInfo[vehicleid][vELM] == false)
    {
        new Float:pHP;
        GetPlayerHealth(playerid, pHP);
        AC_SetPlayerHealth(playerid, (pHP - 1));
    }
    return Vehicle_DegraseComponentHP(vehicleid);
}

public OnPlayerAirbreak(playerid)return
    AC_Detect(playerid, AC_AIRBREAK_CODE);

public OnPlayerModelSelectionEx(playerid, response, extraid, modelid)
{
    if(!response)return 0;
    if(extraid == TTEZGAH)
    {
        PlayerInfo[playerid][pTezgah] = modelid;
        SunucuMesaji(playerid, "%d ID'li tezgahý seçtiniz.", modelid);
        Dialog_Show(playerid, DialogTezgahMasaBuy, DIALOG_STYLE_MSGBOX, "Tezgah Sistemi", "Bir tezgah almak üzeresiniz, bu sistem BETA sürümündedir.\nTezgah tek baþýna $4750 tutacak, fakat eðer masa da alýrsanýz $5000 ödeyeceksiniz.\nMasa almak istiyor musunuz?", "Evet", "Hayýr");
    }
    else if(extraid == TCOPKUTUSU) {
        SetPVarInt(playerid, "CopKutusuObje", modelid);
        new Float:pX, Float:pY, Float:pZ, Float:pA;
        GetPlayerPos(playerid, pX, pY, pZ);
        GetPlayerFacingAngle(playerid, pA);
        GetXYInFrontOfPlayer(playerid, pX, pY, 2.0);
        if(PlayerInfo[playerid][pEditingMode]) return HataMesajiC(playerid, "Bir objeyi düzenlerken bunu yapamazsýn.");
        new tmpObj;
        tmpObj = CreateDynamicObject(modelid, pX, pY, pZ, 0.0, 0.0, pA);
        EditDynamicObject(playerid, tmpObj);
        SetPVarInt(playerid, "CopDuzenliyor", 1);
        SetPVarInt(playerid, "DuzenledigiCop", -1);
        SunucuMesaji(playerid, "Disk ikonuna basarsanýz çöp kutusu eklenecek, iptal ederseniz silinecektir.");
    }
    else if(extraid == TISYIYECEK)
    {
        new buildingid = GetPlayerBuilding(playerid, true);
        new slot = PlayerInfo[playerid][pSelectedSlot];
        if(buildingid == -1) return HataMesajiC(playerid, "Ýþyerinizin yakýnýnda ya da içerisinde deðilsiniz.");
        BuildingInfo[buildingid][bUrunFiyat][slot] = GetPVarInt(playerid, "UrunFiyat");
        new urunAdi[80];
        GetPVarString(playerid, "UrunIsim", urunAdi, 80);
        format(BuildingUrunInfo[buildingid][slot], 80, "%s", urunAdi);
        BuildingInfo[buildingid][bUrunTip][slot] = GetPVarInt(playerid, "UrunTip");
        BuildingInfo[buildingid][bUrunObje][slot] = modelid;
        SunucuMesajiC(playerid, "Ürün satýþa konuldu.");
        DeletePVar(playerid, "UrunFiyat");
        DeletePVar(playerid, "UrunIsim");
        DeletePVar(playerid, "UrunTip");
    }
    else if(extraid == TKIYAFET)
    {
        if(GetPVarInt(playerid, "kiyafetaliyorev") == 1)
        {
            if(PlayerInfo[playerid][pCash] < 250 && PlayerInfo[playerid][pPremium] < 4) return HataMesajiC(playerid, "Yeterince paranýz yok.");
            if(PlayerInfo[playerid][pCash] < 125 && PlayerInfo[playerid][pPremium] < 5) return HataMesajiC(playerid, "Yeterince paranýz yok.");

            new hid = GetPVarInt(playerid, "aldigiev"), slid = GetPVarInt(playerid, "aldigislot");
            DeletePVar(playerid, "aldigiev");
            DeletePVar(playerid, "aldigislot");
            HouseInfo[hid][hKiyafet][slid] = modelid;

            if(PlayerInfo[playerid][pPremium] == 5)
            {
                BasariMesaji(playerid, "Evine kýyafet(ID: %d) satýn aldýn.", modelid);
            }
            else if(PlayerInfo[playerid][pPremium] == 4)
            {
                OAC_GivePlayerMoney(playerid, -125);
                BasariMesaji(playerid, "$125 karþýlýðýnda evine kýyafet(ID: %d) satýn aldýn.", modelid);
            }
            else
            {
                OAC_GivePlayerMoney(playerid, -250);
                BasariMesaji(playerid, "$250 karþýlýðýnda evine kýyafet(ID: %d) satýn aldýn.", modelid);
            }
            DeletePVar(playerid, "kiyafetaliyorev");
            DeletePVar(playerid, "kiyafetdukkan");
            return 1;
        }
        else if(GetPVarInt(playerid, "kiyafetaliyor") == 1)
        {
            if(BuildingInfo[GetPVarInt(playerid, "kiyafetdukkan")][bProducts] < 1) return BasariMesaji(playerid, "Bu dükkanda yeterince ürün yok.");
            if(PlayerInfo[playerid][pCash] < 250 && PlayerInfo[playerid][pPremium] < 4) return HataMesajiC(playerid, "Yeterince paranýz yok.");
            if(PlayerInfo[playerid][pCash] < 125 && PlayerInfo[playerid][pPremium] < 5) return HataMesajiC(playerid, "Yeterince paranýz yok.");

            PlayerInfo[playerid][pSkin] = modelid;
            SetPlayerSkinEx(playerid, modelid);

            if(PlayerInfo[playerid][pPremium] == 5)
            {
                BasariMesaji(playerid, "Kýyafet(ID: %d) aldýn.", modelid);
            }
            else if(PlayerInfo[playerid][pPremium] == 4)
            {
                OAC_GivePlayerMoney(playerid, -125);
                BasariMesaji(playerid, "$125 karþýlýðýnda kýyafet(ID: %d) satýn aldýn.", modelid);
                BuildingInfo[GetPVarInt(playerid, "kiyafetdukkan")][bCash] += 125;
                if(BuildingInfo[GetPVarInt(playerid, "kiyafetdukkan")][bOwner])BuildingInfo[GetPVarInt(playerid, "kiyafetdukkan")][bProducts]--;

            }
            else
            {
                OAC_GivePlayerMoney(playerid, -250);
                BasariMesaji(playerid, "$250 karþýlýðýnda kýyafet(ID: %d) satýn aldýn.", modelid);
                BuildingInfo[GetPVarInt(playerid, "kiyafetdukkan")][bCash] += 250;
                if(BuildingInfo[GetPVarInt(playerid, "kiyafetdukkan")][bOwner])BuildingInfo[GetPVarInt(playerid, "kiyafetdukkan")][bProducts]--;
            }
            SaveBuilding(GetPVarInt(playerid, "kiyafetdukkan"));
            mysql_format(ourConnection, queryx, sizeof(queryx), "UPDATE characters SET new_skin = '%d' WHERE id = '%d'", modelid, PlayerInfo[playerid][pID]);
            mysql_tquery(ourConnection, queryx);
            DeletePVar(playerid, "kiyafetaliyor");
            DeletePVar(playerid, "kiyafetdukkan");
            return 1;
        }
        else if(GetPVarInt(playerid, "kiyafetaliyor") == 2)
        {
            if(PlayerInfo[playerid][pCash] < 250 && PlayerInfo[playerid][pPremium] < 4) return HataMesajiC(playerid, "Yeterince paranýz yok.");
            if(PlayerInfo[playerid][pCash] < 125 && PlayerInfo[playerid][pPremium] < 5) return HataMesajiC(playerid, "Yeterince paranýz yok.");

            PlayerInfo[playerid][pSkin] = modelid;
            SetPlayerSkinEx(playerid, modelid);
            
            if(PlayerInfo[playerid][pPremium] == 5)
            {
                BasariMesaji(playerid, "Kýyafet(ID: %d) aldýn.", modelid);
            }
            else if(PlayerInfo[playerid][pPremium] == 4)
            {
                OAC_GivePlayerMoney(playerid, -125);
                BasariMesaji(playerid, "$125 karþýlýðýnda kýyafet(ID: %d) satýn aldýn.", modelid);
            }
            else
            {
                OAC_GivePlayerMoney(playerid, -250);
                BasariMesaji(playerid, "$250 karþýlýðýnda kýyafet(ID: %d) satýn aldýn.", modelid);
            }
            mysql_format(ourConnection, queryx, sizeof(queryx), "UPDATE characters SET new_skin = '%d' WHERE id = '%d'", modelid, PlayerInfo[playerid][pID]);
            mysql_tquery(ourConnection, queryx);
            DeletePVar(playerid, "kiyafetaliyor");
            DeletePVar(playerid, "kiyafetdukkan");
            return 1;
        }
        else if(GetPVarInt(playerid, "kiyafetaliyor") == 0)
        {
            if(PlayerInfo[playerid][pKarakterYapti]) return 1;
            TogglePlayerSpectating(playerid, 0);
            TogglePlayerControllable(playerid, true);
            PlayerInfo[playerid][pFreezed] = 0;
            SetCameraBehindPlayer(playerid);
            PlayerSpectatePlayer(playerid, INVALID_PLAYER_ID);
            PlayerSpectateVehicle(playerid, INVALID_VEHICLE_ID);
            PlayerInfo[playerid][pInRecon] = -1;
            AC_ResetTimer(playerid);
            SetCameraBehindPlayer(playerid);
            PreloadAnimations(playerid);
            SetPlayerPos(playerid, SPAWN_X, SPAWN_Y, SPAWN_Z);
            SetPlayerFacingAngle(playerid, SPAWN_A);
            SetPlayerInterior(playerid, 0);
            AC_SetPlayerVirtualWorld(playerid, 0);
            BasariMesaji(playerid, "Kayýt iþlemi tamamlandý, iyi eðlenceler.");
            PlayerInfo[playerid][pHealth] = 100;
            PlayerInfo[playerid][pLicenses][0] = 0;
            PlayerInfo[playerid][pLicenses][1] = 0;
            PlayerInfo[playerid][pLicenses][2] = 0;
            SetPlayerSkinEx(playerid, modelid);
            PlayerInfo[playerid][pSkin] = modelid;
            PlayerInfo[playerid][pKarakterYapti] = 1;
            SaveCharacter(playerid);
            DeletePVar(playerid, "kiyafetaliyor");
            ClearAnimations(playerid, 1);
            AC_SetPlayerHealth(playerid, 100);
            Damages_Reset(playerid);
            
            if(PlayerInfo[playerid][pLevel] == 1 && PlayerInfo[playerid][pCoyn] == 0 && PlayerInfo[playerid][pPremium] == 0)
            {
                mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT * FROM accounts WHERE username = '%e'", PlayerInfo[playerid][pUsername]);
                //mysql_tquery(ourConnection, queryx, "ReferansKontrol", "d", playerid);
            }
            return 1;
        }
    }
    else if(extraid == TEVKIYAFET) {
        if(PlayerInfo[playerid][pEvdeKiyafet]) {
            if(!response) {
                PlayerInfo[playerid][pEvdeKiyafet] = false;
                return 0;
            }
        }
        if(!response)return 0;
        if(PlayerInfo[playerid][pEvdeKiyafet]) {
            new hoid = GetPlayerHouse(playerid, true);
            if(hoid == -1) return HataMesajiC(playerid, "Evde deðilsiniz.");
            if(modelid < 1) return HataMesajiC(playerid, "Belirttiðiniz slotta bir kýyafet yok.");
            new slot = -1, oyuncuSkin;
            for(new i; i < 3; i++) {
                if(modelid == HouseInfo[hoid][hKiyafet][i]) {
                    slot = i;
                    break;
                }
            }
            if(slot == -1) return HataMesajiC(playerid, "Bilinmeyen bir hata oluþtu, lütfen tekrar deneyin.");
            oyuncuSkin = PlayerInfo[playerid][pSkin];
            PlayerInfo[playerid][pSkin] = modelid;
            SetPlayerSkinEx(playerid, modelid);
            HouseInfo[hoid][hKiyafet][slot] = oyuncuSkin;
            BasariMesaji(playerid, "Kýyafetini %d olarak deðiþtirdin.", modelid);
            PlayerInfo[playerid][pEvdeKiyafet] = false;
            PlayerAME(playerid, "evinde kýyafetini deðiþtirir.");
            mysql_format(ourConnection, queryx, sizeof(queryx), "UPDATE characters SET new_skin = '%d' WHERE id = '%d'", modelid, PlayerInfo[playerid][pID]);
            mysql_tquery(ourConnection, queryx);
        }else {
            new buildingid = GetPlayerBuilding(playerid, true), aldigiev = GetPVarInt(playerid, "aldigiev"), slot;
            for(new i; i < 3; i++) {
                if(modelid == HouseInfo[aldigiev][hKiyafet][i]) {
                    slot = i;
                    break;
                }
            }
            //SunucuMesaji(playerid, "Aþaðýdan bir skin seçin, seçtiðiniz skin size $50'e mâl olacak.");
            if(PlayerInfo[playerid][pSex] == 0 && PlayerInfo[playerid][pTenRengi] == 0)  // erkek beyaz
                ShowModelSelectionMenuEx(playerid, MaleWhite, TOTAL_M_WHITE, "Kiyafetler", TKIYAFET, 16.0, 0.0, -55.0);
            else if(PlayerInfo[playerid][pSex] == 0 && PlayerInfo[playerid][pTenRengi] == 1)  // erkek siyah
                ShowModelSelectionMenuEx(playerid, MaleBlack, TOTAL_M_BLACK, "Kiyafetler", TKIYAFET, 16.0, 0.0, -55.0);

            else if(PlayerInfo[playerid][pSex] == 1 && PlayerInfo[playerid][pTenRengi] == 0)  // kadýn beyaz
                ShowModelSelectionMenuEx(playerid, FemaleWhite, TOTAL_F_WHITE, "Kiyafetler", TKIYAFET, 16.0, 0.0, -55.0);

            else if(PlayerInfo[playerid][pSex] == 1 && PlayerInfo[playerid][pTenRengi] == 1)  // kadýn siyah
                ShowModelSelectionMenuEx(playerid, FemaleBlack, TOTAL_F_BLACK, "Kiyafetler", TKIYAFET, 16.0, 0.0, -55.0);
            SetPVarInt(playerid, "aldigislot", slot);
            SetPVarInt(playerid, "aldigiev", aldigiev);
            SetPVarInt(playerid, "kiyafetaliyorev", 1);
            SetPVarInt(playerid, "kiyafetdukkan", buildingid);
        }
        return 1;
    }
    else if(extraid == TTELEFON) {
        if(!response)return 1;
        new buildingid = GetPlayerBuilding(playerid, true);
        if(BuildingInfo[buildingid][bType] != STORE) return HataMesajiC(playerid, "Bir 24/7'de deðilsin.");
        if(PlayerInfo[playerid][pCash] < 2500) return HataMesajiC(playerid, "Yeterli paran yok. ($2500)");
        AC_GivePlayerMoney(playerid, -2500, "telefon kilifi");
        PlayerInfo[playerid][pTelefonKilifi] = modelid;
        SunucuMesajiC(playerid, "Yeni bir telefon kýlýfý aldýnýz, tüm telefonlarýnýzda artýk bu kýlýfý kullanacaksýnýz.");
    }
    else if(extraid == TBARIKAT)
    {
        if(!response)return 0;

        if(Iter_Count(RoadBlocks) < MAX_ROADBLOCKS)
        {
            new i = Iter_Free(RoadBlocks),
                location[MAX_ZONE_NAME],
                Float:pX,
                Float:pY,
                Float:pZ,
                Float:pAngle;

            GetPlayerPos(playerid, pX, pY, pZ);
            GetPlayerFacingAngle(playerid, pAngle);

            RoadBlockInfo[i][rbModelID] = modelid;
            RoadBlockInfo[i][rbExists] = 1;
            RoadBlockInfo[i][rbType] = (modelid != 2899 && modelid != 2892 && modelid != 1593) ? 1 : 2;

            if(RoadBlockInfo[i][rbType] == 2)
            {
                RoadBlockInfo[i][rbPosX] = pX+1;
                RoadBlockInfo[i][rbPosY] = pY+1;
                if(RoadBlockInfo[i][rbModelID] == 2892) RoadBlockInfo[i][rbPosZ] = pZ-1;
                else RoadBlockInfo[i][rbPosZ] = pZ-0.9;
            }
            else
            {
                RoadBlockInfo[i][rbPosX] = pX+1;
                RoadBlockInfo[i][rbPosY] = pY+1;
                RoadBlockInfo[i][rbPosZ] = pZ-0.5;
            }

            RoadBlockInfo[i][rbObject] = CreateDynamicObject(modelid, RoadBlockInfo[i][rbPosX], RoadBlockInfo[i][rbPosY], RoadBlockInfo[i][rbPosZ], 0.0, 0.0, pAngle + 90.0, 0, 0);
            format(RoadBlockInfo[i][rOwner], MAX_PLAYER_NAME, ReturnRoleplayName(playerid));

            PlayerInfo[playerid][pEditingMode] = 10;
            PlayerInfo[playerid][pSelectedItem] = i;
            EditDynamicObject(playerid, RoadBlockInfo[i][rbObject]);
            RoadBlockInfo[i][rbFaction] = PlayerInfo[playerid][pFaction];
            GetCoords2DZone(pX, pY, location, MAX_ZONE_NAME);

            PlayerME(playerid, "bir barikat yerleþtirir.");
            Streamer_Update(playerid);
            if(PlayerInfo[playerid][pFaction] != 1) SendFactionMessage(PlayerInfo[playerid][pFaction], "** HQ: %s, %s alanýna bir kontrol noktasý yerleþtirdi.", ReturnRoleplayName(playerid), location);
            else SendFactionMessageTR(PlayerInfo[playerid][pFaction], "** HQ: %s, %s alanýna bir kontrol noktasý yerleþtirdi.", ReturnRoleplayName(playerid), location);
            SetPVarInt(playerid, "RoadblockDuzenle", RoadBlockInfo[i][rbObject]);
            Iter_Add(RoadBlocks, i);
            return 1;
        }
        else return HataMesajiC(playerid, "Barikat limitine ulaþýldý.");
    }
    else if(extraid == TMOBILYA)
    {
        if(!response)
        {
            if(PlayerInfo[playerid][pAdmin] < 2) Dialog_Show(playerid, DialogFurnitureBuyList, DIALOG_STYLE_LIST, "Mobilya Satýn Al", "Duvarlar\nMutfak\nKoltuklar ve Sandalyeler\nYataklar\nAydýnlatma\nMasalar\nDolaplar\nElektronik\nBanyo Malzemeleri\nKapýlar\nÇeþitli (1)\nÇeþitli (2)\nTablolar\nYiyecek/Ýçecek\nAlet Edevat\nKýyafetler\nPlaj Malzemeleri\nPosterler ve Grafitiler\nKutular\nÇöp Kutularý\nDonator\nSpor Aletleri", "Ýleri", "Ýptal");
            else Dialog_Show(playerid, DialogFurnitureBuyList, DIALOG_STYLE_LIST, "Mobilya Satýn Al", "Duvarlar\nMutfak\nKoltuklar ve Sandalyeler\nYataklar\nAydýnlatma\nMasalar\nDolaplar\nElektronik\nBanyo Malzemeleri\nKapýlar\nÇeþitli (1)\nÇeþitli (2)\nTablolar\nYiyecek/Ýçecek\nAlet Edevat\nKýyafetler\nPlaj Malzemeleri\nPosterler ve Grafitiler\nKutular\nÇöp Kutularý\nDonator\nSpor Aletleri\nAdminstrator", "Ýleri", "Ýptal");
            return 1;
        }

        new Float:x, Float:y, Float:z;

        for(new j, js = sizeof(BuyableFurnitures); j < js; j++) if(BuyableFurnitures[j][oModelID] == modelid)
        {
            PlayerInfo[playerid][pSelectedItem] = j;

            GetPlayerPos(playerid, x, y, z);
            GetXYInFrontOfPlayer(playerid, x, y, 2);

            Furniture_Buy(playerid, BuyableFurnitures[j][oModelID], x + 0.8, y, z + 0.8, 0.0, 0.0, 0.0); break;
        }
    }
    else if(extraid == TAKSESUAR)
    {
        if(!response) return 1;//PlayerObjects_ShowCategories(playerid);

        if(PlayerInfo[playerid][pCash] < 5) return HataMesajiC(playerid, "Yeterli paran yok. ($5)");

        for(new j, js = sizeof(PlayerObjectsList); j < js; j++) if(PlayerObjectsList[j][obObject] == modelid)
        {
            new var = PlayerInfo[playerid][pObjectsID][j];
            new p_slot = PlayerInfo[playerid][pObjectSelected];

            if(PlayerInfo[playerid][pPremium] != 5)
            {
                SunucuMesaji(playerid, "%d slotuna \"%s\" aksesuarý eklendi. ($25)", p_slot, PlayerObjectsList[j][obName]);
                OAC_GivePlayerMoney(playerid, -25);
            }
            else
            {
                SunucuMesaji(playerid, "%d slotuna \"%s\" aksesuarý eklendi.", p_slot, PlayerObjectsList[j][obName]);
            }

            mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT * FROM user_objects WHERE character_id = '%d' AND slot = '%d'", PlayerInfo[playerid][pID], p_slot);
            mysql_query(ourConnection, queryx);

            if(cache_num_rows() > 0)
            {
                mysql_format(ourConnection, queryx, sizeof(queryx), "DELETE FROM user_objects WHERE character_id = '%d' AND slot = '%d'", PlayerInfo[playerid][pID], p_slot);
                mysql_tquery(ourConnection, queryx);
            }

            if(!PlayerObjectsList[var][obObject])
            {
                RemovePlayerAttachedObject(playerid, PlayerInfo[playerid][pObjectWearing][p_slot]);
                PlayerInfo[playerid][pObjectWearing][p_slot] = -1;
                return PlayerInfo[playerid][pObjectWearingVar][p_slot] = -1;
            }

            mysql_format(ourConnection, queryx, sizeof(queryx), "INSERT INTO user_objects (character_id, slot, var, model, bone) VALUES ('%d', '%d', '%d', '%d', '%d')", PlayerInfo[playerid][pID], p_slot, var, PlayerObjectsList[var][obObject], PlayerObjectsList[var][obDefaultBone]);
            mysql_tquery(ourConnection, queryx);
            break;
        }
    }
    else if(extraid == DKIYAFET)
    {
        if(!response) return 1;
         
        for(new x; x < 5; x++)
        {
            if(PlayerInfo[playerid][pDonateSkin][x] == modelid)
            {
                SetPlayerSkinEx(playerid, modelid);
                PlayerInfo[playerid][pSkin] = modelid;
                BasariMesaji(playerid, "Donator kýyafetinizi baþarýyla giydiniz.");
                break;
            }
        }
         
    }

    return 1;
}

public OnPlayerEditAttachedObject(playerid, response, index, modelid, boneid, Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ, Float:fRotX, Float:fRotY, Float:fRotZ, Float:fScaleX, Float:fScaleY, Float:fScaleZ)
{
    new weaponid = EditingWeapon[playerid];
    if(weaponid)
    {
        if (response)
        {
            new enum_index = weaponid - 22, weaponname[18], name[MAX_PLAYER_NAME], string[340];

            GetWeaponName(weaponid, weaponname, sizeof(weaponname));
            GetPlayerName(playerid, name, MAX_PLAYER_NAME);

            WeaponSettings[playerid][enum_index][Position][0] = fOffsetX;
            WeaponSettings[playerid][enum_index][Position][1] = fOffsetY;
            WeaponSettings[playerid][enum_index][Position][2] = fOffsetZ;
            WeaponSettings[playerid][enum_index][Position][3] = fRotX;
            WeaponSettings[playerid][enum_index][Position][4] = fRotY;
            WeaponSettings[playerid][enum_index][Position][5] = fRotZ;
            new slot = GetWeaponObjectSlot(weaponid);
            if(slot != -1) SetPlayerAttachedObject(playerid, GetWeaponObjectSlot(weaponid), GetWeaponModelEx(weaponid), WeaponSettings[playerid][enum_index][Bone], fOffsetX, fOffsetY, fOffsetZ, fRotX, fRotY, fRotZ, 1.0, 1.0, 1.0);
            else return HataMesajiC(playerid, "Tüm aksesuar slotlarýný kullanýyorsunuz, bir aksesuar çýkartýp tekrar deneyin.");
            BasariMesaji(playerid, "%s isimli silahýnýzýn pozisyonunu baþarýyla deðiþtirdiniz.", weaponname);

            if(WeaponSettings[playerid][enum_index][duzenlendi])
            {
                mysql_format(ourConnection, string, sizeof(string), "DELETE FROM weaponsettings WHERE sOwner = '%d' AND WeaponID = 'd'", PlayerInfo[playerid][pID], weaponid);
                mysql_tquery(ourConnection, string);
            }

            if(!WeaponSettings[playerid][enum_index][duzenlendi])
            {
                WeaponSettings[playerid][enum_index][duzenlendi] = 1;
                mysql_format(ourConnection, string, sizeof(string), "INSERT INTO weaponsettings (sOwner, WeaponID, PosX, PosY, PosZ, RotX, RotY, RotZ, Bone, duzenlendi) VALUES (%d, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, 1, %d)", PlayerInfo[playerid][pID], weaponid, fOffsetX, fOffsetY, fOffsetZ, fRotX, fRotY, fRotZ, WeaponSettings[playerid][enum_index][duzenlendi]);
                mysql_tquery(ourConnection, string);
            }
        }
        EditingWeapon[playerid] = 0;
        return 1;
    }
    if(!response) return 0;

    if(PlayerInfo[playerid][pObjectEditingSlot] != -1)
    {
        new p_slot = PlayerInfo[playerid][pObjectEditingSlot];
        RemovePlayerAttachedObject(playerid, index);
        if(response) PlayerObjects_UpdatePos(playerid, p_slot, fOffsetX, fOffsetY, fOffsetZ, fRotX, fRotY, fRotZ, fScaleX, fScaleY, fScaleZ);
        PlayerObjects_SetObject(playerid, p_slot, index);
    }
    else if(PlayerInfo[playerid][TepsiEdit])
    {
        if(!response)
        {
            PlayerInfo[playerid][TepsiEdit] = false;
            return 1;
        }
        else if(response)
        {
            new id;
            PlayerInfo[playerid][pMeal] = id;
            RemovePlayerAttachedObject(playerid, 9);
            SetPlayerAttachedObject(playerid, 9, MealInfo[id][mModel], 1, fOffsetX, fOffsetY, fOffsetZ, fRotX, fRotY, fRotZ, 0.500000, 0.816000, 0.500000);
            PlayerInfo[playerid][TepsiEdit] = false;
        }
    }
    return 1;
}

new myobject[MAX_PLAYERS];
public OnPlayerSelectDynamicObject(playerid, objectid, modelid, Float:x, Float:y, Float:z)
{
    if(GetPVarInt(playerid, "aObjeSec") > 0)
    {
        DeletePVar(playerid, "aObjeSec");
        CancelEdit(playerid);
        PlayerInfo[playerid][pSelectedItem] = objectid;
        Dialog_Show(playerid, DialogADOD, DIALOG_STYLE_LIST, "Dinamik Obje Düzenleme", "Konum\nKaldýr\nTexture", "Ýleri", "Ýptal");
    }
    else if(GetPVarInt(playerid, "EsyaCalmaMod") > 0)
    {
        if(!CalinabilirObje(modelid))
            return HataMesajiC(playerid, "Bu eþyayý çalamýyorsun, baþka bir þey dene!");
            
        if(!IsPlayerInRangeOfPoint(playerid, 10.0, x, y, z))
            return HataMesajiC(playerid, "Çalmak istediðin eþyaya yakýn deðilsin.");
            
        DeletePVar(playerid, "EsyaCalmaMod");
        CancelEdit(playerid);
        PlayerInfo[playerid][pSelectedItem] = objectid;
        Dialog_Show(playerid, EsyaCalObjeSil, DIALOG_STYLE_INPUT, "Mobilya Hýrsýzlýðý", "Bir objeyi seçtin, bu seçtiðin objeyi eðer çalmayý denersen kolileyeceksin ve koliledikten sonra tekrar koliden çýkarma þansýn bulunmayacak.\nBu eþyayý çalmak istediðine emin misin? Onaylýyorsan 'EVET' yazmalýsýn.", "Eþyayý Çal!", "Vazgeç");
    }
    else if(GetPVarInt(playerid, "BalikYiyecek") == 1) {
        DeletePVar(playerid, "BalikYiyecek");
        CancelEdit(playerid);
        if(modelid != 19632) return HataMesaji(playerid, "Bir kamp ateþi seçmediniz.");
        new kamp = -1;
        foreach(new i: Player) {
            if(!PlayerInfo[i][pLogged])continue;
            if(PlayerInfo[i][oKampAtesi] == -1)continue;
            if(KampInfo[i][kObje] != objectid)continue;
            kamp = i;
            break;
        }
        if(kamp == -1) return HataMesaji(playerid, "Bir kamp ateþi seçmediniz.");
        if(!IsPlayerInRangeOfPoint(playerid, 5.0, KampInfo[kamp][kPos][0], KampInfo[kamp][kPos][1], KampInfo[kamp][kPos][2])) return HataMesaji(playerid, "Kamp ateþine yeterince yakýn deðilsin.");
        new string[100];
        if(KampInfo[kamp][kBalik][0] == -1 || KampInfo[kamp][kBalikPisti][0] == 0)
            format(string, sizeof(string), "Hazýr deðil\n");
        else if(KampInfo[kamp][kBalik][0] != -1 && KampInfo[kamp][kBalikPisti][0] == 1)
            format(string, sizeof(string), "%s\n", BalikIsimleri[KampInfo[kamp][kBalik][0]][bIsim]);
        if(KampInfo[kamp][kBalik][1] == -1 || KampInfo[kamp][kBalikPisti][1] == 0)
            format(string, sizeof(string), "%sHazýr deðil", string);
        else if(KampInfo[kamp][kBalik][1] != -1 && KampInfo[kamp][kBalikPisti][1] == 1)
            format(string, sizeof(string), "%s%s", BalikIsimleri[KampInfo[kamp][kBalik][1]][bIsim]);
        Dialog_Show(playerid, DialogBalikYe, DIALOG_STYLE_LIST, "Balýk Ye", string, "Ye", "Ýptal");
        SetPVarInt(playerid, "BalikYeKamp", kamp);
    }
    else if(GetPVarInt(playerid, "BarikatSeciyor") == 1) {
        DeletePVar(playerid, "BarikatSeciyor");
        CancelEdit(playerid);
        new barikat = -1;
        for(new i; i < MAX_ROADBLOCKS; i++) {
            if(RoadBlockInfo[i][rbExists]) {
                if(RoadBlockInfo[i][rbObject] == objectid) {
                    barikat = i;
                    break;
                }
            }
        }
        if(barikat != -1) {
            PlayerInfo[playerid][pBarikatObje] = barikat;
            Dialog_Show(playerid, DialogBarikatSec, DIALOG_STYLE_LIST, "Barikat Seçme Menüsü", "Sil\nDüzenle", "Tamam", "Ýptal");
            SunucuMesaji(playerid, "Seçtiðiniz barikat ile ne yapmak istediðinizi seçin.");
        } else return HataMesajiC(playerid, "Seçtiðiniz obje bir barikat deðil.");
    }
    else if(GetPVarInt(playerid, "BalikPisirecek") == 1) {
        CancelEdit(playerid);
        if(modelid != 19632) return HataMesaji(playerid, "Bir kamp ateþi seçmediniz.");
        new slot = GetPVarInt(playerid, "BalikSlot"), kamp = -1;
        DeletePVar(playerid, "BalikPisirecek");
        DeletePVar(playerid, "BalikSlot");
        foreach(new i: Player) {
            if(!PlayerInfo[i][pLogged])continue;
            if(PlayerInfo[i][oKampAtesi] == -1)continue;
            if(KampInfo[i][kObje] != objectid)continue;
            kamp = i;
            break;
        }
        if(kamp == -1) return HataMesaji(playerid, "Bir kamp ateþi seçmediniz.");
        if(KampInfo[kamp][kBalik][0] != -1 && KampInfo[kamp][kBalik][1] != -1) return HataMesaji(playerid, "Bu kamp ateþi daha fazla balýk alamaz.");
        if(PlayerInfo[playerid][pBalikAgirlik][slot] == 0) return HataMesaji(playerid, "Balýðýnýz yok.");
        if(KampInfo[kamp][kBalik][0] == -1) {
            BalikCikar(playerid, slot);
            KampInfo[kamp][kBalik][0] = PlayerInfo[playerid][pBalik][slot];
            KampInfo[kamp][kBalikPismeTimer][0] = 120;
            KampInfo[kamp][kBalikPisti][0] = 0;
            KampInfo[kamp][kBalikYandi][0] = 0;
            new string[100];
            PlayerAME(playerid, "ateþe balýk atar.");
            SunucuMesaji(playerid, "Kamp ateþine balýk attýnýz.");
            format(string, sizeof(string), "{0066ff}Piþen Balýk: {ffffff}%s\n{ffcc00}Piþiyor", BalikIsimleri[PlayerInfo[playerid][pBalik][slot]][bIsim]);
            KampInfo[kamp][kLabelText][0] = CreateDynamic3DTextLabel(string, COLOR_WHITE, KampInfo[kamp][kPos][0], KampInfo[kamp][kPos][1], KampInfo[kamp][kPos][2] - 0.2, 20.0);
        } else if(KampInfo[kamp][kBalik][1] == -1) {
            BalikCikar(playerid, slot);
            KampInfo[kamp][kBalik][1] = PlayerInfo[playerid][pBalik][slot];
            KampInfo[kamp][kBalikPismeTimer][1] = 120;
            KampInfo[kamp][kBalikPisti][1] = 0;
            KampInfo[kamp][kBalikYandi][1] = 0;
            PlayerAME(playerid, "ateþe balýk atar.");
            SunucuMesaji(playerid, "Kamp ateþine balýk attýnýz.");
            new string[100];
            format(string, sizeof(string), "{0066ff}Piþen Balýk: {ffffff}%s\n{ffcc00}Piþiyor", BalikIsimleri[PlayerInfo[playerid][pBalik][slot]][bIsim]);
            KampInfo[kamp][kLabelText][1] = CreateDynamic3DTextLabel(string, COLOR_WHITE, KampInfo[kamp][kPos][0], KampInfo[kamp][kPos][1], KampInfo[kamp][kPos][2] + 0.2, 20.0);
        } else return HataMesaji(playerid, "Bilinmeyen bir hata oluþtu.");
    }
    else
    {
        myobject[playerid] = 0;
        for(new j, js = sizeof(BuyableFurnitures); j < js; j++)
        {
            if(BuyableFurnitures[j][oModelID] == modelid)
            {
                myobject[playerid] = 1;
                break;
            }
        }

        if(myobject[playerid])
        {
            PlayerInfo[playerid][pSelectedItem] = objectid;
            Furniture_ShowOptions(playerid);
            CancelEdit(playerid);
        }
        else HataMesajiC(playerid, "Bu objeyi düzenleme yetkiniz bulunmuyor.");
    }
    return 1;
}
public OnPlayerSelectObject(playerid, type, objectid, modelid, Float:fX, Float:fY, Float:fZ)
{
    if(type == SELECT_OBJECT_GLOBAL_OBJECT)
    {
        if(GetPVarInt(playerid, "aObjeSec") > 0)
        {
            DeletePVar(playerid, "aObjeSec");
            CancelEdit(playerid);
            PlayerInfo[playerid][pSelectedItem] = objectid;
            Dialog_Show(playerid, DialogAOD, DIALOG_STYLE_LIST, "Obje Düzenleme", "Konum\nKaldýr\nTexture", "Ýleri", "Ýptal");
        }
        else
        {
            myobject[playerid] = 0;
            for(new j, js = sizeof(BuyableFurnitures); j < js; j++)
            {
                if(BuyableFurnitures[j][oModelID] == modelid)
                {
                    myobject[playerid] = 1;
                    break;
                }
            }

            if(myobject[playerid])
            {
                PlayerInfo[playerid][pSelectedItem] = objectid;
                Furniture_ShowOptions(playerid);
                CancelEdit(playerid);
            }
            else HataMesajiC(playerid, "Bu objeyi düzenleme yetkiniz bulunmuyor.");
        }
    }
    return 1;
}

public OnPlayerEditObject(playerid, playerobject, objectid, response, Float:fX, Float:fY, Float:fZ, Float:fRotX, Float:fRotY, Float:fRotZ)
{
    if(!PlayerInfo[playerid][pEditingMode])return 1;
    if(PlayerInfo[playerid][pSelectedItem] == -1 && PlayerInfo[playerid][pFurnitureObject] == -1)return 1;

    new id = PlayerInfo[playerid][pSelectedItem];
    switch(PlayerInfo[playerid][pEditingMode])
    {
        case 12:
        {
            Streamer_SetArrayData(STREAMER_TYPE_OBJECT, id, E_STREAMER_EXTRA_ID, g_obj, siz_g_obj);
            if(response == EDIT_RESPONSE_FINAL)
            {
                SetObjectPos(objectid, fX, fY, fZ);
                SetObjectRot(objectid, fRotX, fRotY, fRotZ);

                PlayerInfo[playerid][pEditingMode] = 0;
                PlayerInfo[playerid][pSelectedItem] = -1;
            }
            else if(response == EDIT_RESPONSE_CANCEL)
            {
                SetObjectPos(objectid, g_obj[co_pos_x], g_obj[co_pos_y], g_obj[co_pos_z]);
                SetObjectRot(objectid, g_obj[co_rot_x], g_obj[co_rot_y], g_obj[co_rot_z]);

                PlayerInfo[playerid][pEditingMode] = 0;
                PlayerInfo[playerid][pSelectedItem] = -1;
            }
        }
    }
    return 1;
}

public OnPlayerEditDynamicObject(playerid, objectid, response, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
    if(GetPVarInt(playerid, "KampDuzenliyor") == 1) {
        if(response == EDIT_RESPONSE_FINAL) {
            PlayerAME(playerid, "çadýr kurar.");
            SunucuMesaji(playerid, "Çadýrýnýzý kurdunuz.");
            SetDynamicObjectPos(objectid, x, y, z);
            SetDynamicObjectRot(objectid, rx, ry, rz);
            PlayerInfo[playerid][pKurduguKamp] = objectid;
            DeletePVar(playerid, "KampDuzenliyor");
        }
        else if(response == EDIT_RESPONSE_CANCEL) {
            DestroyDynamicObjectEx(objectid);
            DeletePVar(playerid, "KampDuzenliyor");
        }
    }
    else if(GetPVarInt(playerid, "TezgahDuzenliyor")) {
        if(response == EDIT_RESPONSE_FINAL) {
            new id = GetPVarInt(playerid, "DuzenledigiTezgah");
            DeletePVar(playerid, "TezgahDuzenliyor");
            DeletePVar(playerid, "DuzenledigiTezgah");
            StandInfo[id][sExists] = 1;
            StandInfo[id][sID] = PlayerInfo[playerid][pID];
            StandInfo[id][sModel] = PlayerInfo[playerid][pTezgah];
            format(StandInfo[id][sKuran], MAX_PLAYER_NAME, "%s", ReturnRoleplayName(playerid, true));
            StandInfo[id][sPosX] = x;
            StandInfo[id][sPosY] = y;
            StandInfo[id][sPosZ] = z;
            StandInfo[id][sRotX] = rx;
            StandInfo[id][sRotY] = ry;
            StandInfo[id][sRotZ] = rz;
            SetDynamicObjectPos(StandInfo[id][sObje], StandInfo[id][sPosX], StandInfo[id][sPosY], StandInfo[id][sPosZ]);
            SetDynamicObjectRot(StandInfo[id][sObje], StandInfo[id][sRotX], StandInfo[id][sRotY], StandInfo[id][sRotZ]);
            format(StandInfo[id][sLabelText], 128, "[TEZGAH]");
            for(new i; i < 3; i++) {
                StandInfo[id][sCalisan][i] = -1;
                StandInfo[id][sUrunFiyati][i] = 0;
                format(StandUrunInfo[id][i], 80, "Yok");
                format(StandIcecekInfo[id][i], 80, "Yok");
                StandInfo[id][sIcecekFiyati][i] = 0;
            }
            StandInfo[id][sArabali] = false;
            StandInfo[id][sKasa] = 0;
            StandInfo[id][sCalisanSayisi] = 0;
            StandInfo[id][sCalisanPay] = 0;
            SunucuMesaji(playerid, "Tezgahýnýzý yerleþtirdiniz, tezgahýnýzýn ID'si: %d", id);
            TezgahFix(playerid);
            StandInfo[id][sLabel] = CreateDynamic3DTextLabel(StandInfo[id][sLabelText], COLOR_WHITE, StandInfo[id][sPosX], StandInfo[id][sPosY], StandInfo[id][sPosZ], 30.0);
            if(PlayerInfo[playerid][pTezgahMasa] != 0) {
                new Float:pX, Float:pY, Float:pZ, Float:pA;
                GetPlayerPos(playerid, pX, pY, pZ);
                GetPlayerFacingAngle(playerid, pA);
                GetXYInFrontOfPlayer(playerid, pX, pY, 2.0);
                StandInfo[id][sMasaObje] = CreateDynamicObject(PlayerInfo[playerid][pTezgahMasa], pX, pY, pZ, 0.0, 0.0, pA, 0, 0);
                EditDynamicObject(playerid, StandInfo[id][sMasaObje]);
                SetPVarInt(playerid, "TezgahMasaDuzenliyor", 1);
                SetPVarInt(playerid, "DuzenledigiTezgah", id);
                SunucuMesaji(playerid, "Masayý düzenliyorsunuz, iptal etmek için ESC tuþuna basabilirsiniz. (Masanýz elinizden alýnmaz.)");
                SunucuMesaji(playerid, "Masanýn yerinden emin olduðunuzda ve yerleþtirmek istediðinizde disk ikonuna basabilirsiniz.");
                SunucuMesaji(playerid, "Disk ikonuna basýp masayý yerleþtirirseniz masanýz elinizden alýnýr, tek kullanýmlýktýr.");
            } else return SunucuMesaji(playerid, "Masanýz olmadýðý için masa yerleþtiremeyeceksiniz, /tezgah ile komutlara bakabilirsiniz.");
        } else if(response == EDIT_RESPONSE_CANCEL) {
            DestroyDynamicObjectEx(objectid);
            Iter_Remove(Tezgahlar, GetPVarInt(playerid, "DuzenledigiTezgah"));
            DeletePVar(playerid, "TezgahDuzenliyor");
            DeletePVar(playerid, "DuzenledigiTezgah");
            SunucuMesaji(playerid, "Tezgah yerleþtirme iþlemini iptal ettiniz.");
        }
    }
    else if(GetPVarInt(playerid, "TezgahMasaDuzenliyor") == 1) {
        if(response == EDIT_RESPONSE_FINAL) {
            new id = GetPVarInt(playerid, "DuzenledigiTezgah");
            DeletePVar(playerid, "TezgahMasaDuzenliyor");
            DeletePVar(playerid, "DuzenledigiTezgah");
            StandInfo[id][sMasaModel] = PlayerInfo[playerid][pTezgahMasa];
            StandInfo[id][sMasaPosX] = x;
            StandInfo[id][sMasaPosY] = y;
            StandInfo[id][sMasaPosZ] = z;
            StandInfo[id][sMasaRotX] = rx;
            StandInfo[id][sMasaRotY] = ry;
            StandInfo[id][sMasaRotZ] = rz;
            SetDynamicObjectPos(StandInfo[id][sMasaObje], StandInfo[id][sMasaPosX], StandInfo[id][sMasaPosY], StandInfo[id][sMasaPosZ]);
            SetDynamicObjectRot(StandInfo[id][sMasaObje], StandInfo[id][sMasaRotX], StandInfo[id][sMasaRotY], StandInfo[id][sMasaRotZ]);
            PlayerInfo[playerid][pTezgahMasa] = 0;
            TezgahFix(playerid);
            SunucuMesaji(playerid, "Tezgahýnýzý tamamen yerleþtirdiniz, /tezgah ile komutlara bakabilirsiniz.");
            SunucuMesaji(playerid, "Tezgahýnýz ve masanýz tek kullanýmlýk olduðu için elinizden alýndý, restart durumunda tezgahýnýz durmayacak.");
        } else if(response == EDIT_RESPONSE_CANCEL) {
            DestroyDynamicObjectEx(objectid);
            DeletePVar(playerid, "TezgahMasaDuzenliyor");
            DeletePVar(playerid, "DuzenledigiTezgah");
            TezgahFix(playerid);
            SunucuMesaji(playerid, "Masa yerleþtirme iþlemini iptal ettiniz, fakat tezgahýnýz duruyor.");
        }
    }
    else if(GetPVarInt(playerid, "CopDuzenliyor") == 1 && GetPVarInt(playerid, "DuzenledigiCop") == -1) {
        if(response == EDIT_RESPONSE_FINAL) {
            DeletePVar(playerid, "CopDuzenliyor");
            DeletePVar(playerid, "DuzenledigiCop");
            new olustu = CopKutusuOlustur(playerid, x, y, z, rx, ry, rz);
            DestroyDynamicObjectEx(objectid);
            if(olustu) return SunucuMesaji(playerid, "Çöp kutusu ekleme iþlemini tamamladýnýz.");
            else return HataMesajiC(playerid, "Çöp kutusu limite ulaþýldýðý için oluþturulamadý.");
        } else if(response == EDIT_RESPONSE_CANCEL) {
            SunucuMesaji(playerid, "Çöp kutusu ekleme iþlemini iptal ettiniz.");
            DeletePVar(playerid, "CopDuzenliyor");
            DeletePVar(playerid, "DuzenledigiCop");
            DestroyDynamicObjectEx(objectid);
            DeletePVar(playerid, "CopKutusuObje");
            return 1;
        }
    }
    else if(GetPVarInt(playerid, "CopDuzenliyor") == 1 && GetPVarInt(playerid, "DuzenledigiCop") >= 0) {
        if(response == EDIT_RESPONSE_FINAL) {
            DeletePVar(playerid, "CopDuzenliyor");
            new cop = GetPVarInt(playerid, "DuzenledigiCop");
            DeletePVar(playerid, "DuzenledigiCop");
            CopKutusuInfo[cop][copPosX] = x;
            CopKutusuInfo[cop][copPosY] = y;
            CopKutusuInfo[cop][copPosZ] = z;
            CopKutusuInfo[cop][copPosRX] = rx;
            CopKutusuInfo[cop][copPosRY] = ry;
            CopKutusuInfo[cop][copPosRZ] = rz;
            SetDynamicObjectPos(objectid, CopKutusuInfo[cop][copPosX], CopKutusuInfo[cop][copPosY], CopKutusuInfo[cop][copPosZ]);
            SetDynamicObjectRot(objectid, CopKutusuInfo[cop][copPosRX], CopKutusuInfo[cop][copPosRY], CopKutusuInfo[cop][copPosRZ]);
            CopKutusuLabelDuzenle(cop);
            return SunucuMesaji(playerid, "Çöp kutusu düzenleme iþlemini tamamladýnýz.");
        } else if(response == EDIT_RESPONSE_CANCEL) {
            SunucuMesaji(playerid, "Çöp kutusu düzenleme iþlemini iptal ettiniz.");
            DeletePVar(playerid, "CopDuzenliyor");
            DeletePVar(playerid, "DuzenledigiCop");
            return 1;
        }
    }
    else if(GetPVarInt(playerid, "SirenEditliyor")) {
        if(response == EDIT_RESPONSE_FINAL) {
            DeletePVar(playerid, "SirenEditliyor");
            new Float:vX, Float:vY, Float:vZ;
            GetVehiclePos(GetPVarInt(playerid, "SirenArac"), vX, vY, vZ);
            AttachDynamicObjectToVehicle(objectid, GetPVarInt(playerid, "SirenArac"), x-vX, y-vY, z-vZ, rx, ry, rz);
            VehicleInfo[GetPVarInt(playerid, "SirenArac")][vSirenOn] = true;
            SetVehicleZAngle(GetPVarInt(playerid, "SirenArac"), GetPVarFloat(playerid,"SirenAngle"));
            DeletePVar(playerid, "SirenArac");
            DeletePVar(playerid, "SirenAngle");
            PlayerInfo[playerid][pSirenCustom][0] = x-vX;
            PlayerInfo[playerid][pSirenCustom][1] = y-vY;
            PlayerInfo[playerid][pSirenCustom][2] = z-vZ;
            PlayerInfo[playerid][pSirenCustom][3] = rx;
            PlayerInfo[playerid][pSirenCustom][4] = ry;
            PlayerInfo[playerid][pSirenCustom][5] = rz;
            PlayerInfo[playerid][pSirenCustomYapti] = true;
            SunucuMesaji(playerid, "Siren oluþturuldu, siren açýkken tekrar /siren 3 yazarsanýz sirenin yerini sýfýrlayýp baþtan oluþturabilirsiniz.");
            return 1;
        }
        else if(response == EDIT_RESPONSE_CANCEL) {
            DestroyDynamicObjectEx(VehicleInfo[GetPVarInt(playerid, "SirenArac")][vSirenObject]);
            SunucuMesaji(playerid, "Siren düzenlemeyi iptal ettiniz.");
            DeletePVar(playerid, "SirenArac");
            DeletePVar(playerid, "SirenEditliyor");
            DeletePVar(playerid, "SirenAngle");
            return 1;
        }
    }
    else if(GetPVarInt(playerid, "ATMOlusturuyor")) {
        new atmid = GetPVarInt(playerid, "ATMID");
        if(response == EDIT_RESPONSE_FINAL) {
            SetDynamicObjectPos(ATMInfo[atmid][atmObjeID], x, y, z);
            SetDynamicObjectRot(ATMInfo[atmid][atmObjeID], rx, ry, rz);
            ATMInfo[atmid][atmX] = x;
            ATMInfo[atmid][atmY] = y;
            ATMInfo[atmid][atmZ] = z;
            ATMInfo[atmid][atmRX] = rx;
            ATMInfo[atmid][atmRY] = ry;
            ATMInfo[atmid][atmRZ] = rz;
            ATMInfo[atmid][atmPickupX] = x;
            ATMInfo[atmid][atmPickupY] = y;
            ATMInfo[atmid][atmPickupZ] = z;
            DeletePVar(playerid, "ATMOlusturuyor");
            SetPVarInt(playerid, "ATMPickup", 1);
            ATMInfo[atmid][atmPickupID] = Pickup_Create(ELEMENT_ATM, atmid, 1274, 1, ATMInfo[atmid][atmPickupX], ATMInfo[atmid][atmPickupY], ATMInfo[atmid][atmPickupZ], ATMInfo[atmid][atmVW], ATMInfo[atmid][atmInterior]);
            SunucuMesaji(playerid, "ATM baþarýyla oluþturuldu, pickup'ýn olmasýný istediðiniz yere gidip /atmolustur yazarak sonlandýrabilirsiniz.");
            SunucuMesaji(playerid, "Eðer pickup olmasýný istediðiniz yerdeyse /atmiptal yazarak pickup yerleþtirmeyi iptal edebilirsiniz.");
            return 1;
        } else if(response == EDIT_RESPONSE_CANCEL) {
            ATMSil(atmid);
            DeletePVar(playerid, "ATMOlusturuyor");
            DeletePVar(playerid, "ATMID");
            return 1;
        }
    }
    else if(GetPVarInt(playerid, "GateOlusturuyor")) {
        new id = GetPVarInt(playerid, "GateID");
        if(response == EDIT_RESPONSE_FINAL) {
            SetDynamicObjectPos(GateBilgi[id][gateObject], x, y, z);
            SetDynamicObjectRot(GateBilgi[id][gateObject], rx, ry, rz);
            GateBilgi[id][gateClosePX] = x;
            GateBilgi[id][gateClosePY] = y;
            GateBilgi[id][gateClosePZ] = z;
            GateBilgi[id][gateCloseRX] = rx;
            GateBilgi[id][gateCloseRY] = ry;
            GateBilgi[id][gateCloseRZ] = rz;
            GateBilgi[id][gateOpenPX] = x;
            GateBilgi[id][gateOpenPY] = y;
            GateBilgi[id][gateOpenPZ] = z - 5.0;
            GateBilgi[id][gateOpenRX] = rx;
            GateBilgi[id][gateOpenRY] = ry;
            GateBilgi[id][gateOpenRZ] = rz;
            DeletePVar(playerid, "GateOlusturuyor");
            SunucuMesaji(playerid, "Gate baþarýyla oluþturuldu. (Gerekli: /gateduzenle [%d] [acikpos])", id);
            GateKaydet(id);
            return 1;
        } else if(response == EDIT_RESPONSE_CANCEL) {
            GateSil(id);
            DeletePVar(playerid, "GateOlusturuyor");
            DeletePVar(playerid, "GateID");
            return 1;
        }
    }
    else if(GetPVarInt(playerid, "GateDuzenliyorA")) {
        new id = GetPVarInt(playerid, "GateID");
        if(response == EDIT_RESPONSE_FINAL) {
            SetDynamicObjectPos(GateBilgi[id][gateObject], x, y, z);
            SetDynamicObjectRot(GateBilgi[id][gateObject], rx, ry, rz);
            GateBilgi[id][gateOpenPX] = x;
            GateBilgi[id][gateOpenPY] = y;
            GateBilgi[id][gateOpenPZ] = z;
            GateBilgi[id][gateOpenRX] = rx;
            GateBilgi[id][gateOpenRY] = ry;
            GateBilgi[id][gateOpenRZ] = rz;
            DeletePVar(playerid, "GateDuzenliyorA");
            SunucuMesaji(playerid, "Gatenin açýk pozisyonu baþarýyla düzenlendi.");
            GateDuzenle(id);
            return 1;
        } else if(response == EDIT_RESPONSE_CANCEL) {
            DeletePVar(playerid, "GateDuzenliyorA");
            DeletePVar(playerid, "GateID");
            SunucuMesaji(playerid, "%d nolu gatenin düzenleme iþlemini iptal ettiniz.", id);
            return 1;
        }
    }
    else if(GetPVarInt(playerid, "GateDuzenliyorK")) {
        new id = GetPVarInt(playerid, "GateID");
        if(response == EDIT_RESPONSE_FINAL) {
            SetDynamicObjectPos(GateBilgi[id][gateObject], x, y, z);
            SetDynamicObjectRot(GateBilgi[id][gateObject], rx, ry, rz);
            GateBilgi[id][gateClosePX] = x;
            GateBilgi[id][gateClosePY] = y;
            GateBilgi[id][gateClosePZ] = z;
            GateBilgi[id][gateCloseRX] = rx;
            GateBilgi[id][gateCloseRY] = ry;
            GateBilgi[id][gateCloseRZ] = rz;
            DeletePVar(playerid, "GateDuzenliyorK");
            SunucuMesaji(playerid, "Gatenin kapalý pozisyonu baþarýyla düzenlendi.");
            GateDuzenle(id);
            return 1;
        } else if(response == EDIT_RESPONSE_CANCEL) {
            DeletePVar(playerid, "GateDuzenliyorK");
            DeletePVar(playerid, "GateID");
            SunucuMesaji(playerid, "%d nolu gatenin düzenleme iþlemini iptal ettiniz.", id);
            return 1;
        }
    }
    if(!PlayerInfo[playerid][pEditingMode])return 1;
    if(PlayerInfo[playerid][pSelectedItem] == -1 && PlayerInfo[playerid][pFurnitureObject] == -1)return 1;

    new listitem = PlayerInfo[playerid][pSelectedItem];
    switch(PlayerInfo[playerid][pEditingMode])
    {
        case 1:
        {
            if(response == EDIT_RESPONSE_CANCEL)
            {
                DestroyDynamicObjectEx(objectid);
                PlayerInfo[playerid][pEditingMode] = 0;
                PlayerInfo[playerid][pSelectedItem] = -1;
                PlayerInfo[playerid][pFurnitureObject] = -1;
                if(SunucuBilgi[TextureliObje])
                {
                    DeletePVar(playerid, "furnitureKopya");
                    DeletePVar(playerid, "furnitureKopyaID");
                }
                BasariMesaji(playerid, "Seçtiðiniz mobilyayý satýn almayý iptal ettiniz.");
                if(PlayerInfo[playerid][pAdmin] < 2) Dialog_Show(playerid, DialogFurnitureBuyList, DIALOG_STYLE_LIST, "Mobilya Satýn Al", "Duvarlar\nMutfak\nKoltuklar ve Sandalyeler\nYataklar\nAydýnlatma\nMasalar\nDolaplar\nElektronik\nBanyo Malzemeleri\nKapýlar\nÇeþitli (1)\nÇeþitli (2)\nTablolar\nYiyecek/Ýçecek\nAlet Edevat\nKýyafetler\nPlaj Malzemeleri\nPosterler ve Grafitiler\nKutular\nÇöp Kutularý\nDonator\nSpor Aletleri", "Ýleri", "Ýptal");
                else Dialog_Show(playerid, DialogFurnitureBuyList, DIALOG_STYLE_LIST, "Mobilya Satýn Al", "Duvarlar\nMutfak\nKoltuklar ve Sandalyeler\nYataklar\nAydýnlatma\nMasalar\nDolaplar\nElektronik\nBanyo Malzemeleri\nKapýlar\nÇeþitli (1)\nÇeþitli (2)\nTablolar\nYiyecek/Ýçecek\nAlet Edevat\nKýyafetler\nPlaj Malzemeleri\nPosterler ve Grafitiler\nKutular\nÇöp Kutularý\nDonator\nSpor Aletleri\nAdminstrator", "Ýleri", "Ýptal");
            }
            else if(response == EDIT_RESPONSE_FINAL)
            {
                new fiyat, found;
                if(PlayerInfo[playerid][pPremium] < 5)
                {
                    fiyat = SunucuBilgi[MobilyaSatinAlma];
                    OAC_GivePlayerMoney(playerid, -SunucuBilgi[MobilyaSatinAlma]);
                    BasariMesaji(playerid, "%s mobilyasýný $%d karþýlýðýnda satýn aldýn.", BuyableFurnitures[listitem][oStr], SunucuBilgi[MobilyaSatinAlma]);
                }
                else fiyat = 5, BasariMesaji(playerid, "%s mobilyasýný satýn aldýn.", BuyableFurnitures[listitem][oStr]);

                SetDynamicObjectPos(objectid, x, y, z);
                SetDynamicObjectRot(objectid, rx, ry, rz);

                if(SunucuBilgi[TextureliObje])
                {
                    if(GetPVarInt(playerid, "furnitureKopya") == 1)
                    {
                        new kopyaID = GetPVarInt(playerid, "furnitureKopyaID");
                        Streamer_GetArrayData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID, g_obj, siz_g_obj);
                        DeletePVar(playerid, "furnitureKopya");
                        DeletePVar(playerid, "furnitureKopyaID");
                        mysql_format(ourConnection, queryx, sizeof queryx, "SELECT * FROM furnitures WHERE object_id = '%d'", kopyaID);
                        new Cache:veri = mysql_query(ourConnection, queryx, true);
                        new texturelar[12][124], txdname[64], texturename[64], modelid;
                        cache_get_value(0, "texture0", texturelar[0], 124);
                        cache_get_value(0, "texture1", texturelar[1], 124);
                        cache_get_value(0, "texture2", texturelar[2], 124);
                        cache_get_value(0, "texture3", texturelar[3], 124);
                        cache_get_value(0, "texture4", texturelar[4], 124);
                        cache_get_value(0, "texture5", texturelar[5], 124);
                        cache_get_value(0, "texture6", texturelar[6], 124);
                        cache_get_value(0, "texture7", texturelar[7], 124);
                        cache_get_value(0, "texture8", texturelar[8], 124);
                        cache_get_value(0, "texture9", texturelar[9], 124);
                        cache_get_value(0, "texture10", texturelar[10], 124);
                        cache_get_value(0, "texture11", texturelar[11], 124);
                        cache_delete(veri);
                        
                        found = 0;
                        for(new i; i < 12; i++)
                        {
                            sscanf(texturelar[i], "p<|>ds[50]s[50]", modelid, txdname, texturename);
                            if(modelid != 0) found = 1, SetDynamicObjectMaterial(objectid, i, modelid, txdname, texturename, 0);

                        }
                        
                        if(found == 1) OAC_GivePlayerMoney(playerid, -5);

                        mysql_format(ourConnection, queryx, sizeof(queryx), "INSERT INTO furnitures (object_id, world, interior, model, price, pos_x, pos_y, pos_z, rot_x, rot_y, rot_z, name, texture0, texture1, texture2, texture3, texture4, texture5, texture6, texture7, texture8, texture9, texture10, texture11) VALUES ('%d', '%d', '%d', '%d', '%d', '%f', '%f', '%f', '%f', '%f', '%f', '%e', '%e', '%e', '%e', '%e', '%e', '%e', '%e', '%e', '%e', '%e', '%e', '%e')",
                        objectid,
                        GetPlayerVirtualWorld(playerid),
                        GetPlayerInterior(playerid),
                        BuyableFurnitures[listitem][oModelID],
                        fiyat,
                        x, y, z, rx, ry, rz,
                        BuyableFurnitures[listitem][oStr],
                        texturelar[0],
                        texturelar[1],
                        texturelar[2],
                        texturelar[3],
                        texturelar[4],
                        texturelar[5],
                        texturelar[6],
                        texturelar[7],
                        texturelar[8],
                        texturelar[9],
                        texturelar[10],
                        texturelar[11]);

                        mysql_tquery(ourConnection, queryx, "OnQueryFinishedEx", "ddd", objectid, playerid, THREAD_BUY_FURNITURE);
                    }
                    else
                    {
                        mysql_format(ourConnection, queryx, sizeof(queryx), "INSERT INTO furnitures (object_id, world, interior, model, price, pos_x, pos_y, pos_z, rot_x, rot_y, rot_z, name) VALUES ('%d', '%d', '%d', '%d', '%d', '%f', '%f', '%f', '%f', '%f', '%f', '%e')",
                        objectid,
                        GetPlayerVirtualWorld(playerid),
                        GetPlayerInterior(playerid),
                        BuyableFurnitures[listitem][oModelID],
                        fiyat,
                        x, y, z, rx, ry, rz,
                        BuyableFurnitures[listitem][oStr]);

                        mysql_tquery(ourConnection, queryx, "OnQueryFinishedEx", "ddd", objectid, playerid, THREAD_BUY_FURNITURE);
                    }
                }
                else
                {
                    mysql_format(ourConnection, queryx, sizeof(queryx), "INSERT INTO furnitures (object_id, world, interior, model, price, pos_x, pos_y, pos_z, rot_x, rot_y, rot_z, name) VALUES ('%d', '%d', '%d', '%d', '%d', '%f', '%f', '%f', '%f', '%f', '%f', '%e')",
                    objectid,
                    GetPlayerVirtualWorld(playerid),
                    GetPlayerInterior(playerid),
                    BuyableFurnitures[listitem][oModelID],
                    fiyat,
                    x, y, z, rx, ry, rz,
                    BuyableFurnitures[listitem][oStr]);

                    mysql_tquery(ourConnection, queryx, "OnQueryFinishedEx", "ddd", objectid, playerid, THREAD_BUY_FURNITURE);
                }
            }
            else return 1;
        }
        case 2:
        {
            Streamer_GetArrayData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID, g_obj, siz_g_obj);

            if(response == EDIT_RESPONSE_CANCEL)
            {
                SetDynamicObjectPos(objectid, g_obj[co_pos_x], g_obj[co_pos_y], g_obj[co_pos_z]);
                SetDynamicObjectRot(objectid, g_obj[co_rot_x], g_obj[co_rot_y], g_obj[co_rot_z]);

                PlayerInfo[playerid][pEditingMode] = 0;
                PlayerInfo[playerid][pSelectedItem] = -1;

                BasariMesaji(playerid, "Seçtiðiniz mobilyadaki deðiþiklikleri iptal ettiniz.");
            }
            else if(response == EDIT_RESPONSE_FINAL)
            {
                SetDynamicObjectPos(objectid, x, y, z);
                SetDynamicObjectRot(objectid, rx, ry, rz);

                if(PlayerInfo[playerid][pShowingID])
                {
                    Furniture_DestroyLabels(playerid);
                    pc_cmd_dekorasyonid(playerid, NULL);
                }

                mysql_format(ourConnection, queryx, sizeof(queryx), "UPDATE furnitures SET pos_x = '%f', pos_y = '%f', pos_z = '%f', rot_x = '%f', rot_y = '%f', rot_z = '%f' WHERE id = '%d'", x, y, z, rx, ry, rz, g_obj[co_database_id]);
                mysql_tquery(ourConnection, queryx);

                BasariMesaji(playerid, "Mobilyanýn konumunu deðiþtirdin.");
                PlayerInfo[playerid][pEditingMode] = 0;
                PlayerInfo[playerid][pSelectedItem] = -1;
           }
            else return 1;
        }
        case 3:
        {
            if(response == EDIT_RESPONSE_CANCEL)
            {
                DestroyDynamicObjectEx(PlayerInfo[playerid][pSelectedItem]);
                PlayerInfo[playerid][pEditingMode] = 0;
                PlayerInfo[playerid][pSelectedItem] = -1;
            }
            else if(response == EDIT_RESPONSE_FINAL)
            {
                new pid = Iter_Free(PayPhones);

                if(pid >= MAX_PAYPHONES)return
                    SunucuMesaji(playerid, "Maksimum limite ulaþýldý.");

                PayPhoneInfo[pid][cPosX] = x;
                PayPhoneInfo[pid][cPosY] = y;
                PayPhoneInfo[pid][cPosZ] = z;
                PayPhoneInfo[pid][cRotX] = rx;
                PayPhoneInfo[pid][cRotY] = ry;
                PayPhoneInfo[pid][cRotZ] = rz;
                DestroyDynamicObjectEx(PlayerInfo[playerid][pSelectedItem]);

                PayPhoneInfo[pid][cObject] = CreateDynamicObject(1216, x, y, z, rx, ry, rz);
                Streamer_Update(playerid);
                PlayerInfo[playerid][pSelectedItem] = pid;

                Dialog_Show(playerid, DialogPPNumber, DIALOG_STYLE_INPUT, "Telefon Kulübesi", "Oluþturmak istediðiniz kulübeye numara girin:", "Ýleri", "Ýptal");
            }
            else return 1;
        }
        case 4:
        {
            if(response == EDIT_RESPONSE_CANCEL)
            {
                SetDynamicObjectPos(objectid, PayPhoneInfo[listitem][cPosX], PayPhoneInfo[listitem][cPosY], PayPhoneInfo[listitem][cPosZ]);
                SetDynamicObjectRot(objectid, PayPhoneInfo[listitem][cRotX], PayPhoneInfo[listitem][cRotY], PayPhoneInfo[listitem][cRotZ]);
                PlayerInfo[playerid][pEditingMode] = 0;
                PlayerInfo[playerid][pSelectedItem] = -1;
                SendClientMessageEx(playerid, COLOR_YELLOW, "Seçtiðiniz deðiþiklikleri iptal ettiniz.");
            }
            else if(response == EDIT_RESPONSE_FINAL)
            {
                PayPhoneInfo[listitem][cPosX] = x;
                PayPhoneInfo[listitem][cPosY] = y;
                PayPhoneInfo[listitem][cPosZ] = z;
                PayPhoneInfo[listitem][cRotX] = rx;
                PayPhoneInfo[listitem][cRotY] = ry;
                PayPhoneInfo[listitem][cRotZ] = rz;
                DestroyDynamicObjectEx(PayPhoneInfo[listitem][cObject]);
                PayPhoneInfo[listitem][cObject] = CreateDynamicObject(1216, x, y, z, rx, ry, rz);
                SavePayPhone(listitem);
                PlayerInfo[playerid][pEditingMode] = 0;
                PlayerInfo[playerid][pSelectedItem] = -1;
            }
            else return 1;
        }
        case 5:
        {
/*          if(response == EDIT_RESPONSE_CANCEL)
            {
                PlayerInfo[playerid][pEditingMode] = 0;
                PlayerInfo[playerid][pSelectedItem] = -1;
                pc_cmd_yayinsifirla(playerid);
            }
            if(response == EDIT_RESPONSE_FINAL)
            {
                SunucuBilgi[LSNNYayinPos][0] = x;
                SunucuBilgi[LSNNYayinPos][1] = y;
                SunucuBilgi[LSNNYayinPos][2] = z;
                SunucuBilgi[LSNNYayinPos][3] = rx;
                SunucuBilgi[LSNNYayinPos][4] = ry;
                SunucuBilgi[LSNNYayinPos][5] = rz;
                SunucuBilgi[LSNNYayinINT] = GetPlayerInterior(playerid);
                SunucuBilgi[LSNNYayinVW] = GetPlayerVirtualWorld(playerid);
                DestroyDynamicObjectEx(SunucuBilgi[LSNNKamera]);
                SunucuBilgi[LSNNKamera] = CreateDynamicObject(1886, SunucuBilgi[LSNNYayinPos][0], SunucuBilgi[LSNNYayinPos][1], SunucuBilgi[LSNNYayinPos][2], SunucuBilgi[LSNNYayinPos][3], SunucuBilgi[LSNNYayinPos][4], SunucuBilgi[LSNNYayinPos][5], SunucuBilgi[LSNNYayinVW], SunucuBilgi[LSNNYayinINT]);
                SendFactionMessage(PlayerInfo[playerid][pFaction], "(( %s tarafýndan canlý yayýn için kameralar ayarlandý. ))", ReturnRoleplayName(playerid));
                PlayerInfo[playerid][pEditingMode] = 0;
                PlayerInfo[playerid][pSelectedItem] = -1;

                SetDynamicObjectPos(SunucuBilgi[LSNNKamera], x, y, z);
                SetDynamicObjectRot(SunucuBilgi[LSNNKamera], rx, ry, rz);
            }
            else return 1;*/
        }
        case 6:
        {
            if(response == EDIT_RESPONSE_CANCEL)
            {
                SetDynamicObjectPos(objectid, IDroppedInfo[listitem][idPosX], IDroppedInfo[listitem][idPosY], IDroppedInfo[listitem][idPosZ]);
                SetDynamicObjectRot(objectid, IDroppedInfo[listitem][idRotX], IDroppedInfo[listitem][idRotY], IDroppedInfo[listitem][idRotZ]);
                PlayerInfo[playerid][pEditingMode] = 0;
                PlayerInfo[playerid][pSelectedItem] = -1;
            }
            else if(response == EDIT_RESPONSE_FINAL)
            {
                IDroppedInfo[listitem][idPosX] = x;
                IDroppedInfo[listitem][idPosY] = y;
                IDroppedInfo[listitem][idPosZ] = z;
                IDroppedInfo[listitem][idRotX] = rx;
                IDroppedInfo[listitem][idRotY] = ry;
                IDroppedInfo[listitem][idRotZ] = rz;
                DestroyDynamicObjectEx(IDroppedInfo[listitem][idObject]);

                new listid = IDroppedInfo[listitem][idList];
                IDroppedInfo[listitem][idObject] = CreateDynamicObject(InventoryObjects[listid][invObject], x, y, z, rx, ry, rz);
                Streamer_Update(playerid);

                PlayerInfo[playerid][pEditingMode] = 0;
                PlayerInfo[playerid][pSelectedItem] = -1;
            }
            else return 1;
        }
        case 7:
        {
            if(response == EDIT_RESPONSE_CANCEL)
            {
                DestroyDynamicObjectEx(GraffitoInfo[listitem][gObject]);
                PlayerInfo[playerid][pEditingMode] = 0;
                PlayerInfo[playerid][pSelectedItem] = -1;
                Iter_Remove(Graffitis, listitem);
            }
            else if(response == EDIT_RESPONSE_FINAL)
            {
                GraffitoInfo[listitem][gX] = x;
                GraffitoInfo[listitem][gY] = y;
                GraffitoInfo[listitem][gZ] = z;
                GraffitoInfo[listitem][gRX] = rx;
                GraffitoInfo[listitem][gRY] = ry;
                GraffitoInfo[listitem][gRZ] = rz;
                ReplaceText(GraffitoInfo[listitem][gText], "#c", "\n");
                DestroyDynamicObjectEx(GraffitoInfo[listitem][gObject]);
                new grafitiInterior, grafitiVirtual;
                grafitiInterior = GetPlayerInterior(playerid);
                grafitiVirtual = GetPlayerVirtualWorld(playerid);
                GraffitoInfo[listitem][gObject] = CreateDynamicObject(19482, GraffitoInfo[listitem][gX], GraffitoInfo[listitem][gY], GraffitoInfo[listitem][gZ], GraffitoInfo[listitem][gRX], GraffitoInfo[listitem][gRY], GraffitoInfo[listitem][gRZ], grafitiInterior, grafitiVirtual);
                GraffitoInfo[listitem][gINT] = grafitiInterior;
                GraffitoInfo[listitem][gVW] = grafitiVirtual;
                SetDynamicObjectMaterialText(GraffitoInfo[listitem][gObject], 0, GraffitoInfo[listitem][gText], OBJECT_MATERIAL_SIZE_256x256, GraffitoInfo[listitem][gFont], GraffitoInfo[listitem][gSize], 0, 0xFFFFFFFF, 0, 1);
                Streamer_Update(playerid);
                mysql_format(ourConnection, queryx, sizeof(queryx), "INSERT INTO graffitis (x, y, z, r_x, r_y, r_z, interior, virtualworld) VALUES ('%f', '%f', '%f', '%f', '%f', '%f', '%d', '%d')", x, y, z, rx, ry, rz, GraffitoInfo[listitem][gINT], GraffitoInfo[listitem][gVW]);
                mysql_tquery(ourConnection, queryx, "OnQueryFinished", "dd", playerid, THREAD_CREATE_GRAFFITO);
            }
            else return 1;
        }
        case 8:
        {
            if(response == EDIT_RESPONSE_CANCEL)
            {
                SetDynamicObjectPos(objectid, GraffitoInfo[listitem][gX], GraffitoInfo[listitem][gY], GraffitoInfo[listitem][gZ]);
                SetDynamicObjectRot(objectid, GraffitoInfo[listitem][gRX], GraffitoInfo[listitem][gRY], GraffitoInfo[listitem][gRZ]);
                PlayerInfo[playerid][pEditingMode] = 0;
                PlayerInfo[playerid][pSelectedItem] = -1;
            }
            else if(response == EDIT_RESPONSE_FINAL)
            {
                GraffitoInfo[listitem][gX] = x;
                GraffitoInfo[listitem][gY] = y;
                GraffitoInfo[listitem][gZ] = z;
                GraffitoInfo[listitem][gRX] = rx;
                GraffitoInfo[listitem][gRY] = ry;
                GraffitoInfo[listitem][gRZ] = rz;
                DestroyDynamicObjectEx(GraffitoInfo[listitem][gObject]);
                ReplaceText(GraffitoInfo[listitem][gText], "#c", "\n");
                new grafitiInterior, grafitiVirtual;
                grafitiInterior = GetPlayerInterior(playerid);
                grafitiVirtual = GetPlayerVirtualWorld(playerid);

                GraffitoInfo[listitem][gObject] = CreateDynamicObject(19482, GraffitoInfo[listitem][gX], GraffitoInfo[listitem][gY], GraffitoInfo[listitem][gZ], GraffitoInfo[listitem][gRX], GraffitoInfo[listitem][gRY], GraffitoInfo[listitem][gRZ], grafitiInterior, grafitiVirtual);
                SetDynamicObjectMaterialText(GraffitoInfo[listitem][gObject], 0, GraffitoInfo[listitem][gText], OBJECT_MATERIAL_SIZE_256x256, GraffitoInfo[listitem][gFont], GraffitoInfo[listitem][gSize], 0, 0xFFFFFFFF, 0, 1);
                Streamer_Update(playerid);
                mysql_format(ourConnection, queryx, sizeof(queryx), "UPDATE graffitis SET x = '%f', y = '%f', z = '%f', r_x = '%f', r_y = '%f', r_z = '%f', interior = '%d', virtualworld = '%d' WHERE id = '%d'", x, y, z, rx, ry, rz, GraffitoInfo[listitem][gINT], GraffitoInfo[listitem][gVW], GraffitoInfo[listitem][gID]);
                mysql_tquery(ourConnection, queryx);

                PlayerInfo[playerid][pEditingMode] = 0;
                PlayerInfo[playerid][pSelectedItem] = -1;
            }
            else return 1;
        }
        case 9:
        {
            MealInfo[listitem][mEditing] = false;

            if(response == EDIT_RESPONSE_CANCEL)
            {
                SetDynamicObjectPos(objectid, MealInfo[listitem][mPosX], MealInfo[listitem][mPosY], MealInfo[listitem][mPosZ]);
                PlayerInfo[playerid][pEditingMode] = 0;
                PlayerInfo[playerid][pSelectedItem] = -1;
                PlayerAME(playerid, "elindeki tepsiyi bir konuma yerleþtirir.");
            }
            else if(response == EDIT_RESPONSE_FINAL)
            {
                DestroyDynamicObjectEx(MealInfo[listitem][mObject]);
                MealInfo[listitem][mObject] = CreateDynamicObject(MealInfo[listitem][mModel], x, y, z, rx, ry, rz);
                MealInfo[listitem][mPosX] = x;
                MealInfo[listitem][mPosY] = y;
                MealInfo[listitem][mPosZ] = z;
                PlayerInfo[playerid][pEditingMode] = 0;
                PlayerInfo[playerid][pSelectedItem] = -1;
                Streamer_Update(playerid);
                PlayerAME(playerid, "elindeki tepsiyi uygun bir konuma yerleþtirir.");
            }
            else return 1;
        }
        case 10:
        {
            if(response == EDIT_RESPONSE_CANCEL)
            {
                SetDynamicObjectPos(objectid, RoadBlockInfo[listitem][rbPosX], RoadBlockInfo[listitem][rbPosY], RoadBlockInfo[listitem][rbPosZ]);
                PlayerInfo[playerid][pEditingMode] = 0;
                PlayerInfo[playerid][pSelectedItem] = -1;
            }
            else if(response == EDIT_RESPONSE_FINAL)
            {
                new modelid = Streamer_GetIntData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_MODEL_ID);
                DestroyDynamicObjectEx(RoadBlockInfo[listitem][rbObject]);
                RoadBlockInfo[listitem][rbObject] = CreateDynamicObject(modelid, x, y, z, rx, ry, rz);
                RoadBlockInfo[listitem][rbPosX] = x;
                RoadBlockInfo[listitem][rbPosY] = y;
                RoadBlockInfo[listitem][rbPosZ] = z;
                PlayerInfo[playerid][pEditingMode] = 0;
                PlayerInfo[playerid][pSelectedItem] = -1;
                Streamer_Update(playerid);
            }
            else return 1;
        }
        case 11:
        {
            Streamer_GetArrayData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID, g_obj, siz_g_obj);

            if(response == EDIT_RESPONSE_CANCEL)
            {
                SetDynamicObjectPos(objectid, g_obj[co_pos_x], g_obj[co_pos_y], g_obj[co_pos_z]);
                SetDynamicObjectRot(objectid, g_obj[co_rot_x], g_obj[co_rot_y], g_obj[co_rot_z]);

                PlayerInfo[playerid][pEditingMode] = 0;
                PlayerInfo[playerid][pSelectedItem] = -1;
            }
            else if(response == EDIT_RESPONSE_FINAL)
            {
                SetDynamicObjectPos(objectid, x, y, z);
                SetDynamicObjectRot(objectid, rx, ry, rz);

                PlayerInfo[playerid][pEditingMode] = 0;
                PlayerInfo[playerid][pSelectedItem] = -1;
            }
            else return 1;
        }
        default: PlayerInfo[playerid][pEditingMode] = 0;
    }
    return 1;
}

public OnPlayerEnterDynamicCP(playerid, checkpointid)
{
    new string[256];
    new h = Streamer_GetIntData(STREAMER_TYPE_CP, checkpointid, E_STREAMER_EXTRA_ID);

    if(!HouseInfo[h][hExists] || HouseInfo[h][hCheckpoint] != checkpointid)return 1;

    PlayerInfo[playerid][pCheckpointID] = checkpointid;

    if(PlayerInfo[playerid][pAdmin] > SUPPORTER)
    {
        if(!HouseInfo[h][hOwner]) format(string, sizeof(string), "~w~Fiyat: ~y~$%d~n~~w~ID:~y~ %d~n~~w~Interior: ~y~%d", HouseInfo[h][hPrice], h, HouseInfo[h][hIGInterior]);
        else if(HouseInfo[h][Satis]) format(string, sizeof(string), "~w~Fiyat: ~y~$%d~n~~w~ID:~y~ %d~n~~w~Interior: ~y~%d", HouseInfo[h][Satis], h, HouseInfo[h][hIGInterior]);
        else if(HouseInfo[h][Kira] && !HouseInfo[h][Kiraci]) format(string, sizeof(string), "~w~Kiralik: ~y~$%d~n~~w~ID:~y~ %d~n~~w~Interior: ~y~%d", HouseInfo[h][Kira], h, HouseInfo[h][hIGInterior]);
        else format(string, sizeof(string), "~w~Sahip:~y~%s~n~~w~ID:~y~ %d~n~~w~Interior: ~y~%d", GetCharacterName(HouseInfo[h][hOwner]), h, HouseInfo[h][hIGInterior]);
    }
    else
    {
        if(!HouseInfo[h][hOwner]) format(string, sizeof(string), "~w~SATILIK EV: ~y~$%d~n~~w~/evsatinal", HouseInfo[h][hPrice]);
        else if(HouseInfo[h][Satis]) format(string, sizeof(string), "~w~SATILIK EV: ~y~$%d~n~~w~/evsatinal", HouseInfo[h][Satis]);
        else if(HouseInfo[h][Kira] && !HouseInfo[h][Kiraci]) format(string, sizeof(string), "~w~KIRALIK EV: ~y~$%d~n~~w~/evkira kirala", HouseInfo[h][Kira]);
        else format(string, sizeof(string), "~w~Ev ~y~%d~n~~w~/giris", h);
    }

    return GameTextForPlayer(playerid, string, 2000, 5);
}

public OnPlayerLeaveDynamicCP(playerid, checkpointid)
{
    return 1;
}

public OnPlayerEnterDynamicRaceCP(playerid, checkpointid) {
    if(checkpointid == PlayerInfo[playerid][pGidilecekCP] && PlayerInfo[playerid][pKatildigiYaris] != -1 && YarisInfo[PlayerInfo[playerid][pKatildigiYaris]][yarisAktif]) {
        PlayerInfo[playerid][pYarisCP]++;
        new yaris = PlayerInfo[playerid][pKatildigiYaris];
        if(PlayerInfo[playerid][pYarisCP] >= YarisInfo[PlayerInfo[playerid][pKatildigiYaris]][yarisAktifCheckpoint]) { // yarýþ bittiyse
            if(YarisInfo[yaris][yarisKazananlar][0] == -1) {
                YarisInfo[yaris][yarisKazananlar][0] = playerid;
                SunucuMesajiC(playerid, "Yarýþý birinci bitirdin.");
            }
            else if(YarisInfo[yaris][yarisKazananlar][1] == -1) {
                YarisInfo[yaris][yarisKazananlar][1] = playerid;
                SunucuMesajiC(playerid, "Yarýþý ikinci bitirdin.");
            }
            else if(YarisInfo[yaris][yarisKazananlar][2] == -1) {
                YarisInfo[yaris][yarisKazananlar][2] = playerid;
                SunucuMesajiC(playerid, "Yarýþý üçüncü bitirdin.");
            }
            DestroyDynamicRaceCP(PlayerInfo[playerid][pGidilecekCP]);
            PlayerInfo[playerid][pGidilecekCP] = -1;
            YarisInfo[yaris][yarisKatilanSayisi]--;
            if(YarisInfo[yaris][yarisKatilanSayisi] <= 0) {
                YarisBitir(yaris);
            }
        } else { // yarýþ devam ediyorsa
            DestroyDynamicRaceCP(PlayerInfo[playerid][pGidilecekCP]);
            new oyuncuCP = PlayerInfo[playerid][pYarisCP];
            PlayerInfo[playerid][pGidilecekCP] = CreateDynamicRaceCP(0, YarisInfo[yaris][yarisCheckpointX][oyuncuCP], YarisInfo[yaris][yarisCheckpointY][oyuncuCP], YarisInfo[yaris][yarisCheckpointZ][oyuncuCP], YarisInfo[yaris][yarisCheckpointX][oyuncuCP+1], YarisInfo[yaris][yarisCheckpointY][oyuncuCP+1], YarisInfo[yaris][yarisCheckpointZ][oyuncuCP+1], 5.0, YarisInfo[yaris][yarisCheckpointVirtualWorld][oyuncuCP], YarisInfo[yaris][yarisCheckpointInterior][oyuncuCP], playerid);
        }
    }
    return 1;
}

public OnPlayerEnterDynamicArea(playerid, areaid)
{
    new vehicleid = GetPlayerVehicleID(playerid);

    if(vehicleid && !VehicleInfo[vehicleid][vStereo] || !vehicleid)
    {
        new boomboxid = Streamer_GetIntData(STREAMER_TYPE_AREA, areaid, E_STREAMER_EXTRA_ID);

        if(IDroppedInfo[boomboxid][idArea] && IsPlayerInRangeOfDynamicObject(playerid, IDroppedInfo[boomboxid][idObject], 25.0) && !IDroppedInfo[boomboxid][Trisha])
        {
            StopAudioStreamForPlayer(playerid);
            PlayAudioStreamForPlayer(playerid, IDroppedInfo[boomboxid][idLink], IDroppedInfo[boomboxid][idPosX], IDroppedInfo[boomboxid][idPosY], IDroppedInfo[boomboxid][idPosZ], 25.0, 1);
        }
        else if(IDroppedInfo[boomboxid][idArea] && IsPlayerInRangeOfDynamicObject(playerid, IDroppedInfo[boomboxid][idObject], 80.0) && IDroppedInfo[boomboxid][Trisha])
        {
            StopAudioStreamForPlayer(playerid);
            PlayAudioStreamForPlayer(playerid, IDroppedInfo[boomboxid][idLink], IDroppedInfo[boomboxid][idPosX], IDroppedInfo[boomboxid][idPosY], IDroppedInfo[boomboxid][idPosZ], 80.0, 1);
        }
    }

    foreach(new i : Games) if(areaid == GameInfo[i][gameArea])
    {
        PlayerInfo[playerid][pCurrentGameID] = i; break;
    }

    return 1;
}

public OnPlayerLeaveDynamicArea(playerid, areaid)
{
    new boomboxid = Streamer_GetIntData(STREAMER_TYPE_AREA, areaid, E_STREAMER_EXTRA_ID);
    new vehicleid = GetPlayerVehicleID(playerid);

    if(vehicleid && !VehicleInfo[vehicleid][vStereo] && !GetPVarInt(playerid, "KulakliklaMuzik") || !GetPVarInt(playerid, "KulakliklaMuzik") && !vehicleid && IDroppedInfo[boomboxid][idArea])
        StopAudioStreamForPlayer(playerid);

    new id = PlayerInfo[playerid][pCurrentGameID];

    if(id != -1 && areaid == GameInfo[id][gameArea])
    {
        if(!GameInfo[id][gameType] && PlayerInfo[playerid][pInCasinoWheel])
        {
            PlayerInfo[playerid][pInCasinoWheel] = 0;
            PlayerInfo[playerid][pCasinoWheelBet] = 0;
        }
        PlayerInfo[playerid][pCurrentGameID] = -1;
    }

    return 1;
}

//Essential Functions
OnQueryFinished(extraid, threadid); public OnQueryFinished(extraid, threadid)
{
    static rows, fields;

    switch(threadid)
    {
        case THREAD_CREATE_BUILDING:
        {
            BuildingInfo[extraid][bID] = cache_insert_id();
            BuildingInfo[extraid][bWorld] = BUILDING_WORLD + BuildingInfo[extraid][bID];
            SaveBuilding(extraid);
        }
        case THREAD_CREATE_LAB:
        {
            LabInfo[extraid][lID] = cache_insert_id();
            SaveLab(extraid);
        }
        case THREAD_CREATE_COMPANY:
        {
            CompanyInfo[extraid][cReference] = cache_insert_id();
            SaveCompany(extraid);
        }
        case THREAD_CREATE_ILLEGALINDUSTRY:
        {
            IllegalIndustryInfo[extraid][iID] = cache_insert_id();
            SaveIllegalIndustry(extraid);
        }
        case THREAD_FACTION_MEMBERS:
        {
            cache_get_row_count(rows);
            FactionInfo[extraid][fMembersCount] = rows;
        }
        case THREAD_CREATE_VEHICLE:
        {
            VehicleInfo[extraid][vID] = cache_insert_id();
            Generate_VehiclePlate(-1, extraid);
            if(VehicleInfo[extraid][vFaction] != INVALID_VEHICLE_ID || VehicleInfo[extraid][vJob] != -1) SaveVehicle(extraid);
        }
        case THREAD_LOAD_SELLCARS:
        {
            cache_get_row_count(rows);
            cache_get_field_count(fields);

            if(!rows)return 1;

            for(new j; j < rows; j++)
            {
                cache_get_value_int(j, "id", DealerInfo[extraid][dVehiclesID][j]);
                cache_get_value_int(j, "vehicle_model", DealerInfo[extraid][dModel][j]);
                cache_get_value_int(j, "vehicle_price", DealerInfo[extraid][dPrice][j]);
            }
            print("Sunucu: Galeri arac fiyatlari yuklendi");
            DealerInfo[extraid][vCount] = rows;
        }
        case THREAD_CREATE_DEALER:
        {
            DealerInfo[extraid][dID] = cache_insert_id();
            Iter_Add(Dealers, extraid);
        }
        case THREAD_ADD_PAYPHONE:
        {
            PayPhoneInfo[extraid][cID] = cache_insert_id();
            Iter_Add(PayPhones, extraid);
        }
        case THREAD_CREATE_GRAFFITO:
        {
            new id = PlayerInfo[extraid][pSelectedItem];

            GraffitoInfo[id][gID] = cache_insert_id();
            GraffitoInfo[id][gExists] = 1;

            SendAworkAlert(false, COLOR_ADMIN, "AdmCmd: %s, %d ID'li grafitiyi oluþturdu.", ReturnRoleplayName(extraid), id);

            PlayerInfo[extraid][pEditingMode] = 0;
            PlayerInfo[extraid][pSelectedItem] = -1;
        }
        case THREAD_CREATE_HOUSE:
        {
            HouseInfo[extraid][hID] = cache_insert_id();
            HouseInfo[extraid][hWorld] = HOUSE_WORLD + HouseInfo[extraid][hID];
            SaveHouse(extraid);
        }
        case THREAD_CREATE_FACTION: FactionInfo[extraid][fID] = cache_insert_id();
        case THREAD_CREATE_TELEPORT: TeleportInfo[extraid][teleportID] = cache_insert_id();
        case THREAD_CREATE_GAME: GameInfo[extraid][gameID] = cache_insert_id();
        case THREAD_CREATE_GATE:
        {
            GateBilgi[extraid][gateID] = cache_insert_id();
            GateDuzenle(extraid);
        }
        case THREAD_CREATE_EU: EUBilgi[extraid][euID] = cache_insert_id();
        case THREAD_CREATE_ATM: ATMInfo[extraid][atmID] = cache_insert_id();
        case THREAD_CREATE_SIRKET: tsInfo[extraid][sid] = cache_insert_id();
        case THREAD_CREATE_DOLAP: DolapInfo[extraid][doID] = cache_insert_id();
    }

    return 1;
}

OnQueryFinishedEx(extraid, playerid, threadid); public OnQueryFinishedEx(extraid, playerid, threadid)
{
    static rows, fields;

    switch(threadid)
    {
        case THREAD_ADD_CIMICE:
        {
            CimiceInfo[extraid][cID] = cache_insert_id();
            Iter_Add(Cimici, extraid);
            SunucuMesaji(playerid, "Böcek hakkýnda daha fazla bilgi için \"/bocek bilgi %d\" kullanýn.", CimiceInfo[extraid][cID]);
        }
        case THREAD_SEARCH_NAME_LAB:
        {
            new name[MAX_PLAYER_NAME];
            cache_get_row_count(rows);
            cache_get_field_count(fields);

            if(!rows) return
                Dialog_Show(playerid, DialogLabOwner, DIALOG_STYLE_INPUT, "Laboratuvar Sahibi", "HATA: Karakter adý veritabanýnda bulunamadý.\n\nisim_soyisim þeklinde yeni laboratuvar sahibinin adýný girin. (örn: Clester_Lettiere)", "deðiþtir", "Ýptal");

            cache_get_value_int(0, "id", LabInfo[extraid][lOwner]);
            cache_get_value(0, "char_name", name, MAX_PLAYER_NAME);

            SaveLab(extraid);
            SendAworkAlert(false, COLOR_ADMIN, "AdmCmd: %s, %s kiþisini %d ID'li laboratuvarýn sahibi yaptý.", ReturnRoleplayName(playerid), name, extraid);
            PlayerInfo[playerid][pFactionMOD] = -1;

            LogYaz(playerid, "/ledit isletme", -1, extraid, LabInfo[extraid][lOwner]);
        }
        case THREAD_BUY_FURNITURE:
        {
            new listitem = PlayerInfo[playerid][pSelectedItem];

            GetDynamicObjectPos(extraid, g_obj[co_pos_x], g_obj[co_pos_y], g_obj[co_pos_z]);
            GetDynamicObjectRot(extraid, g_obj[co_rot_x], g_obj[co_rot_y], g_obj[co_rot_z]);

            g_obj[co_database_id] = cache_insert_id();
            g_obj[co_price] = BuyableFurnitures[listitem][oPrice];

            format(g_obj[co_name], 100, BuyableFurnitures[listitem][oStr]);

            Streamer_SetArrayData(STREAMER_TYPE_OBJECT, extraid, E_STREAMER_EXTRA_ID, g_obj, siz_g_obj);

            PlayerInfo[playerid][pEditingMode] = 2;
            PlayerInfo[playerid][pSelectedItem] = extraid;
            PlayerInfo[playerid][pFurnitureObject] = -1;

            EditDynamicObject(playerid, extraid);
        }
        case THREAD_ADD_DEALERVEH: DealerInfo[extraid][dVehiclesID][playerid] = cache_insert_id();
    }

    return 1;
}

//Loads and Saves

BalikKayit(playerid) {
    if(PlayerInfo[playerid][pLogged]) {
        new balikString[300];
        for(new j; j < 50; j++)
            format(balikString, sizeof(balikString), "%s%d|%d|", balikString, PlayerInfo[playerid][pBalik][j], PlayerInfo[playerid][pBalikAgirlik][j]);
        mysql_format(ourConnection, queryx, sizeof queryx, "UPDATE characters SET balikString = '%e', balikUcret = '%d', balikCounter = '%d' WHERE id = '%d'", balikString, PlayerInfo[playerid][pBalikUcret], PlayerInfo[playerid][pBalikCount], PlayerInfo[playerid][pID]);
        mysql_tquery(ourConnection, queryx);
    }
    return 1;
}

CopEsyaKayit(playerid) {
    if(PlayerInfo[playerid][pLogged]) {
        new copString[15];
        for(new j; j < 5; j++)
            format(copString, sizeof(copString), "%s%d|", copString, PlayerInfo[playerid][pCopEsyaEnvanter][j]);
            
        mysql_format(ourConnection, queryx, sizeof queryx, "UPDATE characters SET copesya = '%e', aldigicop = '%d' WHERE id = '%d'", copString, PlayerInfo[playerid][pCopEsyaAldi], PlayerInfo[playerid][pID]);
        mysql_tquery(ourConnection, queryx);
    }
    return 1;
}

PolisDutyKayit(playerid) {
    if(PlayerInfo[playerid][pLogged])
    {
        if(Faction_GetType(PlayerInfo[playerid][pFaction]) == POLICE) {
            new poname[MAX_PLAYER_NAME];
            GetPlayerName(playerid, poname, MAX_PLAYER_NAME);
            mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT * FROM polisduty WHERE username='%e' LIMIT 1", poname);
            new Cache:veri = mysql_query(ourConnection, queryx, true);
            new rows;
            cache_get_row_count(rows);
            if(!rows) {
                mysql_format(ourConnection, queryx, sizeof(queryx), "INSERT INTO polisduty (saniye, dakika, saat, username) VALUES ('%d', '%d', '%d', '%e')", PlayerInfo[playerid][pPolisDutySaniye], PlayerInfo[playerid][pPolisDutyDakika], PlayerInfo[playerid][pPolisDutySaat], poname);
                mysql_tquery(ourConnection, queryx);
                cache_delete(veri);
                return 1;
            }
            mysql_format(ourConnection, queryx, sizeof(queryx), "UPDATE polisduty SET saniye = '%d', dakika ='%d', saat='%d' WHERE username='%e' LIMIT 1", PlayerInfo[playerid][pPolisDutySaniye], PlayerInfo[playerid][pPolisDutyDakika], PlayerInfo[playerid][pPolisDutySaat], poname);
            mysql_tquery(ourConnection, queryx);
            cache_delete(veri);
        }
    }
    return 1;
}

PolisDutyYukle(playerid)
{
    mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT * FROM polisduty WHERE username='%e' LIMIT 1", PlayerInfo[playerid][pCharacterName]);
    new Cache:veri = mysql_query(ourConnection, queryx, true);

    new rows;
    cache_get_row_count(rows);

    if(!rows)
    {
        cache_delete(veri);
        return 1;
    }

    for(new j; j < rows; j++)
    {
        cache_get_value_int(j, "saniye", PlayerInfo[playerid][pPolisDutySaniye]);
        cache_get_value_int(j, "dakika", PlayerInfo[playerid][pPolisDutyDakika]);
        cache_get_value_int(j, "saat", PlayerInfo[playerid][pPolisDutySaat]);
    }
    cache_delete(veri);
    return 1;
}

PolisDutyReset()
{
    mysql_format(ourConnection, queryx, sizeof(queryx), "TRUNCATE TABLE polisduty");
    mysql_tquery(ourConnection, queryx);
    foreach(new i: Player)
    {
        PlayerInfo[i][pPolisDutySaniye] = 0;
        PlayerInfo[i][pPolisDutyDakika] = 0;
        PlayerInfo[i][pPolisDutySaat] = 0;
    }
    return 1;
}

SavePlayer(playerid) return SaveCharacter(playerid);
SaveCharacter(playerid)
{
    if(PlayerInfo[playerid][pLogged])
    {
        new weapons_string[256];
        new inventory_string[100];
        new drug_string[100];
        new division_string[32];
        new radio_string[86];
        new ubagimlilik_string[124];

        new weapons[12];
        new ammo[12];

        if(!PlayerInfo[playerid][pDeath] && GetPlayerState(playerid) != PLAYER_STATE_SPECTATING && !PlayerInfo[playerid][pAdminDuty]) AC_GetPlayerHealth(playerid, PlayerInfo[playerid][pHealth]);
        if(!PlayerInfo[playerid][pDeath] && GetPlayerState(playerid) != PLAYER_STATE_SPECTATING && !PlayerInfo[playerid][pAdminDuty]) AC_GetPlayerArmour(playerid, PlayerInfo[playerid][pArmour]);

        if(!PlayerInfo[playerid][pHealth]) PlayerInfo[playerid][pHealth] = 100;

        if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT || GetPlayerState(playerid) == PLAYER_STATE_DRIVER || GetPlayerState(playerid) == PLAYER_STATE_PASSENGER)
        {
            for(new x; x < 12; x++)
            {
                GetPlayerWeaponData(playerid, x, weapons[x], ammo[x]);
                if(!AC_PlayerHasWeapon(playerid, weapons[x]) || !ammo[x])
                {
                    weapons[x] = 0;
                    ammo[x] = 0;
                }
                format(weapons_string, sizeof(weapons_string), "%s%d|%d|", weapons_string, weapons[x], ammo[x]);
            }

            GetPlayerPos(playerid, PlayerInfo[playerid][pPosX], PlayerInfo[playerid][pPosY], PlayerInfo[playerid][pPosZ]);
            GetPlayerFacingAngle(playerid, PlayerInfo[playerid][pPosA]);
            PlayerInfo[playerid][pCrashInt] = GetPlayerInterior(playerid);
            PlayerInfo[playerid][pCrashWorld] = GetPlayerVirtualWorld(playerid);
        }
        else if(GetPlayerPing(playerid) < 300 && GetPlayerState(playerid) != PLAYER_STATE_SPECTATING && GetPlayerState(playerid) != PLAYER_STATE_WASTED && GetPlayerState(playerid) != PLAYER_STATE_SPAWNED)
        {
            GetPlayerPos(playerid, PlayerInfo[playerid][pPosX], PlayerInfo[playerid][pPosY], PlayerInfo[playerid][pPosZ]);
            GetPlayerFacingAngle(playerid, PlayerInfo[playerid][pPosA]);
            PlayerInfo[playerid][pCrashInt] = GetPlayerInterior(playerid);
            PlayerInfo[playerid][pCrashWorld] = GetPlayerVirtualWorld(playerid);
        }

        new donateskinstring[50];
        for(new i; i < 5; i++) format(donateskinstring, 50, "%s%d|", donateskinstring, PlayerInfo[playerid][pDonateSkin][i]);

        for(new j; j < MAX_INVENTORY_ITEMS; j++)
            format(inventory_string, sizeof(inventory_string), "%s%d|%d|%d|", inventory_string, PlayerInfo[playerid][pInvList][j], PlayerInfo[playerid][pInvAmount][j], PlayerInfo[playerid][pInvExtra][j]);

        for(new j; j < MAX_INVENTORY_ITEMS; j++)
            format(inventory_string, sizeof(inventory_string), "%s%d|", inventory_string, PlayerInfo[playerid][pInvCredit][j]);

        for(new j; j < 12; j++)
            format(drug_string, sizeof(drug_string), "%s%d|%d|%d|", drug_string, PlayerInfo[playerid][pDrugAddiction][j], PlayerInfo[playerid][pDrugAbstinence][j], PlayerInfo[playerid][pDrugAddictionQuality][j]);

        format(ubagimlilik_string, sizeof(ubagimlilik_string), "%d|%d|%d|", PlayerInfo[playerid][pDrugster], PlayerInfo[playerid][pDrugCrisis], PlayerInfo[playerid][pDrugRemainingTime]);

        for(new j; j < 5; j++)
            format(division_string, sizeof(division_string), "%s%d|", division_string, PlayerInfo[playerid][pDivision][j]);

        for(new j; j < 9; j++)
            format(radio_string, sizeof(radio_string), "%s%d|", radio_string, (!j) ? PlayerInfo[playerid][pRadioDefault] : PlayerInfo[playerid][pRadioSlot][j - 1]);

        new
            query_fix[3000];

        query_fix[0] = EOS;

        mysql_format(ourConnection, query_fix, sizeof(query_fix), "UPDATE characters SET sex = '%d', skin = '%d', calistigimyer = '%d', spawn_x = '%f', spawn_y = '%f', spawn_z = '%f', spawn_angle = '%f', yem = '%d', kgelir = '%d', glisansi = '%d', spawn_int = '%d', spawn_vw = '%d', kamp = '%d', balikagi = '%d' WHERE id = '%d'",
        PlayerInfo[playerid][pSex],
        PlayerInfo[playerid][pSkin],
        PlayerInfo[playerid][pCalistigiIsyeri][1],
        PlayerInfo[playerid][pPosX],
        PlayerInfo[playerid][pPosY],
        PlayerInfo[playerid][pPosZ],
        PlayerInfo[playerid][pPosA],
        PlayerInfo[playerid][pBalikYemi],
        PlayerInfo[playerid][KamyoncuGeliri],
        //PlayerInfo[playerid][pGuvenlik],
        PlayerInfo[playerid][pGuvenlikLisansi],
        PlayerInfo[playerid][pCrashInt],
        PlayerInfo[playerid][pCrashWorld],
        PlayerInfo[playerid][pKampEkipmani],
        PlayerInfo[playerid][pBalikAgi],
        PlayerInfo[playerid][pID]);
        mysql_tquery(ourConnection, query_fix);

        mysql_format(ourConnection, query_fix, sizeof(query_fix), "UPDATE characters SET cash = '%d', cash_bank = '%d', savings = '%d', paycheck = '%d', jail_time = '%d', house = '%d', faction_id = '%d', faction_rank_id = '%d', health = '%f', spawn_health = '%f', experience = '%d' WHERE id = '%d'",
        PlayerInfo[playerid][pCash],
        PlayerInfo[playerid][pCashBank],
        PlayerInfo[playerid][pSavings],
        PlayerInfo[playerid][pPaycheck],
        PlayerInfo[playerid][pJailTime],
        PlayerInfo[playerid][pHouse],
        PlayerInfo[playerid][pFaction],
        PlayerInfo[playerid][pRank],
        PlayerInfo[playerid][pHealth],
        PlayerInfo[playerid][pSpawnHealth],
        PlayerInfo[playerid][pExperience],
        PlayerInfo[playerid][pID]);
        mysql_tquery(ourConnection, query_fix);

        if(GetPlayerState(playerid) != PLAYER_STATE_SPECTATING && GetPlayerState(playerid) != PLAYER_STATE_WASTED && GetPlayerState(playerid) != PLAYER_STATE_SPAWNED)
        {
            mysql_format(ourConnection, query_fix, sizeof(query_fix), "UPDATE characters SET original_skin = '%d', armour = '%f', age = '%d', banned = '%d', string_weapons = '%e', level = '%d', crashed = '%d', house_price = '%d', faction_duty = '%d', faction_skin = '%d', minutes = '%d' WHERE id = '%d'",
            PlayerInfo[playerid][pOriginalSkin],
            PlayerInfo[playerid][pArmour],
            PlayerInfo[playerid][pAge],
            PlayerInfo[playerid][pBanned],
            weapons_string,
            PlayerInfo[playerid][pLevel],
            PlayerInfo[playerid][pCrashed],
            PlayerInfo[playerid][pHousePrice],
            PlayerInfo[playerid][pFactionDuty],
            PlayerInfo[playerid][pFactionSkin],
            PlayerInfo[playerid][pMinutes],
            PlayerInfo[playerid][pID]);
        }
        else
        {
            mysql_format(ourConnection, query_fix, sizeof(query_fix), "UPDATE characters SET original_skin = '%d', armour = '%f', age = '%d', banned = '%d', level = '%d', crashed = '%d', house_price = '%d', faction_duty = '%d', faction_skin = '%d', minutes = '%d' WHERE id = '%d'",
            PlayerInfo[playerid][pOriginalSkin],
            PlayerInfo[playerid][pArmour],
            PlayerInfo[playerid][pAge],
            PlayerInfo[playerid][pBanned],
            PlayerInfo[playerid][pLevel],
            PlayerInfo[playerid][pCrashed],
            PlayerInfo[playerid][pHousePrice],
            PlayerInfo[playerid][pFactionDuty],
            PlayerInfo[playerid][pFactionSkin],
            PlayerInfo[playerid][pMinutes],
            PlayerInfo[playerid][pID]);
        }
        mysql_tquery(ourConnection, query_fix);

        mysql_format(ourConnection, query_fix, sizeof(query_fix), "UPDATE characters SET playing_hours = '%d', drive_license = '%d', drive_license_warn = '%d', spawn_point = '%d', fly_license = '%d', boat_license = '%d', job = '%d', frequence = '%d', hud = '%d' WHERE id = '%d'",
        PlayerInfo[playerid][pPlayingHours],
        PlayerInfo[playerid][pLicenses][0],
        PlayerInfo[playerid][pLicenseWarn],
        PlayerInfo[playerid][pSpawnPoint],
        PlayerInfo[playerid][pLicenses][2],
        PlayerInfo[playerid][pLicenses][1],
        PlayerInfo[playerid][pJob],
        PlayerInfo[playerid][pFrequence],
        PlayerInfo[playerid][pHud],
        PlayerInfo[playerid][pID]);
        mysql_tquery(ourConnection, query_fix);

        mysql_format(ourConnection, query_fix, sizeof(query_fix), "UPDATE characters SET yakitg = '%d', shortcut = '%d', ccwgunid = '%d', ccwgundate = '%d', ubagimlilik = '%e', division = '%e', string_inventory = '%e', string_drugs = '%e' WHERE id = '%d'",
        PlayerInfo[playerid][pYakitGelir],
        PlayerInfo[playerid][pShortcut],
        PlayerInfo[playerid][CCWGunID],
        PlayerInfo[playerid][CCWGunDate],
        ubagimlilik_string,
        division_string,
        inventory_string, drug_string,
        PlayerInfo[playerid][pID]);
        mysql_tquery(ourConnection, query_fix);

        mysql_format(ourConnection, query_fix, sizeof(query_fix), "UPDATE characters SET string_radio = '%e', jail_expires = '%d', death = '%d', bmx_permission = '%d', tog_pm_permission = '%d', tog_ooc_permission = '%d', fishes = '%d', chat_style = '%d', fight_style = '%d'",
        radio_string,
        PlayerInfo[playerid][pJailC],
        PlayerInfo[playerid][pDeath],
        PlayerInfo[playerid][pBMXPermission],
        PlayerInfo[playerid][pTogPMPremium],
        PlayerInfo[playerid][pTogOOCPremium],
        PlayerInfo[playerid][pBalik],
        PlayerInfo[playerid][pChatStyle],
        PlayerInfo[playerid][pFightStyle],
        PlayerInfo[playerid][pID]);
        mysql_tquery(ourConnection, query_fix);

        KarakterKayitDevam(playerid);
        mysql_format(ourConnection, query_fix, sizeof(query_fix), "UPDATE characters SET house_spawn = '%d', toggle_armour = '%d', masked = '%d', ten_rengi = '%d', karakter_yapti = '%d', btedavi = '%d', ozellik = '%e', yas = '%d', tamirkiti = '%d', oyverdi = '%d', aletc = '%d', toplamceza = '%d', swatskin = '%d', tezgah = '%d', masa = '%d', biletsayisi = '%d', lisanscooldown = '%d', telefonkilifi = '%d', kamyonyetenegi = '%d', ahirsizlikyetenegi = '%d', gymp = '%d', kaslevel = '%d' WHERE id = '%d'",
        query_fix,
        PlayerInfo[playerid][pHouseSpawn],
        PlayerInfo[playerid][pToggleArmour],
        PlayerInfo[playerid][pMasked],
        PlayerInfo[playerid][pTenRengi],
        PlayerInfo[playerid][pKarakterYapti],
        PlayerInfo[playerid][BagimlilikTedavi],
        PlayerInfo[playerid][pOzellik],
        PlayerInfo[playerid][pAge],
        PlayerInfo[playerid][pTamirKiti],
        PlayerInfo[playerid][OyVerdim],
        PlayerInfo[playerid][pAletCantasi],
        PlayerInfo[playerid][pToplamCeza],
        PlayerInfo[playerid][pSWATSkin],
        PlayerInfo[playerid][pTezgah],
        PlayerInfo[playerid][pTezgahMasa],
        PlayerInfo[playerid][pBiletMiktar],
        PlayerInfo[playerid][pLisansCeza],
        PlayerInfo[playerid][pTelefonKilifi],
        PlayerInfo[playerid][pKamyoncuYetenegi],
        PlayerInfo[playerid][pHirsizlikYetenegi],
        PlayerInfo[playerid][GYMPuani],
        PlayerInfo[playerid][KasSeviyesi],
        PlayerInfo[playerid][pID]);
        mysql_tquery(ourConnection, query_fix);

        /*Hesap verileri:*/
        mysql_format(ourConnection, queryx, sizeof(queryx), "UPDATE accounts SET admin_level = '%d', premium = '%d', coyn_points = '%d', coyn_payday = '%d', nick_change = '%d', number_change = '%d', plate_change = '%d', dpayday = '%d', max_slot = '%d', gizliadmin = '%d', pmdurum = '%d', sorupuan = '%d', uyaripuani = '%d', calinanarac = '%d', donateskinler = '%s', hirsizlik = '%d', hirsizlikgelir = '%d' WHERE id = '%d'",
        PlayerInfo[playerid][pAdmin],
        PlayerInfo[playerid][pPremium],
        PlayerInfo[playerid][pCoyn],
        PlayerInfo[playerid][pCoynPayday],
        PlayerInfo[playerid][pNickChange],
        PlayerInfo[playerid][pNumberChange],
        PlayerInfo[playerid][pPlateChange],
        PlayerInfo[playerid][DoublePayday],
        PlayerInfo[playerid][pMaxSlot],
        PlayerInfo[playerid][pGizliAdmin],
        PlayerInfo[playerid][pTogPM],
        PlayerInfo[playerid][pSoruPuani],
        PlayerInfo[playerid][pUyariSayisi],
        PlayerInfo[playerid][pCalinanArac],
        donateskinstring,
        PlayerInfo[playerid][pHirsizlik],
        PlayerInfo[playerid][pHirsizlikGelir],
        PlayerInfo[playerid][pAccountID]);
        mysql_tquery(ourConnection, queryx);
    }

    return 1;
}

KarakterKayitDevam(playerid)
{
    if(PlayerInfo[playerid][pLogged])
    {
        queryx[0] = EOS;

        mysql_format(ourConnection, queryx, sizeof(queryx), "UPDATE characters SET balikyetenegi = '%d', kiraladigiotel = '%d', `karakter_yapti` = '%d', `sex` = '%d' WHERE id = '%d'",
        PlayerInfo[playerid][pBalikYetenegi], PlayerInfo[playerid][pKiraladigiOtel], PlayerInfo[playerid][pKarakterYapti], PlayerInfo[playerid][pSex], PlayerInfo[playerid][pID]);
        mysql_tquery(ourConnection, queryx);
    }
    return 1;
}

SilahAdi(silahid)
{
    new silahadi[40];
    GetWeaponName(silahid, silahadi, sizeof(silahadi));
    return silahadi;
}

GateOlustur(playerid, modelid) {
    if(GetPVarInt(playerid, "GateOlusturuyor")) {
        new id = Iter_Free(Gates);
        Iter_Add(Gates, id);
        GateBilgi[id][gateID] = id;
        GateBilgi[id][gateExists] = 1;
        GetPlayerPos(playerid, GateBilgi[id][gateClosePX], GateBilgi[id][gateClosePY], GateBilgi[id][gateClosePZ]);
        GetPlayerFacingAngle(playerid, GateBilgi[id][gateCloseRZ]);
        GateBilgi[id][gateClosePX] += 2.0;
        GateBilgi[id][gateInt] = GetPlayerInterior(playerid);
        GateBilgi[id][gateVW] = GetPlayerVirtualWorld(playerid);
        GateBilgi[id][gateCloseRX] = 0.0;
        GateBilgi[id][gateCloseRY] = 0.0;
        GateBilgi[id][gateOpenPX] = 0.0;
        GateBilgi[id][gateOpenPY] = 0.0;
        GateBilgi[id][gateOpenPZ] = 0.0;
        GateBilgi[id][gateOpenRX] = 0.0;
        GateBilgi[id][gateOpenRY] = 0.0;
        GateBilgi[id][gateOpenRZ] = 0.0;
        GateBilgi[id][gateModel] = modelid;
        GateBilgi[id][gateHiz] = 5.0;
        GateBilgi[id][gateMenzil] = 10.0;
        GateBilgi[id][gateOwner] = -1;
        GateBilgi[id][gateFaction] = -1;
        format(GateBilgi[id][gatePass], 24, "-1");
        GateBilgi[id][gateObject] = CreateDynamicObject(modelid, GateBilgi[id][gateClosePX], GateBilgi[id][gateClosePY], GateBilgi[id][gateClosePZ], GateBilgi[id][gateCloseRX], GateBilgi[id][gateCloseRY], GateBilgi[id][gateCloseRZ], GateBilgi[id][gateVW], GateBilgi[id][gateInt]);
        SunucuMesaji(playerid, "Gate oluþturuldu, þu an gatenin kapalý pozisyonunu düzenliyorsun.");
        SetPVarInt(playerid, "GateID", id);
        EditDynamicObject(playerid, GateBilgi[id][gateObject]);
    } else {
        HataMesajiC(playerid, "Bir hata oluþtu lütfen daha sonra tekrar deneyin.");
    }
    return 1;
}

GateKaydet(id)
{
    // new query[1500];

    mysql_format(ourConnection, queryx, sizeof(queryx), "INSERT INTO gates (cpx, cpy, cpz, crx, cry, crz, opx, opy, opz, orx, ory, orz) VALUES ('%.4f', '%.4f', '%.4f', '%.4f', '%.4f', '%.4f', '%.4f', '%.4f', '%.4f', '%.4f', '%.4f', '%.4f')",
    GateBilgi[id][gateClosePX],
    GateBilgi[id][gateClosePY],
    GateBilgi[id][gateClosePZ],
    GateBilgi[id][gateCloseRX],
    GateBilgi[id][gateCloseRY],
    GateBilgi[id][gateCloseRZ],
    GateBilgi[id][gateOpenPX],
    GateBilgi[id][gateOpenPY],
    GateBilgi[id][gateOpenPZ],
    GateBilgi[id][gateOpenRX],
    GateBilgi[id][gateOpenRY],
    GateBilgi[id][gateOpenRZ]);

    mysql_tquery(ourConnection, queryx, "OnQueryFinished", "dd", id, THREAD_CREATE_GATE);

    return 1;
}

GateDuzenle(id)
{
    // new query[1500];

    mysql_format(ourConnection, queryx, sizeof(queryx), "UPDATE gates SET cpx = '%.4f', cpy = '%.4f', cpz = '%.4f', crx = '%.4f', cry = '%.4f', crz = '%.4f', opx = '%.4f', opy = '%.4f', opz = '%.4f', \
    orx = '%.4f', ory = '%.4f', orz  = '%.4f', fid = '%d', oid = '%d', modelid = '%d', gatevw = '%d', gateint = '%d', hiz = '%.4f', menzil = '%.4f', sifre = '%s', gise = '%d' WHERE id = '%d'",
    GateBilgi[id][gateClosePX],
    GateBilgi[id][gateClosePY],
    GateBilgi[id][gateClosePZ],
    GateBilgi[id][gateCloseRX],
    GateBilgi[id][gateCloseRY],
    GateBilgi[id][gateCloseRZ],
    GateBilgi[id][gateOpenPX],
    GateBilgi[id][gateOpenPY],
    GateBilgi[id][gateOpenPZ],
    GateBilgi[id][gateOpenRX],
    GateBilgi[id][gateOpenRY],
    GateBilgi[id][gateOpenRZ],
    GateBilgi[id][gateFaction],
    GateBilgi[id][gateOwner],
    GateBilgi[id][gateModel],
    GateBilgi[id][gateVW],
    GateBilgi[id][gateInt],
    GateBilgi[id][gateHiz],
    GateBilgi[id][gateMenzil],
    GateBilgi[id][gatePass],
    GateBilgi[id][GateGise],
    GateBilgi[id][gateID]);

    mysql_tquery(ourConnection, queryx);

    return 1;
}

GateSil(id)
{
    if(GateBilgi[id][gateExists])
    {
        mysql_format(ourConnection, queryx, sizeof(queryx), "DELETE FROM gates WHERE id = %i", GateBilgi[id][gateID]);
        mysql_tquery(ourConnection, queryx);
        GateBilgi[id][gateID] = -1;
        GateBilgi[id][gateExists] = 0;
        DestroyDynamicObjectEx(GateBilgi[id][gateObject]);
        GateBilgi[id][gateClosePX] = 0.0;
        GateBilgi[id][gateClosePY] = 0.0;
        GateBilgi[id][gateClosePZ] = 0.0;
        GateBilgi[id][gateCloseRX] = 0.0;
        GateBilgi[id][gateCloseRY] = 0.0;
        GateBilgi[id][gateCloseRZ] = 0.0;
        GateBilgi[id][gateOpenPX] = 0.0;
        GateBilgi[id][gateOpenPY] = 0.0;
        GateBilgi[id][gateOpenPZ] = 0.0;
        GateBilgi[id][gateOpenRX] = 0.0;
        GateBilgi[id][gateOpenRY] = 0.0;
        GateBilgi[id][gateOpenRZ] = 0.0;
        GateBilgi[id][gateInt] = 0;
        GateBilgi[id][gateVW] = 0;
        Iter_Remove(Gates, id);
    }
    else return 0;
    return 1;
}

LoadGates(); public LoadGates()
{
    static rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);

    if(!rows)return 1;

    for(new i; i < rows; i++)
    {
        cache_get_value_int(i, "id", GateBilgi[i][gateID]);

        cache_get_value_float(i, "cpx", GateBilgi[i][gateClosePX]);
        cache_get_value_float(i, "cpy", GateBilgi[i][gateClosePY]);
        cache_get_value_float(i, "cpz", GateBilgi[i][gateClosePZ]);
        cache_get_value_float(i, "crx", GateBilgi[i][gateCloseRX]);
        cache_get_value_float(i, "cry", GateBilgi[i][gateCloseRY]);
        cache_get_value_float(i, "crz", GateBilgi[i][gateCloseRZ]);

        cache_get_value_float(i, "opx", GateBilgi[i][gateOpenPX]);
        cache_get_value_float(i, "opy", GateBilgi[i][gateOpenPY]);
        cache_get_value_float(i, "opz", GateBilgi[i][gateOpenPZ]);
        cache_get_value_float(i, "orx", GateBilgi[i][gateOpenRX]);
        cache_get_value_float(i, "ory", GateBilgi[i][gateOpenRY]);
        cache_get_value_float(i, "orz", GateBilgi[i][gateOpenRZ]);

        cache_get_value_int(i, "fid", GateBilgi[i][gateFaction]);
        cache_get_value_int(i, "oid", GateBilgi[i][gateOwner]);
        cache_get_value_int(i, "modelid", GateBilgi[i][gateModel]);

        cache_get_value_int(i, "gatevw", GateBilgi[i][gateVW]);
        cache_get_value_int(i, "gateint", GateBilgi[i][gateInt]);

        cache_get_value_float(i, "hiz", GateBilgi[i][gateHiz]);
        cache_get_value_float(i, "menzil", GateBilgi[i][gateMenzil]);
        cache_get_value(i, "sifre", GateBilgi[i][gatePass]);
        cache_get_value_int(i, "gise", GateBilgi[i][GateGise]);

        if(GateBilgi[i][GateGise] == 1)
        {
            new mesaj[32];
            format(mesaj, sizeof(mesaj), "/gise ($%d)", SunucuBilgi[TollTax]);
            GateBilgi[i][GiseLabel] = CreateDynamic3DTextLabel(mesaj, COLOR_WHITE, GateBilgi[i][gateClosePX], GateBilgi[i][gateClosePY], GateBilgi[i][gateClosePZ]+0.6, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0, -1);
            GateBilgi[i][GiseDurum] = false; // true olursa gise kilitlenir.
        }

        GateBilgi[i][gateExists] = 1;
        GateBilgi[i][gateOpened] = false;

        GateBilgi[i][gateObject] = CreateDynamicObject(GateBilgi[i][gateModel], GateBilgi[i][gateClosePX], GateBilgi[i][gateClosePY], GateBilgi[i][gateClosePZ], GateBilgi[i][gateCloseRX], GateBilgi[i][gateCloseRY], GateBilgi[i][gateCloseRZ]);

        Iter_Add(Gates, i);
    }
    print("Sunucu: Gateler yüklendi.");
    SetDynamicObjectMaterial(GateBilgi[14][gateObject], 0, 10763, "airport1_sfse", "ws_rollerdoor_fire", 0);
    SetDynamicObjectMaterial(GateBilgi[15][gateObject], 0, 10763, "airport1_sfse", "ws_rollerdoor_fire", 0);
    SetDynamicObjectMaterial(GateBilgi[16][gateObject], 0, 10763, "airport1_sfse", "ws_rollerdoor_fire", 0);
    SetDynamicObjectMaterial(GateBilgi[17][gateObject], 0, 10763, "airport1_sfse", "ws_rollerdoor_fire", 0);
    GateDurum(14);
    GateDurum(15);
    GateDurum(16);
    GateDurum(17);
    return 1;
}

LoadBuildings(); public LoadBuildings()
{
    static rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);

    if(!rows)return 1;

    new string[256];
    for(new i; i < rows; i++)
    {
        BuildingInfo[i][bExists] = 1;
        cache_get_value(i, "name", BuildingInfo[i][bName], 32);
        cache_get_value_int(i, "owner_id", BuildingInfo[i][bOwner]);
        cache_get_value_int(i, "id", BuildingInfo[i][bID]);
        cache_get_value_float(i, "pos_x", BuildingInfo[i][bPosX]);
        cache_get_value_float(i, "pos_y", BuildingInfo[i][bPosY]);
        cache_get_value_float(i, "pos_z", BuildingInfo[i][bPosZ]);
        cache_get_value_float(i, "pos_a", BuildingInfo[i][bPosA]);
        cache_get_value_float(i, "pos_int_x", BuildingInfo[i][bPosIntX]);
        cache_get_value_float(i, "pos_int_y", BuildingInfo[i][bPosIntY]);
        cache_get_value_float(i, "pos_int_z", BuildingInfo[i][bPosIntZ]);
        cache_get_value_int(i, "interior", BuildingInfo[i][bInterior]);
        cache_get_value_int(i, "pos_world", BuildingInfo[i][bPosWorld]);
        cache_get_value_int(i, "pos_interior", BuildingInfo[i][bPosInterior]);
        cache_get_value_int(i, "locked", BuildingInfo[i][bLocked]);
        cache_get_value_int(i, "cash", BuildingInfo[i][bCash]);
        cache_get_value_int(i, "price", BuildingInfo[i][bPrice]);
        cache_get_value_int(i, "type", BuildingInfo[i][bType]);
        cache_get_value_int(i, "entrance", BuildingInfo[i][bEntrance]);
        cache_get_value_int(i, "products", BuildingInfo[i][bProducts]);
        cache_get_value_int(i, "request_truck", BuildingInfo[i][bRequestTruck]);
        cache_get_value_int(i, "faction_id", BuildingInfo[i][bFaction]);
        cache_get_value_int(i, "world", BuildingInfo[i][bWorld]);
        cache_get_value_int(i, "calisansayisi", BuildingInfo[i][bCalisanSayisi]);
        cache_get_value_int(i, "vergi", BuildingInfo[i][bVergi]);
        cache_get_value_int(i, "ceza", BuildingInfo[i][bCeza]);
        cache_get_value_int(i, "muhurlu", BuildingInfo[i][bMuhurlu]);
        cache_get_value_int(i, "dekorkilit", BuildingInfo[i][bDekorKilit]);
        cache_get_value_int(i, "dekor", BuildingInfo[i][bDekor]);
        cache_get_value(i, "calisanlar", string, 256);
        sscanf(string, "p<|>dddddddddddddddddddd",
        BuildingInfo[i][Calisan][0], BuildingInfo[i][Calisan][1], BuildingInfo[i][Calisan][2], BuildingInfo[i][Calisan][3],
        BuildingInfo[i][Calisan][4], BuildingInfo[i][Calisan][5], BuildingInfo[i][Calisan][6],
        BuildingInfo[i][Calisan][7], BuildingInfo[i][Calisan][8], BuildingInfo[i][Calisan][9],
        BuildingInfo[i][Calisan][10], BuildingInfo[i][Calisan][11], BuildingInfo[i][Calisan][12],
        BuildingInfo[i][Calisan][13], BuildingInfo[i][Calisan][14], BuildingInfo[i][Calisan][15],
        BuildingInfo[i][Calisan][16], BuildingInfo[i][Calisan][17], BuildingInfo[i][Calisan][18], BuildingInfo[i][Calisan][19]);
        if(!BuildingInfo[i][bMuhurlu])
            BuildingInfo[i][bPickup] = Pickup_Create(ELEMENT_BUILDING, i, (BuildingInfo[i][bType] == COMPLEX) ? 1314 : 1239, 23, BuildingInfo[i][bPosX], BuildingInfo[i][bPosY], BuildingInfo[i][bPosZ], BuildingInfo[i][bPosWorld], BuildingInfo[i][bPosInterior]);
        else
            BuildingInfo[i][bPickup] = Pickup_Create(ELEMENT_BUILDING, i, 19522, 23, BuildingInfo[i][bPosX], BuildingInfo[i][bPosY], BuildingInfo[i][bPosZ], BuildingInfo[i][bPosWorld], BuildingInfo[i][bPosInterior]);
        if(BuildingInfo[i][bType] != PNS && BuildingInfo[i][bType] != FUEL_STATION)BuildingInfo[i][bLabel] = CreateDynamic3DTextLabel(BuildingInfo[i][bName], COLOR_WHITE, BuildingInfo[i][bPosX], BuildingInfo[i][bPosY], BuildingInfo[i][bPosZ]+0.4, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, BuildingInfo[i][bPosWorld], BuildingInfo[i][bPosInterior], -1);

        cache_get_value(i, "price_string", string, 256);
        sscanf(string, "p<|>dddddddddddddddddddd",
        BuildingInfo[i][bPrices][0], BuildingInfo[i][bPrices][1], BuildingInfo[i][bPrices][2],
        BuildingInfo[i][bPrices][3], BuildingInfo[i][bPrices][4], BuildingInfo[i][bPrices][5],
        BuildingInfo[i][bPrices][6], BuildingInfo[i][bPrices][7], BuildingInfo[i][bPrices][8],
        BuildingInfo[i][bPrices][9], BuildingInfo[i][bPrices][10], BuildingInfo[i][bPrices][11],
        BuildingInfo[i][bPrices][12], BuildingInfo[i][bPrices][13], BuildingInfo[i][bPrices][14],
        BuildingInfo[i][bPrices][15], BuildingInfo[i][bPrices][16], BuildingInfo[i][bPrices][17],
        BuildingInfo[i][bPrices][18], BuildingInfo[i][bPrices][19]);

        new urunIsimBilgi[450];
        new urunBilgi[80];
        cache_get_value(i, "urunIsimBilgi", urunIsimBilgi, 450);
        sscanf(urunIsimBilgi, "p<|>s[80]s[80]s[80]s[80]s[80]", BuildingUrunInfo[i][0], BuildingUrunInfo[i][1], BuildingUrunInfo[i][2], BuildingUrunInfo[i][3], BuildingUrunInfo[i][4]);

        cache_get_value(i, "urunBilgi", urunBilgi, 80);
        sscanf(urunBilgi, "p<|>ddddddddddddddd", BuildingInfo[i][bUrunFiyat][0], BuildingInfo[i][bUrunTip][0], BuildingInfo[i][bUrunObje][0],
        BuildingInfo[i][bUrunFiyat][1], BuildingInfo[i][bUrunTip][1], BuildingInfo[i][bUrunObje][1],
        BuildingInfo[i][bUrunFiyat][2], BuildingInfo[i][bUrunTip][2], BuildingInfo[i][bUrunObje][2],
        BuildingInfo[i][bUrunFiyat][3], BuildingInfo[i][bUrunTip][3], BuildingInfo[i][bUrunObje][3],
        BuildingInfo[i][bUrunFiyat][4], BuildingInfo[i][bUrunTip][4], BuildingInfo[i][bUrunObje][4]);
        Iter_Add(Buildings, i);
        
        BuildingInfo[i][bGPS] = 0;
    }
    print("Sunucu: Ýþletmeler yüklendi+");
    return 1;
}

IsletmeCalisanKayit(i)
{
    new calisanstring[256];
    format(calisanstring, sizeof(calisanstring), "");

    for(new x; x < 20; x++)
        format(calisanstring, sizeof(calisanstring), "%s%d|", calisanstring, BuildingInfo[i][Calisan][x]);

    format(BuildingInfo[i][Calisanlar], 256, calisanstring);
    return 1;
}

IsletmeUrunleriSifirla(i) {
    for(new j; j < 5; j++) {
        BuildingInfo[i][bUrunFiyat][j] = 0;
        BuildingInfo[i][bUrunTip][j] = 0;
        BuildingInfo[i][bUrunObje][j] = 0;
        format(BuildingUrunInfo[i][j], 80, "N/A");
    }
    return 1;
}

IsletmeCalisanlariSifirla(i)
{
    new calisanstring[256];
    format(calisanstring, sizeof(calisanstring), "");
    for(new x; x < 20; x++)
    {
        BuildingInfo[i][Calisan][x] = 0;
        format(calisanstring, sizeof(calisanstring), "%s0|", calisanstring);
    }
    format(BuildingInfo[i][Calisanlar], 256, calisanstring);
    BuildingInfo[i][bCalisanSayisi] = 0;
    return 1;
}

IsyeriUrunKaydet(i) {
    new urunBilgi[80];
    for(new j; j < 5; j++) {
        format(urunBilgi, sizeof urunBilgi, "%s%d|%d|%d|", urunBilgi, BuildingInfo[i][bUrunFiyat][j], BuildingInfo[i][bUrunTip][j], BuildingInfo[i][bUrunObje][j]);
    }
    new urunIsimBilgi[450];
    for(new j; j < 5; j++) {
        format(urunIsimBilgi, sizeof urunIsimBilgi, "%s%s|", urunIsimBilgi, BuildingUrunInfo[i][j]);
    }
    mysql_format(ourConnection, queryx, sizeof queryx, "UPDATE buildings SET urunBilgi = '%e', urunIsimBilgi = '%e' WHERE id = '%d'", urunBilgi, urunIsimBilgi, BuildingInfo[i][bID]);
    mysql_tquery(ourConnection, queryx);
    return 1;
}

SaveBuilding(i)
{

    IsyeriUrunKaydet(i);
    new prices_string[256];
    new calisanstring[256];

    for(new j; j < MAX_BIZ_ITEMS; j++) format(prices_string, sizeof(prices_string), "%s%d|", prices_string, BuildingInfo[i][bPrices][j]);
    for(new x; x < 20; x++) format(calisanstring, sizeof(calisanstring), "%s%d|", calisanstring, BuildingInfo[i][Calisan][x]);

    mysql_format(ourConnection, queryx, sizeof(queryx), "UPDATE buildings SET owner_id = '%d', faction_id = '%d', price = '%d', pos_x = '%f', pos_y = '%f', pos_z = '%f', pos_a = '%f', pos_int_x = '%f', pos_int_y = '%f', pos_int_z = '%f', \
    interior = '%d', pos_interior = '%d', pos_world = '%d', locked = '%d', cash = '%d', type = '%d', entrance = '%d', name = '%e', world = '%d', products = '%d', request_truck = '%d', price_string = '%e', calisansayisi = '%d', calisanlar = '%e', vergi = '%d', dekorkilit = '%d', ceza = '%d', muhurlu = '%d', dekor = '%d' WHERE id = '%d'",
    BuildingInfo[i][bOwner],
    BuildingInfo[i][bFaction],
    BuildingInfo[i][bPrice],
    BuildingInfo[i][bPosX],
    BuildingInfo[i][bPosY],
    BuildingInfo[i][bPosZ],
    BuildingInfo[i][bPosA],
    BuildingInfo[i][bPosIntX],
    BuildingInfo[i][bPosIntY],
    BuildingInfo[i][bPosIntZ],
    BuildingInfo[i][bInterior],
    BuildingInfo[i][bPosInterior],
    BuildingInfo[i][bPosWorld],
    BuildingInfo[i][bLocked],
    BuildingInfo[i][bCash],
    BuildingInfo[i][bType],
    BuildingInfo[i][bEntrance],
    BuildingInfo[i][bName],
    BuildingInfo[i][bWorld],
    BuildingInfo[i][bProducts],
    BuildingInfo[i][bRequestTruck],
    prices_string,
    BuildingInfo[i][bCalisanSayisi],
    calisanstring,
    BuildingInfo[i][bVergi],
    BuildingInfo[i][bDekorKilit],
    BuildingInfo[i][bCeza],
    BuildingInfo[i][bMuhurlu],
    BuildingInfo[i][bDekor],
    BuildingInfo[i][bID]);
    mysql_tquery(ourConnection, queryx);
    return 1;
}

LoadFactions(); public LoadFactions()
{
    static rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);

    if(!rows)return 1;

    for(new f; f < rows; f++)
    {
        FactionInfo[f][fExists] = 1;
        FactionInfo[f][fSkinsCount] = 0;
        cache_get_value_int(f, "factionID", FactionInfo[f][fID]);

        cache_get_value(f, "name", FactionInfo[f][fName], 32);
        cache_get_value(f, "short_name", FactionInfo[f][fShortName], 17);

        cache_get_value_int(f, "type", FactionInfo[f][fType]);

        cache_get_value_int(f, "default_male_skin", FactionInfo[f][fMaleSkin]);
        cache_get_value_int(f, "default_female_skin", FactionInfo[f][fFemaleSkin]);
        cache_get_value_int(f, "cash", FactionInfo[f][fCash]);

        cache_get_value_int(f, "graffiti_enabled", FactionInfo[f][fGraffiti]);
        cache_get_value_int(f, "olusum_puani", FactionInfo[f][fOlusumPuani]);
        cache_get_value_int(f, "nitro", FactionInfo[f][fNitroVerebilir]);
        FactionInfo[f][fOOC] = 1;

        mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT * FROM characters WHERE faction_id = '%d' AND banned = 0 AND deleted = 0 AND deleted_at IS NULL", f);
        mysql_tquery(ourConnection, queryx, "OnQueryFinished", "dd", f, THREAD_FACTION_MEMBERS);

        mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT * FROM factions_info WHERE faction_id = '%d'", FactionInfo[f][fID]);
        mysql_tquery(ourConnection, queryx, "LoadFactionInfo", "d", f);

        Iter_Add(Factions, f);
    }
    print("Sunucu: Olusumlar yuklendi+");
    return 1;
}

LoadFactionInfo(f); public LoadFactionInfo(f)
{
    static rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);

    if(!rows)return 1;

    new slot;

    for(new j; j < rows; j++)
    {
        cache_get_value_int(j, "slot", slot);

        cache_get_value_int(j, "salary", FactionInfo[f][fSalary][slot]);
        cache_get_value_int(j, "skin_id", FactionInfo[f][fSkins][slot]);
        cache_get_value(j, "rank_name", fRanks[f][slot], 80);

        if(FactionInfo[f][fSkins][slot])FactionInfo[f][fSkinsCount]++;
    }
    print("Sunucu: Loadfactioninfo yüklendi+");
    return 1;
}

SaveFaction(factionid)
{
    // new query[2048];

    mysql_format(ourConnection, queryx, sizeof(queryx), "UPDATE factions SET cash = '%d', name = '%e', short_name = '%e', type = '%d'",
    FactionInfo[factionid][fCash],
    FactionInfo[factionid][fName],
    FactionInfo[factionid][fShortName],
    FactionInfo[factionid][fType]);

    mysql_format(ourConnection, queryx, sizeof(queryx), "%s, graffiti_enabled = '%d', default_male_skin = '%d', default_female_skin = '%d', olusum_puani = '%d', nitro = '%d' WHERE factionID = '%d'",
    queryx,
    FactionInfo[factionid][fGraffiti],
    FactionInfo[factionid][fMaleSkin],
    FactionInfo[factionid][fFemaleSkin],
    FactionInfo[factionid][fOlusumPuani],
    FactionInfo[factionid][fNitroVerebilir],
    FactionInfo[factionid][fID]);

    mysql_tquery(ourConnection, queryx);

    return 1;
}
OtelYukle(); public OtelYukle()
{
    new rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);

    if(!rows)return 1;

    for(new i; i < rows; i++)
    {
        OtelInfo[i][otelExists] = 1;
        cache_get_value_int(i, "id", OtelInfo[i][otelID]);
        cache_get_value_int(i, "Sahip", OtelInfo[i][otelSahibi]);
        cache_get_value_float(i, "disX", OtelInfo[i][otelDisX]);
        cache_get_value_float(i, "disY", OtelInfo[i][otelDisY]);
        cache_get_value_float(i, "disZ", OtelInfo[i][otelDisZ]);
        cache_get_value_int(i, "disInterior", OtelInfo[i][otelDisInterior]);
        cache_get_value_int(i, "disWorld", OtelInfo[i][otelDisWorld]);
        cache_get_value_float(i, "intX", OtelInfo[i][otelIntX]);
        cache_get_value_float(i, "intY", OtelInfo[i][otelIntY]);
        cache_get_value_float(i, "intZ", OtelInfo[i][otelIntZ]);
        cache_get_value_int(i, "intInterior", OtelInfo[i][otelIntInterior]);
        cache_get_value_int(i, "intWorld", OtelInfo[i][otelIntWorld]);
        cache_get_value_int(i, "kilit", OtelInfo[i][otelKilitli]);
        cache_get_value_int(i, "kalanSure", OtelInfo[i][otelKalanSure]);
        cache_get_value_int(i, "ucret", OtelInfo[i][otelUcret]);
        cache_get_value_int(i, "kiralik", OtelInfo[i][otelKiralik]);
        OtelInfo[i][otelCheckpoint] = Pickup_Create(ELEMENT_OTEL, i, 1273, 1, OtelInfo[i][otelDisX], OtelInfo[i][otelDisY], OtelInfo[i][otelDisZ], OtelInfo[i][otelDisWorld], OtelInfo[i][otelDisInterior]);
        Iter_Add(Oteller, i);
    }
    print("Sunucu: Oteller yüklendi+");
    return 1;
}

LoadHouses(); public LoadHouses()
{
    static rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);

    if(!rows)return 1;

    new string[512];

    for(new i; i < rows; i++)
    {
        HouseInfo[i][hExists] = 1;
        cache_get_value_int(i, "owner_id", HouseInfo[i][hOwner]);
        cache_get_value_int(i, "id", HouseInfo[i][hID]);
        cache_get_value_float(i, "pos_x", HouseInfo[i][hPosX]);
        cache_get_value_float(i, "pos_y", HouseInfo[i][hPosY]);
        cache_get_value_float(i, "pos_z", HouseInfo[i][hPosZ]);
        cache_get_value_float(i, "pos_int_x", HouseInfo[i][hPosIntX]);
        cache_get_value_float(i, "pos_int_y", HouseInfo[i][hPosIntY]);
        cache_get_value_float(i, "pos_int_z", HouseInfo[i][hPosIntZ]);
        cache_get_value_float(i, "inv_pos_x", HouseInfo[i][hInvPosX]);
        cache_get_value_float(i, "inv_pos_y", HouseInfo[i][hInvPosY]);
        cache_get_value_float(i, "inv_pos_z", HouseInfo[i][hInvPosZ]);
        cache_get_value_int(i, "interior", HouseInfo[i][hInterior]);
        cache_get_value_int(i, "pos_world", HouseInfo[i][hPosWorld]);
        cache_get_value_int(i, "pos_interior", HouseInfo[i][hPosInterior]);
        cache_get_value_int(i, "locked", HouseInfo[i][hLocked]);
        cache_get_value_int(i, "cash", HouseInfo[i][hCash]);
        cache_get_value_int(i, "price", HouseInfo[i][hPrice]);
        cache_get_value_int(i, "world", HouseInfo[i][hWorld]);
        cache_get_value_int(i, "complex", HouseInfo[i][hComplex]);
        cache_get_value_int(i, "ig_interior", HouseInfo[i][hIGInterior]);
        cache_get_value_int(i, "vergi", HouseInfo[i][hVergi]);
        cache_get_value_int(i, "dekorkilit", HouseInfo[i][hDekorKilit]);
        cache_get_value_int(i, "envanterkilit", HouseInfo[i][hEnvanterKilit]);
        
        cache_get_value_int(i, "kira", HouseInfo[i][Kira]);
        cache_get_value_int(i, "kiraci", HouseInfo[i][Kiraci]);
        cache_get_value_int(i, "satis", HouseInfo[i][Satis]);
        
        cache_get_value(i, "string_inventory", string, 500);
        sscanf(string, "p<|>dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd",
        HouseInfo[i][hInvList][0], HouseInfo[i][hInvAmount][0], HouseInfo[i][hInvExtra][0],
        HouseInfo[i][hInvList][1], HouseInfo[i][hInvAmount][1], HouseInfo[i][hInvExtra][1],
        HouseInfo[i][hInvList][2], HouseInfo[i][hInvAmount][2], HouseInfo[i][hInvExtra][2],
        HouseInfo[i][hInvList][3], HouseInfo[i][hInvAmount][3], HouseInfo[i][hInvExtra][3],
        HouseInfo[i][hInvList][4], HouseInfo[i][hInvAmount][4], HouseInfo[i][hInvExtra][4],
        HouseInfo[i][hInvList][5], HouseInfo[i][hInvAmount][5], HouseInfo[i][hInvExtra][5],
        HouseInfo[i][hInvList][6], HouseInfo[i][hInvAmount][6], HouseInfo[i][hInvExtra][6],
        HouseInfo[i][hInvList][7], HouseInfo[i][hInvAmount][7], HouseInfo[i][hInvExtra][7],
        HouseInfo[i][hInvList][8], HouseInfo[i][hInvAmount][8], HouseInfo[i][hInvExtra][8],
        HouseInfo[i][hInvList][9], HouseInfo[i][hInvAmount][9], HouseInfo[i][hInvExtra][9],
        HouseInfo[i][hInvList][10], HouseInfo[i][hInvAmount][10], HouseInfo[i][hInvExtra][10],
        HouseInfo[i][hInvList][11], HouseInfo[i][hInvAmount][11], HouseInfo[i][hInvExtra][11],
        HouseInfo[i][hInvList][12], HouseInfo[i][hInvAmount][12], HouseInfo[i][hInvExtra][12],
        HouseInfo[i][hInvList][13], HouseInfo[i][hInvAmount][13], HouseInfo[i][hInvExtra][13],
        HouseInfo[i][hInvList][14], HouseInfo[i][hInvAmount][14], HouseInfo[i][hInvExtra][14],
        HouseInfo[i][hInvList][15], HouseInfo[i][hInvAmount][15], HouseInfo[i][hInvExtra][15],
        HouseInfo[i][hInvList][16], HouseInfo[i][hInvAmount][16], HouseInfo[i][hInvExtra][16],
        HouseInfo[i][hInvList][17], HouseInfo[i][hInvAmount][17], HouseInfo[i][hInvExtra][17],
        HouseInfo[i][hInvList][18], HouseInfo[i][hInvAmount][18], HouseInfo[i][hInvExtra][18],
        HouseInfo[i][hInvList][19], HouseInfo[i][hInvAmount][19], HouseInfo[i][hInvExtra][19]);

        cache_get_value(i, "kiyafet", string, 12);
        sscanf(string, "p<|>ddd", HouseInfo[i][hKiyafet][0], HouseInfo[i][hKiyafet][1], HouseInfo[i][hKiyafet][2]);
        if(HouseInfo[i][hInvPosX] == -1 && HouseInfo[i][hInvPosY] == -1 && HouseInfo[i][hInvPosZ] == -1)
        {
            HouseInfo[i][hInvPosX] = HouseInfo[i][hPosIntX];
            HouseInfo[i][hInvPosY] = HouseInfo[i][hPosIntY];
            HouseInfo[i][hInvPosZ] = HouseInfo[i][hPosIntZ];
        }

        HouseInfo[i][hCheckpoint] = CreateDynamicCP(HouseInfo[i][hPosX], HouseInfo[i][hPosY], HouseInfo[i][hPosZ]-0.3, 2.2000, HouseInfo[i][hPosWorld], HouseInfo[i][hPosInterior], -1, 1.5, -1, 1);
        Streamer_SetIntData(STREAMER_TYPE_CP, HouseInfo[i][hCheckpoint], E_STREAMER_EXTRA_ID, i);

        Iter_Add(Houses, i);
    }
    print("Sunucu: Evler yüklendi+");
    return 1;
}

SaveHouse(i)
{
    // new query[700];
    new inventory_string[512], kiyafet_string[12];

    for(new j; j < MAX_STORAGE_ITEMS; j++)
        format(inventory_string, sizeof(inventory_string), "%s%d|%d|%d|", inventory_string, HouseInfo[i][hInvList][j], HouseInfo[i][hInvAmount][j], HouseInfo[i][hInvExtra][j]);
    for(new o; o < 3; o++)
        format(kiyafet_string, sizeof(kiyafet_string), "%s%d|", kiyafet_string, HouseInfo[i][hKiyafet][o]);

    mysql_format(ourConnection, queryx, sizeof(queryx), "UPDATE houses SET owner_id = '%d', price = '%d', pos_x = '%f', pos_y = '%f', pos_z = '%f', pos_int_x = '%f', pos_int_y = '%f', pos_int_z = '%f', \
    inv_pos_x = '%f', inv_pos_y = '%f', inv_pos_z = '%f', interior = '%d', pos_interior = '%d', pos_world = '%d', locked = '%d', cash = '%d', complex = '%d', ig_interior = '%d', string_inventory = '%e', world = '%d', vergi = '%d', kiyafet = '%e', dekorkilit = '%d', envanterkilit = '%d', kira = '%d', kiraci = '%d', satis = '%d' WHERE id = '%d'",
    HouseInfo[i][hOwner],
    HouseInfo[i][hPrice],
    HouseInfo[i][hPosX],
    HouseInfo[i][hPosY],
    HouseInfo[i][hPosZ],
    HouseInfo[i][hPosIntX],
    HouseInfo[i][hPosIntY],
    HouseInfo[i][hPosIntZ],
    HouseInfo[i][hInvPosX],
    HouseInfo[i][hInvPosY],
    HouseInfo[i][hInvPosZ],
    HouseInfo[i][hInterior],
    HouseInfo[i][hPosInterior],
    HouseInfo[i][hPosWorld],
    HouseInfo[i][hLocked],
    HouseInfo[i][hCash],
    HouseInfo[i][hComplex],
    HouseInfo[i][hIGInterior],
    inventory_string,
    HouseInfo[i][hWorld],
    HouseInfo[i][hVergi],
    kiyafet_string,
    HouseInfo[i][hDekorKilit],
    HouseInfo[i][hEnvanterKilit],
    HouseInfo[i][Kira],
    HouseInfo[i][Kiraci],
    HouseInfo[i][Satis],
    HouseInfo[i][hID]);

    mysql_tquery(ourConnection, queryx);

    return 1;
}

LoadTaxes(); public LoadTaxes()
{
    new rows, fields, string[124];

    cache_get_row_count(rows);
    cache_get_field_count(fields);

    if(rows)
    {
        cache_get_value_int(0, "toll_tax", SunucuBilgi[TollTax]);
        cache_get_value_int(0, "heal_tax", SunucuBilgi[HealTax]);
        cache_get_value_int(0, "trucker_tax", SunucuBilgi[TruckerTax]);
        cache_get_value_int(0, "payday", SunucuBilgi[Payday]);
        cache_get_value_int(0, "ev", SunucuBilgi[ESSY]);
        cache_get_value_int(0, "isletme", SunucuBilgi[ISSY]);
        cache_get_value_int(0, "arac", SunucuBilgi[ASSY]);
        cache_get_value_int(0, "npp", SunucuBilgi[NPPayday]);
        cache_get_value_int(0, "msatis", SunucuBilgi[MobilyaSatinAlma]);
        cache_get_value_int(0, "malis", SunucuBilgi[MobilyaSatma]);
        cache_get_value_int(0, "casino", SunucuBilgi[CasinoCevir]);
        cache_get_value(0, "oylar", string, 124);
        sscanf(string, "p<|>ddddd",
        SunucuBilgi[VerilenOy][0],
        SunucuBilgi[VerilenOy][1],
        SunucuBilgi[VerilenOy][2],
        SunucuBilgi[VerilenOy][3],
        SunucuBilgi[VerilenOy][4]);
        /*cache_get_value(0, "cadi", SunucuBilgi[CekilisAdi], 124);
        cache_get_value_int(0, "ctype", SunucuBilgi[CekilisTuru]);
        cache_get_value_int(0, "cstatus", SunucuBilgi[CekilisDurum]);
        cache_get_value_int(0, "cprice", SunucuBilgi[BiletUcreti]);
        cache_get_value_int(0, "cpool", SunucuBilgi[CekilisHavuzu]);*/
    }

    return 1;
}

LoadVehicles(); public LoadVehicles()
{
    static rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);

    if(!rows)return 1;

    new vehicleid;

    for(new j; j < rows; j++)
    {
        vehicleid = CreateVehicle(522, 0, 0, 0, 0, 0, 0, -1);
        DestroyVehicle(vehicleid);

        if(vehicleid >= MAX_VEHICLES)
        {
            printf("Araç limitine ulaþtýn."); break;
        }

        VehicleInfo[vehicleid][vDestroyed] = false;
        VehicleInfo[vehicleid][vAutovelox] = 0;
        VehicleInfo[vehicleid][vImpounded] = 0;
        VehicleInfo[vehicleid][vKMGosteren] = 0;
        VehicleInfo[vehicleid][vTemporary] = 0;

        cache_get_value_int(j, "id", VehicleInfo[vehicleid][vID]);
        cache_get_value_int(j, "model", VehicleInfo[vehicleid][vModel]);
        cache_get_value_int(j, "color0", VehicleInfo[vehicleid][vFirstColor]);
        cache_get_value_int(j, "color1", VehicleInfo[vehicleid][vSecondColor]);
        cache_get_value_float(j, "pos_x", VehicleInfo[vehicleid][vSpawnPosX]);
        cache_get_value_float(j, "pos_y", VehicleInfo[vehicleid][vSpawnPosY]);
        cache_get_value_float(j, "pos_z", VehicleInfo[vehicleid][vSpawnPosZ]);
        cache_get_value_float(j, "pos_a", VehicleInfo[vehicleid][vSpawnPosA]);
        cache_get_value(j, "plate", VehicleInfo[vehicleid][vPlate]);
        cache_get_value_int(j, "paintjob", VehicleInfo[vehicleid][vPaintjob]);
        cache_get_value_int(j, "faction", VehicleInfo[vehicleid][vFaction]);
        cache_get_value_int(j, "job", VehicleInfo[vehicleid][vJob]);
        cache_get_value_int(j, "owner_id", VehicleInfo[vehicleid][vOwner]);
        cache_get_value_int(j, "interior", VehicleInfo[vehicleid][vInterior]);
        cache_get_value_int(j, "world", VehicleInfo[vehicleid][vWorld]);

        cache_get_value_int(j, "panels", VehicleInfo[vehicleid][vDamages][0]);
        cache_get_value_int(j, "doors", VehicleInfo[vehicleid][vDamages][1]);
        cache_get_value_int(j, "lights", VehicleInfo[vehicleid][vDamages][2]);
        cache_get_value_int(j, "tires", VehicleInfo[vehicleid][vDamages][3]);
        cache_get_value_int(j, "locked", VehicleInfo[vehicleid][vLocked]);
        cache_get_value_float(j, "health", VehicleInfo[vehicleid][vHealth]);
        cache_get_value_float(j, "max_health", VehicleInfo[vehicleid][vMaxHealth]);
        cache_get_value_int(j, "price", VehicleInfo[vehicleid][vPrice]);
        cache_get_value_int(j, "fuel", VehicleInfo[vehicleid][vFuel]);
        cache_get_value_float(j, "engine_health", VehicleInfo[vehicleid][vEngineHealth]);
        cache_get_value_float(j, "battery_health", VehicleInfo[vehicleid][vBatteryHealth]);
        cache_get_value_float(j, "door_health", VehicleInfo[vehicleid][vDoorHealth]);
        cache_get_value_int(j, "components", VehicleInfo[vehicleid][vComponents]);
        cache_get_value_int(j, "alarm", VehicleInfo[vehicleid][vAlarm]);
        cache_get_value_int(j, "door_level", VehicleInfo[vehicleid][vDoorLevel]);
        cache_get_value_int(j, "unregistered", VehicleInfo[vehicleid][vUnregistered]);
        cache_get_value_int(j, "kmh", VehicleInfo[vehicleid][vKMGosteren]);
        cache_get_value_int(j, "calinma", VehicleInfo[vehicleid][vHirsizlik]);
        cache_get_value_int(j, "vergi", VehicleInfo[vehicleid][vVergi]);
        cache_get_value_int(j, "koruma", VehicleInfo[vehicleid][vKoruma]);
        cache_get_value_int(j, "hurda", VehicleInfo[vehicleid][vHurda]);
        cache_get_value_int(j, "sak", VehicleInfo[vehicleid][vIAKS]);
        cache_get_value_int(j, "sigortaseviyesi", VehicleInfo[vehicleid][vSigortaSeviyesi]);
        VehicleInfo[vehicleid][vKiralayan] = -1;
        VehicleInfo[vehicleid][vKiralik] = -1;

        cache_get_value(j, "string_inventory", queryx, 500);
        sscanf(queryx, "p<|>dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd",
        VehicleInfo[vehicleid][vInvList][0], VehicleInfo[vehicleid][vInvAmount][0],
        VehicleInfo[vehicleid][vInvList][1], VehicleInfo[vehicleid][vInvAmount][1],
        VehicleInfo[vehicleid][vInvList][2], VehicleInfo[vehicleid][vInvAmount][2],
        VehicleInfo[vehicleid][vInvList][3], VehicleInfo[vehicleid][vInvAmount][3],
        VehicleInfo[vehicleid][vInvList][4], VehicleInfo[vehicleid][vInvAmount][4],
        VehicleInfo[vehicleid][vInvList][5], VehicleInfo[vehicleid][vInvAmount][5],
        VehicleInfo[vehicleid][vInvList][6], VehicleInfo[vehicleid][vInvAmount][6],
        VehicleInfo[vehicleid][vInvList][7], VehicleInfo[vehicleid][vInvAmount][7],
        VehicleInfo[vehicleid][vInvList][8], VehicleInfo[vehicleid][vInvAmount][8],
        VehicleInfo[vehicleid][vInvList][9], VehicleInfo[vehicleid][vInvAmount][9],
        VehicleInfo[vehicleid][vInvList][10], VehicleInfo[vehicleid][vInvAmount][10],
        VehicleInfo[vehicleid][vInvList][11], VehicleInfo[vehicleid][vInvAmount][11],
        VehicleInfo[vehicleid][vInvList][12], VehicleInfo[vehicleid][vInvAmount][12],
        VehicleInfo[vehicleid][vInvList][13], VehicleInfo[vehicleid][vInvAmount][13],
        VehicleInfo[vehicleid][vInvList][14], VehicleInfo[vehicleid][vInvAmount][14],
        VehicleInfo[vehicleid][vInvList][15], VehicleInfo[vehicleid][vInvAmount][15],
        VehicleInfo[vehicleid][vInvList][16], VehicleInfo[vehicleid][vInvAmount][16],
        VehicleInfo[vehicleid][vInvList][17], VehicleInfo[vehicleid][vInvAmount][17],
        VehicleInfo[vehicleid][vInvList][18], VehicleInfo[vehicleid][vInvAmount][18],
        VehicleInfo[vehicleid][vInvList][19], VehicleInfo[vehicleid][vInvAmount][19],
        VehicleInfo[vehicleid][vInvList][20], VehicleInfo[vehicleid][vInvAmount][20],
        VehicleInfo[vehicleid][vInvList][21], VehicleInfo[vehicleid][vInvAmount][21],
        VehicleInfo[vehicleid][vInvList][22], VehicleInfo[vehicleid][vInvAmount][22],
        VehicleInfo[vehicleid][vInvList][23], VehicleInfo[vehicleid][vInvAmount][23],
        VehicleInfo[vehicleid][vInvList][24], VehicleInfo[vehicleid][vInvAmount][24],
        VehicleInfo[vehicleid][vInvList][25], VehicleInfo[vehicleid][vInvAmount][25],
        VehicleInfo[vehicleid][vInvList][26], VehicleInfo[vehicleid][vInvAmount][26],
        VehicleInfo[vehicleid][vInvList][27], VehicleInfo[vehicleid][vInvAmount][27],
        VehicleInfo[vehicleid][vInvList][28], VehicleInfo[vehicleid][vInvAmount][28],
        VehicleInfo[vehicleid][vInvList][29], VehicleInfo[vehicleid][vInvAmount][29],
        VehicleInfo[vehicleid][vInvList][30], VehicleInfo[vehicleid][vInvAmount][30],
        VehicleInfo[vehicleid][vInvList][31], VehicleInfo[vehicleid][vInvAmount][31],
        VehicleInfo[vehicleid][vInvList][32], VehicleInfo[vehicleid][vInvAmount][32],
        VehicleInfo[vehicleid][vInvList][33], VehicleInfo[vehicleid][vInvAmount][33],
        VehicleInfo[vehicleid][vInvList][34], VehicleInfo[vehicleid][vInvAmount][34],
        VehicleInfo[vehicleid][vInvList][35], VehicleInfo[vehicleid][vInvAmount][35],
        VehicleInfo[vehicleid][vInvList][36], VehicleInfo[vehicleid][vInvAmount][36]);

        cache_get_value(j, "string_extra", queryx, 500);
        sscanf(queryx, "p<|>dddddddddddddddddddddddddddddddddddd",
        VehicleInfo[vehicleid][vInvExtra][0], VehicleInfo[vehicleid][vInvExtra][1],
        VehicleInfo[vehicleid][vInvExtra][2], VehicleInfo[vehicleid][vInvExtra][3],
        VehicleInfo[vehicleid][vInvExtra][4], VehicleInfo[vehicleid][vInvExtra][5],
        VehicleInfo[vehicleid][vInvExtra][6], VehicleInfo[vehicleid][vInvExtra][7],
        VehicleInfo[vehicleid][vInvExtra][8], VehicleInfo[vehicleid][vInvExtra][9],
        VehicleInfo[vehicleid][vInvExtra][10], VehicleInfo[vehicleid][vInvExtra][11],
        VehicleInfo[vehicleid][vInvExtra][12], VehicleInfo[vehicleid][vInvExtra][13],
        VehicleInfo[vehicleid][vInvExtra][14], VehicleInfo[vehicleid][vInvExtra][15],
        VehicleInfo[vehicleid][vInvExtra][16], VehicleInfo[vehicleid][vInvExtra][17],
        VehicleInfo[vehicleid][vInvExtra][18], VehicleInfo[vehicleid][vInvExtra][19],
        VehicleInfo[vehicleid][vInvExtra][20], VehicleInfo[vehicleid][vInvExtra][21],
        VehicleInfo[vehicleid][vInvExtra][22], VehicleInfo[vehicleid][vInvExtra][23],
        VehicleInfo[vehicleid][vInvExtra][24], VehicleInfo[vehicleid][vInvExtra][25],
        VehicleInfo[vehicleid][vInvExtra][26], VehicleInfo[vehicleid][vInvExtra][27],
        VehicleInfo[vehicleid][vInvExtra][28], VehicleInfo[vehicleid][vInvExtra][29],
        VehicleInfo[vehicleid][vInvExtra][30], VehicleInfo[vehicleid][vInvExtra][31],
        VehicleInfo[vehicleid][vInvExtra][32], VehicleInfo[vehicleid][vInvExtra][33],
        VehicleInfo[vehicleid][vInvExtra][34], VehicleInfo[vehicleid][vInvExtra][35],
        VehicleInfo[vehicleid][vInvExtra][36]);

        cache_get_value(j, "tuning", queryx, 64);
        sscanf(queryx, "p<|>dddddddddddddd",
        VehicleInfo[vehicleid][vTuning][0], VehicleInfo[vehicleid][vTuning][1], VehicleInfo[vehicleid][vTuning][2],
        VehicleInfo[vehicleid][vTuning][3], VehicleInfo[vehicleid][vTuning][4], VehicleInfo[vehicleid][vTuning][5],
        VehicleInfo[vehicleid][vTuning][6], VehicleInfo[vehicleid][vTuning][7], VehicleInfo[vehicleid][vTuning][8],
        VehicleInfo[vehicleid][vTuning][9], VehicleInfo[vehicleid][vTuning][10], VehicleInfo[vehicleid][vTuning][11],
        VehicleInfo[vehicleid][vTuning][12], VehicleInfo[vehicleid][vTuning][13]);
        //VehicleInfo[vehicleid][vRehine][0] = -1;
        //VehicleInfo[vehicleid][vRehine][1] = -1;
        //VehicleInfo[vehicleid][vRehine][2] = -1;
        VehicleInfo[vehicleid][vCeset][0] = -1;
        VehicleInfo[vehicleid][vCeset][1] = -1;
        VehicleInfo[vehicleid][vCeset][2] = -1;
        VehicleInfo[vehicleid][vSandik] = -1;
        if(VehicleInfo[vehicleid][vJob] != -1 && VehicleInfo[vehicleid][vFaction] != INVALID_VEHICLE_ID) VehicleInfo[vehicleid][vJob] = -1;

        if(Faction_GetType(VehicleInfo[vehicleid][vFaction]) == POLICE)
        {
            VehicleInfo[vehicleid][vScript] = CreateVehicle(VehicleInfo[vehicleid][vModel], VehicleInfo[vehicleid][vSpawnPosX], VehicleInfo[vehicleid][vSpawnPosY], VehicleInfo[vehicleid][vSpawnPosZ], VehicleInfo[vehicleid][vSpawnPosA], VehicleInfo[vehicleid][vFirstColor], VehicleInfo[vehicleid][vSecondColor], -1, 1);
        }
        else if(Faction_GetType(VehicleInfo[vehicleid][vFaction]) == MEDICAL)
        {
            VehicleInfo[vehicleid][vScript] = CreateVehicle(VehicleInfo[vehicleid][vModel], VehicleInfo[vehicleid][vSpawnPosX], VehicleInfo[vehicleid][vSpawnPosY], VehicleInfo[vehicleid][vSpawnPosZ], VehicleInfo[vehicleid][vSpawnPosA], VehicleInfo[vehicleid][vFirstColor], VehicleInfo[vehicleid][vSecondColor], -1, 1);
        }
        else VehicleInfo[vehicleid][vScript] = CreateVehicle(VehicleInfo[vehicleid][vModel], VehicleInfo[vehicleid][vSpawnPosX], VehicleInfo[vehicleid][vSpawnPosY], VehicleInfo[vehicleid][vSpawnPosZ], VehicleInfo[vehicleid][vSpawnPosA], VehicleInfo[vehicleid][vFirstColor], VehicleInfo[vehicleid][vSecondColor], -1, 0);
        UpdateVehicleDamageStatus(VehicleInfo[vehicleid][vScript], VehicleInfo[vehicleid][vDamages][0], VehicleInfo[vehicleid][vDamages][1], VehicleInfo[vehicleid][vDamages][2], VehicleInfo[vehicleid][vDamages][3]);
        SetVehicleParamsEx(VehicleInfo[vehicleid][vScript], VEHICLE_PARAMS_OFF, VEHICLE_PARAMS_OFF, VEHICLE_PARAMS_OFF, VehicleInfo[vehicleid][vLocked], VEHICLE_PARAMS_OFF, VEHICLE_PARAMS_OFF, VehicleInfo[vehicleid][vObje]);
        SetVehicleParamsCarWindows(VehicleInfo[vehicleid][vScript], VEHICLE_PARAMS_ON, VEHICLE_PARAMS_ON, VEHICLE_PARAMS_ON, VehicleInfo[vehicleid][vObje]);
        Vehicle_SetPlate(VehicleInfo[vehicleid][vScript]);
        SetVehicleToRespawn(vehicleid);
        SetVehicleVirtualWorld(VehicleInfo[vehicleid][vScript], VehicleInfo[vehicleid][vWorld]);
        LinkVehicleToInterior(VehicleInfo[vehicleid][vScript], VehicleInfo[vehicleid][vInterior]);
        Tuning_SetComponents(VehicleInfo[vehicleid][vScript]);
        ChangeVehiclePaintjob(VehicleInfo[vehicleid][vScript], VehicleInfo[vehicleid][vPaintjob]);

        mysql_format(ourConnection, queryx, sizeof(queryx), "UPDATE vehicles SET spawned = 1 WHERE id = '%d'", VehicleInfo[vehicleid][vID]);
        mysql_tquery(ourConnection, queryx);

        Iter_Add(Vehicles, vehicleid);

        for(new i; i < 4; i++) {
            AracYolcu[vehicleid][i] = -1;
            AracKoltuk[vehicleid][i] = 0;
        }
        AC_SetVehicleHealth(vehicleid, VehicleInfo[vehicleid][vHealth]);
        VehicleInfo[vehicleid][vSpawnExpires] = gettime() + (60 * 360);
        
        if(!VehicleInfo[vehicleid][vKoruma])
        {
            if(InSafeZoneVeh(vehicleid))
            {
                VehicleInfo[vehicleid][vKoruma] = 1;
            }
            else
            {
                VehicleInfo[vehicleid][vKoruma] = 0;
            }
        }
        
        if(VehicleInfo[vehicleid][vIAKS] > 0)
        {
            new kai = Iter_Free(KiralikAraclar);
            if(kai < MAX_KIRALIK_ARAC) Iter_Add(KiralikAraclar, kai);

            KiralikArac[kai][kaID] = vehicleid;
            KiralikArac[kai][kaSQLID] = VehicleInfo[vehicleid][vID];

            KiralikArac[kai][kaKiralandi] = false;
            KiralikArac[kai][kaKiralayan] = -1;
        }
    }
    if(VehicleInfo[vehicleid][vCallSign] == true)
    {
        DestroyDynamic3DTextLabelEx(VehicleInfo[vehicleid][vSignText]);
        VehicleInfo[vehicleid][vCallSign] = false;
    }
    print("Sunucu: Araçlar yüklendi+");
    return 1;
}

LoadVehicles3(playerid); public LoadVehicles3(playerid)
{
    static rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);

    if(!rows)return 1;

    new vehicleid;

    for(new j; j < rows; j++)
    {
        vehicleid = CreateVehicle(522, 0, 0, 0, 0, 0, 0, -1);
        DestroyVehicle(vehicleid);

        if(vehicleid >= MAX_VEHICLES)
        {
            printf("Araç limitine ulaþtýn."); break;
        }

        VehicleInfo[vehicleid][vDestroyed] = false;
        VehicleInfo[vehicleid][vAutovelox] = 0;
        VehicleInfo[vehicleid][vImpounded] = 0;
        VehicleInfo[vehicleid][vKMGosteren] = 0;
        VehicleInfo[vehicleid][vTemporary] = 0;

        cache_get_value_int(j, "id", VehicleInfo[vehicleid][vID]);
        cache_get_value_int(j, "model", VehicleInfo[vehicleid][vModel]);
        cache_get_value_int(j, "color0", VehicleInfo[vehicleid][vFirstColor]);
        cache_get_value_int(j, "color1", VehicleInfo[vehicleid][vSecondColor]);
        cache_get_value_float(j, "pos_x", VehicleInfo[vehicleid][vSpawnPosX]);
        cache_get_value_float(j, "pos_y", VehicleInfo[vehicleid][vSpawnPosY]);
        cache_get_value_float(j, "pos_z", VehicleInfo[vehicleid][vSpawnPosZ]);
        cache_get_value_float(j, "pos_a", VehicleInfo[vehicleid][vSpawnPosA]);
        cache_get_value(j, "plate", VehicleInfo[vehicleid][vPlate]);
        cache_get_value_int(j, "paintjob", VehicleInfo[vehicleid][vPaintjob]);
        cache_get_value_int(j, "faction", VehicleInfo[vehicleid][vFaction]);
        cache_get_value_int(j, "job", VehicleInfo[vehicleid][vJob]);
        cache_get_value_int(j, "owner_id", VehicleInfo[vehicleid][vOwner]);
        cache_get_value_int(j, "interior", VehicleInfo[vehicleid][vInterior]);
        cache_get_value_int(j, "world", VehicleInfo[vehicleid][vWorld]);

        cache_get_value_int(j, "panels", VehicleInfo[vehicleid][vDamages][0]);
        cache_get_value_int(j, "doors", VehicleInfo[vehicleid][vDamages][1]);
        cache_get_value_int(j, "lights", VehicleInfo[vehicleid][vDamages][2]);
        cache_get_value_int(j, "tires", VehicleInfo[vehicleid][vDamages][3]);
        cache_get_value_int(j, "locked", VehicleInfo[vehicleid][vLocked]);
        cache_get_value_float(j, "health", VehicleInfo[vehicleid][vHealth]);
        cache_get_value_float(j, "max_health", VehicleInfo[vehicleid][vMaxHealth]);
        cache_get_value_int(j, "price", VehicleInfo[vehicleid][vPrice]);
        cache_get_value_int(j, "fuel", VehicleInfo[vehicleid][vFuel]);
        cache_get_value_float(j, "engine_health", VehicleInfo[vehicleid][vEngineHealth]);
        cache_get_value_float(j, "battery_health", VehicleInfo[vehicleid][vBatteryHealth]);
        cache_get_value_float(j, "door_health", VehicleInfo[vehicleid][vDoorHealth]);
        cache_get_value_int(j, "components", VehicleInfo[vehicleid][vComponents]);
        cache_get_value_int(j, "alarm", VehicleInfo[vehicleid][vAlarm]);
        cache_get_value_int(j, "door_level", VehicleInfo[vehicleid][vDoorLevel]);
        cache_get_value_int(j, "unregistered", VehicleInfo[vehicleid][vUnregistered]);
        cache_get_value_int(j, "kmh", VehicleInfo[vehicleid][vKMGosteren]);
        cache_get_value_int(j, "calinma", VehicleInfo[vehicleid][vHirsizlik]);
        cache_get_value_int(j, "vergi", VehicleInfo[vehicleid][vVergi]);
        cache_get_value_int(j, "koruma", VehicleInfo[vehicleid][vKoruma]);
        cache_get_value_int(j, "hurda", VehicleInfo[vehicleid][vHurda]);
        cache_get_value_int(j, "sak", VehicleInfo[vehicleid][vIAKS]);
        cache_get_value_int(j, "sigortaseviyesi", VehicleInfo[vehicleid][vSigortaSeviyesi]);
        VehicleInfo[vehicleid][vKiralayan] = -1;
        VehicleInfo[vehicleid][vKiralik] = -1;

        cache_get_value(j, "string_inventory", queryx, 500);
        sscanf(queryx, "p<|>dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd",
        VehicleInfo[vehicleid][vInvList][0], VehicleInfo[vehicleid][vInvAmount][0],
        VehicleInfo[vehicleid][vInvList][1], VehicleInfo[vehicleid][vInvAmount][1],
        VehicleInfo[vehicleid][vInvList][2], VehicleInfo[vehicleid][vInvAmount][2],
        VehicleInfo[vehicleid][vInvList][3], VehicleInfo[vehicleid][vInvAmount][3],
        VehicleInfo[vehicleid][vInvList][4], VehicleInfo[vehicleid][vInvAmount][4],
        VehicleInfo[vehicleid][vInvList][5], VehicleInfo[vehicleid][vInvAmount][5],
        VehicleInfo[vehicleid][vInvList][6], VehicleInfo[vehicleid][vInvAmount][6],
        VehicleInfo[vehicleid][vInvList][7], VehicleInfo[vehicleid][vInvAmount][7],
        VehicleInfo[vehicleid][vInvList][8], VehicleInfo[vehicleid][vInvAmount][8],
        VehicleInfo[vehicleid][vInvList][9], VehicleInfo[vehicleid][vInvAmount][9],
        VehicleInfo[vehicleid][vInvList][10], VehicleInfo[vehicleid][vInvAmount][10],
        VehicleInfo[vehicleid][vInvList][11], VehicleInfo[vehicleid][vInvAmount][11],
        VehicleInfo[vehicleid][vInvList][12], VehicleInfo[vehicleid][vInvAmount][12],
        VehicleInfo[vehicleid][vInvList][13], VehicleInfo[vehicleid][vInvAmount][13],
        VehicleInfo[vehicleid][vInvList][14], VehicleInfo[vehicleid][vInvAmount][14],
        VehicleInfo[vehicleid][vInvList][15], VehicleInfo[vehicleid][vInvAmount][15],
        VehicleInfo[vehicleid][vInvList][16], VehicleInfo[vehicleid][vInvAmount][16],
        VehicleInfo[vehicleid][vInvList][17], VehicleInfo[vehicleid][vInvAmount][17],
        VehicleInfo[vehicleid][vInvList][18], VehicleInfo[vehicleid][vInvAmount][18],
        VehicleInfo[vehicleid][vInvList][19], VehicleInfo[vehicleid][vInvAmount][19],
        VehicleInfo[vehicleid][vInvList][20], VehicleInfo[vehicleid][vInvAmount][20],
        VehicleInfo[vehicleid][vInvList][21], VehicleInfo[vehicleid][vInvAmount][21],
        VehicleInfo[vehicleid][vInvList][22], VehicleInfo[vehicleid][vInvAmount][22],
        VehicleInfo[vehicleid][vInvList][23], VehicleInfo[vehicleid][vInvAmount][23],
        VehicleInfo[vehicleid][vInvList][24], VehicleInfo[vehicleid][vInvAmount][24],
        VehicleInfo[vehicleid][vInvList][25], VehicleInfo[vehicleid][vInvAmount][25],
        VehicleInfo[vehicleid][vInvList][26], VehicleInfo[vehicleid][vInvAmount][26],
        VehicleInfo[vehicleid][vInvList][27], VehicleInfo[vehicleid][vInvAmount][27],
        VehicleInfo[vehicleid][vInvList][28], VehicleInfo[vehicleid][vInvAmount][28],
        VehicleInfo[vehicleid][vInvList][29], VehicleInfo[vehicleid][vInvAmount][29],
        VehicleInfo[vehicleid][vInvList][30], VehicleInfo[vehicleid][vInvAmount][30],
        VehicleInfo[vehicleid][vInvList][31], VehicleInfo[vehicleid][vInvAmount][31],
        VehicleInfo[vehicleid][vInvList][32], VehicleInfo[vehicleid][vInvAmount][32],
        VehicleInfo[vehicleid][vInvList][33], VehicleInfo[vehicleid][vInvAmount][33],
        VehicleInfo[vehicleid][vInvList][34], VehicleInfo[vehicleid][vInvAmount][34],
        VehicleInfo[vehicleid][vInvList][35], VehicleInfo[vehicleid][vInvAmount][35],
        VehicleInfo[vehicleid][vInvList][36], VehicleInfo[vehicleid][vInvAmount][36]);

        cache_get_value(j, "string_extra", queryx, 500);
        sscanf(queryx, "p<|>dddddddddddddddddddddddddddddddddddd",
        VehicleInfo[vehicleid][vInvExtra][0], VehicleInfo[vehicleid][vInvExtra][1],
        VehicleInfo[vehicleid][vInvExtra][2], VehicleInfo[vehicleid][vInvExtra][3],
        VehicleInfo[vehicleid][vInvExtra][4], VehicleInfo[vehicleid][vInvExtra][5],
        VehicleInfo[vehicleid][vInvExtra][6], VehicleInfo[vehicleid][vInvExtra][7],
        VehicleInfo[vehicleid][vInvExtra][8], VehicleInfo[vehicleid][vInvExtra][9],
        VehicleInfo[vehicleid][vInvExtra][10], VehicleInfo[vehicleid][vInvExtra][11],
        VehicleInfo[vehicleid][vInvExtra][12], VehicleInfo[vehicleid][vInvExtra][13],
        VehicleInfo[vehicleid][vInvExtra][14], VehicleInfo[vehicleid][vInvExtra][15],
        VehicleInfo[vehicleid][vInvExtra][16], VehicleInfo[vehicleid][vInvExtra][17],
        VehicleInfo[vehicleid][vInvExtra][18], VehicleInfo[vehicleid][vInvExtra][19],
        VehicleInfo[vehicleid][vInvExtra][20], VehicleInfo[vehicleid][vInvExtra][21],
        VehicleInfo[vehicleid][vInvExtra][22], VehicleInfo[vehicleid][vInvExtra][23],
        VehicleInfo[vehicleid][vInvExtra][24], VehicleInfo[vehicleid][vInvExtra][25],
        VehicleInfo[vehicleid][vInvExtra][26], VehicleInfo[vehicleid][vInvExtra][27],
        VehicleInfo[vehicleid][vInvExtra][28], VehicleInfo[vehicleid][vInvExtra][29],
        VehicleInfo[vehicleid][vInvExtra][30], VehicleInfo[vehicleid][vInvExtra][31],
        VehicleInfo[vehicleid][vInvExtra][32], VehicleInfo[vehicleid][vInvExtra][33],
        VehicleInfo[vehicleid][vInvExtra][34], VehicleInfo[vehicleid][vInvExtra][35],
        VehicleInfo[vehicleid][vInvExtra][36]);

        VehicleInfo[vehicleid][vKiralayan] = -1;
        VehicleInfo[vehicleid][vKiralik] = -1;

        cache_get_value(j, "tuning", queryx, 64);
        sscanf(queryx, "p<|>dddddddddddddd",
        VehicleInfo[vehicleid][vTuning][0], VehicleInfo[vehicleid][vTuning][1], VehicleInfo[vehicleid][vTuning][2],
        VehicleInfo[vehicleid][vTuning][3], VehicleInfo[vehicleid][vTuning][4], VehicleInfo[vehicleid][vTuning][5],
        VehicleInfo[vehicleid][vTuning][6], VehicleInfo[vehicleid][vTuning][7], VehicleInfo[vehicleid][vTuning][8],
        VehicleInfo[vehicleid][vTuning][9], VehicleInfo[vehicleid][vTuning][10], VehicleInfo[vehicleid][vTuning][11],
        VehicleInfo[vehicleid][vTuning][12], VehicleInfo[vehicleid][vTuning][13]);
        //VehicleInfo[vehicleid][vRehine][0] = -1;
        //VehicleInfo[vehicleid][vRehine][1] = -1;
        //VehicleInfo[vehicleid][vRehine][2] = -1;
        VehicleInfo[vehicleid][vCeset][0] = -1;
        VehicleInfo[vehicleid][vCeset][1] = -1;
        VehicleInfo[vehicleid][vCeset][2] = -1;
        VehicleInfo[vehicleid][vSandik] = -1;
        
        new Float:x, Float:y, Float:z, Float:a;
        GetPlayerPos(playerid, x, y, z);
        SetPlayerFacingAngle(playerid, a);
        
        if(VehicleInfo[vehicleid][vJob] != -1 && VehicleInfo[vehicleid][vFaction] != INVALID_VEHICLE_ID) VehicleInfo[vehicleid][vJob] = -1;

        if(Faction_GetType(VehicleInfo[vehicleid][vFaction]) == POLICE)
        {
            VehicleInfo[vehicleid][vScript] = CreateVehicle(VehicleInfo[vehicleid][vModel], x, y, z, a, VehicleInfo[vehicleid][vFirstColor], VehicleInfo[vehicleid][vSecondColor], -1, 1);
        }
        else if(Faction_GetType(VehicleInfo[vehicleid][vFaction]) == MEDICAL)
        {
            VehicleInfo[vehicleid][vScript] = CreateVehicle(VehicleInfo[vehicleid][vModel], x, y, z, a, VehicleInfo[vehicleid][vFirstColor], VehicleInfo[vehicleid][vSecondColor], -1, 1);
        }
        else VehicleInfo[vehicleid][vScript] = CreateVehicle(VehicleInfo[vehicleid][vModel], x, y, z, a, VehicleInfo[vehicleid][vFirstColor], VehicleInfo[vehicleid][vSecondColor], -1, 0);
        UpdateVehicleDamageStatus(VehicleInfo[vehicleid][vScript], VehicleInfo[vehicleid][vDamages][0], VehicleInfo[vehicleid][vDamages][1], VehicleInfo[vehicleid][vDamages][2], VehicleInfo[vehicleid][vDamages][3]);
        SetVehicleParamsEx(VehicleInfo[vehicleid][vScript], VEHICLE_PARAMS_OFF, VEHICLE_PARAMS_OFF, VEHICLE_PARAMS_OFF, VehicleInfo[vehicleid][vLocked], VEHICLE_PARAMS_OFF, VEHICLE_PARAMS_OFF, VehicleInfo[vehicleid][vObje]);
        SetVehicleParamsCarWindows(VehicleInfo[vehicleid][vScript], VEHICLE_PARAMS_ON, VEHICLE_PARAMS_ON, VEHICLE_PARAMS_ON, VehicleInfo[vehicleid][vObje]);
        Vehicle_SetPlate(VehicleInfo[vehicleid][vScript]);
        SetVehicleToRespawn(vehicleid);
        SetVehiclePos(vehicleid, x, y, z);
        SetVehicleZAngle(vehicleid, a);
        SetVehicleVirtualWorld(VehicleInfo[vehicleid][vScript], 0);
        LinkVehicleToInterior(VehicleInfo[vehicleid][vScript], 0);
        Tuning_SetComponents(VehicleInfo[vehicleid][vScript]);
        ChangeVehiclePaintjob(VehicleInfo[vehicleid][vScript], VehicleInfo[vehicleid][vPaintjob]);

        mysql_format(ourConnection, queryx, sizeof(queryx), "UPDATE vehicles SET spawned = 1 WHERE id = '%d'", VehicleInfo[vehicleid][vID]);
        mysql_tquery(ourConnection, queryx);

        Iter_Add(Vehicles, vehicleid);

        for(new i; i < 4; i++) {
            AracYolcu[vehicleid][i] = -1;
            AracKoltuk[vehicleid][i] = 0;
        }
        AC_SetVehicleHealth(vehicleid, 500);
        VehicleInfo[vehicleid][vSpawnExpires] = gettime() + (60 * 360);
        PlayerInfo[playerid][AracSpawn] = false;
        
        if(!VehicleInfo[vehicleid][vKoruma])
        {
            if(InSafeZoneVeh(vehicleid))
            {
                VehicleInfo[vehicleid][vKoruma] = 1;
            }
            else
            {
                VehicleInfo[vehicleid][vKoruma] = 0;
            }
        }
        
        if(VehicleInfo[vehicleid][vIAKS] > 0)
        {
            new kai = Iter_Free(KiralikAraclar);
            if(kai < MAX_KIRALIK_ARAC) Iter_Add(KiralikAraclar, kai);

            KiralikArac[kai][kaID] = vehicleid;
            KiralikArac[kai][kaSQLID] = VehicleInfo[vehicleid][vID];

            KiralikArac[kai][kaKiralandi] = false;
            KiralikArac[kai][kaKiralayan] = -1;
        }
    }
    if(VehicleInfo[vehicleid][vCallSign] == true)
    {
        DestroyDynamic3DTextLabelEx(VehicleInfo[vehicleid][vSignText]);
        VehicleInfo[vehicleid][vCallSign] = false;
    }
    printf("%s, %s tarihinde hurda durumdaki aracini spawn etti. (%d - %d)", ReturnRoleplayName(playerid), ReturnDate(), VehicleInfo[vehicleid][vModel], VehicleInfo[vehicleid][vID]);
    return 1;
}

LoadVehicles2(playerid); public LoadVehicles2(playerid)
{
    static rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);

    if(!rows)return 1;

    new vehicleid;

    for(new j; j < rows; j++)
    {
        vehicleid = CreateVehicle(522, 0, 0, 0, 0, 0, 0, -1);
        DestroyVehicle(vehicleid);

        if(vehicleid >= MAX_VEHICLES)
        {
            printf("Araç limitine ulaþtýn."); break;
        }

        VehicleInfo[vehicleid][vDestroyed] = false;
        VehicleInfo[vehicleid][vAutovelox] = 0;
        VehicleInfo[vehicleid][vImpounded] = 0;
        VehicleInfo[vehicleid][vKMGosteren] = 0;
        VehicleInfo[vehicleid][vTemporary] = 0;

        cache_get_value_int(j, "id", VehicleInfo[vehicleid][vID]);
        cache_get_value_int(j, "model", VehicleInfo[vehicleid][vModel]);
        cache_get_value_int(j, "color0", VehicleInfo[vehicleid][vFirstColor]);
        cache_get_value_int(j, "color1", VehicleInfo[vehicleid][vSecondColor]);
        cache_get_value_float(j, "pos_x", VehicleInfo[vehicleid][vSpawnPosX]);
        cache_get_value_float(j, "pos_y", VehicleInfo[vehicleid][vSpawnPosY]);
        cache_get_value_float(j, "pos_z", VehicleInfo[vehicleid][vSpawnPosZ]);
        cache_get_value_float(j, "pos_a", VehicleInfo[vehicleid][vSpawnPosA]);
        cache_get_value(j, "plate", VehicleInfo[vehicleid][vPlate]);
        cache_get_value_int(j, "paintjob", VehicleInfo[vehicleid][vPaintjob]);
        cache_get_value_int(j, "faction", VehicleInfo[vehicleid][vFaction]);
        cache_get_value_int(j, "job", VehicleInfo[vehicleid][vJob]);
        cache_get_value_int(j, "owner_id", VehicleInfo[vehicleid][vOwner]);
        cache_get_value_int(j, "interior", VehicleInfo[vehicleid][vInterior]);
        cache_get_value_int(j, "world", VehicleInfo[vehicleid][vWorld]);

        cache_get_value_int(j, "panels", VehicleInfo[vehicleid][vDamages][0]);
        cache_get_value_int(j, "doors", VehicleInfo[vehicleid][vDamages][1]);
        cache_get_value_int(j, "lights", VehicleInfo[vehicleid][vDamages][2]);
        cache_get_value_int(j, "tires", VehicleInfo[vehicleid][vDamages][3]);
        cache_get_value_int(j, "locked", VehicleInfo[vehicleid][vLocked]);
        cache_get_value_float(j, "health", VehicleInfo[vehicleid][vHealth]);
        cache_get_value_float(j, "max_health", VehicleInfo[vehicleid][vMaxHealth]);
        cache_get_value_int(j, "price", VehicleInfo[vehicleid][vPrice]);
        cache_get_value_int(j, "fuel", VehicleInfo[vehicleid][vFuel]);
        cache_get_value_float(j, "engine_health", VehicleInfo[vehicleid][vEngineHealth]);
        cache_get_value_float(j, "battery_health", VehicleInfo[vehicleid][vBatteryHealth]);
        cache_get_value_float(j, "door_health", VehicleInfo[vehicleid][vDoorHealth]);
        cache_get_value_int(j, "components", VehicleInfo[vehicleid][vComponents]);
        cache_get_value_int(j, "alarm", VehicleInfo[vehicleid][vAlarm]);
        cache_get_value_int(j, "door_level", VehicleInfo[vehicleid][vDoorLevel]);
        cache_get_value_int(j, "unregistered", VehicleInfo[vehicleid][vUnregistered]);
        cache_get_value_int(j, "kmh", VehicleInfo[vehicleid][vKMGosteren]);
        cache_get_value_int(j, "calinma", VehicleInfo[vehicleid][vHirsizlik]);
        cache_get_value_int(j, "vergi", VehicleInfo[vehicleid][vVergi]);
        cache_get_value_int(j, "koruma", VehicleInfo[vehicleid][vKoruma]);
        cache_get_value_int(j, "hurda", VehicleInfo[vehicleid][vHurda]);
        cache_get_value_int(j, "sak", VehicleInfo[vehicleid][vIAKS]);
        cache_get_value_int(j, "sigortaseviyesi", VehicleInfo[vehicleid][vSigortaSeviyesi]);
        VehicleInfo[vehicleid][vKiralayan] = -1;
        VehicleInfo[vehicleid][vKiralik] = -1;
        
        cache_get_value(j, "string_inventory", queryx, 500);
        sscanf(queryx, "p<|>dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd",
        VehicleInfo[vehicleid][vInvList][0], VehicleInfo[vehicleid][vInvAmount][0],
        VehicleInfo[vehicleid][vInvList][1], VehicleInfo[vehicleid][vInvAmount][1],
        VehicleInfo[vehicleid][vInvList][2], VehicleInfo[vehicleid][vInvAmount][2],
        VehicleInfo[vehicleid][vInvList][3], VehicleInfo[vehicleid][vInvAmount][3],
        VehicleInfo[vehicleid][vInvList][4], VehicleInfo[vehicleid][vInvAmount][4],
        VehicleInfo[vehicleid][vInvList][5], VehicleInfo[vehicleid][vInvAmount][5],
        VehicleInfo[vehicleid][vInvList][6], VehicleInfo[vehicleid][vInvAmount][6],
        VehicleInfo[vehicleid][vInvList][7], VehicleInfo[vehicleid][vInvAmount][7],
        VehicleInfo[vehicleid][vInvList][8], VehicleInfo[vehicleid][vInvAmount][8],
        VehicleInfo[vehicleid][vInvList][9], VehicleInfo[vehicleid][vInvAmount][9],
        VehicleInfo[vehicleid][vInvList][10], VehicleInfo[vehicleid][vInvAmount][10],
        VehicleInfo[vehicleid][vInvList][11], VehicleInfo[vehicleid][vInvAmount][11],
        VehicleInfo[vehicleid][vInvList][12], VehicleInfo[vehicleid][vInvAmount][12],
        VehicleInfo[vehicleid][vInvList][13], VehicleInfo[vehicleid][vInvAmount][13],
        VehicleInfo[vehicleid][vInvList][14], VehicleInfo[vehicleid][vInvAmount][14],
        VehicleInfo[vehicleid][vInvList][15], VehicleInfo[vehicleid][vInvAmount][15],
        VehicleInfo[vehicleid][vInvList][16], VehicleInfo[vehicleid][vInvAmount][16],
        VehicleInfo[vehicleid][vInvList][17], VehicleInfo[vehicleid][vInvAmount][17],
        VehicleInfo[vehicleid][vInvList][18], VehicleInfo[vehicleid][vInvAmount][18],
        VehicleInfo[vehicleid][vInvList][19], VehicleInfo[vehicleid][vInvAmount][19],
        VehicleInfo[vehicleid][vInvList][20], VehicleInfo[vehicleid][vInvAmount][20],
        VehicleInfo[vehicleid][vInvList][21], VehicleInfo[vehicleid][vInvAmount][21],
        VehicleInfo[vehicleid][vInvList][22], VehicleInfo[vehicleid][vInvAmount][22],
        VehicleInfo[vehicleid][vInvList][23], VehicleInfo[vehicleid][vInvAmount][23],
        VehicleInfo[vehicleid][vInvList][24], VehicleInfo[vehicleid][vInvAmount][24],
        VehicleInfo[vehicleid][vInvList][25], VehicleInfo[vehicleid][vInvAmount][25],
        VehicleInfo[vehicleid][vInvList][26], VehicleInfo[vehicleid][vInvAmount][26],
        VehicleInfo[vehicleid][vInvList][27], VehicleInfo[vehicleid][vInvAmount][27],
        VehicleInfo[vehicleid][vInvList][28], VehicleInfo[vehicleid][vInvAmount][28],
        VehicleInfo[vehicleid][vInvList][29], VehicleInfo[vehicleid][vInvAmount][29],
        VehicleInfo[vehicleid][vInvList][30], VehicleInfo[vehicleid][vInvAmount][30],
        VehicleInfo[vehicleid][vInvList][31], VehicleInfo[vehicleid][vInvAmount][31],
        VehicleInfo[vehicleid][vInvList][32], VehicleInfo[vehicleid][vInvAmount][32],
        VehicleInfo[vehicleid][vInvList][33], VehicleInfo[vehicleid][vInvAmount][33],
        VehicleInfo[vehicleid][vInvList][34], VehicleInfo[vehicleid][vInvAmount][34],
        VehicleInfo[vehicleid][vInvList][35], VehicleInfo[vehicleid][vInvAmount][35],
        VehicleInfo[vehicleid][vInvList][36], VehicleInfo[vehicleid][vInvAmount][36]);

        cache_get_value(j, "string_extra", queryx, 500);
        sscanf(queryx, "p<|>dddddddddddddddddddddddddddddddddddd",
        VehicleInfo[vehicleid][vInvExtra][0], VehicleInfo[vehicleid][vInvExtra][1],
        VehicleInfo[vehicleid][vInvExtra][2], VehicleInfo[vehicleid][vInvExtra][3],
        VehicleInfo[vehicleid][vInvExtra][4], VehicleInfo[vehicleid][vInvExtra][5],
        VehicleInfo[vehicleid][vInvExtra][6], VehicleInfo[vehicleid][vInvExtra][7],
        VehicleInfo[vehicleid][vInvExtra][8], VehicleInfo[vehicleid][vInvExtra][9],
        VehicleInfo[vehicleid][vInvExtra][10], VehicleInfo[vehicleid][vInvExtra][11],
        VehicleInfo[vehicleid][vInvExtra][12], VehicleInfo[vehicleid][vInvExtra][13],
        VehicleInfo[vehicleid][vInvExtra][14], VehicleInfo[vehicleid][vInvExtra][15],
        VehicleInfo[vehicleid][vInvExtra][16], VehicleInfo[vehicleid][vInvExtra][17],
        VehicleInfo[vehicleid][vInvExtra][18], VehicleInfo[vehicleid][vInvExtra][19],
        VehicleInfo[vehicleid][vInvExtra][20], VehicleInfo[vehicleid][vInvExtra][21],
        VehicleInfo[vehicleid][vInvExtra][22], VehicleInfo[vehicleid][vInvExtra][23],
        VehicleInfo[vehicleid][vInvExtra][24], VehicleInfo[vehicleid][vInvExtra][25],
        VehicleInfo[vehicleid][vInvExtra][26], VehicleInfo[vehicleid][vInvExtra][27],
        VehicleInfo[vehicleid][vInvExtra][28], VehicleInfo[vehicleid][vInvExtra][29],
        VehicleInfo[vehicleid][vInvExtra][30], VehicleInfo[vehicleid][vInvExtra][31],
        VehicleInfo[vehicleid][vInvExtra][32], VehicleInfo[vehicleid][vInvExtra][33],
        VehicleInfo[vehicleid][vInvExtra][34], VehicleInfo[vehicleid][vInvExtra][35],
        VehicleInfo[vehicleid][vInvExtra][36]);
        
        VehicleInfo[vehicleid][vKiralayan] = -1;
        VehicleInfo[vehicleid][vKiralik] = -1;

        cache_get_value(j, "tuning", queryx, 64);
        sscanf(queryx, "p<|>dddddddddddddd",
        VehicleInfo[vehicleid][vTuning][0], VehicleInfo[vehicleid][vTuning][1], VehicleInfo[vehicleid][vTuning][2],
        VehicleInfo[vehicleid][vTuning][3], VehicleInfo[vehicleid][vTuning][4], VehicleInfo[vehicleid][vTuning][5],
        VehicleInfo[vehicleid][vTuning][6], VehicleInfo[vehicleid][vTuning][7], VehicleInfo[vehicleid][vTuning][8],
        VehicleInfo[vehicleid][vTuning][9], VehicleInfo[vehicleid][vTuning][10], VehicleInfo[vehicleid][vTuning][11],
        VehicleInfo[vehicleid][vTuning][12], VehicleInfo[vehicleid][vTuning][13]);
        //VehicleInfo[vehicleid][vRehine][0] = -1;
        //VehicleInfo[vehicleid][vRehine][1] = -1;
        //VehicleInfo[vehicleid][vRehine][2] = -1;
        VehicleInfo[vehicleid][vCeset][0] = -1;
        VehicleInfo[vehicleid][vCeset][1] = -1;
        VehicleInfo[vehicleid][vCeset][2] = -1;
        VehicleInfo[vehicleid][vSandik] = -1;
        if(VehicleInfo[vehicleid][vJob] != -1 && VehicleInfo[vehicleid][vFaction] != INVALID_VEHICLE_ID) VehicleInfo[vehicleid][vJob] = -1;

        if(Faction_GetType(VehicleInfo[vehicleid][vFaction]) == POLICE)
        {
            VehicleInfo[vehicleid][vScript] = CreateVehicle(VehicleInfo[vehicleid][vModel], VehicleInfo[vehicleid][vSpawnPosX], VehicleInfo[vehicleid][vSpawnPosY], VehicleInfo[vehicleid][vSpawnPosZ], VehicleInfo[vehicleid][vSpawnPosA], VehicleInfo[vehicleid][vFirstColor], VehicleInfo[vehicleid][vSecondColor], -1, 1);
        }
        else if(Faction_GetType(VehicleInfo[vehicleid][vFaction]) == MEDICAL)
        {
            VehicleInfo[vehicleid][vScript] = CreateVehicle(VehicleInfo[vehicleid][vModel], VehicleInfo[vehicleid][vSpawnPosX], VehicleInfo[vehicleid][vSpawnPosY], VehicleInfo[vehicleid][vSpawnPosZ], VehicleInfo[vehicleid][vSpawnPosA], VehicleInfo[vehicleid][vFirstColor], VehicleInfo[vehicleid][vSecondColor], -1, 1);
        }
        else VehicleInfo[vehicleid][vScript] = CreateVehicle(VehicleInfo[vehicleid][vModel], VehicleInfo[vehicleid][vSpawnPosX], VehicleInfo[vehicleid][vSpawnPosY], VehicleInfo[vehicleid][vSpawnPosZ], VehicleInfo[vehicleid][vSpawnPosA], VehicleInfo[vehicleid][vFirstColor], VehicleInfo[vehicleid][vSecondColor], -1, 0);
        UpdateVehicleDamageStatus(VehicleInfo[vehicleid][vScript], VehicleInfo[vehicleid][vDamages][0], VehicleInfo[vehicleid][vDamages][1], VehicleInfo[vehicleid][vDamages][2], VehicleInfo[vehicleid][vDamages][3]);
        SetVehicleParamsEx(VehicleInfo[vehicleid][vScript], VEHICLE_PARAMS_OFF, VEHICLE_PARAMS_OFF, VEHICLE_PARAMS_OFF, VehicleInfo[vehicleid][vLocked], VEHICLE_PARAMS_OFF, VEHICLE_PARAMS_OFF, VehicleInfo[vehicleid][vObje]);
        SetVehicleParamsCarWindows(VehicleInfo[vehicleid][vScript], VEHICLE_PARAMS_ON, VEHICLE_PARAMS_ON, VEHICLE_PARAMS_ON, VehicleInfo[vehicleid][vObje]);
        Vehicle_SetPlate(VehicleInfo[vehicleid][vScript]);
        SetVehicleToRespawn(vehicleid);
        SetVehicleVirtualWorld(VehicleInfo[vehicleid][vScript], VehicleInfo[vehicleid][vWorld]);
        LinkVehicleToInterior(VehicleInfo[vehicleid][vScript], VehicleInfo[vehicleid][vInterior]);
        Tuning_SetComponents(VehicleInfo[vehicleid][vScript]);
        ChangeVehiclePaintjob(VehicleInfo[vehicleid][vScript], VehicleInfo[vehicleid][vPaintjob]);

        mysql_format(ourConnection, queryx, sizeof(queryx), "UPDATE vehicles SET spawned = 1 WHERE id = '%d'", VehicleInfo[vehicleid][vID]);
        mysql_tquery(ourConnection, queryx);

        Iter_Add(Vehicles, vehicleid);

        for(new i; i < 4; i++) {
            AracYolcu[vehicleid][i] = -1;
            AracKoltuk[vehicleid][i] = 0;
        }
        AC_SetVehicleHealth(vehicleid, VehicleInfo[vehicleid][vHealth]);
        VehicleInfo[vehicleid][vSpawnExpires] = gettime() + (60 * 360);
        PlayerInfo[playerid][AracSpawn] = false;
        
        if(!VehicleInfo[vehicleid][vKoruma])
        {
            if(InSafeZoneVeh(vehicleid))
            {
                VehicleInfo[vehicleid][vKoruma] = 1;
            }
            else
            {
                VehicleInfo[vehicleid][vKoruma] = 0;
            }
        }
        
        if(VehicleInfo[vehicleid][vIAKS] > 0)
        {
            new kai = Iter_Free(KiralikAraclar);
            if(kai < MAX_KIRALIK_ARAC) Iter_Add(KiralikAraclar, kai);

            KiralikArac[kai][kaID] = vehicleid;
            KiralikArac[kai][kaSQLID] = VehicleInfo[vehicleid][vID];

            KiralikArac[kai][kaKiralandi] = false;
            KiralikArac[kai][kaKiralayan] = -1;
        }
    }
    if(VehicleInfo[vehicleid][vCallSign] == true)
    {
        DestroyDynamic3DTextLabelEx(VehicleInfo[vehicleid][vSignText]);
        VehicleInfo[vehicleid][vCallSign] = false;
    }
    
    if(IsPlayerConnected(playerid))
        printf("%s, %s tarihinde arac spawn etti. (%d - %d)", ReturnRoleplayName(playerid), ReturnDate(), VehicleInfo[vehicleid][vModel], VehicleInfo[vehicleid][vID]);

    return 1;
}

SaveVehicleElements(id)
{
    if(VehicleInfo[id][vTemporary] || DevletAraci(id) || VehicleInfo[id][vJob] != -1)
        return 1;

    mysql_format(ourConnection, queryx, sizeof(queryx), "UPDATE vehicles SET kmh = '%d', fuel = '%d', calinma = '%d', vergi = '%d', koruma = '%d', hurda = '%d', sak = '%d', sigortaseviyesi = '%d' WHERE id = '%d'",
    VehicleInfo[id][vKMGosteren],
    VehicleInfo[id][vFuel],
    VehicleInfo[id][vHirsizlik],
    VehicleInfo[id][vVergi],
    VehicleInfo[id][vKoruma],
    VehicleInfo[id][vHurda],
    VehicleInfo[id][vIAKS],
    VehicleInfo[id][vSigortaSeviyesi],
    VehicleInfo[id][vID]);

    mysql_tquery(ourConnection, queryx);
    return 1;
}

SaveVehicle(id)
{
    new inventory_string[512];
    new inventory_extra_string[128];
    new tuning_string[64];

    // new query[1024];

    mysql_format(ourConnection, queryx, sizeof(queryx), "UPDATE vehicles SET model = '%d', door_level = '%d', alarm = '%d', job = '%d', interior = '%d', world = '%d', color0 = '%d', color1 = '%d', pos_x = '%f', pos_y = '%f', pos_z = '%f', pos_a = '%f', faction = '%d', impounded = '%d', max_health = '%f'",
    VehicleInfo[id][vModel],
    VehicleInfo[id][vDoorLevel],
    VehicleInfo[id][vAlarm],
    VehicleInfo[id][vJob],
    VehicleInfo[id][vInterior],
    VehicleInfo[id][vWorld],
    VehicleInfo[id][vFirstColor],
    VehicleInfo[id][vSecondColor],
    VehicleInfo[id][vSpawnPosX],
    VehicleInfo[id][vSpawnPosY],
    VehicleInfo[id][vSpawnPosZ],
    VehicleInfo[id][vSpawnPosA],
    VehicleInfo[id][vFaction],
    VehicleInfo[id][vImpounded],
    VehicleInfo[id][vMaxHealth]);

    if(!DevletAraci(id) && VehicleInfo[id][vJob] == -1)
    {
        for(new j; j < Trunk_GetSlot(id); j++)
        {
            format(inventory_string, sizeof(inventory_string), "%s%d|%d|", inventory_string, VehicleInfo[id][vInvList][j], VehicleInfo[id][vInvAmount][j]);
            format(inventory_extra_string, sizeof(inventory_extra_string), "%s%d|", inventory_extra_string, VehicleInfo[id][vInvExtra][j]);
        }

        for(new j; j < MAX_TUNING_COMPONENTS; j++)
            format(tuning_string, sizeof(tuning_string), "%s%d|", tuning_string, VehicleInfo[id][vTuning][j]);

        GetVehicleHealth(id, VehicleInfo[id][vHealth]);
        GetVehicleDamageStatus(id, VehicleInfo[id][vDamages][0], VehicleInfo[id][vDamages][1], VehicleInfo[id][vDamages][2], VehicleInfo[id][vDamages][3]);

        mysql_format(ourConnection, queryx, sizeof(queryx), "%s, string_extra = '%e', string_inventory = '%e', tuning = '%e', unregistered = '%d', paintjob = '%d', components = '%d', battery_health = '%f', door_health = '%f', engine_health = '%f', owner_id = '%d', panels = '%d', doors = '%d', lights = '%d', tires = '%d', health = '%f', max_health = '%f', locked = '%d', price = '%d', fuel = '%d', kmh = '%d', calinma = '%d', vergi = '%d', koruma = '%d', hurda = '%d'",
        queryx, inventory_extra_string, inventory_string, tuning_string,
        VehicleInfo[id][vUnregistered],
        VehicleInfo[id][vPaintjob],
        VehicleInfo[id][vComponents],
        VehicleInfo[id][vBatteryHealth],
        VehicleInfo[id][vDoorHealth],
        VehicleInfo[id][vEngineHealth],
        VehicleInfo[id][vOwner],
        VehicleInfo[id][vDamages][0],
        VehicleInfo[id][vDamages][1],
        VehicleInfo[id][vDamages][2],
        VehicleInfo[id][vDamages][3],
        VehicleInfo[id][vHealth],
        VehicleInfo[id][vMaxHealth],
        VehicleInfo[id][vLocked],
        VehicleInfo[id][vPrice],
        VehicleInfo[id][vFuel],
        VehicleInfo[id][vKMGosteren],
        VehicleInfo[id][vHirsizlik],
        VehicleInfo[id][vVergi],
        VehicleInfo[id][vKoruma],
        VehicleInfo[id][vHurda]);
    }

    mysql_format(ourConnection, queryx, sizeof(queryx), "%s, sak = '%d', sigortaseviyesi = '%d' WHERE id = '%d'", queryx, VehicleInfo[id][vIAKS], VehicleInfo[id][vSigortaSeviyesi], VehicleInfo[id][vID]);
    mysql_tquery(ourConnection, queryx);
    return 1;
}

LoadIllegalIndustries(); public LoadIllegalIndustries()
{
    static rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);

    if(!rows)return 1;

    new string[256];

    for(new i; i < rows; i++)
    {
        for(new j; j < 29; j++) IllegalIndustryInfo[i][iIngredients][j] = -1;

        IllegalIndustryInfo[i][iExists] = 1;

        cache_get_value_int(i, "id", IllegalIndustryInfo[i][iID]);
        cache_get_value_float(i, "pos_x", IllegalIndustryInfo[i][iPosX]);
        cache_get_value_float(i, "pos_y", IllegalIndustryInfo[i][iPosY]);
        cache_get_value_float(i, "pos_z", IllegalIndustryInfo[i][iPosZ]);
        cache_get_value_int(i, "refresh_time", IllegalIndustryInfo[i][iRefreshTime]);
        cache_get_value_int(i, "refresh_amount", IllegalIndustryInfo[i][iRefreshAmount]);

        cache_get_value(i, "ingredients", string, 256);
        sscanf(string, "p<|>dddddddddddddddddddddddddddd",
        IllegalIndustryInfo[i][iIngredients][0], IllegalIndustryInfo[i][iIngredients][1], IllegalIndustryInfo[i][iIngredients][2],
        IllegalIndustryInfo[i][iIngredients][3], IllegalIndustryInfo[i][iIngredients][4], IllegalIndustryInfo[i][iIngredients][5],
        IllegalIndustryInfo[i][iIngredients][6], IllegalIndustryInfo[i][iIngredients][7], IllegalIndustryInfo[i][iIngredients][8],
        IllegalIndustryInfo[i][iIngredients][9], IllegalIndustryInfo[i][iIngredients][10], IllegalIndustryInfo[i][iIngredients][11],
        IllegalIndustryInfo[i][iIngredients][12], IllegalIndustryInfo[i][iIngredients][13], IllegalIndustryInfo[i][iIngredients][14],
        IllegalIndustryInfo[i][iIngredients][15], IllegalIndustryInfo[i][iIngredients][16], IllegalIndustryInfo[i][iIngredients][17],
        IllegalIndustryInfo[i][iIngredients][18], IllegalIndustryInfo[i][iIngredients][19], IllegalIndustryInfo[i][iIngredients][20],
        IllegalIndustryInfo[i][iIngredients][21], IllegalIndustryInfo[i][iIngredients][22], IllegalIndustryInfo[i][iIngredients][23],
        IllegalIndustryInfo[i][iIngredients][24], IllegalIndustryInfo[i][iIngredients][25], IllegalIndustryInfo[i][iIngredients][26],
        IllegalIndustryInfo[i][iIngredients][27]);

        cache_get_value(i, "amounts", string, 256);
        sscanf(string, "p<|>dddddddddddddddddddddddddddd",
        IllegalIndustryInfo[i][iAmounts][0], IllegalIndustryInfo[i][iAmounts][1], IllegalIndustryInfo[i][iAmounts][2],
        IllegalIndustryInfo[i][iAmounts][3], IllegalIndustryInfo[i][iAmounts][4], IllegalIndustryInfo[i][iAmounts][5],
        IllegalIndustryInfo[i][iAmounts][6], IllegalIndustryInfo[i][iAmounts][7], IllegalIndustryInfo[i][iAmounts][8],
        IllegalIndustryInfo[i][iAmounts][9], IllegalIndustryInfo[i][iAmounts][10], IllegalIndustryInfo[i][iAmounts][11],
        IllegalIndustryInfo[i][iAmounts][12], IllegalIndustryInfo[i][iAmounts][13], IllegalIndustryInfo[i][iAmounts][14],
        IllegalIndustryInfo[i][iAmounts][15], IllegalIndustryInfo[i][iAmounts][16], IllegalIndustryInfo[i][iAmounts][17],
        IllegalIndustryInfo[i][iAmounts][18], IllegalIndustryInfo[i][iAmounts][19], IllegalIndustryInfo[i][iAmounts][20],
        IllegalIndustryInfo[i][iAmounts][21], IllegalIndustryInfo[i][iAmounts][22], IllegalIndustryInfo[i][iAmounts][23],
        IllegalIndustryInfo[i][iAmounts][24], IllegalIndustryInfo[i][iAmounts][25], IllegalIndustryInfo[i][iAmounts][26],
        IllegalIndustryInfo[i][iAmounts][27]);

        cache_get_value(i, "prices", string, 256);
        sscanf(string, "p<|>dddddddddddddddddddddddddddd",
        IllegalIndustryInfo[i][iPrices][0], IllegalIndustryInfo[i][iPrices][1], IllegalIndustryInfo[i][iPrices][2],
        IllegalIndustryInfo[i][iPrices][3], IllegalIndustryInfo[i][iPrices][4], IllegalIndustryInfo[i][iPrices][5],
        IllegalIndustryInfo[i][iPrices][6], IllegalIndustryInfo[i][iPrices][7], IllegalIndustryInfo[i][iPrices][8],
        IllegalIndustryInfo[i][iPrices][9], IllegalIndustryInfo[i][iPrices][10], IllegalIndustryInfo[i][iPrices][11],
        IllegalIndustryInfo[i][iPrices][12],IllegalIndustryInfo[i][iPrices][13], IllegalIndustryInfo[i][iPrices][14],
        IllegalIndustryInfo[i][iPrices][15], IllegalIndustryInfo[i][iPrices][16], IllegalIndustryInfo[i][iPrices][17],
        IllegalIndustryInfo[i][iPrices][18], IllegalIndustryInfo[i][iPrices][19], IllegalIndustryInfo[i][iPrices][20],
        IllegalIndustryInfo[i][iPrices][21], IllegalIndustryInfo[i][iPrices][22], IllegalIndustryInfo[i][iPrices][23],
        IllegalIndustryInfo[i][iPrices][24], IllegalIndustryInfo[i][iPrices][25], IllegalIndustryInfo[i][iPrices][26],
        IllegalIndustryInfo[i][iPrices][27]);

        IllegalIndustryInfo[i][iPickup] = Pickup_Create(ELEMENT_INDUSTRY, i, 1318, 23, IllegalIndustryInfo[i][iPosX], IllegalIndustryInfo[i][iPosY], IllegalIndustryInfo[i][iPosZ]);
        IllegalIndustryInfo[i][iLabel] = CreateDynamic3DTextLabel("Sipariþ Noktasý", COLOR_WHITE, IllegalIndustryInfo[i][iPosX], IllegalIndustryInfo[i][iPosY], IllegalIndustryInfo[i][iPosZ]+1.0, 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0, -1);

        Iter_Add(IllegalIndustry, i);
    }
    print("uyusturucu evleri yuklendi+");
    return 1;
}

SaveIllegalIndustry(j)
{
    new ingredients_string[256];
    new amounts_string[256];
    new prices_string[256];

    for(new i; i < 29; i++)
        format(ingredients_string, sizeof(ingredients_string), "%s%d|", ingredients_string, IllegalIndustryInfo[j][iIngredients][i]);

    for(new i; i < 29; i++)
        format(amounts_string, sizeof(amounts_string), "%s%d|", amounts_string, IllegalIndustryInfo[j][iAmounts][i]);

    for(new i; i < 29; i++)
        format(prices_string, sizeof(prices_string), "%s%d|", prices_string, IllegalIndustryInfo[j][iPrices][i]);

    mysql_format(ourConnection, queryx, sizeof(queryx), "UPDATE illegal_industries SET pos_x = '%f', pos_y = '%f', pos_z = '%f', refresh_amount = '%d', refresh_time = '%d', ingredients = '%e', amounts = '%e', prices = '%e' WHERE id = '%d'",
    IllegalIndustryInfo[j][iPosX],
    IllegalIndustryInfo[j][iPosY],
    IllegalIndustryInfo[j][iPosZ],
    IllegalIndustryInfo[j][iRefreshAmount],
    IllegalIndustryInfo[j][iRefreshTime],
    ingredients_string,
    amounts_string,
    prices_string,
    IllegalIndustryInfo[j][iID]);

    mysql_tquery(ourConnection, queryx);

    return 1;
}

LoadLaboratories(); public LoadLaboratories()
{
    static rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);

    if(!rows)return 1;

    new string[512];

    for(new i; i < rows; i++)
    {
        LabInfo[i][lExists] = 1;
        cache_get_value_int(i, "owner_id", LabInfo[i][lOwner]);
        cache_get_value_int(i, "id", LabInfo[i][lID]);
        cache_get_value_int(i, "level", LabInfo[i][lLevel]);
        cache_get_value_float(i, "pos_x", LabInfo[i][lPosX]);
        cache_get_value_float(i, "pos_y", LabInfo[i][lPosY]);
        cache_get_value_float(i, "pos_z", LabInfo[i][lPosZ]);
        cache_get_value_int(i, "interior", LabInfo[i][lInterior]);
        cache_get_value_int(i, "world", LabInfo[i][lWorld]);
        cache_get_value_int(i, "faction", LabInfo[i][lFaction]);
        cache_get_value_int(i, "uretimsayisi", LabInfo[i][lUretimSayisi]);

        cache_get_value(i, "drugs", string, 512);
        sscanf(string, "p<|>dddddddddddd",
        LabInfo[i][lDrugs][0], LabInfo[i][lDrugs][1], LabInfo[i][lDrugs][2],
        LabInfo[i][lDrugs][3], LabInfo[i][lDrugs][4], LabInfo[i][lDrugs][5],
        LabInfo[i][lDrugs][6], LabInfo[i][lDrugs][7], LabInfo[i][lDrugs][8],
        LabInfo[i][lDrugs][9], LabInfo[i][lDrugs][10], LabInfo[i][lDrugs][11]);

        cache_get_value(i, "producing", string, 512);
        sscanf(string, "p<|>dddddddddddd",
        LabInfo[i][lProducing][0], LabInfo[i][lProducing][1], LabInfo[i][lProducing][2],
        LabInfo[i][lProducing][3], LabInfo[i][lProducing][4], LabInfo[i][lProducing][5],
        LabInfo[i][lProducing][6], LabInfo[i][lProducing][7], LabInfo[i][lProducing][8],
        LabInfo[i][lProducing][9], LabInfo[i][lProducing][10], LabInfo[i][lProducing][11]);

        cache_get_value(i, "producing_quantity", string, 512);
        sscanf(string, "p<|>dddddddddddd",
        LabInfo[i][lProducingQuantity][0], LabInfo[i][lProducingQuantity][1], LabInfo[i][lProducingQuantity][2],
        LabInfo[i][lProducingQuantity][3], LabInfo[i][lProducingQuantity][4], LabInfo[i][lProducingQuantity][5],
        LabInfo[i][lProducingQuantity][6], LabInfo[i][lProducingQuantity][7], LabInfo[i][lProducingQuantity][8],
        LabInfo[i][lProducingQuantity][9], LabInfo[i][lProducingQuantity][10], LabInfo[i][lProducingQuantity][11]);

        cache_get_value(i, "producing_quality", string, 512);
        sscanf(string, "p<|>dddddddddddd",
        LabInfo[i][lProducingQuality][0], LabInfo[i][lProducingQuality][1], LabInfo[i][lProducingQuality][2],
        LabInfo[i][lProducingQuality][3], LabInfo[i][lProducingQuality][4], LabInfo[i][lProducingQuality][5],
        LabInfo[i][lProducingQuality][6], LabInfo[i][lProducingQuality][7], LabInfo[i][lProducingQuality][8],
        LabInfo[i][lProducingQuality][9], LabInfo[i][lProducingQuality][10], LabInfo[i][lProducingQuality][11]);

        cache_get_value(i, "producing_expires", string, 512);
        sscanf(string, "p<|>dddddddddddd",
        LabInfo[i][lProducingExpires][0], LabInfo[i][lProducingExpires][1], LabInfo[i][lProducingExpires][2],
        LabInfo[i][lProducingExpires][3], LabInfo[i][lProducingExpires][4], LabInfo[i][lProducingExpires][5],
        LabInfo[i][lProducingExpires][6], LabInfo[i][lProducingExpires][7], LabInfo[i][lProducingExpires][8],
        LabInfo[i][lProducingExpires][9], LabInfo[i][lProducingExpires][10], LabInfo[i][lProducingExpires][11]);

        LabInfo[i][lPickup] = Pickup_Create(ELEMENT_LABORATORY, i, 1279, 23, LabInfo[i][lPosX], LabInfo[i][lPosY], LabInfo[i][lPosZ], LabInfo[i][lWorld], LabInfo[i][lInterior]);

        Iter_Add(Lab, i);
    }
    print("Sunucu: Laboratuvarlar yüklendi+");
    return 1;
}

SaveEU(uid)
{
    mysql_format(ourConnection, queryx, sizeof(queryx), "UPDATE plantdrugs SET time = '%d' WHERE id = '%d'", EUBilgi[uid][euTime], EUBilgi[uid][euID]);
    mysql_tquery(ourConnection, queryx);
}

SaveLab(j)
{
    new drug_string[256];
    new producing_string[256];
    new producing_quality_string[256];
    new producing_quantity_string[256];
    new producing_expires_string[512];

    // new query[2048];

    for(new i; i < 12; i++)
        format(drug_string, sizeof(drug_string), "%s%d|", drug_string, LabInfo[j][lDrugs][i]);

    for(new i; i < 12; i++)
        format(producing_string, sizeof(producing_string), "%s%d|", producing_string, LabInfo[j][lProducing][i]);

    for(new i; i < 12; i++)
        format(producing_quantity_string, sizeof(producing_quantity_string), "%s%d|", producing_quantity_string, LabInfo[j][lProducingQuantity][i]);

    for(new i; i < 12; i++)
        format(producing_quality_string, sizeof(producing_quality_string), "%s%d|", producing_quality_string, LabInfo[j][lProducingQuality][i]);

    for(new i; i < 12; i++)
        format(producing_expires_string, sizeof(producing_expires_string), "%s%d|", producing_expires_string, LabInfo[j][lProducingExpires][i]);

    mysql_format(ourConnection, queryx, sizeof(queryx), "UPDATE laboratories SET owner_id = '%d', level = '%d', pos_x = '%f', pos_y = '%f', pos_z = '%f', interior = '%d', world = '%d', faction = '%d', uretimsayisi = '%d', drugs = '%e', \
    producing = '%e', producing_quantity = '%e', producing_quality = '%e', producing_expires = '%e' WHERE id = '%d'",
    LabInfo[j][lOwner],
    LabInfo[j][lLevel],
    LabInfo[j][lPosX],
    LabInfo[j][lPosY],
    LabInfo[j][lPosZ],
    LabInfo[j][lInterior],
    LabInfo[j][lWorld],
    LabInfo[j][lFaction],
    LabInfo[j][lUretimSayisi],
    drug_string,
    producing_string,
    producing_quantity_string,
    producing_quality_string,
    producing_expires_string,
    LabInfo[j][lID]);

    mysql_tquery(ourConnection, queryx);

    return 1;
}

LoadATM(); public LoadATM()
{
    static rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);

    if(!rows)return 1;

    for(new j; j < rows; j++)
    {
        cache_get_value_int(j, "id", ATMInfo[j][atmID]);
        cache_get_value_float(j, "x", ATMInfo[j][atmX]);
        cache_get_value_float(j, "y", ATMInfo[j][atmY]);
        cache_get_value_float(j, "z", ATMInfo[j][atmZ]);
        cache_get_value_float(j, "rx", ATMInfo[j][atmRX]);
        cache_get_value_float(j, "ry", ATMInfo[j][atmRY]);
        cache_get_value_float(j, "rz", ATMInfo[j][atmRZ]);
        cache_get_value_float(j, "px", ATMInfo[j][atmPickupX]);
        cache_get_value_float(j, "py", ATMInfo[j][atmPickupY]);
        cache_get_value_float(j, "pz", ATMInfo[j][atmPickupZ]);
        cache_get_value_int(j, "vw", ATMInfo[j][atmVW]);
        cache_get_value_int(j, "interior", ATMInfo[j][atmInterior]);
        cache_get_value_int(j, "obje", ATMInfo[j][atmObjeID]);
        cache_get_value_int(j, "pobje", ATMInfo[j][atmPickupID]);
        cache_get_value_int(j, "goster", ATMInfo[j][atmObjeli]);
        ATMInfo[j][atmExists] = 1;
        ATMInfo[j][atmPickupID] = Pickup_Create(ELEMENT_ATM, j, 1274, 1, ATMInfo[j][atmPickupX], ATMInfo[j][atmPickupY], ATMInfo[j][atmPickupZ], ATMInfo[j][atmVW], ATMInfo[j][atmInterior]);
        Iter_Add(ATMler, j);
        if(ATMInfo[j][atmObjeli])
        {
            ATMInfo[j][atmObjeID] = CreateDynamicObject(19324, ATMInfo[j][atmX], ATMInfo[j][atmY], ATMInfo[j][atmZ], ATMInfo[j][atmRX], ATMInfo[j][atmRY], ATMInfo[j][atmRZ], ATMInfo[j][atmVW], ATMInfo[j][atmInterior]);
        }
    }
    print("Sunucu: Atmler yuklendi+");
    return 1;
}

atmyarat(id)
{
    // new query[800];

    mysql_format(ourConnection, queryx, sizeof(queryx), "INSERT INTO atmler (x, y, z, rx, ry, rz, px, py, pz, interior, vw, obje, pobje, goster) VALUES ('%f', '%f', '%f', '%f', '%f', '%f', '%f', '%f', '%f', '%d', '%d', '%d', '%d', '%d')",

    ATMInfo[id][atmX],
    ATMInfo[id][atmY],
    ATMInfo[id][atmZ],
    ATMInfo[id][atmRX],
    ATMInfo[id][atmRY],
    ATMInfo[id][atmRZ],
    ATMInfo[id][atmPickupX],
    ATMInfo[id][atmPickupY],
    ATMInfo[id][atmPickupZ],
    ATMInfo[id][atmInterior],
    ATMInfo[id][atmVW],
    ATMInfo[id][atmObjeID],
    ATMInfo[id][atmPickupID],
    ATMInfo[id][atmObjeli]);

    mysql_tquery(ourConnection, queryx, "OnQueryFinished", "dd", id, THREAD_CREATE_ATM);
    return 1;
}

LoadPayPhones(); public LoadPayPhones()
{
    static rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);

    if(!rows)return 1;

    for(new j; j < rows; j++)
    {
        PayPhoneInfo[j][cExists] = 1;
        cache_get_value_int(j, "id", PayPhoneInfo[j][cID]);
        cache_get_value_float(j, "pos_x", PayPhoneInfo[j][cPosX]);
        cache_get_value_float(j, "pos_y", PayPhoneInfo[j][cPosY]);
        cache_get_value_float(j, "pos_z", PayPhoneInfo[j][cPosZ]);
        cache_get_value_float(j, "rot_x", PayPhoneInfo[j][cRotX]);
        cache_get_value_float(j, "rot_y", PayPhoneInfo[j][cRotY]);
        cache_get_value_float(j, "rot_z", PayPhoneInfo[j][cRotZ]);
        cache_get_value_int(j, "number", PayPhoneInfo[j][cNumber]);
        new string[10];
        format(string, sizeof(string), "%d", PayPhoneInfo[j][cNumber]);
        PayPhoneInfo[j][KulubeLabel] = CreateDynamic3DTextLabel(string, COLOR_WHITE, PayPhoneInfo[j][cPosX], PayPhoneInfo[j][cPosY], PayPhoneInfo[j][cPosZ]+1.5, 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);
        PayPhoneInfo[j][cObject] = CreateDynamicObject(1216, PayPhoneInfo[j][cPosX], PayPhoneInfo[j][cPosY], PayPhoneInfo[j][cPosZ], PayPhoneInfo[j][cRotX], PayPhoneInfo[j][cRotY], PayPhoneInfo[j][cRotZ]);
        Iter_Add(PayPhones, j);
    }
    print("Sunucu: Telefon kulübeleri yüklendi+");
    return 1;
}

SavePayPhone(id)
{
    mysql_format(ourConnection, queryx, sizeof(queryx), "UPDATE payphones SET number = '%d', pos_x = '%f', pos_y = '%f', pos_z = '%f', rot_x = '%f', rot_y = '%f', rot_z = '%f' WHERE id = '%d'",
    PayPhoneInfo[id][cNumber],
    PayPhoneInfo[id][cPosX],
    PayPhoneInfo[id][cPosY],
    PayPhoneInfo[id][cPosZ],
    PayPhoneInfo[id][cRotX],
    PayPhoneInfo[id][cRotY],
    PayPhoneInfo[id][cRotZ],
    PayPhoneInfo[id][cID]);

    mysql_tquery(ourConnection, queryx);

    return 1;
}

LoadCompanies(); public LoadCompanies()
{
    static rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);

    if(!rows)return 1;

    new string[90];

    for(new j; j < rows; j++)
    {
        CompanyInfo[j][cValid] = 1;
        cache_get_value(j, "name", CompanyInfo[j][cName], 50);
        cache_get_value_int(j, "id", CompanyInfo[j][cReference]);
        cache_get_value_int(j, "type", CompanyInfo[j][cBuyType]);
        cache_get_value_float(j, "pos_x", CompanyInfo[j][cBuyPosX]);
        cache_get_value_float(j, "pos_y", CompanyInfo[j][cBuyPosY]);
        cache_get_value_float(j, "pos_z", CompanyInfo[j][cBuyPosZ]);
        cache_get_value_int(j, "unit", CompanyInfo[j][cUnit]);
        cache_get_value_int(j, "price", CompanyInfo[j][cPrice]);
        cache_get_value_int(j, "interior", CompanyInfo[j][cInterior]);
        cache_get_value_int(j, "world", CompanyInfo[j][cWorld]);
        cache_get_value_int(j, "stok", CompanyInfo[j][stok]);
        cache_get_value_int(j, "mstok", CompanyInfo[j][mstok]);
        cache_get_value_int(j, "sirketid", CompanyInfo[j][sirketid]);
        cache_get_value_int(j, "aliyor", CompanyInfo[j][aliyor]);
        cache_get_value_int(j, "satiyor", CompanyInfo[j][satiyor]);

        format(string, sizeof(string), "[{FFFF00}%s{FFFFFF}]\n$%d birim / kasa\nStok: %d/%d", CompanyInfo[j][cName], CompanyInfo[j][cPrice], CompanyInfo[j][stok], CompanyInfo[j][mstok]);
        if(CompanyInfo[j][cBuyType] > KIYAFET && CompanyInfo[j][cBuyType] != YAKIT && CompanyInfo[j][cBuyType] != MOBILYA)format(string, sizeof(string), "%s\n%d birim / kasa", string, CompanyInfo[j][cUnit]);//, CompanyInfo[j][stok], CompanyInfo[j][mstok]);

        CompanyInfo[j][cText] = CreateDynamic3DTextLabel(string, COLOR_WHITE, CompanyInfo[j][cBuyPosX], CompanyInfo[j][cBuyPosY], CompanyInfo[j][cBuyPosZ] + 1.0, 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, CompanyInfo[j][cWorld], CompanyInfo[j][cInterior], -1);
        CompanyInfo[j][cPoint] = Pickup_Create(ELEMENT_COMPANY, j, 1318, 23, CompanyInfo[j][cBuyPosX], CompanyInfo[j][cBuyPosY], CompanyInfo[j][cBuyPosZ], CompanyInfo[j][cWorld], CompanyInfo[j][cInterior]);

        Iter_Add(Companies, j);
    }
    print("Sunucu: Sirketler yuklendi+.");
    return 1;
}

SaveCompany(id)
{
    mysql_format(ourConnection, queryx, sizeof(queryx), "UPDATE companies SET name = '%e', pos_x = '%f', pos_y = '%f', pos_z = '%f', unit = '%d', price = '%d', type = '%d', interior = '%d', world = '%d', stok = '%d', mstok = '%d', sirketid = '%d', aliyor = '%d', satiyor = '%d' WHERE id = '%d'",
    CompanyInfo[id][cName],
    CompanyInfo[id][cBuyPosX],
    CompanyInfo[id][cBuyPosY],
    CompanyInfo[id][cBuyPosZ],
    CompanyInfo[id][cUnit],
    CompanyInfo[id][cPrice],
    CompanyInfo[id][cBuyType],
    CompanyInfo[id][cInterior],
    CompanyInfo[id][cWorld],
    CompanyInfo[id][stok],
    CompanyInfo[id][mstok],
    CompanyInfo[id][sirketid],
    CompanyInfo[id][aliyor],
    CompanyInfo[id][satiyor],
    CompanyInfo[id][cReference]);

    mysql_tquery(ourConnection, queryx);

    return 1;
}

LoadItems(); public LoadItems()
{
    static rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);

    if(!rows)return 1;

    for(new j; j < rows; j++)
    {
        new id;
        cache_get_value_int(j, "enum_id", id);
    }
    print("esyalar yuklendi+");
    return 1;
}

LoadTeleports(); public LoadTeleports()
{
    static rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);

    if(!rows)return 1;

    for(new j; j < rows; j++)
    {
        cache_get_value_int(j, "id", TeleportInfo[j][teleportID]);
        cache_get_value_int(j, "pos_world", TeleportInfo[j][teleportWorld]);
        cache_get_value_int(j, "goto_world", TeleportInfo[j][teleportGWorld]);
        cache_get_value_int(j, "pos_interior", TeleportInfo[j][teleportInterior]);
        cache_get_value_int(j, "goto_interior", TeleportInfo[j][teleportGInterior]);
        cache_get_value_float(j, "goto_x", TeleportInfo[j][teleportGX]);
        cache_get_value_float(j, "goto_y", TeleportInfo[j][teleportGY]);
        cache_get_value_float(j, "goto_z", TeleportInfo[j][teleportGZ]);
        cache_get_value_float(j, "goto_a", TeleportInfo[j][teleportGA]);
        cache_get_value_float(j, "pos_x", TeleportInfo[j][teleportX]);
        cache_get_value_float(j, "pos_y", TeleportInfo[j][teleportY]);
        cache_get_value_float(j, "pos_z",TeleportInfo[j][teleportZ]);
        cache_get_value_float(j, "pos_a", TeleportInfo[j][teleportA]);
        cache_get_value_int(j, "faction_id", TeleportInfo[j][teleportFaction]);
        cache_get_value_int(j, "sahip", TeleportInfo[j][tSahip]);
        cache_get_value_int(j, "kilit", TeleportInfo[j][tKilitli]);
        cache_get_value(j, "sifre", TeleportInfo[j][tSifre], 8);
        TeleportInfo[j][tExists] = 1;

        TeleportInfo[j][teleportPickup] = Pickup_Create(ELEMENT_TELEPORT, j, 1239, 23, TeleportInfo[j][teleportX], TeleportInfo[j][teleportY], TeleportInfo[j][teleportZ], TeleportInfo[j][teleportWorld], TeleportInfo[j][teleportInterior]);
        TeleportInfo[j][teleportGPickup] = Pickup_Create(ELEMENT_TELEPORT, j, 1239, 23, TeleportInfo[j][teleportGX], TeleportInfo[j][teleportGY], TeleportInfo[j][teleportGZ], TeleportInfo[j][teleportGWorld], TeleportInfo[j][teleportGInterior]);

        Iter_Add(Teleports, j);
    }
    print("Sunucu: Teleport noktalari yüklendi+");
    return 1;
}

LoadCimici(); public LoadCimici()
{
    static rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);

    if(!rows)return 1;

    for(new j; j < rows; j++)
    {
        cache_get_value_int(j, "id", CimiceInfo[j][cID]);
        cache_get_value_int(j, "type", CimiceInfo[j][cType]);
        cache_get_value_int(j, "owner_id", CimiceInfo[j][cOwner]);
        cache_get_value_int(j, "subject_id", CimiceInfo[j][cSubject]);
        cache_get_value_int(j, "private", CimiceInfo[j][cPrivate]);
        cache_get_value_int(j, "expires", CimiceInfo[j][cExpires]);
        cache_get_value_float(j, "pos_x", CimiceInfo[j][cPos][0]);
        cache_get_value_float(j, "pos_y", CimiceInfo[j][cPos][1]);
        cache_get_value_float(j, "pos_z", CimiceInfo[j][cPos][2]);
        cache_get_value_int(j, "enabled", CimiceInfo[j][cEnabled]);
        cache_get_value_int(j, "interior", CimiceInfo[j][cInterior]);
        cache_get_value_int(j, "vw", CimiceInfo[j][cVirtualWorld]);

        Iter_Add(Cimici, j);
    }
    print("Sunucu: Böcekler yüklendi+");
    return 1;
}

SaveCimice(id)
{
    mysql_format(ourConnection, queryx, sizeof(queryx), "UPDATE surveillance_bugs SET private = '%d', expires = '%d', pos_x = '%f', pos_y = '%f', pos_z = '%f', enabled = '%d' WHERE id = '%d'",
    CimiceInfo[id][cPrivate],
    CimiceInfo[id][cExpires],
    CimiceInfo[id][cPos][0],
    CimiceInfo[id][cPos][1],
    CimiceInfo[id][cPos][2],
    CimiceInfo[id][cEnabled],
    CimiceInfo[id][cID]);

    mysql_tquery(ourConnection, queryx);

    return 1;
}

LoadGames(); public LoadGames()
{
    static rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);

    if(!rows)return 1;

    new string[200];

    for(new i; i < rows; i++)
    {
        GameInfo[i][gameExists] = 1;
        cache_get_value_int(i, "id", GameInfo[i][gameID]);
        cache_get_value_float(i, "x", GameInfo[i][gameX]);
        cache_get_value_float(i, "y", GameInfo[i][gameY]);
        cache_get_value_float(i, "z", GameInfo[i][gameZ]);
        cache_get_value_int(i, "world", GameInfo[i][gameWorld]);
        cache_get_value_int(i, "interior", GameInfo[i][gameInterior]);
        cache_get_value_int(i, "type", GameInfo[i][gameType]);

        GameInfo[i][gameArea] = CreateDynamicSphere(GameInfo[i][gameX], GameInfo[i][gameY], GameInfo[i][gameZ], 1.5, GameInfo[i][gameWorld], GameInfo[i][gameInterior]);

        switch(GameInfo[i][gameType])
        {
            case 0: GameInfo[i][gameText] = CreateDynamic3DTextLabel("{33AA33}RULET\n{c6c6c6}/casino oyna - /casino durdur", COLOR_WHITE, GameInfo[i][gameX], GameInfo[i][gameY], GameInfo[i][gameZ], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, GameInfo[i][gameWorld], GameInfo[i][gameInterior]);
            case 1:
            {
                format(string, 200, "{33AA33}SLOT MAKÝNESÝ ($%d)\n{c6c6c6}/casino cevir", SunucuBilgi[CasinoCevir]);
                GameInfo[i][gameText] = CreateDynamic3DTextLabel(string, COLOR_WHITE, GameInfo[i][gameX], GameInfo[i][gameY], GameInfo[i][gameZ], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, GameInfo[i][gameWorld], GameInfo[i][gameInterior]);
            }
        }

        Iter_Add(Games, i);
    }
    print("Sunucu: Loadgames yuklendi.");
    return 1;
}

LoadFurnitures(); public LoadFurnitures()
{
    static rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);

    if(!rows) return 1;
    new model_id;
    new Float:x, Float:y, Float:z;
    new Float:rx, Float:ry, Float:rz;
    new sz_object;
    new property_world;
    new property_interior;
    new esyaid;
    new texturelar[12][124], txdname[64], texturename[64], modelid;
    new count;

    for(new j; j < rows; j++)
    {
        cache_get_value_int(j, "model", model_id);
        cache_get_value_float(j, "pos_x", x);
        cache_get_value_float(j, "pos_y", y);
        cache_get_value_float(j, "pos_z", z);
        cache_get_value_float(j, "rot_x", rx);
        cache_get_value_float(j, "rot_y", ry);
        cache_get_value_float(j, "rot_z", rz);
        cache_get_value_int(j, "world", property_world);
        cache_get_value_int(j, "interior", property_interior);

        cache_get_value_int(j, "id", esyaid);

        sz_object = CreateDynamicObject(model_id, x, y, z, rx, ry, rz, property_world, property_interior);
        cache_get_value(j, "name", g_obj[co_name], 100);
        cache_get_value_int(j, "id", g_obj[co_database_id]);
        cache_get_value_int(j, "price", g_obj[co_price]);
        Streamer_SetArrayData(STREAMER_TYPE_OBJECT, sz_object, E_STREAMER_EXTRA_ID, g_obj, siz_g_obj);

        mysql_format(ourConnection, queryx, sizeof(queryx), "UPDATE furnitures SET object_id = '%d' WHERE id = '%d' AND world = '%d'", sz_object, g_obj[co_database_id], property_world);
        mysql_tquery(ourConnection, queryx);

        cache_get_value(j, "texture0", texturelar[0], 124);
        cache_get_value(j, "texture1", texturelar[1], 124);
        cache_get_value(j, "texture2", texturelar[2], 124);
        cache_get_value(j, "texture3", texturelar[3], 124);
        cache_get_value(j, "texture4", texturelar[4], 124);
        cache_get_value(j, "texture5", texturelar[5], 124);
        cache_get_value(j, "texture6", texturelar[6], 124);
        cache_get_value(j, "texture7", texturelar[7], 124);
        cache_get_value(j, "texture8", texturelar[8], 124);
        cache_get_value(j, "texture9", texturelar[9], 124);
        cache_get_value(j, "texture10", texturelar[10], 124);
        cache_get_value(j, "texture11", texturelar[11], 124);
        for(new i; i < 12; i++)
        {
            sscanf(texturelar[i], "p<|>ds[50]s[50]", modelid, txdname, texturename);
            if(modelid != 0) SetDynamicObjectMaterial(sz_object, i, modelid, txdname, texturename, 0);
        }
        count += 1;
    }
    mysql_format(ourConnection, queryx, sizeof(queryx), "UPDATE loaded_furnitures SET objesayisi = '%d', tarih = '%s' WHERE world = '%d'", count, ReturnDate(), property_world);
    mysql_tquery(ourConnection, queryx);
    printf("%d nolu sanal dunyaya ait mobilyalar yuklendi. [%s]", property_world, ReturnDate());
    return 1;
}

LoadFrequences(); public LoadFrequences()
{
    static rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);

    for(new i; i < MAX_FREQUENCES; i++) FrequenceInfo[i][rFaction] = -1;

    if(!rows)return 1;

    new channel;

    for(new j; j < rows; j++)
    {
        cache_get_value_int(j, "channel", channel);

        cache_get_value(j, "password", FrequenceInfo[channel][rPassword], 32);
        cache_get_value_int(j, "faction_id", FrequenceInfo[channel][rFaction]);
        cache_get_value_int(j, "owner_id", FrequenceInfo[channel][rOwner]);
        cache_get_value_int(j, "id", FrequenceInfo[channel][rID]);
        //cache_get_value_int(j, "hour", FrequenceInfo[channel][rHour]);

        FrequenceInfo[channel][rExists] = 1;
    }
    print("Sunucu: Frekanslar yüklendi+");
    return 1;
}

LoadGraffitis(); public LoadGraffitis()
{
    static rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);

    if(!rows)return 1;

    for(new j; j < rows; j++)
    {
        cache_get_value(j, "text", GraffitoInfo[j][gText], 128);
        cache_get_value(j, "font", GraffitoInfo[j][gFont], 30);

        cache_get_value_int(j, "id", GraffitoInfo[j][gID]);
        cache_get_value_int(j, "size", GraffitoInfo[j][gSize]);

        cache_get_value_float(j, "x", GraffitoInfo[j][gX]);
        cache_get_value_float(j, "y", GraffitoInfo[j][gY]);
        cache_get_value_float(j, "z", GraffitoInfo[j][gZ]);

        cache_get_value_float(j, "r_x", GraffitoInfo[j][gRX]);
        cache_get_value_float(j, "r_y", GraffitoInfo[j][gRY]);
        cache_get_value_float(j, "r_z", GraffitoInfo[j][gRZ]);

        cache_get_value_int(j, "interior", GraffitoInfo[j][gINT]);
        cache_get_value_int(j, "virtualworld", GraffitoInfo[j][gVW]);

        ReplaceText(GraffitoInfo[j][gText], "#c", "\n");
        GraffitoInfo[j][gObject] = CreateDynamicObject(19482, GraffitoInfo[j][gX], GraffitoInfo[j][gY], GraffitoInfo[j][gZ], GraffitoInfo[j][gRX], GraffitoInfo[j][gRY], GraffitoInfo[j][gRZ], GraffitoInfo[j][gINT], GraffitoInfo[j][gVW]);
        SetDynamicObjectMaterialText(GraffitoInfo[j][gObject], 0, GraffitoInfo[j][gText], OBJECT_MATERIAL_SIZE_256x256, GraffitoInfo[j][gFont], GraffitoInfo[j][gSize], 0, 0xFFFFFFFF, 0, 1);

        GraffitoInfo[j][gExists] = 1;

        Iter_Add(Graffitis, j);
    }
    print("Grafitileri yukle");
    return 1;
}

LoadDealers(); public LoadDealers()
{
    static rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);

    if(!rows)return 1;

    // new query[90];

    for(new j; j < rows; j++)
    {
        DealerInfo[j][dExists] = 1;
        cache_get_value(j, "name", DealerInfo[j][dName], 64);
        cache_get_value_int(j, "id", DealerInfo[j][dID]);
        cache_get_value_float(j, "pos_x", DealerInfo[j][dPosX]);
        cache_get_value_float(j, "pos_y", DealerInfo[j][dPosY]);
        cache_get_value_float(j, "pos_z", DealerInfo[j][dPosZ]);
        cache_get_value_float(j, "veh_x", DealerInfo[j][dVehX]);
        cache_get_value_float(j, "veh_y", DealerInfo[j][dVehY]);
        cache_get_value_float(j, "veh_z", DealerInfo[j][dVehZ]);

        DealerInfo[j][dPickup] = Pickup_Create(ELEMENT_DEALER, j, 1239, 23, DealerInfo[j][dPosX], DealerInfo[j][dPosY], DealerInfo[j][dPosZ], 0);
        DealerInfo[j][dLabel] = CreateDynamic3DTextLabel(DealerInfo[j][dName], COLOR_WHITE, DealerInfo[j][dPosX], DealerInfo[j][dPosY], DealerInfo[j][dPosZ]+0.4, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0, -1);

        mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT * FROM dealer_vehicles WHERE dealer_id = '%d'", DealerInfo[j][dID]);
        mysql_tquery(ourConnection, queryx, "OnQueryFinished", "dd", j, THREAD_LOAD_SELLCARS);

        Iter_Add(Dealers, j);
    }
    print("Sunucu: Galeriler yüklendi+");
    return 1;
}

SaveDealer(id)
{
    mysql_format(ourConnection, queryx, sizeof(queryx), "UPDATE dealers SET name = '%e', pos_x = '%f', pos_y = '%f', pos_z = '%f', veh_x = '%f', veh_y = '%f', veh_z = '%f' WHERE id = '%d'",
    DealerInfo[id][dName],
    DealerInfo[id][dPosX],
    DealerInfo[id][dPosY],
    DealerInfo[id][dPosZ],
    DealerInfo[id][dVehX],
    DealerInfo[id][dVehY],
    DealerInfo[id][dVehZ],
    DealerInfo[id][dID]);

    mysql_tquery(ourConnection, queryx);

    return 1;
}

SaveDealerVehicle(id, slot)
{
    if(DealerInfo[id][dModel][slot] > 0 && DealerInfo[id][dPrice][slot] > 0)
    {
        mysql_format(ourConnection, queryx, sizeof(queryx), "UPDATE dealer_vehicles SET vehicle_model = '%d', vehicle_price = '%d' WHERE dealer_id = '%d' AND id = '%d'",
        DealerInfo[id][dModel][slot],
        DealerInfo[id][dPrice][slot],
        DealerInfo[id][dID],
        DealerInfo[id][dVehiclesID][slot]);

        mysql_tquery(ourConnection, queryx);
    }

    return 1;
}

//Dialogs

Dialog:DialogBalikYe(playerid, response, listitem, inputtext[]) {
    if(response) {
        new kamp = GetPVarInt(playerid, "BalikYeKamp");
        DeletePVar(playerid, "BalikYeKamp");
        if(!KampInfo[kamp][kExists]) return HataMesaji(playerid, "Kamp ateþi silinmiþ.");
        if(KampInfo[kamp][kBalik][listitem] == -1 || KampInfo[kamp][kBalikPisti][listitem] == 0) return HataMesaji(playerid, "Hazýr olmayan bir balýk seçtiniz.");
        PlayerAME(playerid, "kamp ateþinden bir balýk yer.");
        SunucuMesaji(playerid, "Kamp ateþinden bir %s yedin.", BalikIsimleri[KampInfo[kamp][kBalik][listitem]][bIsim]);
        KampInfo[kamp][kBalikPismeTimer][listitem] = 0;
        KampInfo[kamp][kBalik][listitem] = -1;
        if(KampInfo[kamp][kBalikYandi][listitem]) {
            if(PlayerInfo[playerid][pHealth] <= 90.0)
                AC_SetPlayerHealth(playerid, PlayerInfo[playerid][pHealth] + 10.0);
            else
                AC_SetPlayerHealth(playerid, 100.0);
        }
        else if(KampInfo[kamp][kBalikPisti][listitem]) {
            if(PlayerInfo[playerid][pHealth] <= 80.0)
                AC_SetPlayerHealth(playerid, PlayerInfo[playerid][pHealth] + 20.0);
            else
                AC_SetPlayerHealth(playerid, 100.0);
        } else return HataMesaji(playerid, "Hazýr olmayan bir balýk seçtiniz.");
        KampInfo[kamp][kBalikYandi][listitem] = 0;
        KampInfo[kamp][kBalikPisti][listitem] = 0;
        if(IsValidDynamic3DTextLabel(KampInfo[kamp][kLabelText][listitem]))
            DestroyDynamic3DTextLabelEx(KampInfo[kamp][kLabelText][listitem]);
    } else return DeletePVar(playerid, "BalikYeKamp");
    return 1;
}

Dialog:DialogTezgahSecenek(playerid, response, listitem, inputtext[]) {
    if(response) {
        switch(listitem) {
            case 0: { // Çalýþan Ýþlemleri
                Dialog_Show(playerid, DialogTezgahCalisanIslem, DIALOG_STYLE_LIST, "Tezgah Sistemi", "Çalýþan Ekle\nÇalýþan Çýkar\nTüm Çalýþanlarý Çýkar\nÇalýþan Listesi", "Seç", "<< Geri");
            }
            case 1: { // Yiyecek Ýþlemleri
                new dialogString[520];
                for(new i; i < 3; i++) {
                    if(StandInfo[PlayerInfo[playerid][pActigiTezgah]][sUrunFiyati][i] != 0)
                        format(dialogString, sizeof dialogString, "%s{4b75c3}%s\t{45b94a}$%d\n", dialogString, StandUrunInfo[PlayerInfo[playerid][pActigiTezgah]][i], StandInfo[PlayerInfo[playerid][pActigiTezgah]][sUrunFiyati][i]);
                    else
                        format(dialogString, sizeof dialogString, "%s{4b75c3}Yok\t{ea3636}$0\n", dialogString);
                }
                Dialog_Show(playerid, DialogTezgahUrunListesi, DIALOG_STYLE_TABLIST_HEADERS, "Tezgah Yiyecek Ürünleri", "{FFFFFF}Ürün Adý\t{FFFFFF}Ürün Fiyatý\n%s", "Seç", "<< Geri", dialogString);
            }
            case 2: { // Label Deðiþtir
                Dialog_Show(playerid, DialogTezgahLabel, DIALOG_STYLE_INPUT, "Tezgah Sistemi", "Tezgahýnýzýn üstünde yazacak yazýyý deðiþtireceksiniz.\nTezgahýnýzýn üstünde yazmasýný istediðiniz yazýyý girin(maks 128 karakter, min 8 karakter):", "Tamam", "<< Geri");
            }
            case 3: { // Kasadan Para Çek
                if(StandInfo[PlayerInfo[playerid][pActigiTezgah]][sKasa] > 0)return
                Dialog_Show(playerid, DialogTezgahKasa, DIALOG_STYLE_MSGBOX, "Tezgah Kasa", "Kasanýzda $%d bulunmakta, bu paranýn tamamýný çekmek istediðinize emin misiniz?", "Evet", "Hayýr", StandInfo[PlayerInfo[playerid][pActigiTezgah]][sKasa]);
                else return HataMesajiC(playerid, "Kasanýzda hiç para yok.");
            }
            case 4: { // Ýçecek Ýþlemleri
                new dialogString[520];
                for(new i; i < 3; i++) {
                    if(StandInfo[PlayerInfo[playerid][pActigiTezgah]][sIcecekFiyati][i] != 0)
                        format(dialogString, sizeof dialogString, "%s{4b75c3}%s\t{45b94a}$%d\n", dialogString, StandIcecekInfo[PlayerInfo[playerid][pActigiTezgah]][i], StandInfo[PlayerInfo[playerid][pActigiTezgah]][sIcecekFiyati][i]);
                    else
                        format(dialogString, sizeof dialogString, "%s{4b75c3}Yok\t{ea3636}$0\n", dialogString);
                }
                Dialog_Show(playerid, DialogTezgahIcecekListes, DIALOG_STYLE_TABLIST_HEADERS, "Tezgah Ýçecek Ürünleri", "{FFFFFF}Ürün Adý\t{FFFFFF}Ürün Fiyatý\n%s", "Seç", "<< Geri", dialogString);
            }
            case 5: { // Çalýþanlara satýþlardan pay ver
                Dialog_Show(playerid, DialogTezgahCalisanPay, DIALOG_STYLE_INPUT, "Tezgah Satýþ Payý", "{FFFFFF}Çalýþanlarýna satýþlardan pay vermek üzeresin.\n{FFFFFF}Satýþlardan pay verdiðin zaman çalýþanlarýna satýþlarýn belli bir yüzdelik diliminin parasý verilir, geri kalan para ise tezgahýn kasasýna yatýrýlýr.\n{FFFFFF}Devam etmek istiyorsan yüzdelik dilimi aþaðýya sayýsal olarak girmelisin.\n{FFFFFF}Örneðin aþaðýya 20 yazarsanýz çalýþanlarýnýz her satýþýn yüzde 20sini alacak. Eðer 0 yazarsanýz tüm para kasaya gidecek.\n{FFFFFF}Þu an çalýþan yüzde payýnýz {3f71dd}%d.", "Tamam", "Ýptal", StandInfo[PlayerInfo[playerid][pActigiTezgah]][sCalisanPay]);
            }
        }
    }
    return 1;
}

Dialog:DialogTezgahCalisanPay(playerid, response, listitem, inputtext[]) {
    if(response) {
        if(IsNumeric(inputtext) && strval(inputtext) >= 0 && strval(inputtext) <= 100 && strlen(inputtext) > 0) {
            if(PlayerInfo[playerid][pActigiTezgah] == -1) return HataMesajiC(playerid, "Tezgahýnýz silinmiþ.");
            StandInfo[PlayerInfo[playerid][pActigiTezgah]][sCalisanPay] = strval(inputtext);
            SunucuMesaji(playerid, "Çalýþan satýþ payýný yüzde %d olarak ayarladýnýz.", strval(inputtext));
        } else return Dialog_Show(playerid, DialogTezgahCalisanPay, DIALOG_STYLE_INPUT, "Tezgah Satýþ Payý", "{FFFFFF}Çalýþanlarýna satýþlardan pay vermek üzeresin.\n{FFFFFF}Satýþlardan pay verdiðin zaman çalýþanlarýna satýþlarýn belli bir yüzdelik diliminin parasý verilir, geri kalan para ise tezgahýn kasasýna yatýrýlýr.\n{FFFFFF}Devam etmek istiyorsan yüzdelik dilimi aþaðýya sayýsal olarak girmelisin.\n{FFFFFF}Örneðin aþaðýya 20 yazarsanýz çalýþanlarýnýz her satýþýn yüzde 20sini alacak. Eðer 0 yazarsanýz tüm para kasaya gidecek.\n{FFFFFF}Þu an çalýþan yüzde payýnýz {3f71dd}%d.", "Tamam", "Ýptal", StandInfo[PlayerInfo[playerid][pActigiTezgah]][sCalisanPay]);
    }
    return 1;
}

Dialog:DialogTezgahKasa(playerid, response, listitem, inputtext[]) {
    if(response) {
        new tezgah = PlayerInfo[playerid][pActigiTezgah];
        if(tezgah == -1) return HataMesajiC(playerid, "Tezgahýnýz silinmiþ.");
        if(!StandInfo[tezgah][sExists]) return HataMesajiC(playerid, "Tezgahýnýz silinmiþ.");
        if(StandInfo[tezgah][sKasa] <= 0) return HataMesajiC(playerid, "Kasanýzda para yok.");
        SunucuMesaji(playerid, "Tezgahýnýzýn kasasýndan $%d para çektiniz.", StandInfo[tezgah][sKasa]);
        AC_GivePlayerMoney(playerid, StandInfo[tezgah][sKasa], "/tezgah kasa");
        StandInfo[tezgah][sKasa] = 0;
        PlayerAME(playerid, "tezgahýn kasasýndan para çeker.");
    }
    return 1;
}

Dialog:DialogTezgahLabel(playerid, response, listitem, inputtext[]) {
    if(response) {
        if(strlen(inputtext) >= 8 && strlen(inputtext) < 128) {
            new id = PlayerInfo[playerid][pActigiTezgah];
            format(StandInfo[id][sLabelText], 128, "%s", inputtext);
            if(IsValidDynamic3DTextLabel(StandInfo[id][sLabel]))
                DestroyDynamic3DTextLabelEx(StandInfo[id][sLabel]);
            if(!StandInfo[id][sArabali])
                StandInfo[id][sLabel] = CreateDynamic3DTextLabel(StandInfo[id][sLabelText], COLOR_WHITE, StandInfo[id][sPosX], StandInfo[id][sPosY], StandInfo[id][sPosZ], 30.0);
            else
                StandInfo[id][sLabel] = CreateDynamic3DTextLabel(StandInfo[id][sLabelText], COLOR_WHITE, 0.0, 0.0, 0.0, 30.0, INVALID_PLAYER_ID, StandInfo[id][saracID]);
            SunucuMesaji(playerid, "Tezgahýnýzýn labelini deðiþtirdiniz.");
        } else return Dialog_Show(playerid, DialogTezgahLabel, DIALOG_STYLE_INPUT, "Tezgah Sistemi", "En az 8, en fazla 128 karakter girin.\nTezgahýnýzýn üstünde yazacak yazýyý deðiþtireceksiniz.\nTezgahýnýzýn üstünde yazmasýný istediðiniz yazýyý girin(maks 128 karakter, min 8 karakter):", "Tamam", "<< Geri");
    } else return Dialog_Show(playerid, DialogTezgahSecenek, DIALOG_STYLE_LIST, "Tezgah Sistemi", "Çalýþan Ýþlemleri\nYiyecek Ýþlemleri\nLabel deðiþtir\nKasadaki Parayý Çek\nÝçecek Ýþlemleri\nÇalýþanlara satýþlardan pay ver", "Seç", "Ýptal");
    return 1;
}

Dialog:DialogTezgahCalisanIslem(playerid, response, listitem, inputtext[]) {
    if(response) {
        switch(listitem) {
            case 0: { // Çalýþan Ekle
                if(StandInfo[PlayerInfo[playerid][pActigiTezgah]][sCalisanSayisi] < 3)return
                    Dialog_Show(playerid, DialogTezgahCalisanEkle, DIALOG_STYLE_INPUT, "Tezgah Çalýþan", "Eklemek istediðiniz kiþinin ID'sini ya da adýný girin:", "Tamam", "Ýptal");
                else return HataMesajiC(playerid, "Maksimum sayýda çalýþan sayýsýna ulaþmýþsýn.");
            }
            case 1: { // Çalýþan Çýkar
                if(StandInfo[PlayerInfo[playerid][pActigiTezgah]][sCalisanSayisi] > 0)return
                    Dialog_Show(playerid, DialogTezgahCalisanCikar, DIALOG_STYLE_INPUT, "Tezgah Çalýþan", "Çýkarmak istediðiniz kiþinin ID'sini ya da adýný girin:", "Tamam", "Ýptal");
                else return HataMesajiC(playerid, "Zaten çalýþanýnýz yok.");
            }
            case 2: { // Tüm Çalýþanlarý Çýkar
                if(StandInfo[PlayerInfo[playerid][pActigiTezgah]][sCalisanSayisi] > 0)return
                    Dialog_Show(playerid, DialogTezgahCalisanKick, DIALOG_STYLE_MSGBOX, "Tezgah Çalýþan", "Tüm çalýþanlarý çýkarmak istediðinizden emin misiniz? Bu iþlem geri alýnamaz.", "Evet", "Hayýr");
                else return HataMesajiC(playerid, "Zaten çalýþanýnýz yok.");
            }
            case 3: {
                new dialogString[120], count = 0;
                for(new i; i < 3; i++) {
                    if(StandInfo[PlayerInfo[playerid][pActigiTezgah]][sCalisan][i] != -1) {
                        format(dialogString, 120, "%s%d. %s (ID: %d)", dialogString, count + 1, ReturnRoleplayName(StandInfo[PlayerInfo[playerid][pActigiTezgah]][sCalisan][i]), StandInfo[PlayerInfo[playerid][pActigiTezgah]][sCalisan][i]);
                        count++;
                    }
                }
                if(count == 0) return HataMesajiC(playerid, "Hiç çalýþanýnýz yok.");
                Dialog_Show(playerid, DialogTezgahCalisanList, DIALOG_STYLE_LIST, "Tezgah Çalýþan Listesi", dialogString, "Tamam", "");
            }
        }
    } else return Dialog_Show(playerid, DialogTezgahSecenek, DIALOG_STYLE_LIST, "Tezgah Sistemi", "Çalýþan Ýþlemleri\nYiyecek Ýþlemleri\nLabel deðiþtir\nKasadaki Parayý Çek\nÝçecek Ýþlemleri\nÇalýþanlara satýþlardan pay ver", "Seç", "Ýptal");
    return 1;
}

Dialog:DialogTezgahCalisanKick(playerid, response, listitem, inputtext[]) {
    if(response) {
        new tezgah = PlayerInfo[playerid][pActigiTezgah];
        if(tezgah != -1) {
            TezgahTumCalisanCikar(tezgah);
            SunucuMesaji(playerid, "Tüm çalýþanlar çýkartýldý.");
        } else return HataMesajiC(playerid, "Tezgahýnýz silinmiþ.");
    } else return Dialog_Show(playerid, DialogTezgahSecenek, DIALOG_STYLE_LIST, "Tezgah Sistemi", "Çalýþan Ýþlemleri\nYiyecek Ýþlemleri\nLabel deðiþtir\nKasadaki Parayý Çek\nÝçecek Ýþlemleri\nÇalýþanlara satýþlardan pay ver", "Seç", "Ýptal");
    return 1;
}

Dialog:DialogTezgahCalisanCikar(playerid, response, listitem, inputtext[]) {
    if(response) {
        printf("1");
        new id;
        printf("2");
        if(!isnull(inputtext)) {
            printf("3");
            sscanf(inputtext, "u", id);
            printf("4");
            if(IsPlayerConnected(id) && PlayerInfo[id][pLogged] && id != INVALID_PLAYER_ID && PlayerInfo[id][pCalistigiTezgah] == PlayerInfo[playerid][pActigiTezgah]) {
                printf("5");
                new sonuc = TezgahCalisanCikar(PlayerInfo[playerid][pActigiTezgah], id);
                printf("6");
                if(sonuc != -1) return SunucuMesaji(playerid, "Kiþi tezgahtan atýldý.");
                else return HataMesajiC(playerid, "Bilinmeyen bir hata oluþtu, tekrar deneyin.");
            } else return HataMesajiC(playerid, "Kiþi bulunamadý ya da tezgahýnýzda çalýþmýyor.");
        } else return HataMesajiC(playerid, "Kutu boþ býrakýlamaz.");
    } else return Dialog_Show(playerid, DialogTezgahSecenek, DIALOG_STYLE_LIST, "Tezgah Sistemi", "Çalýþan Ýþlemleri\nYiyecek Ýþlemleri\nLabel deðiþtir\nKasadaki Parayý Çek\nÝçecek Ýþlemleri\nÇalýþanlara satýþlardan pay ver", "Seç", "Ýptal");
}

Dialog:DialogTezgahCalisanEkle(playerid, response, listitem, inputtext[]) {
    if(response) {
        new id;
        if(!isnull(inputtext)) {
            sscanf(inputtext, "u", id);
            if(id != INVALID_PLAYER_ID && IsPlayerConnected(id) && PlayerInfo[id][pLogged]) {
                new Float:pX, Float:pY, Float:pZ, pinterior = GetPlayerInterior(playerid), pvw = GetPlayerVirtualWorld(playerid);
                GetPlayerPos(playerid, pX, pY, pZ);
                if(IsPlayerInRangeOfPoint(id, 3.0, pX, pY, pZ) && GetPlayerInterior(id) == pinterior && GetPlayerVirtualWorld(id) == pvw) {
                    if(PlayerInfo[id][pCalistigiTezgah] == -1 && PlayerInfo[id][pActigiTezgah] == -1) {
                        SetPVarInt(id, "TezgahTeklif", playerid);
                        Dialog_Show(id, DialogTezgahTeklif, DIALOG_STYLE_MSGBOX, "Tezgah Sistemi", "%s (ID: %d) sizi tezgahýnda çalýþmaya davet etti.\nKabul etmek istiyor musunuz?", "Evet", "Hayýr", ReturnRoleplayName(playerid), playerid);
                        SunucuMesaji(playerid, "%s (ID: %d) kiþisine iþ teklifi gönderildi, lütfen cevap bekleyin.", ReturnRoleplayName(id), id);
                    } else return HataMesajiC(playerid, "Kiþi baþka bir tezgahta çalýþýyor ya da kendi tezgahý var.");
                } else return HataMesajiC(playerid, "Kiþiye yakýn deðilsin.");
            } else return HataMesajiC(playerid, "Kiþi bulunamadý.");
        } else return HataMesajiC(playerid, "Oyuncu ismi boþ býrakýlamaz.");
    } else return Dialog_Show(playerid, DialogTezgahSecenek, DIALOG_STYLE_LIST, "Tezgah Sistemi", "Çalýþan Ýþlemleri\nYiyecek Ýþlemleri\nLabel deðiþtir\nKasadaki Parayý Çek\nÝçecek Ýþlemleri\nÇalýþanlara satýþlardan pay ver", "Seç", "Ýptal");
    return 1;
}

Dialog:DialogTezgahTeklif(playerid, response, listitem, inputtext[]) {
    if(response) {
        if(PlayerInfo[playerid][pActigiTezgah] == -1 && PlayerInfo[playerid][pCalistigiTezgah] == -1) {
            new tezgahoyuncu = GetPVarInt(playerid, "TezgahTeklif");
            DeletePVar(playerid, "TezgahTeklif");
            new tezgah = PlayerInfo[tezgahoyuncu][pActigiTezgah];
            if(tezgah != -1) {
                PlayerInfo[playerid][pCalistigiTezgah] = tezgah;
                StandInfo[tezgah][sCalisanSayisi]++;
                new slot = -1;
                for(new i; i < 3; i++) {
                    if(StandInfo[tezgah][sCalisan][i] == -1) {
                        slot = i;
                        break;
                    }
                }
                if(slot == -1) {
                    HataMesajiC(playerid, "Bilinmeyen bir hata oluþtu, lütfen tekrar deneyin.");
                    StandInfo[tezgah][sCalisanSayisi]--;
                    PlayerInfo[playerid][pCalistigiTezgah] = -1;
                    return 1;
                }
                StandInfo[tezgah][sCalisan][slot] = playerid;
                SunucuMesaji(playerid, "Tezgah çalýþma teklifini kabul ettiniz.");
                SunucuMesaji(tezgahoyuncu, "%s (ID: %d) tezgah çalýþma teklifini kabul etti.", ReturnRoleplayName(playerid), playerid);
            } else return HataMesajiC(playerid, "Kiþi tezgahýný kapatmýþ.");
        } else return HataMesajiC(playerid, "Zaten bir tezgahta çalýþýyorsunuz.");
    } else {
        new tezgahoyuncu = GetPVarInt(playerid, "TezgahTeklif");
        DeletePVar(playerid, "TezgahTeklif");
        SunucuMesaji(playerid, "Tezgah çalýþma teklifini reddettiniz.");
        SunucuMesaji(tezgahoyuncu, "%s (ID: %d) tezgah çalýþma teklifini reddetti.", ReturnRoleplayName(playerid), playerid);
    }
    return 1;
}

Dialog:DialogTezgahIcecekSat(playerid, response, listitem, inputtext[]) {
    if(response) {
        new tezgah = GetPVarInt(playerid, "SatisTezgah");
        if(tezgah != -1) {
            if(StandInfo[tezgah][sExists]) {
                if(StandInfo[tezgah][sIcecekFiyati][listitem] != 0) {
                    SetPVarInt(playerid, "SatisUrun", listitem);
                    Dialog_Show(playerid, DialogTezgahIcecekSatIsi, DIALOG_STYLE_INPUT, "Tezgah Ürün Satýþý", "$%d fiyatýna %s satacaðýnýz kiþinin adýný ya da ID'sini girin:", "Tamam", "Ýptal", StandInfo[tezgah][sIcecekFiyati][listitem], StandIcecekInfo[tezgah][listitem]);
                } else {
                    HataMesajiC(playerid, "Bu eþyayý satmýyorsun.");
                    DeletePVar(playerid, "SatisTezgah");
                    return 1;
                }
            } else {
                HataMesajiC(playerid, "Tezgah silinmiþ.");
                DeletePVar(playerid, "SatisTezgah");
                return 1;
            }
        } else {
            HataMesajiC(playerid, "Tezgah silinmiþ.");
            DeletePVar(playerid, "SatisTezgah");
            return 1;
        }
    } else {
        DeletePVar(playerid, "SatisTezgah");
        return 1;
    }
    return 1;
}

Dialog:DialogTezgahIcecekSatIsi(playerid, response, listitem, inputtext[]) {
    if(response) {
        if(isnull(inputtext)) return 1; // 6 temmuz 2019 trisha 14:45
        new tezgah = GetPVarInt(playerid, "SatisTezgah");
        if(tezgah != -1) {
            if(StandInfo[tezgah][sExists]) {
                new id;
                sscanf(inputtext, "u", id);
                if(IsPlayerConnected(id) && id != INVALID_PLAYER_ID && PlayerInfo[id][pLogged] && playerid != id) {
                    new Float:pX, Float:pY, Float:pZ;
                    GetPlayerPos(playerid, pX, pY, pZ);
                    if(IsPlayerInRangeOfPoint(id, 3.0, pX, pY, pZ)) {
                        if(GetPVarInt(id, "TezgahSatis") != 1) {
                            SetPVarInt(id, "TezgahSatis", 1);
                            SetPVarInt(playerid, "TezgahSatis", 1);
                            SetPVarInt(id, "TezgahSatan", playerid);
                            SetPVarInt(playerid, "TezgahSatisID", id);
                            SetPVarInt(playerid, "SatisYapiyor", 1);
                            SetPVarInt(id, "SatinAliyor", 1);
                            SetPVarInt(id, "TezgahIcecek", 1);
                            SunucuMesaji(playerid, "Kiþiye ürün satýþ teklifi gönderildi, cevap verdiði zaman satýþ yapýlacak.");
                            SunucuMesaji(id, "%s (ID: %d) size tezgahýndan $%d karþýlýðýnda %s satmak istiyor.", ReturnRoleplayName(playerid), playerid, StandInfo[tezgah][sIcecekFiyati][GetPVarInt(playerid, "SatisUrun")], StandIcecekInfo[tezgah][GetPVarInt(playerid, "SatisUrun")]);
                            SunucuMesaji(id, "Kabul etmek istiyorsanýz /kabulet tezgahurun reddetmek istiyorsanýz /reddet tezgahurun yazabilirsiniz.");
                        } else return HataMesajiC(playerid, "Bu oyuncuya baþka birisi satýþ teklifi göndermiþ, lütfen bekleyin.");
                    } else return HataMesajiC(playerid, "Oyuncuya yakýn deðilsiniz.");
                } else return HataMesajiC(playerid, "Hatalý oyuncu ismi.");
            } else {
                HataMesajiC(playerid, "Tezgah silinmiþ.");
                DeletePVar(playerid, "SatisTezgah");
                DeletePVar(playerid, "SatisUrun");
                return 1;
            }
        } else {
            HataMesajiC(playerid, "Tezgah silinmiþ.");
            DeletePVar(playerid, "SatisTezgah");
            DeletePVar(playerid, "SatisUrun");
            return 1;
        }
    } else {
        DeletePVar(playerid, "SatisTezgah");
        DeletePVar(playerid, "SatisUrun");
        return 1;
    }
    return 1;
}

Dialog:DialogTezgahUrunSat(playerid, response, listitem, inputtext[]) {
    if(response) {
        new tezgah = GetPVarInt(playerid, "SatisTezgah");
        if(tezgah != -1) {
            if(StandInfo[tezgah][sExists]) {
                if(StandInfo[tezgah][sUrunFiyati][listitem] != 0) {
                    SetPVarInt(playerid, "SatisUrun", listitem);
                    Dialog_Show(playerid, DialogTezgahUrunSatIsim, DIALOG_STYLE_INPUT, "Tezgah Ürün Satýþý", "$%d fiyatýna %s satacaðýnýz kiþinin adýný ya da ID'sini girin:", "Tamam", "Ýptal", StandInfo[tezgah][sUrunFiyati][listitem], StandUrunInfo[tezgah][listitem]);
                } else {
                    HataMesajiC(playerid, "Bu eþyayý satmýyorsun.");
                    DeletePVar(playerid, "SatisTezgah");
                    return 1;
                }
            } else {
                HataMesajiC(playerid, "Tezgah silinmiþ.");
                DeletePVar(playerid, "SatisTezgah");
                return 1;
            }
        } else {
            HataMesajiC(playerid, "Tezgah silinmiþ.");
            DeletePVar(playerid, "SatisTezgah");
            return 1;
        }
    } else {
        DeletePVar(playerid, "SatisTezgah");
        return 1;
    }
    return 1;
}

Dialog:DialogTezgahUrunSatIsim(playerid, response, listitem, inputtext[]) {
    if(response) {
        if(isnull(inputtext)) return 1; // 6 temmuz 2019 trisha 14:45
        new tezgah = GetPVarInt(playerid, "SatisTezgah");
        if(tezgah != -1) {
            if(StandInfo[tezgah][sExists]) {
                new id;
                sscanf(inputtext, "u", id);
                if(IsPlayerConnected(id) && id != INVALID_PLAYER_ID && PlayerInfo[id][pLogged] && playerid != id) {
                    new Float:pX, Float:pY, Float:pZ;
                    GetPlayerPos(playerid, pX, pY, pZ);
                    if(IsPlayerInRangeOfPoint(id, 3.0, pX, pY, pZ)) {
                        if(GetPVarInt(id, "TezgahSatis") != 1) {
                            SetPVarInt(id, "TezgahSatis", 1);
                            SetPVarInt(playerid, "TezgahSatis", 1);
                            SetPVarInt(id, "TezgahSatan", playerid);
                            SetPVarInt(playerid, "TezgahSatisID", id);
                            SetPVarInt(playerid, "SatisYapiyor", 1);
                            SetPVarInt(id, "SatinAliyor", 1);
                            SunucuMesaji(playerid, "Kiþiye ürün satýþ teklifi gönderildi, cevap verdiði zaman satýþ yapýlacak.");
                            SunucuMesaji(id, "%s (ID: %d) size tezgahýndan $%d karþýlýðýnda %s satmak istiyor.", ReturnRoleplayName(playerid), playerid, StandInfo[tezgah][sUrunFiyati][GetPVarInt(playerid, "SatisUrun")], StandUrunInfo[tezgah][GetPVarInt(playerid, "SatisUrun")]);
                            SunucuMesaji(id, "Kabul etmek istiyorsanýz /kabulet tezgahurun reddetmek istiyorsanýz /reddet tezgahurun yazabilirsiniz.");
                        } else return HataMesajiC(playerid, "Bu oyuncuya baþka birisi satýþ teklifi göndermiþ, lütfen bekleyin.");
                    } else return HataMesajiC(playerid, "Oyuncuya yakýn deðilsiniz.");
                } else return HataMesajiC(playerid, "Hatalý oyuncu ismi.");
            } else {
                HataMesajiC(playerid, "Tezgah silinmiþ.");
                DeletePVar(playerid, "SatisTezgah");
                DeletePVar(playerid, "SatisUrun");
                return 1;
            }
        } else {
            HataMesajiC(playerid, "Tezgah silinmiþ.");
            DeletePVar(playerid, "SatisTezgah");
            DeletePVar(playerid, "SatisUrun");
            return 1;
        }
    } else {
        DeletePVar(playerid, "SatisTezgah");
        DeletePVar(playerid, "SatisUrun");
        return 1;
    }
    return 1;
}

Dialog:DialogTezgahUrunListesi(playerid, response, listitem, inputtext[]) {
    if(response) {
        PlayerInfo[playerid][pSelectedSlot] = listitem;
        Dialog_Show(playerid, DialogTezgahUrunIsim, DIALOG_STYLE_INPUT, "Tezgah Yiyecek Ürünleri", "Yeni ürün adýný aþaðýya girin(maksimum 80, minimum 2 karakter):", "Tamam", "<< Geri");
    } else return Dialog_Show(playerid, DialogTezgahSecenek, DIALOG_STYLE_LIST, "Tezgah Sistemi", "Çalýþan Ýþlemleri\nYiyecek Ýþlemleri\nLabel deðiþtir\nKasadaki Parayý Çek\nÝçecek Ýþlemleri\nÇalýþanlara satýþlardan pay ver", "Seç", "Ýptal");
    return 1;
}

Dialog:DialogTezgahIcecekListes(playerid, response, listitem, inputtext[]) {
    if(response) {
        PlayerInfo[playerid][pSelectedSlot] = listitem;
        Dialog_Show(playerid, DialogTezgahIcecekIsim, DIALOG_STYLE_INPUT, "Tezgah Ýçecek Ürünleri", "Yeni içecek adýný aþaðýya girin(maksimum 80, minimum 2 karakter):", "Tamam", "<< Geri");
    } else return Dialog_Show(playerid, DialogTezgahSecenek, DIALOG_STYLE_LIST, "Tezgah Sistemi", "Çalýþan Ýþlemleri\nYiyecek Ýþlemleri\nLabel deðiþtir\nKasadaki Parayý Çek\nÝçecek Ýþlemleri\nÇalýþanlara satýþlardan pay ver", "Seç", "Ýptal");
    return 1;
}

Dialog:DialogTezgahIcecekIsim(playerid, response, listitem, inputtext[]) {
    if(response) {
        if(strlen(inputtext) >= 2 && strlen(inputtext) < 80) {
            SetPVarString(playerid, "TezgahUrunText", inputtext);
            Dialog_Show(playerid, DialogTezgahIcecekFiyat, DIALOG_STYLE_INPUT, "Tezgah Ürünleri", "%s ürününün fiyatýný aþaðýya girin(maksimum 100, minimum 1, sayý girin):", "Tamam", "<< Geri", inputtext);
        } else return Dialog_Show(playerid, DialogTezgahIcecekIsim, DIALOG_STYLE_INPUT, "Tezgah Ürünleri", "Minimum 2, maksimum 80 karakter girin.\nYeni ürün adýný aþaðýya girin(maksimum 80, minimum 2 karakter):", "Tamam", "<< Geri");
    } else return Dialog_Show(playerid, DialogTezgahSecenek, DIALOG_STYLE_LIST, "Tezgah Sistemi", "Çalýþan Ýþlemleri\nYiyecek Ýþlemleri\nLabel deðiþtir\nKasadaki Parayý Çek\nÝçecek Ýþlemleri\nÇalýþanlara satýþlardan pay ver", "Seç", "Ýptal");
    return 1;
}

Dialog:DialogTezgahIcecekFiyat(playerid, response, listitem, inputtext[]) {
    if(response) {
        if(IsNumeric(inputtext) && strval(inputtext) >= 1 && strval(inputtext) <= 100) {
            new tezgahid = PlayerInfo[playerid][pActigiTezgah], urunSlot = PlayerInfo[playerid][pSelectedSlot], urunText[80];
            GetPVarString(playerid, "TezgahUrunText", urunText, 80);
            DeletePVar(playerid, "TezgahUrunText");
            new fiyat = strval(inputtext);
            StandInfo[tezgahid][sIcecekFiyati][urunSlot] = fiyat;
            format(StandIcecekInfo[tezgahid][urunSlot], 80, "%s", urunText);
            SunucuMesaji(playerid, "Ürünü %s olarak deðiþtirdiniz ve $%d fiyatýna satacaksýnýz.", urunText, fiyat);
        } else return Dialog_Show(playerid, DialogTezgahIcecekFiyat, DIALOG_STYLE_INPUT, "Tezgah Ürünleri", "Sayýsal deðer girin ve en az 1 en fazla 100 girin.\nÜrünün fiyatýný aþaðýya girin(maksimum 100, minimum 1, sayý girin):", "Tamam", "<< Geri");
    } else {
        Dialog_Show(playerid, DialogTezgahSecenek, DIALOG_STYLE_LIST, "Tezgah Sistemi", "Çalýþan Ýþlemleri\nYiyecek Ýþlemleri\nLabel deðiþtir\nKasadaki Parayý Çek\nÝçecek Ýþlemleri\nÇalýþanlara satýþlardan pay ver", "Seç", "Ýptal");
        DeletePVar(playerid, "TezgahUrunText");
        return 1;
    }
    return 1;
}

Dialog:DialogTezgahUrunIsim(playerid, response, listitem, inputtext[]) {
    if(response) {
        if(strlen(inputtext) >= 2 && strlen(inputtext) < 80) {
            SetPVarString(playerid, "TezgahUrunText", inputtext);
            Dialog_Show(playerid, DialogTezgahUrunFiyat, DIALOG_STYLE_INPUT, "Tezgah Ürünleri", "%s ürününün fiyatýný aþaðýya girin(maksimum 100, minimum 1, sayý girin):", "Tamam", "<< Geri", inputtext);
        } else return Dialog_Show(playerid, DialogTezgahUrunIsim, DIALOG_STYLE_INPUT, "Tezgah Ürünleri", "Minimum 2, maksimum 80 karakter girin.\nYeni ürün adýný aþaðýya girin(maksimum 80, minimum 2 karakter):", "Tamam", "<< Geri");
    } else return Dialog_Show(playerid, DialogTezgahSecenek, DIALOG_STYLE_LIST, "Tezgah Sistemi", "Çalýþan Ýþlemleri\nYiyecek Ýþlemleri\nLabel deðiþtir\nKasadaki Parayý Çek\nÝçecek Ýþlemleri\nÇalýþanlara satýþlardan pay ver", "Seç", "Ýptal");
    return 1;
}

Dialog:DialogTezgahUrunFiyat(playerid, response, listitem, inputtext[]) {
    if(response) {
        if(IsNumeric(inputtext) && strval(inputtext) >= 1 && strval(inputtext) <= 100) {
            new tezgahid = PlayerInfo[playerid][pActigiTezgah], urunSlot = PlayerInfo[playerid][pSelectedSlot], urunText[80];
            GetPVarString(playerid, "TezgahUrunText", urunText, 80);
            DeletePVar(playerid, "TezgahUrunText");
            new fiyat = strval(inputtext);
            StandInfo[tezgahid][sUrunFiyati][urunSlot] = fiyat;
            format(StandUrunInfo[tezgahid][urunSlot], 80, "%s", urunText);
            SunucuMesaji(playerid, "Ürünü %s olarak deðiþtirdiniz ve $%d fiyatýna satacaksýnýz.", urunText, fiyat);
        } else return Dialog_Show(playerid, DialogTezgahUrunFiyat, DIALOG_STYLE_INPUT, "Tezgah Ürünleri", "Sayýsal deðer girin ve en az 1 en fazla 100 girin.\nÜrünün fiyatýný aþaðýya girin(maksimum 100, minimum 1, sayý girin):", "Tamam", "<< Geri");
    } else {
        Dialog_Show(playerid, DialogTezgahSecenek, DIALOG_STYLE_LIST, "Tezgah Sistemi", "Çalýþan Ýþlemleri\nYiyecek Ýþlemleri\nLabel deðiþtir\nKasadaki Parayý Çek\nÝçecek Ýþlemleri\nÇalýþanlara satýþlardan pay ver", "Seç", "Ýptal");
        DeletePVar(playerid, "TezgahUrunText");
        return 1;
    }
    return 1;
}

Dialog:DialogTezgahSilOnay(playerid, response, listitem, inputtext[]) {
    if(response) {
        new id = PlayerInfo[playerid][pActigiTezgah];
        if(StandInfo[id][sExists]) {
            StandInfo[id][sExists] = 0;
            StandInfo[id][sID] = -1;
            format(StandInfo[id][sKuran], MAX_PLAYER_NAME, "Yok");
            StandInfo[id][sModel] = 0;
            DestroyDynamicObjectEx(StandInfo[id][sObje]);
            StandInfo[id][sPosX] = 0.0;
            StandInfo[id][sPosY] = 0.0;
            StandInfo[id][sPosZ] = 0.0;
            StandInfo[id][sRotX] = 0.0;
            StandInfo[id][sRotY] = 0.0;
            StandInfo[id][sRotZ] = 0.0;
            StandInfo[id][sMasaModel] = 0;
            DestroyDynamicObjectEx(StandInfo[id][sMasaObje]);
            StandInfo[id][sMasaPosX] = 0.0;
            StandInfo[id][sMasaPosY] = 0.0;
            StandInfo[id][sMasaPosZ] = 0.0;
            StandInfo[id][sMasaRotX] = 0.0;
            StandInfo[id][sMasaRotY] = 0.0;
            StandInfo[id][sMasaRotZ] = 0.0;
            if(IsValidDynamic3DTextLabel(StandInfo[id][sLabel]))
                DestroyDynamic3DTextLabelEx(StandInfo[id][sLabel]);
            format(StandInfo[id][sLabelText], 128, "");
            StandInfo[id][sArabali] = false;
            for(new i; i < 3; i++) {
                StandInfo[id][sCalisan][i] = -1;
                StandInfo[id][sUrunFiyati][i] = 0;
                format(StandUrunInfo[id][i], 80, "Yok");
                format(StandIcecekInfo[id][i], 80, "Yok");
                StandInfo[id][sIcecekFiyati][i] = 0;
            }
            StandInfo[id][saracID] = -1;
            SunucuMesaji(playerid, "Tezgahýnýzý sildiniz.");
            Iter_Remove(Tezgahlar, id);
            PlayerInfo[playerid][pActigiTezgah] = -1;
        } else return HataMesajiC(playerid, "Tezgahýnýz zaten silinmiþ.");
    }
    return 1;
}

Dialog:DialogTezgahMasaBuy(playerid, response, listitem, inputtext[]) {
    if(response)
        Dialog_Show(playerid, DialogTezgahMasaBuyOnay, DIALOG_STYLE_MSGBOX, "Tezgah Sistemi", "$5000 karþýlýðýnda tezgah ve masa almak üzeresiniz.\nDevam etmek istiyor musunuz?", "Evet", "Hayýr");
    else
        Dialog_Show(playerid, DialogTezgahMasaRedOnay, DIALOG_STYLE_MSGBOX, "Tezgah Sistemi", "$4750 karþýlýðýnda tezgah almak üzeresiniz.\nDevam etmek istiyor musunuz?", "Evet", "Hayýr");
    return 1;
}

Dialog:DialogTezgahMasaBuyOnay(playerid, response, listitem, inputtext[]) {
    if(response) {
        if(PlayerInfo[playerid][pCash] >= 5000) {
            PlayerInfo[playerid][pTezgahMasa] = 1825;
            SunucuMesaji(playerid, "Tezgah ve masa satýn aldýnýz. (/tezgah)");
            LogYaz(playerid, "/tezgah satinal", -1, -1);
            AC_GivePlayerMoney(playerid, -5000, "/tezgah satinal");
        } else {
            PlayerInfo[playerid][pTezgah] = 0;
            HataMesajiC(playerid, "Yeterli paranýz yok.");
        }
    } else {
        PlayerInfo[playerid][pTezgah] = 0;
        SunucuMesaji(playerid, "Tezgah satýn alýmýný iptal ettiniz.");
    }
    return 1;
}

Dialog:DialogTezgahMasaRedOnay(playerid, response, listitem, inputtext[]) {
    if(response) {
        if(PlayerInfo[playerid][pCash] >= 4750) {
            SunucuMesaji(playerid, "Tezgah satýn aldýnýz. (/tezgah)");
            LogYaz(playerid, "/tezgah satinal", -1, -1);
            AC_GivePlayerMoney(playerid, -4750, "/tezgah satinal");
        } else {
            PlayerInfo[playerid][pTezgah] = 0;
            HataMesajiC(playerid, "Yeterli paranýz yok.");
        }
    } else {
        PlayerInfo[playerid][pTezgah] = 0;
        SunucuMesaji(playerid, "Tezgah satýn alýmýný iptal ettiniz.");
    }
    return 1;
}

Dialog:DialogEvKiyafet(playerid, response, listitem, inputtext[]) {
    if(response) {
        new ev = -1, count;
        foreach(new h : Houses) if(HouseInfo[h][hExists] && PlayerInfo[playerid][pID] == HouseInfo[h][hOwner]) {
            if(count != listitem)
                count++;
            else if(count == listitem) {
                ev = h;
                break;
            }
        }
        if(ev != -1) {
            ShowModelSelectionMenuEx(playerid, HouseInfo[ev][hKiyafet], 3, "Evdeki Kiyafetler", TEVKIYAFET, 16.0, 0.0, -55.0);
            SetPVarInt(playerid, "aldigiev", ev);
        } else return HataMesajiC(playerid, "Ev bulunamadý.");
    }
    return 1;
}

Dialog:DialogOfflineBan(playerid, response, listitem, inputtext[]) {
    if(response) {
        if(strlen(inputtext) < 1 || strlen(inputtext) > 32) return HataMesajiC(playerid, "Kiþi adý en az 1, en fazla 32 karakter olabilir.");
        format(PlayerInfo[playerid][pOBanKullanici], 32, "%s", inputtext);
        Dialog_Show(playerid, DialogOfflineBanSebep, DIALOG_STYLE_INPUT, "Offline Ban", "Kiþinin neden banlanacaðýný yazýn:", "Tamam", "Ýptal");
    }
    return 1;
}

Dialog:DialogOfflineBanSebep(playerid, response, listitem, inputtext[]) {
    if(response) {
        if(strlen(inputtext) < 1 || strlen(inputtext) > 80) return HataMesajiC(playerid, "Sebep en az 1, en fazla 80 karakter olabilir.");
        format(PlayerInfo[playerid][pOBanSebep], 80, "%s", inputtext);
        mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT * FROM accounts WHERE username = '%e'", PlayerInfo[playerid][pOBanKullanici]);
        mysql_tquery(ourConnection, queryx, "BanAccountSearch", "dss", playerid, PlayerInfo[playerid][pOBanKullanici], PlayerInfo[playerid][pOBanSebep]);
    }
    return 1;
}

Dialog:DialogSetStat(playerid, response, listitem, inputtext[]) {
    if(response) {
        new id = PlayerInfo[playerid][pSetStatID];
        if(IsPlayerConnected(id)) {
            if(PlayerInfo[id][pLogged]) {
                switch(listitem) {
                    case 0: { // seviye
                        Dialog_Show(playerid, DialogSetStatLevel, DIALOG_STYLE_INPUT, "Oyuncu Düzenleme Menüsü", "Aþaðýdaki kutuya seviyeyi girin:", "Tamam", "Ýptal");
                    }
                    case 1: { // cinsiyet
                        Dialog_Show(playerid, DialogSetStatCinsiyet, DIALOG_STYLE_MSGBOX, "Oyuncu Düzenleme Menüsü", "Bir cinsiyet seçin.", "{054D58}Erkek", "{054D58}Kadýn");
                    }
                    case 2: { // yaþ
                        Dialog_Show(playerid, DialogSetStatYas, DIALOG_STYLE_INPUT, "Oyuncu Düzenleme Menüsü", "Aþaðýdaki kutuya yaþ girin:", "Tamam", "Ýptal");
                    }
                    case 3: { // oluþum
                        Dialog_Show(playerid, DialogSetStatOlusum, DIALOG_STYLE_INPUT, "Oyuncu Düzenleme Menüsü", "Aþaðýdaki kutuya faction ve rütbe girin, örneðin LSPD polis þefi için 0 1:", "Tamam", "Ýptal");
                    }
                    case 4: { // meslek
                        Dialog_Show(playerid, DialogSetStatMeslek, DIALOG_STYLE_INPUT, "Oyuncu Düzenleme Menüsü", "Aþaðýdaki kutuya meslek girin:", "Tamam", "Ýptal");
                    }
                    case 5: { // tecrübe
                        Dialog_Show(playerid, DialogSetStatTecrube, DIALOG_STYLE_INPUT, "Oyuncu Düzenleme Menüsü", "Aþaðýdaki kutuya tecrübe girin:", "Tamam", "Ýptal");
                    }
                    case 6: { // oynama saati
                        Dialog_Show(playerid, DialogSetStatSaat, DIALOG_STYLE_INPUT, "Oyuncu Düzenleme Menüsü", "Aþaðýdaki kutuya oynama süresi girin:", "Tamam", "Ýptal");
                    }
                    case 7: { // plaka deðiþim hakký
                        PlayerInfo[id][pPlateChange]++;
                        BasariMesaji(id, "%s sana plaka deðiþim hakký verdi.(/sanpoint)", ReturnRoleplayName(playerid));
                        SendAdminAlert(false, COLOR_ADMIN, "AdmCmd: %s, %s adlý oyuncuya plaka deðiþim hakký verdi.", ReturnRoleplayName(playerid), ReturnRoleplayName(id));
                    }
                    case 8: { // isim deðiþikliði hakký
                        PlayerInfo[id][pNickChange]++;
                        BasariMesaji(id, "%s sana isim deðiþikliði hakký verdi.(/sanpoint)", ReturnRoleplayName(playerid));
                        SendAworkAlert(false, COLOR_ADMIN, "AdmCmd: %s, %s adlý oyuncuya isim deðiþim hakký verdi.", ReturnRoleplayName(playerid), ReturnRoleplayName(id));
                    }
                    case 9: { // telefon no deðiþim hakký
                        PlayerInfo[id][pNumberChange]++;
                        BasariMesaji(id, "%s sana telefon numara deðiþim hakký verdi.(/sanpoint)", ReturnRoleplayName(playerid));
                        SendAworkAlert(false, COLOR_ADMIN, "AdmCmd: %s, %s adlý oyuncuya numara deðiþim hakký verdi.", ReturnRoleplayName(playerid), ReturnRoleplayName(id));
                    }
                    case 10: { // ooc kanal kapatma hakký
                        if(PlayerInfo[id][pTogOOCPremium])
                        {
                            PlayerInfo[id][pTogOOCPremium] = 0;
                            BasariMesaji(id, "%s senin OOC kanal susturma iznini kaldýrdý.", ReturnRoleplayName(playerid));
                            SendAworkAlert(false, COLOR_ADMIN, "AdmCmd: %s, %s kiþisinin OOC kanal susturma iznini kaldýrdý.", ReturnRoleplayName(playerid), ReturnRoleplayName(id));
                        }
                        else
                        {
                            PlayerInfo[id][pTogOOCPremium] = 1;
                            BasariMesaji(id, "%s sana OOC kanal susturma izni verdi.", ReturnRoleplayName(playerid));
                            SendAworkAlert(false, COLOR_ADMIN, "AdmCmd: %s, %s kiþisine OOC kanal susturma izni verdi.", ReturnRoleplayName(playerid), ReturnRoleplayName(id));
                        }
                    }
                    case 11: { // pm kapatma hakký
                        if(PlayerInfo[id][pTogPMPremium])
                        {
                            PlayerInfo[id][pTogPMPremium] = 0;
                            BasariMesaji(id, "%s senin PM kapatma iznini kaldýrdý.", ReturnRoleplayName(playerid));
                            SendAworkAlert(false, COLOR_ADMIN, "AdmCmd: %s, %s kiþisinin PM kapatma iznini kaldýrdý.", ReturnRoleplayName(playerid), ReturnRoleplayName(id));
                        }
                        else
                        {
                            PlayerInfo[id][pTogPMPremium] = 1;
                            BasariMesaji(id, "%s sana PM kapatma izni verdi.", ReturnRoleplayName(playerid));
                            SendAworkAlert(false, COLOR_ADMIN, "AdmCmd: %s, %s kiþisine PM kapatma izni verdi.", ReturnRoleplayName(playerid), ReturnRoleplayName(id));
                        }
                    }
                    case 12:
                    {
                        Dialog_Show(playerid, DialogIrkAdmin, DIALOG_STYLE_MSGBOX, "Oyuncu düzenleme menüsü", "Aþaðýdan oyuncunun yeni ten rengini seçiniz.", "Beyaz", "Siyah");
                    }
                    case 13: { // araç ehliyeti
                        if(PlayerInfo[id][pLicenses][0]) {
                            PlayerInfo[id][pLicenses][0] = 0;
                            BasariMesaji(id, "%s senin sürüþ ehliyetini aldý.", ReturnRoleplayName(playerid));
                            SendAworkAlert(false, COLOR_ADMIN, "AdmCmd: %s, %s kiþisinin sürüþ ehliyetini aldý.", ReturnRoleplayName(playerid), ReturnRoleplayName(id));
                        } else {
                            PlayerInfo[id][pLicenses][0] = 1;
                            BasariMesaji(id, "%s sana sürüþ ehliyetini verdi.", ReturnRoleplayName(playerid));
                            SendAworkAlert(false, COLOR_ADMIN, "AdmCmd: %s, %s kiþisine sürüþ ehliyeti verdi.", ReturnRoleplayName(playerid), ReturnRoleplayName(id));
                        }
                    }
                    case 14: { // deniz ehliyeti
                        if(PlayerInfo[id][pLicenses][1]) {
                            PlayerInfo[id][pLicenses][1] = 0;
                            BasariMesaji(id, "%s senin denizcilik ehliyetini aldý.", ReturnRoleplayName(playerid));
                            SendAworkAlert(false, COLOR_ADMIN, "AdmCmd: %s, %s kiþisinin denizcilik ehliyetini aldý.", ReturnRoleplayName(playerid), ReturnRoleplayName(id));
                        } else {
                            PlayerInfo[id][pLicenses][1] = 1;
                            BasariMesaji(id, "%s sana denizcilik ehliyetini verdi.", ReturnRoleplayName(playerid));
                            SendAworkAlert(false, COLOR_ADMIN, "AdmCmd: %s, %s kiþisine denizcilik ehliyeti verdi.", ReturnRoleplayName(playerid), ReturnRoleplayName(id));
                        }
                    }
                    case 15: { // uçak ehliyeti
                        if(PlayerInfo[id][pLicenses][2]) {
                            PlayerInfo[id][pLicenses][2] = 0;
                            BasariMesaji(id, "%s senin uçuþ ehliyetini aldý.", ReturnRoleplayName(playerid));
                            SendAworkAlert(false, COLOR_ADMIN, "AdmCmd: %s, %s kiþisinin uçuþ ehliyetini aldý.", ReturnRoleplayName(playerid), ReturnRoleplayName(id));
                        } else {
                            PlayerInfo[id][pLicenses][2] = 1;
                            BasariMesaji(id, "%s sana uçuþ ehliyetini verdi.", ReturnRoleplayName(playerid));
                            SendAworkAlert(false, COLOR_ADMIN, "AdmCmd: %s, %s kiþisine uçuþ ehliyeti verdi.", ReturnRoleplayName(playerid), ReturnRoleplayName(id));
                        }
                    }
                }

            } else return HataMesajiC(playerid, "Oyuncu giriþ yapmamýþ.");
        } else return HataMesajiC(playerid, "Oyuncu oyunda deðil.");
    }
    return 1;
}

Dialog:DIALOG_ASANSOR(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        SetPlayerPos(playerid, asansor[listitem][gX], asansor[listitem][gY], asansor[listitem][gZ]);
        SetPlayerFacingAngle(playerid, asansor[listitem][gA]);
        SetPlayerInterior(playerid, asansor[listitem][asINT]);
        SetPlayerVirtualWorld(playerid, asansor[listitem][asVW]);
        SetCameraBehindPlayer(playerid);
    }
    return 1;
}

Dialog:DialogSetStatMeslek(playerid, response, listitem, inputtext[]) {
    if(response) {
        if(!isnull(inputtext)) {
            if(IsNumeric(inputtext)) {
                if(strval(inputtext) >= 0 && strval(inputtext) < sizeof(Jobs)) {
                    new id = PlayerInfo[playerid][pSetStatID];
                    if(IsPlayerConnected(id) && PlayerInfo[id][pLogged]) {
                        PlayerInfo[id][pJob] = strval(inputtext);
                        BasariMesaji(id, "Yönetici %s tarafýndan mesleðiniz %d yapýldý.", ReturnRoleplayName(playerid), strval(inputtext));
                        SendAworkAlert(false, COLOR_ADMIN, "AdmCmd: %s, %s adlý oyuncunun mesleðini %d yaptý.", ReturnRoleplayName(playerid), ReturnRoleplayName(id), strval(inputtext));
                    } else return HataMesajiC(playerid, "Oyuncu çevrimiçi deðil ya da giriþ yapmamýþ.");
                } else return HataMesajiC(playerid, "Geçersiz meslek ID.");
            } else return HataMesajiC(playerid, "Meslek sayýsal deðer olmalý.");
        } else return HataMesajiC(playerid, "Kutu boþ býrakýlamaz.");
    }
    return 1;
}

// dialog setstat

Dialog:DialogInterioraGit(playerid, response, listitem, inputtext[]) {
    if(response) {
        new Float:pX, Float:pY, Float:pZ,
        pINT = IsyeriInterior[listitem][interiorno];
        pX = IsyeriInterior[listitem][interior_x];
        pY = IsyeriInterior[listitem][interior_y];
        pZ = IsyeriInterior[listitem][interior_z];
        new Float:oldX, Float:oldY, Float:oldZ;
        GetPlayerPos(playerid, oldX, oldY, oldZ);
        SetPVarFloat(playerid, "EskiX", oldX);
        SetPVarFloat(playerid, "EskiY", oldY);
        SetPVarFloat(playerid, "EskiZ", oldZ);
        SetPVarInt(playerid, "EskiINT", GetPlayerInterior(playerid));
        SetPVarInt(playerid, "EskiVW", GetPlayerVirtualWorld(playerid));
        SetPVarInt(playerid, "Isinlandi", 1);
        SetPlayerPos(playerid, pX, pY, pZ + 0.2);
        SetPlayerInterior(playerid, pINT);
        SetPlayerVirtualWorld(playerid, playerid * 2018);
        SunucuMesaji(playerid, "%s adlý interiora ýþýnlandýn.", IsyeriInterior[listitem][interior_isim]);
        SunucuMesaji(playerid, "Ýþiniz bitince geri dönmek için /ageridon komutunu kullanabilirsiniz.");
    }
    return 1;
}

Dialog:DialogAracYaratma(playerid, response, listitem, inputtext[]) {
    if(response)
        Dialog_Show(playerid, DialogAracYaratmaID, DIALOG_STYLE_INPUT, "Araç Yaratma Menüsü", "Lütfen yaratmak istediðiniz aracý <id/isim> <renk 1> <renk 2> <siren(0-1)> formatýnda girin. Örnekler:\n{26E6DD}Örnek 1 - Sirenli Tamamen Siyah LSPD: {FFFFFF}LSPD 0 0 1\n{26E6DD}Örnek 2 - Sirensiz Tamamen Siyah LSPD: {FFFFFF}LSPD 0 0 0", "{199691}Seç","{199691}Çýkýþ");
    else
        Dialog_Show(playerid, DialogAracDuzenlemeID, DIALOG_STYLE_INPUT, "Araç Yaratma Menüsü", "Lütfen düzenlemek istediðiniz aracýn ID'sini aþaðýdaki kutucuða girin:", "{199691}Seç", "{199691}Çýkýþ");
    return 1;
}

Dialog:DialogAracDuzenlemeID(playerid, response, listitem, inputtext[]) {
    if(response) {
        new id = strval(inputtext);
        SetPVarInt(playerid, "AracDuzenlenenID", id);
        if(IsValidVehicle(id))
            AracDuzenlemeDiyalogunuGoster(playerid, id);
        else return Dialog_Show(playerid, DialogAracDuzenlemeID, DIALOG_STYLE_INPUT, "Araç Yaratma Menüsü", "Belirttiðiniz araç bulunamadý.\nLütfen düzenlemek istediðiniz aracýn ID'sini aþaðýdaki kutucuða girin:", "Seç", "Çýkýþ");
    } else return DeletePVar(playerid, "AracDuzenlenenID");
    return 1;
}

Dialog:DialogAracDuzenle(playerid, response, listitem, inputtext[]) {
    if(response) {
        SetPVarInt(playerid, "AracDuzenlemeList", listitem);
        switch(listitem) {
            case 0:
                Dialog_Show(playerid, DialogAracDuzenOnay, DIALOG_STYLE_INPUT, "Araç Yaratma Menüsü", "Aracýn yeni modelini aþaðýdaki kutuya girin:", "Seç", "<<Geri");
            case 1:
                Dialog_Show(playerid, DialogAracDuzenOnay, DIALOG_STYLE_INPUT, "Araç Yaratma Menüsü", "Aracýn yeni birincil rengini aþaðýdaki kutuya girin:", "Seç", "<<Geri");
            case 2:
                Dialog_Show(playerid, DialogAracDuzenOnay, DIALOG_STYLE_INPUT, "Araç Yaratma Menüsü", "Aracýn yeni ikincil rengini aþaðýdaki kutuya girin:", "Seç", "<<Geri");
            case 3: {
                new id = GetPVarInt(playerid, "AracDuzenlenenID");
                GetPlayerPos(playerid, VehicleInfo[id][vSpawnPosX], VehicleInfo[id][vSpawnPosY], VehicleInfo[id][vSpawnPosZ]);
                GetPlayerFacingAngle(playerid, VehicleInfo[id][vSpawnPosA]);
                VehicleInfo[id][vInterior] = GetPlayerInterior(playerid);
                VehicleInfo[id][vWorld] = GetPlayerVirtualWorld(playerid);
                SaveVehicle(id);
                DeletePVar(playerid, "AracDuzenlemeList");
                Vehicle_Respawn(id);
                SunucuMesaji(id, "%d ID'li aracýn spawn noktasýný bulunduðunuz yer yaptýn.", id);
                AracDuzenlemeDiyalogunuGoster(playerid, id);
            }
            case 4:
                Dialog_Show(playerid, DialogAracDuzenOnay, DIALOG_STYLE_INPUT, "Araç Yaratma Menüsü", "Aracýn yeni factionýný aþaðýdaki kutuya girin:", "Seç", "<<Geri");
            case 5:
                Dialog_Show(playerid, DialogAracDuzenOnay, DIALOG_STYLE_INPUT, "Araç Yaratma Menüsü", "Aracýn yeni 7 haneli plakasýný aþaðýdaki kutuya girin:", "Seç", "<<Geri");
            case 6:
                Dialog_Show(playerid, DialogAracDuzenOnay, DIALOG_STYLE_INPUT, "Araç Yaratma Menüsü", "Aracýn yeni sahibinin tam ismini(Marvellous_Test) aþaðýdaki kutuya girin:", "Seç", "<<Geri");
            case 7:
                Dialog_Show(playerid, DialogAracDuzenOnay, DIALOG_STYLE_INPUT, "Araç Yaratma Menüsü", "Aracýn yeni canýný aþaðýdaki kutuya girin:", "Seç", "<<Geri");
            case 8:
                Dialog_Show(playerid, DialogAracDuzenOnay, DIALOG_STYLE_INPUT, "Araç Yaratma Menüsü", "Aracýn yeni motor ömrünü aþaðýdaki kutuya girin:", "Seç", "<<Geri");
            case 9:
                Dialog_Show(playerid, DialogAracDuzenOnay, DIALOG_STYLE_INPUT, "Araç Yaratma Menüsü", "Aracýn yeni akü ömrünü aþaðýdaki kutuya girin:", "Seç", "<<Geri");
            case 10:
                Dialog_Show(playerid, DialogAracDuzenOnay, DIALOG_STYLE_INPUT, "Araç Yaratma Menüsü", "Aracýn yeni benzin oranýný aþaðýdaki kutuya girin:", "Seç", "<<Geri");
            case 11:
                Dialog_Show(playerid, DialogAracDuzenOnay, DIALOG_STYLE_INPUT, "Araç Yaratma Menüsü", "Aracýn yeni fiyatýný aþaðýdaki kutuya girin:", "Seç", "<<Geri");
            case 12:
                Dialog_Show(playerid, DialogAracDuzenOnay, DIALOG_STYLE_INPUT, "Araç Yaratma Menüsü", "Aracýn yeni interiorunu aþaðýdaki kutuya girin:", "Seç", "<<Geri");
            case 13:
                Dialog_Show(playerid, DialogAracDuzenOnay, DIALOG_STYLE_INPUT, "Araç Yaratma Menüsü", "Aracýn yeni virtual worldünü aþaðýdaki kutuya girin:", "Seç", "<<Geri");
            case 14:
                Dialog_Show(playerid, DialogAracDuzenOnay, DIALOG_STYLE_INPUT, "Araç Yaratma Menüsü", "Aracýn yeni mesleðini aþaðýdaki kutuya girin:", "Seç", "<<Geri");
            case 15:
                Dialog_Show(playerid, DialogAracDuzenOnay, DIALOG_STYLE_INPUT, "Araç Yaratma Menüsü", "Aracýn yeni alarm seviyesini aþaðýdaki kutuya girin:", "Seç", "<<Geri");
            case 16:
                Dialog_Show(playerid, DialogAracDuzenOnay, DIALOG_STYLE_INPUT, "Araç Yaratma Menüsü", "Aracýn yeni kilit seviyesini aþaðýdaki kutuya girin:", "Seç", "<<Geri");
            case 18: {
                new vid = GetPVarInt(playerid, "AracDuzenlenenID");
                // new query[90];
                VehicleInfo[vid][vUnregistered] = 0;
                VehicleInfo[vid][vSpawnPosX] = 0.0;
                foreach(new i: Player) {
                    if(!PlayerInfo[i][pLogged])continue;
                    if(!IsPlayerInAnyVehicle(i))continue;
                    if(GetPlayerVehicleID(i) != vid)continue;
                    if(!PlayerInfo[i][pEmniyetKemeri])continue;
                    pc_cmd_arackemer(i);
                }
                VehicleInfo[vid][vSpawnPosY] = 0.0;
                VehicleInfo[vid][vSpawnPosZ] = 0.0;
                VehicleInfo[vid][vSpawnPosA] = 0.0;
                VehicleInfo[vid][vFaction] = INVALID_VEHICLE_ID;
                VehicleInfo[vid][vJob] = -1;
                VehicleInfo[vid][vFirstColor] = 0;
                VehicleInfo[vid][vSecondColor] = 0;
                VehicleInfo[vid][vOwner] = -1;
                VehicleInfo[vid][vLocked] = 0;
                VehicleInfo[vid][vEngine] = 0;
                VehicleInfo[vid][vLights] = 0;
                if(VehicleInfo[vid][vSandik] != -1) {
                    SandikSil(VehicleInfo[vid][vSandik]);
                    VehicleInfo[vid][vSandik] = -1;
                }
                VehicleInfo[vid][vBonnet] = 0;
                VehicleInfo[vid][vBoot] = 0;
                VehicleInfo[vid][vCallSign] = false;
                if(VehicleInfo[vid][vELM] == true)
                    KillTimer(ELMTimer[vid]);
                VehicleInfo[vid][vELM] = false;
                DestroyDynamic3DTextLabelEx(VehicleInfo[vid][vSignText]);
                if(VehicleInfo[vid][vSirenOn] == true)
                {
                    DestroyDynamicObjectEx(VehicleInfo[vid][vSirenObject]);
                    VehicleInfo[vid][vSirenOn] = false;
                }

                if(!VehicleInfo[vid][vTemporary])
                {
                    mysql_format(ourConnection, queryx, sizeof(queryx), "DELETE FROM vehicles WHERE id = '%d'", VehicleInfo[vid][vID]);
                    mysql_tquery(ourConnection, queryx);
                }
                for(new i; i < MAX_TRUNK_ITEMS; i++) {
                    VehicleInfo[vid][vInvList][i] = 0;
                    VehicleInfo[vid][vInvExtra][i] = 0;
                    VehicleInfo[vid][vInvAmount][i] = 0;
                }

                for(new i; i < MAX_TUNING_COMPONENTS; i++) {
                    VehicleInfo[vid][vTuning][i] = 0;
                }
                VehicleInfo[vid][vTemporary] = 0;
                VehicleInfo[vid][vModel] = 0;
                VehicleInfo[vid][vHealth] = 0.0;
                VehicleInfo[vid][vMaxHealth] = 0.0;
                VehicleInfo[vid][vBatteryHealth] = 0.0;
                VehicleInfo[vid][vEngineHealth] = 0.0;
                VehicleInfo[vid][vDoorHealth] = 0.0;
                VehicleInfo[vid][vFuel] = 0;
                VehicleInfo[vid][vPrice] = 0;
                VehicleInfo[vid][vSigortaSeviyesi] = 0;
                Vehicle_ClearCargo(vid);
                VehicleInfo[vid][vComponents] = 0;
                VehicleInfo[vid][vAutovelox] = 0;
                for(new i; i < 4; i++)
                    VehicleInfo[vid][vWindows][i] = 0;
                VehicleInfo[vid][vInterior] = 0;
                VehicleInfo[vid][vWorld] = 0;
                if(VehicleInfo[vid][vStereo]) {
                    VehicleInfo[vid][vStereo] = false;
                    foreach(new i: Player) {
                        if(PlayerInfo[i][pLogged]) {
                            if(GetPlayerVehicleID(i) == vid)
                                StopAudioStreamForPlayer(i);
                        }
                    }
                }
                VehicleInfo[vid][vImpounded] = 0;
                VehicleInfo[vid][vAlarm] = 0;
                VehicleInfo[vid][vDoorLevel] = 0;
                VehicleInfo[vid][vAlarmOn] = 0;
                VehicleInfo[vid][vPaintjob] = 3;
                for(new i; i < 3; i++) {
                    VehicleInfo[vid][vCeset][i] = 0;
                    VehicleInfo[vid][vSkin][i] = 0;
                    //VehicleInfo[vid][vRehine][i] = -1;
                }
                VehicleInfo[vid][vKM] = 0.0;
                VehicleInfo[vid][vKMGosteren] = 0;
                format(VehicleInfo[vid][vIsim1], MAX_PLAYER_NAME, "");
                format(VehicleInfo[vid][vIsim2], MAX_PLAYER_NAME, "");
                format(VehicleInfo[vid][vIsim3], MAX_PLAYER_NAME, "");
                //format(VehicleInfo[vid][vRehineIsim1], MAX_PLAYER_NAME, "");
                //format(VehicleInfo[vid][vRehineIsim2], MAX_PLAYER_NAME, "");
                //format(VehicleInfo[vid][vRehineIsim3], MAX_PLAYER_NAME, "");
                VehicleInfo[vid][vShowingCargo] = false;
                VehicleInfo[vid][vRespraying] = 0;
                for(new p; p < MAX_CAR_WEAPONS; p++)
                    VehicleInfo[vid][vSlotUsed][p] = 0;
                VehicleInfo[vid][vSpawnExpires] = 0;
                VehicleInfo[vid][vSpawnEdildi] = 0;
                SendAdminAlert(false, COLOR_ADMIN, "AdmCmd: %s, %d ID'li aracý sildi.", ReturnRoleplayName(playerid), vid);
                LogYaz(playerid, "/vdelete", -1, vid);
                foreach(new id: Tezgahlar) {
                    if(StandInfo[id][sExists]) {
                        if(StandInfo[id][saracID] == vid) {
                            foreach(new i: Player) if(PlayerInfo[i][pLogged]) {
                                if(PlayerInfo[i][pID] == StandInfo[id][sID]) {
                                    PlayerInfo[i][pActigiTezgah] = -1;
                                    break;
                                }
                            }
                            StandInfo[id][sExists] = 0;
                            StandInfo[id][sID] = -1;
                            format(StandInfo[id][sKuran], MAX_PLAYER_NAME, "Yok");
                            StandInfo[id][sModel] = 0;
                            DestroyDynamicObjectEx(StandInfo[id][sObje]);
                            StandInfo[id][sPosX] = 0.0;
                            StandInfo[id][sPosY] = 0.0;
                            StandInfo[id][sPosZ] = 0.0;
                            StandInfo[id][sRotX] = 0.0;
                            StandInfo[id][sRotY] = 0.0;
                            StandInfo[id][sRotZ] = 0.0;
                            StandInfo[id][sMasaModel] = 0;
                            DestroyDynamicObjectEx(StandInfo[id][sMasaObje]);
                            StandInfo[id][sMasaPosX] = 0.0;
                            StandInfo[id][sMasaPosY] = 0.0;
                            StandInfo[id][sMasaPosZ] = 0.0;
                            StandInfo[id][sMasaRotX] = 0.0;
                            StandInfo[id][sMasaRotY] = 0.0;
                            StandInfo[id][sMasaRotZ] = 0.0;
                            if(IsValidDynamic3DTextLabel(StandInfo[id][sLabel]))
                                DestroyDynamic3DTextLabelEx(StandInfo[id][sLabel]);
                            format(StandInfo[id][sLabelText], 128, "");
                            StandInfo[id][sArabali] = false;
                            for(new i; i < 3; i++) {
                                StandInfo[id][sCalisan][i] = -1;
                                StandInfo[id][sUrunFiyati][i] = 0;
                                format(StandUrunInfo[id][i], 80, "Yok");
                                format(StandIcecekInfo[id][i], 80, "Yok");
                                StandInfo[id][sIcecekFiyati][i] = 0;
                            }
                            StandInfo[id][saracID] = -1;
                            SunucuMesaji(playerid, "Tezgahýnýzý sildiniz.");
                            Iter_Remove(Tezgahlar, id);
                            PlayerInfo[playerid][pActigiTezgah] = -1;
                            break;
                        }
                    }
                }
                DestroyVehicle(vid);
                Iter_Remove(Vehicles, vid);
                DeletePVar(playerid, "AracDuzenlemeList");
                DeletePVar(playerid, "AracDuzenlenenID");
            }
        }
    } else return Dialog_Show(playerid, DialogAracDuzenlemeID, DIALOG_STYLE_INPUT, "Araç Yaratma Menüsü", "Lütfen düzenlemek istediðiniz aracýn ID'sini aþaðýdaki kutucuða girin:", "{199691}Seç", "{199691}Çýkýþ");
    return 1;
}

Dialog:DialogAracDuzenOnay(playerid, response, listitem, inputtext[]) {
    if(response) {
        new id = GetPVarInt(playerid, "AracDuzenlenenID"), listid = GetPVarInt(playerid, "AracDuzenlemeList");
        switch(listid) {
            case 0: {
                new modelid = (GetVehicleID(inputtext) != -1) ? GetVehicleID(inputtext) : strval(inputtext);
                if(modelid < 400 || modelid > 611) return Dialog_Show(playerid, DialogAracDuzenOnay, DIALOG_STYLE_INPUT, "Araç Yaratma Menüsü", "Hatalý araç ID'si.\nAracýn yeni modelini aþaðýdaki kutuya girin:", "Seç", "<<Geri");
                new Float:x, Float:y, Float:z, Float:a;
                GetVehiclePos(id, x, y, z);
                GetVehicleZAngle(id, a);
                DestroyVehicle(id);
                VehicleInfo[id][vScript] = CreateVehicle(modelid, x, y, z, a, VehicleInfo[id][vFirstColor], VehicleInfo[id][vSecondColor], -1, 0);
                VehicleInfo[id][vPaintjob] = 3;
                SetVehicleVirtualWorld(id, VehicleInfo[id][vWorld]);
                LinkVehicleToInterior(id, VehicleInfo[id][vInterior]);
                VehicleInfo[id][vModel] = modelid;
                SunucuMesaji(playerid, "%d ID'li aracýn modelini %s yaptýn.", id, GetVehicleModelName(modelid));
                for(new i; i < MAX_TUNING_COMPONENTS; i++) {
                    VehicleInfo[id][vTuning][i] = 0;
                }
            }
            case 1: {
                new renk = strval(inputtext);
                if(renk >= 0) {
                    VehicleInfo[id][vFirstColor] = renk;
                    ChangeVehicleColor(id, VehicleInfo[id][vFirstColor], VehicleInfo[id][vSecondColor]);
                    SunucuMesaji(playerid, "%d ID'li aracýn birincil rengini %d yaptýn.", id, renk);
                } else return Dialog_Show(playerid, DialogAracDuzenOnay, DIALOG_STYLE_INPUT, "Araç Yaratma Menüsü", "Bilinmeyen araç renk ID'si.\nAracýn yeni birincil rengini aþaðýdaki kutuya girin:", "Seç", "<<Geri");
            }
            case 2: {
                new renk = strval(inputtext);
                if(renk >= 0) {
                    VehicleInfo[id][vSecondColor] = renk;
                    ChangeVehicleColor(id, VehicleInfo[id][vFirstColor], VehicleInfo[id][vSecondColor]);
                    SunucuMesaji(playerid, "%d ID'li aracýn ikincil rengini %d yaptýn.", id, renk);
                } else return Dialog_Show(playerid, DialogAracDuzenOnay, DIALOG_STYLE_INPUT, "Araç Yaratma Menüsü", "Bilinmeyen araç renk ID'si.\nAracýn yeni ikincil rengini aþaðýdaki kutuya girin:", "Seç", "<<Geri");
            }
            case 4: {
                new faction = strval(inputtext);
                if(faction >= 0 && faction < MAX_FACTIONS) {
                    VehicleInfo[id][vFaction] = faction;
                    VehicleInfo[id][vOwner] = -1;
                    SunucuMesaji(playerid, "%d ID'li aracýn factionýný %d yaptýn.", id, faction);
                    mysql_format(ourConnection, queryx, sizeof(queryx), "UPDATE vehicles SET owner_id = '-1' WHERE id = '%d'", VehicleInfo[id][vID]);
                    mysql_tquery(ourConnection, queryx);
                } else return Dialog_Show(playerid, DialogAracDuzenOnay, DIALOG_STYLE_INPUT, "Araç Yaratma Menüsü", "Bilinmeyen faction ID'si girdiniz.\nAracýn yeni factionýný aþaðýdaki kutuya girin:", "Seç", "<<Geri");
            }
            case 5: {
                if(strlen(inputtext) > 3)
                {
                    new plaka[13], count;
                    format(plaka, sizeof plaka, "%s", inputtext);
                    VehicleInfo[id][vPlate] = plaka;
                    SetVehicleNumberPlate(id, plaka);
                    new Float:pX, Float:pY, Float:pZ, Float:pA;
                    GetVehiclePos(id, pX, pY, pZ);
                    GetVehicleZAngle(id, pA);
                    foreach(new i: Player) {
                        if(PlayerInfo[i][pLogged]) {
                            if(IsPlayerInAnyVehicle(i)) {
                                if(GetPlayerVehicleID(i) == id) {
                                    AracKoltuk[id][count] = GetPlayerVehicleSeat(i);
                                    AracYolcu[id][count] = i;
                                    count++;
                                }
                                if(count >= 3)
                                    break;
                            }
                        }
                    }
                    SetVehicleToRespawn(id);
                    SetVehiclePos(id, pX, pY, pZ);
                    SetVehicleZAngle(id, pA);
                    for(new i; i <= 3; i++) {
                        if(AracYolcu[id][i] != -1) {
                            PutPlayerInVehicle(AracYolcu[id][i], id, AracKoltuk[id][i]);
                            AracYolcu[id][i] = -1;
                            AracKoltuk[id][i] = 0;
                        }
                    }
                    SunucuMesaji(playerid, "%d ID'li aracýn plakasýný %s yaptýn.", id, plaka);
                } else return Dialog_Show(playerid, DialogAracDuzenOnay, DIALOG_STYLE_INPUT, "Araç Yaratma Menüsü", "Plaka 7 karakter olmalý.\nAracýn yeni plakasýný aþaðýdaki kutuya girin:", "Seç", "<<Geri");
            }
            case 6: {
                // new query[75];
                mysql_format(ourConnection, queryx, sizeof queryx, "SELECT * FROM characters WHERE char_name = '%e'", inputtext);
                new Cache:veri = mysql_query(ourConnection, queryx, true);
                static rows;
                cache_get_row_count(rows);
                if(rows) {
                    new ida;
                    cache_get_value_int(0, "id", ida);
                    cache_delete(veri);
                    VehicleInfo[id][vOwner] = ida;
                    strreplace(inputtext, '_', ' ');
                    SunucuMesaji(playerid, "%d ID'li aracýn sahibini %s yaptýn.", id, inputtext);
                } else return Dialog_Show(playerid, DialogAracDuzenOnay, DIALOG_STYLE_INPUT, "Araç Yaratma Menüsü", "Yazdýðýnýz isim bulunamadý.\nAracýn yeni sahibinin tam ismini(Marvellous_Test) aþaðýdaki kutuya girin:", "Seç", "<<Geri");
            }
            case 7: {
                new Float:hp = floatstr(inputtext);
                if(hp >= 0.0) {
                    VehicleInfo[id][vHealth] = hp;
                    SetVehicleHealth(id, hp);
                    SunucuMesaji(playerid, "%d ID'li aracýn HP'sini %.2f yaptýn.", id, hp);
                } else return Dialog_Show(playerid, DialogAracDuzenOnay, DIALOG_STYLE_INPUT, "Araç Yaratma Menüsü", "0 üstü bir deðer girin.\nAracýn yeni canýný aþaðýdaki kutuya girin:", "Seç", "<<Geri");
            }
            case 8: {
                new Float:hp = floatstr(inputtext);
                if(hp >= 0.0) {
                    VehicleInfo[id][vEngineHealth] = hp;
                    SunucuMesaji(playerid, "%d ID'li aracýn motor ömrünü %.2f yaptýn.", id, hp);
                } else return Dialog_Show(playerid, DialogAracDuzenOnay, DIALOG_STYLE_INPUT, "Araç Yaratma Menüsü", "0 üstü bir deðer girin.\nAracýn yeni motor ömrünü aþaðýdaki kutuya girin:", "Seç", "<<Geri");
            }
            case 9: {
                new Float:hp = floatstr(inputtext);
                if(hp >= 0.0) {
                    VehicleInfo[id][vBatteryHealth] = hp;
                    SunucuMesaji(playerid, "%d ID'li aracýn akü ömrünü %.2f yaptýn.", id, hp);
                } else return Dialog_Show(playerid, DialogAracDuzenOnay, DIALOG_STYLE_INPUT, "Araç Yaratma Menüsü", "0 üstü bir deðer girin.\nAracýn yeni akü ömrünü aþaðýdaki kutuya girin:", "Seç", "<<Geri");
            }
            case 10: {
                if(IsNumeric(inputtext)) {
                    if(strlen(inputtext) > 0) {
                        new benzin = strval(inputtext);
                        VehicleInfo[id][vFuel] = benzin;
                        SunucuMesaji(playerid, "%d ID'li aracýn benzinini %d yaptýn.", id, benzin);
                    } else return Dialog_Show(playerid, DialogAracDuzenOnay, DIALOG_STYLE_INPUT, "Araç Yaratma Menüsü", "Kutu boþ býrakýlamaz.\nAracýn yeni benzinini aþaðýdaki kutuya girin:", "Seç", "<<Geri");
                } else return Dialog_Show(playerid, DialogAracDuzenOnay, DIALOG_STYLE_INPUT, "Araç Yaratma Menüsü", "Sayýsal deðer girin.\nAracýn yeni benzinini aþaðýdaki kutuya girin:", "Seç", "<<Geri");
            }
            case 11: {
                new fiyat = strval(inputtext);
                VehicleInfo[id][vPrice] = fiyat;
                SunucuMesaji(playerid, "%d ID'li aracýn fiyatýný $%d yaptýn.", id, fiyat);
            }
            case 12: {
                new interior = strval(inputtext);
                VehicleInfo[id][vInterior] = interior;
                LinkVehicleToInterior(id, interior);
                SunucuMesaji(playerid, "%d ID'li aracýn interiorunu %d yaptýn.", id, interior);
            }
            case 13: {
                new vw = strval(inputtext);
                VehicleInfo[id][vWorld] = vw;
                SetVehicleVirtualWorld(id, vw);
                SunucuMesaji(playerid, "%d ID'li aracýn virtual world'ünü %d yaptýn.", id, vw);
            }
            case 14: {
                if(!isnull(inputtext)) {
                    if(IsNumeric(inputtext)) {
                        if(strval(inputtext) >= 0 && strval(inputtext) < sizeof(Jobs)) {
                            new meslek = strval(inputtext);
                            VehicleInfo[id][vJob] = meslek;
                            VehicleInfo[id][vOwner] = -1;
                            SunucuMesaji(playerid, "%d ID'li aracýn mesleðini %d yaptýn.", id, meslek);
                        } else return Dialog_Show(playerid, DialogAracDuzenOnay, DIALOG_STYLE_INPUT, "Araç Yaratma Menüsü", "0 ile %d arasý bir deðer girin.\nAracýn yeni mesleðini aþaðýdaki kutuya girin:", "{199691}Seç", "{199691}<<Geri", sizeof(Jobs));
                    } else return Dialog_Show(playerid, DialogAracDuzenOnay, DIALOG_STYLE_INPUT, "Araç Yaratma Menüsü", "Sayýsal deðer girin.\nAracýn yeni mesleðini aþaðýdaki kutuya girin:", "Seç", "<<Geri");
                } else return Dialog_Show(playerid, DialogAracDuzenOnay, DIALOG_STYLE_INPUT, "Araç Yaratma Menüsü", "Kutu boþ býrakýlamaz.\nAracýn yeni mesleðini aþaðýdaki kutuya girin:", "Seç", "<<Geri");
            }
            case 15: {
                if(!isnull(inputtext)) {
                    if(IsNumeric(inputtext)) {
                        if(strval(inputtext) >= 0 && strval(inputtext) <= 3) {
                            new seviye = strval(inputtext);
                            VehicleInfo[id][vAlarm] = seviye;
                            SunucuMesaji(playerid, "%d ID'li aracýn alarm seviyesini %d yaptýn.", id, seviye);
                        } else return Dialog_Show(playerid, DialogAracDuzenOnay, DIALOG_STYLE_INPUT, "Araç Yaratma Menüsü", "0 ile 3 arasý bir deðer girin.\nAracýn yeni alarm seviyesini aþaðýdaki kutuya girin:", "Seç", "<<Geri");
                    } else return Dialog_Show(playerid, DialogAracDuzenOnay, DIALOG_STYLE_INPUT, "Araç Yaratma Menüsü", "Sayýsal deðer girin.\nAracýn yeni alarm seviyesini aþaðýdaki kutuya girin:", "Seç", "<<Geri");
                } else return Dialog_Show(playerid, DialogAracDuzenOnay, DIALOG_STYLE_INPUT, "Araç Yaratma Menüsü", "Kutu boþ býrakýlamaz.\nAracýn yeni alarm seviyesini aþaðýdaki kutuya girin:", "Seç", "<<Geri");
            }
            case 16: {
                if(!isnull(inputtext)) {
                    if(IsNumeric(inputtext)) {
                        if(strval(inputtext) >= 0 && strval(inputtext) <= 3) {
                            new seviye = strval(inputtext);
                            VehicleInfo[id][vDoorLevel] = seviye;
                            static const levelHealth[4] = {120, 300, 500, 1000};
                            new levelDoor = VehicleInfo[id][vDoorLevel];
                            VehicleInfo[id][vDoorHealth] = levelHealth[levelDoor];
                            SunucuMesaji(playerid, "%d ID'li aracýn alarm seviyesini %d yaptýn.", id, seviye);
                        } else return Dialog_Show(playerid, DialogAracDuzenOnay, DIALOG_STYLE_INPUT, "Araç Yaratma Menüsü", "0 ile 3 arasý bir deðer girin.\nAracýn yeni kilit seviyesini aþaðýdaki kutuya girin:", "Seç", "<<Geri");
                    } else return Dialog_Show(playerid, DialogAracDuzenOnay, DIALOG_STYLE_INPUT, "Araç Yaratma Menüsü", "Sayýsal deðer girin.\nAracýn yeni kilit seviyesini aþaðýdaki kutuya girin:", "Seç", "<<Geri");
                } else return Dialog_Show(playerid, DialogAracDuzenOnay, DIALOG_STYLE_INPUT, "Araç Yaratma Menüsü", "Kutu boþ býrakýlamaz.\nAracýn yeni kilit seviyesini aþaðýdaki kutuya girin:", "Seç", "<<Geri");
            }
        }
        DeletePVar(playerid, "AracDuzenlemeList");
        SaveVehicle(id);
        AracDuzenlemeDiyalogunuGoster(playerid, id);
        LogYaz(playerid, "/yaracmenu", -1, id);
    } else return AracDuzenlemeDiyalogunuGoster(playerid, GetPVarInt(playerid, "AracDuzenlenenID"));
    return 1;
}

Dialog:DialogAracYaratmaID(playerid, response, listitem, inputtext[]) {
    if(response) {
        if(strlen(inputtext) > 0) {
            new model[32],
                COLOR_one = -1,
                COLOR_two = -1,
                siren;

            sscanf(inputtext, "s[32]ddD(0)", model, COLOR_one, COLOR_two, siren);
            new modelid = (GetVehicleID(model) != -1) ? GetVehicleID(model) : strval(model),
                Float:x,
                Float:y,
                Float:z,
                Float:a,
                vid;

            if(modelid < 400 || modelid > 611)return
                Dialog_Show(playerid, DialogAracYaratmaID, DIALOG_STYLE_INPUT, "Araç Yaratma Menüsü", "Bilinmeyen araç ID'si girdiniz.\nLütfen yaratmak istediðiniz aracý <id/isim> <renk 1> <renk 2> <siren(0-1)> formatýnda girin. Örnekler:\n{26E6DD}Örnek 1 - Sirenli Tamamen Siyah LSPD: {FFFFFF}LSPD 0 0 1\n{26E6DD}Örnek 2 - Sirensiz Tamamen Siyah LSPD: {FFFFFF}LSPD 0 0 0", "{199691}Seç","{199691}Çýkýþ");
            if(COLOR_one == -1 || COLOR_two == -1) return Dialog_Show(playerid, DialogAracYaratmaID, DIALOG_STYLE_INPUT, "Araç Yaratma Menüsü", "Hatalý renk kodu girdiniz.\nLütfen yaratmak istediðiniz aracý <id/isim> <renk 1> <renk 2> <siren(0-1)> formatýnda girin. Örnekler:\n{26E6DD}Örnek 1 - Sirenli Tamamen Siyah LSPD: {FFFFFF}LSPD 0 0 1\n{26E6DD}Örnek 2 - Sirensiz Tamamen Siyah LSPD: {FFFFFF}LSPD 0 0 0", "{199691}Seç","{199691}Çýkýþ");
            GetPlayerPos(playerid, x, y, z);
            GetPlayerFacingAngle(playerid, a);

            vid = CreateVehicle(modelid, x, y+2.0, z, a, COLOR_one, COLOR_two, -1, siren);

            VehicleInfo[vid][vPaintjob] = 3;
            VehicleInfo[vid][vSpawnEdildi] = 1;
            VehicleInfo[vid][vDestroyed] = false;
            VehicleInfo[vid][vEngineHealth] = 1000.0;
            VehicleInfo[vid][vBatteryHealth] = 1000.0;
            VehicleInfo[vid][vHealth] = 1000.0;
            VehicleInfo[vid][vMaxHealth] = 1000.0;
            VehicleInfo[vid][vDoorHealth] = 120.0;
            VehicleInfo[vid][vEngine] = 1;
            VehicleInfo[vid][vModel] = modelid;
            VehicleInfo[vid][vFaction] = INVALID_VEHICLE_ID;
            VehicleInfo[vid][vJob] = -1;
            VehicleInfo[vid][vFirstColor] = COLOR_one;
            VehicleInfo[vid][vSecondColor] = COLOR_two;
            VehicleInfo[vid][vSpawnPosX] = x;
            VehicleInfo[vid][vSpawnPosY] = y;
            VehicleInfo[vid][vSpawnPosZ] = z;
            VehicleInfo[vid][vSpawnPosA] = a;
            VehicleInfo[vid][vELM] = false;
            VehicleInfo[vid][vFuel] = 100;
            VehicleInfo[vid][vScript] = vid;
            VehicleInfo[vid][vOwner] = PlayerInfo[playerid][pID];
            VehicleInfo[vid][vWorld] = GetPlayerVirtualWorld(playerid);
            VehicleInfo[vid][vInterior] = GetPlayerInterior(playerid);
            //VehicleInfo[vid][vRehine][0] = -1;
            //VehicleInfo[vid][vRehine][1] = -1;
            //VehicleInfo[vid][vRehine][2] = -1;
            VehicleInfo[vid][vCeset][0] = -1;
            VehicleInfo[vid][vCeset][1] = -1;
            VehicleInfo[vid][vCeset][2] = -1;
            VehicleInfo[vid][vSigortaSeviyesi] = 0;
            VehicleInfo[vid][vObje] = VEHICLE_PARAMS_OFF;
            VehicleInfo[vid][vVergi] = 0;
            Vehicle_Respray(vid);

            SetVehicleVirtualWorld(vid, VehicleInfo[vid][vWorld]);
            LinkVehicleToInterior(vid, VehicleInfo[vid][vInterior]);

            SendAdminAlert(false, COLOR_ADMIN, "AdmCmd: %s, %d ID'sinde bir araç oluþturur.", ReturnRoleplayName(playerid), vid);

            VehicleInfo[vid][vSpawnEdildi] = 1;
            LogYaz(playerid, "/yarac", -1, vid);

            Iter_Add(Vehicles, vid);
            // new query[500];
            mysql_format(ourConnection, queryx, sizeof(queryx), "INSERT INTO vehicles (world, interior, job, plate, model, color0, color1, faction, pos_x, pos_y, pos_z, pos_a, health, owner_id) VALUES ('%d', '%d', '%d', '%e', '%d', '%d', '%d', '%d', '%f', '%f', '%f', '%f', '1000.0', '%d')",
            VehicleInfo[vid][vWorld],
            VehicleInfo[vid][vInterior],
            VehicleInfo[vid][vJob],
            VehicleInfo[vid][vPlate],
            VehicleInfo[vid][vModel],
            VehicleInfo[vid][vFirstColor],
            VehicleInfo[vid][vSecondColor],
            VehicleInfo[vid][vFaction],
            VehicleInfo[vid][vSpawnPosX],
            VehicleInfo[vid][vSpawnPosY],
            VehicleInfo[vid][vSpawnPosZ],
            VehicleInfo[vid][vSpawnPosA],
            VehicleInfo[vid][vOwner]);

            mysql_tquery(ourConnection, queryx, "OnQueryFinished", "dd", vid, THREAD_CREATE_VEHICLE);
            VehicleInfo[vid][vTemporary] = 0;
        } else return Dialog_Show(playerid, DialogAracYaratmaID, DIALOG_STYLE_INPUT, "Araç Yaratma Menüsü", "Kutu boþ býrakýlamaz.\n{FFFFFF}Lütfen yaratmak istediðiniz aracý <id/isim> <renk 1> <renk 2> <siren(0-1)> formatýnda girin. Örnekler:\n{26E6DD}Örnek 1 - Sirenli Tamamen Siyah LSPD: {FFFFFF}LSPD 0 0 1\n{26E6DD}Örnek 2 - Sirensiz Tamamen Siyah LSPD: {FFFFFF}LSPD 0 0 0", "{199691}Seç","{199691}Çýkýþ");
    }
    return 1;
}

Dialog:DialogATMOlusturSecenek(playerid, response, listitem, inputtext[]) {
    if(response) {
        SetPVarInt(playerid, "ATMOlusturuyor", 1);
        ATMOlustur(playerid);
    }
    else {
        ATMOlustur(playerid);
    }
    return 1;
}

Dialog:DialogATM(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        switch(listitem)
        {
            case 0,1:
            {
                new string[300];
                format(string, sizeof string, "Bireysel Hesap\t{00cc00}$%d\nMaaþ Hesabý\t{00cc00}$%d\nPara yatýr\tKiþisel hesabýnýza para yatýrýn.\nPara çek\tKiþisel hesabýnýzdan para çekin.\nMaaþ Çek\tMaaþ hesabýnýzdan para çekin.\nPara Transferi\tYüzde 10'luk bir kesinti ile kiþisel hesabýnýzdan para transferi yapýn.", PlayerInfo[playerid][pCashBank], PlayerInfo[playerid][pPaycheck]);
                Dialog_Show(playerid, DialogATM, DIALOG_STYLE_TABLIST_HEADERS, "ATM", "Seçenek\tAçýklama\n%s", "Seç", "Ýptal", string);
            }
            case 2: Dialog_Show(playerid, DialogATMParaYatir, DIALOG_STYLE_INPUT, "ATM", "Lütfen yatýrmak istediðiniz miktarý sayýsal olarak aþaðýya girin, þu an üstünüzde $%d var:", "Tamam", "<<Geri", PlayerInfo[playerid][pCash]);
            case 3: Dialog_Show(playerid, DialogATMParaCek, DIALOG_STYLE_INPUT, "ATM", "Lütfen çekmek istediðiniz miktarý sayýsal olarak aþaðýya girin, þu an banka hesabýnýzda $%d var:", "Tamam", "<<Geri", PlayerInfo[playerid][pCashBank]);
            case 4:
            {
                new amount;
                if(PlayerInfo[playerid][pPaycheck] <= 0)
                    return HataMesajiC(playerid, "Maaþ hesabýnýzda bulunan tutar yetersiz.");

                amount = PlayerInfo[playerid][pPaycheck];
                PlayerInfo[playerid][pPaycheck] = 0;
                OAC_GivePlayerMoney(playerid, amount);

                SunucuMesaji(playerid, "Maaþýný çektin. ($%d)", amount);
                if(amount > 2499)
                {
                    LogYaz(playerid, "/paracek maas", -1, amount);
                }
            }
            case 5:
            {
                Dialog_Show(playerid, ATMHavale, DIALOG_STYLE_INPUT, "ATM", "Lütfen havale iþlemi yapacaðýnýz kiþinin adýný girin.", "Tamam", "Geri");
            }
        }
    }
    return 1;
}

Dialog:ATMHavale(playerid, response, listitem, inputtext[])
{
    if(!response) pc_cmd_atm(playerid);

    if(response)
    {
        if(isnull(inputtext) || IsNumeric(inputtext) || strlen(inputtext) > 24)
            return Dialog_Show(playerid, ATMHavale, DIALOG_STYLE_INPUT, "ATM", "Lütfen havale iþlemi yapacaðýnýz kiþinin adýný girin.", "Tamam", "Geri");

        SetPVarString(playerid, "HavaleYapiyorum", inputtext);
        Dialog_Show(playerid, ATMHavaleDevam, DIALOG_STYLE_INPUT, "ATM", "Lütfen %s kiþisine yapacaðýnýz havale miktarýný girin.", "Tamam", "Geri", inputtext);
    }
    return 1;
}

Dialog:ATMHavaleDevam(playerid, response, listitem, inputtext[])
{
    if(!response) return DeletePVar(playerid, "HavaleYapiyorum");
    if(response)
    {
        new name[MAX_PLAYER_NAME];
        GetPVarString(playerid, "HavaleYapiyorum", name, 24);

        if(!IsNumeric(inputtext))
            return Dialog_Show(playerid, ATMHavaleDevam, DIALOG_STYLE_INPUT, "ATM", "Sayýsal bir deðer girin.\nLütfen %s kiþisine yapacaðýnýz havale miktarýný girin.", "Tamam", "Geri", name);

        new amount = strval(inputtext) - (strval(inputtext) * 10) / 100;

        if(strval(inputtext) < 10000 || amount > PlayerInfo[playerid][pCashBank])return
            SunucuMesaji(playerid, "ATM'lerden en az $10,000 ve en çok banka hesabýnýzda olan miktarý atabilirsiniz.");

        foreach(new i : Player) if(IsPlayerConnected(i) && !strcmp(ReturnName(i), name, false) && i != playerid)
        {
            LogYaz(playerid, "/transfer", i, amount);

            SendFormattedMessage(i, COLOR_WHITE, "%s banka hesabýna $%d transfer etti.", ReturnRoleplayName(playerid), amount);
            SunucuMesaji(playerid, "%s adlý oyuncuya yüzde 10'luk bir kesinti ile $%d transfer ettin.", ReturnRoleplayName(i), amount);

            ArtanPara(i, amount);
            EksilenPara(playerid, -strval(inputtext));
            PlayerInfo[i][pCashBank] += amount;
            return PlayerInfo[playerid][pCashBank] -= strval(inputtext);
        }

        mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT * FROM characters WHERE LOWER(char_name) = LOWER('%e') AND banned = 0 AND deleted = 0 AND deleted_at IS NULL", name);
        mysql_tquery(ourConnection, queryx, "OnTransferPlayerSearch", "dd", playerid, amount);
        DeletePVar(playerid, "HavaleYapiyorum");
    }
    return 1;
}

Dialog:DialogATMParaYatir(playerid, response, listitem, inputtext[])
{
    if(response) {
        if(!isnull(inputtext)) {
            if(IsNumeric(inputtext)) {
                if(strval(inputtext) > 0 && strval(inputtext) <= PlayerInfo[playerid][pCash]) {
                    AC_GivePlayerMoney(playerid, -strval(inputtext), "/atm");
                    PlayerInfo[playerid][pCashBank] += strval(inputtext);
                    SunucuMesaji(playerid, "Banka hesabýnýza $%d yatýrdýnýz, yeni bakiyeniz $%d.", strval(inputtext), PlayerInfo[playerid][pCashBank]);
                    new string[300];
                    format(string, sizeof string, "Bireysel Hesap\t{00cc00}$%d\nMaaþ Hesabý\t{00cc00}$%d\nPara yatýr\tKiþisel hesabýnýza para yatýrýn.\nPara çek\tKiþisel hesabýnýzdan para çekin.\nMaaþ Çek\tMaaþ hesabýnýzdan para çekin.", PlayerInfo[playerid][pCashBank], PlayerInfo[playerid][pPaycheck]);
                    Dialog_Show(playerid, DialogATM, DIALOG_STYLE_TABLIST_HEADERS, "ATM", "Seçenek\tAçýklama\n%s", "Seç", "Ýptal", string);
                } else return Dialog_Show(playerid, DialogATMParaYatir, DIALOG_STYLE_INPUT, "ATM", "En az 0, en çok üstünüzdeki miktar kadar para yatýrabilirsiniz.\nLütfen yatýrmak istediðiniz miktarý sayýsal olarak aþaðýya girin, þu an üstünüzde $%d var:", "Tamam", "<<Geri", PlayerInfo[playerid][pCash]);
            } else return Dialog_Show(playerid, DialogATMParaYatir, DIALOG_STYLE_INPUT, "ATM", "Sayýsal deðer girin.\nLütfen yatýrmak istediðiniz miktarý sayýsal olarak aþaðýya girin, þu an üstünüzde $%d var:", "Tamam", "<<Geri", PlayerInfo[playerid][pCash]);
        } else return Dialog_Show(playerid, DialogATMParaYatir, DIALOG_STYLE_INPUT, "ATM", "Kutu boþ býrakýlamaz.\nLütfen yatýrmak istediðiniz miktarý sayýsal olarak aþaðýya girin, þu an üstünüzde $%d var:", "Tamam", "<<Geri", PlayerInfo[playerid][pCash]);
    } else {
        new string[300];
        format(string, sizeof string, "Bireysel Hesap\t{00cc00}$%d\nMaaþ Hesabý\t{00cc00}$%d\nPara yatýr\tKiþisel hesabýnýza para yatýrýn.\nPara çek\tKiþisel hesabýnýzdan para çekin.\nMaaþ Çek\tMaaþ hesabýnýzdan para çekin.", PlayerInfo[playerid][pCashBank], PlayerInfo[playerid][pPaycheck]);
        Dialog_Show(playerid, DialogATM, DIALOG_STYLE_TABLIST_HEADERS, "ATM", "Seçenek\tAçýklama\n%s", "Seç", "Ýptal", string);
    }
    return 1;
}

Dialog:DialogATMParaCek(playerid, response, listitem, inputtext[]) {
    if(response) {
        if(!isnull(inputtext)) {
            if(IsNumeric(inputtext)) {
                if(strval(inputtext) > 0 && strval(inputtext) <= PlayerInfo[playerid][pCashBank]) {
                    if(strval(inputtext) % 5 == 0) {
                        if(strval(inputtext) <= 50000) {
                            PlayerInfo[playerid][pCashBank] -= strval(inputtext);
                            AC_GivePlayerMoney(playerid, strval(inputtext), "/atm");
                            SunucuMesaji(playerid, "Banka hesabýnýzdan $%d çektiniz, yeni bakiyeniz $%d.", strval(inputtext), PlayerInfo[playerid][pCashBank]);
                            new string[300];
                            format(string, sizeof string, "Bireysel Hesap\t{00cc00}$%d\nMaaþ Hesabý\t{00cc00}$%d\nPara yatýr\tKiþisel hesabýnýza para yatýrýn.\nPara çek\tKiþisel hesabýnýzdan para çekin.\nMaaþ Çek\tMaaþ hesabýnýzdan para çekin.", PlayerInfo[playerid][pCashBank], PlayerInfo[playerid][pPaycheck]);
                            Dialog_Show(playerid, DialogATM, DIALOG_STYLE_TABLIST_HEADERS, "ATM", "Seçenek\tAçýklama\n%s", "Seç", "Ýptal", string);
                        } else return Dialog_Show(playerid, DialogATMParaCek, DIALOG_STYLE_INPUT, "ATM", "Ayný anda en fazla $50.000 çekebilirsiniz.\nLütfen çekmek istediðiniz miktarý sayýsal olarak aþaðýya girin, þu an banka hesabýnýzda $%d var:", "Tamam", "<<Geri", PlayerInfo[playerid][pCashBank]);
                    } else return Dialog_Show(playerid, DialogATMParaCek, DIALOG_STYLE_INPUT, "ATM", "5 ve 5'in katlarýný çekebilirsiniz.\nLütfen çekmek istediðiniz miktarý sayýsal olarak aþaðýya girin, þu an banka hesabýnýzda $%d var:", "Tamam", "<<Geri", PlayerInfo[playerid][pCashBank]);
                } else return Dialog_Show(playerid, DialogATMParaCek, DIALOG_STYLE_INPUT, "ATM", "En az 0, en çok banka hesabýnýzdaki miktar kadar para çekebilirsiniz.\nLütfen çekmek istediðiniz miktarý sayýsal olarak aþaðýya girin, þu an banka hesabýnýzda $%d var:", "Tamam", "<<Geri", PlayerInfo[playerid][pCashBank]);
            } else return Dialog_Show(playerid, DialogATMParaCek, DIALOG_STYLE_INPUT, "ATM", "Sayýsal deðer girin.\nLütfen çekmek istediðiniz miktarý sayýsal olarak aþaðýya girin, þu an banka hesabýnýzda $%d var:", "Tamam", "<<Geri", PlayerInfo[playerid][pCashBank]);
        } else return Dialog_Show(playerid, DialogATMParaCek, DIALOG_STYLE_INPUT, "ATM", "Kutu boþ býrakýlamaz.\nLütfen çekmek istediðiniz miktarý sayýsal olarak aþaðýya girin, þu an banka hesabýnýzda $%d var:", "Tamam", "<<Geri", PlayerInfo[playerid][pCashBank]);
    } else {
        new string[300];
        format(string, sizeof string, "Bireysel Hesap\t{00cc00}$%d\nMaaþ Hesabý\t{00cc00}$%d\nPara yatýr\tKiþisel hesabýnýza para yatýrýn.\nPara çek\tKiþisel hesabýnýzdan para çekin.\nMaaþ Çek\tMaaþ hesabýnýzdan para çekin.", PlayerInfo[playerid][pCashBank], PlayerInfo[playerid][pPaycheck]);
        Dialog_Show(playerid, DialogATM, DIALOG_STYLE_TABLIST_HEADERS, "ATM", "Seçenek\tAçýklama\n%s", "Seç", "Ýptal", string);
    }
    return 1;
}

Dialog:DialogEnvanter(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        if(!strcmp(Inventory_ReturnString(playerid, ENTITY_TYPE_PLAYER, listitem), "Boþ (0)", true))
            return 1;

        SetPVarInt(playerid, "EnvanterSlot", listitem);
        SunucuMesaji(playerid, "%s isimli eþyayý seçtiniz.", Inventory_ReturnString(playerid, ENTITY_TYPE_PLAYER, listitem));
        Dialog_Show(playerid, DialogEnvanterSecenek, DIALOG_STYLE_LIST, "Envanter", "Eþyayý kullan\nEþyayý ver\nEþyayý vermekten vazgeç\nEþyayý araca yerleþtir\nEþyayý eve yerleþtir\nEþyayý yere at\nEþyayý imha et", "Seç", "Ýptal");
    }
    return 1;
}

Dialog:DialogEnvanterSecenek(playerid, response, listitem, inputtext[]) {
    if(response) {
        switch(listitem) {
            case 0:
            { // kullan
                new slot = GetPVarInt(playerid, "EnvanterSlot");
                if(!PlayerInfo[playerid][pInvList][slot])return
                    HataMesajiC(playerid, "Boþ slot.");

                PlayerInfo[playerid][pItemID] = slot;
                Inventory_UseItem(playerid, slot);
                EnvanterIDDuzelt(playerid, slot);
            }
            case 1: { // ver
                Dialog_Show(playerid, DialogEnvanterVerID, DIALOG_STYLE_INPUT, "Envanter", "Bu eþyayý kime vermek istediðinizi yazýn(ID ya da isim olarak):", "Tamam", "<<Geri");
            }
            case 2: { // vermekten vazgeç
                new id = PlayerInfo[playerid][pGiveItem], slot = GetPVarInt(playerid, "EnvanterSlot");

                if(PlayerInfo[playerid][pFactionDuty])return
                    HataMesajiC(playerid, "Ýþbaþýnda envanterine eriþemezsin.");

                if(id == -1)return
                    HataMesajiC(playerid, "Kimseye eþya verme isteði göndermedin.");

                if(PlayerInfo[playerid][pItemID] != slot)return
                    SunucuMesajiC(playerid, "Bu slotta eþya yok.");

                if(IsPlayerConnected(id) && PlayerInfo[id][pGiveItem] == playerid)
                {
                    HataMesaji(id, "%s nesne iletme isteðini iptal etti.", ReturnRoleplayName(playerid));
                    PlayerInfo[id][pAmount] = 0;
                    PlayerInfo[id][pGiveItem] = -1;
                }
                BasariMesaji(playerid, "Eþya verme isteðini iptal ettin.");

                PlayerInfo[playerid][pItemID] = -1;
                PlayerInfo[playerid][pGiveItem] = -1;
            }
            case 3: { // araca yerleþtir
                new slot = GetPVarInt(playerid, "EnvanterSlot"), listid, type;
                listid = PlayerInfo[playerid][pInvList][slot];
                type = InventoryObjects[listid][invType];
                if(type == ITEM_WEAPON || type == ITEM_CLOTHES || type == ITEM_PHONE)
                {
                    if(PlayerInfo[playerid][pFactionDuty])return
                    SunucuMesajiC(playerid, "Ýþbaþýnda envanterine eriþemezsin.");

                    if(PlayerInfo[playerid][pEditingMode])return 1;

                    if(!PlayerInfo[playerid][pInvList][slot])return
                        HataMesajiC(playerid, "Boþ slot.");

                    new vehicleid = GetNearestVehicle(playerid);

                    if(vehicleid == -1)return
                        HataMesajiC(playerid, "Bir araca yakýn deðilsin.");

                    if(VehicleInfo[vehicleid][vTemporary])
                        return HataMesajiC(playerid, "Veritabanýnda olmayan araca eþya koyamazsýn.");

                    if(!IsPlayerInAnyVehicle(playerid) && !VehicleInfo[vehicleid][vEngine] && GetPlayerState(playerid) != PLAYER_STATE_DRIVER)return
                        HataMesajiC(playerid, "Motoru açýk bir araçta sürücü olmalýsýn.");

                    new vCapacity = Trunk_GetSlot(vehicleid);

                    if(Trunk_GetCount(vehicleid) >= vCapacity)return
                        SunucuMesajiC(playerid, "Envanterde boþ yer yok.");

                    new id = PlayerInfo[playerid][pInvAmount][slot];

                    SunucuMesaji(playerid, "Aracýnýn içine '%s' koydun. (Araç ID: %d)", Inventory_ReturnString(playerid, ENTITY_TYPE_PLAYER, slot, id), vehicleid);

                    Trunk_AddItem(playerid, vehicleid, Trunk_FreeID(vehicleid), slot, id);

                    LogYaz(playerid, "/envanter bagaj", -1, VehicleInfo[vehicleid][vID], listid);
                    EnvanterIDDuzelt(playerid, slot);
                    SaveCharacter(playerid);
                    SaveVehicle(vehicleid);
                }
                else if(PlayerInfo[playerid][pInvAmount][slot] > 1)
                {
                    if(type != ITEM_WEAPON || type != ITEM_CLOTHES || type != ITEM_PHONE)
                        Dialog_Show(playerid, DialogEnvanterAracMiktar, DIALOG_STYLE_INPUT, "Envanter", "Araca bu eþyadan kaç tane koymak istediðinizi yazýn, þu an sizde bu eþyadan %d adet var:", "Tamam", "<<Geri", PlayerInfo[playerid][pInvAmount][slot]);
                } else {
                    new vehicleid = GetNearestVehicle(playerid);
                    new vCapacity = Trunk_GetSlot(vehicleid);

                    if(Trunk_GetCount(vehicleid) >= vCapacity)return
                        SunucuMesajiC(playerid, "Envanterde boþ yer yok.");

                    new id = PlayerInfo[playerid][pInvAmount][slot];

                    SunucuMesaji(playerid, "Aracýnýn içine '%s' koydun. (Araç ID: %d)", Inventory_ReturnString(playerid, ENTITY_TYPE_PLAYER, slot, id), vehicleid);

                    Trunk_AddItem(playerid, vehicleid, Trunk_FreeID(vehicleid), slot, id);

                    LogYaz(playerid, "/envanter bagaj", -1, VehicleInfo[vehicleid][vID], listid);
                    EnvanterIDDuzelt(playerid, slot);
                    SaveCharacter(playerid);
                    SaveVehicle(vehicleid);
                }
            }
            case 4: { // eve yerleþtir
                new slot = GetPVarInt(playerid, "EnvanterSlot"), listid, type;
                listid = PlayerInfo[playerid][pInvList][slot];
                type = InventoryObjects[listid][invType];
                if(type == ITEM_WEAPON || type == ITEM_CLOTHES || type == ITEM_PHONE)
                {
                    if(PlayerInfo[playerid][pFactionDuty])return
                    SunucuMesajiC(playerid, "Ýþbaþýnda envanterine eriþemezsin.");

                    if(PlayerInfo[playerid][pEditingMode])return 1;

                    if(!PlayerInfo[playerid][pInvList][slot])return
                        HataMesajiC(playerid, "Boþ slot.");

                    new houseid = GetPlayerMenuHouse(playerid);

                    if(houseid == -1)return
                        SunucuMesajiC(playerid, "Evin içerisinde deðilsin.");

                    if(GetPlayerMenuHouse(playerid) != houseid)return
                        SunucuMesajiC(playerid, "Evde deðilsin.");

                    if(Storage_GetCount(houseid) >= MAX_STORAGE_ITEMS)return
                        SunucuMesajiC(playerid, "Envanterde boþ yer yok.");

                    new id = PlayerInfo[playerid][pInvAmount][slot];
                    SunucuMesaji(playerid, "'%s' eþyaný evine yerleþtirdin.", Inventory_ReturnString(playerid, ENTITY_TYPE_PLAYER, slot, id));

                    Storage_AddItem(playerid, houseid, Storage_FreeID(houseid), slot, id);

                    LogYaz(playerid, "/envanter evekoy", -1, houseid, listid);
                    EnvanterIDDuzelt(playerid, slot);
                    SaveCharacter(playerid);
                    SaveHouse(houseid);
                } else
                    Dialog_Show(playerid, DialogEnvanterEvMiktar, DIALOG_STYLE_INPUT, "Envanter", "Eve bu eþyadan kaç tane koymak istediðinizi yazýn, þu an sizde bu eþyadan %d adet var:", "Tamam", "<<Geri", PlayerInfo[playerid][pInvAmount][slot]);
            }
            case 5:
            { // at
                if(SunucuBilgi[AntiDinamikObje])
                    return HataMesaji(playerid, "Bu sistem geçici olarak geliþtirici ekip tarafýndan pasife çekildi.");
                    
                Dialog_Show(playerid, DialogEnvanterAtOnay, DIALOG_STYLE_INPUT, "Envanter", "Bu eþyayý yere atmak için aþaðýdaki kutucuða 'EVET' yazmalýsýnýz.\nUYARI: Yere atýlan eþyalar sistem tarafýndan silinmektedir, bu konuyla alakalý iade talepleri reddedilecektir.", "Tamam", "<<Geri");
            }
            case 6: Dialog_Show(playerid, DialogEnvanterImha, DIALOG_STYLE_INPUT, "Envanter", "Bu eþyayý imha etmek için aþaðýdaki kutucuða 'EVET' yazmanýz gerekiyor.\nBu iþlemin geri dönüþü olmayacaðýný unutmayýn!", "Onay", "Ýptal");
        }
    } else {
        EnvanterIDDuzelt(playerid, 0);
        DeletePVar(playerid, "EnvanterSlot");
        new string[1048];
        for(new x; x < MAX_INVENTORY_ITEMS; x++)
        {
            if(PlayerInfo[playerid][pInvList][x])
            {
                format(string, sizeof string, "%s\n{9999ff}%d. {FFFFFF}%s", string, x + 1, Inventory_ReturnString(playerid, ENTITY_TYPE_PLAYER, x));
            }
            else if(!PlayerInfo[playerid][pInvList][x])
            {
                format(string, sizeof string, "%s\n{9999ff}%d. {FFFFFF}Boþ slot", string, x + 1);
            }
        }
        if(GetPlayerUserKeys(playerid) > 0) SendFormattedMessage(playerid, COLOR_FADE2, "[Envanter]: {FFFFFF}%d tane anahtara sahipsin (/anahtar).", GetPlayerUserKeys(playerid));
        Dialog_Show(playerid, DialogEnvanter, DIALOG_STYLE_LIST, "Envanter", string, "Seç", "Ýptal");
    }
    return 1;
}

Dialog:DialogEnvanterEvMiktar(playerid, response, listitem, inputtext[]) {
    if(response) {
        new slot = GetPVarInt(playerid, "EnvanterSlot");
        if(strval(inputtext) > 0) {
            if(strval(inputtext) <= PlayerInfo[playerid][pInvAmount][slot]) {
                new listid, type, id = strval(inputtext);
                listid = PlayerInfo[playerid][pInvList][slot];
                type = InventoryObjects[listid][invType];
                if(PlayerInfo[playerid][pFactionDuty])return
                SunucuMesajiC(playerid, "Ýþbaþýnda envanterine eriþemezsin.");

                if(PlayerInfo[playerid][pEditingMode])return 1;

                if(!PlayerInfo[playerid][pInvList][slot])return
                    HataMesajiC(playerid, "Boþ slot.");

                new houseid = GetPlayerMenuHouse(playerid);

                if(houseid == -1)return
                    SunucuMesajiC(playerid, "Evin içerisinde deðilsin.");

                if(GetPlayerMenuHouse(playerid) != houseid)return
                    SunucuMesajiC(playerid, "Evde deðilsin.");

                if(Storage_GetCount(houseid) >= MAX_STORAGE_ITEMS)return
                    SunucuMesajiC(playerid, "Envanterde boþ yer yok.");

                switch(type)
                {
                    case ITEM_BIZ, ITEM_DRUG, ITEM_INGREDIENT:
                    {
                        if(id < 0 || id > PlayerInfo[playerid][pInvAmount][slot])return
                            SunucuMesajiC(playerid, "Envanterde boþ yer yok.");
                    }
                    case ITEM_WEAPON, ITEM_CLOTHES, ITEM_PHONE: id = PlayerInfo[playerid][pInvAmount][slot];
                }
                SunucuMesaji(playerid, "'%s' eþyaný evine yerleþtirdin.", Inventory_ReturnString(playerid, ENTITY_TYPE_PLAYER, slot, id));

                Storage_AddItem(playerid, houseid, Storage_FreeID(houseid), slot, id);

                LogYaz(playerid, "/envanter evekoy", -1, houseid, listid);
                EnvanterIDDuzelt(playerid, slot);
                SaveCharacter(playerid);
                SaveHouse(houseid);
            } else return Dialog_Show(playerid, DialogEnvanterEvMiktar, DIALOG_STYLE_INPUT, "Envanter", "Yeterince eþya yok.\nEve bu eþyadan kaç tane koymak istediðinizi yazýn, þu an sizde bu eþyadan %d adet var:", "Tamam", "<<Geri", PlayerInfo[playerid][pInvAmount][slot]);
        } else return Dialog_Show(playerid, DialogEnvanterEvMiktar, DIALOG_STYLE_INPUT, "Envanter", "En az 1 tane koyabilirsiniz.\nEve bu eþyadan kaç tane koymak istediðinizi yazýn, þu an sizde bu eþyadan %d adet var:", "Tamam", "<<Geri", PlayerInfo[playerid][pInvAmount][slot]);
    }  else return Dialog_Show(playerid, DialogEnvanterSecenek, DIALOG_STYLE_LIST, "Envanter", "Eþyayý kullan\nEþyayý ver\nEþyayý vermekten vazgeç\nEþyayý araca yerleþtir\nEþyayý eve yerleþtir\nEþyayý yere at\nEþyayý imha et", "Seç", "Ýptal");
    return 1;
}

Dialog:DialogEnvanterAracMiktar(playerid, response, listitem, inputtext[]) {
    if(response) {
        new slot = GetPVarInt(playerid, "EnvanterSlot");
        if(!isnull(inputtext))
        {
            if(strval(inputtext) > 0)
            {
                if(strval(inputtext) <= PlayerInfo[playerid][pInvAmount][slot])
                {
                    new listid, type, id = strval(inputtext);
                    listid = PlayerInfo[playerid][pInvList][slot];
                    type = InventoryObjects[listid][invType];
                    if(PlayerInfo[playerid][pFactionDuty])return
                    SunucuMesajiC(playerid, "Ýþbaþýnda envanterine eriþemezsin.");

                    if(PlayerInfo[playerid][pEditingMode])return 1;

                    if(!PlayerInfo[playerid][pInvList][slot])return
                        HataMesajiC(playerid, "Boþ slot.");

                    new vehicleid = GetNearestVehicle(playerid);

                    if(vehicleid == -1)return
                        SunucuMesajiC(playerid, "Bir araca yakýn deðilsin.");

                    if(VehicleInfo[vehicleid][vTemporary])return
                        SunucuMesaji(playerid, "Veritabanýnda olmayan araca eþya koyamazsýn.");

                    if(!IsPlayerInAnyVehicle(playerid) && !VehicleInfo[vehicleid][vEngine] && GetPlayerState(playerid) != PLAYER_STATE_DRIVER)return
                        HataMesajiC(playerid, "Motoru açýk bir araçta sürücü olmalýsýn.");

                    new vCapacity = Trunk_GetSlot(vehicleid);

                    if(Trunk_GetCount(vehicleid) >= vCapacity)return
                        SunucuMesajiC(playerid, "Envanterde boþ yer yok.");

                    switch(type)
                    {
                        case ITEM_BIZ, ITEM_DRUG, ITEM_INGREDIENT:
                        {
                            if(id < 1 || id > PlayerInfo[playerid][pInvAmount][slot])return
                                SunucuMesajiC(playerid, "Envanterde boþ yer yok.");
                        }
                        case ITEM_WEAPON, ITEM_CLOTHES, ITEM_PHONE: id = PlayerInfo[playerid][pInvAmount][slot];
                    }

                    SunucuMesaji(playerid, "Aracýnýn bagajýna '%s' koydun.", Inventory_ReturnString(playerid, ENTITY_TYPE_PLAYER, slot, id));

                    Trunk_AddItem(playerid, vehicleid, Trunk_FreeID(vehicleid), slot, id);

                    LogYaz(playerid, "/envanter bagaj", -1, VehicleInfo[vehicleid][vID], listid);
                    EnvanterIDDuzelt(playerid, slot);
                }
                else return Dialog_Show(playerid, DialogEnvanterAracMiktar, DIALOG_STYLE_INPUT, "Envanter", "Eþyadan yeterince yok.\nAraca bu eþyadan kaç tane koymak istediðinizi yazýn, þu an sizde bu eþyadan %d adet var:", "Tamam", "<<Geri", PlayerInfo[playerid][pInvAmount][slot]);
            }
            else return Dialog_Show(playerid, DialogEnvanterAracMiktar, DIALOG_STYLE_INPUT, "Envanter", "En az 1 adet yerleþtirebilirsiniz.\nAraca bu eþyadan kaç tane koymak istediðinizi yazýn, þu an sizde bu eþyadan %d adet var:", "Tamam", "<<Geri", PlayerInfo[playerid][pInvAmount][slot]);
        }
        else return Dialog_Show(playerid, DialogEnvanterAracMiktar, DIALOG_STYLE_INPUT, "Envanter", "Kutucuk boþ býrakýlamaz.\nAraca bu eþyadan kaç tane koymak istediðinizi yazýn, þu an sizde bu eþyadan %d adet var:", "Tamam", "<<Geri", PlayerInfo[playerid][pInvAmount][slot]);
    }
    else return Dialog_Show(playerid, DialogEnvanterSecenek, DIALOG_STYLE_LIST, "Envanter", "Eþyayý kullan\nEþyayý ver\nEþyayý vermekten vazgeç\nEþyayý araca yerleþtir\nEþyayý eve yerleþtir\nEþyayý yere at\nEþyayý imha et", "Seç", "Ýptal");
    return 1;
}

Dialog:DialogEnvanterVerID(playerid, response, listitem, inputtext[]) {
    if(response) {
        new id;
        if(!isnull(inputtext)) {
            sscanf(inputtext, "u", id);
            if(IsPlayerConnected(id)) {
                if(PlayerInfo[id][pLogged]) {
                    new Float:pX, Float:pY, Float:pZ;
                    GetPlayerPos(id, pX, pY, pZ);
                    if(IsPlayerInRangeOfPoint(playerid, 3.0, pX, pY, pZ)) {
                        SetPVarInt(playerid, "EnvanterOyuncuID", id);
                        new slot = GetPVarInt(playerid, "EnvanterSlot");
                        Dialog_Show(playerid, DialogEnvanterVerMiktar, DIALOG_STYLE_INPUT, "Envanter", "Bu eþyadan kaç tane vermek istediðinizi yazýn, þu an sizde bu eþyadan %d adet var:", "Tamam", "<<Geri", PlayerInfo[playerid][pInvAmount][slot]);
                    } else return Dialog_Show(playerid, DialogEnvanterVerID, DIALOG_STYLE_INPUT, "Envanter", "Oyuncuya yakýn deðilsiniz.\nBu eþyayý kime vermek istediðinizi yazýn(ID ya da isim olarak):", "Tamam", "<<Geri");
                } else return Dialog_Show(playerid, DialogEnvanterVerID, DIALOG_STYLE_INPUT, "Envanter", "Oyuncu giriþ yapmamýþ.\nBu eþyayý kime vermek istediðinizi yazýn(ID ya da isim olarak):", "Tamam", "<<Geri");
            } else return Dialog_Show(playerid, DialogEnvanterVerID, DIALOG_STYLE_INPUT, "Envanter", "Oyuncu oyunda deðil.\nBu eþyayý kime vermek istediðinizi yazýn(ID ya da isim olarak):", "Tamam", "<<Geri");
        } else return Dialog_Show(playerid, DialogEnvanterVerID, DIALOG_STYLE_INPUT, "Envanter", "Kutu boþ býrakýlamaz.\nBu eþyayý kime vermek istediðinizi yazýn(ID ya da isim olarak):", "Tamam", "<<Geri");
    } else return Dialog_Show(playerid, DialogEnvanterSecenek, DIALOG_STYLE_LIST, "Envanter", "Eþyayý kullan\nEþyayý ver\nEþyayý vermekten vazgeç\nEþyayý araca yerleþtir\nEþyayý eve yerleþtir\nEþyayý yere at\nEþyayý imha et", "Seç", "Ýptal");
    return 1;
}

Dialog:DialogEnvanterVerMiktar(playerid, response, listitem, inputtext[]) {
    if(response) {
        if(!isnull(inputtext)) {
            if(IsNumeric(inputtext)) {
                if(strval(inputtext) > 0) {
                    new slot = GetPVarInt(playerid, "EnvanterSlot"), id = GetPVarInt(playerid, "EnvanterOyuncuID"), listid, type;
                    listid = PlayerInfo[playerid][pInvList][slot];
                    type = InventoryObjects[listid][invType];
                    if(PlayerInfo[playerid][pFactionDuty])return
                    SunucuMesajiC(playerid, "Ýþbaþýnda envanterine eriþemezsin.");
                    if(!PlayerInfo[playerid][pInvList][slot])return
                        HataMesajiC(playerid, "Boþ slot.");

                    if(id == -1)
                    {
                        SendFormattedMessage(playerid, COLOR_GREY, "/envanter [%d] [ver] [id] [miktar]", slot + 1);
                        return SendClientMessageEx(playerid, COLOR_GREY, "[NOT] Miktar sadece silahlar, uyuþturucular ve iþletmelerden satýn alýnan ürünlerde kullanýlabilir.");
                    }

                    if(!IsPlayerConnected(id) || id == playerid)return
                        HataMesajiC(playerid, "Kendi kendine eþya veremezsin.");

                    if(!ProxDetectorS(3.0, playerid, id))return
                        SunucuMesajiC(playerid, "Bu oyuncuya yakýn deðilsin.");

                    if(PlayerInfo[playerid][pGiveItem] != -1) return
                        HataMesaji(playerid, "Önceden eþya isteði göndermiþsin, \"/envanter %d veriptal\" yazarak onu iptal etmelisin.", slot + 1);

                    if(gettime() < PlayerInfo[playerid][pGiveTime])return
                        SunucuMesaji(playerid, "Bu komutu kullanmadan önce biraz bekle.");

                    if(type == ITEM_WEAPON) if(PlayerInfo[playerid][pLevel] < 2) return HataMesajiC(playerid, "Bu iþlemi yapabilmek için en az 2 seviye olmalýsýnýz.");

                    if(type == ITEM_WEAPON) if(PlayerInfo[id][pLevel] < 2) return HataMesajiC(playerid, "Bu iþlemi yapabilmek için karþýnýzdaki kiþi en az 2 seviye olmalý.");

                    if(type == ITEM_WEAPON || type == ITEM_CLOTHES || type == ITEM_PHONE) PlayerInfo[playerid][pAmount] = PlayerInfo[playerid][pInvAmount][slot];
                    else
                    {
                        new amount = strval(inputtext);

                        if(amount > PlayerInfo[playerid][pInvAmount][slot] || amount <= 0)return
                            SunucuMesajiC(playerid, "Envanterde boþ yer yok.");

                        PlayerInfo[playerid][pAmount] = amount;
                    }

                    if(PlayerInfo[playerid][pMobile] != -1 && id == PlayerInfo[playerid][pPhoneID])
                        Phone_HangupCall(playerid);

                    PlayerInfo[playerid][pGiveTime] = gettime() + 2;
                    PlayerInfo[playerid][pItemID] = slot;
                    PlayerInfo[playerid][pGiveItem] = id;
                    PlayerInfo[id][pGiveItem] = playerid;

                    SunucuMesaji(playerid, "'%s' adlý eþyaný %s kiþisine vermek için istek yolladýn.", Inventory_ReturnString(playerid, ENTITY_TYPE_PLAYER, slot, PlayerInfo[playerid][pAmount]), ReturnRoleplayName(id));
                    BasariMesaji(id, "%s sana %s vermek istiyor. Kabul etmek için \"/kabulet nesne\" kullan.", ReturnRoleplayName(playerid), Inventory_ReturnString(playerid, ENTITY_TYPE_PLAYER, slot, PlayerInfo[playerid][pAmount]));
                } else {
                    new slot = GetPVarInt(playerid, "EnvanterSlot");
                    Dialog_Show(playerid, DialogEnvanterVerMiktar, DIALOG_STYLE_INPUT, "Envanter", "Miktar en az 1 olmalý.\nBu eþyadan kaç tane vermek istediðinizi yazýn, þu an sizde bu eþyadan %d adet var:", "Tamam", "<<Geri", PlayerInfo[playerid][pInvAmount][slot]);
                }
            } else {
                new slot = GetPVarInt(playerid, "EnvanterSlot");
                Dialog_Show(playerid, DialogEnvanterVerMiktar, DIALOG_STYLE_INPUT, "Envanter", "Sayýsal deðer girin.\nBu eþyadan kaç tane vermek istediðinizi yazýn, þu an sizde bu eþyadan %d adet var:", "Tamam", "<<Geri", PlayerInfo[playerid][pInvAmount][slot]);
            }
        } else {
            new slot = GetPVarInt(playerid, "EnvanterSlot");
            Dialog_Show(playerid, DialogEnvanterVerMiktar, DIALOG_STYLE_INPUT, "Envanter", "Kutu boþ býrakýlamaz.\nBu eþyadan kaç tane vermek istediðinizi yazýn, þu an sizde bu eþyadan %d adet var:", "Tamam", "<<Geri", PlayerInfo[playerid][pInvAmount][slot]);
        }
    } else return Dialog_Show(playerid, DialogEnvanterVerID, DIALOG_STYLE_INPUT, "Envanter", "Bu eþyayý kime vermek istediðinizi yazýn(ID ya da isim olarak):", "Tamam", "<<Geri");
    return 1;
}

Dialog:DialogEnvanterImha(playerid, response, listitem, inputtext[])
{
    if(!response) return 1;

    if(isnull(inputtext)) return HataMesajiC(playerid, "Hatalý onay kodu giriþi, iþlem baþarýsýz.");

    if(!strcmp("EVET", inputtext, true))
    {
        new slot = GetPVarInt(playerid, "EnvanterSlot");
        if(!PlayerInfo[playerid][pInvList][slot])return HataMesajiC(playerid, "Boþ slot.");

        Inventory_DecraseAmount(playerid, slot, PlayerInfo[playerid][pInvAmount][slot]);
        BasariMesajiC(playerid, "Belirttiðiniz envanter slotunda bulunan eþya imha edildi.");
        EnvanterIDDuzelt(playerid, slot);
        LogYaz(playerid, "/envanter imha", slot);
    }
    else HataMesajiC(playerid, "Hatalý onay kodu giriþi, iþlem baþarýsýz.");
    return 1;
}

Dialog:DialogDonatorIade(playerid, response, listitem, inputtext[])
{
    if(!response) return 1;

    if(isnull(inputtext)) return HataMesajiC(playerid, "Hatalý onay kodu giriþi, iþlem baþarýsýz.");

    if(!strcmp("EVET", inputtext, true))
    {
        if(PlayerInfo[playerid][pPremium] == 1)
        {
            PlayerInfo[playerid][pPremium] = 0;
            PlayerInfo[playerid][pCoyn] += 250;
            BasariMesajiC(playerid, "Bronze Donator iadesi yaptýðýn için 250 SA-Point hesabýna eklendi.");
        }

        if(PlayerInfo[playerid][pPremium] == 2)
        {
            PlayerInfo[playerid][pPremium] = 0;
            PlayerInfo[playerid][pCoyn] += 500;
            BasariMesajiC(playerid, "Silver Donator iadesi yaptýðýn için 500 SA-Point hesabýna eklendi.");
        }

        if(PlayerInfo[playerid][pPremium] == 3)
        {
            PlayerInfo[playerid][pPremium] = 0;
            PlayerInfo[playerid][pCoyn] += 750;
            BasariMesajiC(playerid, "Gold Donator iadesi yaptýðýn için 750 SA-Point hesabýna eklendi.");
        }
        if(PlayerInfo[playerid][pPremium] == 4)
        {
            PlayerInfo[playerid][pPremium] = 0;
            PlayerInfo[playerid][pCoyn] += 1000;
            BasariMesajiC(playerid, "Platinum Donator iadesi yaptýðýn için 1000 SA-Point hesabýna eklendi.");
        }
        if(PlayerInfo[playerid][pPremium] == 5)
        {
            PlayerInfo[playerid][pPremium] = 0;
            PlayerInfo[playerid][pCoyn] += 2000;
            BasariMesajiC(playerid, "Diamond Donator iadesi yaptýðýn için 2000 SA-Point hesabýna eklendi.");
        }
    }
    else HataMesajiC(playerid, "Hatalý onay kodu giriþi, iþlem baþarýsýz.");
    return 1;
}

Dialog:DialogEnvanterAtOnay(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        if(isnull(inputtext))
            return HataMesajiC(playerid, "Hatalý onay kodu giriþi, iþlem baþarýsýz.");
            
        if(Iter_Free(DroppedItems) >= MAX_YERDEKIESYALAR)
            return HataMesajiC(playerid, "Sunucu yerdeki eþyalar limitine ulaþtý, bunu yapamazsýnýz.");

        if(!strcmp("EVET", inputtext, true))
        {
            new slot = GetPVarInt(playerid, "EnvanterSlot"), listid, type;
            listid = PlayerInfo[playerid][pInvList][slot];
            type = InventoryObjects[listid][invType];
            if(type == ITEM_WEAPON || type == ITEM_CLOTHES || type == ITEM_PHONE)
            {
                listid = PlayerInfo[playerid][pInvList][slot];
                type = InventoryObjects[listid][invType];
                if(PlayerInfo[playerid][pFactionDuty])return
                    SunucuMesajiC(playerid, "Ýþbaþýnda envanterine eriþemezsin.");

                if(!PlayerInfo[playerid][pInvList][slot])return HataMesajiC(playerid, "Boþ slot.");

                if(InventoryObjects[listid][invObject] == 18911 && PlayerInfo[playerid][pMasked]) ToggleMask(playerid);

                if(IsPlayerInAnyVehicle(playerid) > 0)return SunucuMesaji(playerid, "Bu özelliði araçta kullanamazsýn.");

                SunucuMesaji(playerid, "Envanterinden '%s (1)' adlý eþyayý attýn. (%s)", InventoryObjects[listid][invName], ReturnDate());
                Item_Drop(playerid, slot, PlayerInfo[playerid][pInvAmount][slot]);
                LogYaz(playerid, "/envanter at", -1, listid, -1);
                EnvanterIDDuzelt(playerid, slot);
            }
            else Dialog_Show(playerid, DialogEnvanterAt, DIALOG_STYLE_INPUT, "Envanter", "Bu eþyadan kaç tane atmak istediðinizi girin, þu an sizde bu eþyadan %d adet var.\nUYARI: Yere atýlan eþyalar sistem tarafýndan silinmektedir, bu konuyla alakalý iade talepleri reddedilecektir.", "Tamam", "<<Geri", PlayerInfo[playerid][pInvAmount][slot]);
        }
        else HataMesajiC(playerid, "Hatalý onay kodu giriþi, iþlem baþarýsýz.");
    }
    return 1;
}

Dialog:DialogEnvanterAt(playerid, response, listitem, inputtext[]) {
    if(response) {
        if(IsNumeric(inputtext)) {
            if(strval(inputtext) > 0) {
                new slot = GetPVarInt(playerid, "EnvanterSlot"), listid, amount = strval(inputtext), type;
                listid = PlayerInfo[playerid][pInvList][slot];
                type = InventoryObjects[listid][invType];
                if(PlayerInfo[playerid][pFactionDuty])return
                SunucuMesajiC(playerid, "Ýþbaþýnda envanterine eriþemezsin.");

                if(!PlayerInfo[playerid][pInvList][slot])return
                    HataMesajiC(playerid, "Boþ slot.");

                if(InventoryObjects[listid][invObject] == 18911 && PlayerInfo[playerid][pMasked])
                    ToggleMask(playerid);

                if(IsPlayerInAnyVehicle(playerid) > 0)return
                    SunucuMesaji(playerid, "Bu özelliði araçta kullanamazsýn.");

                if(amount > PlayerInfo[playerid][pInvAmount][slot]) return HataMesajiC(playerid, "Bu eþyadan yeterince yok.");

                if(amount > 0) {
                    PlayerInfo[playerid][pItemID] = slot;
                    Item_Drop(playerid, slot, amount);
                } else return HataMesajiC(playerid, "Miktar en az 1 olmalý.");

                SendFormattedMessage(playerid, COLOR_GREEN, "[SA-RP] {C8C8C8}Envanterinden '%s (%d)' adlý eþyayý attýn.", InventoryObjects[listid][invName], (type == ITEM_WEAPON ||
                    type == ITEM_CLOTHES ||
                    type == ITEM_PHONE ||
                    type == ITEM_DRUG ||
                    type == ITEM_INGREDIENT) ?
                    amount : 1);

                LogYaz(playerid, "/envanter at", -1, listid, -1);
                EnvanterIDDuzelt(playerid, slot);
            } else {
                new slot = GetPVarInt(playerid, "EnvanterSlot");
                Dialog_Show(playerid, DialogEnvanterAt, DIALOG_STYLE_INPUT, "Envanter", "En az 1 adet atabilirsiniz.\nBu eþyadan kaç tane atmak istediðinizi girin, þu an sizde bu eþyadan %d adet var.\nUYARI: Yere atýlan eþyalar silinmektedir, bu konuda geri iade yapýlmayacaktýr.", "Tamam", "<<Geri", PlayerInfo[playerid][pInvAmount][slot]);
            }
        } else {
            new slot = GetPVarInt(playerid, "EnvanterSlot");
            Dialog_Show(playerid, DialogEnvanterAt, DIALOG_STYLE_INPUT, "Envanter", "Sayýsal deðer girin.\nBu eþyadan kaç tane atmak istediðinizi girin, þu an sizde bu eþyadan %d adet var\nUYARI: Yere atýlan eþyalar silinmektedir, bu konuda geri iade yapýlmayacaktýr.", "Tamam", "<<Geri", PlayerInfo[playerid][pInvAmount][slot]);
        }
    } else return Dialog_Show(playerid, DialogEnvanterSecenek, DIALOG_STYLE_LIST, "Envanter", "Eþyayý kullan\nEþyayý ver\nEþyayý vermekten vazgeç\nEþyayý araca yerleþtir\nEþyayý eve yerleþtir\nEþyayý yere at\nEþyayý imha et", "Seç", "Ýptal");
    return 1;
}

Dialog:DialogKulaklikMuzikEkle(playerid, response, listitem, inputtext[]) {
    if(response) {
        new id;
        sscanf(inputtext, "u", id);
        if(!IsPlayerConnected(id)) return Dialog_Show(playerid, DialogKulaklikMuzikEkle, DIALOG_STYLE_INPUT, "Telefondan Kulaklýkla Müzik", "Belirttiðiniz oyuncu oyunda deðil.\nBirlikte müzik dinlemek istediðiniz oyuncunun ID'sini ya da ismini girin:", "Tamam", "Ýptal");
        if(!PlayerInfo[id][pLogged]) return Dialog_Show(playerid, DialogKulaklikMuzikEkle, DIALOG_STYLE_INPUT, "Telefondan Kulaklýkla Müzik", "Belirttiðiniz oyuncu oyunda deðil.\nBirlikte müzik dinlemek istediðiniz oyuncunun ID'sini ya da ismini girin:", "Tamam", "Ýptal");
        if(BirlikteDinliyor[id] != -1) return Dialog_Show(playerid, DialogKulaklikMuzikEkle, DIALOG_STYLE_INPUT, "Telefondan Kulaklýkla Müzik", "Bu oyuncu zaten baþkasýyla þarký dinliyor.\nBirlikte müzik dinlemek istediðiniz oyuncunun ID'sini ya da ismini girin:", "Tamam", "Ýptal");
        if(GetPVarInt(id, "KulakliklaMuzik")) return Dialog_Show(playerid, DialogKulaklikMuzikEkle, DIALOG_STYLE_INPUT, "Telefondan Kulaklýkla Müzik", "Bu oyuncu zaten bir kulaklýkla müzik dinliyor.\nBirlikte müzik dinlemek istediðiniz oyuncunun ID'sini ya da ismini girin:", "Tamam", "Ýptal");
        new Float:pX, Float:pY, Float:pZ, pINT, pVW;
        GetPlayerPos(id, pX, pY, pZ);
        pINT = GetPlayerInterior(id);
        pVW = GetPlayerVirtualWorld(id);
        if(!IsPlayerInRangeOfPoint(playerid, 3.0, pX, pY, pZ) || GetPlayerInterior(playerid) != pINT || GetPlayerVirtualWorld(playerid) != pVW) return Dialog_Show(playerid, DialogKulaklikMuzikEkle, DIALOG_STYLE_INPUT, "Telefondan Kulaklýkla Müzik", "Oyuncuya yakýn deðilsiniz.\nBirlikte müzik dinlemek istediðiniz oyuncunun ID'sini ya da ismini girin:", "Tamam", "Ýptal");
        BirlikteDinlenen[id] = playerid;
        BirlikteDinlenen[playerid] = id;
        BirlikteDinliyor[id] = playerid;
        new link[128];
        GetPVarString(playerid, "KulaklikLink", link, 128);
        PlayAudioStreamForPlayer(id, link);
        SunucuMesaji(BirlikteDinlenen[playerid], "Kulaklýkla %s ile müzik dinlemeye baþladýnýz. (/dinlemebirak).", ReturnRoleplayName(playerid));
        PlayerAME(id, "telefondan kulaklýkla müzik dinlemeye baþlar.");
    }
    return 1;
}

Dialog:DialogKulaklikMuzikCikar(playerid, response, listitem, inputtext[]) {
    if(response) {
        StopAudioStreamForPlayer(BirlikteDinlenen[playerid]);
        BirlikteDinlenen[BirlikteDinlenen[playerid]] = -1;
        BirlikteDinliyor[BirlikteDinlenen[playerid]] = -1;
        SunucuMesaji(BirlikteDinlenen[playerid], "%s sizden kulaklýklarý aldý, artýk birlikte müzik dinlemiyorsunuz.", ReturnRoleplayName(playerid));
        SunucuMesaji(playerid, "Artýk %s ile birlikte müzik dinlemiyorsunuz.", ReturnRoleplayName(BirlikteDinlenen[playerid]));
        PlayerAME(BirlikteDinlenen[playerid], "kulaklýklarý kulaðýndan çýkarýr.");
        BirlikteDinlenen[playerid] = -1;
        BirlikteDinliyor[playerid] = -1;
    }
    return 1;
}

Dialog:DialogKulaklikMuzik(playerid, response, listitem, inputtext[]) {
    if(response) {
        switch(listitem) {
            case 0: {
                if(BirlikteDinlenen[playerid] == -1)
                    Dialog_Show(playerid, DialogKulaklikMuzikEkle, DIALOG_STYLE_INPUT, "Telefondan Kulaklýkla Müzik", "Birlikte müzik dinlemek istediðiniz oyuncunun ID'sini ya da ismini girin:", "Tamam", "Ýptal");
                else
                    Dialog_Show(playerid, DialogKulaklikMuzikCikar, DIALOG_STYLE_MSGBOX, "Telefondan Kulaklýkla Müzik", "Þu an %s (ID: %d) ile birlikte müzik dinlemek istiyorsunuz.\nKiþiden kulaklýðýnýzý geri almak istediðinize emin misiniz?", "Evet", "Hayýr", ReturnRoleplayName(BirlikteDinlenen[playerid]), BirlikteDinlenen[playerid]);
            }
            case 1: {
                SetPVarInt(playerid, "KulakliklaMuzik", 1);
                ShowRadioLinks(playerid, 0);
            }
            case 2: {
                if(BirlikteDinlenen[playerid] == -1) {
                    BirlikteDinlenen[playerid] = -1;
                    BirlikteDinliyor[playerid] = -1;
                    DeletePVar(playerid, "KulaklikLink");
                    DeletePVar(playerid, "KulakliklaMuzik");
                    PlayerAME(playerid, "telefondan kulaklýkla müzik dinlemeyi býrakýr.");
                    SunucuMesaji(playerid, "Kulaklýkla artýk müzik dinlemiyorsunuz.");
                    StopAudioStreamForPlayer(playerid);
                }
                else {
                    BirlikteDinlenen[BirlikteDinlenen[playerid]] = -1;
                    BirlikteDinliyor[BirlikteDinlenen[playerid]] = -1;
                    DeletePVar(BirlikteDinlenen[playerid], "KulaklikLink");
                    DeletePVar(BirlikteDinlenen[playerid], "KulakliklaMuzik");
                    PlayerAME(BirlikteDinlenen[playerid], "telefondan kulaklýkla müzik dinlemeyi býrakýr.");
                    SunucuMesaji(BirlikteDinlenen[playerid], "Kulaklýkla artýk müzik dinlemiyorsunuz.");
                    StopAudioStreamForPlayer(BirlikteDinlenen[playerid]);
                    BirlikteDinlenen[playerid] = -1;
                    BirlikteDinliyor[playerid] = -1;
                    DeletePVar(playerid, "KulaklikLink");
                    DeletePVar(playerid, "KulakliklaMuzik");
                    PlayerAME(playerid, "telefondan kulaklýkla müzik dinlemeyi býrakýr.");
                    SunucuMesaji(playerid, "Kulaklýkla artýk müzik dinlemiyorsunuz.");
                    StopAudioStreamForPlayer(playerid);
                }
            }
        }
    }
    return 1;
}

Dialog:DialogGozBagiOnay(playerid, response, listitem, inputtext[]) {
    if(response) {
        new id = GozunuBaglayan[playerid];
        if(IsPlayerConnected(id)) {
            if(PlayerInfo[id][pLogged]) {
                if(!PlayerInfo[id][pCuffed]) {
                    if(!PlayerInfo[id][pDeath]) {
                        new Float:pX, Float:pY, Float:pZ, pINT, pVW;
                        GetPlayerPos(id, pX, pY, pZ);
                        pINT = GetPlayerInterior(id);
                        pVW = GetPlayerVirtualWorld(id);
                        if(IsPlayerInRangeOfPoint(playerid, 2.0, pX, pY, pZ) && GetPlayerInterior(playerid) == pINT && GetPlayerVirtualWorld(playerid) == pVW) {
                            if(GozuBaglandi[playerid] == 0) {
                                if(GozBaglaIstegi[playerid]) {
                                    TextDrawShowForPlayer(playerid, BlindFold);
                                    GozuBaglandi[playerid] = 1;
                                    KillTimer(GozBaglaTimer[playerid]);
                                    PlayerMEPlayer(id, playerid, "kiþisinin gözünü baðlar");
                                } else {
                                    HataMesajiC(playerid, "30 saniye geçtiði için göz baðlama isteði otomatik olarak reddedildi.");
                                    KillTimer(GozBaglaTimer[playerid]);
                                }
                            } else {
                                HataMesajiC(playerid, "Gözünüz zaten baðlý.");
                                HataMesaji(id, "Karþýnýn gözü zaten baðlý olduðu için göz baðý onayý otomatik iptal edildi.");
                                KillTimer(GozBaglaTimer[playerid]);
                            }
                        } else {
                            HataMesajiC(playerid, "Gözünüzü baðlayacak oyuncu size yakýn deðil.");
                            HataMesaji(id, "Karþýnýn gözünü baðlamak için yeterince yakýn deðilsiniz.");
                            KillTimer(GozBaglaTimer[playerid]);
                        }
                    } else {
                        HataMesajiC(playerid, "Gözünüzü baðlayacak oyuncu ölmüþ.");
                        HataMesaji(id, "Ölüyken birisinin gözünü baðlayamazsýn.");
                        KillTimer(GozBaglaTimer[playerid]);
                    }
                } else {
                    HataMesajiC(playerid, "Gözünüzü baðlayacak oyuncu kelepçelenmiþ.");
                    HataMesaji(id, "Kelepçeliyken karþýnýn gözünü baðlayamazsýnýz.");
                    KillTimer(GozBaglaTimer[playerid]);
                }
            } else {
                HataMesajiC(playerid, "Gözünüzü baðlayacak kiþi çýkýþ yapmýþ.");
                HataMesaji(id, "Çýkýþ yapmýþken karþýnýn gözünü baðlayamazsýnýz.");
                KillTimer(GozBaglaTimer[playerid]);
            }
        } else {
            HataMesajiC(playerid, "Gözünüzü baðlayacak kiþi oyundan ayrýlmýþ.");
            KillTimer(GozBaglaTimer[playerid]);
        }
    } else {
        new id = GozunuBaglayan[playerid];
        GozunuBaglayan[playerid] = -1;
        GozuBaglandi[playerid] = 0;
        GozBaglaIstegi[playerid] = 0;
        KillTimer(GozBaglaTimer[playerid]);
        SunucuMesaji(playerid, "Gözünüzün baðlanmasýný reddettiniz.");
        HataMesaji(id, "%s (ID: %d) gözünün baðlanmasýný reddetti.", ReturnRoleplayName(playerid), playerid);
    }
    return 1;
}

Dialog:axTextureIndex(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        SetPVarInt(playerid, "axTexturelancakObjeIndex", listitem);
        BasariMesaji(playerid, "%d. index'e seçtiðiniz texture uygulanacak.", listitem);
        new liste[2048];
        for(new i; i < sizeof(MateryalIDleri); i++) {
            format(liste, sizeof liste, "%s\n%s", liste, MateryalIDleri[i][Isim]);
        }
        Dialog_Show(playerid, axTextureDialog, DIALOG_STYLE_LIST, "Texturelar", liste, "Tamam", "Ýptal");
    }
    return 1;
}

Dialog:aTextureIndex(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        SetPVarInt(playerid, "aTexturelancakObjeIndex", listitem);
        BasariMesaji(playerid, "%d. index'e seçtiðiniz texture uygulanacak.", listitem);
        new liste[2048];
        for(new i; i < sizeof(MateryalIDleri); i++) {
            format(liste, sizeof liste, "%s\n%s", liste, MateryalIDleri[i][Isim]);
        }
        Dialog_Show(playerid, aTextureDialog, DIALOG_STYLE_LIST, "Texturelar", liste, "Tamam", "Ýptal");
    }
    return 1;
}

Dialog:TextureIndexListe2(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        SetPVarInt(playerid, "TexturelancakObjeIndex", listitem);
        BasariMesaji(playerid, "%d. index'e seçtiðiniz texture uygulanacak.", listitem);
        new liste[2048];
        for(new i; i < sizeof(TextureMATERIALS); i++) {
            format(liste, sizeof liste, "%s\n%s", liste, TextureMATERIALS[i][xIsim]);
        }
        Dialog_Show(playerid, TextureDialogListe2, DIALOG_STYLE_LIST, "Texturelar", liste, "Tamam", "Ýptal");
    }
    return 1;
}


Dialog:TextureIndex(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        SetPVarInt(playerid, "TexturelancakObjeIndex", listitem);
        BasariMesaji(playerid, "%d. index'e seçtiðiniz texture uygulanacak.", listitem);
        new liste[2048];
        for(new i; i < sizeof(MateryalIDleri); i++) {
            format(liste, sizeof liste, "%s\n%s", liste, MateryalIDleri[i][Isim]);
        }
        Dialog_Show(playerid, TextureDialog, DIALOG_STYLE_LIST, "Texturelar", liste, "Tamam", "Ýptal");
    }
    return 1;
}

Dialog:axTextureDialog(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        BasariMesaji(playerid, "Seçtiðiniz objenin %d. indexine %s texture'u uygulandý.", GetPVarInt(playerid, "axTexturelancakObjeIndex"), MateryalIDleri[listitem][Isim]);
        OAC_GivePlayerMoney(playerid, -5);
        if(listitem != 0)
        {
            SetObjectMaterial(GetPVarInt(playerid, "axTexturelancakObjeID"), GetPVarInt(playerid, "axTexturelancakObjeIndex"), MateryalIDleri[listitem][modelID], MateryalIDleri[listitem][TxdIsim], MateryalIDleri[listitem][TextureIsim], 0);
            DeletePVar(playerid, "axTexturelancakObjeID");
            DeletePVar(playerid, "axTexturelancakObjeIndex");
        }
        else
        {
            SetObjectMaterial(GetPVarInt(playerid, "axTexturelancakObjeID"), GetPVarInt(playerid, "axTexturelancakObjeIndex"), 19341, "invalid", "invalid");
        }
    }
    return 1;
}

Dialog:aTextureDialog(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        BasariMesaji(playerid, "Seçtiðiniz objenin %d. indexine %s texture'u uygulandý.", GetPVarInt(playerid, "aTexturelancakObjeIndex"), MateryalIDleri[listitem][Isim]);
        OAC_GivePlayerMoney(playerid, -5);
        if(listitem != 0)
        {
            SetDynamicObjectMaterial(GetPVarInt(playerid, "aTexturelancakObjeID"), GetPVarInt(playerid, "aTexturelancakObjeIndex"), MateryalIDleri[listitem][modelID], MateryalIDleri[listitem][TxdIsim], MateryalIDleri[listitem][TextureIsim], 0);
            DeletePVar(playerid, "aTexturelancakObjeID");
            DeletePVar(playerid, "aTexturelancakObjeIndex");
        }
        else
        {
            SetDynamicObjectMaterial(GetPVarInt(playerid, "aTexturelancakObjeID"), GetPVarInt(playerid, "aTexturelancakObjeIndex"), 19341, "invalid", "invalid");
        }
    }
    return 1;
}

Dialog:TextureDialog(playerid, response, listitem, inputtext[])
{
    new objectid = GetPVarInt(playerid, "TexturelancakObjeID");
    Streamer_GetArrayData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID, g_obj, siz_g_obj);

    new texturequery[400];
    format(texturequery, 400, "");

    if(response)
    {
        BasariMesaji(playerid, "Seçtiðiniz objenin %d. indexine %s texture'u uygulandý.", GetPVarInt(playerid, "TexturelancakObjeIndex"), MateryalIDleri[listitem][Isim]);
        OAC_GivePlayerMoney(playerid, -5);
        if(listitem != 0)
        {
            SetDynamicObjectMaterial(GetPVarInt(playerid, "TexturelancakObjeID"), GetPVarInt(playerid, "TexturelancakObjeIndex"), MateryalIDleri[listitem][modelID], MateryalIDleri[listitem][TxdIsim], MateryalIDleri[listitem][TextureIsim], 0);
            format(PlayerInfo[playerid][pTxdName], 64, MateryalIDleri[listitem][TxdIsim]);
            format(PlayerInfo[playerid][pTextName], 64, MateryalIDleri[listitem][TextureIsim]);
            PlayerInfo[playerid][pIndex] = GetPVarInt(playerid, "TexturelancakObjeIndex");

            new durum[200];
            format(durum, sizeof(durum), "");
            format(durum, sizeof(durum), "%d|%s|%s", MateryalIDleri[listitem][modelID], MateryalIDleri[listitem][TxdIsim], MateryalIDleri[listitem][TextureIsim]);

            mysql_format(ourConnection, texturequery, sizeof(texturequery), "UPDATE furnitures SET texture%d = '%s' WHERE id = '%d' AND world = '%d'", PlayerInfo[playerid][pIndex], durum, g_obj[co_database_id], GetPlayerVirtualWorld(playerid));
            mysql_tquery(ourConnection, texturequery);

            DeletePVar(playerid, "TexturelancakObjeID");
            DeletePVar(playerid, "TexturelancakObjeIndex");
        }
        else
        {
            mysql_format(ourConnection, texturequery, sizeof(texturequery), "UPDATE furnitures SET texture%d = '0|null|null' WHERE id = '%d' AND world = '%d'", PlayerInfo[playerid][pIndex], g_obj[co_database_id], GetPlayerVirtualWorld(playerid));
            mysql_tquery(ourConnection, texturequery);
            SetDynamicObjectMaterial(GetPVarInt(playerid, "TexturelancakObjeID"), GetPVarInt(playerid, "TexturelancakObjeIndex"), 19341, "invalid", "invalid");
        }
    }
    return 1;
}

Dialog:TextureDialogListe2(playerid, response, listitem, inputtext[])
{
    new objectid = GetPVarInt(playerid, "TexturelancakObjeID");
    Streamer_GetArrayData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID, g_obj, siz_g_obj);

    new texturequery[400];
    format(texturequery, 400, "");

    if(response)
    {
        BasariMesaji(playerid, "Seçtiðiniz objenin %d. indexine %s texture'u uygulandý.", GetPVarInt(playerid, "TexturelancakObjeIndex"), TextureMATERIALS[listitem][xIsim]);
        OAC_GivePlayerMoney(playerid, -5);
        if(listitem != 0)
        {
            SetDynamicObjectMaterial(GetPVarInt(playerid, "TexturelancakObjeID"), GetPVarInt(playerid, "TexturelancakObjeIndex"), TextureMATERIALS[listitem][xmodelID], TextureMATERIALS[listitem][xTxdIsim], TextureMATERIALS[listitem][xTextureIsim], 0);
            format(PlayerInfo[playerid][pTxdName], 64, TextureMATERIALS[listitem][xTxdIsim]);
            format(PlayerInfo[playerid][pTextName], 64, TextureMATERIALS[listitem][xTextureIsim]);
            PlayerInfo[playerid][pIndex] = GetPVarInt(playerid, "TexturelancakObjeIndex");

            new durum[200];
            format(durum, sizeof(durum), "");
            format(durum, sizeof(durum), "%d|%s|%s", TextureMATERIALS[listitem][xmodelID], TextureMATERIALS[listitem][xTxdIsim], TextureMATERIALS[listitem][xTextureIsim]);

            mysql_format(ourConnection, texturequery, sizeof(texturequery), "UPDATE furnitures SET texture%d = '%s' WHERE id = '%d' AND world = '%d'", PlayerInfo[playerid][pIndex], durum, g_obj[co_database_id], GetPlayerVirtualWorld(playerid));
            mysql_tquery(ourConnection, texturequery);

            DeletePVar(playerid, "TexturelancakObjeID");
            DeletePVar(playerid, "TexturelancakObjeIndex");
        }
        else
        {
            mysql_format(ourConnection, texturequery, sizeof(texturequery), "UPDATE furnitures SET texture%d = '0|null|null' WHERE id = '%d' AND world = '%d'", PlayerInfo[playerid][pIndex], g_obj[co_database_id], GetPlayerVirtualWorld(playerid));
            mysql_tquery(ourConnection, texturequery);
            SetDynamicObjectMaterial(GetPVarInt(playerid, "TexturelancakObjeID"), GetPVarInt(playerid, "TexturelancakObjeIndex"), 19341, "invalid", "invalid");
        }
    }
    return 1;
}

Dialog:DialogKarakterYarat(playerid, response, listitem, inputtext[]) {
    if(response) {
        Dialog_Show(playerid, DialogCinsiyet, DIALOG_STYLE_MSGBOX, "Cinsiyet", "Lütfen aþaðýdan karakterinizin cinsiyetini seçin.", "Erkek", "Kadýn");
    } else return Kick(playerid);
    return 1;
}

Dialog:DialogCinsiyet(playerid, response, listitem, inputtext[]) {
    if(response) {
        PlayerInfo[playerid][pSex] = 0;
        BasariMesajiC(playerid, "Cinsiyetiniz erkek olarak iþaretlendi.");
    } else {
        PlayerInfo[playerid][pSex] = 1;
        BasariMesajiC(playerid, "Cinsiyetiniz kadýn olarak iþaretlendi.");
    }
    Dialog_Show(playerid, DialogIrk, DIALOG_STYLE_MSGBOX, "Ten rengi", "Lütfen aþaðýdan karakterinizin ten rengini seçin.", "Beyaz", "Siyah");
    return 1;
}

Dialog:DialogIrk(playerid, response, listitem, inputtext[]) {
    if(response) {
        PlayerInfo[playerid][pTenRengi] = 0;
        BasariMesajiC(playerid, "Ten renginiz beyaz olarak iþaretlendi.");
    } else {
        PlayerInfo[playerid][pTenRengi] = 1;
        BasariMesajiC(playerid, "Ten renginiz siyah olarak iþaretlendi.");
    }
    Dialog_Show(playerid, DialogYasSec, DIALOG_STYLE_INPUT, "Yaþ Seçimi", "Lütfen aþaðýya karakterinizin yaþýný sayýsal olarak girin. (Minimum 16, maksimum 70)", "Tamam", "Çýkýþ");
    return 1;
}


Dialog:DialogYasSec(playerid, response, listitem, inputtext[]) {
    if(response) {
        if(IsNumeric(inputtext))
        {
            if(strlen(inputtext) > 0)
            {
                if(strval(inputtext) >= 16 && strval(inputtext) <= 70)
                {
                    BasariMesaji(playerid, "Karakterinizin yaþý %d olarak ayarlandý.", strval(inputtext));
                    PlayerInfo[playerid][pAge] = strval(inputtext);
                    SunucuMesajiC(playerid, "Lütfen istediðiniz kýyafeti seçin.");
                    SetPVarInt(playerid, "kiyafetaliyor", 0);
                    if(PlayerInfo[playerid][pSex] == 0 && PlayerInfo[playerid][pTenRengi] == 0)  // erkek beyaz
                        ShowModelSelectionMenuEx(playerid, MaleWhite, TOTAL_M_WHITE, "Kiyafetler", TKIYAFET, 16.0, 0.0, -55.0);
                    else if(PlayerInfo[playerid][pSex] == 0 && PlayerInfo[playerid][pTenRengi] == 1)  // erkek siyah
                        ShowModelSelectionMenuEx(playerid, MaleBlack, TOTAL_M_BLACK, "Kiyafetler", TKIYAFET, 16.0, 0.0, -55.0);

                    else if(PlayerInfo[playerid][pSex] == 1 && PlayerInfo[playerid][pTenRengi] == 0)  // kadýn beyaz
                        ShowModelSelectionMenuEx(playerid, FemaleWhite, TOTAL_F_WHITE, "Kiyafetler", TKIYAFET, 16.0, 0.0, -55.0);

                    else if(PlayerInfo[playerid][pSex] == 1 && PlayerInfo[playerid][pTenRengi] == 1)  // kadýn siyah
                        ShowModelSelectionMenuEx(playerid, FemaleBlack, TOTAL_F_BLACK, "Kiyafetler", TKIYAFET, 16.0, 0.0, -55.0);
                }
                else Dialog_Show(playerid, DialogYasSec, DIALOG_STYLE_INPUT, "Yaþ Seçimi", "Lütfen aþaðýya karakterinizin yaþýný sayýsal olarak girin. (Minimum 16, maksimum 70)", "Tamam", "Çýkýþ");
            }
            else Dialog_Show(playerid, DialogYasSec, DIALOG_STYLE_INPUT, "Yaþ Seçimi", "Lütfen aþaðýya karakterinizin yaþýný sayýsal olarak girin. (Minimum 16, maksimum 70)", "Tamam", "Çýkýþ");
        }
        else Dialog_Show(playerid, DialogYasSec, DIALOG_STYLE_INPUT, "Yaþ Seçimi", "Lütfen aþaðýya karakterinizin yaþýný sayýsal olarak girin. (Minimum 16, maksimum 70)", "Tamam", "Çýkýþ");
    }
    else Kick(playerid);
    return 1;
}

Dialog:DialogEditBone(playerid, response, listitem, inputtext[]) {
    if(response)
    {
        new weaponid = EditingWeapon[playerid], weaponname[18], string[150];

        GetWeaponName(weaponid, weaponname, sizeof(weaponname));

        WeaponSettings[playerid][weaponid - 22][Bone] = listitem + 1;

        BasariMesaji(playerid, "%s adlý silahýnýzýn kemik seçeneðini deðiþtirdiniz.", weaponname);

        if(WeaponSettings[playerid][weaponid - 22][duzenlendi])
        {
            mysql_format(ourConnection, string, sizeof(string), "UPDATE weaponsettings SET Bone = '%d' WHERE sOwner = '%d' AND WeaponID = '%d'", listitem + 1, PlayerInfo[playerid][pID], weaponid);
            mysql_tquery(ourConnection, string);
        }
    }
    EditingWeapon[playerid] = 0;
    return 1;
}

Dialog:DialogLSPDEkipman(playerid, response, listitem, inputtext[]) {
    if(response) {
        if(Faction_GetType(PlayerInfo[playerid][pFaction]) == POLICE && PlayerInfo[playerid][pFactionDuty]) {
            switch(listitem) {
                case 0: { // patrol
                    AC_ResetPlayerWeapons(playerid);
                    AC_GivePlayerWeapon(playerid, 3, 1);
                    AC_GivePlayerWeapon(playerid, 24, 100);
                    AC_GivePlayerWeapon(playerid, 41, 1000);
                    AC_SetPlayerHealth(playerid, 100);
                    AC_SetPlayerArmour(playerid, 100);
                }
                case 1: { // dedektif
                    AC_ResetPlayerWeapons(playerid);
                    AC_GivePlayerWeapon(playerid, 24, 100);
                    AC_GivePlayerWeapon(playerid, 43, 500);
                    AC_SetPlayerHealth(playerid, 100);
                    AC_SetPlayerArmour(playerid, 100);
                }
                case 2: { // SWAT
                    AC_ResetPlayerWeapons(playerid);
                    AC_GivePlayerWeapon(playerid, 24, 500);
                    AC_GivePlayerWeapon(playerid, 17, 10);
                    AC_SetPlayerHealth(playerid, 200);
                    AC_SetPlayerArmour(playerid, 200);
                }
            }
            PlayerME(playerid, "ekipmanlarýný alýr.");
            ApplyAnimation(playerid, "BAR", "Barserve_bottle", 4.1, 0, 0, 0, 0, 0, 1);
            if(listitem == 0) {
                TogglePlayerControllable(playerid, false);
                PlayerInfo[playerid][pFreezed] = 1;
                PlayerInfo[playerid][pSelectUniform] = 1;
                SunucuMesaji(playerid, "{FF6347}Mouseunuzun sað ve sol tuþlarý{C8C8C8}na basarak uygun üniformalarý görebilirsiniz.");
                SunucuMesaji(playerid, "{FF6347}ENTER{C8C8C8} basarak üniformayý seçip {FF6347}/isbasi{C8C8C8} yazarak iptal edebilirsiniz.");
            }
        } else return HataMesajiC(playerid, "Ýþbaþýnda deðilsiniz.");
    }
    return 1;
}

Dialog:DialogCesetAl(playerid, response, listitem, inputtext[]) {
    if(response) {
        SetPVarInt(playerid, "CesetSkin", VehicleInfo[GetPVarInt(playerid, "CesetArac")][vSkin][CesetList[playerid][listitem]]);
        switch(CesetList[playerid][listitem]) {
            case 0: {
                SetPVarString(playerid, "CesetIsim", VehicleInfo[GetPVarInt(playerid, "CesetArac")][vIsim1]);
                format(VehicleInfo[GetPVarInt(playerid, "CesetArac")][vIsim1], MAX_PLAYER_NAME, " ");
            }
            case 1: {
                SetPVarString(playerid, "CesetIsim", VehicleInfo[GetPVarInt(playerid, "CesetArac")][vIsim2]);
                format(VehicleInfo[GetPVarInt(playerid, "CesetArac")][vIsim2], MAX_PLAYER_NAME, " ");
            }
            case 2: {
                SetPVarString(playerid, "CesetIsim", VehicleInfo[GetPVarInt(playerid, "CesetArac")][vIsim3]);
                format(VehicleInfo[GetPVarInt(playerid, "CesetArac")][vIsim3], MAX_PLAYER_NAME, " ");
            }
        }
        PlayerME(playerid, "bagajdan bir ceset alýr.");
        SendClientMessageEx(playerid, COLOR_GREY, "Bagajdan bir ceset aldýnýz. Cesedi býrakmak istediðiniz yere gidip /cesetialonayla yazýn.");
        VehicleInfo[GetPVarInt(playerid, "CesetArac")][vCeset][CesetList[playerid][listitem]] = 0;
        VehicleInfo[GetPVarInt(playerid, "CesetArac")][vSkin][CesetList[playerid][listitem]] = 0;
        SetPVarInt(playerid, "CesetAldi", 1);
        PlayerInfo[playerid][pNameTag] = CreateDynamic3DTextLabel("(( Bu kullanýcý bir ceset sürüklüyor. ))", COLOR_ADMIN, 0, 0, 0.5, 30.0, playerid, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0);
    }
    return 1;
}
Dialog:DialogRenkSecimi(playerid, response, listitem, inputtext[])
{
    if(!response) {
        Dialog_Show(playerid, DialogRenkSecimi, DIALOG_STYLE_LIST, "Araç Renk Seçimi", "Renk kodunu gir", "Tamam", "");
        //Dialog_Show(playerid, DialogRenkSecimi, DIALOG_STYLE_LIST, "Araç Renk Seçimi", "Renk kodunu gir\nYön tuþlarýyla seç", "Tamam", "");
        SendClientMessageEx(playerid, COLOR_GREY, "Lütfen bir seçeneði seçin:");
        return 0;
    }
    switch(listitem) {
        case 0: {
            Dialog_Show(playerid, DialogRenkSecimi1, DIALOG_STYLE_INPUT, "Araç Renk Seçimi", "Lütfen aþaðýya birincil renk kodunu girin:", "Tamam", "");
        }
        case 1: {
            SendClientMessage(playerid, COLOR_GREY, "Aracýnýzýn birinci rengini seçmek için klavyenizin yön tuþlarýný kullanýn.");
            SendClientMessage(playerid, COLOR_GREY, "Ýkinci renkler için ise farenizi kullanýn.");
            SendClientMessage(playerid, COLOR_GREY, "Onaylamak için boþluk(SPACE) tuþuna, iptal etmek için ise ALT tuþuna basýn.");
        }
    }
    return 1;
}

Dialog:DialogRenkSecimi1(playerid, response, listitem, inputtext[]) {
    if(!response) return Dialog_Show(playerid, DialogRenkSecimi1, DIALOG_STYLE_INPUT, "Araç Renk Seçimi", "Lütfen aþaðýya birincil renk kodunu girin:", "Tamam", "");
    new renk = strval(inputtext);
    new string[128];
    format(string, sizeof(string), "Aracýnýzýn birincil rengi %d olarak ayarlandý.", renk);
    PlayerInfo[playerid][pSelectedColors][0] = renk;
    SendClientMessageEx(playerid, COLOR_WHITE, string);
    Dialog_Show(playerid, DialogRenkSecimi2, DIALOG_STYLE_INPUT, "Araç Renk Seçimi", "Lütfen aþaðýya ikincil renk kodunu girin:", "Tamam", "");
    return 1;
}

Dialog:DialogRenkSecimi2(playerid, response, listitem, inputtext[]) {
    if(!response) return Dialog_Show(playerid, DialogRenkSecimi1, DIALOG_STYLE_INPUT, "Araç Renk Seçimi", "Lütfen aþaðýya ikincil renk kodunu girin:", "Tamam", "");
    new renk = strval(inputtext);
    new string[128];
    format(string, sizeof(string), "Aracýnýzýn ikincil rengi %d olarak ayarlandý.", renk);
    SendClientMessageEx(playerid, COLOR_WHITE, string);
    PlayerInfo[playerid][pSelectedColors][1] = renk;
    Dialog_Show(playerid, DialogAracOnay, DIALOG_STYLE_MSGBOX, "Araç Satýn Alým", "Bu aracý belirttiðiniz renklerde almak istediðinize emin misiniz?", "Evet", "Hayýr");
    return 1;
}

Dialog:DialogAracOnay(playerid, response, listitem, inputtext[]) {
    if(!response) {
        SetCameraBehindPlayer(playerid);
        DestroyVehicle(PlayerInfo[playerid][pDealerVehicle]);
        Iter_Remove(Vehicles, PlayerInfo[playerid][pDealerVehicle]);
        PlayerInfo[playerid][pDealerVehicle] = 0;
        PlayerInfo[playerid][pVehiclePrice] = 0;
        TogglePlayerControllable(playerid, true);
        PlayerInfo[playerid][pFreezed] = 0;
        AC_SetPlayerVirtualWorld(playerid, 0);
        PlayerInfo[playerid][pBuyingVehicle] = 0;
        PlayerInfo[playerid][pSelectedColors][0] = -1;
        PlayerInfo[playerid][pSelectedColors][1] = -1;
        SendClientMessageEx(playerid, COLOR_GREY, "Araç satýn alma iþlemini iptal ettiniz.");
    }
    else return Vehicle_Buy(playerid);
    return 1;
}

Dialog:DialogRegisterVeh(playerid, response, listitem, inputtext[])
{
    if(!response)return
        PlayerInfo[playerid][pPlateVeh] = -1;

    static const prices[2] = {6000, 1000};

    if(PlayerInfo[playerid][pCash] < prices[listitem])
    {
        HataMesaji(playerid, "Yeterli paran yok. ($%d)", prices[listitem]);
        return PlayerInfo[playerid][pPlateVeh] = -1;
    }

    AC_GivePlayerMoney(playerid, -prices[listitem], "/arac plakaekle");

    PlayerInfo[playerid][pPlateOption] = listitem + 1;
    PlayerInfo[playerid][pPlateTime] = (!listitem) ? 10 : 20;

    TogglePlayerControllable(playerid, false);
    PlayerInfo[playerid][pFreezed] = 1;

    PlayerInfo[playerid][pNameTag] = CreateDynamic3DTextLabel("(( Bu kullanýcý aracýnýn plakasýna iþlem yaptýrýyor. ))", COLOR_ADMIN, 0, 0, 0.5, 30.0, playerid, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0);
    SetTimerEx("RemoveTag", 1000 * 5, false, "d", playerid);

    GameTextForPlayer(playerid, "~y~Hazirlaniyor...", 5000, 5);

    return 1;
}

Dialog:DialogLogs(playerid, response, listitem, inputtext[])
{
    if(!response)return 0;

    new target[MAX_PLAYER_NAME];
    new command[64];

    if(sscanf(inputtext, "s[24]S()[64]", target, command) || !IsValidRoleplayName(target) || strlen(target) > MAX_PLAYER_NAME)return
        pc_cmd_serverlogs(playerid, NULL);

    format(PlayerInfo[playerid][pLogTarget], MAX_PLAYER_NAME, target);
    format(PlayerInfo[playerid][pLogCommand], 64, command);

    return ShowPlayerLogs(playerid, 1);
}

Dialog:DialogShowLogsDetail(playerid, response, listitem, inputtext[])
{
    if(!response)
    {
        if(PlayerInfo[playerid][pPage] <= 1)return
            pc_cmd_serverlogs(playerid, NULL);

        else return
            ShowPlayerLogs(playerid, PlayerInfo[playerid][pPage] - 1);
    }

    if(!listitem)return
        ShowPlayerLogs(playerid, PlayerInfo[playerid][pPage] + 1);

    // new query[128];

    PlayerInfo[playerid][pLogID] = PlayerInfo[playerid][pLogsID][listitem - 1];

    mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT * FROM transfer_logs WHERE id = '%d'", PlayerInfo[playerid][pLogID]);
    mysql_tquery(ourConnection, queryx, "OnLoadLogDetails", "d", playerid);

    return 1;
}

Dialog:DialogModifiyeKaldir(playerid, response, listitem, inputtext[])
{
    if(!response)return 0;

    new vid = GetPlayerVehicleID(playerid);
    new component;
    new count;

    if(vid == -1)return 1;
    if(PlayerInfo[playerid][pFactionDuty])return 1;

    if(!listitem)
    {
        for(new j; j < MAX_TUNING_COMPONENTS; j++)
        {
            component = GetVehicleComponentInSlot(vid, j);
            if(!component)continue;
            RemoveVehicleComponent(vid, component);
            VehicleInfo[vid][vTuning][GetVehicleComponentType(component)] = 0;
            count++;
        }

        if(!count)return
            SunucuMesaji(playerid, "Herhangi bir modifiyen yok.");

        SunucuMesajiC(playerid, "Modifiyeler sýfýrlandý.");
        printf("%s - %s tarafýndan %d nolu aracýn modifiyeleri sýfýrlandý.", ReturnDate(), ReturnRoleplayName(playerid), VehicleInfo[vid][vID]);
        return SaveVehicle(vid);
    }

    if(listitem == 1)
    {
        if(VehicleInfo[vid][vPaintjob] == 3)return
            SunucuMesajiC(playerid, "Araçta paintjob yok.");

        VehicleInfo[vid][vPaintjob] = 3;
        ChangeVehiclePaintjob(vid, 3);
        ChangeVehicleColor(vid, VehicleInfo[vid][vFirstColor], VehicleInfo[vid][vSecondColor]);
        SunucuMesajiC(playerid, "Renk kaldýrýldý.");
        printf("%s - %s tarafýndan %d nolu aracýn paintjobu kaldýrýldý.", ReturnDate(), ReturnRoleplayName(playerid), VehicleInfo[vid][vID]);
        return SaveVehicle(vid);
    }

    listitem -= 2; component = GetVehicleComponentInSlot(vid, listitem);

    if(!component)return
        SunucuMesaji(playerid, "Bu slotta modifiye yok.");

    RemoveVehicleComponent(vid, component);
    VehicleInfo[vid][vTuning][GetVehicleComponentType(component)] = 0;
    SaveVehicle(vid);

    printf("%s - %s tarafýndan %d nolu aracýn %s(%d) modifiyesi silindi.", ReturnDate(), ReturnRoleplayName(playerid), VehicleInfo[vid][vID], GetComponentName(component), component);
    SunucuMesaji(playerid, "Modifiye %s(%d) kaldýrýldý.", GetComponentName(component), component);

    return 1;
}

Dialog:DialogRemoveComponent(playerid, response, listitem, inputtext[])
{
    if(!response)return 0;

    new vid = GetPlayerVehicleID(playerid);
    new component;
    new count;

    if(vid == -1)return 1;
    if(Vehicle_IsOwner(playerid, vid, true) == 0) return 1;

    if(!listitem)
    {
        for(new j; j < MAX_TUNING_COMPONENTS; j++)
        {
            component = GetVehicleComponentInSlot(vid, j);
            if(!component)continue;
            RemoveVehicleComponent(vid, component);
            VehicleInfo[vid][vTuning][GetVehicleComponentType(component)] = 0;
            count++;
        }

        if(!count)return
            SunucuMesaji(playerid, "Herhangi bir modifiyen yok.");

        SunucuMesajiC(playerid, "Modifiyeler sýfýrlandý.");
        return SaveVehicle(vid);
    }

    if(listitem == 1)
    {
        if(VehicleInfo[vid][vPaintjob] == 3)return
            SunucuMesajiC(playerid, "Araçta paintjob yok.");

        VehicleInfo[vid][vPaintjob] = 3;
        ChangeVehiclePaintjob(vid, 3);
        ChangeVehicleColor(vid, VehicleInfo[vid][vFirstColor], VehicleInfo[vid][vSecondColor]);
        SunucuMesajiC(playerid, "Renk kaldýrýldý.");
        return SaveVehicle(vid);
    }

    listitem -= 2; component = GetVehicleComponentInSlot(vid, listitem);

    if(!component)return
        SunucuMesaji(playerid, "Bu slotta modifiye yok.");

    RemoveVehicleComponent(vid, component);
    VehicleInfo[vid][vTuning][GetVehicleComponentType(component)] = 0;
    SaveVehicle(vid);

    SunucuMesaji(playerid, "Modifiye %s(%d) kaldýrýldý.", GetComponentName(component), component);

    return 1;
}

Dialog:DialogConfirmSoru(playerid, response, listitem, inputtext[])
{
    if(!response) return 0;

    new id = Iter_Free(Requests);
    new time = gettime();

    SoruYollaHelper(COLOR_SUPPORTER, "[SID: %d] %s (ID: %d) soru gönderdi: %s", id, ReturnRoleplayName(playerid), playerid, PlayerInfo[playerid][pTmpText]);

    mysql_format(ourConnection, queryx, sizeof(queryx), "INSERT INTO staffrequests (time, id, text, owner_id, type) VALUES ('%d', '%d', '%e', '%d', '0')", time, id, PlayerInfo[playerid][pTmpText], playerid);
    mysql_tquery(ourConnection, queryx);

    PlayerInfo[playerid][pReportTime] = 1;
    PlayerInfo[playerid][pRequestCount]++;

    Iter_Add(Requests, id);

    new count = GetQueueCount(0, time);
    SendFormattedMessage(playerid, COLOR_GREEN, "Sorunuz aktif helperlara ulaþtýrýlmýþtýr! Soru ID: %d", count);
    return 1;
}

Dialog:DialogConfirmDom(playerid, response, listitem, inputtext[])
{
    if(!response) return 0;

    // new query[512];
    new id = Iter_Free(Requests);
    new time = gettime();

    RaporAlert(true, COLOR_ORANGE,  "[R-ID: %d] %s (ID: %d) yardým istiyor: %s", id, ReturnRoleplayName(playerid), playerid, PlayerInfo[playerid][pTmpText]);

    mysql_format(ourConnection, queryx, sizeof(queryx), "INSERT INTO staffrequests (time, id, text, owner_id, type) VALUES ('%d', '%d', '%e', '%d', '1')", time, id, PlayerInfo[playerid][pTmpText], playerid);
    mysql_tquery(ourConnection, queryx);

    PlayerInfo[playerid][pReportTime] = 1;
    PlayerInfo[playerid][pRequestCount]++;

    Iter_Add(Requests, id);

    new count = GetQueueCount(1, time);
    SendFormattedMessage(playerid, COLOR_GREEN, "Raporunuz aktif yöneticilere ulaþtýrýlmýþtýr! Rapor ID: %d", count);

    return 1;
}

Dialog:DialogRequests(playerid, response, listitem, inputtext[])
{
    new id = PlayerInfo[playerid][pRequestsID][listitem];

    if(id == -1 || !response)return 0;

    // new query[128];

    mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT * FROM staffrequests WHERE id = '%d'", id);
    mysql_tquery(ourConnection, queryx, "OnAdminRequestsSearch", "dd", playerid, id);

    return 1;
}

Dialog:DialogStaffRequest(playerid, response, listitem, inputtext[])
{
    if(!response)return
        PlayerInfo[playerid][pRequestID] = -1;

    return Dialog_Show(playerid, DialogRequestOptions, DIALOG_STYLE_LIST, "Rapor Sistemi", "Kabul Et\nCevapla\nReddet\nForuma Yolla\nKategori Deðiþtir", "Ýleri", "Ýptal");
}

Dialog:DialogTalepIptal(playerid, response, listitem, inputtext[])
{
    if(!response)return
        PlayerInfo[playerid][pRequestID] = -1;

    new id = PlayerInfo[playerid][pRequestID];
    Request_Delete(playerid, id);
    return 1;
}

Dialog:DialogRequestOptions(playerid, response, listitem, inputtext[])
{
    if(!response)return
        PlayerInfo[playerid][pRequestID] = -1;

    new id = PlayerInfo[playerid][pRequestID];

    switch(listitem)
    {
        case 0: Request_Accept(playerid, id);
        case 1: Dialog_Show(playerid, DialogRaporCevapla, DIALOG_STYLE_INPUT, "Destek Cevapla", "Destek talebi onay sebebinizi girin(dikkat, karþý taraf görecek):", "Ýleri", "Ýptal");
        case 2: Dialog_Show(playerid, DialogRefuseRequest, DIALOG_STYLE_INPUT, "Destek Reddetme", "Destek talebi reddetme sebebinizi girin(dikkat, karþý taraf görecek):", "Ýleri", "Ýptal");
        case 3: Request_ForumaYolla(playerid, id);
        case 4: Request_Kategori(playerid, id);
    }

    return 1;
}

Dialog:DialogRaporCevapla(playerid, response, listitem, inputtext[])
{
    if(!response)return
        Dialog_Show(playerid, DialogRequestOptions, DIALOG_STYLE_LIST, "Rapor Sistemi", "Kabul Et\nCevapla\nReddet", "Ýleri", "Ýptal");

    if(isnull(inputtext) || strlen(inputtext) > 80)return
         Dialog_Show(playerid, DialogRaporCevapla, DIALOG_STYLE_INPUT, "Destek Cevapla", "Destek talebi onay sebebinizi girin(dikkat, karþý taraf görecek):", "Ýleri", "Ýptal");

    new string[256];
    format(string, 256, "%d %s", PlayerInfo[playerid][pRequestID], inputtext);
    pc_cmd_raporcevap(playerid, string);
    return 1;
}

Dialog:DialogRefuseRequest(playerid, response, listitem, inputtext[])
{
    if(!response)return
        Dialog_Show(playerid, DialogRequestOptions, DIALOG_STYLE_LIST, "Rapor Sistemi", "Kabul Et\nCevapla\nReddet", "Ýleri", "Ýptal");

    if(isnull(inputtext) || strlen(inputtext) > 80)return
        Dialog_Show(playerid, DialogRefuseRequest, DIALOG_STYLE_INPUT, "Destek Reddetme", "Destek talebi reddetme sebebinizi girin(dikkat, karþý taraf görecek):", "Ýleri", "Ýptal");

    format(PlayerInfo[playerid][pText], 256, inputtext);
    Request_Refuse(playerid, PlayerInfo[playerid][pRequestID]);

    return 1;
}
Dialog:DialogGaraj(playerid, response, listitem, inputtext[])
{
    if(!response)return 0;

    new buildingid = GetPlayerMenuBiz(playerid);

    if(buildingid == -1)return
        SunucuMesajiC(playerid, "Garajýn yakýnýnda ya da içerisinde deðilsin.");

    switch(listitem)
    {
        case 0:
        {
            if(!IsPlayerInRangeOfPoint(playerid, 2.0, BuildingInfo[buildingid][bPosIntX], BuildingInfo[buildingid][bPosIntY], BuildingInfo[buildingid][bPosIntZ]) && IsPlayerInRangeOfPoint(playerid, 2.0, BuildingInfo[buildingid][bPosX], BuildingInfo[buildingid][bPosY], BuildingInfo[buildingid][bPosZ]) == 0)return
                SunucuMesajiC(playerid, "Bir kapýya yakýn deðilsin.");

            BuildingInfo[buildingid][bLocked] = !BuildingInfo[buildingid][bLocked];
            Player_Info(playerid, (!BuildingInfo[buildingid][bLocked]) ? ("Garajin artik ~g~kilidi acik~w~.") : ("Garaj artik ~r~kilitli~w~."), true);

            SaveBuilding(buildingid);
        }
        case 1: Dialog_Show(playerid, DialogBizName, DIALOG_STYLE_INPUT, "Ýsim deðiþtir", "Yeni garaj adýný girin. (maksimum 32 karakter)", "Ýleri", "Ýptal");
        case 2: Dialog_Show(playerid, DialogBizKasa, DIALOG_STYLE_MSGBOX, "Garaj Kasasý", "Kasada ne yapmak istediðini seç. (Kasadaki mevcut paran: $%d)", "Çek", "Yatýr",BuildingInfo[buildingid][bCash]);
        case 3: Dialog_Show(playerid, DialogNull, DIALOG_STYLE_MSGBOX, "Bilgi", "Ürünler: %d adet .\nGarajdaki para: $%d.\nGarajýn sisteme satýldýðýnda deðeri: $%d.", "Ýptal", "", BuildingInfo[buildingid][bProducts], BuildingInfo[buildingid][bCash],BuildingInfo[buildingid][bPrice] * SunucuBilgi[ISSY] / 100);
        case 4: Dialog_Show(playerid, DialogBizSell, DIALOG_STYLE_INPUT, "Sisteme Sat", "$%d karþýlýðýnda garajý sisteme satmak istediðine emin misin?\nAþaðýdaki boþluða iþlemi onaylamak için 'EVET' yazýn.", "Onayla", "Ýptal", BuildingInfo[buildingid][bPrice] * SunucuBilgi[ISSY] / 100);
        case 5: Dialog_Show(playerid, DialogBizSellTo, DIALOG_STYLE_INPUT, "Kiþiye sat", "Satmak istediðiniz kiþinin ID'sini ve satmak istediðiniz fiyatý girin.(5 250000 þeklinde)", "Ýleri", "Ýptal");
        case 6: Dialog_Show(playerid, DialogBizKey, DIALOG_STYLE_INPUT, "Yedek anahtar", "Yedek anahtar girmek istediðiniz kiþinin ID'sini girin.", "Ýleri", "Ýptal");
        case 7: Dialog_Show(playerid, DialogBizDeleteKeys, DIALOG_STYLE_MSGBOX, "Kilit sýfýrla/deðiþtir", "Kilidi deðiþtirmek istediðine emin misin?\nAnahtara sahip kiþiler tekrardan kullanamayacaklar.", "Ýleri", "Ýptal");
        case 8:
        {
            new string[500];
            new isyeri = GetPlayerMenuBiz(playerid);

            format(string, sizeof(string), "");
            for(new x; x < 20; x++)
            {
                if(BuildingInfo[isyeri][Calisan][x] != 0)
                {
                    format(string, sizeof(string), "%s\n%s", string, GetCharacterName(BuildingInfo[isyeri][Calisan][x]));
                }
            }

            Dialog_Show(playerid, DialogBizCalisanListe, DIALOG_STYLE_LIST, "Çalýþan Listesi", string, "Tamam", "<< Geri");
        }
        case 9: Dialog_Show(playerid, DialogBizCalisanIslem, DIALOG_STYLE_LIST, "Çalýþan Düzenle", "Çalýþan ekle\nÇalýþan çýkart\nTüm çalýþanlarý çýkart", "Seç", "<< Geri");
        case 10: SunucuMesaji(playerid, "Garajýnýz bu sistemden yararlanmýyor.");//Dialog_Show(playerid, DialogBizAktor, DIALOG_STYLE_LIST, "Aktör Sistemi", "YAKINDA", "Seç", "<< Geri");
        case 11: if(BuildingInfo[buildingid][bType] != CLEAN) Dialog_Show(playerid, DialogProductOpt, DIALOG_STYLE_LIST, "Ürünleri Yönet", "Ürün sipariþ et\nÜrün fiyat listesi", "Ýleri", "Ýptal");
        case 12: Dialog_Show(playerid, DialogBizEntrance, DIALOG_STYLE_INPUT, "Giriþ Ücreti", "Garaj için giriþ ücretini buraya gir:", "Ýleri", "Ýptal");
        case 13:
        {
            if(BuildingInfo[buildingid][bStereo] == false)return
                SunucuMesaji(playerid, "Radyo zaten kapalý.");

            BasariMesaji(playerid, "Radyo kapatýldý.");

            foreach(new i : Player) if(IsPlayerConnected(i) && GetPlayerBuilding(i, true) == buildingid)
                StopAudioStreamForPlayer(i);

            BuildingInfo[buildingid][bStereo] = false;
        }
        case 14: ShowRadioLinks(playerid, 0);
        case 15:
        {
            if(GetPlayerVirtualWorld(playerid) != BuildingInfo[buildingid][bWorld] || GetPlayerInterior(playerid) != BuildingInfo[buildingid][bInterior])return
                SunucuMesajiC(playerid, "Garajýnda deðilsin.");

            GetPlayerPos(playerid, BuildingInfo[buildingid][bPosIntX], BuildingInfo[buildingid][bPosIntY], BuildingInfo[buildingid][bPosIntZ]);
            Player_Info(playerid, "Garajin  ~y~cikis~w~ yerini degistirdin.");

            SaveBuilding(buildingid);
        }
        case 16:
        {
            if(BuildingInfo[buildingid][bVergi] <= 0)
                return HataMesajiC(playerid, "Zaten vergi borcunuz bulunmuyor.");

            if(PlayerInfo[playerid][pCash] < BuildingInfo[buildingid][bVergi])
                return HataMesajiC(playerid, "Yeterli miktarda paranýz yok.");

            OAC_GivePlayerMoney(playerid, -BuildingInfo[buildingid][bVergi]);
            BuildingInfo[buildingid][bVergi] = 0;
            SaveBuilding(buildingid);

            BasariMesaji(playerid, "Garajýn vergi borcunu ödediniz. (%s)", ReturnDate());
        }
        case 17: {
            BuildingInfo[buildingid][bDekorKilit] = !BuildingInfo[buildingid][bDekorKilit];
            SendClientMessage(playerid, COLOR_LIGHTRED, (BuildingInfo[buildingid][bDekorKilit]) ? ("[SA-RP] {FFFFFF}Garajýnýzýn dekorunu kilitlediniz, artýk anahtarý olanlar dekor yapamayacak.") : ("[SA-RP] {FFFFFF}Ýþyerinizin dekor kilidini açtýnýz, artýk anahtarý olan herkes dekor yapabilecek."));
            SaveBuilding(buildingid);
        }
        case 18: {
            if(BuildingInfo[buildingid][bCeza] <= 0)
                return HataMesajiC(playerid, "Zaten cezanýz bulunmuyor.");

            if(PlayerInfo[playerid][pCash] < BuildingInfo[buildingid][bCeza])
                return HataMesajiC(playerid, "Yeterli miktarda paranýz yok.");

            OAC_GivePlayerMoney(playerid, -BuildingInfo[buildingid][bCeza]);
            Faction_GovernmentCash(BuildingInfo[buildingid][bCeza]);
            BuildingInfo[buildingid][bCeza] = 0;
            SaveBuilding(buildingid);
            BasariMesaji(playerid, "Garajýn cezasýný ödediniz. (%s)", ReturnDate());
        }
        case 19:
        { // interiorsec
            new string[512];

            for(new i; i < sizeof(IsletmeInt); i++)
            {
                if(BuildingInfo[buildingid][bDekor] == i+1)continue;
                if(IsletmeInt[i][isyeritip] != -1 && IsletmeInt[i][isyeritip] != BuildingInfo[buildingid][bType])continue;

                format(string, sizeof(string), "%s%s\n", string, IsletmeInt[i][intname]);
            }

            Dialog_Show(playerid, DialogIsletmeInterior, DIALOG_STYLE_LIST, "Interior Satýn Al", string, "Satýn Al", "Geri");
        }
    }
    return 1;
}
Dialog:DialogBiz(playerid, response, listitem, inputtext[])
{
    if(!response)return 0;

    new buildingid = GetPlayerMenuBiz(playerid);

    if(buildingid == -1)return
        SunucuMesajiC(playerid, "Ýþletmenin yakýnýnda ya da içerisinde deðilsin.");

    switch(listitem)
    {
        case 0:
        {
            if(!IsPlayerInRangeOfPoint(playerid, 2.0, BuildingInfo[buildingid][bPosIntX], BuildingInfo[buildingid][bPosIntY], BuildingInfo[buildingid][bPosIntZ]) && IsPlayerInRangeOfPoint(playerid, 2.0, BuildingInfo[buildingid][bPosX], BuildingInfo[buildingid][bPosY], BuildingInfo[buildingid][bPosZ]) == 0)return
                SunucuMesajiC(playerid, "Bir kapýya yakýn deðilsin.");

            BuildingInfo[buildingid][bLocked] = !BuildingInfo[buildingid][bLocked];
            Player_Info(playerid, (!BuildingInfo[buildingid][bLocked]) ? ("Isyerinin artik ~g~kilidi acik~w~.") : ("Isyeri artik ~r~kilitli~w~."), true);

            SaveBuilding(buildingid);
        }
        case 1: Dialog_Show(playerid, DialogBizName, DIALOG_STYLE_INPUT, "Ýsim deðiþtir", "Yeni iþletme adýný girin. (maksimum 32 karakter)", "Ýleri", "Ýptal");
        case 2: Dialog_Show(playerid, DialogBizKasa, DIALOG_STYLE_MSGBOX, "Ýþletme Kasasý", "Kasada ne yapmak istediðini seç. (Kasadaki mevcut paran: $%d)", "Çek", "Yatýr",BuildingInfo[buildingid][bCash]);
        case 3: Dialog_Show(playerid, DialogNull, DIALOG_STYLE_MSGBOX, "Bilgi", "Ürünler: %d adet .\nÝþletmedeki para: $%d.\nÝþletmenin sisteme satýldýðýnda deðeri: $%d.", "Ýptal", "", BuildingInfo[buildingid][bProducts], BuildingInfo[buildingid][bCash],BuildingInfo[buildingid][bPrice] * SunucuBilgi[ISSY] / 100);
        case 4: Dialog_Show(playerid, DialogBizSell, DIALOG_STYLE_INPUT, "Sisteme Sat", "$%d karþýlýðýnda iþletmeni sisteme satmak istediðine emin misin?\nAþaðýdaki boþluða iþlemi onaylamak için 'EVET' yazýn.", "Onayla", "Ýptal", BuildingInfo[buildingid][bPrice] * SunucuBilgi[ESSY] / 100);
        case 5: Dialog_Show(playerid, DialogBizSellTo, DIALOG_STYLE_INPUT, "Kiþiye sat", "Satmak istediðiniz kiþinin ID'sini ve satmak istediðiniz fiyatý girin.(5 250000 þeklinde)", "Ýleri", "Ýptal");
        case 6: Dialog_Show(playerid, DialogBizKey, DIALOG_STYLE_INPUT, "Yedek anahtar", "Yedek anahtar girmek istediðiniz kiþinin ID'sini girin.", "Ýleri", "Ýptal");
        case 7: Dialog_Show(playerid, DialogBizDeleteKeys, DIALOG_STYLE_MSGBOX, "Kilit sýfýrla/deðiþtir", "Kilidi deðiþtirmek istediðine emin misin?\nAnahtara sahip kiþiler tekrardan kullanamayacaklar.", "Ýleri", "Ýptal");
        case 8:
        {
            new string[500];
            new isyeri = GetPlayerMenuBiz(playerid);

            format(string, sizeof(string), "");
            for(new x; x < 20; x++)
            {
                if(BuildingInfo[isyeri][Calisan][x] != 0)
                {
                    format(string, sizeof(string), "%s\n%s", string, GetCharacterName(BuildingInfo[isyeri][Calisan][x]));
                }
            }

            Dialog_Show(playerid, DialogBizCalisanListe, DIALOG_STYLE_LIST, "Çalýþan Listesi", string, "Tamam", "<< Geri");
        }
        case 9: Dialog_Show(playerid, DialogBizCalisanIslem, DIALOG_STYLE_LIST, "Çalýþan Düzenle", "Çalýþan ekle\nÇalýþan çýkart\nTüm çalýþanlarý çýkart", "Seç", "<< Geri");
        case 10: SunucuMesaji(playerid, "Ýþletmeniz bu sistemden yararlanmýyor.");//Dialog_Show(playerid, DialogBizAktor, DIALOG_STYLE_LIST, "Aktör Sistemi", "YAKINDA", "Seç", "<< Geri");
        case 11: if(BuildingInfo[buildingid][bType] != CLEAN) Dialog_Show(playerid, DialogProductOpt, DIALOG_STYLE_LIST, "Ürünleri Yönet", "Kamyon þoförlerinden ürün %s iste\nÜrün fiyat listesi", "Ýleri", "Ýptal", (BuildingInfo[buildingid][bRequestTruck]) ? ("iptali") : ("sipariþi"));
        case 12: Dialog_Show(playerid, DialogBizEntrance, DIALOG_STYLE_INPUT, "Giriþ Ücreti", "Ýþletmen için giriþ ücretini buraya gir:", "Ýleri", "Ýptal");
        case 13:
        {
            if(BuildingInfo[buildingid][bStereo] == false)return
                SunucuMesaji(playerid, "Radyo zaten kapalý.");

            BasariMesaji(playerid, "Radyo kapatýldý.");

            foreach(new i : Player) if(IsPlayerConnected(i) && GetPlayerBuilding(i, true) == buildingid)
                StopAudioStreamForPlayer(i);

            BuildingInfo[buildingid][bStereo] = false;
        }
        case 14: ShowRadioLinks(playerid, 0);
        case 15:
        {
            if(GetPlayerVirtualWorld(playerid) != BuildingInfo[buildingid][bWorld] || GetPlayerInterior(playerid) != BuildingInfo[buildingid][bInterior])return
                SunucuMesajiC(playerid, "Ýþletmende deðilsin.");

            GetPlayerPos(playerid, BuildingInfo[buildingid][bPosIntX], BuildingInfo[buildingid][bPosIntY], BuildingInfo[buildingid][bPosIntZ]);
            Player_Info(playerid, "Isletmenin  ~y~cikis~w~ yerini degistirdin.");

            SaveBuilding(buildingid);
        }
        case 16:
        {
            if(BuildingInfo[buildingid][bVergi] <= 0)
                return HataMesajiC(playerid, "Zaten vergi borcunuz bulunmuyor.");

            if(PlayerInfo[playerid][pCash] < BuildingInfo[buildingid][bVergi])
                return HataMesajiC(playerid, "Yeterli miktarda paranýz yok.");

            OAC_GivePlayerMoney(playerid, -BuildingInfo[buildingid][bVergi]);
            BuildingInfo[buildingid][bVergi] = 0;
            SaveBuilding(buildingid);

            BasariMesaji(playerid, "Ýþletmenin vergi borcunu ödediniz. (%s)", ReturnDate());
        }
        case 17: {
            BuildingInfo[buildingid][bDekorKilit] = !BuildingInfo[buildingid][bDekorKilit];
            SendClientMessage(playerid, COLOR_LIGHTRED, (BuildingInfo[buildingid][bDekorKilit]) ? ("[SA-RP] {FFFFFF}Ýþyerinizin dekorunu kilitlediniz, artýk anahtarý olanlar dekor yapamayacak.") : ("[SA-RP] {FFFFFF}Ýþyerinizin dekor kilidini açtýnýz, artýk anahtarý olan herkes dekor yapabilecek."));
            SaveBuilding(buildingid);
        }
        case 18: {
            if(BuildingInfo[buildingid][bCeza] <= 0)
                return HataMesajiC(playerid, "Zaten cezanýz bulunmuyor.");

            if(PlayerInfo[playerid][pCash] < BuildingInfo[buildingid][bCeza])
                return HataMesajiC(playerid, "Yeterli miktarda paranýz yok.");

            OAC_GivePlayerMoney(playerid, -BuildingInfo[buildingid][bCeza]);
            Faction_GovernmentCash(BuildingInfo[buildingid][bCeza]);
            BuildingInfo[buildingid][bCeza] = 0;
            SaveBuilding(buildingid);
            BasariMesaji(playerid, "Ýþletmenin cezasýný ödediniz. (%s)", ReturnDate());
        }
        case 19:
        { // interiorsec
            new string[512];

            for(new i; i < sizeof(IsletmeInt); i++)
            {
                if(BuildingInfo[buildingid][bDekor] == i+1)continue;
                if(IsletmeInt[i][isyeritip] != -1 && IsletmeInt[i][isyeritip] != BuildingInfo[buildingid][bType])continue;

                format(string, sizeof(string), "%s%s\n", string, IsletmeInt[i][intname]);
            }

            Dialog_Show(playerid, DialogIsletmeInterior, DIALOG_STYLE_LIST, "Interior Satýn Al", string, "Satýn Al", "Geri");
        }
        case 20:
        {
            if(BuildingInfo[buildingid][bType] == GARAJ || BuildingInfo[buildingid][bType] == COMPLEX || BuildingInfo[buildingid][bType] == TAMIRHANE)
                return HataMesaji(playerid, "Burada bu sistemden yararlanamazsýnýz.");
                
            Dialog_Show(playerid, DialogIsletmeType, DIALOG_STYLE_LIST, "Ýþletme Tip Deðiþtir", "Sýfýrla (/satinal kullanýlamaz)\nMarket ($10.000)\nTavuk Dükkaný ($3.000)\nPizza Dükkaný ($3.000)\nHamburger Dükkaný ($3.000)\nKýyafet Maðazasý ($10.000)\nKafe/Bar ($5.000)", "Ýleri", "Ýptal");
        }
        case 21:
        {
            if(!BuildingInfo[buildingid][bGPS])
                BasariMesaji(playerid, "Ýþletme konum paylaþýmý aktif edildi."), BuildingInfo[buildingid][bGPS] = 1;
                
            else if(BuildingInfo[buildingid][bGPS])
                BasariMesaji(playerid, "Ýþletme konum paylaþýmý pasife çekildi."), BuildingInfo[buildingid][bGPS] = 0;
        }
        case 22:
        { // ürün ekle
            if(BuildingInfo[buildingid][bType] == CUSTOM)
            {
                new stringDialog[2048];
                for(new i; i < 5; i++)
                {
                    if(BuildingInfo[buildingid][bUrunFiyat][i] != 0)
                    {
                        format(stringDialog, sizeof stringDialog, "%s\n{0896aa}%s\t{66b743}$%d", stringDialog, BuildingUrunInfo[buildingid][i], BuildingInfo[buildingid][bUrunFiyat][i]);
                    }
                    else
                    {
                        format(stringDialog, sizeof stringDialog, "%s\n{ffffff}Ürün Yok\t{b74c3b}$0", stringDialog);
                    }
                }
                Dialog_Show(playerid, DialogIsyeriUrunEkle, DIALOG_STYLE_TABLIST_HEADERS, "Ýþyeri Ürün Ýþlemleri", "{5d5a59}Ürün Ýsmi\t{5d5a59}Ürün Fiyatý%s", "Seç", "Ýptal", stringDialog);
            }
        }
    }

    return 1;
}

Dialog:DialogIsyeriUrunAl(playerid, response, listitem, inputtext[]) {
    if(!response) return 0;
    new buildingid = GetPlayerBuilding(playerid, true);
    if(buildingid == -1) return HataMesajiC(playerid, "Bir iþletmede deðilsin.");
    if(BuildingInfo[buildingid][bType] != CUSTOM) return HataMesajiC(playerid, "Bu iþletme bu komutu desteklemiyor.");
    if(BuildingInfo[buildingid][bUrunFiyat][listitem] == 0) return HataMesajiC(playerid, "Bu slotta satýlan bir ürün yok, dolu bir slot seçin.");
    new urunTipi = BuildingInfo[buildingid][bUrunTip][listitem];
    switch(urunTipi) {
        case 0: { // yiyecekse
            static const Float:hpAdd = 10.0;
            new Float:playerHealth;
            new mealID = Meal_FreeID();
            if(mealID == -1) {
                AC_GetPlayerHealth(playerid, playerHealth);

                playerHealth += hpAdd;
                AC_SetPlayerHealth(playerid, (playerHealth > 100) ? 100.0 : playerHealth);
                PlayerAME(playerid, "bir yiyecek satýn alýr.");
                AC_GivePlayerMoney(playerid, -BuildingInfo[buildingid][bUrunFiyat][listitem], "/satinal");
                BuildingInfo[buildingid][bCash] += BuildingInfo[buildingid][bUrunFiyat][listitem];
                return SunucuMesajiC(playerid, "Sunucu tepsi limitine ulaþýldýðý için elinize tepsi verilmedi.");
            }
            else if(GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_NONE) {
                AC_GetPlayerHealth(playerid, playerHealth);

                playerHealth += hpAdd;
                AC_SetPlayerHealth(playerid, (playerHealth > 100) ? 100.0 : playerHealth);
                PlayerAME(playerid, "bir yiyecek satýn alýr.");
                AC_GivePlayerMoney(playerid, -BuildingInfo[buildingid][bUrunFiyat][listitem], "/satinal");
                BuildingInfo[buildingid][bCash] += BuildingInfo[buildingid][bUrunFiyat][listitem];
                return SunucuMesajiC(playerid, "Müsait olmadýðýnýz için elinize tepsi verilmedi.");
            }
            AC_GetPlayerHealth(playerid, playerHealth);

            playerHealth += hpAdd;
            AC_SetPlayerHealth(playerid, (playerHealth > 100) ? 100.0 : playerHealth);

            SetPlayerAttachedObject(playerid, 9, BuildingInfo[buildingid][bUrunObje][listitem], 1, 0.004999, 0.529999, 0.126999, -83.200004, 115.999961, -31.799890, 0.500000, 0.816000, 0.500000);

            SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);

            MealInfo[mealID][mPlayer] = playerid;
            MealInfo[mealID][mExists] = 1;
            MealInfo[mealID][mModel] = BuildingInfo[buildingid][bUrunObje][listitem];

            PlayerInfo[playerid][pMeal] = mealID;

            if(SunucuBilgi[TepsiSistemi]) BasariMesaji(playerid, "/tepsi komutuyla tepsiyi yönetebilirsin.");
            else BasariMesaji(playerid, "/tepsi komutuyla tepsidekileri yiyebilirsin.");
            PlayerAME(playerid, "bir yiyecek satýn alýr.");
            AC_GivePlayerMoney(playerid, -BuildingInfo[buildingid][bUrunFiyat][listitem], "/satinal");
            BuildingInfo[buildingid][bCash] += BuildingInfo[buildingid][bUrunFiyat][listitem];
            Iter_Add(Meals, mealID);
        }
        case 1: { // içecekse
            static const Float:hpAdd = 10.0;
            new Float:playerHealth;
            if(BuildingInfo[buildingid][bUrunObje][listitem] == 0) { // gazozsa
                AC_GetPlayerHealth(playerid, playerHealth);
                playerHealth += hpAdd;
                AC_SetPlayerHealth(playerid, (playerHealth > 100) ? 100.0 : playerHealth);
                PlayerAME(playerid, "bir içecek satýn alýr.");
                AC_GivePlayerMoney(playerid, -BuildingInfo[buildingid][bUrunFiyat][listitem], "/satinal");
                BuildingInfo[buildingid][bCash] += BuildingInfo[buildingid][bUrunFiyat][listitem];
                if(GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_NONE) return SunucuMesajiC(playerid, "Müsait olmadýðýnýz için elinize içecek verilmedi.");
                SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_SPRUNK);
            } else if(BuildingInfo[buildingid][bUrunObje][listitem] == 1) { // biraysa
                AC_GetPlayerHealth(playerid, playerHealth);
                playerHealth += hpAdd;
                AC_SetPlayerHealth(playerid, (playerHealth > 100) ? 100.0 : playerHealth);
                PlayerAME(playerid, "bir içecek satýn alýr.");
                AC_GivePlayerMoney(playerid, -BuildingInfo[buildingid][bUrunFiyat][listitem], "/satinal");
                BuildingInfo[buildingid][bCash] += BuildingInfo[buildingid][bUrunFiyat][listitem];
                if(GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_NONE) return SunucuMesajiC(playerid, "Müsait olmadýðýnýz için elinize içecek verilmedi.");
                SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_BEER);
            } else { // þarapsa
                AC_GetPlayerHealth(playerid, playerHealth);
                playerHealth += hpAdd;
                AC_SetPlayerHealth(playerid, (playerHealth > 100) ? 100.0 : playerHealth);
                PlayerAME(playerid, "bir içecek satýn alýr.");
                AC_GivePlayerMoney(playerid, -BuildingInfo[buildingid][bUrunFiyat][listitem], "/satinal");
                BuildingInfo[buildingid][bCash] += BuildingInfo[buildingid][bUrunFiyat][listitem];
                if(GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_NONE) return SunucuMesajiC(playerid, "Müsait olmadýðýnýz için elinize içecek verilmedi.");
                SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_WINE);
            }
        } 
        case 2: { // diðerse
            SunucuMesaji(playerid, "Ýþletmeden %s satýn aldýn.", BuildingUrunInfo[buildingid][listitem]);
            PlayerAME(playerid, "bir ürün satýn alýr.");
            AC_GivePlayerMoney(playerid, -BuildingInfo[buildingid][bUrunFiyat][listitem], "/satinal");
            BuildingInfo[buildingid][bCash] += BuildingInfo[buildingid][bUrunFiyat][listitem];
        }
    }
    return 1;
}

Dialog:DialogIsyeriUrunEkle(playerid, response, listitem, inputtext[]) {
    if(!response) return 0;
    new buildingid = GetPlayerMenuBiz(playerid);

    if(buildingid == -1)return
        SunucuMesajiC(playerid, "Ýþletmenin yakýnýnda ya da içerisinde deðilsin.");

    new slot = listitem;
    if(BuildingInfo[buildingid][bUrunFiyat][slot] == 0) {
        PlayerInfo[playerid][pSelectedSlot] = listitem;
        Dialog_Show(playerid, DialogIsyeriUrunIsim, DIALOG_STYLE_INPUT, "Ýþyeri Ürün Ýþlemleri", "{c43b0d}%d. {ffffff}slota eklenecek ürünün ismini aþaðýya girin:(Minimum 2, maksimum 80 karakter)", "Tamam", "Ýptal", slot);
    }
    else {
        PlayerInfo[playerid][pSelectedSlot] = listitem;
        Dialog_Show(playerid, DialogIsyeriUrunSecenek, DIALOG_STYLE_LIST, "Ýþyeri Ürün Ýþlemleri", "Ýsim deðiþtir\nFiyat deðiþtir\n{ff0000}Sil", "Seç", "Ýptal");
    }
    return 1;
}

Dialog:DialogIsyeriUrunSecenek(playerid, response, listitem, inputtext[]) {
    if(!response) return 0;
    new buildingid = GetPlayerMenuBiz(playerid);

    if(buildingid == -1)return
        SunucuMesajiC(playerid, "Ýþletmenin yakýnýnda ya da içerisinde deðilsin.");
    if(BuildingInfo[buildingid][bUrunFiyat][PlayerInfo[playerid][pSelectedSlot]] == 0) return HataMesajiC(playerid, "Ürün bulunamadý.");
    switch(listitem) {
        case 0: { // isim deðiþtir
            Dialog_Show(playerid, DialogIsyeriUrunSecIsim, DIALOG_STYLE_INPUT, "Ýþyeri Ürün Ýþlemleri", "{c43b0d}%s için yeni isim belirleyin:(Minimum 2, maksimum 80 karakter)", "Tamam", "Ýptal", BuildingUrunInfo[buildingid][PlayerInfo[playerid][pSelectedSlot]]);
        }
        case 1: { // fiyat deðiþtir
            Dialog_Show(playerid, DialogIsyeriUrunSecFiyat, DIALOG_STYLE_INPUT, "Ýþyeri Ürün Ýþlemleri", "{c43b0d}%s için yeni fiyat belirleyin:(Minimum 1, maksimum 1000)", "Tamam", "Ýptal", BuildingUrunInfo[buildingid][PlayerInfo[playerid][pSelectedSlot]]);
        }
        case 2: { // sil
            BuildingInfo[buildingid][bUrunFiyat][PlayerInfo[playerid][pSelectedSlot]] = 0;
            BuildingInfo[buildingid][bUrunObje][PlayerInfo[playerid][pSelectedSlot]] = -1;
            BuildingInfo[buildingid][bUrunTip][PlayerInfo[playerid][pSelectedSlot]] = 0;
            format(BuildingUrunInfo[buildingid][PlayerInfo[playerid][pSelectedSlot]], 80, "N/A");
            SunucuMesajiC(playerid, "Ürün baþarýyla silindi.");
        }
    }
    return 1;
}

Dialog:DialogIsyeriUrunSecIsim(playerid, response, listitem, inputtext[]) {
    if(!response) return 0;
    new buildingid = GetPlayerMenuBiz(playerid);

    if(buildingid == -1)return
        SunucuMesajiC(playerid, "Ýþletmenin yakýnýnda ya da içerisinde deðilsin.");
    if(BuildingInfo[buildingid][bUrunFiyat][PlayerInfo[playerid][pSelectedSlot]] == 0) return HataMesajiC(playerid, "Ürün bulunamadý.");
    if(strlen(inputtext) < 2 || strlen(inputtext) > 80) return HataMesajiC(playerid, "2 ile 80 arasý uzunlukta isim girin.");
    format(BuildingUrunInfo[buildingid][PlayerInfo[playerid][pSelectedSlot]], 80, "%s", inputtext);
    SunucuMesajiC(playerid, "Ürün ismi deðiþtirildi.");
    Dialog_Show(playerid, DialogIsyeriUrunSecenek, DIALOG_STYLE_LIST, "Ýþyeri Ürün Ýþlemleri", "Ýsim deðiþtir\nFiyat deðiþtir\n{ff0000}Sil", "Seç", "Ýptal");
    return 1;
}

Dialog:DialogIsyeriUrunSecFiyat(playerid, response, listitem, inputtext[]) {
    if(!response) return 0;
    new buildingid = GetPlayerMenuBiz(playerid);

    if(buildingid == -1)return
        SunucuMesajiC(playerid, "Ýþletmenin yakýnýnda ya da içerisinde deðilsin.");
    if(BuildingInfo[buildingid][bUrunFiyat][PlayerInfo[playerid][pSelectedSlot]] == 0) return HataMesajiC(playerid, "Ürün bulunamadý.");
    if(strlen(inputtext) == 0 || !IsNumeric(inputtext) || strval(inputtext) < 1 || strval(inputtext) > 1000) return HataMesajiC(playerid, "1 ile 1000 arasý sayýsal bir deðer girin, kutu boþ býrakýlamaz.");
    BuildingInfo[buildingid][bUrunFiyat][PlayerInfo[playerid][pSelectedSlot]] = strval(inputtext);
    SunucuMesajiC(playerid, "Ürün fiyatý deðiþtirildi.");
    Dialog_Show(playerid, DialogIsyeriUrunSecenek, DIALOG_STYLE_LIST, "Ýþyeri Ürün Ýþlemleri", "Ýsim deðiþtir\nFiyat deðiþtir\n{ff0000}Sil", "Seç", "Ýptal");
    return 1;
}


Dialog:DialogIsyeriUrunIsim(playerid, response, listitem, inputtext[]) {
    if(!response) return 0;
    new buildingid = GetPlayerMenuBiz(playerid);

    if(buildingid == -1)return
        SunucuMesajiC(playerid, "Ýþletmenin yakýnýnda ya da içerisinde deðilsin.");
    new slot = PlayerInfo[playerid][pSelectedSlot];
    if(strlen(inputtext) < 2 || strlen(inputtext) > 80) return Dialog_Show(playerid, DialogIsyeriUrunIsim, DIALOG_STYLE_INPUT, "Ýþyeri Ürün Ýþlemleri", "{ff0000}En az 2, en fazla 80 karakter kullanabilirsin.\n{c43b0d}%d. {ffffff}slota eklenecek ürünün ismini aþaðýya girin:(Minimum 2, maksimum 80 karakter)", "Tamam", "Ýptal", slot);
    SetPVarString(playerid, "UrunIsim", inputtext);
    Dialog_Show(playerid, DialogIsyeriUrunFiyat, DIALOG_STYLE_INPUT, "Ýþyeri Ürün Ýþlemleri", "{c43b0d}%s {ffffff}için bir fiyat belirleyin:(Minimum 1, maksimum 1000)", "Tamam", "Ýptal", inputtext);
    return 1;
}

Dialog:DialogIsyeriUrunFiyat(playerid, response, listitem, inputtext[]) {
    if(!response) return 0;
    new buildingid = GetPlayerMenuBiz(playerid);

    if(buildingid == -1)return
        SunucuMesajiC(playerid, "Ýþletmenin yakýnýnda ya da içerisinde deðilsin.");
    if(IsNumeric(inputtext) && strlen(inputtext) > 0 && strval(inputtext) >= 1 && strval(inputtext) <= 1000) {
        SetPVarInt(playerid, "UrunFiyat", strval(inputtext));
        SunucuMesaji(playerid, "Ürünü $%d fiyatýna satacaksýn.", strval(inputtext));
        Dialog_Show(playerid, DialogIsyeriUrunTip, DIALOG_STYLE_TABLIST_HEADERS, "Ýþyeri Ürün Ýþlemleri", "{716c6b}Ürün Tipi\t{716c6b}Ürün Açýklamasý\n{c1391d}Yiyecek\t{ffffff}Satýn alan oyuncunun eline seçeceðiniz tepsi gelir.\n{c1391d}Ýçecek\t{ffffff}Satýn alan oyuncunun eline istediðiniz içecek gelir.\n{c1391d}Diðer\t{ffffff}Hiçbir etkisi yoktur, tamamen rol amaçlýdýr.", "Seç", "Ýptal");
    }
    return 1;
}

Dialog:DialogIsyeriUrunTip(playerid, response, listitem, inputtext[]) {
    if(!response) return 0;
    new buildingid = GetPlayerMenuBiz(playerid);

    if(buildingid == -1)return
        SunucuMesajiC(playerid, "Ýþletmenin yakýnýnda ya da içerisinde deðilsin.");
    new slot = PlayerInfo[playerid][pSelectedSlot];
    SetPVarInt(playerid, "UrunTip", listitem);
    if(listitem == 0) { // yiyecekse
        new objectsID[] = {2215, 2216, 2217, 2353, 2218, 2219, 2220, 2355, 2213, 2214, 2212, 2354};
        ShowModelSelectionMenuEx(playerid, objectsID, 12, "Yiyecekler", TISYIYECEK, 16.0, 0.0, -55.0);
        SunucuMesajiC(playerid, "Satýn alýndýðýnda oyuncunun eline gelmesini istediðiniz tepsiyi seçin.");
    } else if(listitem == 1) { // içecekse
        Dialog_Show(playerid, DialogIsyeriUrunObje, DIALOG_STYLE_LIST, "Ýþyeri Ürün Ýþlemleri", "Gazoz\nBira\nÞarap", "Seç", "Ýptal");
        SunucuMesajiC(playerid, "Satýn alýndýðýnda oyuncunun eline gelmesini istediðiniz içeceði seçin.");
    } else { // diðerse
        BuildingInfo[buildingid][bUrunFiyat][slot] = GetPVarInt(playerid, "UrunFiyat");
        new urunAdi[80];
        GetPVarString(playerid, "UrunIsim", urunAdi, 80);
        format(BuildingUrunInfo[buildingid][slot], 80, "%s", urunAdi);
        BuildingInfo[buildingid][bUrunTip][slot] = listitem;
        BuildingInfo[buildingid][bUrunObje][slot] = -1;
        SunucuMesajiC(playerid, "Ürün satýþa konuldu.");
        DeletePVar(playerid, "UrunFiyat");
        DeletePVar(playerid, "UrunIsim");
        DeletePVar(playerid, "UrunTip");
    }
    return 1;
}

Dialog:DialogIsyeriUrunObje(playerid, response, listitem, inputtext[]) {
    if(!response) return 0;
    new buildingid = GetPlayerMenuBiz(playerid);

    if(buildingid == -1)return
        SunucuMesajiC(playerid, "Ýþletmenin yakýnýnda ya da içerisinde deðilsin.");
    new slot = PlayerInfo[playerid][pSelectedSlot];
    BuildingInfo[buildingid][bUrunFiyat][slot] = GetPVarInt(playerid, "UrunFiyat");
    new urunAdi[80];
    GetPVarString(playerid, "UrunIsim", urunAdi, 80);
    format(BuildingUrunInfo[buildingid][slot], 80, "%s", urunAdi);
    BuildingInfo[buildingid][bUrunTip][slot] = GetPVarInt(playerid, "UrunTip");
    BuildingInfo[buildingid][bUrunObje][slot] = listitem;
    SunucuMesajiC(playerid, "Ürün satýþa konuldu.");
    DeletePVar(playerid, "UrunFiyat");
    DeletePVar(playerid, "UrunIsim");
    DeletePVar(playerid, "UrunTip");
    return 1;
}

Dialog:DialogBizCalisanIslem(playerid, response, listitem, inputtext[])
{
    if(!response) return pc_cmd_isletme(playerid);
    switch(listitem)
    {
        case 0:
        {
            Dialog_Show(playerid, DialogBizCalisanEkle, DIALOG_STYLE_INPUT, "Çalýþan Ekle", "Eklemek istediðiniz çalýþanýn ID'sini ya da adýný girin:", "Tamam", "<< Geri");
        }
        case 1:
        {
            Dialog_Show(playerid, DialogBizCalisanCikar, DIALOG_STYLE_INPUT, "Çalýþan Çýkar", "Çýkarmak istediðiniz çalýþanýn ID'sini ya da adýný girin:", "Tamam", "<< Geri");
        }
        case 2: {
            Dialog_Show(playerid, DialogBizTumCalisanCik, DIALOG_STYLE_MSGBOX, "Tüm Çalýþanlarý Çýkar", "Ýþyerinizde çalýþan tüm çalýþanlarý iþten çýkarmak istediðinize emin misiniz? Bu iþlem geri alýnamaz.", "Evet", "Hayýr");
        }
    }
    return 1;
}

Dialog:DialogBizTumCalisanCik(playerid, response, listitem, inputtext[]) {
    new isyeri = GetPlayerMenuBiz(playerid);
    if(isyeri != -1) {
        foreach(new i: Player) {
            if(PlayerInfo[i][pCalistigiIsyeri][0] == isyeri) {
                PlayerInfo[i][pCalistigiIsyeri][0] = -1;
                PlayerInfo[i][pCalistigiIsyeri][1] = -1;
                SunucuMesaji(i, "Çalýþtýðýnýz iþyerinden çýkarýldýnýz.");
            }
        }
        for(new x; x < 20; x++)
            BuildingInfo[isyeri][Calisan][x] = 0;
        BuildingInfo[isyeri][bCalisanSayisi] = 0;
        SunucuMesaji(playerid, "Tüm çalýþanlarý iþten çýkardýnýz.");
    } else return HataMesajiC(playerid, "Ýþyerinize yakýn ya da iþyerinizin içinde deðilsiniz.");
    return 1;
}

Dialog:DialogBizCalisanCikar(playerid, response, listitem, inputtext[])
{
    if(!response) return pc_cmd_isletme(playerid);
    new id;
    new isyeri = GetPlayerMenuBiz(playerid);
    sscanf(inputtext, "u", id);
    if(!IsPlayerConnected(id)) return Dialog_Show(playerid, DialogBizCalisanCikar, DIALOG_STYLE_INPUT, "Çalýþan Çýkar", "Belirttiðiniz oyuncu oyunda deðil.\nÇýkarmak istediðiniz çalýþanýn ID'sini ya da adýný girin:", "Tamam", "<< Geri");
    if(!PlayerInfo[id][pLogged]) return Dialog_Show(playerid, DialogBizCalisanCikar, DIALOG_STYLE_INPUT, "Çalýþan Çýkar", "Belirttiðiniz oyuncu giriþ yapmamýþ.\nÇýkarmak istediðiniz çalýþanýn ID'sini ya da adýný girin:", "Tamam", "<< Geri");
    if(PlayerInfo[id][pCalistigiIsyeri][0] != isyeri) return Dialog_Show(playerid, DialogBizCalisanCikar, DIALOG_STYLE_INPUT, "Çalýþan Çýkar", "Belirttiðiniz oyuncu sizin iþletmenizde çalýþmýyor.\nÇýkarmak istediðiniz çalýþanýn ID'sini ya da adýný girin:", "Tamam", "<< Geri");

    for(new x; x < 20; x++)
    {
        if(BuildingInfo[isyeri][Calisan][x] == PlayerInfo[id][pID])
        {
            BuildingInfo[isyeri][Calisan][x] = 0;
            break;
        }
    }

    BuildingInfo[isyeri][bCalisanSayisi]--;
    PlayerInfo[id][pCalistigiIsyeri][0] = -1;
    PlayerInfo[id][pCalistigiIsyeri][1] = -1;
    BasariMesaji(playerid, "Oyuncu iþten atýldý.");
    BasariMesaji(id, "Çalýþtýðýnýz %s isimli iþletmeden atýldýnýz.", BuildingInfo[isyeri][bName]);
    IsletmeCalisanKayit(isyeri);
    return 1;
}

Dialog:DialogBizCalisanEkle(playerid, response, listitem, inputtext[]) {
    if(!response) return Dialog_Show(playerid, DialogBizCalisanIslem, DIALOG_STYLE_LIST, "Çalýþan Düzenle", "Çalýþan ekle\nÇalýþan çýkart", "Seç", "<< Geri");

    if(BuildingInfo[GetPlayerMenuBiz(playerid)][bCalisanSayisi] >= 20) return HataMesajiC(playerid, "Bir iþletmede maksimum çalýþan 20 olabilir.");

    new id;
    sscanf(inputtext, "u", id);
    if(!IsPlayerConnected(id)) return Dialog_Show(playerid, DialogBizCalisanEkle, DIALOG_STYLE_INPUT, "Çalýþan Ekle", "Belirttiðiniz oyuncu oyunda deðil.\nEklemek istediðiniz çalýþanýn ID'sini ya da adýný girin:", "Tamam", "<< Geri");
    if(!PlayerInfo[id][pLogged]) return Dialog_Show(playerid, DialogBizCalisanEkle, DIALOG_STYLE_INPUT, "Çalýþan Ekle", "Belirttiðiniz oyuncu giriþ yapmamýþ.\nEklemek istediðiniz çalýþanýn ID'sini ya da adýný girin:", "Tamam", "<< Geri");
    if(PlayerInfo[id][pCalistigiIsyeri][0] != -1) return Dialog_Show(playerid, DialogBizCalisanEkle, DIALOG_STYLE_INPUT, "Çalýþan Ekle", "Belirttiðiniz oyuncu zaten bir iþletmede çalýþýyor.\nEklemek istediðiniz çalýþanýn ID'sini ya da adýný girin:", "Tamam", "<< Geri");
    if(GetPVarInt(playerid, "DavetGonderildi") == 1) return Dialog_Show(playerid, DialogBizCalisanEkle, DIALOG_STYLE_INPUT, "Çalýþan Ekle", "Zaten bir iþ teklifi göndermiþsiniz, iptal etmek icin /isiptal yazýn.\nEklemek istediðiniz çalýþanýn ID'sini ya da adýný girin:", "Tamam", "<< Geri");
    if(GetPVarInt(id, "DavetGonderildi") == 1) return Dialog_Show(playerid, DialogBizCalisanEkle, DIALOG_STYLE_INPUT, "Çalýþan Ekle", "Bu oyuncuya zaten bir iþ teklifi gönderilmiþ, lütfen bekleyin.\nEklemek istediðiniz çalýþanýn ID'sini ya da adýný girin:", "Tamam", "<< Geri");
    new Float:pX, Float:pY, Float:pZ, pINT, pVW;
    GetPlayerPos(id, pX, pY, pZ);
    pINT = GetPlayerInterior(id);
    pVW = GetPlayerVirtualWorld(id);
    if(IsPlayerInRangeOfPoint(playerid, 3.0, pX, pY, pZ) && GetPlayerInterior(playerid) == pINT && GetPlayerVirtualWorld(playerid) == pVW) {
        SetPVarInt(playerid, "DavetGonderildi", 1);
        SetPVarInt(id, "DavetGonderildi", 1);
        SetPVarInt(playerid, "DavetGonderen", playerid);
        SetPVarInt(playerid, "DavetGonderdigi", id);
        SetPVarInt(id, "DavetGonderen", playerid);
        SetPVarInt(id, "DavetGonderdigi", id);
        SetPVarInt(id, "DavetIsyeri", GetPlayerMenuBiz(playerid));
        Dialog_Show(id, DialogBizCalisanEkleOnay, DIALOG_STYLE_MSGBOX, "Ýþ teklifi", "%s adlý kiþi sizi %s adlý iþletmesinde çalýþmaya davet ediyor. Kabul ediyor musunuz?", "Evet", "Hayýr", ReturnRoleplayName(playerid), BuildingInfo[GetPlayerMenuBiz(playerid)][bName]);
        BasariMesaji(playerid, "Ýþ teklifi gönderildi, gönderilen kiþinin cevaplamak için 30 saniyesi var.");
        IsTeklifiTimer[id] = SetTimerEx("IsTeklifi", 30 * 1000, false, "d", id);
    } else return Dialog_Show(playerid, DialogBizCalisanEkle, DIALOG_STYLE_INPUT, "Çalýþan Ekle", "Belirttiðiniz kiþiye yeterince yakýn deðilsiniz.\nEklemek istediðiniz çalýþanýn ID'sini ya da adýný girin:", "Tamam", "<< Geri");
    return 1;
}

Dialog:DialogBizCalisanEkleOnay(playerid, response, listitem, inputtext) {
    if(!response) {
        if(GetPVarInt(playerid, "DavetGonderildi") == 1) {
            new id = GetPVarInt(playerid, "DavetGonderen");
            BasariMesaji(id, "Ýþ teklifi gönderdiðiniz kiþi teklifinizi reddetti.");
            BasariMesaji(playerid, "Ýþ teklifini reddettiniz.");
            KillTimer(IsTeklifiTimer[playerid]);
            DeletePVar(playerid, "DavetGonderildi");
            DeletePVar(playerid, "DavetGonderen");
            DeletePVar(playerid, "DavetGonderdigi");
            DeletePVar(playerid, "DavetIsyeri");
            DeletePVar(id, "DavetGonderildi");
            DeletePVar(id, "DavetGonderen");
            DeletePVar(id, "DavetGonderdigi");
        } else return HataMesajiC(playerid, "Ýþ teklifinin süresi dolmuþ ya da iþ teklifi gönderilmemiþ.");
    } else {
        if(GetPVarInt(playerid, "DavetGonderildi") == 1) {
            new id = GetPVarInt(playerid, "DavetGonderen");
            BasariMesaji(id, "Ýþ teklifi gönderdiðiniz kiþi teklifinizi kabul etti.");
            BasariMesaji(playerid, "Ýþ teklifini kabul ettiniz.");
            PlayerInfo[playerid][pCalistigiIsyeri][0] = GetPVarInt(playerid, "DavetIsyeri");
            PlayerInfo[playerid][pCalistigiIsyeri][1] = BuildingInfo[GetPVarInt(playerid, "DavetIsyeri")][bID];
            BuildingInfo[GetPVarInt(playerid, "DavetIsyeri")][bCalisanSayisi]++;
            BuildingInfo[GetPVarInt(playerid, "DavetIsyeri")][Calisan][BuildingInfo[GetPVarInt(playerid, "DavetIsyeri")][bCalisanSayisi] - 1] = PlayerInfo[playerid][pID];
            IsletmeCalisanKayit(GetPVarInt(playerid, "DavetIsyeri"));
            KillTimer(IsTeklifiTimer[playerid]);
            DeletePVar(playerid, "DavetGonderildi");
            DeletePVar(playerid, "DavetGonderen");
            DeletePVar(playerid, "DavetGonderdigi");
            DeletePVar(playerid, "DavetIsyeri");
            DeletePVar(id, "DavetGonderildi");
            DeletePVar(id, "DavetGonderen");
            DeletePVar(id, "DavetGonderdigi");
        } else return HataMesajiC(playerid, "Ýþ teklifinin süresi dolmuþ ya da iþ teklifi gönderilmemiþ.");
    }
    return 1;
}

Dialog:DialogProductOpt(playerid, response, listitem, inputtext[])
{
    if(!response)return 0;

    new buildingid = GetPlayerMenuBiz(playerid);
    new string[500];
    new count;

    switch(listitem)
    {
        case 0:
        {
            /*if(BuildingInfo[buildingid][bRequestTruck])
            {
                if(IsRequestFree(buildingid) != -1)return
                    HataMesaji(playerid, "Sipariþ birisi tarafýndan kabul edilmiþ olduðundan iptal edilemez.", BuildingInfo[buildingid][bRequestTruck]);

                BuildingInfo[buildingid][bRequestTruck] = 0;
                SaveBuilding(buildingid);
                return BasariMesaji(playerid, "Sipariþ iptal edildi.");
            }*/

            Dialog_Show(playerid, DialogAmountItem, DIALOG_STYLE_INPUT, "Sipariþ", "Talep ettiðiniz ürün sayýsýný girin:", "Ýleri", "Ýptal");
        }
        case 1:
        {
            for(new j, js = sizeof(ProductInfo); j < js; j++)
            {
                if(ProductInfo[j][productBiz] != BuildingInfo[buildingid][bType])continue;
                format(string, sizeof(string), "%s%s\t$%d\n", string, ProductInfo[j][productName], BuildingInfo[buildingid][bPrices][count]);
                count++;
            }

            if(count) Dialog_Show(playerid, DialogEditItem, DIALOG_STYLE_TABLIST_HEADERS, "Satýlýk ürünlerin listesi", "Ürün\tFiyat\n%s", "Düzenle", "Ýptal", string);
        }
        default: return 1;
    }

    return 1;
}

Dialog:DialogEditItem(playerid, response, listitem, inputtext[])
{
    if(!response)return 0;

    PlayerInfo[playerid][pProductID] = listitem;

    Dialog_Show(playerid, DialogPriceItem, DIALOG_STYLE_INPUT, "Liste", "Seçilen ürün için yeni fiyatý girin\nSatýþý kaldýrmak için alaný boþ býrakýn", "Ýleri", "Ýptal");

    return 1;
}

Dialog:DialogPriceItem(playerid, response, listitem, inputtext[])
{
    if(!response)return
        PlayerInfo[playerid][pProductID] = -1;

    new amount = strval(inputtext);
    new id = PlayerInfo[playerid][pProductID];
    new buildingid = GetPlayerMenuBiz(playerid);
    if(buildingid == -1) return HataMesajiC(playerid, "Bir iþyerinde deðilsiniz.");
    if(BuildingInfo[buildingid][bType] == BLACK_MARKET && PlayerInfo[playerid][pAdmin] < 20)return
        Dialog_Show(playerid, DialogPriceItem, DIALOG_STYLE_INPUT, "Liste", "Seçilen ürün için yeni fiyatý girin\nSatýþý kaldýrmak için alaný boþ býrakýn", "Ýleri", "Ýptal");
    else if(BuildingInfo[buildingid][bType] != BLACK_MARKET && (amount < 0 || amount > 5000))return
        Dialog_Show(playerid, DialogPriceItem, DIALOG_STYLE_INPUT, "Liste", "Seçilen ürün için yeni fiyatý girin\nSatýþý kaldýrmak için alaný boþ býrakýn", "Ýleri", "Ýptal");

    BuildingInfo[buildingid][bPrices][id] = amount;

    SendFormattedMessage(playerid, COLOR_BIZ, (!amount) ? ("Seçilen ürünü satýþtan kaldýrdýnýz.") : ("Seçilen ürünün yeni fiyatý: $%d"), amount);

    SaveBuilding(buildingid);

    return 1;
}

Dialog:DialogBuyItem(playerid, response, listitem, inputtext[])
{
    if(!response)return 0;

    new playerNumber = Generate_PlayerNumber(playerid);
    new buildingid = GetPlayerBuilding(playerid, true);
    new buyID = PlayerInfo[playerid][pBuyID][listitem];
    if(buildingid != -1) {
        if(!BuildingInfo[buildingid][bPrices][listitem])return
            SunucuMesaji(playerid, "Seçilen ürün satýlmýyor.");

        if(PlayerInfo[playerid][pCash] < BuildingInfo[buildingid][bPrices][listitem])return
            HataMesaji(playerid, "Yeterli paran yok. ($%d)", BuildingInfo[buildingid][bPrices][listitem]);
    } else {
        if(PlayerInfo[playerid][pCash] < ProductInfo[buyID][productPrice])return
            HataMesaji(playerid, "Yeterli paran yok. ($%d)", ProductInfo[buyID][productPrice]);
    }

    PlayerInfo[playerid][pProductID] = listitem;

    switch(buyID)
    {
        case 0:
        {
            if(Inventory_FreeID(playerid) == -1)return
                SunucuMesajiC(playerid, "Envanterinizde yeterli yer yok.");

            mysql_format(ourConnection, queryx, sizeof(queryx), "INSERT INTO phones (created_at, owner, number, biz) VALUES (NOW(), '%e', '%d', '%d')", ReturnName(playerid), playerNumber, BuildingInfo[buildingid][bID]);
            mysql_tquery(ourConnection, queryx);

            Inventory_AddItem(playerid, Inventory_FreeID(playerid), "Cep Telefonu", playerNumber, 1);

            BasariMesaji(playerid, "/telefonyardim komutuyla yardým alabilir, /envanter komutuyla kullanabilirsiniz.");
        }
        case 1:
        {
            if(Inventory_FreeID(playerid) == -1)return
                SunucuMesajiC(playerid, "Envanterinizde yeterli yer yok.");

            mysql_format(ourConnection, queryx, sizeof(queryx), "INSERT INTO phones (created_at, number, biz) VALUES (NOW(), '%d', '%d')", playerNumber, BuildingInfo[buildingid][bID]);
            mysql_tquery(ourConnection, queryx);

            Inventory_AddItem(playerid, Inventory_FreeID(playerid), "Tek kullanýmlýk telefon", playerNumber, 3);

            BasariMesaji(playerid, "/telefonyardim komutuyla yardým alabilir, /envanter komutuyla kullanabilirsiniz.");
        }
        case 2:
        {
            if(Inventory_FreeID(playerid) == -1)return
                SunucuMesajiC(playerid, "Envanterinizde yeterli yer yok.");

            if(Inventory_HasItem(playerid, "Telsiz", ITEM_BIZ) != -1) return
                SunucuMesaji(playerid, "Envanterinde zaten bir telsiz var.");

            Inventory_AddItem(playerid, Inventory_FreeID(playerid), "Telsiz", 1);

            BasariMesaji(playerid, "/telsizyardim komutunu kullanarak yardým alabilir, /envanter komutuyla kullanabilirsiniz.");
        }
        case 3:
        {
            if(Inventory_FreeID(playerid) == -1)return
                SunucuMesajiC(playerid, "Envanterinizde yeterli yer yok.");

            if(PlayerInfo[playerid][pLevel] < 3)return
                HataMesajiC(playerid, "Bu sistemden 3. seviyeden az oyuncular yararlanamaz.");

            Inventory_AddItem(playerid, Inventory_FreeID(playerid), "Maske", 1);

            BasariMesaji(playerid, "Maske satýn aldýn, /maske ile kullanabilir, /envanter ile yönetebilirsin.");
        }
        case 4: AC_GivePlayerWeapon(playerid, 5, 1);
        case 5:
        {
            if(Inventory_FreeID(playerid) == -1)return
                SunucuMesajiC(playerid, "Envanterinizde yeterli yer yok.");

            Inventory_AddItem(playerid, Inventory_FreeID(playerid), "Boombox", 1);

            BasariMesaji(playerid, "Boombox satýn aldýn. /envanter ve /boombox komutlarýyla yönetebilirsin.");
        }
        case 6: AC_GivePlayerWeapon(playerid, 14, 1);
        case 7: AC_GivePlayerWeapon(playerid, 43, 100);
        case 8: AC_GivePlayerWeapon(playerid, 41, 300);
        case 9:
        {
            if(Inventory_FreeID(playerid) == -1)return
                SunucuMesajiC(playerid, "Envanterinizde yeterli yer yok.");

            Inventory_AddItem(playerid, Inventory_FreeID(playerid), "Benzin Kutusu", 1);

            BasariMesaji(playerid, "\"/arac benzinkutusu\" komutuyla araca benzin doldurabilirsin.");
        }
        case 10:
        {
            if(Inventory_FreeID(playerid) == -1)return
                SunucuMesajiC(playerid, "Envanterinizde yeterli yer yok.");

            Inventory_AddItem(playerid, Inventory_FreeID(playerid), "Sigara", 20);

            BasariMesaji(playerid, "Sigara paketi satýn aldýnýz, \"/sigara\" komutuyla sigara içebilirsiniz.");
        }
        case 11:
        {
            if(Inventory_FreeID(playerid) == -1)return
                SunucuMesajiC(playerid, "Envanterinizde yeterli yer yok.");

            Inventory_AddItem(playerid, Inventory_FreeID(playerid), "Zar", 1);

            BasariMesaji(playerid, "\"/zar\" komutuyla zar ile oynayabilirsin.");
        }
        case 12 .. 23:
        {
            if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CARRY) return
                SunucuMesaji(playerid, "Zaten bir tepsi taþýyorsun.");

            static const Float:hpAdd[] = {30.0, 45.0, 60.0, 15.0, 30.0, 45.0, 60.0, 15.0, 30.0, 45.0, 60.0, 15.0};
            static const objectsID[] = {2215, 2216, 2217, 2353, 2218, 2219, 2220, 2355, 2213, 2214, 2212, 2354};

            new Float:playerHealth;
            new mealID = Meal_FreeID();

            AC_GetPlayerHealth(playerid, playerHealth);

            playerHealth += hpAdd[buyID - 13];
            AC_SetPlayerHealth(playerid, (playerHealth > 100) ? 100.0 : playerHealth);

            SetPlayerAttachedObject(playerid, 9, objectsID[buyID - 13], 1, 0.004999, 0.529999, 0.126999, -83.200004, 115.999961, -31.799890, 0.500000, 0.816000, 0.500000);

            SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);

            MealInfo[mealID][mPlayer] = playerid;
            MealInfo[mealID][mExists] = 1;
            MealInfo[mealID][mModel] = objectsID[buyID - 13];

            PlayerInfo[playerid][pMeal] = mealID;

            if(SunucuBilgi[TepsiSistemi]) BasariMesaji(playerid, "/tepsi komutuyla tepsiyi yönetebilirsin.");
            else BasariMesaji(playerid, "/tepsi komutuyla tepsidekileri yiyebilirsin.");

            Iter_Add(Meals, mealID);
        }
        case 24:
        {
            if(Inventory_FreeID(playerid) == -1)return
                SunucuMesajiC(playerid, "Envanterinizde yeterli yer yok.");

            BasariMesaji(playerid, "Envanterine sprite eklendi.");

            Inventory_AddItem(playerid, Inventory_FreeID(playerid), "Sprite", 1);
        }
        case 25:
        {
            if(Inventory_FreeID(playerid) == -1)return
                SunucuMesajiC(playerid, "Envanterinizde yeterli yer yok.");

            BasariMesaji(playerid, "Envanterine bira eklendi.");

            Inventory_AddItem(playerid, Inventory_FreeID(playerid), "Bira", 1);
        }
        case 26 .. 29:
        {
            if(Inventory_FreeID(playerid) == -1) return
                SunucuMesajiC(playerid, "Envanterinizde yeterli yer yok.");

            if(PlayerInfo[playerid][pWeaponsLicense][0] <= 0) return
                SunucuMesaji(playerid, "Silah satýn alma lisansýn yok.");

            if(gettime() > PlayerInfo[playerid][pWeaponsLicense][1]) return
                SunucuMesaji(playerid, "Lisansýnýzýn süresi dolduðu için silah alamazsýn.");

            if(buyID >= 26 && buyID <= 29 && !PlayerInfo[playerid][pWeaponsLicenseGuns][buyID - 26])return
                SunucuMesaji(playerid, "Seçilen silahý satýn alamazsýn.");

            if(PlayerInfo[playerid][pLevel] < 2)
                    return HataMesajiC(playerid, "Bu iþlemi yapabilmek için en az 2 seviye olmalýsýnýz.");

            if(gettime() < PlayerInfo[playerid][CCWGunDate]) return
                SunucuMesaji(playerid, "2 haftada bir silah satýn alabilirsiniz/yenileyebilirsiniz.");

            static const weaponActualAmmo[4] = {102, 70, 25, 20};

            PlayerInfo[playerid][CCWGunID] = buyID;
            PlayerInfo[playerid][CCWGunDate] = gettime() + 86400 * 14; // 2 Hafta

            Inventory_AddItem(playerid, Inventory_FreeID(playerid), ProductInfo[buyID][productName], weaponActualAmmo[buyID - 26]);

            SunucuMesaji(playerid, "%s (Mermi: %d) adlý silah envanterinize eklendi.", ProductInfo[buyID][productName], weaponActualAmmo[buyID - 26]);

            mysql_format(ourConnection, queryx, sizeof(queryx), "INSERT INTO weapon_license_logs (subject_id, action, created_at, value) VALUES ('%d', '%d', NOW(), '%d')", PlayerInfo[playerid][pID], WEAPONLICENSE_ACTION_BUY, buyID - 27);
            mysql_tquery(ourConnection, queryx);
            SaveCharacter(playerid);
        }
        case 30 .. 41:
        {
            if(Inventory_FreeID(playerid) == -1) return
                SunucuMesajiC(playerid, "Envanterinizde yeterli yer yok.");

            if(PlayerInfo[playerid][pLevel] < 2)
                    return HataMesajiC(playerid, "Bu iþlemi yapabilmek için en az 2 seviye olmalýsýnýz.");

            static const weaponActualAmmo[11] = {50, 68, 35, 150, 1, 90, 150, 68, 100, 1, 30};

            Inventory_AddItem(playerid, Inventory_FreeID(playerid), ProductInfo[buyID][productName], weaponActualAmmo[buyID - 30]);

            SunucuMesaji(playerid, "%s (Mermi: %d) adlý silah envanterinize eklendi.", ProductInfo[buyID][productName], weaponActualAmmo[buyID - 30]);
        }
        case 43 .. 54: {
            if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CARRY) return
                SunucuMesaji(playerid, "Zaten bir tepsi taþýyorsun.");

            static const Float:hpAdd[] = {30.0, 45.0, 60.0, 15.0, 30.0, 45.0, 60.0, 15.0, 30.0, 45.0, 60.0, 15.0};
            static const objectsID[] = {2215, 2216, 2217, 2353, 2218, 2219, 2220, 2355, 2213, 2214, 2212, 2354};

            new Float:playerHealth;
            new mealID = Meal_FreeID();

            AC_GetPlayerHealth(playerid, playerHealth);

            playerHealth += hpAdd[buyID - 43];
            AC_SetPlayerHealth(playerid, (playerHealth > 100) ? 100.0 : playerHealth);

            SetPlayerAttachedObject(playerid, 9, objectsID[buyID - 43], 1, 0.004999, 0.529999, 0.126999, -83.200004, 115.999961, -31.799890, 0.500000, 0.816000, 0.500000);

            SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);

            MealInfo[mealID][mPlayer] = playerid;
            MealInfo[mealID][mExists] = 1;
            MealInfo[mealID][mModel] = objectsID[buyID - 43];

            PlayerInfo[playerid][pMeal] = mealID;

            if(SunucuBilgi[TepsiSistemi]) BasariMesaji(playerid, "/tepsi komutuyla tepsiyi yönetebilirsin.");
            else BasariMesaji(playerid, "/tepsi komutuyla tepsidekileri yiyebilirsin.");

            Iter_Add(Meals, mealID);
        }
        case 55: {
            if(Inventory_FreeID(playerid) == -1)return
                SunucuMesajiC(playerid, "Envanterinizde yeterli yer yok.");

            BasariMesaji(playerid, "Envanterine sprite eklendi.");

            Inventory_AddItem(playerid, Inventory_FreeID(playerid), "Sprite", 1);
        }
        case 56 .. 58: {
            if(Inventory_FreeID(playerid) == -1)return
                SunucuMesajiC(playerid, "Envanterinizde yeterli yer yok.");

            BasariMesaji(playerid, "Envanterine sprite eklendi.");

            Inventory_AddItem(playerid, Inventory_FreeID(playerid), "Sprite", 1);
        }
        default: return 1;
    }
    if(buildingid != -1) {
        AC_GivePlayerMoney(playerid, -BuildingInfo[buildingid][bPrices][listitem], "/satinal");
        if(PlayerInfo[playerid][pPremium] == 5)OAC_GivePlayerMoney(playerid, BuildingInfo[buildingid][bPrices][listitem] * 10 / 100);
        if(PlayerInfo[playerid][pPremium] == 4)OAC_GivePlayerMoney(playerid, BuildingInfo[buildingid][bPrices][listitem] * 5 / 100);
        if(BuildingInfo[buildingid][bOwner])BuildingInfo[buildingid][bProducts]--;
        if(BuildingInfo[buildingid][bType] == BLACK_MARKET || BuildingInfo[buildingid][bType] == AMMUNATION)return 0;

        if(BuildingInfo[buildingid][bOwner] != 49)
            BuildingInfo[buildingid][bCash] += BuildingInfo[buildingid][bPrices][listitem];

        SaveBuilding(buildingid);
    } else {
        AC_GivePlayerMoney(playerid, -ProductInfo[buyID][productPrice], "/satinal");
        if(PlayerInfo[playerid][pPremium] == 5)OAC_GivePlayerMoney(playerid, ProductInfo[buyID][productPrice] * 10 / 100);
        if(PlayerInfo[playerid][pPremium] == 4)OAC_GivePlayerMoney(playerid, ProductInfo[buyID][productPrice] * 5 / 100);
        //if(PlayerInfo[playerid][pPremium] == 5)SunucuMesaji(playerid, "Diamond tipi donator sahibi olduðun için $%d iade aldýn.", ProductInfo[buyID][productPrice] * 10 / 100);
        //if(PlayerInfo[playerid][pPremium] == 4)SunucuMesaji(playerid, "Platinum tipi donator sahibi olduðun için $%d iade aldýn.", ProductInfo[buyID][productPrice] * 5 / 100);
    }

    return 1;
}
Dialog:DialogBizName(playerid, response, listitem, inputtext[])
{
    if(!response)return 0;

    new buildingid = GetPlayerMenuBiz(playerid);

    if(isnull(inputtext) || strlen(inputtext) > 32)return
        Dialog_Show(playerid, DialogBizName, DIALOG_STYLE_INPUT, "Ýsim deðiþtir", "Özel karakter veya uzun isim kullanma\nYeni isminizi girin(max. 32 karakter):", "Ýleri", "Ýptal");

    format(BuildingInfo[buildingid][bName], 32, inputtext);
    UpdateDynamic3DTextLabelText(BuildingInfo[buildingid][bLabel], COLOR_WHITE, BuildingInfo[buildingid][bName]);

    SaveBuilding(buildingid);

    BasariMesaji(playerid, "Ýþletmenizin adýný %s olarak deðiþtirdiniz.", inputtext);

    return 1;
}

Dialog:DialogBizKasa(playerid, response, listitem, inputtext[]) {
    if(response) return Dialog_Show(playerid, DialogBizWithdraw, DIALOG_STYLE_INPUT, "Para çek", "Çekmek istediðiniz miktarý sayýsal olarak girin:(Kasada $%d var.)", "Çek", "<<Geri", BuildingInfo[GetPlayerMenuBiz(playerid)][bCash]);
    else return Dialog_Show(playerid, DialogBizDeposit, DIALOG_STYLE_INPUT, "Para yatýr", "Yatýrmak istediðiniz miktarý sayýsal olarak girin:(Kasada $%d var.)", "Yatýr", "<<Geri", BuildingInfo[GetPlayerMenuBiz(playerid)][bCash]);
}

Dialog:DialogBizWithdraw(playerid, response, listitem, inputtext[])
{
    if(!response)return 0;

    new buildingid = GetPlayerMenuBiz(playerid), amount;

    if(sscanf(inputtext, "d", amount) || amount < 1 || amount > BuildingInfo[buildingid][bCash])return
        Dialog_Show(playerid,DialogBizWithdraw,DIALOG_STYLE_INPUT, "Para al", "Geçersiz deðer. ($1 - $%d)\nAlýnacak miktarý girin:", "Çek", "Ýptal",BuildingInfo[buildingid][bCash]);

    if(BuildingInfo[buildingid][bRequestTruck] && amount >= CompanyInfo[GetBizRequestType(buildingid)][cPrice] * BuildingInfo[buildingid][bRequestTruck])return
        SunucuMesaji(playerid, "Yük için kullanýlan para çekilemez.");

    BuildingInfo[buildingid][bCash] -= amount;
    OAC_GivePlayerMoney(playerid, amount);
    BasariMesaji(playerid, "Ýþletmenin kasasýndan $%d aldýn.", amount);

    SaveBuilding(buildingid);

    if(amount > 2499)
    {
        LogYaz(playerid, "/isletme paracek", -1, buildingid, amount);
    }

    return 1;
}

Dialog:DialogBizDeposit(playerid, response, listitem, inputtext[])
{
    if(!response)return 0;

    new buildingid = GetPlayerMenuBiz(playerid), amount;

    if(sscanf(inputtext, "d", amount) || amount < 1 || amount > PlayerInfo[playerid][pCash])return
        Dialog_Show(playerid,DialogBizDeposit,DIALOG_STYLE_INPUT, "Para koy", "Geçersiz deðer. ($1 - $%d)\nÝþletmeye yatýrýlacak miktarý girin:", "Koy", "Ýptal",PlayerInfo[playerid][pCash]);

    AC_GivePlayerMoney(playerid, -amount, "/isletme parayatir");
    BuildingInfo[buildingid][bCash] += amount;
    BasariMesaji(playerid, "Ýþletmenizin kasasýna $%d koydunuz.", amount);

    SaveBuilding(buildingid);

    LogYaz(playerid, "/isletme parayatir", -1, buildingid, amount);

    return 1;
}

Dialog:DialogBizSell(playerid, response, listitem, inputtext[])
{
    if(!response)return 0;

    if(PlayerInfo[playerid][IsletmeSatiyorum]) return HataMesajiC(playerid, "Bu iþlemi yapamazsýnýz.");

    if(isnull(inputtext)) return HataMesajiC(playerid, "Hatalý onay kodu giriþi, iþlem baþarýsýz.");

    if(!strcmp("EVET", inputtext, true))
    {
        new buildingid = GetPlayerMenuBiz(playerid);

        if(BuildingInfo[buildingid][bPrice] != 0 && BuildingInfo[buildingid][bVergi] >= 1000)
            return HataMesajiC(playerid, "Bu iþletmenin vergi borcu bulunuyor.");

        if(BuildingInfo[buildingid][bPrice] != 0 && BuildingInfo[buildingid][bCeza] >= 1)return HataMesajiC(playerid, "Bu iþletmenin cezasý bulunuyor.");

        SetPlayerPos(playerid, BuildingInfo[buildingid][bPosX],BuildingInfo[buildingid][bPosY],BuildingInfo[buildingid][bPosZ]);
        SetPlayerInterior(playerid, BuildingInfo[buildingid][bPosInterior]);
        SetPlayerFacingAngle(playerid, BuildingInfo[buildingid][bPosA]);
        AC_SetPlayerVirtualWorld(playerid, BuildingInfo[buildingid][bPosWorld]);

        AC_GivePlayerMoney(playerid, BuildingInfo[buildingid][bPrice] * SunucuBilgi[ISSY] / 100, "/isletme sistemesat");

        BuildingInfo[buildingid][bOwner] = 0;
        BuildingInfo[buildingid][bLocked] = 0;

        format(BuildingInfo[buildingid][bName], 32, "SATILIK");
        UpdateDynamic3DTextLabelText(BuildingInfo[buildingid][bLabel], COLOR_WHITE, BuildingInfo[buildingid][bName]);

        BuildingInfo[buildingid][bVergi] = 0;
        SunucuMesaji(playerid, "Ýþletmeni $%d karþýlýðýnda sisteme sattýn.", BuildingInfo[buildingid][bPrice] * SunucuBilgi[ISSY] / 100);

        BuildingInfo[buildingid][bEntrance] = 0;
        Furniture_DestroyLabels(playerid);
        mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT * FROM furnitures WHERE world = '%d'", BuildingInfo[buildingid][bWorld]);
        mysql_tquery(ourConnection, queryx, "OnDeleteFurnitures", "ddd", playerid, BuildingInfo[buildingid][bWorld], 1);

        LogYaz(playerid, "/isletme sistemesat", -1, buildingid);
        Key_Remove(KEY_BUILDING, BuildingInfo[buildingid][bID]);

        SaveBuilding(buildingid);
    }
    else HataMesajiC(playerid, "Hatalý onay kodu giriþi, iþlem baþarýsýz.");

    return 1;
}

Dialog:DialogBizEntrance(playerid, response, listitem, inputtext[])
{
    if(!response)return 0;

    new buildingid = GetPlayerMenuBiz(playerid), amount;

    /*if(BuildingInfo[buildingid][bType] != BAR)return
        SunucuMesaji(playerid, "Ýþletme tipin giriþ ücreti eklemeye uymuyor.");*/

    if(sscanf(inputtext, "d", amount) || amount < 0 || amount > 500)return
        Dialog_Show(playerid, DialogBizEntrance, DIALOG_STYLE_INPUT, "Giriþ Ücreti", "Geçersiz tutar ($0 - $500)\nÝþletmen için giriþ ücretini buraya gir:", "Ýleri", "Ýptal");

    BuildingInfo[buildingid][bEntrance] = amount;
    BasariMesaji(playerid, "Ýþletmenin giriþ ücretini $%d olarak ayarladýn.", amount);

    SaveBuilding(buildingid);

    LogYaz(playerid, "/isletme girisucreti", -1, buildingid, amount);

    return 1;
}

Dialog:DialogBizSellTo(playerid, response, listitem, inputtext[])
{
    if(!response)return 0;

    new buildingid = GetPlayerMenuBiz(playerid);

    if(BuildingInfo[buildingid][bPrice] != 0 && BuildingInfo[buildingid][bVergi] >= 1000)
        return HataMesajiC(playerid, "Bu iþletmenin vergi borcu bulunuyor.");

    if(BuildingInfo[buildingid][bPrice] != 0 && BuildingInfo[buildingid][bCeza] >= 1)return HataMesajiC(playerid, "Bu iþletmenin cezasý bulunuyor.");

    new id, amount;

    if(sscanf(inputtext, "k<m>d", id, amount))return
        Dialog_Show(playerid, DialogBizSellTo, DIALOG_STYLE_INPUT, "Kiþiye sat", "Satmak istediðiniz kiþinin ID'sini ve satmak istediðiniz fiyatý girin. (Örnek: 5 360000)", "Ýleri", "Ýptal");

    if(!IsPlayerConnected(id) || id == playerid)return
        Dialog_Show(playerid, DialogBizSellTo, DIALOG_STYLE_INPUT, "Kiþiye sat", "Ýþletmeni sadece baþkalarýna ya da sisteme satabilirsin.\nSatmak istediðin kiþinin ID'sini ve satmak istediðin fiyatý gir. (Örnek: 5 360000)", "Ýleri", "Ýptal");

    if(!ProxDetectorS(5.0, playerid, id))return
        SunucuMesajiC(playerid, "Oyuncuya yakýn deðilsin.");

    new maxProperty = GetPlayerMaxProperties(id, false);

    if(GetPlayerBizCount(id) >= maxProperty)return
        HataMesaji(playerid, "Kiþi zaten %d tane iþletmeye sahip.", maxProperty);

    if(amount < 0 || amount > PlayerInfo[id][pCash])return
        Dialog_Show(playerid, DialogBizSellTo, DIALOG_STYLE_INPUT, "Kiþiye sat", "Geçersiz deðer\nSatmak istediðiniz kiþinin ID'sini ve satmak istediðiniz fiyatý girin. (Örnek: 5 360000)", "Ýleri", "Ýptal");

    PlayerInfo[playerid][IsletmeSatiyorum] = true;
    PlayerInfo[id][pRequestSBPrice] = amount;
    PlayerInfo[id][pRequesterBSell] = playerid;

    Dialog_Show(id, DialogBizAcceptSell, DIALOG_STYLE_MSGBOX, "Kiþiye sat", "%s, %d ID'li iþletmesini $%d karþýlýðýnda sana satmak istiyor.", "Kabul Et", "Reddet", ReturnRoleplayName(playerid), GetPlayerMenuBiz(playerid), amount);
    BasariMesaji(playerid, "Satýþ talebi %s kiþisine gönderildi. (Fiyat: $%d)", ReturnRoleplayName(id), amount);

    return 1;
}

Dialog:DialogBizKey(playerid, response, listitem, inputtext[])
{
    if(!response) return pc_cmd_isletme(playerid);

    new b = GetPlayerMenuBiz(playerid);
    new id;

    if(sscanf(inputtext, "k<m>", id) || !IsPlayerConnected(id) || playerid == id) return
        Dialog_Show(playerid, DialogBizKey, DIALOG_STYLE_INPUT, "Yedek Anatar", "Yedek anahtar vermek istediðiniz kiþinin ID'sini girin.\n\nGeçersiz ID.", "Ýleri", "Geri");

    if(!ProxDetectorS(3.0, playerid, id))return
        SunucuMesaji(playerid, "Bu oyuncuya yakýn deðilsin.");

    Key_Give(id, KEY_BUILDING, BuildingInfo[b][bID]);
    BasariMesaji(playerid, "Bu mülkün yedek anahtarlarýný %s kiþisine verdin.", ReturnRoleplayName(id));
    BasariMesaji(id, "%s sana mülkünün yedek anahtarlarýný verdi.", ReturnRoleplayName(playerid));

    return 1;
}

Dialog:DialogBizDeleteKeys(playerid, response, listitem, inputtext[])
{
    if(!response) return pc_cmd_isletme(playerid);

    new b = GetPlayerMenuBiz(playerid);
    Key_Remove(KEY_BUILDING, BuildingInfo[b][bID]);
    BasariMesaji(playerid, "Kapý kilidini deðiþtirdin. Önceden anahtara sahip olanlar artýk kullanamayacaklar.");

    return 1;
}

Dialog:DialogBizAcceptSell(playerid, response, listitem, inputtext[])
{
    if(!response || GetPlayerBizCount(playerid) >= GetPlayerMaxProperties(playerid, false) || PlayerInfo[playerid][pRequesterBSell] == -1)
    {
        new sendid = PlayerInfo[playerid][pRequesterBSell];
        PlayerInfo[playerid][pRequesterBSell] = -1;
        PlayerInfo[sendid][IsletmeSatiyorum] = false;
        return PlayerInfo[playerid][pRequestSBPrice] = 0;
    }

    new senderid = PlayerInfo[playerid][pRequesterBSell];

    if(!ProxDetectorS(5.0, playerid, senderid))return
        SunucuMesajiC(playerid, "Oyuncuya yakýn deðilsin.");

    SendFormattedMessage(senderid, COLOR_BIZ, "%s senin satýþ isteðini kabul etti.", ReturnRoleplayName(playerid));
    BasariMesaji(playerid, "$%d karþýlýðýnda iþletmeyi satýn aldýn. /isletme komutuyla yönetebilirsin.", PlayerInfo[playerid][pRequestSBPrice]);

    AC_GivePlayerMoney(playerid, -PlayerInfo[playerid][pRequestSBPrice], "/isletme sat");
    AC_GivePlayerMoney(senderid, PlayerInfo[playerid][pRequestSBPrice], "/isletme sat");

    new buildingid = GetPlayerMenuBiz(senderid);

    BuildingInfo[buildingid][bOwner] = PlayerInfo[playerid][pID];
    Key_Remove(KEY_BUILDING, BuildingInfo[buildingid][bID]);

    SaveBuilding(buildingid);

    LogYaz(playerid, "/kabulet isletme", senderid, GetPlayerMenuBiz(playerid), PlayerInfo[senderid][pRequestSBPrice]);

    PlayerInfo[playerid][pRequestSBPrice] = 0;
    PlayerInfo[playerid][pRequesterBSell] = -1;
    PlayerInfo[senderid][IsletmeSatiyorum] = false;
    return 1;
}

Dialog:DialogFactions(playerid, response, listitem, inputtext[])
{
    if(!response)return 0;

    return Faction_ShowOptions(playerid, PlayerInfo[playerid][pFactionsID][listitem]);
}

Dialog:DialogFactionOptions(playerid, response, listitem, inputtext[])
{
    if(!response)return
        PlayerInfo[playerid][pFactionMOD] = -1;

    new fid = PlayerInfo[playerid][pFactionMOD];

    switch(listitem)
    {
        case 0: Dialog_Show(playerid, DialogFactionName, DIALOG_STYLE_INPUT, "Oluþum Adý", "Oluþum adý girin (maksimum 32 karakter)", "deðiþtir", "Ýptal");
        case 1: Faction_RankList(playerid, PlayerInfo[playerid][pFactionMOD]);
        case 2:
        {
            if(Faction_GetType(fid) == SADECEUYUSTURUCU || Faction_GetType(fid) == ONAYLIFACT)return
                SunucuMesaji(playerid, "Bu oluþum tipi bu özellikler için uygun deðil.");

            Dialog_Show(playerid, DialogFactionDuty, DIALOG_STYLE_LIST, "Üniforma düzenle", "Ana erkek üniformasý\nAna kadýn üniformasý\nTüm Üniformalar", "Ýleri", "Ýptal");
        }
        case 3:
        {
            Dialog_Show(playerid, DialogNull, DIALOG_STYLE_TABLIST_HEADERS, "Oluþum Açýklamasý", "Spawn\tDeðer\nÝsim\t%s\nKýsaltma\t%s\nID\t%d\nTip\t%d\nToplam Üye Sayýsý\t%d\nKullanýlan üniforma sayýsý\t%d", "Ýptal", "",
            FactionInfo[fid][fName],
            FactionInfo[fid][fShortName],
            fid,
            FactionInfo[fid][fType],
            FactionInfo[fid][fMembersCount],
            FactionInfo[fid][fSkinsCount]);

            PlayerInfo[playerid][pFactionMOD] = -1;
        }
        case 4:
        {
            if(Faction_GetType(fid) == SADECEUYUSTURUCU || Faction_GetType(fid) == ONAYLIFACT)return
                SunucuMesaji(playerid, "Bu oluþum tipi bu özellikler için uygun deðil.");

            Faction_SalariesList(playerid, PlayerInfo[playerid][pFactionMOD]);
        }
        case 5:
        {
            if(PlayerInfo[playerid][pAdmin] < GAMEADMIN1)return
                SunucuMesaji(playerid, "Sadece yetkililer kullanabilir.");

            Dialog_Show(playerid, DialogFactionType, DIALOG_STYLE_INPUT, "Tip", "TIPI:\n1: Polis\n2: Hükümet\n3: Medici\n4: LSNN\n5: Ýllegal (Uyuþturucu Onaylý)\n6: Ýllegal (Normal)\n7: Diðer\nOluþum için tip girin (1 - 7):", "deðiþtir", "Ýptal");
        }
        case 6:
        {
            if(Faction_GetType(fid) != SADECEUYUSTURUCU && Faction_GetType(fid) != ONAYLIFACT) return
                SunucuMesaji(playerid, "Bu oluþum tipi bu özelliði desteklemiyor.");

            if(PlayerInfo[playerid][pAdmin] < GAMEADMIN1)return
                SunucuMesaji(playerid, "Sadece yetkililer kullanabilir.");

            Dialog_Show(playerid, DialogFactionGraffiti, DIALOG_STYLE_LIST, "Grafiti Ýzni", "Ýzni geri al\nÝzin ver", "Ýleri", "Ýptal");
        }
        case 7: {
            if(PlayerInfo[playerid][pAdmin] < GAMEADMIN1)return
                SunucuMesaji(playerid, "Sadece yetkililer kullanabilir.");

            Dialog_Show(playerid, DialogFactionPuan, DIALOG_STYLE_INPUT, "Oluþum Puaný", "Aþaðýya yeni oluþum puanýný sayýsal olarak yazýn:", "Tamam", "Ýptal");
        }
        default: return 1;
    }

    return 1;
}

Dialog:DialogFactionName(playerid, response, listitem, inputtext[])
{
    if(!response)return
        Faction_ShowOptions(playerid, PlayerInfo[playerid][pFactionMOD]);

    new fid = PlayerInfo[playerid][pFactionMOD];

    if(isnull(inputtext) || strlen(inputtext) > 32)return
        Dialog_Show(playerid, DialogFactionName, DIALOG_STYLE_INPUT, "Oluþum Adý", "Oluþum adý girin (maksimum 32 karakter)", "deðiþtir", "Ýptal");

    format(FactionInfo[fid][fName], 32, inputtext);

    Dialog_Show(playerid, DialogShortName, DIALOG_STYLE_INPUT, "Kýsaltma", "Oluþum kýsaltmasý girin (maksimum 17 karakter):", "deðiþtir", "Ýptal");

    return 1;
}

Dialog:DialogShortName(playerid, response, listitem, inputtext[])
{
    if(!response)return
        Faction_ShowOptions(playerid, PlayerInfo[playerid][pFactionMOD]);

    new fid = PlayerInfo[playerid][pFactionMOD];

    if(isnull(inputtext) || strlen(inputtext) > 17)return
        Dialog_Show(playerid, DialogShortName, DIALOG_STYLE_INPUT, "Kýsaltma", "Oluþum kýsaltmasý girin (maksimum 17 karakter):", "deðiþtir", "Ýptal");

    format(FactionInfo[fid][fShortName], 17, inputtext);

    SaveFaction(fid);

    SendAworkAlert(false, COLOR_ADMIN, "AdmCmd: %s, %d ID'li oluþumu düzenledi. Düzenlenen seçenek:  \"Oluþum Adý\".", ReturnRoleplayName(playerid), fid);

    PlayerInfo[playerid][pFactionMOD] = -1;

//    LogYaz(playerid, "/fedit olusumadikisaltma", -1, fid);

    return 1;
}

Dialog:DialogFactionType(playerid, response, listitem, inputtext[])
{
    if(!response)return
        Faction_ShowOptions(playerid, PlayerInfo[playerid][pFactionMOD]);

    new fid = PlayerInfo[playerid][pFactionMOD], type = strval(inputtext);

    if(type < 1 || type > 7)return
        Dialog_Show(playerid, DialogFactionType, DIALOG_STYLE_INPUT, "Tip", "TIPI:\n1: Polis\n2: Hükümet\n3: Medici\n4: LSNN\n5: Ýllegal (Uyuþturucu Onaylý)\n6: Ýllegal (Normal)\n7: Diðer\nOluþum için tip girin (1 - 7):", "deðiþtir", "Ýptal");

    FactionInfo[fid][fType] = type;
    SaveFaction(fid);

    SendAworkAlert(false, COLOR_ADMIN, "AdmCmd: %s, %d ID'li oluþumu düzenledi. Düzenlenen seçenek:  \"Tip\".", ReturnRoleplayName(playerid), fid);

    PlayerInfo[playerid][pFactionMOD] = -1;

    LogYaz(playerid, "/fedit tip", -1, fid, type);

    return 1;
}

Dialog:DialogFactionRanks(playerid, response, listitem, inputtext[])
{
    if(!response)return
        Faction_ShowOptions(playerid, PlayerInfo[playerid][pFactionMOD]);

    PlayerInfo[playerid][pSelectedSlot] = listitem;
    Dialog_Show(playerid, DialogFactionSetRank, DIALOG_STYLE_INPUT, "Rütbe Adlarý", "Yeni rütbe adýný girin(maks. 80 karakter):", "deðiþtir", "Ýptal");

    return 1;
}

Dialog:DialogFactionSetRank(playerid, response, listitem, inputtext[])
{
    if(!response)
    {
        Faction_ShowOptions(playerid, PlayerInfo[playerid][pFactionMOD]);
        return PlayerInfo[playerid][pSelectedSlot] = -1;
    }

    new fid = PlayerInfo[playerid][pFactionMOD],
        slot = PlayerInfo[playerid][pSelectedSlot];
//        query[256];

    if(!strlen(inputtext) || strlen(inputtext) > 80)return
        Dialog_Show(playerid, DialogFactionSetRank, DIALOG_STYLE_INPUT, "Rütbe Adlarý", "Yeni rütbe adýný girin(maks. 80 karakter):", "deðiþtir", "Ýptal");

    format(fRanks[fid][slot], 80, inputtext);

    mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT * FROM factions_info WHERE slot = '%d' AND faction_id = '%d'", slot, FactionInfo[fid][fID]);
    mysql_tquery(ourConnection, queryx, "OnUpdateFactionInfo", "ddddds", playerid, fid, slot, 0, EDITING_TYPE_RANK, inputtext);

    return 1;
}

Dialog:DialogFactionDuty(playerid, response, listitem, inputtext[])
{
    if(!response)return
        Faction_ShowOptions(playerid, PlayerInfo[playerid][pFactionMOD]);

    switch(listitem)
    {
        case 0, 1:
        {
            static const sexNames[2][20] = {"erkek", "kadin"};

            PlayerInfo[playerid][pSelectedSlot] = listitem;
            Dialog_Show(playerid, DialogDefaultSkins, DIALOG_STYLE_INPUT, "Ana Üniforma", "/uniforma ile eriþilebilir tektip kýyafeti seçin.", "Ýleri", "Ýptal", sexNames[listitem]);
        }
        case 2: Faction_SkinsList(playerid, PlayerInfo[playerid][pFactionMOD]);
    }

    return 1;
}

Dialog:DialogDefaultSkins(playerid, response, listitem, inputtext[])
{
    if(!response)return
        Faction_ShowOptions(playerid, PlayerInfo[playerid][pFactionMOD]);

    static const sexNames[2][20] = {"Erkek", "Kadýn"};

    new fid = PlayerInfo[playerid][pFactionMOD];
    new skin = strval(inputtext);
    new slot = PlayerInfo[playerid][pSelectedSlot];

    if(skin < 0)return
        Dialog_Show(playerid, DialogDefaultSkins, DIALOG_STYLE_INPUT, "Ana Üniforma", "/uniforma ile eriþilebilir tektip kýyafeti seçin.", "Ýleri", "Ýptal", sexNames[slot]);

    switch(slot)
    {
        case 2: FactionInfo[fid][fMaleSkin] = skin;
        case 3: FactionInfo[fid][fFemaleSkin] = skin;
    }

    SaveFaction(fid);
    SendAworkAlert(false, COLOR_ADMIN, "AdmCmd: %s, %d ID'li oluþumu düzenledi. Düzenlenen seçenek: \"%s üniformalarý\".", ReturnRoleplayName(playerid), fid, sexNames[slot]);
    Dialog_Show(playerid, DialogFactionDuty, DIALOG_STYLE_LIST, "Üniforma düzenle", "Ana erkek üniformasý\nAna kadýn üniformasý\nTüm Üniformalar", "Ýleri", "Ýptal");

    return 1;
}

Dialog:DialogFactionSkins(playerid, response, listitem, inputtext[])
{
    if(!response)return
        Faction_ShowOptions(playerid, PlayerInfo[playerid][pFactionMOD]);

    PlayerInfo[playerid][pSelectedSlot] = listitem;
    Dialog_Show(playerid, DialogFactionSetSkin, DIALOG_STYLE_INPUT, "Üniforma düzenle", "Bu rütbe için yeni üniforma ID'sini girin.:", "deðiþtir", "Ýptal");

    return 1;
}

Dialog:DialogFactionSetSkin(playerid, response, listitem, inputtext[])
{
    if(!response)
    {
        Faction_ShowOptions(playerid, PlayerInfo[playerid][pFactionMOD]);
        return PlayerInfo[playerid][pSelectedSlot] = -1;
    }

    new fid = PlayerInfo[playerid][pFactionMOD],
        slot = PlayerInfo[playerid][pSelectedSlot],
        skin = strval(inputtext);
//        query[256];

    if(skin < 0)return
        Dialog_Show(playerid, DialogFactionSetSkin, DIALOG_STYLE_INPUT, "Üniforma düzenle", "Bu rütbe için yeni üniforma ID'sini girin.:", "deðiþtir", "Ýptal");

    FactionInfo[fid][fSkins][slot] = skin;

    mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT * FROM factions_info WHERE slot = '%d' AND faction_id = '%d'", slot, FactionInfo[fid][fID]);
    mysql_tquery(ourConnection, queryx, "OnUpdateFactionInfo", "ddddd", playerid, fid, slot, skin, EDITING_TYPE_SKIN);

    return 1;
}

Dialog:DialogFactionSalary(playerid, response, listitem, inputtext[])
{
    if(!response)return
        Faction_ShowOptions(playerid, PlayerInfo[playerid][pFactionMOD]);

    if(PlayerInfo[playerid][pAdmin] < 20) return HataMesajiC(playerid, "Bu fonksiyonu kullanmak için yeterli yetkiniz yok.");

    PlayerInfo[playerid][pSelectedSlot] = listitem;
    Dialog_Show(playerid, DialogFactionSetSalary, DIALOG_STYLE_INPUT, "Maaþ", "Ayarlamak istediðin maaþý gir ($300 - $5000):", "deðiþtir", "Ýptal");

    return 1;
}

Dialog:DialogFactionSetSalary(playerid, response, listitem, inputtext[])
{
    if(!response)
    {
        Faction_ShowOptions(playerid, PlayerInfo[playerid][pFactionMOD]);
        return PlayerInfo[playerid][pSelectedSlot] = -1;
    }

    if(PlayerInfo[playerid][pAdmin] < 20) return HataMesajiC(playerid, "Bu fonksiyonu kullanmak için yeterli yetkiniz yok.");

    new fid = PlayerInfo[playerid][pFactionMOD],
        slot = PlayerInfo[playerid][pSelectedSlot],
        amount = strval(inputtext);

    if(amount < 300 || amount > 5000)return
        Dialog_Show(playerid, DialogFactionSetSalary, DIALOG_STYLE_INPUT, "Maaþ", "Ayarlamak istediðin maaþý gir ($300 - $5000):", "deðiþtir", "Ýptal");

    FactionInfo[fid][fSalary][slot] = amount;

    mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT * FROM factions_info WHERE slot = '%d' AND faction_id = '%d'", slot, FactionInfo[fid][fID]);
    mysql_tquery(ourConnection, queryx, "OnUpdateFactionInfo", "ddddd", playerid, fid, slot, amount, EDITING_TYPE_SALARY);

    return 1;
}

Dialog:DialogFactionPuan(playerid, response, listitem, inputtext[]) {
    if(!response)return
        Faction_ShowOptions(playerid, PlayerInfo[playerid][pFactionMOD]);
    if(!IsNumeric(inputtext)) {
        HataMesajiC(playerid, "Sayýsal bir deðer girin.");
        Faction_ShowOptions(playerid, PlayerInfo[playerid][pFactionMOD]);
        return 1;
    }
    if(strval(inputtext) < 0) {
        HataMesajiC(playerid, "0'dan büyük bir deðer girin.");
        Faction_ShowOptions(playerid, PlayerInfo[playerid][pFactionMOD]);
        return 1;
    }
    new fid = PlayerInfo[playerid][pFactionMOD];
    FactionInfo[fid][fOlusumPuani] = strval(inputtext);
    SaveFaction(fid);
    SendAworkAlert(false, COLOR_ADMIN, "AdmCmd: %s, %d ID'li oluþumu düzenledi. Düzenlenen seçenek: \"Oluþum Puaný\".", ReturnRoleplayName(playerid), fid);
    PlayerInfo[playerid][pFactionMOD] = -1;
    return 1;
}

Dialog:DialogFactionGraffiti(playerid, response, listitem, inputtext[])
{
    if(!response)return
        Faction_ShowOptions(playerid, PlayerInfo[playerid][pFactionMOD]);

    new fid = PlayerInfo[playerid][pFactionMOD];

    FactionInfo[fid][fGraffiti] = listitem;
    SaveFaction(fid);

    SendAworkAlert(false, COLOR_ADMIN, "AdmCmd: %s, %d ID'li oluþumu düzenledi. Düzenlenen seçenek: \"Grafiti\".", ReturnRoleplayName(playerid), fid);

    PlayerInfo[playerid][pFactionMOD] = -1;

//    LogYaz(playerid, "/fedit graffiti", -1, fid, listitem);

    return 1;
}

Dialog:DialogHouse(playerid, response, listitem, inputtext[])
{
    if(!response)return 0;

    new houseid = GetPlayerMenuHouse(playerid);

    if(houseid == -1)return
        SunucuMesaji(playerid, "Bir evin yakýnýnda veya içerisinde deðilsin.");

    switch(listitem)
    {
        case 0:
        {
            if(!IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[houseid][hPosIntX], HouseInfo[houseid][hPosIntY], HouseInfo[houseid][hPosIntZ]) && IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ]) == 0) return
                SunucuMesajiC(playerid, "Bir kapýya yakýn deðilsin.");

            HouseInfo[houseid][hLocked] = !HouseInfo[houseid][hLocked];
            Player_Info(playerid, (!HouseInfo[houseid][hLocked]) ? ("Kilit: ~g~Kilidi acik~w~.") : ("Kilit: ~r~Kilitli~w~."), true);

            SaveHouse(houseid);
        }
        case 1:
        {
            if(HasPlayerUserKey(playerid, KEY_HOUSE, HouseInfo[houseid][hID]) > 0 && HouseInfo[houseid][hOwner] != PlayerInfo[playerid][pID] && HouseInfo[houseid][hEnvanterKilit] && PlayerInfo[playerid][pAdmin] < 2) return HataMesajiC(playerid, "Bu evin envanteri kilitli.");
            if(!PlayerInfo[playerid][pFactionDuty])return Storage_ShowItems(playerid, houseid);
            SunucuMesaji(playerid, "Ýþbaþýndayken envantere eriþemezsiniz.");
        }
        case 2:
        {
            if(HouseInfo[houseid][hVergi] >= 1000)
                return HataMesajiC(playerid, "Bu evin vergi borcu var, bu iþlemi yapamazsýnýz.");

            if(PlayerInfo[playerid][pHousePrice] != -1)return
                Dialog_Show(playerid, DialogHouseSell, DIALOG_STYLE_INPUT, "Bilgilendirme", "Bu evden herhangi bir ücret olmadan kurtulmak istediðine emin misin?\nAþaðýdaki boþluða iþlemi onaylamak için 'EVET' yazýn.", "Onayla", "Ýptal");

            if(!HouseInfo[houseid][hOwner])return HataMesajiC(playerid, "Sahibi olmayan bir evi satamazsýn.");
            Dialog_Show(playerid, DialogHouseSell, DIALOG_STYLE_INPUT, "Sisteme Sat", "$%d karþýlýðýnda evini sisteme satmak istediðine emin misin?\nAþaðýdaki boþluða iþlemi onaylamak için 'EVET' yazýn.", "Onayla", "Ýptal", HouseInfo[houseid][hPrice] * SunucuBilgi[ESSY] / 100);
        }
        case 3: Dialog_Show(playerid, DialogHouseWithdraw, DIALOG_STYLE_INPUT, "Para al", "Evinizden çekmek istediðiniz para miktarýný girin (Evdeki para: $%d):", "Çek", "Ýptal",HouseInfo[houseid][hCash]);
        case 4: Dialog_Show(playerid, DialogHouseDeposit, DIALOG_STYLE_INPUT, "Para koy", "Evinize yatýrmak istediðiniz para miktarýný girin (Üzerindeki para: $%d):", "Koy", "Ýptal",PlayerInfo[playerid][pCash]);
        case 5:
        {
            if(HouseInfo[houseid][hVergi] >= 1000)
                return HataMesajiC(playerid, "Bu evin vergi borcu var, bu iþlemi yapamazsýnýz.");

            Dialog_Show(playerid, DialogHouseSellTo, DIALOG_STYLE_INPUT, "Kiþiye sat", "Satmak istediðiniz kiþinin ID'sini ve satmak istediðiniz fiyatý girin. (Örnek: 5 360000)", "Ýleri", "Ýptal");
        }
        case 6: Dialog_Show(playerid, DialogNull, DIALOG_STYLE_MSGBOX, "Bilgi", "Evin içerisindeki para: $%d.\nEvin sisteme satýldýðýnda deðeri: $%d", "Ýptal", "", HouseInfo[houseid][hCash],HouseInfo[houseid][hPrice] * SunucuBilgi[ESSY] / 100);
        case 7:
        {
            new string[512];
            new interior = HouseInfo[houseid][hIGInterior];

            for(new i, is = sizeof(allHouseInteriors); i < is; i++)
            {
                if(allHouseInteriors[i][iType] != allHouseInteriors[interior][iType]) continue;
                if(i == HouseInfo[houseid][hIGInterior])continue;
                format(string, sizeof(string), "%sDekor %d\n", string, i);
            }

            Dialog_Show(playerid, DialogHouseInterior, DIALOG_STYLE_LIST, "Interior Satýn Al", string, "Satýn Al", "Geri");
        }
        case 8: Dialog_Show(playerid, DialogHouseKey, DIALOG_STYLE_INPUT, "Yedek anahtar", "Yedek anahtar girmek istediðiniz kiþinin ID'sini girin.", "Ýleri", "Geri");
        case 9: Dialog_Show(playerid, DialogHouseDeleteKeys, DIALOG_STYLE_MSGBOX, "Kilit sýfýrla/deðiþtir", "Evin kilidini deðiþtirmek istediðine emin misin?\nÖnceden anahtara sahip kiþiler artýk kullanamazlar.", "Ýleri", "geri");
        case 10:
        {
            if(GetPlayerVirtualWorld(playerid) != HouseInfo[houseid][hWorld] || GetPlayerInterior(playerid) != HouseInfo[houseid][hInterior])return
                SunucuMesajiC(playerid, "Evinde deðilsin.");

            GetPlayerPos(playerid, HouseInfo[houseid][hPosIntX], HouseInfo[houseid][hPosIntY], HouseInfo[houseid][hPosIntZ]);
            Player_Info(playerid, "Evin  ~y~cikis~w~ yerini degistirdin.");

            SaveHouse(houseid);
        }
        case 11:
        {
            if(GetPlayerVirtualWorld(playerid) != HouseInfo[houseid][hWorld] || GetPlayerInterior(playerid) != HouseInfo[houseid][hInterior])return
                SunucuMesajiC(playerid, "Evinde deðilsin.");

            GetPlayerPos(playerid, HouseInfo[houseid][hInvPosX], HouseInfo[houseid][hInvPosY], HouseInfo[houseid][hInvPosZ]);
            Player_Info(playerid, "Ev kasasini buraya ~y~kurdun.~w~");

            SaveHouse(houseid);
        }
        case 12:
        {
            if(HouseInfo[houseid][hVergi] <= 0)
                return HataMesajiC(playerid, "Zaten vergi borcu bulunmuyor.");

            if(PlayerInfo[playerid][pCash] < HouseInfo[houseid][hVergi])
                return HataMesajiC(playerid, "Yeterli miktarda paranýz yok.");

            OAC_GivePlayerMoney(playerid, -HouseInfo[houseid][hVergi]);
            HouseInfo[houseid][hVergi] = 0;
            SaveHouse(houseid);

            BasariMesaji(playerid, "Evin vergi borcunu ödediniz. (%s)", ReturnDate());
        }
        case 13: {
            new kiyafetVar;
            for(new c; c < 3; c++) {
                if(HouseInfo[houseid][hKiyafet][c] != 0) {
                    kiyafetVar = 1;
                    break;
                }
            }
            if(!kiyafetVar) return HataMesajiC(playerid, "Bu evde giyebileceðiniz bir kýyafet yok.");
            PlayerInfo[playerid][pEvdeKiyafet] = true;
            ShowModelSelectionMenuEx(playerid, HouseInfo[houseid][hKiyafet], 3, "Evdeki Kýyafetler", TEVKIYAFET, 16.0, 0.0, -55.0);
        }
        case 14: {
            HouseInfo[houseid][hDekorKilit] = !HouseInfo[houseid][hDekorKilit];
            SendClientMessage(playerid, COLOR_LIGHTRED, (HouseInfo[houseid][hDekorKilit]) ? ("[SA-RP] {FFFFFF}Evinizin dekorunu kilitlediniz, artýk anahtarý olanlar dekor yapamayacak.") : ("[SA-RP] {FFFFFF}Evinizin dekor kilidini açtýnýz, artýk anahtarý olan herkes dekor yapabilecek."));
            SaveHouse(houseid);
        }
        case 15: {
            HouseInfo[houseid][hEnvanterKilit] = !HouseInfo[houseid][hEnvanterKilit];
            SendClientMessage(playerid, COLOR_LIGHTRED, (HouseInfo[houseid][hEnvanterKilit]) ? ("[SA-RP] {FFFFFF}Evinizin envanterini kilitlediniz, artýk anahtarý olanlar envantere eriþemeyecek.") : ("[SA-RP] {FFFFFF}Evinizin envanter kilidini açtýnýz, artýk anahtarý olan herkes envantere eriþebilecek."));
            SaveHouse(houseid);
        }
        case 16:
        {
            Dialog_Show(playerid, DialogEvSatis, DIALOG_STYLE_INPUT, "Evi Satýþa Çýkar", "Bu sistem çevrimiçi / çevrimdýþý durumunuza bakýlmaksýzýn çalýþmaktadýr. Ev fiyatýný belirleyin: (0 girdisi satýþý engeller.)", "Tamam", "Geri");
        }
        default: return 1;
    }

    return 1;
}

Dialog:DialogEvSatis(playerid, response, listitem, inputtext[])
{
    if(!response)return 1;
    
    new houseid = GetPlayerMenuHouse(playerid);

    if(houseid == -1)return
        SunucuMesaji(playerid, "Bir evin yakýnýnda veya içerisinde deðilsin.");
    
    if(isnull(inputtext))
        return HataMesajiC(playerid, "Hatalý veri giriþi tespit edildi.");
        
    if(!IsNumeric(inputtext))
        return HataMesajiC(playerid, "Hatalý veri giriþi tespit edildi.");
        
    if(strval(inputtext) < 0)
        return HataMesajiC(playerid, "Hatalý veri giriþi tespit edildi.");
    
    HouseInfo[houseid][Satis] = strval(inputtext);
    if(HouseInfo[houseid][Satis] != 0) BasariMesaji(playerid, "%d nolu evi $%d karþýlýðýnda satýþa çýkardýnýz.", houseid, strval(inputtext));
    else BasariMesajiC(playerid, "Ev artýk satýlýk deðil.");
    return 1;
}

Dialog:DialogHouseSell(playerid, response, listitem, inputtext[])
{
    if(!response)return 0;

    if(isnull(inputtext)) return HataMesajiC(playerid, "Hatalý onay kodu giriþi, iþlem baþarýsýz.");

    if(!strcmp("EVET", inputtext, true))
    {
        new houseid = GetPlayerMenuHouse(playerid);

        SetPlayerPos(playerid, HouseInfo[houseid][hPosX],HouseInfo[houseid][hPosY],HouseInfo[houseid][hPosZ]);
        SetPlayerInterior(playerid, HouseInfo[houseid][hPosInterior]);
        AC_SetPlayerVirtualWorld(playerid, HouseInfo[houseid][hPosWorld]);

        Furniture_DestroyLabels(playerid);
        mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT * FROM furnitures WHERE world = '%d'", HouseInfo[houseid][hWorld]);
        mysql_tquery(ourConnection, queryx, "OnDeleteFurnitures", "ddd", playerid, HouseInfo[houseid][hWorld], 1);

        AC_GivePlayerMoney(playerid, HouseInfo[houseid][hPrice] * SunucuBilgi[ESSY] / 100, "/ev sistemesat");

        HouseInfo[houseid][hOwner] = 0;
        HouseInfo[houseid][hLocked] = 0;
        HouseInfo[houseid][hVergi] = 0;

        for(new x; x < MAX_STORAGE_ITEMS; x++) {
            HouseInfo[houseid][hInvList][x] = 0;
            HouseInfo[houseid][hInvExtra][x] = 0;
            HouseInfo[houseid][hInvAmount][x] = 0;
        }
        
        HouseInfo[houseid][Kiraci] = 0;
        HouseInfo[houseid][Kira] = 0;
        HouseInfo[houseid][Satis] = 0;
                
        BasariMesaji(playerid, "Evi $%d karþýlýðýnda sisteme sattýn.", HouseInfo[houseid][hPrice] * SunucuBilgi[ESSY] / 100);

        if(PlayerInfo[playerid][pHouseSpawn] == houseid)PlayerInfo[playerid][pHouseSpawn] = -1;

        Key_Remove(KEY_HOUSE, HouseInfo[houseid][hID]);

        LogYaz(playerid, "/ev sistemesat", -1, houseid);
        SaveHouse(houseid);
    }
    else HataMesajiC(playerid, "Hatalý onay kodu giriþi, iþlem baþarýsýz.");
    return 1;
}

Dialog:DialogHouseWithdraw(playerid, response, listitem, inputtext[])
{
    if(!response)return 0;

    new houseid = GetPlayerMenuHouse(playerid);
    new amount;

    if(sscanf(inputtext, "d", amount) || amount < 1 || amount > HouseInfo[houseid][hCash])return
        Dialog_Show(playerid,DialogHouseWithdraw,DIALOG_STYLE_INPUT, "Para al", "Geçersiz deðer. ($1 - $%d)\nAlýnacak miktarý girin:", "Çek", "Ýptal",HouseInfo[houseid][hCash]);

    OAC_GivePlayerMoney(playerid, amount);
    HouseInfo[houseid][hCash] -= amount;
    BasariMesaji(playerid, "Evin kasasýndan $%d aldýn.", amount);

    SaveHouse(houseid);

    if(amount > 2499)
    {
        LogYaz(playerid, "/ev paracek", -1, houseid, amount);
    }

    return 1;
}

Dialog:DialogHouseDeposit(playerid, response, listitem, inputtext[])
{
    if(!response)return 0;

    new houseid = GetPlayerMenuHouse(playerid);
    new amount;

    if(sscanf(inputtext, "d", amount) || amount < 1 || amount > PlayerInfo[playerid][pCash])return
        Dialog_Show(playerid,DialogHouseDeposit,DIALOG_STYLE_INPUT, "Para koy", "Geçersiz deðer. ($1 - $%d)\nEvinize konacak para miktarýný girin:", "Koy", "Ýptal",PlayerInfo[playerid][pCash]);

    OAC_GivePlayerMoney(playerid, -amount);
    HouseInfo[houseid][hCash] += amount;
    BasariMesaji(playerid, "Evinin kasasýna $%d yatýrdýn.", amount);

    SaveHouse(houseid);

    if(amount > 2499)
    {
        LogYaz(playerid, "/ev parayatir", -1, houseid, amount);
    }

    return 1;
}

Dialog:DialogHouseSellTo(playerid, response, listitem, inputtext[])
{
    if(!response)return 0;

    new id, amount;

    if(sscanf(inputtext, "k<m>d", id, amount))return
        Dialog_Show(playerid, DialogHouseSellto, DIALOG_STYLE_INPUT, "Kiþiye sat", "Satmak istediðiniz kiþinin ID'sini ve satmak istediðiniz fiyatý girin. (Örnek: 5 360000)", "Ýleri", "Ýptal");

    if(!IsPlayerConnected(id) || id == playerid)return
        Dialog_Show(playerid, DialogHouseSellto, DIALOG_STYLE_INPUT, "Kiþiye sat", "Evini sadece baþkalarýna ya da sisteme satabilirsin.\nSatmak istediðin kiþinin ID'sini ve satmak istediðin fiyatý gir. (Örnek: 5 360000)", "Ýleri", "Ýptal");

    if(!ProxDetectorS(5.0, playerid, id))return
        SunucuMesajiC(playerid, "Oyuncuya yakýn deðilsin.");

    if(GetPlayerHousesCount(id) >= GetPlayerMaxProperties(id, true) || PlayerInfo[id][pHousePrice] != -1)return
        SunucuMesaji(playerid, "Bu oyuncu ev satýn alma limitine ulaþmýþ.");

    if(amount < 0 || amount > PlayerInfo[id][pCash])return
        Dialog_Show(playerid, DialogHouseSellto, DIALOG_STYLE_INPUT, "Kiþiye sat", "Geçersiz Deðer\nSatmak istediðiniz kiþinin ID'sini ve satmak istediðiniz fiyatý girin. (Örnek: 5 360000)", "Ýleri", "Ýptal");

    PlayerInfo[id][pRequestSHPrice] = amount;
    PlayerInfo[id][pRequesterHSell] = playerid;

    new h = GetPlayerMenuHouse(playerid);

    Dialog_Show(id, DialogHouseAcceptSell, DIALOG_STYLE_MSGBOX, "Kiþiye sat", "%s kiþisi sana %d ID'li evini $%d karþýlýðýnda satma isteði gönderdi:", "Kabul Et", "Reddet", ReturnRoleplayName(playerid), h, amount);
    BasariMesaji(playerid, "%s kiþisine evini satma isteði gönderdin. (Fiyat: $%d)", ReturnRoleplayName(id), amount);

    return 1;
}

Dialog:DialogIsletmeType(playerid, response, listitem, inputtext[])
{
    if(!response)
        return pc_cmd_isletme(playerid);

    new buildingid = GetPlayerMenuBiz(playerid);
    
    switch(listitem)
    {
        case 0:
        {
            BuildingInfo[buildingid][bType] = NONE;
            SunucuMesaji(playerid, "Ýþletme tipini yok olarak deðiþtirdin. Artýk burada /satinal kullanýlamayacak.");
            SaveBuilding(buildingid);
        }
        case 1:
        {
            if(PlayerInfo[playerid][pCash] < 10000)return HataMesaji(playerid, "Yeterli paran yok.");
            BuildingInfo[buildingid][bType] = STORE;
            OAC_GivePlayerMoney(playerid, -10000);
            BuildingInfo[buildingid][bPrice] += 1000;
            SunucuMesaji(playerid, "Ýþletme tipini market olarak deðiþtirdin. Ürün fiyatlarýný /isletme ile güncellemeyi unutma.");
            SunucuMesaji(playerid, "Hesabýndan $10.000 kesildi.");
            SaveBuilding(buildingid);
        }
        case 2:
        {
            if(PlayerInfo[playerid][pCash] < 3000)return HataMesaji(playerid, "Yeterli paran yok.");
            BuildingInfo[buildingid][bType] = CLUCKIN;
            OAC_GivePlayerMoney(playerid, -3000);
            BuildingInfo[buildingid][bPrice] += 1000;
            SunucuMesaji(playerid, "Ýþletme tipini Tavuk Dükkaný olarak deðiþtirdin. Ürün fiyatlarýný /isletme ile güncellemeyi unutma.");
            SunucuMesaji(playerid, "Hesabýndan $3.000 kesildi.");
            SaveBuilding(buildingid);
        }
        case 3:
        {
            if(PlayerInfo[playerid][pCash] < 3000)return HataMesaji(playerid, "Yeterli paran yok.");
            BuildingInfo[buildingid][bType] = PIZZA;
            OAC_GivePlayerMoney(playerid, -3000);
            BuildingInfo[buildingid][bPrice] += 1000;
            SunucuMesaji(playerid, "Ýþletme tipini Pizza Dükkaný olarak deðiþtirdin. Ürün fiyatlarýný /isletme ile güncellemeyi unutma.");
            SunucuMesaji(playerid, "Hesabýndan $3.000 kesildi.");
            SaveBuilding(buildingid);
        }
        case 4:
        {
            if(PlayerInfo[playerid][pCash] < 3000)return HataMesaji(playerid, "Yeterli paran yok.");
            BuildingInfo[buildingid][bType] = BURGER;
            OAC_GivePlayerMoney(playerid, -3000);
            BuildingInfo[buildingid][bPrice] += 1000;
            SunucuMesaji(playerid, "Ýþletme tipini Hamburger Dükkaný olarak deðiþtirdin. Ürün fiyatlarýný /isletme ile güncellemeyi unutma.");
            SunucuMesaji(playerid, "Hesabýndan $3.000 kesildi.");
            SaveBuilding(buildingid);
        }
        case 5:
        {
            if(PlayerInfo[playerid][pCash] < 10000)return HataMesaji(playerid, "Yeterli paran yok.");
            BuildingInfo[buildingid][bType] = CLOTHING;
            OAC_GivePlayerMoney(playerid, -10000);
            BuildingInfo[buildingid][bPrice] += 1000;
            SunucuMesaji(playerid, "Ýþletme tipini Kýyafet Maðazasý olarak deðiþtirdin. Ürün fiyatlarýný /isletme ile güncellemeyi unutma.");
            SunucuMesaji(playerid, "Hesabýndan $10.000 kesildi.");
            SaveBuilding(buildingid);
        }
        case 6:
        {
            if(PlayerInfo[playerid][pCash] < 5000)return HataMesaji(playerid, "Yeterli paran yok.");
            BuildingInfo[buildingid][bType] = BAR;
            OAC_GivePlayerMoney(playerid, -5000);
            BuildingInfo[buildingid][bPrice] += 1000;
            SunucuMesaji(playerid, "Ýþletme tipini Kafe/Bar olarak deðiþtirdin. Ürün fiyatlarýný /isletme ile güncellemeyi unutma.");
            SunucuMesaji(playerid, "Hesabýndan $5.000 kesildi.");
            SaveBuilding(buildingid);
        }
    }
    return 1;
}

Dialog:DialogIsletmeInterior(playerid, response, listitem, inputtext[])
{
    if(!response)
        return pc_cmd_isletme(playerid);

    new buildingid = GetPlayerMenuBiz(playerid);
    new count;

    for(new i; i < sizeof(IsletmeInt); i++)
    {
        if(BuildingInfo[buildingid][bDekor] == i+1)continue;
        if(IsletmeInt[i][isyeritip] != -1 && IsletmeInt[i][isyeritip] != BuildingInfo[buildingid][bType])continue;

        if(count == listitem)
        {
            if(i == 0 && listitem == 0 && PlayerInfo[playerid][pCash] < 15000)
                return HataMesaji(playerid, "Yeterli paranýz yok. ($15000)");
                
            else if(PlayerInfo[playerid][pCash] < 7500)
                return HataMesaji(playerid, "Yeterli paranýz yok. ($7500)");

            if(BuildingInfo[buildingid][bDekor] == i+1)
                return HataMesaji(playerid, "Bu dekorasyonu zaten bulunduruyorsun.");

            BuildingInfo[buildingid][bPosIntX] = IsletmeInt[i][intx];
            BuildingInfo[buildingid][bPosIntY] = IsletmeInt[i][inty];
            BuildingInfo[buildingid][bPosIntZ] = IsletmeInt[i][intz];
            BuildingInfo[buildingid][bInterior] = IsletmeInt[i][isletmeintno];

            BuildingInfo[buildingid][bDekor] = i+1;
            BuildingInfo[buildingid][bPrice] += 2000;

            LogYaz(playerid, "/isletmeinterior", -1, buildingid, i+1);
            SaveBuilding(buildingid);

            if(i == 0 && listitem == 0) OAC_GivePlayerMoney(playerid, -15000), BasariMesaji(playerid, "Boþ depo interiorunu $15000 karþýlýðýnda satýn aldýn.");
            else OAC_GivePlayerMoney(playerid, -7500), BasariMesaji(playerid, "%d ID'li interioru $7500 karþýlýðýnda satýn aldýn.", i+1);
            BasariMesaji(playerid, "Ýþletmene interior eklediðin için sistem deðeri $2000 arttý.");
            break;
        }
        count++;
    }

    return 1;
}

Dialog:DialogHouseInterior(playerid, response, listitem, inputtext[])
{
    if(!response) return pc_cmd_ev(playerid, NULL);

    new houseid = GetPlayerMenuHouse(playerid);
    new count;

    for(new i, is = sizeof(allHouseInteriors); i < is; i++)
    {
        if(allHouseInteriors[i][iType] != allHouseInteriors[HouseInfo[houseid][hIGInterior]][iType]) continue;
        if(i == HouseInfo[houseid][hIGInterior]) continue;

        if(count == listitem)
        {
            new price = floatround(HouseInfo[houseid][hPrice]/10);

            if(PlayerInfo[playerid][pCash] < price) return
                HataMesaji(playerid, "Yeterli paranýz yok. ($%d)", price);

            HouseInfo[houseid][hPosIntX] = allHouseInteriors[i][iHouseX];
            HouseInfo[houseid][hPosIntY] = allHouseInteriors[i][iHouseY];
            HouseInfo[houseid][hPosIntZ] = allHouseInteriors[i][iHouseZ];
            HouseInfo[houseid][hInterior] = allHouseInteriors[i][iHouseInt];
            HouseInfo[houseid][hIGInterior] = i;

            SetPlayerPos(playerid, HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ]);
            SetPlayerInterior(playerid, HouseInfo[houseid][hPosInterior]);
            AC_SetPlayerVirtualWorld(playerid, HouseInfo[houseid][hPosWorld]);

            LogYaz(playerid, "/ev interior", -1, houseid, i);
            SaveHouse(houseid);

            OAC_GivePlayerMoney(playerid, -price);
            return BasariMesaji(playerid, "%d ID'li interioru $%d karþýlýðýnda satýn aldýn.", i, price);
        }

        count++;
    }

    return 1;
}

Dialog:DialogHouseKey(playerid, response, listitem, inputtext[])
{
    if(!response)return pc_cmd_ev(playerid, NULL);

    new houseid = GetPlayerMenuHouse(playerid);
    new id;

    if(sscanf(inputtext, "k<m>", id) || !IsPlayerConnected(id) || playerid == id) return
        Dialog_Show(playerid, DialogHouseKey, DIALOG_STYLE_INPUT, "Yedek anahtar", "Yedek anahtar girmek istediðiniz kiþinin ID'sini girin.\n\nGeçersiz ID.", "Ýleri", "Geri");

    if(!ProxDetectorS(3.0, playerid, id))return
        SunucuMesaji(playerid, "Bu oyuncuya yakýn deðilsin.");

    Key_Give(id, KEY_HOUSE, HouseInfo[houseid][hID]);
    BasariMesaji(playerid, "%s kiþisine ev anahtarýný verdin.", ReturnRoleplayName(id));
    BasariMesaji(id, "%s sana evinin yedek anahtarýný verdi.", ReturnRoleplayName(playerid));

    return 1;
}

Dialog:DialogHouseDeleteKeys(playerid, response, listitem, inputtext[])
{
    if(!response)return pc_cmd_ev(playerid, NULL);

    new houseid = GetPlayerMenuHouse(playerid);
    Key_Remove(KEY_HOUSE, HouseInfo[houseid][hID]);
    BasariMesaji(playerid, "Evin kilidini deðiþtirdin. Önceden anahtara sahip kiþiler artýk kullanamazlar.");

    return 1;
}

Dialog:DialogHouseAcceptSell(playerid, response, listitem, inputtext[])
{
    new senderid = PlayerInfo[playerid][pRequesterHSell];

    if(!response || GetPlayerHousesCount(playerid) >= GetPlayerMaxProperties(playerid, true) || PlayerInfo[playerid][pRequesterHSell] == -1)
    {
        SendFormattedMessage(senderid, COLOR_HOUSE, "%s ev satýn alma isteðini reddetti.", ReturnRoleplayName(playerid));
        PlayerInfo[playerid][pRequesterHSell] = -1;
        return PlayerInfo[playerid][pRequestSHPrice] = 0;
    }


    if(!IsPlayerConnected(senderid))return
        SunucuMesaji(playerid, "Oyuncu aktif deðil.");

    if(!ProxDetectorS(5.0, playerid, senderid))return
        SunucuMesajiC(playerid, "Oyuncuya yakýn deðilsin.");

    new houseid = GetPlayerMenuHouse(senderid);

    if(houseid == -1)return
        SunucuMesajiC(playerid, "Ev bulunamadý.");

    SendFormattedMessage(senderid, COLOR_HOUSE, "%s ev satýn alma isteðini kabul etti.", ReturnRoleplayName(playerid));
    BasariMesaji(playerid, "Evi $%d karþýlýðýnda satýn aldýn. /ev komutuyla evi yönetebilirsin.", PlayerInfo[playerid][pRequestSHPrice]);

    AC_GivePlayerMoney(playerid, -PlayerInfo[playerid][pRequestSHPrice], "/ev sat");
    AC_GivePlayerMoney(senderid, PlayerInfo[playerid][pRequestSHPrice], "/ev sat");

    HouseInfo[houseid][hOwner] = PlayerInfo[playerid][pID];
    HouseInfo[houseid][Kiraci] = 0;
    HouseInfo[houseid][Kira] = 0;
    HouseInfo[houseid][Satis] = 0;
    Key_Remove(KEY_HOUSE, HouseInfo[houseid][hID]); // ev anahtarlari gecersiz

    SaveHouse(houseid);

    LogYaz(playerid, "/kabulet ev", senderid, PlayerInfo[playerid][pHouse], PlayerInfo[senderid][pRequestSHPrice]);

    PlayerInfo[playerid][pRequestSHPrice] = 0;
    PlayerInfo[playerid][pRequesterHSell] = -1;

    return 1;
}

Dialog:DialogHouseStorage(playerid, response, listitem, inputtext[])
{
    if(!response)return 0;

    new houseid = GetPlayerHouse(playerid, true);

    if(houseid == -1)return
        SunucuMesajiC(playerid, "Evin içerisinde deðilsin.");

    if(!HouseInfo[houseid][hInvList][listitem])return
        SunucuMesajiC(playerid, "Slot boþ.");

    new listid = HouseInfo[houseid][hInvList][listitem];

    PlayerInfo[playerid][pItemID] = listitem;

    switch(InventoryObjects[listid][invType])
    {
        case ITEM_BIZ, ITEM_INGREDIENT, ITEM_DRUG:
            Dialog_Show(playerid, DialogStorageWithdraw, DIALOG_STYLE_INPUT, "Envanter", "Evinden kaç tane %s almak istiyorsun? Sayýsýný þuraya gir:", "Çek", "Ýptal", InventoryObjects[listid][invName]);

        case ITEM_WEAPON, ITEM_CLOTHES, ITEM_PHONE:
            Dialog_Show(playerid, DialogStorageWithdraw, DIALOG_STYLE_MSGBOX, "Envanter", "Evinden %s adýndaki eþyaný almak istediðine emin misin?", "Evet", "Hayýr", InventoryObjects[listid][invName]);
    }

    return 1;
}

Dialog:DialogStorageWithdraw(playerid, response, listitem, inputtext[])
{
    if(!response)return
        PlayerInfo[playerid][pItemID] = -1;

    if(Inventory_FreeID(playerid) == -1)
    {
        SunucuMesajiC(playerid, "Envanterde boþ yer yok.");
        return PlayerInfo[playerid][pItemID] = -1;
    }

    new houseid = GetPlayerHouse(playerid, true);
    new slot = PlayerInfo[playerid][pItemID];
    new amount;
    new listid = HouseInfo[houseid][hInvList][slot];
    new type = InventoryObjects[listid][invType];

    EnvanterIDDuzelt(playerid, slot);
    if(type != ITEM_WEAPON && type != ITEM_CLOTHES && type != ITEM_PHONE)
    {
        if(sscanf(inputtext, "d", amount) || amount < 1 || amount > HouseInfo[houseid][hInvAmount][slot])return
            Dialog_Show(playerid, DialogStorageWithdraw, DIALOG_STYLE_INPUT, "Envanter", "Geçersiz tutar\nEvinden kaç tane %s almak istiyorsun? Sayýsýný þuraya gir:", "Çek", "Ýptal", InventoryObjects[listid][invName]);

        Inventory_AddItem(playerid, Inventory_FreeID(playerid), InventoryObjects[listid][invName], amount, HouseInfo[houseid][hInvExtra][slot]);
    }
    else
    {
        Inventory_AddItem(playerid, Inventory_FreeID(playerid), InventoryObjects[listid][invName], HouseInfo[houseid][hInvAmount][slot], HouseInfo[houseid][hInvExtra][slot]);
        amount = HouseInfo[houseid][hInvAmount][slot];
    }

    SunucuMesaji(playerid, "'%s' eþyaný evden aldýn.", Inventory_ReturnString(houseid, ENTITY_TYPE_HOUSE, slot, amount));

    HouseInfo[houseid][hInvAmount][slot] -= amount;
    if(HouseInfo[houseid][hInvAmount][slot] <= 0)
    {
        HouseInfo[houseid][hInvList][slot] = 0;
        HouseInfo[houseid][hInvExtra][slot] = 0;
    }

    PlayerInfo[playerid][pItemID] = -1;

    SaveHouse(houseid);
    SaveCharacter(playerid);
    LogYaz(playerid, "/ev inv", -1, houseid, listid);

    return 1;
}

Dialog:DialogPObjects(playerid, response, listitem, inputtext[])
{
    if(!response) return 0;

    PlayerInfo[playerid][pObjectSelected] = listitem;
    Dialog_Show(playerid, DialogPObjectsOptions, DIALOG_STYLE_LIST, "Aksesuar Menüsü", "Aksesuar kullan/çýkar\nAksesuarý sil\nAksesuarýn bölgesini ayarla\nAksesuarýn pozisyonunu deðiþtir", "Sonraki", "Ýptal");

    return 1;
}

Dialog:DialogPObjectsOptions(playerid, response, listitem, inputtext[])
{
    if(!response)return 0;

    new p_slot = PlayerInfo[playerid][pObjectSelected];

    if(PlayerInfo[playerid][pObjectWearing][p_slot] != -1 && listitem != 0 && listitem != 3) return
        SunucuMesaji(playerid, "Bu iþlem için aksesuarý saklaman gerekiyor.");

    switch(listitem)
    {
        case 0:
        {
            if(PlayerInfo[playerid][pObjectWearing][p_slot] == -1)return PlayerObjects_CheckWear(playerid, p_slot);

            new slot = PlayerInfo[playerid][pObjectWearing][p_slot];

            //SunucuMesaji(playerid, "%d nesnesini %d alanýndan çýkarttýn.", p_slot, slot);
            BasariMesaji(playerid, "Aksesuarý baþarýyla çýkardýnýz.");
            RemovePlayerAttachedObject(playerid, slot);
            PlayerInfo[playerid][pObjectSlotOccupied][slot] = 0;
            PlayerInfo[playerid][pObjectWearing][p_slot] = -1;
            PlayerInfo[playerid][pObjectWearing][p_slot] = -1;
        }
        case 1:
        {
            SunucuMesaji(playerid, "Seçtiðiniz aksesuar slotunda bulunan eþyayý baþarýyla sildiniz.");
            mysql_format(ourConnection, queryx, sizeof(queryx), "DELETE FROM user_objects WHERE character_id = '%d' AND slot = '%d'", PlayerInfo[playerid][pID], p_slot);
            mysql_tquery(ourConnection, queryx);
        }
        case 2: Dialog_Show(playerid, DialogPObjectsBone, DIALOG_STYLE_LIST, "Konum(bölge) ayarla", "Omurga\nKafa\nSol kol\nSað Kol\nSol El\nSað El\nSol Diz\nSað Diz\nSol Ayak\nSað Ayak\nSað Baldýr\nSol Baldýr\nSol önkol\nSað önkol\nOmuz (sol)\nOmuz (sað)\nBoyun\nÇene", "Ýleri", "Ýptal");
        case 3:
        {
            if(PlayerInfo[playerid][pObjectWearing][p_slot] == -1) return
                SunucuMesaji(playerid, "Nesnenin yerini deðiþtirmeden önce onu takmalýsýn.");

            EditAttachedObject(playerid, PlayerInfo[playerid][pObjectWearing][p_slot]);
            PlayerInfo[playerid][pObjectEditingSlot] = p_slot;
        }
    }

    return 1;
}

Dialog:DialogGovAksesuarIndex(playerid, response, listitem, inputtext[]) {
    if(response) {
        PlayerInfo[playerid][pObjectSelected] = listitem;
        new string[1024];
        new count;

        for(new i, is = sizeof(PlayerObjectsList); i < is; i++) if(PlayerObjectsList[i][obType] == OBJECT_GOVERNMENT)
        {
            format(string, sizeof(string), "%s%s\n", string, PlayerObjectsList[i][obName]);
            PlayerInfo[playerid][pObjectsID][count] = i;
            count++;
        }
        Dialog_Show(playerid, DialogGovAksesuar, DIALOG_STYLE_LIST, "Aksesuar seç", string, "Tamam", "Ýptal");
    }
    return 1;
}

Dialog:DialogGovAksesuar(playerid, response, listitem, inputtext[]) {
    if(response) {
        new var = PlayerInfo[playerid][pObjectsID][listitem];
        new p_slot = PlayerInfo[playerid][pObjectSelected];

        SunucuMesaji(playerid, "%d slotuna \"%s\" aksesuarý eklendi.", p_slot, PlayerObjectsList[var][obName]);

        // new query[128];

        mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT * FROM user_objects WHERE character_id = '%d' AND slot = '%d'", PlayerInfo[playerid][pID], p_slot);
        mysql_query(ourConnection, queryx);

        if(cache_num_rows() > 0)
        {
            mysql_format(ourConnection, queryx, sizeof(queryx), "DELETE FROM user_objects WHERE character_id = '%d' AND slot = '%d'", PlayerInfo[playerid][pID], p_slot);
            mysql_tquery(ourConnection, queryx);
        }

        if(!PlayerObjectsList[var][obObject])
        {
            RemovePlayerAttachedObject(playerid, PlayerInfo[playerid][pObjectWearing][p_slot]);
            PlayerInfo[playerid][pObjectWearing][p_slot] = -1;
            return PlayerInfo[playerid][pObjectWearingVar][p_slot] = -1;
        }

        mysql_format(ourConnection, queryx, sizeof(queryx), "INSERT INTO user_objects (character_id, slot, var, model, bone) VALUES ('%d', '%d', '%d', '%d', '%d')", PlayerInfo[playerid][pID], p_slot, var, PlayerObjectsList[var][obObject], PlayerObjectsList[var][obDefaultBone]);
        mysql_tquery(ourConnection, queryx);
    }
    return 1;
}

Dialog:DialogPDAksesuarIndex(playerid, response, listitem, inputtext[]) {
    if(response) {
        PlayerInfo[playerid][pObjectSelected] = listitem;
        new string[1024];
        new count;

        for(new i, is = sizeof(PlayerObjectsList); i < is; i++) if(PlayerObjectsList[i][obType] == OBJECT_POLICE)
        {
            format(string, sizeof(string), "%s%s\n", string, PlayerObjectsList[i][obName]);
            PlayerInfo[playerid][pObjectsID][count] = i;
            count++;
        }
        Dialog_Show(playerid, DialogPDAksesuar, DIALOG_STYLE_LIST, "Aksesuar seç", string, "Tamam", "Ýptal");
    }
    return 1;
}

Dialog:DialogPDAksesuar(playerid, response, listitem, inputtext[]) {
    if(response) {
        new var = PlayerInfo[playerid][pObjectsID][listitem];
        new p_slot = PlayerInfo[playerid][pObjectSelected];

        SunucuMesaji(playerid, "%d slotuna \"%s\" aksesuarý eklendi.", p_slot, PlayerObjectsList[var][obName]);

        // new query[128];

        mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT * FROM user_objects WHERE character_id = '%d' AND slot = '%d'", PlayerInfo[playerid][pID], p_slot);
        mysql_query(ourConnection, queryx);

        if(cache_num_rows() > 0)
        {
            mysql_format(ourConnection, queryx, sizeof(queryx), "DELETE FROM user_objects WHERE character_id = '%d' AND slot = '%d'", PlayerInfo[playerid][pID], p_slot);
            mysql_tquery(ourConnection, queryx);
        }

        if(!PlayerObjectsList[var][obObject])
        {
            RemovePlayerAttachedObject(playerid, PlayerInfo[playerid][pObjectWearing][p_slot]);
            PlayerInfo[playerid][pObjectWearing][p_slot] = -1;
            return PlayerInfo[playerid][pObjectWearingVar][p_slot] = -1;
        }

        mysql_format(ourConnection, queryx, sizeof(queryx), "INSERT INTO user_objects (character_id, slot, var, model, bone) VALUES ('%d', '%d', '%d', '%d', '%d')", PlayerInfo[playerid][pID], p_slot, var, PlayerObjectsList[var][obObject], PlayerObjectsList[var][obDefaultBone]);
        mysql_tquery(ourConnection, queryx);
    }
    return 1;
}

Dialog:DialogPObjectsBone(playerid, response, listitem, inputtext[])
{
    if(!response) return 0;

    new p_slot = PlayerInfo[playerid][pObjectSelected];
    PlayerObjects_UpdateBone(playerid, p_slot, listitem+1);
    BasariMesaji(playerid, "Aksesuarýn konumunu deðiþtirdin.");

    return 1;
}

Dialog:DialogVehicleUpgradeList(playerid, response, listitem, inputtext[])
{
    if(!response) return 0;
    new string[350] = "HP\tÜcret\n120\t0$\n300\t1000$\n500\t2000$\n1000\t3000$";
    
    if(IsPlayerInAnyVehicle(playerid))
    {
        new vehicleid = GetPlayerVehicleID(playerid);
        if(VehicleInfo[vehicleid][vPrice] >= 150000)format(string, 350, "%s\nSýnýrsýz\t$%d", string, VehicleInfo[vehicleid][vPrice]);
    }
    
    switch(listitem)
    {
        case 0: Dialog_Show(playerid, DialogVUpgradeAlarm, DIALOG_STYLE_TABLIST_HEADERS, "Alarm Seviyesi", "Seviye\tÜcret\n0\t0$\n1\t1000$\n2\t2000$\n3\t3000$", "Satýn Al", "Ýptal");
        case 1: Dialog_Show(playerid, DialogVUpgradeDoor, DIALOG_STYLE_TABLIST_HEADERS, "Kilit Seviyesi", string, "Satýn Al", "Ýptal");
        case 2: Dialog_Show(playerid, DialogVUpgradeHP, DIALOG_STYLE_INPUT, "Zýrh Seviyesi", "$15.000 karþýlýðýnda aracýnýn zýrh seviyesini arttýrabilirsin, her seviye +100 HP deðerine eþittir.\nMaksimum zýrh seviyesi üç olarak belirlenmiþtir, seviye artýþýný ve ödenecek tutarý onaylýyorsanýz 'EVET' yazýn.", "Satýn Al", "Ýptal");
    }//geliyorum
    return 1;
}

Dialog:DialogVUpgradeAlarm(playerid, response, listitem, inputtext[])
{
    if(!response) return 0;

    new vid = GetPlayerVehicleID(playerid);

    if(listitem == VehicleInfo[vid][vAlarm])return
        SunucuMesajiC(playerid, "Bu alarm seviyesi zaten bu araçta var.");
    if(listitem) if(PlayerInfo[playerid][pCash] < listitem * 1000) return HataMesajiC(playerid, "Bu özelliði satýn almak için paranýz yeterli deðil.");
    PlayerInfo[playerid][pGelisimListItem] = listitem;
    Dialog_Show(playerid, DialogVUpgradeAlarmConf, DIALOG_STYLE_MSGBOX, "Alarm Seviyesi", "$%d karþýlýðýnda alarm seviyesi %d satýn almak istiyor musun?", "Evet", "Hayýr", (listitem * 1000), listitem);
    return 1;
}

Dialog:DialogVUpgradeAlarmConf(playerid, response, listitem, inputtext[])
{
    if(!response) return 0;
    new vid = GetPlayerVehicleID(playerid);
    listitem = PlayerInfo[playerid][pGelisimListItem];
    if(listitem == VehicleInfo[vid][vAlarm])return
        SunucuMesajiC(playerid, "Bu alarm seviyesi zaten bu araçta var.");
    if(listitem) if(PlayerInfo[playerid][pCash] < listitem * 1000) return HataMesajiC(playerid, "Bu özelliði satýn almak için paranýz yeterli deðil.");
    VehicleInfo[vid][vAlarm] = listitem;
    AC_GivePlayerMoney(playerid, -(listitem * 1000), "/arac gelisim");

    if(listitem)return BasariMesaji(playerid, "Aracýnýn alarm seviyesi %d olarak deðiþtirildi.", listitem);

    BasariMesaji(playerid, "Alarm özelliðini aracýndan kaldýrdýn.");
    SaveVehicle(vid);
    PlayerInfo[playerid][pGelisimListItem] = -1;
    return 1;
}

Dialog:DialogVUpgradeDoor(playerid, response, listitem, inputtext[])
{
    if(!response) return 0;

    new vid = GetPlayerVehicleID(playerid);
    static const levelHealth[5] = {120, 300, 500, 1000, 999999};

    if(listitem == VehicleInfo[vid][vDoorLevel])return
        SunucuMesaji(playerid, "Aracýn zaten kapý dayanýklýðý ayný.");

    if(listitem != 4 && PlayerInfo[playerid][pCash] < listitem * 1000) return HataMesajiC(playerid, "Bu özelliði satýn almak için paranýz yeterli deðil.");
    PlayerInfo[playerid][pGelisimListItem] = listitem;
    if(listitem != 4) Dialog_Show(playerid, DialogVUpgradeDoorConf, DIALOG_STYLE_MSGBOX, "Kapý Seviyesi", "$%d karþýlýðýnda kapý seviyesi %d satýn almak istiyor musun?\nBu satýn alma ile aracýnýzýn kapý can deðeri %d olacak.", "Evet", "Hayýr", (listitem * 1000), listitem, levelHealth[listitem]);
    else Dialog_Show(playerid, DialogVUpgradeDoorConf, DIALOG_STYLE_MSGBOX, "Kapý Seviyesi", "$%d karþýlýðýnda kapý seviyesi %d satýn almak istiyor musun?\nBu satýn alma ile aracýnýzýn kapý can deðeri sýnýrsýz olacak.", "Evet", "Hayýr", VehicleInfo[vid][vPrice], listitem);

    return 1;
}

Dialog:DialogVUpgradeHP(playerid, response, listitem, inputtext[])
{

    if(!response)return 0;
    
    if(isnull(inputtext))
    {
        HataMesajiC(playerid, "Hatalý onay kodu giriþi, iþlem baþarýsýz.");
        return 1;
    }
    
    if(PlayerInfo[playerid][pCash] < 15000)
        return HataMesajiC(playerid, "Yeterli paranýz bulunmuyor.");
    
    new vid = GetPlayerVehicleID(playerid);

    if(VehicleInfo[vid][vMaxHealth] >= 1300)return
        SunucuMesaji(playerid, "Aracýn zýrhlamasý maksimum seviyede.");

    if(!strcmp("EVET", inputtext, true))
    {
        VehicleInfo[vid][vMaxHealth] += 100;
        AC_GivePlayerMoney(playerid, -15000, "Araç HP Yükseltme");
        
        if(VehicleInfo[vid][vMaxHealth] >= 1000)
        {
            AC_SetVehicleHealth(vid, VehicleInfo[vid][vMaxHealth]);
        }
        SaveVehicle(vid);
    }
    else HataMesajiC(playerid, "Hatalý onay kodu giriþi, iþlem baþarýsýz.");
    return 1;
}

Dialog:DialogVUpgradeDoorConf(playerid, response, listitem, inputtext[])
{
    if(!response) return 0;
    new vid = GetPlayerVehicleID(playerid);
    listitem = PlayerInfo[playerid][pGelisimListItem];
    static const levelHealth[5] = {120, 300, 500, 1000, 999999};

    if(listitem == VehicleInfo[vid][vDoorLevel])return
        SunucuMesaji(playerid, "Aracýn zaten kapý dayanýklýðý ayný.");

    if(listitem != 4 && PlayerInfo[playerid][pCash] < listitem * 1000) return HataMesajiC(playerid, "Bu özelliði satýn almak için paranýz yeterli deðil.");
    if(listitem != 4)
    {
        BasariMesaji(playerid, "Aracýnýzýn kapýsýnýn dayanýklýlýðý %d HP olarak ayarlandý.", levelHealth[listitem]);
        VehicleInfo[vid][vDoorLevel] = listitem;
        VehicleInfo[vid][vDoorHealth] = levelHealth[listitem];
        AC_GivePlayerMoney(playerid, -(listitem * 1000), "/arac gelisim");
        SaveVehicle(vid);
        PlayerInfo[playerid][pGelisimListItem] = -1;
    }
    else
    {
        if(PlayerInfo[playerid][pCash] < VehicleInfo[vid][vPrice])
            return HataMesaji(playerid, "Yeterli paranýz bulunmuyor.");
            
        BasariMesaji(playerid, "Aracýnýzýn kapýsýnýn dayanýklýlýðý sýnýrsýz HP olarak ayarlandý.");
        VehicleInfo[vid][vDoorLevel] = 4;
        VehicleInfo[vid][vDoorHealth] = 99999;
        AC_GivePlayerMoney(playerid, -VehicleInfo[vid][vPrice], "/arac gelisim");
        SaveVehicle(vid);
        PlayerInfo[playerid][pGelisimListItem] = -1;
    }
    return 1;
}

Dialog:DialogVehicleCargo(playerid, response, listitem, inputtext[])
{
    new vid = GetNearestVehicle(playerid);

    if(vid == -1)return 0;

    VehicleInfo[vid][vShowingCargo] = false;
    PlayerInfo[playerid][pViewingCargo] = -1;

    if(!response)return 0;

    if(PlayerInfo[playerid][pCarryCrate] != -1)return
        SunucuMesaji(playerid, "Zaten bir koli taþýyorsun.");

    new id = PlayerInfo[playerid][pCrates][listitem]; if(id == -1)return 0;

    ApplyAnimation(playerid, "CARRY", "liftup", 4.1, 0, 0, 0, 0, 0, 1);

    PlayerInfo[playerid][pCarryCrate] = id;
    SetPlayerAttachedObject(playerid, 9, BOX_OBJECT, 1, -0.067019, 0.413313, -0.040999, 0.000000, 88.000000, 180.000000, 0.500000, 0.500000, 0.500000);

    PlayerAME(playerid, "araçtaki koliyi iki eliyle kavrar.");

    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);

    CrateInfo[id][crVehicleID] = -1;

    for(new j; j < MAX_COMMODITIES_SLOT; j++) if(VehicleInfo[vid][vSlotObject][j])
    {
        DestroyDynamicObjectEx(VehicleInfo[vid][vSlotObject][j]);
        VehicleInfo[vid][vSlotObject][j] = 0; break;
    }

    PlayerInfo[playerid][pCargoTime][1] = gettime() + 2;

    return 1;
}

Dialog:DialogVSellTo(playerid, response, listitem, inputtext[])
{
    if(!response || PlayerInfo[playerid][pSelectedVehicle] == -1)return
        PlayerInfo[playerid][pSelectedVehicle] = -1;

    new id, amount;
    new vid = PlayerInfo[playerid][pSelectedVehicle];

    if(sscanf(inputtext, "k<m>d", id, amount))return
        Dialog_Show(playerid, DialogVSellTo, DIALOG_STYLE_INPUT, "Kiþiye sat", "ID ve satýþ fiyatýný girin. (Örnek: 5 20000)", "Ýleri", "Ýptal");

    if(amount < 0)return
        Dialog_Show(playerid, DialogVSellTo, DIALOG_STYLE_INPUT, "Kiþiye sat", "Geçersiz Deðer\nID ve satýþ fiyatýný girin. (Örnek: 5 20000)", "Ýleri", "Ýptal");

    if(!IsPlayerConnected(id) || id == playerid)return
        Dialog_Show(playerid, DialogVSellTo, DIALOG_STYLE_INPUT, "Kiþiye sat", "Aracýný sadece baþkalarýna ya da sisteme satabilirsin.\nSatmak istediðin kiþinin ID'sini ve satmak istediðin fiyatý gir. (Örnek: 5 20000)", "Ýleri", "Ýptal");

    if(!ProxDetectorS(5.0, playerid, id))return
        SunucuMesajiC(playerid, "Oyuncuya yakýn deðilsin.");

    if(GetPlayerVehicleCount(id) >= Vehicle_GetLimit(id))return
        HataMesaji(playerid, "Bu oyuncu %d tane araca sahip, daha fazlasýný satýn alamaz.", Vehicle_GetLimit(id));

    if(PlayerInfo[id][pCash] < amount)return
        SunucuMesajiC(playerid, "Bu oyuncunun yeterli parasý yok.");

    new model = VehicleInfo[vid][vModel];
    new problem = 0;
    for(new i; i < sizeof(PremiumVehicles); ++i)
    {
        if(PremiumVehicles[i][pvmodelid] == model)
        {
            if(PlayerInfo[id][pPremium] >= PremiumVehicles[i][pvdonator]) problem = 0;
            else problem = 1;

            if(problem == 1 && PremiumVehicles[i][pvdonator] == 1 && PremiumVehicles[i][pvmodelid] != 468 && PlayerInfo[id][pBMXPermission]) problem = 0;
            break;
        }
    }

    if(problem == 1) return HataMesaji(playerid, "Bu aracý satamazsýnýz, karþýnýzdaki kullanýcý gerekli izinlere sahip deðil.");

    PlayerInfo[id][pRequestSVPrice] = amount;
    PlayerInfo[id][pRequesterVSell] = playerid;

    SendFormattedMessage(id, COLOR_LIGHTBLUE, "%s sana %s marka aracýný $%d karþýlýðýnda satmak istiyor. /kabulet arac kullan.", ReturnRoleplayName(playerid), GetVehicleModelName(VehicleInfo[vid][vModel]), amount);
    SunucuMesaji(playerid, "Araç satýþ talebi (Fiyat: $%d) %s kiþisine gönderildi.", amount, ReturnRoleplayName(id));

    return 1;
}

Dialog:DialogVehicleTrunk(playerid, response, listitem, inputtext[])
{
    if(!response)return 0;

    new vehicleid = GetNearestVehicle(playerid);

    if(vehicleid == -1 || vehicleid != -1 && VehicleInfo[vehicleid][vLocked])return
        SunucuMesajiC(playerid, "Aracýn içinde veya yakýnýnda deðilsin.");

    if(!VehicleInfo[vehicleid][vInvList][listitem])return
        SunucuMesajiC(playerid, "Slot boþ.");

    new listid = VehicleInfo[vehicleid][vInvList][listitem];

    PlayerInfo[playerid][pItemID] = listitem;

    /*if(Inventory_HasItem(playerid, InventoryObjects[listid][invName], ITEM_WEAPON) > 0)
        return HataMesajiC(playerid, "%s model silah zaten envanterinde mevcut. Yenisini ekleyemezsin.", InventoryObjects[listid][invName]);*/

    switch(InventoryObjects[listid][invType])
    {
        case ITEM_BIZ, ITEM_INGREDIENT, ITEM_DRUG:
            Dialog_Show(playerid, DialogTrunkWithdraw, DIALOG_STYLE_INPUT, "Envanter", "Aracýnýn içerisinden kaç adet %s almak istiyorsun? Sayýyý gir:", "Çek", "Ýptal", InventoryObjects[listid][invName]);

        case ITEM_WEAPON, ITEM_CLOTHES, ITEM_PHONE:
            Dialog_Show(playerid, DialogTrunkWithdraw, DIALOG_STYLE_MSGBOX, "Envanter", "%s öðesini aracýndan almak istediðine emin misin?", "Evet", "Hayýr", InventoryObjects[listid][invName]);
    }

    return 1;
}

Dialog:DialogTrunkWithdraw(playerid, response, listitem, inputtext[])
{
    if(!response)return
        PlayerInfo[playerid][pItemID] = -1;

    if(Inventory_FreeID(playerid) == -1)
    {
        SunucuMesajiC(playerid, "Envanterde boþ yer yok.");
        return PlayerInfo[playerid][pItemID] = -1;
    }

    new vehicleid = GetNearestVehicle(playerid);

    if(vehicleid == -1 || vehicleid != -1 && VehicleInfo[vehicleid][vLocked])
    {
        SunucuMesajiC(playerid, "Aracýn içinde veya yakýnýnda deðilsin.");
        return PlayerInfo[playerid][pItemID] = -1;
    }

    new slot = PlayerInfo[playerid][pItemID];
    new amount;
    new listid = VehicleInfo[vehicleid][vInvList][slot];
    new type = InventoryObjects[listid][invType];

    if(type != ITEM_WEAPON && type != ITEM_CLOTHES && type != ITEM_PHONE)
    {
        if(sscanf(inputtext, "d", amount) || amount < 1 || amount > VehicleInfo[vehicleid][vInvAmount][slot])return
            Dialog_Show(playerid, DialogTrunkWithdraw, DIALOG_STYLE_INPUT, "Envanter", "Geçersiz tutar\nAracýnýn içerisinden kaç adet %s almak istiyorsun? Sayýyý gir:", "Çek", "Ýptal", InventoryObjects[listid][invName]);

        Inventory_AddItem(playerid, Inventory_FreeID(playerid), InventoryObjects[listid][invName], amount, VehicleInfo[vehicleid][vInvExtra][slot]);
    }
    else
    {
        Inventory_AddItem(playerid, Inventory_FreeID(playerid), InventoryObjects[listid][invName], VehicleInfo[vehicleid][vInvAmount][slot], VehicleInfo[vehicleid][vInvExtra][slot]);
        amount = VehicleInfo[vehicleid][vInvAmount][slot];
    }

    SunucuMesaji(playerid, "Aracýnýn bagajýndan '%s' aldýn.", Inventory_ReturnString(vehicleid, ENTITY_TYPE_VEHICLE, slot, amount));

    VehicleInfo[vehicleid][vInvAmount][slot] -= amount;

    if(VehicleInfo[vehicleid][vInvAmount][slot] <= 0)
    {
        VehicleInfo[vehicleid][vInvList][slot] = 0;
        VehicleInfo[vehicleid][vInvExtra][slot] = 0;
    }

    PlayerInfo[playerid][pItemID] = -1;

    SaveVehicle(vehicleid);
    SaveCharacter(playerid);
    LogYaz(playerid, "/arac bagajdanal", -1, VehicleInfo[vehicleid][vID], listid);

    return 1;
}

Dialog:DialogLogin(playerid, response, listitem, inputtext[])
{
    if(isnull(inputtext) || !response) return
        Dialog_Show(playerid, DialogLogin, DIALOG_STYLE_PASSWORD, "SA-RP - Giriþ", "%s adlý karaktere eriþim için þifrenizi girin.", "Giriþ", "", ReturnRoleplayName(playerid));

    new buffer[129];
    WP_Hash(buffer, sizeof(buffer), inputtext);

    mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT * FROM accounts WHERE id = '%d' AND password = '%e'", PlayerInfo[playerid][pAccountID], buffer);
    mysql_tquery(ourConnection, queryx, "OnAccountLoggedIn", "d", playerid);

    return 1;
}

Dialog:DialogDealers(playerid, response, listitem, inputtext[])
{
    if(!response)return 0;

    PlayerInfo[playerid][pDealerMOD] = PlayerInfo[playerid][pDealersID][listitem];

    Dialog_Show(playerid, DialogDealerOptions, DIALOG_STYLE_LIST, Dealer_GetName(listitem), "Galeri Adý\nKonum\nAraç Listesi\nAraç spawn alaný", "Ýleri", "Ýptal");

    return 1;
}

Dialog:DialogDealerOptions(playerid, response, listitem, inputtext[])
{
    if(!response)return
        PlayerInfo[playerid][pDealerMOD] = -1;

    new did = PlayerInfo[playerid][pDealerMOD], Float:x, Float:y, Float:z;

    switch(listitem)
    {
        case 0: Dialog_Show(playerid, DialogDealerName, DIALOG_STYLE_INPUT, "Galeri Adý", "Yeni galeri adýný girin. (maksimum 100 karakter)", "deðiþtir", "Ýptal");
        case 1:
        {
            GetPlayerPos(playerid, x, y, z);

            DealerInfo[did][dPosX] = x;
            DealerInfo[did][dPosY] = y;
            DealerInfo[did][dPosZ] = z;

            Pickup_Destroy(DealerInfo[did][dPickup]);
            DestroyDynamic3DTextLabelEx(DealerInfo[did][dLabel]);

            DealerInfo[did][dPickup] = Pickup_Create(ELEMENT_DEALER, did, 1239, 23, x, y, z, 0);
            DealerInfo[did][dLabel] = CreateDynamic3DTextLabel(DealerInfo[did][dName], COLOR_WHITE, x, y, z+0.4, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0, -1);

            SaveDealer(did);

            SendAworkAlert(false, COLOR_ADMIN, "AdmCmd: %s, %d ID'li galeriyi düzenledi. Seçim: \"Posizione\".", ReturnRoleplayName(playerid), did);

            LogYaz(playerid, "/dedit pozisyon", -1, did);

            PlayerInfo[playerid][pDealerMOD] = -1;
        }
        case 2: Dealer_VehiclesList(playerid, did);
        case 3:
        {
            GetPlayerPos(playerid, x, y, z);

            DealerInfo[did][dVehX] = x;
            DealerInfo[did][dVehY] = y;
            DealerInfo[did][dVehZ] = z;

            SaveDealer(did);

            SendAworkAlert(false, COLOR_ADMIN, "AdmCmd: %s, %d ID'li galeriyi düzenledi. Seçim: \"Spawn noktasý\".", ReturnRoleplayName(playerid), did);

            LogYaz(playerid, "/dedit spawn_veicolo", -1, did);

            PlayerInfo[playerid][pDealerMOD] = -1;
        }
        default: return 1;
    }

    return 1;
}

Dialog:DialogDealerName(playerid, response, listitem, inputtext[])
{
    if(!response)return
        Dialog_Show(playerid, DialogDealerOptions, DIALOG_STYLE_LIST, Dealer_GetName(PlayerInfo[playerid][pDealerMOD]), "Galeri Adý\nKonum\nAraç Listesi\nAraç spawn alaný", "Ýleri", "Ýptal");

    new did = PlayerInfo[playerid][pDealerMOD];

    if(isnull(inputtext) || strlen(inputtext) > 64)return
        Dialog_Show(playerid, DialogDealerName, DIALOG_STYLE_INPUT, "Galeri Adý", "Galeri adý gir.", "deðiþtir", "Ýptal");

    format(DealerInfo[did][dName], 64, inputtext);
    UpdateDynamic3DTextLabelText(DealerInfo[did][dLabel], COLOR_WHITE, DealerInfo[did][dName]);

    SaveDealer(did);

    SendAworkAlert(false, COLOR_ADMIN, "AdmCmd: %s, %d ID'li galeriyi düzenledi. Seçim: \"Galeri Adý\".", ReturnRoleplayName(playerid), did);

    PlayerInfo[playerid][pDealerMOD] = -1;

    LogYaz(playerid, "/dedit galeriadi", -1, did);

    return 1;
}

Dialog:DialogDealerVehicles(playerid, response, listitem, inputtext[])
{
    if(!response)return
        Dialog_Show(playerid, DialogDealerOptions, DIALOG_STYLE_LIST, Dealer_GetName(PlayerInfo[playerid][pDealerMOD]), "Galeri Adý\nKonum\nAraç Listesi\nAraç spawn alaný", "Ýleri", "Ýptal");

    new did = PlayerInfo[playerid][pDealerMOD];

    PlayerInfo[playerid][pSelectedSlot] = listitem;
    Dialog_Show(playerid, DialogDealerSetVehicle, DIALOG_STYLE_INPUT, "Araç Listesi", "Aracýn modelini ve fiyatýný girin, aralarýnda bir boþluk olmasý gerektiðini unutmayýn.\nÖrnek kullaným: %d %d", "deðiþtir", "Ýptal", DealerInfo[did][dModel][listitem], DealerInfo[did][dPrice][listitem]);

    return 1;
}

Dialog:DialogDealerSetVehicle(playerid, response, listitem, inputtext[])
{
    if(!response)
    {
        PlayerInfo[playerid][pSelectedSlot] = -1;
        return Dialog_Show(playerid, DialogDealerOptions, DIALOG_STYLE_LIST, Dealer_GetName(PlayerInfo[playerid][pDealerMOD]), "Galeri Adý\nKonum\nAraç Listesi\nAraç spawn alaný", "Ýleri", "Ýptal");
    }

    new modelid, price,
        did = PlayerInfo[playerid][pDealerMOD],
        slot = PlayerInfo[playerid][pSelectedSlot];

    if(sscanf(inputtext, "dd", modelid, price))return
        Dialog_Show(playerid, DialogDealerSetVehicle, DIALOG_STYLE_INPUT, "Araç Listesi", "Aracýn modelini ve fiyatýný girin, aralarýnda bir boþluk olmasý gerektiðini unutmayýn.\nÖrnek kullaným: %d %d", "deðiþtir", "Ýptal", DealerInfo[did][dModel][slot], DealerInfo[did][dPrice][slot]);

    // new query[128];

    if(modelid != 0 && IsValidVehicleModel(modelid) && price != 0)
    {
        DealerInfo[did][dModel][slot] = modelid;
        DealerInfo[did][dPrice][slot] = price;

        if(!DealerInfo[did][dVehiclesID][slot])
        {
            mysql_format(ourConnection, queryx, sizeof(queryx), "INSERT INTO dealer_vehicles (vehicle_model, vehicle_price, dealer_id) VALUES ('%d', '%d', '%d')", modelid, price, DealerInfo[did][dID]);
            mysql_tquery(ourConnection, queryx, "OnQueryFinishedEx", "ddd", did, slot, THREAD_ADD_DEALERVEH);
            DealerInfo[did][vCount]++;
        }
        else SaveDealerVehicle(did, slot);
    }
    else
    {
        mysql_format(ourConnection, queryx, sizeof(queryx), "DELETE FROM dealer_vehicles WHERE id = '%d'", DealerInfo[did][dVehiclesID][slot]);
        mysql_tquery(ourConnection, queryx);
        DealerInfo[did][dModel][slot] = 0;
        DealerInfo[did][dPrice][slot] = 0;
        DealerInfo[did][dVehiclesID][slot] = 0;
        DealerInfo[did][vCount]--;
    }

    SendAdminAlert(false, COLOR_ADMIN, "AdmCmd: %s, %d ID'li galeriyi düzenledi. Seçim: \"Araç Listesi\".", ReturnRoleplayName(playerid), did);
    Dealer_VehiclesList(playerid, did);
    LogYaz(playerid, "/dedit liste_arac", -1, did, slot);

    return 1;
}

Dialog:DialogLaboratories(playerid, response, listitem, inputtext[])
{
    if(!response)return 0;

    return Lab_ShowOptions(playerid, PlayerInfo[playerid][pLabsID][listitem]);
}

Dialog:DialogCompanies(playerid, response, listitem, inputtext[])
{
    if(!response)return 0;

    return Company_ShowOptions(playerid, PlayerInfo[playerid][pIndustriesID][listitem]);
}

Dialog:DialogIllegalIndustries(playerid, response, listitem, inputtext[])
{
    if(!response)return 0;

    return IllegalIndustries_ShowOptions(playerid, PlayerInfo[playerid][pIndustriesID][listitem]);
}

Dialog:DialogCompanyEdit(playerid, response, listitem, inputtext[])
{
    if(!response)return
        PlayerInfo[playerid][pIndustryMOD] = -1;

    new id = PlayerInfo[playerid][pIndustryMOD];

    switch(listitem)
    {
        case 0: Dialog_Show(playerid, DialogCPos, DIALOG_STYLE_MSGBOX, "Trucker Pozisyonu", "Trucker pozisyonunu bulunduðunuz yer olarak ayarlamak istediðinize emin misiniz?", "deðiþtir", "Ýptal");
        case 1: Dialog_Show(playerid, DialogCUnit, DIALOG_STYLE_INPUT, "Ürün", "Ürün girin:", "deðiþtir", "Ýptal");
        case 2: Dialog_Show(playerid, DialogCPrice, DIALOG_STYLE_INPUT, "Fiyat", "Trucker fiyatýnýn parasýný buraya girin:", "deðiþtir", "Ýptal");
        case 3: Dialog_Show(playerid, DialogCName, DIALOG_STYLE_INPUT, "Ýsim", "Truckerýn yeni adýný girin.", "deðiþtir", "Ýptal");
        case 4: Dialog_Show(playerid, DialogCStok, DIALOG_STYLE_INPUT, "Stok", "Truckerýn yeni maksimum stok deðerini girin.", "deðiþtir", "Ýptal");
        case 5: Dialog_Show(playerid, DialogCMStok, DIALOG_STYLE_INPUT, "Maksimum Stok", "Truckerýn yeni maksimum stok deðerini girin.", "deðiþtir", "Ýptal");
        case 6: Dialog_Show(playerid, DialogSirket, DIALOG_STYLE_INPUT, "Þirket", "Truckerýn þirket idsini girin.", "deðiþtir", "Ýptal");
        case 7:
        {
            if(CompanyInfo[id][aliyor] == 0)
            {
                CompanyInfo[id][aliyor] = 1;
                SunucuMesajiC(playerid, "Trucker noktasý -alýyor- deðeri pozitif.");
            }
            else
            {
                CompanyInfo[id][aliyor] = 0;
                SunucuMesajiC(playerid, "Trucker noktasý -alýyor- deðeri negatif.");
            }
            SaveCompany(id);
        }
        case 8:
        {
            if(CompanyInfo[id][satiyor] == 0)
            {
                CompanyInfo[id][satiyor] = 1;
                SunucuMesajiC(playerid, "Trucker noktasý -satýyor- deðeri pozitif.");

            }
            else
            {
                CompanyInfo[id][satiyor] = 0;
                SunucuMesajiC(playerid, "Trucker noktasý -satýyor- deðeri negatif.");
            }
            SaveCompany(id);
        }
    }

    return 1;
}

Dialog:DialogSirket(playerid, response, listitem, inputtext[])
{
    if(!response) return
        Company_ShowOptions(playerid, PlayerInfo[playerid][pIndustryMOD]);

    new id = PlayerInfo[playerid][pIndustryMOD];
    new deger;

    if(sscanf(inputtext, "i", deger))return
        Dialog_Show(playerid, DialogCStok, DIALOG_STYLE_INPUT, "Maksimum Stok", "Truckerin yeni stok deðerini girin.", "deðiþtir", "Ýptal");

//  if(deger >= CompanyInfo[id][mstok]) return HataMesajiC(playerid, "Deðer maksimum stoktan büyük olamaz.");

    CompanyInfo[id][sirketid] = deger;

    Company_RefreshText(id);

    SendAworkAlert(false, COLOR_ADMIN, "AdmCmd: %s, %d ID'li trucker noktasýnýn þirketini deðiþtirdi.", ReturnRoleplayName(playerid), id);

    SaveCompany(id);

    PlayerInfo[playerid][pIndustryMOD] = -1;
    LogYaz(playerid, "/cedit sirket", -1, id);

    return 1;
}

Dialog:DialogCStok(playerid, response, listitem, inputtext[])
{
    if(!response) return
        Company_ShowOptions(playerid, PlayerInfo[playerid][pIndustryMOD]);

    new id = PlayerInfo[playerid][pIndustryMOD];
    new deger;

    if(sscanf(inputtext, "i", deger))return
        Dialog_Show(playerid, DialogCStok, DIALOG_STYLE_INPUT, "Maksimum Stok", "Truckerin yeni stok deðerini girin.", "deðiþtir", "Ýptal");

    if(deger >= CompanyInfo[id][mstok]) return HataMesajiC(playerid, "Deðer maksimum stoktan büyük olamaz.");

    CompanyInfo[id][stok] = deger;

    Company_RefreshText(id);

    SendAworkAlert(false, COLOR_ADMIN, "AdmCmd: %s, %d ID'li trucker noktasýnýn stok deðerini deðiþtirdi.", ReturnRoleplayName(playerid), id);

    SaveCompany(id);

    PlayerInfo[playerid][pIndustryMOD] = -1;
    LogYaz(playerid, "/cedit stok", -1, id);

    return 1;
}

Dialog:DialogCMStok(playerid, response, listitem, inputtext[])
{
    if(!response) return
        Company_ShowOptions(playerid, PlayerInfo[playerid][pIndustryMOD]);

    new id = PlayerInfo[playerid][pIndustryMOD];
    new deger;

    if(sscanf(inputtext, "i", deger))return
        Dialog_Show(playerid, DialogCMStok, DIALOG_STYLE_INPUT, "Maksimum Stok", "Truckerin yeni maksimum stok deðerini girin.", "deðiþtir", "Ýptal");

    if(deger == 0) return HataMesajiC(playerid, "Maksimum stok deðeri 0 olamaz.");

    CompanyInfo[id][mstok] = deger;

    Company_RefreshText(id);

    SendAworkAlert(false, COLOR_ADMIN, "AdmCmd: %s, %d ID'li trucker noktasýnýn maksimum stok deðerini deðiþtirdi.", ReturnRoleplayName(playerid), id);

    SaveCompany(id);

    PlayerInfo[playerid][pIndustryMOD] = -1;
    LogYaz(playerid, "/cedit mstok", -1, id);

    return 1;
}

Dialog:DialogCName(playerid, response, listitem, inputtext[])
{
    if(!response) return
        Company_ShowOptions(playerid, PlayerInfo[playerid][pIndustryMOD]);

    new id = PlayerInfo[playerid][pIndustryMOD];
    new name[50];

    if(sscanf(inputtext, "s[50]", name) || strlen(name) > 50)return
        Dialog_Show(playerid, DialogCName, DIALOG_STYLE_INPUT, "Ýsim", "Truckerinizin yeni adýný girin.", "deðiþtir", "Ýptal");

    format(CompanyInfo[id][cName], 50, name);

    Company_RefreshText(id);

    SendAworkAlert(false, COLOR_ADMIN, "AdmCmd: %s, %d ID'li trucker noktasýnýn adýný deðiþtirdi.", ReturnRoleplayName(playerid), id);

    SaveCompany(id);

    PlayerInfo[playerid][pIndustryMOD] = -1;
    LogYaz(playerid, "/cedit isim", -1, id);

    return 1;
}

Dialog:DialogCPrice(playerid, response, listitem, inputtext[])
{
    if(!response) return
        Company_ShowOptions(playerid, PlayerInfo[playerid][pIndustryMOD]);

    new id = PlayerInfo[playerid][pIndustryMOD];
    new price;

    if(sscanf(inputtext, "d", price) || price < 1)return
        Dialog_Show(playerid, DialogCPrice, DIALOG_STYLE_INPUT, "Fiyat", "Yeni fiyatý girin:", "deðiþtir", "Ýptal");

    CompanyInfo[id][cPrice] = price;

    Company_RefreshText(id);

    SendAdminAlert(false, COLOR_ADMIN, "AdmCmd: %s, %d ID'li trucker noktasýnýn koli fiyatýný deðiþtirdi.", ReturnRoleplayName(playerid), id);

    SaveCompany(id);

    PlayerInfo[playerid][pIndustryMOD] = -1;
    LogYaz(playerid, "/cedit fiyat", -1, id);

    return 1;
}

Dialog:DialogCUnit(playerid, response, listitem, inputtext[])
{
    if(!response) return
        Company_ShowOptions(playerid, PlayerInfo[playerid][pIndustryMOD]);

    new id = PlayerInfo[playerid][pIndustryMOD];
    new unit;

    if(sscanf(inputtext, "d", unit) || unit < 1)return
        Dialog_Show(playerid, DialogCUnit, DIALOG_STYLE_INPUT, "Birim", "Koli sayýsýný buraya girin:", "deðiþtir", "Ýptal");

    CompanyInfo[id][cUnit] = unit;

    Company_RefreshText(id);

    SendAworkAlert(false, COLOR_ADMIN, "AdmCmd: %s, %d ID'li truckerýn koli miktarýný deðiþtirdi.", ReturnRoleplayName(playerid), id);

    SaveCompany(id);
    PlayerInfo[playerid][pIndustryMOD] = -1;
    LogYaz(playerid, "/cedit urun", -1, id);

    return 1;
}

Dialog:DialogCPos(playerid, response, listitem, inputtext[])
{
    if(!response) return
        Company_ShowOptions(playerid, PlayerInfo[playerid][pIndustryMOD]);

    new id = PlayerInfo[playerid][pIndustryMOD];
    new Float:x, Float:y, Float:z;

    GetPlayerPos(playerid, x, y, z);

    CompanyInfo[id][cBuyPosX] = x;
    CompanyInfo[id][cBuyPosY] = y;
    CompanyInfo[id][cBuyPosZ] = z;
    CompanyInfo[id][cInterior] = GetPlayerInterior(playerid);
    CompanyInfo[id][cWorld] = GetPlayerVirtualWorld(playerid);

    Pickup_Destroy(CompanyInfo[id][cPoint]);
    CompanyInfo[id][cPoint] = Pickup_Create(ELEMENT_COMPANY, id, 1318, 23, CompanyInfo[id][cBuyPosX], CompanyInfo[id][cBuyPosY], CompanyInfo[id][cBuyPosZ], CompanyInfo[id][cWorld], CompanyInfo[id][cInterior]);

    Company_RefreshText(id);

    SendAworkAlert(false, COLOR_ADMIN, "AdmCmd: %s, %d ID'li truckerýn konumunu deðiþtirdi.", ReturnRoleplayName(playerid), id);

    SaveCompany(id);
    PlayerInfo[playerid][pIndustryMOD] = -1;
    LogYaz(playerid, "/cedit pozisyon", -1, id);

    return 1;
}

Dialog:DialogIIndustryOptions(playerid, response, listitem, inputtext[])
{
    if(!response)return
        PlayerInfo[playerid][pIndustryMOD] = -1;

    switch(listitem)
    {
        case 0: Dialog_Show(playerid, DialogIIPos, DIALOG_STYLE_MSGBOX, "Pozisyonu Yönet", "Son bulunduðunuz yerin yeni konum olarak ayarlanmasýný ister misin?", "deðiþtir", "Ýptal");
        case 1: Dialog_Show(playerid, DialogIIProducts, DIALOG_STYLE_LIST, "Ürünleri Yönet", "Yenileme\nTür\nÜrünleri Yenile", "Seç", "Ýptal");
    }

    return 1;
}

Dialog:DialogIIPos(playerid, response, listitem, inputtext[])
{
    if(!response) return
        IllegalIndustries_ShowOptions(playerid, PlayerInfo[playerid][pIndustryMOD]);

    new id = PlayerInfo[playerid][pIndustryMOD];
    new Float:x, Float:y, Float:z;

    GetPlayerPos(playerid, x, y, z);

    IllegalIndustryInfo[id][iPosX] = x;
    IllegalIndustryInfo[id][iPosY] = y;
    IllegalIndustryInfo[id][iPosZ] = z;

    Pickup_Destroy(IllegalIndustryInfo[id][iPickup]);
    IllegalIndustryInfo[id][iPickup] = Pickup_Create(ELEMENT_INDUSTRY, id, 1318, 23, IllegalIndustryInfo[id][iPosX], IllegalIndustryInfo[id][iPosY], IllegalIndustryInfo[id][iPosZ]);

    DestroyDynamic3DTextLabelEx(IllegalIndustryInfo[id][iLabel]);
    IllegalIndustryInfo[id][iLabel] = CreateDynamic3DTextLabel("Sipariþ Noktasý", COLOR_WHITE, IllegalIndustryInfo[id][iPosX], IllegalIndustryInfo[id][iPosY], IllegalIndustryInfo[id][iPosZ]+1.0, 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0, -1);

    SendAworkAlert(false, COLOR_ADMIN, "AdmCmd: %s, %d ID'li endüstri dükkanýnýn konumunu deðiþtirdi.", ReturnRoleplayName(playerid), id);

    SaveIllegalIndustry(id);
    PlayerInfo[playerid][pIndustryMOD] = -1;
    LogYaz(playerid, "/iedit pozisyon", -1, id, -1);

    return 1;
}

Dialog:DialogIIRefreshAmount(playerid, response, listitem, inputtext[])
{
    if(!response) return
        IllegalIndustries_ShowOptions(playerid, PlayerInfo[playerid][pIndustryMOD]);

    new id = PlayerInfo[playerid][pIndustryMOD];
    new amount = strval(inputtext);

    if(amount < 0 || amount > 1000) return
        HataMesajiC(playerid, "0 ile 1000 arasýnda sayý girmelisin.");

    SendAworkAlert(false, COLOR_ADMIN, "AdmCmd: %s, %d ID'li illegal endüstrinin yenilemesini %d yerine %d yaptý.", ReturnRoleplayName(playerid), id, IllegalIndustryInfo[id][iRefreshAmount], amount);

    IllegalIndustryInfo[id][iRefreshAmount] = amount;
    SaveIllegalIndustry(id);

    PlayerInfo[playerid][pIndustryMOD] = -1;
    LogYaz(playerid, "/iedit yenilememiktari", -1, id, amount);

    return 1;
}

Dialog:DialogIIRefresh(playerid, response, listitem, inputtext[])
{
    if(!response) return
        IllegalIndustries_ShowOptions(playerid, PlayerInfo[playerid][pIndustryMOD]);

    new id = PlayerInfo[playerid][pIndustryMOD];

    SendAworkAlert(false, COLOR_ADMIN, "AdmCmd: %s, %d ID'li illegal endüstrinin mallarýný yeniledi.", ReturnRoleplayName(playerid), id);

    for(new j; j < 29; j++) if(IllegalIndustryInfo[id][iIngredients][j])
        IllegalIndustryInfo[id][iAmounts][j] = IllegalIndustryInfo[id][iRefreshAmount];

    IllegalIndustryInfo[id][iRefreshTime] = gettime();
    SaveIllegalIndustry(id);

    PlayerInfo[playerid][pIndustryMOD] = -1;

    return 1;
}

Dialog:DialogIIProducts(playerid, response, listitem, inputtext[])
{
    if(!response) return
        IllegalIndustries_ShowOptions(playerid, PlayerInfo[playerid][pIndustryMOD]);

    new id = PlayerInfo[playerid][pIndustryMOD];

    switch(listitem)
    {
        case 0: Dialog_Show(playerid, DialogIIRefresh, DIALOG_STYLE_MSGBOX, "Ürün Yenileme", "Bu illegal endüstrinin ürünlerini yenilemek istediðinden emin misin?", "Yenileme", "Ýptal");
        case 1:
        {
            new string[1024];
            new inSell;
            new count;

            for(new j, js = sizeof(InventoryObjects); j < js; j++)
            {
                if(InventoryObjects[j][invType] != ITEM_INGREDIENT)continue;
                inSell = IllegalIndustries_HasIngredient(id, j);
                format(string, sizeof(string), "%s%s\t%s\t$%d\n", string, InventoryObjects[j][invName], (inSell != -1) ? ("Evet") : ("Hayýr"), (inSell != -1) ? IllegalIndustryInfo[id][iPrices][inSell] : 0);
                PlayerInfo[playerid][pIngredientsID][count] = j;
                count++;
            }

            Dialog_Show(playerid, DialogIIProductsList, DIALOG_STYLE_TABLIST_HEADERS, "Satýlýk Ürünler", "Ürün\tSatýlabilir\tFiyat\n%s", "Seç", "Ýptal", string);
        }
        case 2: Dialog_Show(playerid, DialogIIRefreshAmount, DIALOG_STYLE_INPUT, "Ürün Yenileme Miktarý", "Ýstediðiniz yeni ürün yenileme miktarýný girin.", "deðiþtir", "Ýptal");
    }

    return 1;
}

Dialog:DialogIIProductsList(playerid, response, listitem, inputtext[])
{
    if(!response) return
        IllegalIndustries_ShowOptions(playerid, PlayerInfo[playerid][pIndustryMOD]);

    PlayerInfo[playerid][pIngredientID] = PlayerInfo[playerid][pIngredientsID][listitem];

    new itemid = PlayerInfo[playerid][pIngredientID];

    Dialog_Show(playerid, DialogIIProductsOpz, DIALOG_STYLE_LIST, InventoryObjects[itemid][invName], "Ürün Durumu\nSatýþ Fiyatý", "Seç", "Ýptal");

    return 1;
}

Dialog:DialogIIProductsOpz(playerid, response, listitem, inputtext[])
{
    if(!response) return
        IllegalIndustries_ShowOptions(playerid, PlayerInfo[playerid][pIndustryMOD]);

    new id = PlayerInfo[playerid][pIndustryMOD];
    new itemid = PlayerInfo[playerid][pIngredientID];
    new inSell = IllegalIndustries_HasIngredient(id, itemid);
    new actual_id = (inSell == -1) ? IllegalIndustries_GetFreeSlot(id) : inSell;

    switch(listitem)
    {
        case 0:
        {
            IllegalIndustryInfo[id][iIngredients][actual_id] = (inSell != -1) ? -1 : itemid;
            SendAworkAlert(false, COLOR_ADMIN, "AdmCmd: %s, %s ürününü %d ID'li endüstri için %s kýldý.", ReturnRoleplayName(playerid), InventoryObjects[itemid][invName], id, (IllegalIndustryInfo[id][iIngredients][actual_id] != -1) ? ("alýnabilir") : ("alýnamaz"));
            PlayerInfo[playerid][pIndustryMOD] = -1;
            PlayerInfo[playerid][pIngredientID] = -1;
            LogYaz(playerid, "/iedit urun", -1, id, itemid);
            SaveIllegalIndustry(id);
        }
        case 1: Dialog_Show(playerid, DialogIIProductPrice, DIALOG_STYLE_INPUT, InventoryObjects[itemid][invName], "$%d - %s - %d:", "Deðiþtir", "Ýptal", IllegalIndustryInfo[id][iPrices][inSell], InventoryObjects[itemid][invName], id);
    }

    return 1;
}

Dialog:DialogIIProductPrice(playerid, response, listitem, inputtext[])
{
    if(!response) return
        IllegalIndustries_ShowOptions(playerid, PlayerInfo[playerid][pIndustryMOD]);

    new id = PlayerInfo[playerid][pIndustryMOD];
    new itemid = PlayerInfo[playerid][pIngredientID];
    new inSell = IllegalIndustries_HasIngredient(id, itemid);
    new amount;

    if(sscanf(inputtext, "d", amount) || amount < 1 || amount > 1000)return
        Dialog_Show(playerid, DialogIIProductPrice, DIALOG_STYLE_INPUT, InventoryObjects[itemid][invName], "$%d - %s - %d:", "Deðiþtir", "Ýptal", IllegalIndustryInfo[id][iPrices][inSell], InventoryObjects[itemid][invName], id);

    IllegalIndustryInfo[id][iPrices][inSell] = amount;
    SaveIllegalIndustry(id);

    PlayerInfo[playerid][pIndustryMOD] = -1;
    PlayerInfo[playerid][pIngredientID] = -1;

    SendAworkAlert(false, COLOR_ADMIN, "AdmCmd: %s, %s adlý ürünün fiyatýný $%d yaptý. (%d)", ReturnRoleplayName(playerid), InventoryObjects[itemid][invName], amount, id);

    LogYaz(playerid, "/iedit urunfiyat", -1, id, itemid);

    return 1;
}

Dialog:DialogLabOptions(playerid, response, listitem, inputtext[])
{
    if(!response)return
        PlayerInfo[playerid][pLabMOD] = -1;

    new labid = PlayerInfo[playerid][pLabMOD];

    switch(listitem)
    {
        case 0: Dialog_Show(playerid, DialogLabOwner, DIALOG_STYLE_INPUT, "Laboratuvar Sahibi", "isim_soyisim þeklinde yeni laboratuvar sahibinin adýný girin. (örn: Clester_Lettiere)", "deðiþtir", "Ýptal");
        case 1: Dialog_Show(playerid, DialogLabLevel, DIALOG_STYLE_INPUT, "Laboratuvar Seviyesi", "Yeni laboratuvar seviyesi girin. (1-3).", "deðiþtir", "Ýptal");
        case 2: Dialog_Show(playerid, DialogLabPos, DIALOG_STYLE_MSGBOX, "Laboratuvar Konumu", "Laboratuvarýn konumunu bulunduðun yer yapmak istediðinden emin misin?", "deðiþtir", "Ýptal");
        case 3:
        {
            new string[256];

            for(new j; j < 10; j++)
                format(string, sizeof(string), "%s%s\t%d\t\n", string, Drug_GetNameLab(j), LabInfo[labid][lDrugs][j]);

            Dialog_Show(playerid, DialogLabDrugs, DIALOG_STYLE_TABLIST_HEADERS, "Laboratuvarda üretilebilen uyuþturucular", "Uyuþturucu\tÜretilebilir\n%s", "deðiþtir", "Ýptal", string);
        }
        case 4: Dialog_Show(playerid, DialogLabFaction, DIALOG_STYLE_INPUT, "Oluþum Laboratuvarý", "Laboratuvarýn hangi ID'li oluþuma ait olmasýný seç\n\nÖzel laboratuvar için -1 kullanýn.", "deðiþtir", "Ýptal");
    }

    return 1;
}

Dialog:DialogLabOwner(playerid, response, listitem, inputtext[])
{
    if(!response) return
        Lab_ShowOptions(playerid, PlayerInfo[playerid][pLabMOD]);

    new labid = PlayerInfo[playerid][pLabMOD];

    mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT id, char_name FROM characters WHERE char_name = '%e' AND banned = 0 AND deleted = 0 AND deleted_at IS NULL", inputtext);
    mysql_tquery(ourConnection, queryx, "OnQueryFinishedEx", "ddd", labid, playerid, THREAD_SEARCH_NAME_LAB);

    return 1;
}

Dialog:DialogLabLevel(playerid, response, listitem, inputtext[])
{
    if(!response) return
        Lab_ShowOptions(playerid, PlayerInfo[playerid][pLabMOD]);

    new labid = PlayerInfo[playerid][pLabMOD];
    new level = strval(inputtext);

    if(level < 1 || level > 3) return
        Dialog_Show(playerid, DialogLabLevel, DIALOG_STYLE_INPUT, "Laboratuvar Seviyesi", "Seviye bulunamadý. (1-3).\n\nYeni laboratuvar seviyesini girin.", "deðiþtir", "Ýptal");

    if(level == LabInfo[labid][lLevel]) return
        Dialog_Show(playerid, DialogLabLevel, DIALOG_STYLE_INPUT, "Laboratuvar Seviyesi", "Laboratuvar zaten bu seviyede.\n\nYeni laboratuvar seviyesini girin.", "deðiþtir", "Ýptal");

    SendAworkAlert(false, COLOR_ADMIN, "AdmCmd: %s, kiþisi ID %d'li laboratuvarýn seviyesini deðiþtirdi. (%d-->%d)", ReturnRoleplayName(playerid), labid, LabInfo[labid][lLevel], level);

    LabInfo[labid][lLevel] = level;
    SaveLab(labid);

    PlayerInfo[playerid][pLabMOD] = -1;

    return 1;
}

Dialog:DialogLabPos(playerid, response, listitem, inputtext[])
{
    if(!response) return
        Lab_ShowOptions(playerid, PlayerInfo[playerid][pLabMOD]);

    new labid = PlayerInfo[playerid][pLabMOD];
    new Float:x, Float:y, Float:z;
    new interior = GetPlayerInterior(playerid);
    new world = GetPlayerVirtualWorld(playerid);

    GetPlayerPos(playerid, x, y, z);

    LabInfo[labid][lPosX] = x;
    LabInfo[labid][lPosY] = y;
    LabInfo[labid][lPosZ] = z;
    LabInfo[labid][lInterior] = interior;
    LabInfo[labid][lWorld] = world;

    Pickup_Destroy(LabInfo[labid][lPickup]);
    LabInfo[labid][lPickup] = Pickup_Create(ELEMENT_LABORATORY, labid, 1279, 23, LabInfo[labid][lPosX], LabInfo[labid][lPosY], LabInfo[labid][lPosZ]);

    SendAworkAlert(false, COLOR_ADMIN, "AdmCmd: %s, kiþisi bir laboratuvarýn yerini deðiþtirdi. (ID %d.)", ReturnRoleplayName(playerid), labid);

    SaveLab(labid);

    PlayerInfo[playerid][pLabMOD] = -1;
    return 1;
}

Dialog:DialogLabFaction(playerid, response, listitem, inputtext[])
{
    if(!response) return
        Lab_ShowOptions(playerid, PlayerInfo[playerid][pLabMOD]);

    new labid = PlayerInfo[playerid][pLabMOD];
    new fid = strval(inputtext);

    if(fid == -1 || !FactionInfo[fid][fExists])return
        Dialog_Show(playerid, DialogLabFaction, DIALOG_STYLE_INPUT, "Oluþum Laboratuvarý", "Oluþum bulunamadý.\nLaboratuvarýn hangi ID'li oluþuma ait olmasýný seç\n\nÖzel laboratuvar için -1 kullanýn.", "deðiþtir", "Ýptal");

    if(fid == LabInfo[labid][lFaction]) return
        Dialog_Show(playerid, DialogLabFaction, DIALOG_STYLE_INPUT, "Oluþum Laboratuvarý", "Laboratuvar zaten bu oluþuma ait.\nLaboratuvarýn hangi ID'li oluþuma ait olmasýný seç\n\nÖzel laboratuvar için -1 kullanýn.", "deðiþtir", "Ýptal");

    SendAworkAlert(false, COLOR_ADMIN, "AdmCmd: %s, %d ID'li fabrikanýn sahibini deðiþtirdi.", ReturnRoleplayName(playerid), labid);

    LabInfo[labid][lFaction] = fid;
    SaveLab(labid);

    PlayerInfo[playerid][pLabMOD] = -1;
    return 1;
}

Dialog:DialogLabDrugs(playerid, response, listitem, inputtext[])
{
    if(!response) return
        Lab_ShowOptions(playerid, PlayerInfo[playerid][pLabMOD]);

    new labid = PlayerInfo[playerid][pLabMOD];

    LabInfo[labid][lDrugs][listitem] = !LabInfo[labid][lDrugs][listitem];
    SaveLab(labid);

    if(LabInfo[labid][lDrugs][listitem])
    {
        SendAworkAlert(false, COLOR_ADMIN, "AdmCmd: %s, %s uyuþturucusunu üretilebilir kýldý. (Laboratuvar ID: %d)", ReturnRoleplayName(playerid), Drug_GetNameLab(listitem), labid);
        PlayerInfo[playerid][pFactionMOD] = -1;
    }
    else
    {
        SendAworkAlert(false, COLOR_ADMIN, "AdmCmd: %s, %s uyuþturucusunu üretilemez kýldý. (Laboratuvar ID: %d)", ReturnRoleplayName(playerid), Drug_GetNameLab(listitem), labid);
        PlayerInfo[playerid][pFactionMOD] = -1;
    }

    return 1;
}

Dialog:DialogFurniture(playerid, response, listitem, inputtext[])
{
    if(!response)return 0;

    switch(listitem)
    {
        case 0:
        {
            if(PlayerInfo[playerid][pAdmin] < 2) Dialog_Show(playerid, DialogFurnitureBuyList, DIALOG_STYLE_LIST, "Mobilya Satýn Al", "Duvarlar\nMutfak\nKoltuklar ve Sandalyeler\nYataklar\nAydýnlatma\nMasalar\nDolaplar\nElektronik\nBanyo Malzemeleri\nKapýlar\nÇeþitli (1)\nÇeþitli (2)\nTablolar\nYiyecek/Ýçecek\nAlet Edevat\nKýyafetler\nPlaj Malzemeleri\nPosterler ve Grafitiler\nKutular\nÇöp Kutularý\nDonator\nSpor Aletleri", "Ýleri", "Ýptal");
            else Dialog_Show(playerid, DialogFurnitureBuyList, DIALOG_STYLE_LIST, "Mobilya Satýn Al", "Duvarlar\nMutfak\nKoltuklar ve Sandalyeler\nYataklar\nAydýnlatma\nMasalar\nDolaplar\nElektronik\nBanyo Malzemeleri\nKapýlar\nÇeþitli (1)\nÇeþitli (2)\nTablolar\nYiyecek/Ýçecek\nAlet Edevat\nKýyafetler\nPlaj Malzemeleri\nPosterler ve Grafitiler\nKutular\nÇöp Kutularý\nDonator\nSpor Aletleri\nAdminstrator", "Ýleri", "Ýptal");
        }
        case 1: ShowPlayerFurnitures(playerid, 1);
        case 2: Dialog_Show(playerid, DialogNull, DIALOG_STYLE_MSGBOX, "Bilgi", "Kullanýlan mobilya: %d/%d", "Ýptal", "", GetFurnitureCount(playerid), Furniture_GetLimit(playerid));
        case 3:
        {
            if(GetFurnitureCount(playerid) > 0) Dialog_Show(playerid, DialogSellAllFurniture, DIALOG_STYLE_INPUT, "Mobilyalarý sat", "Bütün mobilyalarý satmak istediðinden emin misin? Sistem fiyatýnýn yarýsýný alacaksýn!\nAþaðýdaki boþluða iþlemi onaylamak için 'EVET' yazýn.", "Evet", "Hayýr");
        }
    }

    return 1;
}

Dialog:DialogSellAllFurniture(playerid, response, listitem, inputtext[])
{
    if(!response)return 0;

    if(isnull(inputtext)) return HataMesajiC(playerid, "Hatalý onay kodu giriþi, iþlem baþarýsýz.");

    if(!strcmp("EVET", inputtext, true))
    {
        new VW = GetPlayerVirtualWorld(playerid);
        if(VW == 0)
        {
            if(PlayerInfo[playerid][pAccountID] == 267 || PlayerInfo[playerid][pAccountID] == 255)
            {
                Furniture_DestroyLabels(playerid);
                mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT * FROM furnitures WHERE world = '%d'", VW);
                mysql_tquery(ourConnection, queryx, "OnDeleteFurnitures", "ddd", playerid, VW, 1);
            }
            else HataMesaji(playerid, "Bu iþlemi sadece Mosca veya Marvellous gerçekleþtirebilir.");
        }
        else
        {
            Furniture_DestroyLabels(playerid);
            mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT * FROM furnitures WHERE world = '%d'", VW);
            mysql_tquery(ourConnection, queryx, "OnDeleteFurnitures", "ddd", playerid, VW, 1);
        }
    }
    else HataMesajiC(playerid, "Hatalý onay kodu giriþi, iþlem baþarýsýz.");
    return 1;
}

Dialog:DialogFurnitureBuyList(playerid, response, listitem, inputtext[])
{
    if(!response) return pc_cmd_dekorasyon(playerid, "");

    if(listitem == 20 && !PlayerInfo[playerid][pPremium]) return
        SunucuMesaji(playerid, "Bu mobilyalarý satýn almak için donator olmalýsýn.");

/*    if(listitem == ** && !PlayerInfo[playerid][pAdmin]) return
        SunucuMesaji(playerid, "Bu mobilyalarý satýn almak için yönetici olmalýsýn.");*/

    new string[200], count;

    for(new x = 0; x < sizeof(BuyableFurnitures); x ++)
    {
        if(BuyableFurnitures[x][oSlot] == listitem)
        {
            string[count] = BuyableFurnitures[x][oModelID];
            PlayerInfo[playerid][pFurnituresID][count] = x;
            count++;
        }
    }

    ShowModelSelectionMenuEx(playerid, string, count, "Dekorasyon", TMOBILYA, 16.0, 0.0, -55.0);

    return 1;
}

Dialog:DialogFurnituresList(playerid, response, listitem, inputtext[])
{
    if(!response)
    {
        if(PlayerInfo[playerid][pPage] <= 1) return pc_cmd_dekorasyon(playerid, "");
        else return ShowPlayerFurnitures(playerid, PlayerInfo[playerid][pPage] - 1);
    }

    if(!listitem)return
        ShowPlayerFurnitures(playerid, PlayerInfo[playerid][pPage] + 1);

    PlayerInfo[playerid][pSelectedItem] = PlayerInfo[playerid][pFurnituresID][listitem - 1];

    Furniture_ShowOptions(playerid);

    return 1;
}

Dialog:DialogADOD(playerid, response, listitem, inputtext[])
{
    if(!response) return 1;

    new id = PlayerInfo[playerid][pSelectedItem];

    Streamer_GetArrayData(STREAMER_TYPE_OBJECT, id, E_STREAMER_EXTRA_ID, g_obj, siz_g_obj);

    GetDynamicObjectPos(id, g_obj[co_pos_x], g_obj[co_pos_y], g_obj[co_pos_z]);
    GetDynamicObjectRot(id, g_obj[co_rot_x], g_obj[co_rot_y], g_obj[co_rot_z]);

    Streamer_SetArrayData(STREAMER_TYPE_OBJECT, id, E_STREAMER_EXTRA_ID, g_obj, siz_g_obj);

    switch(listitem)
    {
        case 0: // POS DUZENLEME
        {
            EditDynamicObject(playerid, id);
            PlayerInfo[playerid][pEditingMode] = 11;
        }
        case 1: // OBJE SILME
        {
            DestroyDynamicObjectEx(id);
            PlayerInfo[playerid][pSelectedItem] = -1;
        }
        case 2: // TEXTURE
        {
            Dialog_Show(playerid, aTextureIndex, DIALOG_STYLE_LIST, "Texture index", "Index 0\nIndex 1\nIndex 2\nIndex 3\nIndex 4\nIndex 5\nIndex 6\nIndex 7\nIndex 8\nIndex 9\nIndex 10\nIndex 11", "Tamam", "Ýptal");
            SetPVarInt(playerid, "aTexturelancakObjeID", id);
        }
    }

    return 1;
}

Dialog:DialogAOD(playerid, response, listitem, inputtext[])
{
    if(!response) return 1;

    new id = PlayerInfo[playerid][pSelectedItem];

    Streamer_GetArrayData(STREAMER_TYPE_OBJECT, id, E_STREAMER_EXTRA_ID, g_obj, siz_g_obj);

    GetObjectPos(id, g_obj[co_pos_x], g_obj[co_pos_y], g_obj[co_pos_z]);
    GetObjectRot(id, g_obj[co_rot_x], g_obj[co_rot_y], g_obj[co_rot_z]);

    Streamer_SetArrayData(STREAMER_TYPE_OBJECT, id, E_STREAMER_EXTRA_ID, g_obj, siz_g_obj);

    switch(listitem)
    {
        case 0: // POS DUZENLEME
        {
            EditObject(playerid, id);
            PlayerInfo[playerid][pEditingMode] = 12;
        }
        case 1: // OBJE SILME
        {
            DestroyObject(id);
            PlayerInfo[playerid][pSelectedItem] = -1;
        }
        case 2: // TEXTURE
        {
            Dialog_Show(playerid, axTextureIndex, DIALOG_STYLE_LIST, "Texture index", "Index 0\nIndex 1\nIndex 2\nIndex 3\nIndex 4\nIndex 5\nIndex 6\nIndex 7\nIndex 8\nIndex 9\nIndex 10\nIndex 11", "Tamam", "Ýptal");
            SetPVarInt(playerid, "axTexturelancakObjeID", id);
        }
    }

    return 1;
}

Dialog:DialogFurnitureOpz(playerid, response, listitem, inputtext[])
{
    if(!response)
    {
        ShowPlayerFurnitures(playerid, PlayerInfo[playerid][pPage]);
        return PlayerInfo[playerid][pSelectedItem] = -1;
    }

    new id = PlayerInfo[playerid][pSelectedItem];

    Streamer_GetArrayData(STREAMER_TYPE_OBJECT, id, E_STREAMER_EXTRA_ID, g_obj, siz_g_obj);

    GetDynamicObjectPos(id, g_obj[co_pos_x], g_obj[co_pos_y], g_obj[co_pos_z]);
    GetDynamicObjectRot(id, g_obj[co_rot_x], g_obj[co_rot_y], g_obj[co_rot_z]);

    Streamer_SetArrayData(STREAMER_TYPE_OBJECT, id, E_STREAMER_EXTRA_ID, g_obj, siz_g_obj);

    switch(listitem)
    {
        case 0:
        {
            if(GetPlayerDistanceFromPoint(playerid, g_obj[co_pos_x], g_obj[co_pos_y], g_obj[co_pos_z]) > 20.0)return
                SunucuMesaji(playerid, "Bir mobilyaya yakýn deðilsin.");

            EditDynamicObject(playerid, id);
            BasariMesaji(playerid, "Ýptal etmek için ESC veya boþluk tuþuna basýn, kaydetmek için diskete týklayýn.");
            PlayerInfo[playerid][pEditingMode] = 2;
        }
        case 1: Dialog_Show(playerid, DialogDeleteFurniture, DIALOG_STYLE_MSGBOX, "Mobilyayý Sat", "%s mobilyasýný $%d karþýlýðýnda satmak istediðinden emin misin?", "Evet", "Hayýr", g_obj[co_name], SunucuBilgi[MobilyaSatma]);
        case 2: Dialog_Show(playerid, DialogNameFurniture, DIALOG_STYLE_INPUT, "Yeni Ad Ver", "Mobilya için yeni adý girin: %s", "Yeni Ad Ver", "Ýptal", g_obj[co_name]);
        case 3: Dialog_Show(playerid, DialogDuplicateFurniture, DIALOG_STYLE_MSGBOX, "Mobilyayý kopyala", "%s mobilyasýný $%d karþýlýðýnda kopyalamak istediðinden emin misin?", "Evet", "Hayýr", g_obj[co_name], SunucuBilgi[MobilyaSatinAlma]);
        case 4:
        {
            Dialog_Show(playerid, TextureIndex, DIALOG_STYLE_LIST, "Texture index", "Index 0\nIndex 1\nIndex 2\nIndex 3\nIndex 4\nIndex 5\nIndex 6\nIndex 7\nIndex 8\nIndex 9\nIndex 10\nIndex 11", "Tamam", "Ýptal");
            SetPVarInt(playerid, "TexturelancakObjeID", id);
        }
        case 5:
        {
            Dialog_Show(playerid, TextureIndexListe2, DIALOG_STYLE_LIST, "Texture index", "Index 0\nIndex 1\nIndex 2\nIndex 3\nIndex 4\nIndex 5\nIndex 6\nIndex 7\nIndex 8\nIndex 9\nIndex 10\nIndex 11", "Tamam", "Ýptal");
            SetPVarInt(playerid, "TexturelancakObjeID", id);
        }
        case 6: SetPlayerPos(playerid, g_obj[co_pos_x] + 1.0, g_obj[co_pos_y] + 2.0, g_obj[co_pos_z]);
    }

    return 1;
}

Dialog:DialogDuplicateFurniture(playerid, response, listitem, inputtext[])
{
    if(!response)return
        Furniture_ShowOptions(playerid);

    new id = PlayerInfo[playerid][pSelectedItem];

    Streamer_GetArrayData(STREAMER_TYPE_OBJECT, id, E_STREAMER_EXTRA_ID, g_obj, siz_g_obj);

    new modelid = Streamer_GetIntData(STREAMER_TYPE_OBJECT, id, E_STREAMER_MODEL_ID);
    new Float:x, Float:y, Float:z;
    new Float:rx, Float:ry, Float:rz;

    for(new j, js = sizeof(BuyableFurnitures); j < js; j++) if(BuyableFurnitures[j][oPrice] == g_obj[co_price] && BuyableFurnitures[j][oModelID] == modelid)
    {
        PlayerInfo[playerid][pSelectedItem] = j;

        GetDynamicObjectPos(id, x, y, z);
        GetDynamicObjectRot(id, rx, ry, rz);

        Furniture_Buy(playerid, BuyableFurnitures[j][oModelID], x, y, z, rx, ry, rz, id); break;
    }

    return 1;
}

Dialog:DialogDeleteFurniture(playerid, response, listitem, inputtext[])
{
    if(!response)return
        Furniture_ShowOptions(playerid);

    // new query[150];
    new id = PlayerInfo[playerid][pSelectedItem];

    Streamer_GetArrayData(STREAMER_TYPE_OBJECT, id, E_STREAMER_EXTRA_ID, g_obj, siz_g_obj);

    if(PlayerInfo[playerid][pPremium] < 5)
    {
        OAC_GivePlayerMoney(playerid, SunucuBilgi[MobilyaSatma]);
        BasariMesaji(playerid, "%s adlý mobilyayý $%d karþýlýðýnda sisteme sattýn.", g_obj[co_name], SunucuBilgi[MobilyaSatma]);
    }
    else BasariMesaji(playerid, "%s adlý mobilyayý sisteme sattýn.", g_obj[co_name]);

    mysql_format(ourConnection, queryx, sizeof(queryx), "DELETE FROM furnitures WHERE id = '%d'", g_obj[co_database_id]);
    mysql_tquery(ourConnection, queryx);

    g_obj[co_name] = EOS;
    g_obj[co_price] = 0;
    g_obj[co_database_id] = 0;
    Streamer_SetArrayData(STREAMER_TYPE_OBJECT, id, E_STREAMER_EXTRA_ID, g_obj, siz_g_obj);

    DestroyDynamicObjectEx(id);
    PlayerInfo[playerid][pSelectedItem] = -1;

    pc_cmd_dekorasyon(playerid, "");

    if(PlayerInfo[playerid][pShowingID])
    {
        Furniture_DestroyLabels(playerid);
        pc_cmd_dekorasyonid(playerid, NULL);
    }

    return 1;
}

Dialog:DialogNameFurniture(playerid, response, listitem, inputtext[])
{
    if(!response)return
        Furniture_ShowOptions(playerid);

    // new query[150];
    new id = PlayerInfo[playerid][pSelectedItem];

    Streamer_GetArrayData(STREAMER_TYPE_OBJECT, id, E_STREAMER_EXTRA_ID, g_obj, siz_g_obj);

    if(!strlen(inputtext) || strlen(inputtext) > 100)return
        Dialog_Show(playerid, DialogNameFurniture, DIALOG_STYLE_INPUT, "Adýný deðiþtir", "Yeni ismi girin. (maksimum 100 karakter)\nMobilya için yeni adý girin: %s", "Adýný deðiþtir", "Ýptal", g_obj[co_name]);

    mysql_format(ourConnection, queryx, sizeof(queryx), "UPDATE furnitures SET name = '%e' WHERE id = '%d'", inputtext, g_obj[co_database_id]);
    mysql_tquery(ourConnection, queryx);

    format(g_obj[co_name], 100, inputtext);
    Streamer_SetArrayData(STREAMER_TYPE_OBJECT, id, E_STREAMER_EXTRA_ID, g_obj, siz_g_obj);

    BasariMesaji(playerid, "Mobilyanýn adýný %s olarak deðiþtirdin.", inputtext);

    PlayerInfo[playerid][pSelectedItem] = -1;

    pc_cmd_dekorasyon(playerid, "");
    return 1;
}

Dialog:DialogPPNumber(playerid, response, listitem, inputtext[])
{
    if(!response)return
        Dialog_Show(playerid, DialogPPNumber, DIALOG_STYLE_INPUT, "Telefon Kulübesi", "Oluþturmak istediðiniz kulübeye numara girin.", "Ýleri", "Ýptal");

    if(!IsNumeric(inputtext) || strlen(inputtext) != 6)return
        Dialog_Show(playerid, DialogPPNumber, DIALOG_STYLE_INPUT, "Telefon Kulübesi", "6 haneli numara girin.\nOluþturmak istediðiniz kulübeye numara girin.", "Ýleri", "Ýptal");

    foreach(new j : PayPhones) if(PayPhoneInfo[j][cExists] && strval(inputtext) == PayPhoneInfo[j][cNumber])return
        Dialog_Show(playerid, DialogPPNumber, DIALOG_STYLE_INPUT, "Telefon Kulübesi", "Numara baþka bir kulübe tarafýndan kullanýlýyor.\nOluþturmak istediðiniz kulübeye numara girin.", "Ýleri", "Ýptal");

    new pid = PlayerInfo[playerid][pSelectedItem];

    PayPhoneInfo[pid][cNumber] = strval(inputtext);
    PayPhoneInfo[pid][cExists] = 1;
    PayPhoneLabelOlustur(pid);
    PlayerInfo[playerid][pEditingMode] = 0;
    PlayerInfo[playerid][pSelectedItem] = -1;

    SendAworkAlert(false, COLOR_ADMIN, "AdmCmd: %s, ID %d'li kabini oluþturdu. (Numara:%d)", ReturnRoleplayName(playerid), pid, PayPhoneInfo[pid][cNumber]);


    // new query[350];

    mysql_format(ourConnection, queryx, sizeof(queryx), "INSERT INTO payphones (number, pos_x, pos_y, pos_z, rot_x, rot_y, rot_z) VALUES ('%d', '%f', '%f', '%f', '%f', '%f', '%f')",
    PayPhoneInfo[pid][cNumber],
    PayPhoneInfo[pid][cPosX],
    PayPhoneInfo[pid][cPosY],
    PayPhoneInfo[pid][cPosZ],
    PayPhoneInfo[pid][cRotX],
    PayPhoneInfo[pid][cRotY],
    PayPhoneInfo[pid][cRotZ]);

    mysql_tquery(ourConnection, queryx, "OnQueryFinished", "dd", pid, THREAD_ADD_PAYPHONE);
    return 1;
}

Dialog:DialogGraffito(playerid, response, listitem, inputtext[])
{
    if(!response)return
        PlayerInfo[playerid][pSelectedItem] = -1;

    if(isnull(inputtext) || strlen(inputtext) > 128)return
        Dialog_Show(playerid, DialogGraffito, DIALOG_STYLE_INPUT, "Grafiti", "Grafiti metnini #renk ile birlikte girin.\nKullaným: '#renk GrafittiYazisi'", "Ýleri", "Ýptal");

    new id = PlayerInfo[playerid][pSelectedItem], graffitoText[128];

    format(graffitoText, sizeof(graffitoText), inputtext);

    ReplaceText(graffitoText, "#kirmizi", "{FF0000}"); //graffiti-renk
    ReplaceText(graffitoText, "#mavi", "{0000FF}");
    ReplaceText(graffitoText, "#sari", "{FFFF00}");
    ReplaceText(graffitoText, "#yesil", "{00FF00}");
    ReplaceText(graffitoText, "#mor", "{FF80FF}");
    ReplaceText(graffitoText, "#acikmavi", "{00FFFF}");
    ReplaceText(graffitoText, "#beyaz", "{FFFFFF}");
    ReplaceText(graffitoText, "#turuncu", "{FF8000}");
    ReplaceText(graffitoText, "#siyah", "{000000}");

    format(GraffitoInfo[id][gText], 128, graffitoText);

    Dialog_Show(playerid, DialogFontGraffito, DIALOG_STYLE_LIST, "Grafiti", "Arial\nGeorgia\nBlackoak Std\nCalibri\nCambria\nCandara\nCharlemagne Std\nComic Sans MS\nConsolas\nConstantia\nCourier\nFixedsys\nImpact\nHobo Std\nLucida Console\nMontserrat\nNueva Std\nOswald\nPoplar Std\nPrestige Elite Std\nSegoe Print\nSegoe Script\nSegoe UI\nSystem\nRoman\nTimes New Roman\nVerdana\nTrebuchet MS\nSmall Fonts", "Ýleri", "");

    return 1;
}

Dialog:DialogFontGraffito(playerid, response, listitem, inputtext[])
{
    if(!response || isnull(inputtext))return
        Dialog_Show(playerid, DialogFontGraffito, DIALOG_STYLE_INPUT, "Grafiti", "Grafiti yaparken kullanmak istediðiniz fontu buraya girin:", "Ýleri", "");

    new id = PlayerInfo[playerid][pSelectedItem];
    new fontText[30];
    switch(listitem) {
        case 0: {
            format(fontText, 30, "Arial");
        }
        case 1: {
            format(fontText, 30, "Georgia");
        }
        case 2: {
            format(fontText, 30, "Blackoak Std");
        }
        case 3: {
            format(fontText, 30, "Calibri");
        }
        case 4: {
            format(fontText, 30, "Cambria");
        }
        case 5: {
            format(fontText, 30, "Candara");
        }
        case 6: {
            format(fontText, 30, "Charlemagne Std");
        }
        case 7: {
            format(fontText, 30, "Comic Sans MS");
        }
        case 8: {
            format(fontText, 30, "Consolas");
        }
        case 9: {
            format(fontText, 30, "Constantia");
        }
        case 10: {
            format(fontText, 30, "Courier");
        }
        case 11: {
            format(fontText, 30, "Fixedsys");
        }
        case 12: {
            format(fontText, 30, "Impact");
        }
        case 13: {
            format(fontText, 30, "Hobo Std");
        }
        case 14: {
            format(fontText, 30, "Lucida Console");
        }
        case 15: {
            format(fontText, 30, "Montserrat");
        }
        case 16: {
            format(fontText, 30, "Nueva Std");
        }
        case 17: {
            format(fontText, 30, "Oswald");
        }
        case 18: {
            format(fontText, 30, "Poplar Std");
        }
        case 19: {
            format(fontText, 30, "Prestige Elite Std");
        }
        case 20: {
            format(fontText, 30, "Segoe Print");
        }
        case 21: {
            format(fontText, 30, "Segoe Script");
        }
        case 22: {
            format(fontText, 30, "Segoe UI");
        }
        case 23: {
            format(fontText, 30, "System");
        }
        case 24: {
            format(fontText, 30, "Roman");
        }
        case 25: {
            format(fontText, 30, "Times New Roman");
        }
        case 26: {
            format(fontText, 30, "Verdana");
        }
        case 27: {
            format(fontText, 30, "Trebuchet MS");
        }
        case 28: {
            format(fontText, 30, "Small Fonts");
        }
    }
    format(GraffitoInfo[id][gFont], 30, fontText);

    Dialog_Show(playerid, DialogSizeGraffito, DIALOG_STYLE_INPUT, "Grafiti", "Grafiti yaparken kullanmak istediðiniz büyüklüðü buraya girin (10 - 24):", "Ýleri", "");

    return 1;
}

Dialog:DialogSizeGraffito(playerid, response, listitem, inputtext[])
{
    if(!response || !IsNumeric(inputtext) || strval(inputtext) < 10 || strval(inputtext) > 24)return
        Dialog_Show(playerid, DialogSizeGraffito, DIALOG_STYLE_INPUT, "Grafiti", "Grafiti yaparken kullanmak istediðiniz büyüklüðü buraya girin (10 - 24):", "Ýleri", "");

    new id = PlayerInfo[playerid][pSelectedItem];

    GraffitoInfo[id][gSize] = strval(inputtext);

    mysql_format(ourConnection, queryx, sizeof(queryx), "UPDATE graffitis SET text = '%e', font = '%e', size = '%d' WHERE id = '%d'", GraffitoInfo[id][gText], GraffitoInfo[id][gFont], GraffitoInfo[id][gSize], GraffitoInfo[id][gID]);
    mysql_tquery(ourConnection, queryx);

    ReplaceText(GraffitoInfo[id][gText], "#c", "\n");
    SetDynamicObjectMaterialText(GraffitoInfo[id][gObject], 0, GraffitoInfo[id][gText], OBJECT_MATERIAL_SIZE_256x256, GraffitoInfo[id][gFont], GraffitoInfo[id][gSize], 0, 0xFFFFFFFF, 0, 1);

    ApplyAnimation(playerid, "GRAFFITI", "graffiti_Chkout", 4.0, 0, 0, 0, 0, 0);

    LogYaz(playerid, "/graffiti", -1, id, -1);

    return 1;
}

Dialog:DialogSell(playerid, response, listitem, inputtext[])
{
    if(!response)return 0;

    if(isnull(inputtext)) return HataMesajiC(playerid, "Hatalý onay kodu giriþi, iþlem baþarýsýz.");

    if(!strcmp("EVET", inputtext, true))
    {
        new vid = GetPlayerVehicleID(playerid);

        if(IsPlayerInAnyVehicle(playerid))
        {
            if(VehicleInfo[vid][vOwner] != PlayerInfo[playerid][pID])
                return 1;

            printf("[%s] %s: %s model aracý $%d icin sisteme satti. SQLID: %d", ReturnDate(), ReturnRoleplayName(playerid), GetVehicleModel(VehicleInfo[vid][vModel]), (VehicleInfo[vid][vPrice] * SunucuBilgi[ASSY] / 100 - VehicleInfo[vid][vKMGosteren] / 2) - VehicleInfo[vid][vVergi], VehicleInfo[vid][vID]);

            AC_GivePlayerMoney(playerid, VehicleInfo[vid][vPrice] * SunucuBilgi[ASSY] / 100 - VehicleInfo[vid][vKMGosteren] / 2 - VehicleInfo[vid][vVergi], "/arac sistemesat");
            Key_Remove(KEY_VEHICLE, VehicleInfo[vid][vID]);

            VehicleInfo[vid][vOwner] = -1;
            VehicleInfo[vid][vFaction] = INVALID_VEHICLE_ID;
            VehicleInfo[vid][vJob] = -1;
            VehicleInfo[vid][vSpawnPosX] = 0;
            VehicleInfo[vid][vSpawnPosY] = 0;
            VehicleInfo[vid][vSpawnPosZ] = 0;
            VehicleInfo[vid][vSpawnPosA] = 0;
            VehicleInfo[vid][vLocked] = 0;
            VehicleInfo[vid][vEngine] = 0;
            VehicleInfo[vid][vLights] = 0;
            VehicleInfo[vid][vBonnet] = 0;
            VehicleInfo[vid][vBoot] = 0;
            VehicleInfo[vid][vCallSign] = false;
            DestroyDynamic3DTextLabelEx(VehicleInfo[vid][vSignText]);
            if(VehicleInfo[vid][vSirenOn] == true)
            {
                DestroyDynamicObjectEx(VehicleInfo[vid][vSirenObject]);
                VehicleInfo[vid][vSirenOn] = false;
            }

            // new query[128];

            for(new j; j < Trunk_GetSlot(vid); j++)
            {
                VehicleInfo[vid][vInvList][j] = 0;
                VehicleInfo[vid][vInvAmount][j] = 0;
                VehicleInfo[vid][vInvExtra][j] = 0;
            }

            for(new i; i < MAX_TUNING_COMPONENTS; i++) {
                VehicleInfo[vid][vTuning][i] = 0;
            }

            Vehicle_ClearCargo(vid);

            SunucuMesaji(playerid, "Aracýný $%d karþýlýðýnda sisteme sattýn.", VehicleInfo[vid][vPrice] * SunucuBilgi[ASSY] / 100 - VehicleInfo[vid][vKMGosteren] / 2 - VehicleInfo[vid][vVergi]);

            mysql_format(ourConnection, queryx, sizeof(queryx), "DELETE FROM vehicles WHERE id = '%d'", VehicleInfo[vid][vID]);
            mysql_tquery(ourConnection, queryx);
            foreach(new id: Tezgahlar) {
                if(StandInfo[id][sExists]) {
                    if(StandInfo[id][saracID] == vid) {
                        foreach(new i: Player) if(PlayerInfo[i][pLogged]) {
                            if(PlayerInfo[i][pID] == StandInfo[id][sID]) {
                                PlayerInfo[i][pActigiTezgah] = -1;
                                break;
                            }
                        }
                        StandInfo[id][sExists] = 0;
                        StandInfo[id][sID] = -1;
                        format(StandInfo[id][sKuran], MAX_PLAYER_NAME, "Yok");
                        StandInfo[id][sModel] = 0;
                        DestroyDynamicObjectEx(StandInfo[id][sObje]);
                        StandInfo[id][sPosX] = 0.0;
                        StandInfo[id][sPosY] = 0.0;
                        StandInfo[id][sPosZ] = 0.0;
                        StandInfo[id][sRotX] = 0.0;
                        StandInfo[id][sRotY] = 0.0;
                        StandInfo[id][sRotZ] = 0.0;
                        StandInfo[id][sMasaModel] = 0;
                        DestroyDynamicObjectEx(StandInfo[id][sMasaObje]);
                        StandInfo[id][sMasaPosX] = 0.0;
                        StandInfo[id][sMasaPosY] = 0.0;
                        StandInfo[id][sMasaPosZ] = 0.0;
                        StandInfo[id][sMasaRotX] = 0.0;
                        StandInfo[id][sMasaRotY] = 0.0;
                        StandInfo[id][sMasaRotZ] = 0.0;
                        if(IsValidDynamic3DTextLabel(StandInfo[id][sLabel]))
                            DestroyDynamic3DTextLabelEx(StandInfo[id][sLabel]);
                        format(StandInfo[id][sLabelText], 128, "");
                        StandInfo[id][sArabali] = false;
                        for(new i; i < 3; i++) {
                            StandInfo[id][sCalisan][i] = -1;
                            StandInfo[id][sUrunFiyati][i] = 0;
                            format(StandUrunInfo[id][i], 80, "Yok");
                            format(StandIcecekInfo[id][i], 80, "Yok");
                            StandInfo[id][sIcecekFiyati][i] = 0;
                        }
                        StandInfo[id][saracID] = -1;
                        SunucuMesaji(playerid, "Tezgahýnýzý sildiniz.");
                        Iter_Remove(Tezgahlar, id);
                        PlayerInfo[playerid][pActigiTezgah] = -1;
                        break;
                    }
                }
            }
            DestroyVehicle(VehicleInfo[vid][vScript]);
            Iter_Remove(Vehicles, VehicleInfo[vid][vScript]);
        }
        else return
            HataMesajiC(playerid, "Herhangi bir araçta deðilsin.");
    }
    else HataMesajiC(playerid, "Hatalý onay kodu giriþi, iþlem baþarýsýz.");

    return 1;
}

Dialog:DialogTelefon(playerid, response, listitem, inputtext[])
{
    if(!response)
    {
        PlayerAME(playerid, "cep telefonunun ekranýný kapatýr ve cebine yerleþtirir.");
        PlayerInfo[playerid][pTelefonTick] = 0;
        return PlayerInfo[playerid][pItemID] = -1;
    }

    if(PlayerInfo[playerid][pCuffed])
        return HataMesajiC(playerid, "Kelepçeliyken bunu yapamazsýnýz.");

    new itemid = PlayerInfo[playerid][pItemID];

    switch(listitem)
    {
        case 0:
        {
            PlayerInfo[playerid][pInvExtra][itemid] = !PlayerInfo[playerid][pInvExtra][itemid];
            Player_Info(playerid, (!PlayerInfo[playerid][pInvExtra][itemid]) ? ("Telefon ~r~kapali~w~.") : ("Telefon ~g~acik~w~."), true);
            if(PlayerInfo[playerid][pInvExtra][itemid]) return PlayerAME(playerid, "telefonunu açar.");
            else return PlayerAME(playerid, "telefonunu kapatýr.");
        }
        case 1:
        {
            if(!PlayerInfo[playerid][pInvExtra][itemid])return
                SunucuMesajiC(playerid, "Telefonun kapalý.");

            PlayerInfo[playerid][pInvExtra][itemid] = (PlayerInfo[playerid][pInvExtra][itemid] == 1) ? 2 : 1;
            Player_Info(playerid, (PlayerInfo[playerid][pInvExtra][itemid] == 1) ? ("Ses ~g~acik~w~.") : ("Ses ~r~kapali~w~."), true);
        }
        case 2:
        {
            if(!PlayerInfo[playerid][pInvExtra][itemid])return
                SunucuMesajiC(playerid, "Telefonun kapalý.");

            Dialog_Show(playerid, DialogArama, DIALOG_STYLE_INPUT, "Arama", "Arayacaðýnýz telefon numarasýný girin:", "Ara", "Ýptal");
        }
        case 3:
        {
            if(!PlayerInfo[playerid][pInvExtra][itemid])return
                SunucuMesajiC(playerid, "Telefonun kapalý.");

            Dialog_Show(playerid, DialogSMSGonder, DIALOG_STYLE_INPUT, "SMS", "Mesaj göndereceðiniz telefon numarasýný girin:", "Numara Gir", "Ýptal");
        }
        case 4, 5:
        {
            if(!PlayerInfo[playerid][pInvExtra][itemid])return
                SunucuMesajiC(playerid, "Telefonun kapalý.");

            PlayerInfo[playerid][pPhoneID] = itemid;
            PlayerInfo[playerid][pListType] = (listitem == 3) ? TYPE_CALL : TYPE_SMS;
            ShowPlayerPhoneLogs(playerid, 1, PlayerInfo[playerid][pListType]);
        }
        case 6: {
            PlayerInfo[playerid][pPhoneID] = itemid;
            return pc_cmd_rehber(playerid, PlayerInfo[playerid][pPhoneID]);
        }
        case 7: {

            if(!PlayerInfo[playerid][pInvExtra][itemid])return
                SunucuMesajiC(playerid, "Telefonun kapalý.");

            if(BirlikteDinliyor[playerid] == -1) {
                SetPVarInt(playerid, "KulakliklaMuzik", 1);
                ShowRadioLinks(playerid, 0);
            } else return HataMesajiC(playerid, "Birisiyle müzik dinlerken bunu kullanamazsýnýz. /dinlemebirak komutunu kullanabilirsiniz.");
        }
        case 8:
        {
            if(!PlayerInfo[playerid][pInvExtra][itemid])return
                SunucuMesajiC(playerid, "Telefonun kapalý.");
                
            Dialog_Show(playerid, DialogKonumServisi, DIALOG_STYLE_LIST, "Konum Servisi", "Google Haritalar\nKonum Gönder", "Seç", "Iptal");
        }
        case 9: { // markette mi kontrol
            new buildingid = GetPlayerBuilding(playerid, true);
            if(BuildingInfo[buildingid][bType] != STORE) return HataMesajiC(playerid, "Bir 24/7'de deðilsin.");
            new telefonListesi[] = {18866, 18874, 18872, 18871, 18867, 19513, 18865, 18873, 18869, 18870, 18868};
            SunucuMesajiC(playerid, "Lütfen istediðiniz telefon kýlýfýný seçin.");
            ShowModelSelectionMenuEx(playerid, telefonListesi, sizeof(telefonListesi), "Telefon Listesi", TTELEFON, 16.0, 0.0, -55.0);
        }
    }
    return 1;
}
Dialog:DialogKonumServisi(playerid, response, listitem, inputtext[])
{
    if(!response) return 1;
    
    switch(listitem)
    {
        case 0: pc_cmd_harita(playerid, "");
        case 1:
        {
            if(PlayerInfo[playerid][pJailTime] > 1) return HataMesajiC(playerid, "Bu fonksiyondan hapiste yararlanamazsýn.");

            new slot = Inventory_HasItem(playerid, "Cep Telefonu", ITEM_PHONE);
            if(slot == -1) return HataMesaji(playerid, "Cep telefonun olmadýðý için konum gönderemiyorsun.");

            Dialog_Show(playerid, DialogKonumGonder, DIALOG_STYLE_INPUT, "Konum Gönder", "Konum göndereceðiniz kiþinin ID verisini girin:", "Gir", "Iptal");
        }
    }
    return 1;
}
Dialog:DialogKonumGonder(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        if(!isnull(inputtext))
        {
            if(IsNumeric(inputtext))
            {
                new id;
                
                id = strval(inputtext);
                
                if(!IsPlayerConnected(id) || !PlayerInfo[id][pLogged])
                    return Dialog_Show(playerid, DialogKonumGonder, DIALOG_STYLE_INPUT, "Konum Gönder", "Belirtilen ID deðerine kayýtlý çevrimiçi oyuncu bulunamadý.\nKonum göndereceðiniz kiþinin ID verisini girin:", "Gir", "Iptal");

                new slota = Inventory_HasItem(id, "Cep Telefonu", ITEM_PHONE);
                if(slota == -1) return HataMesaji(playerid, "Karþý taraf cep telefonuna sahip olmadýðý için konum gönderemiyorsun.");

                if(id == playerid)return HataMesaji(playerid, "Kendine konum gönderemezsin.");

                SunucuMesaji(playerid, "%s isimli kiþiye konum paylaþma isteði gönderdin.", ReturnRoleplayName(id));
                Dialog_Show(id, Konum_Gonder, DIALOG_STYLE_MSGBOX, "Konum isteði", "%s seninle konum bilgilerini paylaþmak istiyor.\nOnaylýyor musun?\n\n(( Bu iþlevin hatalý kullanýmý ban sebebidir. ))", "Evet", "Hayýr", ReturnRoleplayName(playerid));
                SetPVarInt(id, "konum_gonderen", playerid);
            }
            else Dialog_Show(playerid, DialogKonumGonder, DIALOG_STYLE_INPUT, "Konum Gönder", "Sayýsal veri tespit edilemedi.\nKonum göndereceðiniz kiþinin ID verisini girin:", "Gir", "Iptal");
        }
        else Dialog_Show(playerid, DialogKonumGonder, DIALOG_STYLE_INPUT, "Konum Gönder", "Boþ veri giriþi tespit edildi.\nKonum göndereceðiniz kiþinin ID verisini girin:", "Gir", "Iptal");
    }
    return 1;
}
Dialog:DialogArama(playerid, response, listitem, inputtext[])
{
    if(!response) return 1;

    new slot, contact = strval(inputtext);

    slot = PlayerInfo[playerid][pPhoneID];

    if(strval(inputtext) == RENTER_NUMBER)
    {
        if(PlayerInfo[playerid][pFrequence] != -1 && !PlayerInfo[playerid][pAdminDuty])return
            SunucuMesaji(playerid, "Zaten bir frekans satýn aldýn.");

        return Dialog_Show(playerid, DialogRentFrequence, DIALOG_STYLE_INPUT, "Frekans Satýn Al", "Satýn almak istediðiniz frekansý ve þifresini girin. Frekans 1 ile 999 arasýnda olmalý. (Kullaným: 529 uzunsifre123) [$5000]", "Ýleri", "Ýptal");
    }

    if(IsNumeric(inputtext) && strval(inputtext) > 0)
    {
        new tmpNumber = strval(inputtext);
        return Phone_CallInit(playerid, tmpNumber);
    }

    mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT number FROM phonebooks WHERE owner_number = '%d' AND name LIKE '%%%e%%'", PlayerInfo[playerid][pInvAmount][slot], contact);
    mysql_tquery(ourConnection, queryx, "OnCallNumberSearch", "d", playerid);

    return 1;
}

Dialog:DialogSMSGonder(playerid, response, listitem, inputtext[])
{
    if(!response) return 1;

    new str[32];
    format(str, 32, inputtext);
    SetPVarString(playerid, "smsnokayit", str);
    Dialog_Show(playerid, DialogSMSGonder1, DIALOG_STYLE_INPUT, "SMS", "Mesaj konusunu ve içeriðini girin:", "Gönder", "Ýptal");
    return 1;
}

Dialog:DialogSMSGonder1(playerid, response, listitem, inputtext[])
{
    if(!response) return 1;

    new smsnokayit[32], slot;
    GetPVarString(playerid, "smsnokayit", smsnokayit, 32);

    new contact[32];
    format(contact, 32, smsnokayit);
    new message[256];
    format(message, 256, inputtext);

    if(strlen(contact) > 32 || strlen(message) > 256) return 1;

    PlayerInfo[playerid][pPhoneID] = slot;

    if(IsNumeric(contact) && strval(contact) > 0)
    {
        PlayerInfo[playerid][pNumber] = strval(contact);
        return Phone_SendSMS(playerid, message);
    }

    mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT number FROM phonebooks WHERE owner_number = '%d' AND name LIKE '%%%e%%'", PlayerInfo[playerid][pInvAmount][slot], contact);
    mysql_tquery(ourConnection, queryx, "OnSendSMSNumberSearch", "ds", playerid, message);
    return 1;
}

Dialog:DialogPhoneBook(playerid, response, listitem, inputtext[])
{
    if(!response)
    {
        if(PlayerInfo[playerid][pPage] <= 1) return
            PlayerInfo[playerid][pPhoneID] = -1;

        else return
            ShowPlayerPhoneBook(playerid, PlayerInfo[playerid][pPage]-1);
    }

    if(listitem == 0)return
        ShowPlayerPhoneBook(playerid, PlayerInfo[playerid][pPage]+1);

    if(listitem == 1)return
        Dialog_Show(playerid, DialogAddContact, DIALOG_STYLE_INPUT, "Rehber", "Kullanýcýnýn numarasýný ve adýný gir. (125631 TPeter Puncho)", "Ýleri", "Ýptal");

    PlayerInfo[playerid][pContactID] = PlayerInfo[playerid][pPhonesID][listitem-2];

    Dialog_Show(playerid, DialogBookOpz, DIALOG_STYLE_LIST, "Rehber", "Ara\nSMS Gönder\nSil\nAdýný deðiþtir", "Ýleri", "Ýptal");

    return 1;
}

Dialog:DialogBookOpz(playerid, response, listitem, inputtext[])
{
    if(!response)return
        ShowPlayerPhoneBook(playerid, PlayerInfo[playerid][pPage]);

    mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT * FROM phonebooks WHERE id = '%d'", PlayerInfo[playerid][pContactID]);
    mysql_tquery(ourConnection, queryx, "OnContactOpzSearch", "dd", playerid, listitem);

    return 1;
}

Dialog:DialogRenameContact(playerid, response, listitem, inputtext[])
{
    if(!response)return
        Dialog_Show(playerid, DialogBookOpz, DIALOG_STYLE_LIST, "Rehber", "Ara\nSMS Gönder\nSil\nAdýný deðiþtir", "Ýleri", "Ýptal");

    // new query[128];

    mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT name, number FROM phonebooks WHERE id = '%d'", PlayerInfo[playerid][pContactID]);
    mysql_tquery(ourConnection, queryx, "OnContactOpzRename", "ds", playerid, inputtext);

    return 1;
}

Dialog:DialogAddContact(playerid, response, listitem, inputtext[])
{
    if(!response)return
        ShowPlayerPhoneBook(playerid, PlayerInfo[playerid][pPage]);

    new number, name[32]/*, query[256]*/, phoneid = PlayerInfo[playerid][pPhoneID];

    if(sscanf(inputtext, "ds[32]", number, name))return
        Dialog_Show(playerid, DialogAddContact, DIALOG_STYLE_INPUT, "Rehber", "Kullanýcýnýn numarasýný ve adýný gir. (132578 Peter Puncho)", "Ýleri", "Ýptal");

    mysql_format(ourConnection, queryx, sizeof(queryx), "INSERT INTO phonebooks (name, owner_number, number) VALUES ('%e', '%d', '%d')", name, PlayerInfo[playerid][pInvAmount][phoneid], number);
    mysql_tquery(ourConnection, queryx);

    SunucuMesaji(playerid, "Rehbere yeni numara ekledin. Ýsim: %s - Numara: %d.", name, number);

    return 1;
}

Dialog:DialogPhoneList(playerid, response, listitem, inputtext[])
{
    if(!response)
    {
        if(PlayerInfo[playerid][pPage] <= 1) return
            PlayerInfo[playerid][pPhoneID] = -1;

        else return
            ShowPlayerPhoneLogs(playerid, PlayerInfo[playerid][pPage] - 1, PlayerInfo[playerid][pListType]);
    }

    if(!listitem)return
        ShowPlayerPhoneLogs(playerid, PlayerInfo[playerid][pPage] + 1, PlayerInfo[playerid][pListType]);

    // new query[128];

    if(listitem == 1)
    {
        return Dialog_Show(playerid, DialogTelGecmis, DIALOG_STYLE_MSGBOX, "Telefon", (PlayerInfo[playerid][pListType] == TYPE_SMS) ? ("SMS geçmiþini temizlemek istiyor musunuz?") : ("Arama geçmiþini temizlemek istiyor musunuz?"), "EVET", "HAYIR");
    }

    PlayerInfo[playerid][pPhoneLogID] = PlayerInfo[playerid][pPhonesID][listitem - 2];

    mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT * FROM phone_logs WHERE id = '%d'", PlayerInfo[playerid][pPhoneLogID]);
    mysql_tquery(ourConnection, queryx, "OnPhonesLogSearch", "d", playerid);

    return 1;
}

Dialog:DialogTelGecmis(playerid, response, listitem, inputtext[])
{
    if(!response)return 1;
    
    new itemid = PlayerInfo[playerid][pPhoneID];
    mysql_format(ourConnection, queryx, sizeof(queryx), "UPDATE phone_logs SET deleted_at = 'NOW()' WHERE type = '%d' AND (receiver_number = '%d' OR caller_number = '%d')", PlayerInfo[playerid][pListType], PlayerInfo[playerid][pInvAmount][itemid], PlayerInfo[playerid][pInvAmount][itemid]);
    mysql_tquery(ourConnection, queryx);
    SendFormattedMessage(playerid, COLOR_LIGHTRED, (PlayerInfo[playerid][pListType] == TYPE_SMS) ? ("SMS geçmiþinizi temizlediniz.") : ("Arama geçmiþinizi temizlediniz."));

    return 1;
}

Dialog:DialogOptionSMS(playerid, response, listitem, inputtext[])
{
    if(!response)return
        ShowPlayerPhoneLogs(playerid, PlayerInfo[playerid][pPage], PlayerInfo[playerid][pListType]);

    // new query[90];

    mysql_format(ourConnection, queryx, sizeof(queryx), "UPDATE phone_logs SET deleted_at = 'NOW()' WHERE id = '%d'", PlayerInfo[playerid][pPhoneLogID]);
    mysql_tquery(ourConnection, queryx);

    SendClientMessageEx(playerid, COLOR_WHITE, "Seçtiðin mesajý sildin.");

    return 1;
}

Dialog:DialogTextSMS(playerid, response, listitem, inputtext[])
{
    if(!response)
    {
        PlayerInfo[playerid][pNumber] = 0;
        return PlayerInfo[playerid][pPhoneID] = -1;
    }

    Phone_SendSMS(playerid, inputtext);

    return 1;
}

Dialog:DialogSendSMS(playerid, response, listitem, inputtext[])
{
    if(!response)return
        PlayerInfo[playerid][pPhoneID] = -1;

    new number, phoneid = PlayerInfo[playerid][pPhoneID];

    if(!PlayerInfo[playerid][pInvExtra][phoneid])return
        SunucuMesajiC(playerid, "Telefonun kapalý.");

    if(IsNumeric(inputtext) && number)
    {
        number = strval(inputtext);

        mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT * FROM phones WHERE number = '%d'", number);
        mysql_tquery(ourConnection, queryx, "OnSendSMSContactSearch", "dd", playerid, number);
    }
    else
    {
        mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT number FROM phonebooks WHERE number = '%d' AND name = '%e'", PlayerInfo[playerid][pInvAmount][phoneid], inputtext);
        mysql_tquery(ourConnection, queryx, "OnSendSMSOwnerSearch", "dds", playerid, number, inputtext);
    }

    return 1;
}

Dialog:DialogLicense(playerid, response, listitem, inputtext[])
{
    TogglePlayerControllable(playerid, true);
    PlayerInfo[playerid][pFreezed] = 0;
    SetCameraBehindPlayer(playerid);

    if(!response)return 0;

    new itemid = PlayerInfo[playerid][Type] - 1;

    static const licensesPrice[3] = {DRIVE_PRICE, BOAT_PRICE, FLY_PRICE};

    if(PlayerInfo[playerid][pCash] < licensesPrice[itemid])return
        HataMesaji(playerid, "Yeterli paran yok. ($%d)", licensesPrice[itemid]);

    OAC_GivePlayerMoney(playerid, -licensesPrice[itemid]);

//    Faction_GovernmentCash(licensesPrice[itemid]);

    PlayerInfo[playerid][Started] = true;
    PlayerInfo[playerid][Checkpoint] = 1;
    SendClientMessage(playerid, COLOR_GREEN, "Eðitmen: {FFFFFF}Sýnavýn baþladý, kýrmýzý noktalarý takip et.");

    new cpID = PlayerInfo[playerid][Checkpoint];

    switch(PlayerInfo[playerid][Type])
    {
        case EXAM_TYPE_VEHICLES:
        {
            PlayerInfo[playerid][Vehicle] = CreateVehicle(405, VehiclesCheckpoints[0][0], VehiclesCheckpoints[0][1], VehiclesCheckpoints[0][2], 90, -1, -1, -1, 0);
            SetPlayerRaceCheckpoint(playerid, 0, VehiclesCheckpoints[cpID][0], VehiclesCheckpoints[cpID][1], VehiclesCheckpoints[cpID][2], VehiclesCheckpoints[2][0], VehiclesCheckpoints[2][1], VehiclesCheckpoints[2][2], 3.0);
        }
        case EXAM_TYPE_BOATS:
        {
            PlayerInfo[playerid][Vehicle] = CreateVehicle(472, BoatCheckpoints[0][0], BoatCheckpoints[0][1], BoatCheckpoints[0][2], 180, -1, -1, -1, 0);
            SetPlayerRaceCheckpoint(playerid, 0, BoatCheckpoints[cpID][0], BoatCheckpoints[cpID][1], BoatCheckpoints[cpID][2], BoatCheckpoints[2][0], BoatCheckpoints[2][1], BoatCheckpoints[2][2], 3.0);
        }
        case EXAM_TYPE_PLANES:
        {
            PlayerInfo[playerid][Vehicle] = CreateVehicle(593, PlaneCheckpoints[0][0], PlaneCheckpoints[0][1], PlaneCheckpoints[0][2], 90, -1, -1, -1, 0);
            SetPlayerRaceCheckpoint(playerid, 3, PlaneCheckpoints[cpID][0], PlaneCheckpoints[cpID][1], PlaneCheckpoints[cpID][2], PlaneCheckpoints[2][0], PlaneCheckpoints[2][1], PlaneCheckpoints[2][2], 3.0);
        }
        default: return 1;
    }

    new vehicleid = PlayerInfo[playerid][Vehicle];

    SetVehicleParamsCarWindows(vehicleid, VEHICLE_PARAMS_ON, VEHICLE_PARAMS_ON, VEHICLE_PARAMS_ON, VehicleInfo[vehicleid][vObje]);
    SetVehicleParamsEx(vehicleid, VEHICLE_PARAMS_ON, VEHICLE_PARAMS_OFF, VEHICLE_PARAMS_OFF, VEHICLE_PARAMS_OFF, VEHICLE_PARAMS_OFF, VEHICLE_PARAMS_OFF, VehicleInfo[vehicleid][vObje]);
    PutPlayerInVehicle(playerid, vehicleid, 0);

    VehicleInfo[vehicleid][vFuel] = 100;
    VehicleInfo[vehicleid][vEngineHealth] = 1000.0;
    VehicleInfo[vehicleid][vBatteryHealth] = 1000.0;
    VehicleInfo[vehicleid][vHealth] = 1000.0;
    VehicleInfo[vehicleid][vDoorHealth] = 120.0;
    VehicleInfo[vehicleid][vEngine] = 1;
    VehicleInfo[vehicleid][vFaction] = INVALID_VEHICLE_ID;
    VehicleInfo[vehicleid][vJob] = -1;
    VehicleInfo[vehicleid][vModel] = GetVehicleModel(vehicleid);
    VehicleInfo[vehicleid][vTemporary] = 1;
    VehicleInfo[vehicleid][vScript] = PlayerInfo[playerid][Vehicle];
    VehicleInfo[vehicleid][vOwner] = -1;
    VehicleInfo[vehicleid][vWorld] = GetPlayerVirtualWorld(playerid);
    VehicleInfo[vehicleid][vInterior] = GetPlayerInterior(playerid);

    PlayerInfo[playerid][Checkpoint]++;

    Iter_Add(Vehicles, vehicleid);
    
    new model = VehicleInfo[vehicleid][vModel];
    new Float:x, Float:y, Float:z, Float:un;

    GetVehicleModelInfo(model, VEHICLE_MODEL_INFO_WHEELSREAR, x, un, un);
    GetVehicleModelInfo(model, VEHICLE_MODEL_INFO_SIZE, un, y, un); y /= -2.0;
    GetVehicleModelInfo(model, VEHICLE_MODEL_INFO_REAR_BUMPER_Z, un, un, z);

    if(z <= -5.0 || z >= 5.0) z = 0.0;
    x += -0.2;
    y += 0.3;
    z += 0.0;

    x = -x;

    VehicleInfo[vehicleid][vSignText] = CreateDynamic3DTextLabel("Sürücü Adayý", COLOR_WHITE, x, y, z, 20.0, INVALID_PLAYER_ID, vehicleid, 1);
    VehicleInfo[vehicleid][vCallSign] = true;
    Streamer_Update(playerid);
    return 1;
}

Dialog:DialogAmountItem(playerid, response, listitem, inputtext[])
{
    if(!response)return 0;

    new buildingid = GetPlayerMenuBiz(playerid), amount = strval(inputtext);

    if(amount < 1 || amount > 500)return
        Dialog_Show(playerid, DialogAmountItem, DIALOG_STYLE_INPUT, "Sipariþ", "Talep ettiðiniz ürün sayýsýný girin:", "Ýleri", "Ýptal");

    if(BuildingInfo[buildingid][bCash] < 3 * amount)return
        HataMesaji(playerid, "Ýþletmede yeterli para yok. ($%d)", 3 * amount);
        
    BuildingInfo[buildingid][bCash] -= 3 * amount;
    BuildingInfo[buildingid][bProducts] += amount;
    SaveBuilding(buildingid);
    BasariMesaji(playerid, "$%d karþýlýðýnda %d adet ürün satýn aldýnýz.", 3 * amount, amount);
    return 1;
}

Dialog:DialogTPDA(playerid, response, listitem, inputtext[])
{
    if(!response)return 0;

    new string[1024];
    new vid = GetPlayerVehicleID(playerid);

    if(GetVehicleTrailer(vid) != 0) vid = GetVehicleTrailer(vid);

    switch(listitem)
    {
        case 0:
        {
            new xcount;
            foreach(new i : Sirketler)
            {
                new durum[50];
                switch(tsInfo[i][sd])
                {
                    case 0: durum = "{41D225}[Açýk]";
                    case 1: durum = "{FF6347}[Kapalý]";
                }
                format(string, sizeof string, "%s%s\t%s\n", string, tsInfo[i][sname], durum);

                xcount++;
            }
            if(!xcount) return HataMesajiC(playerid, "Trucker listesi sýfýrlanmýþ, developer ekibine ulaþýn.");

            Dialog_Show(playerid, DialogTST, DIALOG_STYLE_TABLIST, "Trucker Þirketleri", string, "Seç", "<<");
        }
/*        case 1:
        {
            new count;

            foreach(new j : Buildings) if(BuildingInfo[j][bExists] && BuildingInfo[j][bRequestTruck])
            {
                if(IsRequestFree(j) != -1)continue;

                new request = GetBizRequestType(j); if(request == -1)continue;
                format(string, sizeof(string), "%s%s\t{FF6347}%s{FFFFFF}\t%d kasa\n", string, BuildingInfo[j][bName], CompanyInfo[request][cName], BuildingInfo[j][bRequestTruck]);
                PlayerInfo[playerid][pTPDA][count] = j;
                count++;
            }

            if(!count)return
                SunucuMesaji(playerid, "Maðazalardan sipariþ yok.");

            Dialog_Show(playerid, DialogTakeRequest, DIALOG_STYLE_LIST, "Trucker - Maðaza sipariþleri", string, "Al", "Ýptal");
        }*/
        case 1: Dialog_Show(playerid, DialogNull, DIALOG_STYLE_MSGBOX, "Trucker - Araç bilgisi", "Bu araç(%s) %d adet kasa taþýyabilir.", "Ýptal", "", GetVehicleModelName(VehicleInfo[vid][vModel]), Commodities_GetSlot(VehicleInfo[vid][vModel]));
    }

    return 1;
}

Dialog:DialogTST(playerid, response, listitem, inputtext[])
{
    if(!response) return pc_cmd_kamyoncu(playerid, "");

    if(response)
    {
        new sirketadi[32], sirketyazi[900], sdc[12];
        SetPVarInt(playerid, "tsirketlistitem", listitem);
        switch(tsInfo[listitem][sd])
        {
            case 0: sdc = "açýk";
            case 1: sdc = "kapalý";
        }
        format(sirketadi, sizeof(sirketadi), "%s", tsInfo[listitem][sname]);
        format(sirketyazi, sizeof(sirketyazi),"{B5D363}%s {FFFFFF}adlý þirketin web sayfasýna hoþ geldiniz!\n", tsInfo[listitem][sname]);
        format(sirketyazi, sizeof(sirketyazi),"%s\n{FFFFFF}Þirket þu an {B5D363}%s {FFFFFF}durumdadýr.\n\n", sirketyazi, sdc);
        format(sirketyazi, sizeof(sirketyazi),"%s\n{B5D363}Þirketin sattýðý ürünler:{FFFFFF}", sirketyazi);
        format(sirketyazi, sizeof(sirketyazi),"%s\nHammadde\t\t\t\t\t\tStok bilgisi\t\t\t\t\t\tFiyat\n", sirketyazi);

        foreach(new ig : Companies)
        {
            if(!CompanyInfo[ig][cValid]) continue;

            if(tsInfo[listitem][sid] == CompanyInfo[ig][sirketid])
            {
                new testt[36];

                if(strlen(CompanyInfo[ig][cName]) >= 18)
                {
                    format(testt, 30, "%s\t\t\t\t\t", CompanyInfo[ig][cName]);
                }
                else if(strlen(CompanyInfo[ig][cName]) >= 12)
                {
                    format(testt, 30, "%s\t\t\t\t\t", CompanyInfo[ig][cName]);
                }
                else if(strlen(CompanyInfo[ig][cName]) >= 7)
                {
                    format(testt, 30, "%s\t\t\t\t\t\t", CompanyInfo[ig][cName]);
                }
                else format(testt, 30, "%s\t\t\t\t\t\t\t", CompanyInfo[ig][cName]);

                if(CompanyInfo[ig][satiyor] == 1)
                {
                    format(sirketyazi, sizeof(sirketyazi),"%s%s%d adet\t\t\t\t\t\t$%d\n", sirketyazi, testt, CompanyInfo[ig][stok], CompanyInfo[ig][cPrice]);
                }
            }
        }

        format(sirketyazi, sizeof(sirketyazi),"%s\n{B5D363}Þirketin satýn aldýðý ürünler:{FFFFFF}", sirketyazi);
        format(sirketyazi, sizeof(sirketyazi),"%s\nHammadde\t\t\t\t\t\tStok bilgisi\t\t\t\t\t\tFiyat\n", sirketyazi);

        foreach(new igg : Companies)
        {
            if(!CompanyInfo[igg][cValid]) continue;

            if(tsInfo[listitem][sid] == CompanyInfo[igg][sirketid])
            {
                new testtt[36];

                if(strlen(CompanyInfo[igg][cName]) >= 18)
                {
                    format(testtt, 30, "%s\t\t\t\t\t", CompanyInfo[igg][cName]);
                }
                else if(strlen(CompanyInfo[igg][cName]) >= 12)
                {
                    format(testtt, 30, "%s\t\t\t\t\t", CompanyInfo[igg][cName]);
                }
                else if(strlen(CompanyInfo[igg][cName]) >= 7)
                {
                    format(testtt, 30, "%s\t\t\t\t\t\t", CompanyInfo[igg][cName]);
                }
                else format(testtt, 30, "%s\t\t\t\t\t\t\t", CompanyInfo[igg][cName]);

                if(CompanyInfo[igg][aliyor] == 1)
                {
                    format(sirketyazi, sizeof(sirketyazi),"%s%s%d adet\t\t\t\t\t\t$%d\n", sirketyazi, testtt, CompanyInfo[igg][mstok], CompanyInfo[igg][cPrice]);
                }
            }
        }

        Dialog_Show(playerid, DialogIsaretle, DIALOG_STYLE_MSGBOX, sirketadi, sirketyazi, "Ýþaretle", "Geri");
        listitem = -1;
    }
    return 1;
}

Dialog:DialogIsaretle(playerid, response, listitem, inputtext[])
{
    if(!response)
    {
        new xcount, string[1024];
        foreach(new i : Sirketler)
        {
            new durum[50];
            switch(tsInfo[i][sd])
            {
                case 0: durum = "{41D225}[Açýk]";
                case 1: durum = "{FF6347}[Kapalý]";
            }
            format(string, sizeof string, "%s%s\t%s\n", string, tsInfo[i][sname], durum);

            xcount++;
        }
        if(!xcount) return HataMesajiC(playerid, "Trucker listesi sýfýrlanmýþ, developer ekibine ulaþýn.");

        Dialog_Show(playerid, DialogTST, DIALOG_STYLE_TABLIST, "Trucker Þirketleri", string, "Seç", "<<");
    }
    if(response)
    {
        new gg = GetPVarInt(playerid, "tsirketlistitem");
        AC_SetPlayerCheckpoint(playerid, tsInfo[gg][sX], tsInfo[gg][sY], tsInfo[gg][sZ], 2.0);
        DeletePVar(playerid, "tsirketlistitem");
    }
    return 1;
}

/*Dialog:DialogTakeRequest(playerid, response, listitem, inputtext[])
{
    if(!response)return
        Dialog_Show(playerid, DialogTPDA, DIALOG_STYLE_LIST, "Trucker", "Þirketleri göster\nAraç bilgilerini göster", "Ýleri", "Ýptal");

    if(IsRequestFree(PlayerInfo[playerid][pTPDA][listitem]) != -1)return
        SunucuMesaji(playerid, "Seçtiðiniz talep baþka bir kamyoncu tarafýndan alýndý.");

    new tmpID = PlayerInfo[playerid][pTPDA][listitem];

    AC_SetPlayerCheckpoint(playerid, BuildingInfo[tmpID][bPosX], BuildingInfo[tmpID][bPosY], BuildingInfo[tmpID][bPosZ], 2.0);

    PlayerInfo[playerid][pSelectedRequest] = tmpID;

    SendFormattedMessage(playerid, COLOR_LIGHTBLUE, "%s iþletmesinin sipariþini kabul ettin. Sipariþ edilen mallarý yüklemek için kýrmýzý noktaya git.", BuildingInfo[tmpID][bName]);

    return 1;
}*/

Dialog:DialogContinueTruck(playerid, response, listitem, inputtext[])
{
    if(!response)
    {
        PlayerInfo[playerid][pSelectedRequest] = -1;
        return AC_DisablePlayerCheckpoint(playerid);
    }

    SunucuMesaji(playerid, "Yükle devam etmeye karar verdin.");
    PlayerInfo[playerid][pContinueTrucking] = true;
    pc_cmd_kamyoncu(playerid, NULL);

    return 1;
}

Dialog:DialogRadioLinks(playerid, response, listitem, inputtext[])
{
    if(!response)return 0;

    if(!listitem)
    {
        return Dialog_Show(playerid, DialogRadioInsertLink, DIALOG_STYLE_INPUT, "URL girme alaný", "Ýstediðiniz þarkýnýn URL'sini buraya girin.", "Sonraki", "Geri");
    }

    // new query[128];
    new id = PlayerInfo[playerid][pRadiosID][listitem - 1];

    mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT link FROM radio_links WHERE id = '%d'", id);
    mysql_tquery(ourConnection, queryx, "OnRadioLinkSearch", "d", playerid);

    return 1;
}

Dialog:DialogRadioInsertLink(playerid, response, listitem, inputtext[])
{
    if(!response || isnull(inputtext) || strlen(inputtext) < 6)return 0;

    new tmpLink[128];
    format(tmpLink, sizeof(tmpLink), inputtext);

    return Item_StartMusic(playerid, tmpLink);
}

Dialog:DialogRentFrequence(playerid, response, listitem, inputtext[])
{
    if(!response)return
        Phone_HangupCall(playerid);

    new channel, password[32];

    if(sscanf(inputtext, "dS[32]", channel, password) || strlen(password) > 32)return
        Dialog_Show(playerid, DialogRentFrequence, DIALOG_STYLE_INPUT, "Frekans Satýn Alma", "Satýn almak istediðiniz frekansý ve þifresini girin. Frekans 1 ile 999 arasýnda olmalý. (Kullaným: 529 uzunsifre123) [$5000]", "Ýleri", "Ýptal");

    if(channel < 1 || channel >= MAX_FREQUENCES || FrequenceInfo[channel][rExists])return
        Dialog_Show(playerid, DialogRentFrequence, DIALOG_STYLE_INPUT, "Frekans Satýn Alma", "Frekans zaten satýn alýnmýþ.\nSatýn almak istediðiniz frekansý ve þifresini girin. Frekans 1 ile 999 arasýnda olmalý. (Kullaným: 529 uzunsifre123) [$5000]", "Ýleri", "Ýptal");

    if(PlayerInfo[playerid][pCash] < 5000) return
        SunucuMesaji(playerid, "Yeterli paran yok. ($5000)");

    SunucuMesaji(playerid, "%d frekansýný satýn aldýn. (Þifre: %s)", channel, password);

    FrequenceInfo[channel][rFaction] = -1;
    FrequenceInfo[channel][rOwner] = PlayerInfo[playerid][pID];
    format(FrequenceInfo[channel][rPassword], 32, password);
    FrequenceInfo[channel][rExists] = 1;
//    FrequenceInfo[channel][rHour] = ReturnHour();

    PlayerInfo[playerid][pFrequence] = channel;

    AC_GivePlayerMoney(playerid, -5000, "/ara 800129");

    mysql_format(ourConnection, queryx, sizeof(queryx), "INSERT INTO frequencies (faction_id, password, channel, owner_id) VALUES ('%d', '%e', '%d', '%d')", FrequenceInfo[channel][rFaction], password, channel, FrequenceInfo[channel][rOwner]);//, FrequenceInfo[channel][rHour]);
    mysql_tquery(ourConnection, queryx);

    Phone_HangupCall(playerid);

    return 1;
}

Dialog:DialogTakeGun(playerid, response, listitem, inputtext[])
{
    if(!response)return
        PlayerInfo[playerid][pRevokeItem] = -1;

    new id = PlayerInfo[playerid][pRevokeItem];

    if(!ProxDetectorS(5.0, playerid, id))return
        SunucuMesajiC(playerid, "Oyuncuya yakýn deðilsin.");

    new slot = PlayerInfo[playerid][pListsID][listitem];
    new weaponid, ammo;

    GetPlayerWeaponData(id, slot, weaponid, ammo);

    BasariMesaji(id, "%s sizin %s (%d) ürününüze el koydu.", ReturnRoleplayName(playerid), GetWeaponNameEx(weaponid), ammo);
    SunucuMesaji(playerid, "%s kiþisinin %s(%d) adlý ürününe el koydun.", ReturnRoleplayName(id), GetWeaponNameEx(weaponid), ammo);

    AC_RemovePlayerWeapon(id, weaponid);
//    Inventory_ShowItems(id, playerid, true);

    return 1;
}

Dialog:DialogRevokeStorage(playerid, response, listitem, inputtext[])
{
    if(!response)return
        PlayerInfo[playerid][pRevokeItem] = -1;

    new houseid = PlayerInfo[playerid][pRevokeItem];
    new listid = HouseInfo[houseid][hInvList][listitem];

    if(GetPlayerHouse(playerid, true) != houseid)return
        SunucuMesajiC(playerid, "Evin içerisinde deðilsin.");

    if(!listid)return
        HataMesajiC(playerid, "Boþ slot.");

    SunucuMesaji(playerid, "%d ID'li evden '%s' aldýn.", houseid, Inventory_ReturnString(houseid, ENTITY_TYPE_HOUSE, listitem));

    HouseInfo[houseid][hInvAmount][listitem] = 0;
    HouseInfo[houseid][hInvList][listitem] = 0;
    HouseInfo[houseid][hInvExtra][listitem] = 0;

    Storage_ShowItems(playerid, houseid);

    SaveHouse(houseid);

    return 1;
}

Dialog:DialogRevokeTrunk(playerid, response, listitem, inputtext[])
{
    if(!response)return
        PlayerInfo[playerid][pRevokeItem] = -1;

    new vehicleid = PlayerInfo[playerid][pRevokeItem];

    if(!IsPlayerNearestVehicle(playerid, vehicleid))return
        HataMesajiC(playerid, "Bir araca yakýn deðilsiniz.");

    new listid = VehicleInfo[vehicleid][vInvList][listitem];

    if(!listid)return
        HataMesajiC(playerid, "Boþ slot.");

    VehicleInfo[vehicleid][vInvAmount][listitem] = 0;
    VehicleInfo[vehicleid][vInvList][listitem] = 0;
    VehicleInfo[vehicleid][vInvExtra][listitem] = 0;

    Trunk_ShowItems(playerid, vehicleid, 1);

    SaveVehicle(vehicleid);

    return 1;
}

Dialog:DialogRevokeItem(playerid, response, listitem, inputtext[])
{
    if(!response)return
        PlayerInfo[playerid][pRevokeItem] = -1;

    new id = PlayerInfo[playerid][pRevokeItem];

    if(!ProxDetectorS(5.0, playerid, id))return
        SunucuMesajiC(playerid, "Oyuncuya yakýn deðilsin.");

    if(!PlayerInfo[id][pInvList][listitem])return
        HataMesajiC(playerid, "Boþ slot.");

    BasariMesaji(id, "%s '%s' eþyanýza el koydu.", ReturnRoleplayName(playerid), Inventory_ReturnString(id, ENTITY_TYPE_PLAYER, listitem));
    SunucuMesaji(playerid, "%s kiþisinin '%s' eþyasýný aldýn.", ReturnRoleplayName(id), Inventory_ReturnString(id, ENTITY_TYPE_PLAYER, listitem));

    Inventory_DecraseAmount(id, listitem, PlayerInfo[id][pInvAmount][listitem]);
    Inventory_ShowItems(id, playerid, false);

    return 1;
}

Dialog:DialogFine(playerid, response, listitem, inputtext[])
{
    if(!response)return 0;

    // new query[128];

    PlayerInfo[playerid][pFineID] = PlayerInfo[playerid][pFines][listitem];

    mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT * FROM police_fine_records WHERE id = '%d'", PlayerInfo[playerid][pFines][listitem]);
    mysql_tquery(ourConnection, queryx, "OnFinesSearch", "d", playerid);

    return 1;
}

Dialog:DialogFineDetails(playerid, response, listitem, inputtext[])
{
    if(!response) {
        PlayerInfo[playerid][pFineID] = -1;
        DeletePVar(playerid, "AracCeza");
        return 1;
    }

    // new query[128];

    mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT * FROM police_fine_records WHERE id = '%d'", PlayerInfo[playerid][pFineID]);
    mysql_tquery(ourConnection, queryx, "OnFineDetailsSearch", "d", playerid);

    return 1;
}

Dialog:DialogBuyIngredients(playerid, response, listitem, inputtext[])
{
    if(!response) return
        PlayerInfo[playerid][pFactionMOD] = -1;

    PlayerInfo[playerid][pIngredientID] = PlayerInfo[playerid][pIngredientsID][listitem];

    new itemid = PlayerInfo[playerid][pIngredientID];

    Dialog_Show(playerid, DialogBuyIngredientsQ, DIALOG_STYLE_INPUT, InventoryObjects[itemid][invName], "Satýn almak istediðin %s miktarýný gir:", "Satýn Al", "Ýptal", InventoryObjects[itemid][invName]);

    return 1;
}

Dialog:DialogBuyIngredientsQ(playerid, response, listitem, inputtext[])
{
    if(!response || PlayerInfo[playerid][pIndustryMOD] == -1 || PlayerInfo[playerid][pIngredientID] == -1)
    {
        PlayerInfo[playerid][pIndustryMOD] = -1;
        return PlayerInfo[playerid][pIngredientID] = -1;
    }

    new industryid = PlayerInfo[playerid][pIndustryMOD];
    new itemid = PlayerInfo[playerid][pIngredientID];
    new slot = IllegalIndustries_HasIngredient(industryid, itemid);
    new amount = strval(inputtext);

    if(amount < 1 || amount > IllegalIndustryInfo[industryid][iAmounts][slot]) return
        Dialog_Show(playerid, DialogBuyIngredientsQ, DIALOG_STYLE_INPUT, InventoryObjects[itemid][invName], "Geçersiz deðer. (1 - %d)\n\nSatýn almak istediðin %s miktarýný gir.", "Satýn Al", "Ýptal", IllegalIndustryInfo[industryid][iAmounts][slot], InventoryObjects[itemid][invName]);

    new price = IllegalIndustryInfo[industryid][iPrices][slot] * amount;

    if(PlayerInfo[playerid][pCash] < price) return
        HataMesaji(playerid, "Yeterli paran yok. ($%d)", price);

    new id = Crate_FreeID();

    CrateInfo[id][crExists] = 1;
    CrateInfo[id][crType] = ILLEGAL_BOX;
    CrateInfo[id][crInterior] = GetPlayerInterior(playerid);
    CrateInfo[id][crWorld] = GetPlayerVirtualWorld(playerid);
    CrateInfo[id][crVehicleID] = -1;
    CrateInfo[id][crPlayer] = -1;

    CrateInfo[id][crItems][0] = itemid;
    CrateInfo[id][crAmounts][0] = amount;
    CrateInfo[id][crQuality][0] = 0;
    CrateInfo[id][crItemsCount]++;

    ApplyAnimation(playerid, "CARRY", "liftup", 4.1, 0, 0, 0, 0, 0, 1);
    PlayerInfo[playerid][pCarryCrate] = id;
    SetPlayerAttachedObject(playerid, 9, BOX_OBJECT, 1, -0.067019, 0.413313, -0.040999, 0.000000, 88.000000, 180.000000, 0.500000, 0.500000, 0.500000);
    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);

    Iter_Add(Crates, id);

    SunucuMesaji(playerid, "%s (%d) satýn aldýn. /koli komutunu kullanarak yönetebilirsin.", InventoryObjects[itemid][invName], amount);

    IllegalIndustryInfo[industryid][iAmounts][slot] -= amount;
    SaveIllegalIndustry(industryid);

    OAC_GivePlayerMoney(playerid, -price);

    PlayerInfo[playerid][pIndustryMOD] = -1;
    PlayerInfo[playerid][pIngredientID] = -1;

    return 1;
}

Dialog:DialogCimiciType(playerid, response, listitem, inputtext[])
{
    if(!response)return 0;

    switch(listitem)
    {
        case 0: Cimice_ShowMy(playerid);
        case 1: Cimice_ShowPublic(playerid);
    }

    return 1;
}

Dialog:DialogCimice(playerid, response, listitem, inputtext[])
{
    if(!response) return
        Dialog_Show(playerid, DialogCimiciType, DIALOG_STYLE_LIST, "LSPD - Böcek Sistemi", "Benim eklediðim böcekler\nDiðer böcekler", "Seç", "Geri");

    PlayerInfo[playerid][pCimiceSelected] = PlayerInfo[playerid][pCimicesID][listitem];

    new cimiceID = PlayerInfo[playerid][pCimiceSelected];
    SunucuMesaji(playerid, "bocek #%d", CimiceInfo[cimiceID][cID]);

    return 1;
}

Dialog:DialogTaxesList(playerid, response, listitem, inputtext[])
{
    if(!response)return 0;

    switch(listitem)
    {
        case 0: Dialog_Show(playerid, DialogEditTollTax, DIALOG_STYLE_INPUT,  "Giþe Fiyatlarý", "Yeni giþe fiyatýný girin", "Düzenle", "Ýptal");
        case 1: Dialog_Show(playerid, DialogEditHealTax, DIALOG_STYLE_INPUT,  "Tedavi Ücreti", "Tedavi ücretini girin", "Düzenle", "Ýptal");
        case 2: Dialog_Show(playerid, DialogEditTruckerTax, DIALOG_STYLE_INPUT,  "Kamyoncu Kazancý", "Kamyoncularýn ödenecek miktarda parasýný girin.", "Düzenle", "Ýptal");
        case 3: Dialog_Show(playerid, DialogEditPaydayTax, DIALOG_STYLE_INPUT,  "Payday", "Yeni payday ücretini girin.", "Düzenle", "Ýptal");
        case 4: Dialog_Show(playerid, DialogEditESSY, DIALOG_STYLE_INPUT, "Ev Sisteme Satýþ", "Ev sisteme satýþ kazanç yüzdesini girin:", "Düzenle", "Ýptal");
        case 5: Dialog_Show(playerid, DialogEditISSY, DIALOG_STYLE_INPUT, "Ýþletme Sisteme Satýþ", "Ýþletme sisteme satýþ kazanç yüzdesini girin:", "Düzenle", "Ýptal");
        case 6: Dialog_Show(playerid, DialogEditASSY, DIALOG_STYLE_INPUT, "Araç Sisteme Satýþ", "Araç sisteme satýþ kazanç yüzdesini girin:", "Düzenle", "Ýptal");
        case 7: Dialog_Show(playerid, DialogEditNPPayday, DIALOG_STYLE_INPUT, "SA-Point Payday", "SA-Point kazanma paydayini girin:", "Düzenle", "Ýptal");
        case 8: Dialog_Show(playerid, DialogEditMobilyaS, DIALOG_STYLE_INPUT, "SA-RP - Ekonomi", "Oyuncularýn sistemden ne kadara dekor satýn alacaðýný girin:", "Düzenle", "Ýptal");
        case 9: Dialog_Show(playerid, DialogEditMobilyaA, DIALOG_STYLE_INPUT, "SA-RP - Ekonomi", "Oyuncularýn sisteme dekor satarak ne kadar kazanacaklarýný girin:", "Düzenle", "Ýptal");
        case 10: Dialog_Show(playerid, DialogEditCasinoT, DIALOG_STYLE_INPUT, "SA-RP - Ekonomi", "Casino çevirerek giden parayý girin:", "Düzenle", "Ýptal");

    }
    return 1;
}

Dialog:DialogEditCasinoT(playerid, response, listitem, inputtext[])
{
    if(!response)return
        Taxex_ShowMenu(playerid);

    new value = strval(inputtext);

    if(value < 0)return HataMesajiC(playerid, "Hatalý deðer giriþi tespit edildi.");

    SendAworkAlert(false, COLOR_ADMIN, "AdmCmd: %s, kumar oynama tutarýný %d yerine %d yaptý.", ReturnRoleplayName(playerid), SunucuBilgi[CasinoCevir], value);

    SunucuBilgi[CasinoCevir] = value;

    Taxes_Update();

    return 1;
}

Dialog:DialogEditMobilyaA(playerid, response, listitem, inputtext[])
{
    if(!response)return
        Taxex_ShowMenu(playerid);

    new value = strval(inputtext);

    if(value < 0)return HataMesajiC(playerid, "Hatalý deðer giriþi tespit edildi.");

    SendAworkAlert(false, COLOR_ADMIN, "AdmCmd: %s, mobilya sisteme satma tutarýný %d yerine %d yaptý.", ReturnRoleplayName(playerid), SunucuBilgi[MobilyaSatma], value);

    SunucuBilgi[MobilyaSatma] = value;

    Taxes_Update();

    return 1;
}

Dialog:DialogEditMobilyaS(playerid, response, listitem, inputtext[])
{
    if(!response)return
        Taxex_ShowMenu(playerid);

    new value = strval(inputtext);

    if(value < 0)return HataMesajiC(playerid, "Hatalý deðer giriþi tespit edildi.");

    SendAworkAlert(false, COLOR_ADMIN, "AdmCmd: %s, mobilya satýn alma tutarýný %d yerine %d yaptý.", ReturnRoleplayName(playerid), SunucuBilgi[MobilyaSatinAlma], value);

    SunucuBilgi[MobilyaSatinAlma] = value;

    Taxes_Update();

    return 1;
}


Dialog:DialogEditESSY(playerid, response, listitem, inputtext[])
{
    if(!response)return
        Taxex_ShowMenu(playerid);

    new value = strval(inputtext);

    if(value < 0)return HataMesajiC(playerid, "Hatalý deðer giriþi tespit edildi.");

    SendAworkAlert(false, COLOR_ADMIN, "AdmCmd: %s, ev sisteme satýþ yüzdesini %d yerine %d yaptý.", ReturnRoleplayName(playerid), SunucuBilgi[ESSY], value);

    SunucuBilgi[ESSY] = value;

    Taxes_Update();

    return 1;
}

Dialog:DialogEditISSY(playerid, response, listitem, inputtext[])
{
    if(!response)return
        Taxex_ShowMenu(playerid);

    new value = strval(inputtext);

    if(value < 0)return HataMesajiC(playerid, "Hatalý deðer giriþi tespit edildi.");

    SendAworkAlert(false, COLOR_ADMIN, "AdmCmd: %s, iþletme sisteme satýþ yüzdesini %d yerine %d yaptý.", ReturnRoleplayName(playerid), SunucuBilgi[ISSY], value);

    SunucuBilgi[ISSY] = value;

    Taxes_Update();

    return 1;
}

Dialog:DialogEditASSY(playerid, response, listitem, inputtext[])
{
    if(!response)return
        Taxex_ShowMenu(playerid);

    new value = strval(inputtext);

    if(value < 0)return HataMesajiC(playerid, "Hatalý deðer giriþi tespit edildi.");

    SendAworkAlert(false, COLOR_ADMIN, "AdmCmd: %s, araç sisteme satýþ yüzdesini %d yerine %d yaptý.", ReturnRoleplayName(playerid), SunucuBilgi[ASSY], value);

    SunucuBilgi[ASSY] = value;

    Taxes_Update();

    return 1;
}

Dialog:DialogEditNPPayday(playerid, response, listitem, inputtext[])
{
    if(!response)return
        Taxex_ShowMenu(playerid);

    new value = strval(inputtext);

    if(value < 0)return HataMesajiC(playerid, "Hatalý deðer giriþi tespit edildi.");

    SendAworkAlert(false, COLOR_ADMIN, "AdmCmd: %s, SA-Point kazanma payday deðerini %d yerine %d yaptý.", ReturnRoleplayName(playerid), SunucuBilgi[NPPayday], value);

    SunucuBilgi[NPPayday] = value;

    Taxes_Update();

    return 1;
}

Dialog:DialogEditPaydayTax(playerid, response, listitem, inputtext[])
{
    if(!response)return
        Taxex_ShowMenu(playerid);

    new value = strval(inputtext);

    if(value < 0)return
        Dialog_Show(playerid, DialogEditTruckerTax, DIALOG_STYLE_INPUT,  "Hatalý payday ücreti", "Geçersiz miktar.\n\nNormal bir ücret girin.", "Düzenle", "Ýptal");

    SendAworkAlert(false, COLOR_ADMIN, "AdmCmd: %s, payday ücretini $%d yerine $%d yaptý.", ReturnRoleplayName(playerid), SunucuBilgi[Payday], value);

    SunucuBilgi[Payday] = value;

    Taxes_Update();

    return 1;
}

Dialog:DialogEditTruckerTax(playerid, response, listitem, inputtext[])
{
    if(!response)return
        Taxex_ShowMenu(playerid);

    new value = strval(inputtext);

    if(value < 0)return
        Dialog_Show(playerid, DialogEditTruckerTax, DIALOG_STYLE_INPUT,  "HATA", "Geçersiz miktar.\n\nNormal bir ücret girin.", "Düzenle", "Ýptal");

    SendAworkAlert(false, COLOR_ADMIN, "AdmCmd: %s, kamyon þöförlerine ödenecek para miktarýný $%d yerine $%d yaptý.", ReturnRoleplayName(playerid), SunucuBilgi[TruckerTax], value);

    SunucuBilgi[TruckerTax] = value;

    Taxes_Update();

    return 1;
}

Dialog:DialogEditTollTax(playerid, response, listitem, inputtext[])
{
    if(!response)return
        Taxex_ShowMenu(playerid);

    new value = strval(inputtext);

    if(value < 0)return
        Dialog_Show(playerid, DialogEditTollTax, DIALOG_STYLE_INPUT,  "Giþe Fiyatlarý", "Geçersiz deðer.", "Düzenle", "Ýptal");

    SendAworkAlert(false, COLOR_ADMIN, "AdmCmd: %s, $%d olan giþe fiyatýný $%d olarak deðiþtirdi.", ReturnRoleplayName(playerid), SunucuBilgi[TollTax], value);

    SunucuBilgi[TollTax] = value;
    new mesaj[150];
    format(mesaj, sizeof(mesaj), "/gise ($%d)", SunucuBilgi[TollTax]);
    for(new i; i < MAX_GATES; i++) if(GateBilgi[i][GateGise] == 1)
    {
        if(IsValidDynamic3DTextLabel(GateBilgi[i][GiseLabel]))
        {
            UpdateDynamic3DTextLabelText(GateBilgi[i][GiseLabel], COLOR_WHITE, mesaj);
        }
    }

    Taxes_Update();

    return 1;
}

Dialog:DialogEditHealTax(playerid, response, listitem, inputtext[])
{
    if(!response)return
        Taxex_ShowMenu(playerid);

    new value = strval(inputtext);

    if(value < 0)return
        Dialog_Show(playerid, DialogEditHealTax, DIALOG_STYLE_INPUT, "Tedavi Ücreti", "Geçersiz deðer.\n\nTedavi ücretini girin", "Düzenle", "Ýptal");

    SendAworkAlert(false, COLOR_ADMIN, "AdmCmd: %s, adlý yönetici $%d olan tedavi ücretini $%d olarak deðiþtirdi.", ReturnRoleplayName(playerid), SunucuBilgi[HealTax], value);

    SunucuBilgi[HealTax] = value;

    Taxes_Update();

    return 1;
}

Dialog:DialogShowAPBs(playerid, response, listitem, inputtext[])
{
    if(!response)
    {
        PlayerInfo[playerid][pAPBP] = 0;
        if(PlayerInfo[playerid][pAPBP] <= 0 && PlayerInfo[playerid][pUsingMDC]) pc_cmd_mdc(playerid, NULL);
        return 1;
    }

    if(response)
    {
        if(!listitem)
        {
            PlayerInfo[playerid][pAPBP] += 1;
            mysql_tquery(ourConnection, "SELECT * FROM wanteds ORDER BY id DESC", "OnAPBListSearch", "dd", playerid, PlayerInfo[playerid][pAPBP]);
            return 1;
        }

        new id = PlayerInfo[playerid][pListsID][listitem - 1];

        mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT * FROM wanteds WHERE id = '%d'", id);
        mysql_tquery(ourConnection, queryx, "OnShowAPBSearch", "dd", playerid, id);
    }
    return 1;
}

Dialog:DialogEditAPB(playerid, response, listitem, inputtext[])
{
    if(!response)
    {
        if(PlayerInfo[playerid][pUsingMDC]) pc_cmd_mdc(playerid, NULL);
        return PlayerInfo[playerid][pMdcID] = -1;
    }

    Dialog_Show(playerid, DialogOptionsAPB, DIALOG_STYLE_LIST, "Aranma Listesi", "Sil\nKonu\nSuç Ekle\nKonum Güncelle\nSuç Sil\nÞüpheli Adý", "Ýleri", "Ýptal");

    return 1;
}

Dialog:DialogOptionsAPB(playerid, response, listitem, inputtext[])
{
    if(!response)return
        PlayerInfo[playerid][pMdcID] = -1;

    new APB = PlayerInfo[playerid][pMdcID];

    switch(listitem)
    {
        case 0:
        {
            // new query[90];

            mysql_format(ourConnection, queryx, sizeof(queryx), "DELETE FROM wanteds WHERE id = '%d'", APB);
            mysql_tquery(ourConnection, queryx);

            mysql_format(ourConnection, queryx, sizeof(queryx), "DELETE FROM police_crime_records WHERE wanted_id = '%d'", APB);
            mysql_tquery(ourConnection, queryx);

            SendFactionMessage(PlayerInfo[playerid][pFaction], "** HQ: %s #%d numaralý APB'yi sildi.", ReturnRoleplayName(playerid), APB);
        }
        case 1: Dialog_Show(playerid, DialogAPBSubject, DIALOG_STYLE_INPUT, "Konu", "#%d APB'sinin konusunda yapýlacak deðiþiklikleri girin:", "Ýleri", "Ýptal", APB);
        case 2: Dialog_Show(playerid, DialogAPBCrimes, DIALOG_STYLE_INPUT, "Suç Ekle", "#%d APB'sinin suçlarýnda yapýlacak deðiþiklikleri girin.", "Eklemeye Devam Et", "Eklemeyi Bitir", APB);
        case 3: Dialog_Show(playerid, DialogAPBLocation, DIALOG_STYLE_INPUT, "Konum Güncelle", "#%d APB'sinin konumunda yapýlacak deðiþiklikleri girin.", "Düzenle", "Ýptal", APB);
        case 4: {
            mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT * FROM police_crime_records WHERE wanted_id = '%d' ORDER BY id ASC", APB);
            new Cache:veri = mysql_query(ourConnection, queryx, true);
            new crimeString[2048], rows, tmpCrime[200];
            cache_get_row_count(rows);
            if(!rows) return HataMesajiC(playerid, "Seçtiðiniz APB için bir suç girilmemiþ.");
            for(new j; j < rows; j++) {
                cache_get_value(j, "crime", tmpCrime, 200);
                format(crimeString, sizeof crimeString, "%s\n%s", crimeString, tmpCrime);
            }
            cache_delete(veri);
            Dialog_Show(playerid, DialogSucSil, DIALOG_STYLE_LIST, "Suç Silme", crimeString, "Sil", "<< Geri");
        }
        case 5: Dialog_Show(playerid, DialogAPBSuclu, DIALOG_STYLE_INPUT, "Þüpheli Adý", "#%d APB dosyasýna ait þüpheli adýný düzenleyin. (Format: Ad_Soyad)", "Düzenle", "Ýptal", APB);
    }

    return 1;
}

Dialog:DialogAPBSuclu(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        if(strlen(inputtext) > 24 || strlen(inputtext) < 3 || isnull(inputtext))
            return HataMesaji(playerid, "Þüpheli adý hatalý.");
            
        if(IsNumeric(inputtext))
            return HataMesaji(playerid, "Þüpheli adýnda rakam olamaz.");
    
        mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT * FROM characters WHERE char_name = '%e'", inputtext);
        mysql_tquery(ourConnection, queryx, "APBSuclu", "is", playerid, inputtext);
    }
    return 1;
}

Dialog:DialogSucSil(playerid, response, listitem, inputtext[]) {
    if(response) {
        new APB = PlayerInfo[playerid][pMdcID];
        mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT * FROM police_crime_records WHERE wanted_id = '%d' ORDER BY id ASC", APB);
        new Cache:veri = mysql_query(ourConnection, queryx, true);
        new deleteInfo;
        cache_get_value_int(listitem, "id", deleteInfo);
        cache_delete(veri);
        mysql_format(ourConnection, queryx, sizeof(queryx), "DELETE FROM police_crime_records WHERE id = '%d'", deleteInfo);
        mysql_tquery(ourConnection, queryx);
        SendFactionMessage(PlayerInfo[playerid][pFaction], "** HQ: %s #%d ID'li APB'nin suçlarýný güncelledi.", ReturnRoleplayName(playerid), APB);
    }
    else return Dialog_Show(playerid, DialogOptionsAPB, DIALOG_STYLE_LIST, "Aranma Listesi", "Sil\nKonu\nSuç Ekle\nKonum Güncelle\nSuç Sil", "Ýleri", "Ýptal");
    return 1;
}

Dialog:DialogAPBLocation(playerid, response, listitem, inputtext[])
{
    if(!response)return
        Dialog_Show(playerid, DialogOptionsAPB, DIALOG_STYLE_LIST, "Aranma Listesi", "Sil\nKonu\nSuç Ekle\nKonum Güncelle\nSuç Sil", "Ýleri", "Ýptal");

    new APB = PlayerInfo[playerid][pMdcID];

    if(isnull(inputtext) || strlen(inputtext) > 28)return
        Dialog_Show(playerid, DialogAPBocation, DIALOG_STYLE_INPUT, "Konum Güncelle", "#%d APB'sinin konumunda yapýlacak deðiþiklikleri girin.", "Düzenle", "Ýptal", APB);

    // new query[250];

    mysql_format(ourConnection, queryx, sizeof(queryx), "UPDATE wanteds SET location = '%e',edited_by = '%e', edited_at = NOW() WHERE id = '%d'", inputtext, ReturnRoleplayName(playerid), APB);
    mysql_tquery(ourConnection, queryx);

    SendFactionMessage(PlayerInfo[playerid][pFaction], "** HQ: %s #%d ID'li APB'nin son görüldüðü konumunu güncelledi.", ReturnRoleplayName(playerid), APB);

    Dialog_Show(playerid, DialogOptionsAPB, DIALOG_STYLE_LIST, "Aranma Listesi", "Sil\nKonu\nSuç Ekle\nKonum Güncelle\nSuç Sil", "Ýleri", "Ýptal");

    return 1;
}

Dialog:DialogAPBSubject(playerid, response, listitem, inputtext[])
{
    if(!response)return
        Dialog_Show(playerid, DialogOptionsAPB, DIALOG_STYLE_LIST, "Aranma Listesi", "Sil\nKonu\nSuç Ekle\nKonum Güncelle\nSuç Sil", "Ýleri", "Ýptal");

    new APB = PlayerInfo[playerid][pMdcID];

    if(isnull(inputtext) || strlen(inputtext) > 128)return
        Dialog_Show(playerid, DialogAPBSubject, DIALOG_STYLE_INPUT, "Konu", "#%d APB'sinin konusunda yapýlacak deðiþiklikleri girin(Maksimum 128 karakter):", "Ýleri", "Ýptal", APB);

    // new query[250];

    mysql_format(ourConnection, queryx, sizeof(queryx), "UPDATE wanteds SET target = '%e',edited_by = '%e', edited_at = NOW() WHERE id = '%d'", inputtext, ReturnRoleplayName(playerid), APB);
    mysql_tquery(ourConnection, queryx);

    SendFactionMessage(PlayerInfo[playerid][pFaction], "** HQ: %s, #%d ID'li APB'nin konusunu güncelledi.", ReturnRoleplayName(playerid), APB);

    Dialog_Show(playerid, DialogOptionsAPB, DIALOG_STYLE_LIST, "Aranma Listesi", "Sil\nKonu\nSuç Ekle\nKonum Güncelle\nSuç Sil", "Ýleri", "Ýptal");

    return 1;
}

Dialog:DialogAPBCreate(playerid, response, listitem, inputtext[])
{
    if(!response)return MDC_Goster(playerid);

    new tmpSubject[128];

    if(sscanf(inputtext, "s[128]", tmpSubject) || strlen(tmpSubject) > 128)return
        Dialog_Show(playerid, DialogAPBCreate, DIALOG_STYLE_INPUT, "APB Oluþtur", "Oluþturulacak APB'nin konusunu girin(Maksimum 128 karakter):", "Ýleri", "<< Geri");

    mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT * FROM wanteds WHERE target = '%e'", tmpSubject);
    mysql_tquery(ourConnection, queryx, "OnAPBCreateSearch", "ds", playerid, tmpSubject);

    return 1;
}

Dialog:DialogAPBCrimes(playerid, response, listitem, inputtext[])
{
    // new query[300];

    new APB = PlayerInfo[playerid][pMdcID];

    if(!isnull(inputtext) && strlen(inputtext) <= 200)
    {
        mysql_format(ourConnection, queryx, sizeof(queryx), "INSERT INTO police_crime_records (crime, wanted_id) VALUES ('%e', '%d')", inputtext, APB);
        mysql_tquery(ourConnection, queryx);
        mysql_format(ourConnection, queryx, sizeof(queryx), "UPDATE wanteds SET edited_at = NOW() WHERE id = '%d'", APB);
        mysql_tquery(ourConnection, queryx);
    }

    if(!response)
    {
        SendFactionMessage(PlayerInfo[playerid][pFaction], "** HQ: %s #%d ID'li APB'nin suçlarýný güncelledi.", ReturnRoleplayName(playerid), APB);
        return Dialog_Show(playerid, DialogOptionsAPB, DIALOG_STYLE_LIST, "Aranma Listesi", "Sil\nKonu\nSuç Ekle\nKonum Güncelle\nSuç Sil", "Ýleri", "Ýptal");
    }

    Dialog_Show(playerid, DialogAPBCrimes, DIALOG_STYLE_INPUT, "Suç Ekle", "#%d APB'sinin suçlarýnda yapýlacak deðiþiklikleri girin.", "Devam", "Bitir", APB);

    return 1;
}

Dialog:DialogShowCRs(playerid, response, listitem, inputtext[])
{
    if(!response)return 0;

    new id = PlayerInfo[playerid][pListsID][listitem];

    mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT * FROM police_arrest_records WHERE id = '%d'", id);
    mysql_tquery(ourConnection, queryx, "OnShowCRSearch", "dd", playerid, id);

    return 1;
}

Dialog:DialogAddReport(playerid, response, listitem, inputtext[])
{
    if(isnull(inputtext) && !response)return
        Dialog_Show(playerid, DialogAddReport, DIALOG_STYLE_INPUT, "Sabýka kaydý ekle", "%s kiþisine uygulanan iþlemi belirtin:", "Tamamla", "", PlayerInfo[playerid][pTargetName]);

    mysql_format(ourConnection, queryx, sizeof(queryx), "INSERT INTO police_arrest_records (officer, created_at, record, target) VALUES ('%e', NOW(), '%e', '%e')", ReturnRoleplayName(playerid), inputtext, PlayerInfo[playerid][pTargetName]);
    mysql_tquery(ourConnection, queryx, "OnCRInsert", "d", playerid);

    return 1;
}

Dialog:DialogAddCrimes(playerid, response, listitem, inputtext[])
{
    // new query[300];

    if(!isnull(inputtext) && strlen(inputtext) <= 200)
    {
        mysql_format(ourConnection, queryx, sizeof(queryx), "INSERT INTO police_crime_records (crime, record_id) VALUES ('%e', '%d')", inputtext, PlayerInfo[playerid][pRecordID]);
        mysql_tquery(ourConnection, queryx);
    }

    if(!response)
    {
        SendFactionMessage(PlayerInfo[playerid][pFaction], "** HQ: %s, %s kiþisine sabýka kaydý ekledi.", ReturnRoleplayName(playerid), PlayerInfo[playerid][pTargetName]);
        format(PlayerInfo[playerid][pTargetName], 50, "");
        return PlayerInfo[playerid][pRecordID] = 0;
    }

    Dialog_Show(playerid, DialogAddCrimes, DIALOG_STYLE_INPUT, "Sabýka kaydý ekle", "%s kiþisinin %s tarihinde iþlediði suçlarý ekleyin:", "Devam", "Gönder", PlayerInfo[playerid][pTargetName], ReturnDate());

    return 1;
}

Dialog:DialogToggleImpound(playerid, response, listitem, inputtext[])
{
    if(!response)return
        PlayerInfo[playerid][pMdcID] = -1;

    PlayerInfo[playerid][pMdcID] = PlayerInfo[playerid][pListsID][listitem];

    // new query[128];

    mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT * FROM vehicles_impounded WHERE id = '%d'", PlayerInfo[playerid][pMdcID]);
    mysql_tquery(ourConnection, queryx, "OnImpoundedVehicleSearch", "d", playerid);

    return 1;
}

Dialog:DialogTImpoundConfirm(playerid, response, listitem, inputtext[])
{
    if(!response)return
        PlayerInfo[playerid][pMdcID] = -1;

    // new query[128];

    mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT * FROM vehicles_impounded WHERE id = '%d'", PlayerInfo[playerid][pMdcID]);
    mysql_tquery(ourConnection, queryx, "OnImpoundedVehicleConfirmSearch", "d", playerid);

    return 1;
}

Dialog:DialogSearchPlayer(playerid, response, listitem, inputtext[])
{
    if(!response)
    {
        if(PlayerInfo[playerid][pUsingMDC]) pc_cmd_mdc(playerid, NULL);
        return PlayerInfo[playerid][pMdcID] = -1;
    }
    new targetID = PlayerInfo[playerid][pMdcID];
    new name[MAX_PLAYER_NAME];

    strmid(name, GetCharacterName(targetID), 0, MAX_PLAYER_NAME);

    switch(listitem)
    {
        case 0:
        {
            mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT * FROM characters WHERE id = '%d' AND banned = 0 AND deleted = 0 AND deleted_at IS NULL", targetID);
            mysql_tquery(ourConnection, queryx, "OnMDCPlayerSearch", "dd", playerid, targetID);
        }
        case 1:
        {
            mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT * FROM vehicles WHERE owner_id = '%d'", targetID);
            mysql_tquery(ourConnection, queryx, "OnMDCPlayerVehicleSearch", "dd", playerid, targetID);
        }
        case 2:
        {
            mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT * FROM phones WHERE owner = '%e'", name);
            mysql_tquery(ourConnection, queryx, "OnMDCPlayerNumberSearch", "dd", playerid, targetID);
        }
        default: return 1;
    }

    return 1;
}

Dialog:DialogPlayerInfo(playerid, response, listitem, inputtext[])
{
    if(PlayerInfo[playerid][pUsingMDC])return
        pc_cmd_mdc(playerid, NULL);

    return 1;
}

Dialog:DialogPlayerNumbers(playerid, response, listitem, inputtext[])
{
    if(!response)
    {
        if(PlayerInfo[playerid][pUsingMDC]) pc_cmd_mdc(playerid, NULL);
        return PlayerInfo[playerid][pMdcID] = -1;
    }

    // new query[90];

    mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT * FROM phones WHERE id = '%d'", PlayerInfo[playerid][pListsID][listitem]);
    mysql_tquery(ourConnection, queryx, "OnMDCNumbersSearch", "d", playerid);

    return 1;
}

Dialog:DialogPlayerVehicles(playerid, response, listitem, inputtext[])
{
    if(!response)
    {
        if(PlayerInfo[playerid][pUsingMDC]) pc_cmd_mdc(playerid, NULL);
        return PlayerInfo[playerid][pMdcID] = -1;
    }

    // new query[90];

    mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT * FROM vehicles WHERE id = '%d'", PlayerInfo[playerid][pListsID][listitem]);
    mysql_tquery(ourConnection, queryx, "OnMDCVehicleSearch", "d", playerid);

    return 1;
}

Dialog:DialogPhoneSearch(playerid, response, listitem, inputtext[])
{
    if(!response)
    {
        if(PlayerInfo[playerid][pUsingMDC]) pc_cmd_mdc(playerid, NULL);
        return PlayerInfo[playerid][pMdcID] = -1;
    }

    // new query[150];
    new number = PlayerInfo[playerid][pMdcID];

    mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT * FROM phone_logs WHERE caller_number = '%d' OR receiver_number = '%d' ORDER BY id ASC", number, number);
    mysql_tquery(ourConnection, queryx, "OnMDCNumberLogSearch", "dd", playerid, number);

    return 1;
}

Dialog:DialogMDC(playerid, response, listitem, inputtext[])
{
    if(!response)return
        PlayerInfo[playerid][pUsingMDC] = 0;

    switch(listitem)
    {
        case 0: Dialog_Show(playerid, DialogMDCSearchPlayer, DIALOG_STYLE_INPUT, "Sivil Kontrol", "Aramak istediðin kiþinin adýný gir.\n(( KULLANIM: isim_soyisim ))", "Ara", "Ýptal");
        case 1: Dialog_Show(playerid, DialogMDCSearchPlate, DIALOG_STYLE_INPUT, "Plaka Kontrol", "Aramak istediðin plakayý gir.", "Ara", "Ýptal");
        case 2: Dialog_Show(playerid, DialogMDCSearchNumber, DIALOG_STYLE_INPUT, "Numara Kontrol", "Aramak istediðin numarayý gir:", "Ara", "Ýptal");
        case 3: pc_cmd_apbkullanimdisixd(playerid, "ekle");
        case 4: pc_cmd_apbkullanimdisixd(playerid, "liste");
        case 5: {
            if(Faction_GetType(PlayerInfo[playerid][pFaction]) == POLICE) return pc_cmd_ccwlisansi(playerid, NULL);
            else return HataMesajiC(playerid, "Bu seçeneði sadece polis kullanabilir.");
        }
        case 6: Dialog_Show(playerid, DialogMDCSearchBiz, DIALOG_STYLE_INPUT, "Ýþletme Kontrol", "Aramak istediðin iþletme ID'sini gir:", "Ara", "Ýptal");
        case 7: Dialog_Show(playerid, DialogMDCSearchHouse, DIALOG_STYLE_INPUT, "Ev Kontrol", "Aramak istediðin ev ID'sini gir:", "Ara", "Ýptal");
        case 8: Dialog_Show(playerid, DialogMDCSabikaEkleIsim, DIALOG_STYLE_INPUT, "Sabýka Ekle", "Sabýka eklemek istediðiniz kiþinin adýný girin (Ýsim_Soyisim)", "Tamam", "Ýptal");
        case 9: Dialog_Show(playerid, DialogMDCSabikaAra, DIALOG_STYLE_INPUT, "Sabýka Kaydý", "Sabýka kaydýný görmek istediðiniz kiþinin adýný girin (Ýsim_Soyisim)", "Tamam", "Ýptal");
        case 10: Dialog_Show(playerid, DialogMDCCezaAra, DIALOG_STYLE_INPUT, "Ceza Kaydý", "Ceza kaydýný görmek istediðiniz kiþinin adýný girin (Ýsim_Soyisim)", "Tamam", "Ýptal");
        case 11: IhbarGoster(playerid);
        case 12: CalintiGoster(playerid);
        case 13: Dialog_Show(playerid, DialogMDCSigortaAra, DIALOG_STYLE_INPUT, "Sigorta Kontrol", "Sigortasýný görmek istediðiniz aracýn plakasýný girin.", "Ara", "<< Geri");
    }

    PlayerInfo[playerid][pUsingMDC] = 1;

    return 1;
}

Dialog:DialogMDCSigortaAra(playerid, response, listitem, inputtext[]) {
    if(!response) return
        MDC_Goster(playerid);
    if(strlen(inputtext) > 0) {
        new rows,aracSahibi, aracModel, aracSigorta;
        mysql_format(ourConnection, queryx, sizeof queryx, "SELECT owner_id, model, sigortaseviyesi FROM vehicles WHERE plate = '%e' LIMIT 1", inputtext);
        new Cache:veri = mysql_query(ourConnection, queryx, true);
        cache_get_row_count(rows);
        if(!rows) return Dialog_Show(playerid, DialogMDCSigortaAra, DIALOG_STYLE_INPUT, "Sigorta Kontrol", "Araç bulunamadý.\nSigortasýný görmek istediðiniz aracýn plakasýný girin.", "Ara", "<< Geri");
        cache_get_value_int(0, "owner_id", aracSahibi);
        cache_get_value_int(0, "model", aracModel);
        cache_get_value_int(0, "sigortaseviyesi", aracSigorta);
        cache_delete(veri);
        new sigortaText[25];
        if(!aracSigorta) {
            format(sigortaText, 25, "Sigorta yok.");
        }
        else if(aracSigorta == 1) {
            format(sigortaText, 25, "Sigorta var.");
        }
        else {
            format(sigortaText, 25, "Sigorta ve kasko var.");
        }
        if(!aracSigorta) return SunucuMesaji(playerid, "%s plakalý araç için bir sigorta bulunamadý.", inputtext);
        Dialog_Show(playerid, DialogMDCSigortaAraSonuc, DIALOG_STYLE_MSGBOX, "Sigorta Kontrol", "{0066ff}Araç Sahibi: {FFFFFF}%s\n{0066ff}Araç Modeli: {FFFFFF}%s\n{0066ff}Araç Plakasý: {FFFFFF}%s\n{0066ff}Araç Sigortasý: {FFFFFF}%s", "Kiþiyi Göster", "<< Geri", GetCharacterName(aracSahibi), GetVehicleModelName(aracModel), inputtext, sigortaText);
        SetPVarString(playerid, "SigortaKisi", GetCharacterName(aracSahibi));
    } else return Dialog_Show(playerid, DialogMDCSigortaAra, DIALOG_STYLE_INPUT, "Sigorta Kontrol", "Bu kutu boþ býrakýlamaz.\nSigortasýný görmek istediðiniz aracýn plakasýný girin.", "Ara", "<< Geri");
    return 1;
}

Dialog:DialogMDCSigortaAraSonuc(playerid, response, listitem, inputtext[]) {
    if(!response) {
        DeletePVar(playerid, "SigortaKisi");
        MDC_Goster(playerid);
        return 1;
    }
    new aracSahibi[MAX_PLAYER_NAME];
    GetPVarString(playerid, "SigortaKisi", aracSahibi, MAX_PLAYER_NAME);
    DeletePVar(playerid, "SigortaKisi");
    MDC_SearchCitizen(playerid, aracSahibi);
    SunucuMesaji(playerid, "%s kiþisine ait kayýtlarý görüyorsunuz.", aracSahibi);
    return 1;
}

Dialog:DialogCalintiGoster(playerid, response, listitem, inputtext[]) {
    if(!response) {
        MDC_Goster(playerid);
        PlayerInfo[playerid][pIhbarUyariAldi] = 0;
        return 1;
    }
    new calintiString[2048], calintiYonlenen[160], calintiBaslik[80];
    foreach(new i: Ekipler) if(EkipBilgi[i][eKullanim]) {
        if(EkipBilgi[i][eCalintiGidiyor] == listitem)
            format(calintiYonlenen, sizeof calintiYonlenen, "%s%s, ", calintiYonlenen, EkipBilgi[i][eTamNumara]);
    }
    format(calintiString, sizeof calintiString, "{5ca1f0}Çalýnan Aracýn Plakasý: {ffffff}%s\n{5ca1f0}Çalýnan Aracýn Son Bilinen Konumu: {ffffff}%s\n{5ca1f0}Çalýndýðý Tarih ve Saat: {ffffff}%s\n{5ca1f0}Çalýnan Aracýn Modeli: {ffffff}%s",
    CalintiInfo[listitem][caPlaka], CalintiInfo[listitem][caKonum], CalintiInfo[listitem][caTarih], CalintiInfo[listitem][caModel]);
    format(calintiString, sizeof calintiString, "%s\n{5ca1f0}Yönlenen Ekipler: {ffffff}%s",
    calintiString, calintiYonlenen);
    format(calintiBaslik, sizeof calintiBaslik, "Ýhbar Ayrýntýlarý - {2a6db9}#%d", CalintiInfo[listitem][caID]);
    Dialog_Show(playerid, DialogCalintiAyrinti, DIALOG_STYLE_MSGBOX, calintiBaslik, calintiString, "Seçenekler", "<< Geri");
    PlayerInfo[playerid][pIhbarSecenek] = listitem;
    return 1;
}

Dialog:DialogCalintiAyrinti(playerid, response, listitem, inputtext[]) {
    if(!response) {
        CalintiGoster(playerid);
        return 1;
    }
    new ihbar = PlayerInfo[playerid][pIhbarSecenek];
    if(!CalintiInfo[ihbar][caCozuldu]) {
        new ekipID = Ekip(playerid);
        if(ekipID == -1) return HataMesajiC(playerid, "Bu seçeneði kullanmak için bir ekipte olman gerekiyor.");
        if(EkipBilgi[ekipID][eIhbaraGidiyor] != ihbar)
            Dialog_Show(playerid, DialogCalintiSecenekler, DIALOG_STYLE_LIST, "Ýhbar Seçenekleri", "Aracýn bilinen son konumunu GPS'de iþaretle\nÝhbara yönel\nÝhbarý çözülmüþ olarak iþaretle\nÝhbara birim yönelt", "Seç", "<< Geri");
        else
            Dialog_Show(playerid, DialogCalintiSecenekler, DIALOG_STYLE_LIST, "Ýhbar Seçenekleri", "Aracýn bilinen son konumunu GPS'de iþaretle\nÝhbara yönelmeyi iptal et\nÝhbarý çözülmüþ olarak iþaretle\nÝhbara birim yönelt", "Seç", "<< Geri");
    }
    else {
        Dialog_Show(playerid, DialogCalintiCSecenekler, DIALOG_STYLE_LIST, "Ýhbar Seçenekleri", "Ýhbarý geri aç", "Seç", "<< Geri");
    }
    return 1;
}

Dialog:DialogCalintiCSecenekler(playerid, response, listitem, inputtext[]) {
    if(!response) {
        new calintiString[2048], calintiYonlenen[160], calintiBaslik[80], ihbar = PlayerInfo[playerid][pIhbarSecenek];
        foreach(new i: Ekipler) if(EkipBilgi[i][eKullanim]) {
            if(EkipBilgi[i][eCalintiGidiyor] == ihbar)
                format(calintiYonlenen, sizeof calintiYonlenen, "%s%s, ", calintiYonlenen, EkipBilgi[i][eTamNumara]);
        }
        format(calintiString, sizeof calintiString, "{5ca1f0}Çalýnan Aracýn Plakasý: {ffffff}%s\n{5ca1f0}Çalýnan Aracýn Son Bilinen Konumu: {ffffff}%s\n{5ca1f0}Çalýndýðý Tarih ve Saat: {ffffff}%s\n{5ca1f0}Çalýnan Aracýn Modeli: {ffffff}%s",
        CalintiInfo[ihbar][caPlaka], CalintiInfo[ihbar][caKonum], CalintiInfo[ihbar][caTarih], CalintiInfo[ihbar][caModel]);
        format(calintiString, sizeof calintiString, "%s\n{5ca1f0}Yönlenen Ekipler: {ffffff}%s",
        calintiString, calintiYonlenen);
        format(calintiBaslik, sizeof calintiBaslik, "Ýhbar Ayrýntýlarý - {2a6db9}#%d", CalintiInfo[ihbar][caID]);
        Dialog_Show(playerid, DialogCalintiAyrinti, DIALOG_STYLE_MSGBOX, calintiBaslik, calintiString, "Seçenekler", "<< Geri");
        return 1;
    }
    new ekipID = Ekip(playerid);
    if(!CalintiInfo[PlayerInfo[playerid][pIhbarSecenek]][caCozuldu]) return HataMesajiC(playerid, "Bu çalýntý ihbarý zaten aktif.");
    CalintiInfo[PlayerInfo[playerid][pIhbarSecenek]][caCozuldu] = 0;
    if(ekipID != -1) return
        SendFactionRadioMessage(0, "[OPERATÖR]: %d-%s-%s numaralý ekip %d numaralý çalýntý ihbarýný ihbarý tekrar aktifleþtirdi.", EkipBilgi[ekipID][eMerkez], EkipBilgi[ekipID][eKisaltma], EkipBilgi[ekipID][eNO], CalintiInfo[PlayerInfo[playerid][pIhbarSecenek]][caID]);
    else return
        SendFactionRadioMessage(0, "[OPERATÖR]: %s %s, %d numaralý çalýntý ihbarýný tekrar aktifleþtirdi.", fRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pRank]-1], ReturnRoleplayName(playerid), CalintiInfo[PlayerInfo[playerid][pIhbarSecenek]][caID]);
}

Dialog:DialogCalintiSecenekler(playerid, response, listitem, inputtext[]) {
    if(!response) {
        new calintiString[2048], calintiYonlenen[160], calintiBaslik[80], ihbar = PlayerInfo[playerid][pIhbarSecenek];
        foreach(new i: Ekipler) if(EkipBilgi[i][eKullanim]) {
            if(EkipBilgi[i][eCalintiGidiyor] == ihbar)
                format(calintiYonlenen, sizeof calintiYonlenen, "%s%s, ", calintiYonlenen, EkipBilgi[i][eTamNumara]);
        }
        format(calintiString, sizeof calintiString, "{5ca1f0}Çalýnan Aracýn Plakasý: {ffffff}%s\n{5ca1f0}Çalýnan Aracýn Son Bilinen Konumu: {ffffff}%s\n{5ca1f0}Çalýndýðý Tarih ve Saat: {ffffff}%s\n{5ca1f0}Çalýnan Aracýn Modeli: {ffffff}%s",
        CalintiInfo[ihbar][caPlaka], CalintiInfo[ihbar][caKonum], CalintiInfo[ihbar][caTarih], CalintiInfo[ihbar][caModel]);
        format(calintiString, sizeof calintiString, "%s\n{5ca1f0}Yönlenen Ekipler: {ffffff}%s",
        calintiString, calintiYonlenen);
        format(calintiBaslik, sizeof calintiBaslik, "Ýhbar Ayrýntýlarý - {2a6db9}#%d", CalintiInfo[ihbar][caID]);
        Dialog_Show(playerid, DialogCalintiAyrinti, DIALOG_STYLE_MSGBOX, calintiBaslik, calintiString, "Seçenekler", "<< Geri");
        return 1;
    }
    switch(listitem) {
        case 0:  {// gps'de iþaretle
            new ihbar = PlayerInfo[playerid][pIhbarSecenek];
            AC_SetPlayerCheckpoint(playerid, CalintiInfo[ihbar][caPosX], CalintiInfo[ihbar][caPosY], CalintiInfo[ihbar][caPosZ], 5.0);
            SunucuMesaji(playerid, "Aracýn bilinen son konumu GPS'inizde iþaretlendi.");
        }
        case 1: { // ihbara yönel
            new ekipID = Ekip(playerid);
            if(ekipID == -1) return HataMesajiC(playerid, "Önce bir ekip kurmanýz ya da bir ekibe girmeniz gerekmekte. (/ekip)");
            if(EkipBilgi[ekipID][eCalintiGidiyor] == PlayerInfo[playerid][pIhbarSecenek]) {
                EkipBilgi[ekipID][eCalintiGidiyor] = -1;
                CalintiInfo[PlayerInfo[playerid][pIhbarSecenek]][caYonlenenEkipSayisi]--;
                SendFactionRadioMessage(0, "[OPERATÖR]: %d-%s-%s numaralý ekip %d numaralý çalýntý ihbarýna artýk intikal etmiyor.", EkipBilgi[ekipID][eMerkez], EkipBilgi[ekipID][eKisaltma], EkipBilgi[ekipID][eNO], CalintiInfo[PlayerInfo[playerid][pIhbarSecenek]][caID]);
                return 1;
            }
            if(EkipBilgi[ekipID][eCalintiGidiyor] != -1) return HataMesajiC(playerid, "Zaten bir ihbara gidiyorsunuz, lütfen önce gittiðiniz ihbarý çözülmüþ olarak iþaretleyin ya da çaðrýnýzý iptal edin.");
            if(CalintiInfo[PlayerInfo[playerid][pIhbarSecenek]][caCozuldu]) return HataMesajiC(playerid, "Seçtiðiniz çalýntý ihbarý çözümlenmiþ.");
            if(CalintiInfo[PlayerInfo[playerid][pIhbarSecenek]][caYonlenenEkipSayisi] > MAX_YONLENME) return HataMesajiC(playerid, "Seçtiðiniz çalýntý ihbarýna maksimum sayýda birim intikal ediyor.");
            EkipBilgi[ekipID][eCalintiGidiyor] = PlayerInfo[playerid][pIhbarSecenek];
            CalintiInfo[PlayerInfo[playerid][pIhbarSecenek]][caYonlenenEkipSayisi]++;

            new ihbar = PlayerInfo[playerid][pIhbarSecenek];
            AC_SetPlayerCheckpoint(playerid, CalintiInfo[ihbar][caPosX], CalintiInfo[ihbar][caPosY], CalintiInfo[ihbar][caPosZ], 5.0);

            SendFactionRadioMessage(0, "[OPERATÖR]: %d-%s-%s numaralý ekip %d numaralý çalýntý ihbarýna intikal ediyor.", EkipBilgi[ekipID][eMerkez], EkipBilgi[ekipID][eKisaltma], EkipBilgi[ekipID][eNO], CalintiInfo[PlayerInfo[playerid][pIhbarSecenek]][caID]);
        }
        case 2: { // ihbarý çözülmüþ olarak iþaretle
            if(CalintiInfo[PlayerInfo[playerid][pIhbarSecenek]][caCozuldu]) return HataMesajiC(playerid, "Bu çalýntý ihbarý zaten çözülmüþ olarak iþaretlenmiþ.");
            new ekipID = Ekip(playerid);
            CalintiInfo[PlayerInfo[playerid][pIhbarSecenek]][caCozuldu] = 1;
            foreach(new i: Ekipler) if(EkipBilgi[i][eKullanim] && EkipBilgi[i][eCalintiGidiyor] == PlayerInfo[playerid][pIhbarSecenek]) {
                EkipBilgi[i][eCalintiGidiyor] = -1;
            }
            SunucuMesaji(playerid, "Seçtiðiniz ihbarý çözüldü olarak iþaretlediniz.");
            if(ekipID != -1) return
                SendFactionRadioMessage(0, "[OPERATÖR]: %d-%s-%s numaralý ekip %d numaralý çalýntý ihbarýný çözülmüþ olarak iþaretledi.", EkipBilgi[ekipID][eMerkez], EkipBilgi[ekipID][eKisaltma], EkipBilgi[ekipID][eNO], CalintiInfo[PlayerInfo[playerid][pIhbarSecenek]][caID]);
            else return
                SendFactionRadioMessage(0, "[OPERATÖR]: %s %s, %d numaralý çalýntý ihbarýný çözülmüþ olarak iþaretledi.", fRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pRank]-1], ReturnRoleplayName(playerid), CalintiInfo[PlayerInfo[playerid][pIhbarSecenek]][caID]);
        }
        case 3: { // ihbara yönelt
            if(PlayerInfo[playerid][pRank] > 11) return HataMesajiC(playerid, "Bu seçeneði kullanamazsýnýz.");
            if(CalintiInfo[PlayerInfo[playerid][pIhbarSecenek]][caCozuldu]) return HataMesajiC(playerid, "Seçtiðiniz ihbar çözümlenmiþ.");
            Dialog_Show(playerid, DialogCalintiKod, DIALOG_STYLE_INPUT, "Ýhbar Yönlendirme", "Aþaðýdaki kutucuða intikal kodunu girin: (0-2-3)", "Tamam", "<< Geri");
        }
    }
    return 1;
}

Dialog:DialogCalintiKod(playerid, response, listitem, inputtext[]) {
    if(!response) return Dialog_Show(playerid, DialogCalintiSecenekler, DIALOG_STYLE_LIST, "Ýhbar Seçenekleri", "Aracýn bilinen son konumunu GPS'de iþaretle\nÝhbara yönel\nÝhbarý çözülmüþ olarak iþaretle\nÝhbara birim yönelt", "Seç", "<< Geri");
    if(PlayerInfo[playerid][pRank] > 11) return HataMesajiC(playerid, "Bu seçeneði kullanamazsýnýz.");
    if(CalintiInfo[PlayerInfo[playerid][pIhbarSecenek]][caCozuldu]) return HataMesajiC(playerid, "Seçtiðiniz ihbar çözümlenmiþ.");
    if(strval(inputtext) != 0 && strval(inputtext) != 2 && strval(inputtext) != 3) return HataMesajiC(playerid, "Bilinmeyen bir kod girdiniz, lütfen 0, 2 ya da 3 yazýn.");
    PlayerInfo[playerid][pIhbarKod] = strval(inputtext);
    Dialog_Show(playerid, DialogCalintiEkip, DIALOG_STYLE_INPUT, "Ýhbar Yönlendirme", "Aþaðýdaki kutucuða ekip kodunu girin(örnek: 1-LINCOLN-40):", "Tamam", "<< Geri");
    return 1;
}

Dialog:DialogCalintiEkip(playerid, response, listitem, inputtext[]) {
    if(!response) return Dialog_Show(playerid, DialogCalintiSecenekler, DIALOG_STYLE_LIST, "Ýhbar Seçenekleri", "Aracýn bilinen son konumunu GPS'de iþaretle\nÝhbara yönel\nÝhbarý çözülmüþ olarak iþaretle\nÝhbara birim yönelt", "Seç", "<< Geri");
    if(PlayerInfo[playerid][pRank] > 11) return HataMesajiC(playerid, "Bu seçeneði kullanamazsýnýz.");
    if(CalintiInfo[PlayerInfo[playerid][pIhbarSecenek]][caCozuldu]) return HataMesajiC(playerid, "Seçtiðiniz ihbar çözümlenmiþ.");
    new ekip = -1;
    foreach(new i: Ekipler) if(EkipBilgi[i][eKullanim]) {
        if(!strcmp(EkipBilgi[i][eTamNumara], inputtext, true)) {
            ekip = i;
            break;
        }
    }
    if(ekip == -1) return Dialog_Show(playerid, DialogCalintiEkip, DIALOG_STYLE_INPUT, "Ýhbar Yönlendirme", "Aktif olmayan bir ekip kodu girdiniz.\nAþaðýdaki kutucuða ekip kodunu girin(örnek: 1-LINCOLN-40):", "Tamam", "<< Geri");
    if(EkipBilgi[ekip][eCalintiGidiyor] != -1) return Dialog_Show(playerid, DialogCalintiEkip, DIALOG_STYLE_INPUT, "Ýhbar Yönlendirme", "Bu ekip zaten bir ihbara gidiyor.\nAþaðýdaki kutucuða ekip kodunu girin(örnek: 1-LINCOLN-40):", "Tamam", "<< Geri");
    if(CalintiInfo[PlayerInfo[playerid][pIhbarSecenek]][caYonlenenEkipSayisi] > MAX_YONLENME) return HataMesajiC(playerid, "Seçtiðiniz ihbara maksimum sayýda birim intikal ediyor.");
    CalintiInfo[PlayerInfo[playerid][pIhbarSecenek]][caYonlenenEkipSayisi]++;
    EkipBilgi[ekip][eCalintiGidiyor] = PlayerInfo[playerid][pIhbarSecenek];
    SendFactionRadioMessage(0, "[OPERATÖR]: Central Dispatch'den %s numaralý ekibe, %d numaralý çalýntý ihbarýna intikal edin, KOD %d.", EkipBilgi[ekip][eTamNumara], CalintiInfo[PlayerInfo[playerid][pIhbarSecenek]][caID], PlayerInfo[playerid][pIhbarKod]);
    return 1;
}

Dialog:DialogIhbarGoster(playerid, response, listitem, inputtext[]) {
    if(!response) {
        MDC_Goster(playerid);
        PlayerInfo[playerid][pIhbarUyariAldi] = 0;
        return 1;
    }
    new ihbarString[2048], ihbarBaslik[128], ihbarYonlenen[160];
    foreach(new i: Ekipler) if(EkipBilgi[i][eKullanim]) {
        if(EkipBilgi[i][eIhbaraGidiyor] == listitem)
            format(ihbarYonlenen, sizeof ihbarYonlenen, "%s%s, ", ihbarYonlenen, EkipBilgi[i][eTamNumara]);
    }
    format(ihbarString, sizeof ihbarString, "{5ca1f0}Ýhbarý Yapan: {ffffff}%s\n{5ca1f0}Ýhbarýn Yapýldýðý Numara: {ffffff}%d\n{5ca1f0}Ýhbarýn Tarihi: {ffffff}%s\n{5ca1f0}Ýhbarýn Yapýldýðý Konum: {ffffff}%s\n",
    IhbarInfo[listitem][ihbarYapan], IhbarInfo[listitem][ihbarNumara], IhbarInfo[listitem][ihbarTarihi], IhbarInfo[listitem][ihbarAsilKonum]);
    format(ihbarString, sizeof ihbarString, "%s{5ca1f0}Ýhbar Ýçeriði: {ffffff}%s\n{5ca1f0}Tarif Edilen Konum: {ffffff}%s\n{5ca1f0}Yönlenen Ekipler: {ffffff}%s",
    ihbarString, IhbarInfo[listitem][ihbarIcerigi], IhbarInfo[listitem][ihbarTarifKonum], ihbarYonlenen);
    format(ihbarBaslik, sizeof ihbarBaslik, "Ýhbar Ayrýntýlarý - {2a6db9}#%d", IhbarInfo[listitem][ihbarID]);
    Dialog_Show(playerid, DialogIhbarAyrinti, DIALOG_STYLE_MSGBOX, ihbarBaslik, ihbarString, "Seçenekler", "<< Geri");
    PlayerInfo[playerid][pIhbarSecenek] = listitem;
    return 1;
}

Dialog:DialogIhbarAyrinti(playerid, response, listitem, inputtext[]) {
    if(!response) {
        IhbarGoster(playerid);
        return 1;
    }
    new ihbar = PlayerInfo[playerid][pIhbarSecenek];
    if(!IhbarInfo[ihbar][ihbarCozuldu]) {
        new ekipID = Ekip(playerid);
        if(ekipID == -1) return HataMesajiC(playerid, "Bu seçeneði kullanmak için bir ekipte olman gerekiyor.");
        if(EkipBilgi[ekipID][eIhbaraGidiyor] != ihbar)
            Dialog_Show(playerid, DialogIhbarSecenekler, DIALOG_STYLE_LIST, "Ýhbar Seçenekleri", "Ýhbarý yapaný ara\nÝhbara yönel\nÝhbara yönel ve destek talep et\nÝhbarý çözülmüþ olarak iþaretle\nÝhbara birim yönelt", "Seç", "<< Geri");
        else
            Dialog_Show(playerid, DialogIhbarSecenekler, DIALOG_STYLE_LIST, "Ýhbar Seçenekleri", "Ýhbarý yapaný ara\nÝhbara yönelmeyi iptal et\nÝhbara yönel ve destek talep et\nÝhbarý çözülmüþ olarak iþaretle\nÝhbara birim yönelt", "Seç", "<< Geri");
    }
    else {
        new ekipID = Ekip(playerid);
        if(ekipID == -1) return HataMesajiC(playerid, "Önce bir ekip kurmanýz ya da bir ekibe girmeniz gerekmekte. (/ekip)");
        Dialog_Show(playerid, DialogIhbarCSecenekler, DIALOG_STYLE_LIST, "Ýhbar Seçenekleri", "Ýhbarý geri aç", "Seç", "<< Geri");
    }
    return 1;
}

Dialog:DialogIhbarCSecenekler(playerid, response, listitem, inputtext[]) {
    if(!response) {
        new ihbarString[2048], ihbarBaslik[128], ihbarYonlenen[160];
        new ihbar = PlayerInfo[playerid][pIhbarSecenek];
        foreach(new i: Ekipler) if(EkipBilgi[i][eKullanim]) {
            if(EkipBilgi[i][eIhbaraGidiyor] == ihbar)
                format(ihbarYonlenen, sizeof ihbarYonlenen, "%s%s, ", ihbarYonlenen, EkipBilgi[i][eTamNumara]);
        }
        format(ihbarString, sizeof ihbarString, "{5ca1f0}Ýhbarý Yapan: {ffffff}%s\n{5ca1f0}Ýhbarýn Yapýldýðý Numara: {ffffff}%d\n{5ca1f0}Ýhbarýn Tarihi: {ffffff}%s\n{5ca1f0}Ýhbarýn Yapýldýðý Konum: {ffffff}%s\n",
        IhbarInfo[ihbar][ihbarYapan], IhbarInfo[ihbar][ihbarNumara], IhbarInfo[ihbar][ihbarTarihi], IhbarInfo[ihbar][ihbarAsilKonum]);
        format(ihbarString, sizeof ihbarString, "%s{5ca1f0}Ýhbar Ýçeriði: {ffffff}%s\n{5ca1f0}Tarif Edilen Konum: {ffffff}%s\n{5ca1f0}Yönlenen Ekipler: {ffffff}%s",
        ihbarString, IhbarInfo[ihbar][ihbarIcerigi], IhbarInfo[ihbar][ihbarTarifKonum], ihbarYonlenen);
        format(ihbarBaslik, sizeof ihbarBaslik, "Ýhbar Ayrýntýlarý - {2a6db9}#%d", IhbarInfo[ihbar][ihbarID]);
        Dialog_Show(playerid, DialogIhbarAyrinti, DIALOG_STYLE_MSGBOX, ihbarBaslik, ihbarString, "Seçenekler", "<< Geri");
        return 1;
    }
    new ekipID = Ekip(playerid);
    if(!IhbarInfo[PlayerInfo[playerid][pIhbarSecenek]][ihbarCozuldu]) return HataMesajiC(playerid, "Bu ihbar zaten aktif.");
    IhbarInfo[PlayerInfo[playerid][pIhbarSecenek]][ihbarCozuldu] = 0;
    if(ekipID != -1)return
        SendFactionRadioMessage(0, "[OPERATÖR]: %d-%s-%s numaralý ekip %d numaralý ihbarý tekrar aktifleþtirdi.", EkipBilgi[ekipID][eMerkez], EkipBilgi[ekipID][eKisaltma], EkipBilgi[ekipID][eNO], IhbarInfo[PlayerInfo[playerid][pIhbarSecenek]][ihbarID]);
    else return
        SendFactionRadioMessage(0, "[OPERATÖR]: %s %s, %d numaralý ihbarý tekrar aktifleþtirdi.", fRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pRank]-1], ReturnRoleplayName(playerid), IhbarInfo[PlayerInfo[playerid][pIhbarSecenek]][ihbarID]);
}

Dialog:DialogIhbarSecenekler(playerid, response, listitem, inputtext[]) {
    if(!response) {
        new ihbarString[2048], ihbarBaslik[128], ihbarYonlenen[160];
        new ihbar = PlayerInfo[playerid][pIhbarSecenek];
        foreach(new i: Ekipler) if(EkipBilgi[i][eKullanim]) {
            if(EkipBilgi[i][eIhbaraGidiyor])
                format(ihbarYonlenen, sizeof ihbarYonlenen, "%s%s, ", ihbarYonlenen, EkipBilgi[i][eTamNumara]);
        }
        format(ihbarString, sizeof ihbarString, "{5ca1f0}Ýhbarý Yapan: {ffffff}%s\n{5ca1f0}Ýhbarýn Yapýldýðý Numara: {ffffff}%d\n{5ca1f0}Ýhbarýn Tarihi: {ffffff}%s\n{5ca1f0}Ýhbarýn Yapýldýðý Konum: {ffffff}%s\n",
        IhbarInfo[ihbar][ihbarYapan], IhbarInfo[ihbar][ihbarNumara], IhbarInfo[ihbar][ihbarTarihi], IhbarInfo[ihbar][ihbarAsilKonum]);
        format(ihbarString, sizeof ihbarString, "%s{5ca1f0}Ýhbar Ýçeriði: {ffffff}%s\n{5ca1f0}Tarif Edilen Konum: {ffffff}%s\n{5ca1f0}Yönlenen Ekipler: {ffffff}%s",
        ihbarString, IhbarInfo[ihbar][ihbarIcerigi], IhbarInfo[ihbar][ihbarTarifKonum], ihbarYonlenen);
        format(ihbarBaslik, sizeof ihbarBaslik, "Ýhbar Ayrýntýlarý - {2a6db9}#%d", IhbarInfo[ihbar][ihbarID]);
        Dialog_Show(playerid, DialogIhbarAyrinti, DIALOG_STYLE_MSGBOX, ihbarBaslik, ihbarString, "Seçenekler", "<< Geri");
        return 1;
    }
    switch(listitem) {
        case 0:  // ihbar yapaný ara
            Dialog_Show(playerid, DialogIhbarAraSlot, DIALOG_STYLE_INPUT, "Ýhbar Arama", "Aþaðýdaki kutucuða arama yapacaðýnýz telefonun bulunduðu slot numarasýný girin:", "Tamam", "<< Geri");
        case 1: { // ihbara yönel
            new ekipID = Ekip(playerid);
            if(ekipID == -1) return HataMesajiC(playerid, "Önce bir ekip kurmanýz ya da bir ekibe girmeniz gerekmekte. (/ekip)");
            if(EkipBilgi[ekipID][eIhbaraGidiyor] == PlayerInfo[playerid][pIhbarSecenek]) {
                EkipBilgi[ekipID][eIhbaraGidiyor] = -1;
                IhbarInfo[PlayerInfo[playerid][pIhbarSecenek]][ihbarYonlenenEkipSayisi]--;
                SendFactionRadioMessage(0, "[OPERATÖR]: %d-%s-%s numaralý ekip %d numaralý ihbara artýk intikal etmiyor.", EkipBilgi[ekipID][eMerkez], EkipBilgi[ekipID][eKisaltma], EkipBilgi[ekipID][eNO], IhbarInfo[PlayerInfo[playerid][pIhbarSecenek]][ihbarID]);
                return 1;
            }
            if(EkipBilgi[ekipID][eIhbaraGidiyor] != -1) return HataMesajiC(playerid, "Zaten bir ihbara gidiyorsunuz, lütfen önce gittiðiniz ihbarý çözülmüþ olarak iþaretleyin ya da gidiyorum çaðrýnýzý iptal edin.");
            if(IhbarInfo[PlayerInfo[playerid][pIhbarSecenek]][ihbarCozuldu]) return HataMesajiC(playerid, "Seçtiðiniz ihbar çözümlenmiþ.");
            if(IhbarInfo[PlayerInfo[playerid][pIhbarSecenek]][ihbarYonlenenEkipSayisi] > MAX_YONLENME) return HataMesajiC(playerid, "Seçtiðiniz ihbara maksimum sayýda birim intikal ediyor.");
            EkipBilgi[ekipID][eIhbaraGidiyor] = PlayerInfo[playerid][pIhbarSecenek];
            IhbarInfo[PlayerInfo[playerid][pIhbarSecenek]][ihbarYonlenenEkipSayisi]++;
            SendFactionRadioMessage(0, "[OPERATÖR]: %d-%s-%s numaralý ekip %d numaralý ihbara intikal ediyor.", EkipBilgi[ekipID][eMerkez], EkipBilgi[ekipID][eKisaltma], EkipBilgi[ekipID][eNO], IhbarInfo[PlayerInfo[playerid][pIhbarSecenek]][ihbarID]);
        }
        case 2: { // ihbara yönel ve destek iste
            new ekipID = Ekip(playerid);
            if(ekipID == -1) return HataMesajiC(playerid, "Önce bir ekip kurmanýz ya da bir ekibe girmeniz gerekmekte. (/ekip)");
            if(IhbarInfo[PlayerInfo[playerid][pIhbarSecenek]][ihbarYonlenenEkipSayisi] > MAX_YONLENME) return HataMesajiC(playerid, "Seçtiðiniz ihbara maksimum sayýda birim intikal ediyor.");
            if(EkipBilgi[ekipID][eIhbaraGidiyor] != -1) return HataMesajiC(playerid, "Zaten bir ihbara gidiyorsunuz, lütfen önce gittiðiniz ihbarý çözülmüþ olarak iþaretleyin ya da gidiyorum çaðrýnýzý iptal edin.");
            if(IhbarInfo[PlayerInfo[playerid][pIhbarSecenek]][ihbarCozuldu]) return HataMesajiC(playerid, "Seçtiðiniz ihbar çözümlenmiþ.");
            Dialog_Show(playerid, DialogIhbarDestek, DIALOG_STYLE_INPUT, "Ýhbar Destek Talebi", "Aþaðýdaki kutucuða destek talebinin kodunu yazýn:(0-2-3)", "Tamam", "<< Geri");
        }
        case 3: { // ihbarý çözülmüþ olarak iþaretle
            if(IhbarInfo[PlayerInfo[playerid][pIhbarSecenek]][ihbarCozuldu]) return HataMesajiC(playerid, "Bu ihbar zaten çözülmüþ olarak iþaretlenmiþ.");
            new ekipID = Ekip(playerid);
            IhbarInfo[PlayerInfo[playerid][pIhbarSecenek]][ihbarCozuldu] = 1;
            foreach(new i: Ekipler) if(EkipBilgi[i][eKullanim] && EkipBilgi[i][eIhbaraGidiyor] == PlayerInfo[playerid][pIhbarSecenek]) {
                EkipBilgi[i][eIhbaraGidiyor] = -1;
            }
            SunucuMesaji(playerid, "Seçtiðiniz ihbarý çözüldü olarak iþaretlediniz.");
            if(PlayerInfo[playerid][pRank] > 9) {
                if(ekipID != -1)return
                    SendFactionRadioMessage(0, "[OPERATÖR]: %d-%s-%s numaralý ekip %d numaralý ihbarý çözülmüþ olarak iþaretledi, KOD 4.", EkipBilgi[ekipID][eMerkez], EkipBilgi[ekipID][eKisaltma], EkipBilgi[ekipID][eNO], IhbarInfo[PlayerInfo[playerid][pIhbarSecenek]][ihbarID]);
                else return
                    SendFactionRadioMessage(0, "[OPERATÖR]: %s %s, %d numaralý ihbarý çözülmüþ olarak iþaretledi, KOD 4.", fRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pRank]-1], ReturnRoleplayName(playerid), IhbarInfo[PlayerInfo[playerid][pIhbarSecenek]][ihbarID]);
            } else return SunucuMesaji(playerid, "Ýhbarý çözülmüþ olarak iþaretledin.");
        }
        case 4: { // ihbara yönelt
            if(PlayerInfo[playerid][pRank] > 11) return HataMesajiC(playerid, "Bu seçeneði kullanamazsýnýz.");
            if(IhbarInfo[PlayerInfo[playerid][pIhbarSecenek]][ihbarCozuldu]) return HataMesajiC(playerid, "Seçtiðiniz ihbar çözümlenmiþ.");
            Dialog_Show(playerid, DialogIhbarKod, DIALOG_STYLE_INPUT, "Ýhbar Yönlendirme", "Aþaðýdaki kutucuða intikal kodunu girin: (0-2-3)", "Tamam", "<< Geri");
        }
    }
    return 1;
}

Dialog:DialogIhbarKod(playerid, response, listitem, inputtext[]) {
    if(!response) return Dialog_Show(playerid, DialogIhbarSecenekler, DIALOG_STYLE_LIST, "Ýhbar Seçenekleri", "Ýhbarý yapaný ara\nÝhbara yönel\nÝhbara yönel ve destek talep et\nÝhbarý çözülmüþ olarak iþaretle\nÝhbara birim yönelt", "Seç", "<< Geri");
    if(PlayerInfo[playerid][pRank] > 11) return HataMesajiC(playerid, "Bu seçeneði kullanamazsýnýz.");
    if(IhbarInfo[PlayerInfo[playerid][pIhbarSecenek]][ihbarCozuldu]) return HataMesajiC(playerid, "Seçtiðiniz ihbar çözümlenmiþ.");
    if(strval(inputtext) != 0 && strval(inputtext) != 2 && strval(inputtext) != 3) return HataMesajiC(playerid, "Bilinmeyen bir kod girdiniz, lütfen 0, 2 ya da 3 yazýn.");
    PlayerInfo[playerid][pIhbarKod] = strval(inputtext);
    Dialog_Show(playerid, DialogIhbarEkip, DIALOG_STYLE_INPUT, "Ýhbar Yönlendirme", "Aþaðýdaki kutucuða ekip kodunu girin(örnek: 1-LINCOLN-40):", "Tamam", "<< Geri");
    return 1;
}

Dialog:DialogIhbarEkip(playerid, response, listitem, inputtext[]) {
    if(!response) return Dialog_Show(playerid, DialogIhbarSecenekler, DIALOG_STYLE_LIST, "Ýhbar Seçenekleri", "Ýhbarý yapaný ara\nÝhbara yönel\nÝhbara yönel ve destek talep et\nÝhbarý çözülmüþ olarak iþaretle\nÝhbara birim yönelt", "Seç", "<< Geri");
    if(PlayerInfo[playerid][pRank] > 11) return HataMesajiC(playerid, "Bu seçeneði kullanamazsýnýz.");
    if(IhbarInfo[PlayerInfo[playerid][pIhbarSecenek]][ihbarCozuldu]) return HataMesajiC(playerid, "Seçtiðiniz ihbar çözümlenmiþ.");
    new ekip = -1;
    foreach(new i: Ekipler) if(EkipBilgi[i][eKullanim]) {
        if(!strcmp(EkipBilgi[i][eTamNumara], inputtext, true)) {
            ekip = i;
            break;
        }
    }
    if(ekip == -1) return Dialog_Show(playerid, DialogIhbarEkip, DIALOG_STYLE_INPUT, "Ýhbar Yönlendirme", "Aktif olmayan bir ekip kodu girdiniz.\nAþaðýdaki kutucuða ekip kodunu girin(örnek: 1-LINCOLN-40):", "Tamam", "<< Geri");
    if(EkipBilgi[ekip][eIhbaraGidiyor] != -1) return Dialog_Show(playerid, DialogIhbarEkip, DIALOG_STYLE_INPUT, "Ýhbar Yönlendirme", "Bu ekip zaten bir ihbara gidiyor.\nAþaðýdaki kutucuða ekip kodunu girin(örnek: 1-LINCOLN-40):", "Tamam", "<< Geri");
    if(IhbarInfo[PlayerInfo[playerid][pIhbarSecenek]][ihbarYonlenenEkipSayisi] > MAX_YONLENME) return HataMesajiC(playerid, "Seçtiðiniz ihbara maksimum sayýda birim intikal ediyor.");
    IhbarInfo[PlayerInfo[playerid][pIhbarSecenek]][ihbarYonlenenEkipSayisi]++;
    EkipBilgi[ekip][eIhbaraGidiyor] = PlayerInfo[playerid][pIhbarSecenek];
    SendFactionRadioMessage(0, "[OPERATÖR]: Central Dispatch'den %s numaralý ekibe, %d numaralý ihbara intikal edin, KOD %d.", EkipBilgi[ekip][eTamNumara], IhbarInfo[PlayerInfo[playerid][pIhbarSecenek]][ihbarID], PlayerInfo[playerid][pIhbarKod]);
    return 1;
}

Dialog:DialogIhbarDestek(playerid, response, listitem, inputtext[]) {
    if(!response) return Dialog_Show(playerid, DialogIhbarSecenekler, DIALOG_STYLE_LIST, "Ýhbar Seçenekleri", "Ýhbarý yapaný ara\nÝhbara yönel\nÝhbara yönel ve destek talep et\nÝhbarý çözülmüþ olarak iþaretle\nÝhbara birim yönelt", "Seç", "<< Geri");
    new ekipID = Ekip(playerid);
    if(ekipID == -1) return HataMesajiC(playerid, "Önce bir ekip kurmanýz ya da bir ekibe girmeniz gerekmekte. (/ekip)");
    if(EkipBilgi[ekipID][eIhbaraGidiyor] != -1) return HataMesajiC(playerid, "Zaten bir ihbara gidiyorsunuz, lütfen önce gittiðiniz ihbarý çözülmüþ olarak iþaretleyin ya da gidiyorum çaðrýnýzý iptal edin.");
    if(strval(inputtext) != 0 && strval(inputtext) != 2 && strval(inputtext) != 3) return HataMesajiC(playerid, "Bilinmeyen bir kod girdiniz, lütfen 0, 2 ya da 3 yazýn.");
    if(IhbarInfo[PlayerInfo[playerid][pIhbarSecenek]][ihbarYonlenenEkipSayisi] > MAX_YONLENME) return HataMesajiC(playerid, "Seçtiðiniz ihbara maksimum sayýda birim intikal ediyor.");
    IhbarInfo[PlayerInfo[playerid][pIhbarSecenek]][ihbarYonlenenEkipSayisi]++;
    EkipBilgi[ekipID][eIhbaraGidiyor] = PlayerInfo[playerid][pIhbarSecenek];
    SendFactionRadioMessage(0, "HQ: Tüm birimlerin dikkatine, %d-%s-%s numaralý ekip %d numaralý ihbara intikal ediyor ve destek talebinde bulunuyor, KOD %d.", EkipBilgi[ekipID][eMerkez], EkipBilgi[ekipID][eKisaltma], EkipBilgi[ekipID][eNO], IhbarInfo[PlayerInfo[playerid][pIhbarSecenek]][ihbarID], strval(inputtext));
    return 1;
}

Dialog:DialogIhbarAraSlot(playerid, response, listitem, inputtext[]) {
    if(!response) return Dialog_Show(playerid, DialogIhbarSecenekler, DIALOG_STYLE_LIST, "Ýhbar Seçenekleri", "Ýhbarý yapaný ara\nÝhbara yönel\nÝhbara yönel ve destek talep et\nÝhbarý çözülmüþ olarak iþaretle\nÝhbara birim yönelt", "Seç", "<< Geri");
    if(!IsNumeric(inputtext)) return Dialog_Show(playerid, DialogIhbarAraSlot, DIALOG_STYLE_INPUT, "Ýhbar Arama", "Sayýsal bir deðer girin.\nAþaðýdaki kutucuða arama yapacaðýnýz telefonun bulunduðu slot numarasýný girin:", "Tamam", "<< Geri");
    new slot = strval(inputtext) - 1;
    if(slot <= 0 || slot >= MAX_INVENTORY_ITEMS)return Dialog_Show(playerid, DialogIhbarAraSlot, DIALOG_STYLE_INPUT, "Ýhbar Arama", "Geçersiz deðer girdiniz.\nAþaðýdaki kutucuða arama yapacaðýnýz telefonun bulunduðu slot numarasýný girin:", "Tamam", "<< Geri");
    new listid = PlayerInfo[playerid][pInvList][slot];
    if(InventoryObjects[listid][invType] != ITEM_PHONE)return Dialog_Show(playerid, DialogIhbarAraSlot, DIALOG_STYLE_INPUT, "Ýhbar Arama", "Belirttiðiniz slotta telefon yok.\nAþaðýdaki kutucuða arama yapacaðýnýz telefonun bulunduðu slot numarasýný girin:", "Tamam", "<< Geri");
    PlayerInfo[playerid][pPhoneID] = slot;
    new ihbarNo = IhbarInfo[PlayerInfo[playerid][pIhbarSecenek]][ihbarNumara];
    Phone_CallInit(playerid, ihbarNo);
    return 1;
}

Dialog:DialogMDCCezaAra(playerid, response, listitem, inputtext[]) {
    if(!response) return pc_cmd_mdc(playerid, NULL);
    if(response) {
        // new query[150];
        strreplace(inputtext,'_', ' ');
        mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT * FROM police_fine_records WHERE target = '%e'", inputtext);
        mysql_tquery(ourConnection, queryx, "CezaArama", "d", playerid);
    }
    return 1;
}

Dialog:DialogMDCSabikaAra(playerid, response, listitem, inputtext[]) {
    if(!response) return pc_cmd_mdc(playerid, NULL);
    if(response) {
        // new query[150];
        mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT * FROM police_arrest_records WHERE target = '%e' ORDER BY id ASC", inputtext);
        mysql_tquery(ourConnection, queryx, "OnCRSearch", "ds", playerid, inputtext);
    }
    return 1;
}

Dialog:DialogMDCSabikaEkleIsim(playerid, response, listitem, inputtext[]) {
    if(!response) return pc_cmd_mdc(playerid, NULL);
    if(response)
    {
        new id = -1;

        if(IsNumeric(inputtext) && strval(inputtext) != -1)
        {
            id = strval(inputtext);

            if(!IsPlayerConnected(id) || !PlayerInfo[id][pLogged])return
                HataMesajiC(playerid, "Geçersiz ID.");

            mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT * FROM characters WHERE id = '%d'", PlayerInfo[id][pID]);
            new name[MAX_PLAYER_NAME];
            GetPlayerName(id, name, MAX_PLAYER_NAME);
            format(PlayerInfo[playerid][pTargetName], MAX_PLAYER_NAME, "%s", name);
            Dialog_Show(playerid, DialogAddReport, DIALOG_STYLE_INPUT, "Sabýka kaydý ekle", "%s kiþisine uygulanan iþlemi belirtin:", "Tamamla", "Geri", ReturnRoleplayName(id));
        }
        else {
            mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT * FROM characters WHERE char_name = '%e' AND deleted = 0 AND banned = 0 AND deleted_at IS NULL", inputtext);
            mysql_query(ourConnection, queryx, true);
            static rows;
            cache_get_row_count(rows);
            if(rows) {
                format(PlayerInfo[playerid][pTargetName], MAX_PLAYER_NAME, "%s", inputtext);
                Dialog_Show(playerid, DialogAddReport, DIALOG_STYLE_INPUT, "Sabýka kaydý ekle", "%s kiþisine uygulanan iþlemi belirtin:", "Tamamla", "", inputtext);
            }
            else
                HataMesajiC(playerid, "Oyuncu bulunamadý.");
        }
    }
    return 1;
}

Dialog:DialogMDCSearchPlayer(playerid, response, listitem, inputtext[])
{
    if(!response)return
        pc_cmd_mdc(playerid, NULL);

    new item[24];
    format(item, sizeof(item), inputtext);

    return MDC_SearchCitizen(playerid, item);
}

Dialog:DialogMDCSearchPlate(playerid, response, listitem, inputtext[])
{
    if(!response) return
        pc_cmd_mdc(playerid, NULL);

    new item[24];
    format(item, sizeof(item), inputtext);

    return MDC_SearchVehiclePlate(playerid, item);
}

Dialog:DialogMDCSearchNumber(playerid, response, listitem, inputtext[])
{
    if(!response)return
        pc_cmd_mdc(playerid, NULL);

    new number = strval(inputtext);

    return MDC_SearchPhoneNumber(playerid, number);
}

Dialog:DialogMDCSearchBiz(playerid, response, listitem, inputtext[])
{
    if(!response)return
        pc_cmd_mdc(playerid, NULL);

    new item[32];
    format(item, sizeof(item), inputtext);

    return MDC_SearchBiz(playerid, item);
}

Dialog:DialogMDCSearchHouse(playerid, response, listitem, inputtext[])
{
    if(!response)return
        pc_cmd_mdc(playerid, NULL);

    new houseid = strval(inputtext);

    return MDC_SearchHouse(playerid, houseid);
}

Dialog:Dialog19P(playerid, response, listitem, inputtext[])
{
    if(!response)return 0;

    switch(listitem)
    {
        case 0: return 1;
        case 1:
        {
            new stringPoints[48], string[1024] = "Ürün\tsa-point\n";
            format(stringPoints, sizeof(stringPoints), "%d tane sa-pointe sahipsin.", PlayerInfo[playerid][pCoyn]);

            for(new j, js = sizeof(AwardsList); j < js; j++)
                format(string, sizeof(string), "%s%s\t%d\n", string, AwardsList[j][awardName], AwardsList[j][awardCoyns]);

            Dialog_Show(playerid, Dialog19PBuy, DIALOG_STYLE_TABLIST_HEADERS, stringPoints, string, "Satýn Al", "Geri");
        }
        case 2: ShowCoynAdvantages(playerid);
        case 3:
        {
            if(PlayerInfo[playerid][pCoyn] < 100 && PlayerInfo[playerid][pPremium] != 5)
                return Dialog_Show(playerid, DialogNull, DIALOG_STYLE_MSGBOX, "SA-Point", "Hesabýnýzda %d adet SA-Point bulunmaktadýr. SA-Point transferi için hesabýnýzda en az 100 adet SA-Point bulunmalýdýr.\nTransfer iþlemi sýrasýnda sunucu tarafýndan yüzde 40 komisyon alýnmaktadýr.\nBu orana göre 100 SA-Point aktarýrsanýz diðer kullanýcýya 60 adet SA-Point transfer edilir.\nBu iþlemin geri dönüþü yoktur! OOC para karþýlýðý SA-Point transferi yapýlmasý ban sebebidir.", "OK", "", PlayerInfo[playerid][pCoyn]);

            else if(PlayerInfo[playerid][pCoyn] < 100 && PlayerInfo[playerid][pPremium] == 5)
                return Dialog_Show(playerid, DialogNull, DIALOG_STYLE_MSGBOX, "SA-Point", "Hesabýnýzda %d adet SA-Point bulunmaktadýr. SA-Point transferi için hesabýnýzda en az 100 adet SA-Point bulunmalýdýr.\nDiamond Donator kullanýcýlardan transfer için komisyon alýnmamaktadýr.\nBu iþlemin geri dönüþü yoktur! OOC para karþýlýðý SA-Point transferi yapýlmasý ban sebebidir.", "OK", "", PlayerInfo[playerid][pCoyn]);

            if(PlayerInfo[playerid][pPremium] != 5) Dialog_Show(playerid, Dialog19PTransfer, DIALOG_STYLE_INPUT, "SA-Point", "Hesabýnýzda %d adet SA-Point bulunmaktadýr.\nTransfer iþlemi sýrasýnda sunucu tarafýndan yüzde 40 komisyon alýnmaktadýr.\nMantýken 100 SA-Point aktarýrsanýz 60 adet SA-Point transfer edilir.\nBu iþlemin geri dönüþü yoktur! OOC para karþýlýðý SA-Point transferi yapýlmasý ban sebebidir.\n\nAþaðýdaki kutucuða aktarým yapmak istediðiniz kiþinin adýný ve SA-Point miktarýný girin. (Format: Marvellous_Test 100)", "Gönder", "Ýptal", PlayerInfo[playerid][pCoyn]);
            else Dialog_Show(playerid, Dialog19PTransfer, DIALOG_STYLE_INPUT, "SA-Point", "Hesabýnýzda %d adet SA-Point bulunmaktadýr.\nDiamond Donator kullanýcýlardan transfer için komisyon alýnmamaktadýr.\nBu iþlemin geri dönüþü yoktur! OOC para karþýlýðý SA-Point transferi yapýlmasý ban sebebidir.\n\nAþaðýdaki kutucuða aktarým yapmak istediðiniz kiþinin adýný ve SA-Point miktarýný girin. (Format: Marvellous_Test 100)", "Gönder", "Ýptal", PlayerInfo[playerid][pCoyn]);
        }
        case 4: Dialog_Show(playerid, 19pSatinAl, DIALOG_STYLE_INPUT, "SA-Point Satýn Al", "1 adet SA-Point ($5000)\nAþaðýya satýn almak istediðiniz SA-Point tutarýný girin.", "Satýn al", "Ýptal");
        case 5:
        {
            if(PlayerInfo[playerid][pPremium] == 0)return
            HataMesajiC(playerid, "Donator sahibi deðilsin, neden iade etmeye çalýþýyorsun?");
            
            Dialog_Show(playerid, DialogDonatorIade, DIALOG_STYLE_INPUT, "Donator Ýade Ýþlemleri", "Sahip olduðun donatorý yarý fiyatýna sisteme iade etmek istediðine emin misin? Eðer eminsen aþaðýdaki kutucuða EVET yaz.", "Onay", "Ýptal");
        }
    }

    return 1;
}

Dialog:Dialog19PTransfer(playerid, response, listitem, inputtext[])
{
    if(!response)return
        pc_cmd_sanpoint(playerid, NULL);

    new id, amount, amountx, kalanpara, yenipara;

    if(PlayerInfo[playerid][pPremium] != 5)
    {
        if(sscanf(inputtext, "k<m>d", id, amount))return
            Dialog_Show(playerid, Dialog19PTransfer, DIALOG_STYLE_INPUT, "SA-Point", "Hatalý format giriþi tespit edildi.\n\nHesabýnýzda %d adet SA-Point bulunmaktadýr.\nTransfer iþlemi sýrasýnda sunucu tarafýndan yüzde 40 komisyon alýnmaktadýr.\nBu orana göre 100 SA-Point aktarýrsanýz diðer kullanýcýya 60 adet SA-Point transfer edilir.\nBu iþlemin geri dönüþü yoktur! OOC para karþýlýðý SA-Point transferi yapýlmasý ban sebebidir.\n\nAþaðýdaki kutucuða aktarým yapmak istediðiniz kiþinin adýný ve SA-Point miktarýný girin. (Format: Marvellous_Test 100)", "Gönder", "Ýptal", PlayerInfo[playerid][pCoyn]);

        if(!IsPlayerConnected(id) || id == playerid)return
            Dialog_Show(playerid, Dialog19PTransfer, DIALOG_STYLE_INPUT, "SA-Point", "Hatalý karakter adý belirttiniz.\n\nHesabýnýzda %d adet SA-Point bulunmaktadýr.\nTransfer iþlemi sýrasýnda sunucu tarafýndan yüzde 40 komisyon alýnmaktadýr.\nBu orana göre 100 SA-Point aktarýrsanýz diðer kullanýcýya 60 adet SA-Point transfer edilir.\nBu iþlemin geri dönüþü yoktur! OOC para karþýlýðý SA-Point transferi yapýlmasý ban sebebidir.\n\nAþaðýdaki kutucuða aktarým yapmak istediðiniz kiþinin adýný ve SA-Point miktarýný girin. (Format: Marvellous_Test 100)", "Gönder", "Ýptal", PlayerInfo[playerid][pCoyn]);

        if(amount < 100 || amount <= 0) return HataMesajiC(playerid, "Hatalý format giriþi tespit edildi.");
        if(PlayerInfo[playerid][pCoyn] < amount) return HataMesajiC(playerid, "Hatalý format giriþi tespit edildi.");

        kalanpara = PlayerInfo[playerid][pCoyn] - amount;
        amountx = amount * 60 / 100; // yuzde 40 komisyon
        yenipara = PlayerInfo[id][pCoyn] + amountx;

        PlayerInfo[playerid][pCoyn] = kalanpara;
        PlayerInfo[id][pCoyn] = yenipara;

        SunucuMesaji(id, "%s (ID: %d) kiþisi size %d adet SA-Point transfer etti, iyi eðlenceler.", ReturnRoleplayName(playerid), playerid, amountx);
        SunucuMesaji(playerid, "%s (ID: %d) kiþisine %d adet SA-Point transfer ettin. Kesilen tutar: %d adet SA-Point", ReturnRoleplayName(id), id, amountx, amount - amountx);
        LogYaz(playerid, "19Transfer", id, amountx);
    }
    else
    {
        if(sscanf(inputtext, "k<m>d", id, amount))return
            Dialog_Show(playerid, Dialog19PTransfer, DIALOG_STYLE_INPUT, "SA-Point", "Hatalý format giriþi tespit edildi.\n\nHesabýnýzda %d adet SA-Point bulunmaktadýr.\nDiamond Donator kullanýcýlardan transfer için komisyon alýnmamaktadýr.\nBu iþlemin geri dönüþü yoktur! OOC para karþýlýðý SA-Point transferi yapýlmasý ban sebebidir.\n\nAþaðýdaki kutucuða aktarým yapmak istediðiniz kiþinin adýný ve SA-Point miktarýný girin. (Format: Marvellous_Test 100)", "Gönder", "Ýptal", PlayerInfo[playerid][pCoyn]);

        if(!IsPlayerConnected(id) || id == playerid)return
            Dialog_Show(playerid, Dialog19PTransfer, DIALOG_STYLE_INPUT, "SA-Point", "Hatalý karakter adý belirttiniz.\n\nHesabýnýzda %d adet SA-Point bulunmaktadýr.\nDiamond Donator kullanýcýlardan transfer için komisyon alýnmamaktadýr.\nBu iþlemin geri dönüþü yoktur! OOC para karþýlýðý SA-Point transferi yapýlmasý ban sebebidir.\n\nAþaðýdaki kutucuða aktarým yapmak istediðiniz kiþinin adýný ve SA-Point miktarýný girin. (Format: Marvellous_Test 100)", "Gönder", "Ýptal", PlayerInfo[playerid][pCoyn]);

        if(amount < 100 || amount <= 0) return HataMesajiC(playerid, "Hatalý format giriþi tespit edildi.");
        if(PlayerInfo[playerid][pCoyn] < amount) return HataMesajiC(playerid, "Hatalý format giriþi tespit edildi.");

        kalanpara = PlayerInfo[playerid][pCoyn] - amount;
        yenipara = PlayerInfo[id][pCoyn] + amount;

        PlayerInfo[playerid][pCoyn] = kalanpara;
        PlayerInfo[id][pCoyn] = yenipara;

        SunucuMesaji(id, "%s (ID: %d) kiþisi size %d adet SA-Point transfer etti, iyi eðlenceler.", ReturnRoleplayName(playerid), playerid, amount);
        SunucuMesaji(playerid, "%s (ID: %d) kiþisine %d adet SA-Point transfer ettin.", ReturnRoleplayName(id), id, amount);
        LogYaz(playerid, "19TransferDia", id, amountx);
    }
    return 1;
}

Dialog:Dialog19PUse(playerid, response, listitem, inputtext[])
{
    if(!response)return
        pc_cmd_sanpoint(playerid, NULL);

    switch(listitem)
    {
        case 0:
        {
            if(PlayerInfo[playerid][pNumberChange] < 1) return
                SunucuMesaji(playerid, "Telefon numarasý deðiþikliði hakkýn yok.");

            if(Inventory_HasItem(playerid, "Cep Telefonu", ITEM_PHONE) == -1) return
                SunucuMesaji(playerid, "Cep telefonun yok.");

            Dialog_Show(playerid, Dialog19PNumber, DIALOG_STYLE_INPUT, "Telefon numarasý deðiþtir", "Telefonun bulunduðu slotu ve yeni numaranýzý girin: (( Örnek: 5 142562 ))", "deðiþtir", "Geri");
        }
        case 1: Dialog_Show(playerid, Dialog19PName, DIALOG_STYLE_INPUT, "Ýsim Deðiþikliði", "Ýsim deðiþikliði hakkýný kullanýyorsun.\nYeni isminizi girin. (Örnek: Peter_Puncho)", "Ýleri", "Geri");
        case 2:
        {
            new vid = GetPlayerVehicleID(playerid);

            if(!IsPlayerInAnyVehicle(playerid) || VehicleInfo[vid][vOwner] != PlayerInfo[playerid][pID]) return
                SunucuMesaji(playerid, "Plakayý deðiþtirmek için aracýnda olmalýsýn.");

            Dialog_Show(playerid, Dialog19PPlate, DIALOG_STYLE_INPUT, "Plaka deðiþtir", "Yeni plakayý girin.\n 4 ile 12 karakter arasýnda karakter kullanýn.", "Devam", "Geri");
        }
        default: return 1;
    }

    return 1;
}

Dialog:Dialog19PName(playerid, response, listitem, inputtext[])
{
    if(!response)return
        ShowCoynAdvantages(playerid);

    if(PlayerInfo[playerid][pNickChange] < 1)return
        SunucuMesaji(playerid, "Ýsim deðiþikliði hakkýna sahip deðilsin.");

    if(!IsValidRoleplayName(inputtext) || strlen(inputtext) > 20)return
        SunucuMesaji(playerid, "Geçersiz isim girdiniz.");

    format(PlayerInfo[playerid][pTempName], MAX_PLAYER_NAME, inputtext);

    mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT * FROM characters WHERE char_name = '%e'", inputtext);
    mysql_tquery(ourConnection, queryx, "OnNCCharacterSearch", "d", playerid);
    return 1;
}

Dialog:DialogNameChange(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        if(!IsValidRoleplayName(inputtext) || strlen(inputtext) > 20)return
            SunucuMesaji(playerid, "Geçersiz isim girdiniz.");

        format(PlayerInfo[playerid][pTempName], MAX_PLAYER_NAME, inputtext);

        mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT * FROM characters WHERE char_name = '%e'", inputtext);
        mysql_tquery(ourConnection, queryx, "OnNCCharacterSearch", "d", playerid);
    }
    return 1;
}
Dialog:DialogBelesNameChange(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        if(!IsValidRoleplayName(inputtext) || strlen(inputtext) > 20)return
            SunucuMesaji(playerid, "Geçersiz isim girdiniz.");

        format(PlayerInfo[playerid][pTempName], MAX_PLAYER_NAME, inputtext);

        mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT * FROM characters WHERE char_name = '%e'", inputtext);
        mysql_tquery(ourConnection, queryx, "OnBelesNCCharacterSearch", "d", playerid);
    }
    return 1;
}
Dialog:Dialog19PNumber(playerid, response, listitem, inputtext[])
{
    if(!response)return
        ShowCoynAdvantages(playerid);

    new slot;
    new number;
    new listid;

    if(sscanf(inputtext, "dd", slot, number) > 0)return
        Dialog_Show(playerid, Dialog19PNumber, DIALOG_STYLE_INPUT, "Telefon numarasý deðiþtir", "Telefonun bulunduðu slotu ve yeni numaranýzý girin: (( Örnek: 5 142562 ))", "deðiþtir", "Geri");

    if(number < 100000 || number > 999999) return
        Dialog_Show(playerid, DialogNull, DIALOG_STYLE_MSGBOX, "Telefon numarasý deðiþtir", "Geçersiz telefon numarasý girildi.\n2 ile 6 arasýnda bir deðer kullanýn.\n\nTelefonun bulunduðu slotu ve yeni numaranýzý girin: (( Örnek: 5 142562 ))", "Ýleri", "");

    slot--; listid = PlayerInfo[playerid][pInvList][slot];

    if(InventoryObjects[listid][invType] != ITEM_PHONE) return
        Dialog_Show(playerid, DialogNull, DIALOG_STYLE_MSGBOX, "Telefon numarasý deðiþtir", "Bu slotta cep telefonu yok.\nCep telefonunun bulunduðu slotu gir.\n\nTelefonun bulunduðu slotu ve yeni numaranýzý girin: (( Örnek: 5 142562 ))", "Ýleri", "");

    // new query[90];

    mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT * FROM phones WHERE number = '%d'", number);
    mysql_tquery(ourConnection, queryx, "OnNumberChangeSearch", "ddd", playerid, number, slot);

    return 1;
}

Dialog:Dialog19PPlate(playerid, response, listitem, inputtext[])
{
    if(!response)return
        ShowCoynAdvantages(playerid);

    if(PlayerInfo[playerid][pPlateChange] < 1)return
        SunucuMesaji(playerid, "Yeterli plaka deðiþikliði hakkýna sahip deðilsin.");

    new vid = GetPlayerVehicleID(playerid);

    if(!IsPlayerInAnyVehicle(playerid) || VehicleInfo[vid][vOwner] != PlayerInfo[playerid][pID])return
        SunucuMesaji(playerid, "Plakayý deðiþtirmek için sahip olduðunuz araçta olmalýsýnýz.");

    new plate[13];

    if(sscanf(inputtext, "s[13]", plate)) return
        Dialog_Show(playerid, Dialog19PPlate, DIALOG_STYLE_INPUT, "Plaka deðiþtir", "Yeni plakayý girin.\n 4 ile 12 karakter arasýnda karakter kullanýn.", "Devam", "Geri");

    if(strlen(plate) < 4 || strlen(plate) > 12) return
        Dialog_Show(playerid, Dialog19PPlate, DIALOG_STYLE_INPUT, "Plaka deðiþtir", "Yeni plakayý girin.\n 4 ile 12 karakter arasýnda karakter kullanýn.", "Devam", "Geri");

    mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT * FROM vehicles WHERE plate = '%e'", plate);
    mysql_tquery(ourConnection, queryx, "OnPlateChangeSearch", "dsd", playerid, plate, vid);

    return 1;
}

Dialog:Dialog19PBuy(playerid, response, listitem, inputtext[])
{
    if(!response)return
        pc_cmd_sanpoint(playerid, NULL);

    if(PlayerInfo[playerid][pCoyn] < AwardsList[listitem][awardCoyns])return
        SunucuMesajiC(playerid, "Yeterli SA-Point tutarýna sahip deðilsin.");

    SetPVarInt(playerid, "19ponay", listitem);
    Dialog_Show(playerid, Dialog19PBuyOnay, DIALOG_STYLE_INPUT, "SA-Point Onay Sistemi", "Bu ürünü satýn almak istediðinize emin misiniz? Aþaðýdaki kutucuða 'EVET' yazýn.", "Onay", "Geri");
    return 1;
}

Dialog:Dialog19PBuyOnay(playerid, response, listitem, inputtext[])
{
    new secenek = GetPVarInt(playerid, "19ponay");
    DeletePVar(playerid, "19ponay");

    if(!response)return
        pc_cmd_sanpoint(playerid, NULL);

    if(isnull(inputtext)) return HataMesajiC(playerid, "Hatalý onay kodu giriþi, iþlem baþarýsýz.");

    if(!strcmp("EVET", inputtext, true))
    {
        switch(secenek)
        {
            case 0:
            {
                PlayerInfo[playerid][pNumberChange]++;
                SunucuMesajiC(playerid, "Numara deðiþikliði satýn aldýn, kullanmak için /sanpoint yaz.");
            }
            case 1:
            {
                PlayerInfo[playerid][pNickChange]++;
                SunucuMesajiC(playerid, "Ýsim deðiþikliði satýn aldýn, kullanmak için /sanpoint yaz.");
            }
            case 2:
            {
                PlayerInfo[playerid][pPlateChange]++;
                SunucuMesajiC(playerid, "Plaka deðiþikliði satýn aldýn, kullanmak için /sanpoint yaz.");
            }

            case 3:
            {
                if(PlayerInfo[playerid][pTogPMPremium])return
                    SunucuMesajiC(playerid, "Zaten /pmdurum komutuna sahipsin.");

                PlayerInfo[playerid][pTogPMPremium] = 1;
                SunucuMesaji(playerid, "Artýk /pm almayý durdurabilirsin. (/pmdurum) (%s)", ReturnDate());
            }
            case 4:
            {
                if(PlayerInfo[playerid][pTogOOCPremium])return
                    SunucuMesajiC(playerid, "Zaten /bdurum komutuna sahipsin.");

                PlayerInfo[playerid][pTogOOCPremium] = 1;
                SunucuMesaji(playerid, "Artýk /b kanalýný kapatabilirsin. (/bdurum) (%s)", ReturnDate());
            }
            case 5:
            {
                if(PlayerInfo[playerid][pBMXPermission])return
                    SunucuMesajiC(playerid, "Zaten bisiklet kullaným iznin var.");

                PlayerInfo[playerid][pBMXPermission] = 1;
                SunucuMesaji(playerid, "Artýk bisiklet satýn alabilirsin. (%s)", ReturnDate());
            }
            case 6:
            {
                //if(PlayerInfo[playerid][pLevel] >= 50)return
                    //SunucuMesajiC(playerid, "50 seviyeyi geçmiþsin, Seviye Atlama Plus kullan.");

                PlayerInfo[playerid][pLevel]++;
                PlayerInfo[playerid][pExperience] = 0;
    //pasif         PlayerInfo[playerid][pUpgradePoints] += 2;
                SetPlayerScore(playerid, PlayerInfo[playerid][pLevel]);
                SendFormattedMessage(playerid, COLOR_WHITE, "SA-Point karþýlýðýnda seviye atladýn. (%d) (%s)", PlayerInfo[playerid][pLevel], ReturnDate());
                SendFormattedMessage(playerid, COLOR_WHITE, "Seviye atladýðýn için $2.000 seviye bonusu kazandýn.");
                AC_GivePlayerMoney(playerid, 2000, "SeviyeAtlamaBonusu");
            }
            case 7:
            {
                if(PlayerInfo[playerid][pPremium] >= 1) return HataMesajiC(playerid, "Bronze veya üstü donator olduðun için herhangi bir Lead Admin ile iletiþime geçmelisin.");
                else
                {
                    PlayerInfo[playerid][pPremium] = 1;
                    SunucuMesaji(playerid, "Tebrikler. Bronze donator oldun. (%s)", ReturnDate());
                }

                PlayerInfo[playerid][pNickChange]++;
                PlayerInfo[playerid][pNumberChange]++;
                PlayerInfo[playerid][pPlateChange]++;
                PlayerInfo[playerid][pTogOOCPremium] = 1;
                PlayerInfo[playerid][pBMXPermission] = 1;
                PlayerInfo[playerid][pTogPMPremium] = 1;
                foreach(new j : Player)
                {
                    if(!IsPlayerConnected(j))continue;
                    SendFormattedMessage(j, COLOR_LIGHTRED, "%s, Bronze Donator oldu!", ReturnRoleplayName(playerid));
                }
            }
            case 8:
            {
                if(PlayerInfo[playerid][pPremium] > 2) return HataMesajiC(playerid, "Silver veya üstü donator olduðun için herhangi bir Lead Admin ile iletiþime geçmelisin.");
                else
                {
                    PlayerInfo[playerid][pPremium] = 2;
                    SunucuMesaji(playerid, "Tebrikler. Silver donator oldun. (%s)", ReturnDate());
                }

                PlayerInfo[playerid][pNickChange] += 2;
                PlayerInfo[playerid][pNumberChange] += 2;
                PlayerInfo[playerid][pPlateChange] += 2;
                PlayerInfo[playerid][pTogOOCPremium] = 1;
                PlayerInfo[playerid][pBMXPermission] = 1;
                PlayerInfo[playerid][pTogPMPremium] = 1;
                foreach(new j : Player)
                {
                    if(!IsPlayerConnected(j))continue;
                    SendFormattedMessage(j, COLOR_GREY, "%s, Silver Donator oldu!", ReturnRoleplayName(playerid));
                }
            }
            case 9:
            {
                if(PlayerInfo[playerid][pPremium] == 3) return HataMesajiC(playerid, "Gold Donator olduðun için herhangi bir Lead Admin ile iletiþime geçmelisin.");
                else
                {
                    PlayerInfo[playerid][pPremium] = 3;
                    SunucuMesaji(playerid, "Tebrikler. Gold donator oldun. (%s)", ReturnDate());
                }

                PlayerInfo[playerid][pNickChange] += 3;
                PlayerInfo[playerid][pNumberChange] += 3;
                PlayerInfo[playerid][pPlateChange] += 3;
                PlayerInfo[playerid][pTogOOCPremium] = 1;
                PlayerInfo[playerid][pBMXPermission] = 1;
                PlayerInfo[playerid][pTogPMPremium] = 1;
                mysql_format(ourConnection, queryx, sizeof(queryx), "UPDATE accounts SET modelh = modelh + '1' WHERE username = '%e'", PlayerInfo[playerid][pUsername]);
                mysql_tquery(ourConnection, queryx);
                foreach(new j : Player)
                {
                    if(!IsPlayerConnected(j))continue;
                    SendFormattedMessage(j, COLOR_YELLOW, "%s, Gold Donator oldu!", ReturnRoleplayName(playerid));
                }
            }
            case 10:
            {
                if(PlayerInfo[playerid][pPremium] == 4) return HataMesajiC(playerid, "Platinum Donator olduðun için herhangi bir Lead Admin ile iletiþime geçmelisin.");
                else
                {
                    PlayerInfo[playerid][pPremium] = 4;
                    SunucuMesaji(playerid, "Tebrikler. Platinum donator oldun. (%s)", ReturnDate());
                }

                PlayerInfo[playerid][pNickChange] += 4;
                PlayerInfo[playerid][pNumberChange] += 4;
                PlayerInfo[playerid][pPlateChange] += 4;
                PlayerInfo[playerid][pTogOOCPremium] = 1;
                PlayerInfo[playerid][pBMXPermission] = 1;
                PlayerInfo[playerid][pTogPMPremium] = 1;
                mysql_format(ourConnection, queryx, sizeof(queryx), "UPDATE accounts SET modelh = modelh + '2', fnc = fnc + '2' WHERE username = '%e'", PlayerInfo[playerid][pUsername]);
                mysql_tquery(ourConnection, queryx);
                foreach(new j : Player)
                {
                    if(!IsPlayerConnected(j))continue;
                    SendFormattedMessage(j, COLOR_PURPLE, "%s, Platinum Donator oldu!", ReturnRoleplayName(playerid));
                }
            }
            case 11:
            {
                if(PlayerInfo[playerid][pPremium] == 5) return HataMesajiC(playerid, "Diamond Donator olduðun için herhangi bir Lead Admin ile iletiþime geçmelisin.");
                else
                {
                    PlayerInfo[playerid][pPremium] = 5;
                    SunucuMesaji(playerid, "Tebrikler. Diamond donator oldun. (%s)", ReturnDate());
                }
                PlayerInfo[playerid][pNickChange] += 5;
                PlayerInfo[playerid][pNumberChange] += 5;
                PlayerInfo[playerid][pPlateChange] += 5;
                PlayerInfo[playerid][pTogOOCPremium] = 1;
                PlayerInfo[playerid][pBMXPermission] = 1;
                PlayerInfo[playerid][pTogPMPremium] = 1;
                mysql_format(ourConnection, queryx, sizeof(queryx), "UPDATE accounts SET modelh = modelh + '3', fnc = fnc + '3' WHERE username = '%e'", PlayerInfo[playerid][pUsername]);
                mysql_tquery(ourConnection, queryx);
                foreach(new j : Player)
                {
                    if(!IsPlayerConnected(j))continue;
                    SendFormattedMessage(j, COLOR_LIGHTBLUE, "%s, Diamond Donator oldu!", ReturnRoleplayName(playerid));
                }
            }
            case 12:
            {
                SunucuMesaji(playerid, "Gate alma iþlemleri için panelden destek bildirimi gönderin.");
                return 1;
            }
            case 13:
            {
                SunucuMesaji(playerid, "Harita ekletmek için panelden destek bildirimi gönderin.");
                return 1;
            }
            case 14:
            {
                SunucuMesaji(playerid, "%s için model hakký satýn aldýnýz, F8 tuþuna basarak ekran görüntüsü almalýsýnýz. [%s]", PlayerInfo[playerid][pUsername], ReturnDate());
                SunucuMesaji(playerid, "Model (skin-obje) ekletmek için kullanýcý kontrol panelinden destek bildirimi gönderin.");
                SunucuMesaji(playerid, "Sadece LQ modeller, 72 saat içerisinde talebiniz incelenir ve güncelleme ile model eklenir.");
                mysql_format(ourConnection, queryx, sizeof(queryx), "UPDATE accounts SET modelh = modelh + '1' WHERE username = '%e'", PlayerInfo[playerid][pUsername]);
                mysql_tquery(ourConnection, queryx);
            }
            case 15: {
                SunucuMesaji(playerid, "Trucker gelirinizi sýfýrladýnýz.");
                PlayerInfo[playerid][KamyoncuGeliri] = 0;
            }
            case 16: {
                if(!PlayerInfo[playerid][DoublePayday])
                {
                    SunucuMesaji(playerid, "2X Payday hakký satýn aldýnýz.");
                    PlayerInfo[playerid][DoublePayday] = 1;
                }
                else return HataMesaji(playerid, "Zaten bu hakka sahipsiniz.");
            }
            case 17: {
                mysql_format(ourConnection, queryx, sizeof(queryx), "UPDATE accounts SET fnc = fnc + '1' WHERE username = '%e'", PlayerInfo[playerid][pUsername]);
                mysql_tquery(ourConnection, queryx);
                SunucuMesaji(playerid, "%s için forum adý deðiþikliði hakký satýn aldýnýz. (%s)", PlayerInfo[playerid][pUsername], ReturnDate());
                SunucuMesaji(playerid, "Ekran görüntüsü alarak panel üzerinden destek bildirimi gönderin.");
            }
            case 18: {
                SunucuMesaji(playerid, "TP noktasý iþlemleri için panelden destek bildirimi gönderin.");
                return 1;
            }
            case 19:
            {
                SunucuMesaji(playerid, "Trucker yakýt gelirinizi sýfýrladýnýz.");
                PlayerInfo[playerid][pYakitGelir] = 0;
            }
            case 20:
            {
                PlayerInfo[playerid][pLicenses][0] = 1;
                SunucuMesajiC(playerid, "SA-Point karþýlýðýnda sürücü lisansý aldýn.");
            }
            case 21:
            {
                PlayerInfo[playerid][pLicenses][1] = 1;
                SunucuMesajiC(playerid, "SA-Point karþýlýðýnda denizcilik lisansý aldýn.");
            }
            case 22:
            {
                PlayerInfo[playerid][pLicenses][2] = 1;
                SunucuMesajiC(playerid, "SA-Point karþýlýðýnda uçuþ lisansý aldýn.");
            }
            case 23:
            {
                PlayerInfo[playerid][pLicenses][0] = 1;
                PlayerInfo[playerid][pLicenses][1] = 1;
                PlayerInfo[playerid][pLicenses][2] = 1;
                SunucuMesajiC(playerid, "SA-Point karþýlýðýnda üç lisansý da aldýn.");
            }
            case 24: { // Karakter Slotu
                if(PlayerInfo[playerid][pMaxSlot] < 6) {
                    PlayerInfo[playerid][pMaxSlot]++;
                    SunucuMesaji(playerid, "%s için karakter slotu hakký satýn aldýnýz. (%s)", PlayerInfo[playerid][pUsername], ReturnDate());
                }
                else return HataMesajiC(playerid, "Maksimum karakter slot sayýsýna ulaþmýþsýnýz.");
            }
            default: return 1;
        }

        PlayerInfo[playerid][pCoyn] -= AwardsList[secenek][awardCoyns];
        if(PlayerInfo[playerid][pPremium] == 3) PlayerInfo[playerid][pCoyn] += 7;
        if(PlayerInfo[playerid][pPremium] == 4) PlayerInfo[playerid][pCoyn] += 14;
        if(PlayerInfo[playerid][pPremium] == 5) PlayerInfo[playerid][pCoyn] += 15;
        
        SaveCharacter(playerid);
    }
    else HataMesajiC(playerid, "Hatalý onay kodu giriþi, iþlem baþarýsýz.");
    return 1;
}

Dialog:DialogGunLicense(playerid, response, listitem, inputtext[])
{
    if(!response)return 0;

    switch(listitem)
    {
        case 0: Dialog_Show(playerid, DialogGunGiveName, DIALOG_STYLE_INPUT, "Ýsmi girin", "CCW lisansý vermek için isim girin\n(( KULLANIM: isim_soyisim ))", "Ýleri", "Geri");
        case 1: Dialog_Show(playerid, DialogGunEditName, DIALOG_STYLE_INPUT, "Ýsmi girin", "CCW lisansýný deðiþtirmek istediðiniz kiþinin adýný girin.\n(( KULLANIM: isim_soyisim ))", "Ýleri", "Geri");
        case 2: Dialog_Show(playerid, DialogGunRemoveName, DIALOG_STYLE_INPUT, "Ýsmi girin", "CCW lisansýný iptal etmek istediðiniz kiþinin adýný girin.\n(( KULLANIM: isim_soyisim ))", "Ýleri", "Geri");
        case 3: Dialog_Show(playerid, DialogGunLogName, DIALOG_STYLE_INPUT, "Ýsmi girin", "CCW lisansýný kontrol etmek istediðiniz kiþinin adýný girin.\n(( KULLANIM: isim_soyisim ))", "Ýleri", "Geri");
    }

    return 1;
}

Dialog:DialogGunGiveName(playerid, response, listitem, inputtext[])
{
    if(!response) return
        pc_cmd_ccwlisansi(playerid, NULL);

    new id;

    if(sscanf(inputtext, "u", id))return
        Dialog_Show(playerid, DialogGunGiveName, DIALOG_STYLE_INPUT, "Ýsmi girin", "Silah lisansý vermek istediðiniz kiþinin ismini girin.\n(( KULLANIM: isim_soyisim ))\nHATA: Geçersiz isim girildi.", "Ýleri", "Geri");

    if(!IsPlayerConnected(id) || !ProxDetectorS(5.0, playerid, id) || !PlayerInfo[id][pLogged]) return
        Dialog_Show(playerid, DialogGunGiveName, DIALOG_STYLE_INPUT, "Ýsmi girin", "Silah lisansý vermek istediðiniz kiþinin ismini girin.\n(( KULLANIM: isim_soyisim ))\nHATA: Geçersiz isim girildi.", "Ýleri", "Geri");

    PlayerInfo[playerid][pWeaponsLicenseRequest] = id;
    Dialog_Show(playerid, DialogGunGiveType, DIALOG_STYLE_TABLIST_HEADERS, "Tipi seç", "Tip\tÜcret\nSivil\t$5000\nLEO\t$1000\n", "Ýleri", "Geri");

    return 1;
}

Dialog:DialogGunGiveType(playerid, response, listitem, inputtext[])
{
    if(!response) return
        Dialog_Show(playerid, DialogGunGiveName, DIALOG_STYLE_INPUT, "Ýsmi girin", "Silah lisansý vermek istediðiniz kiþinin ismini girin.\n(( KULLANIM: isim_soyisim ))", "Ýleri", "Geri");

    // new query[90];
    new p = PlayerInfo[playerid][pWeaponsLicenseRequest];

    mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT * FROM weapon_licenses WHERE receiver_id = '%d'", PlayerInfo[p][pID]);
    mysql_tquery(ourConnection, queryx, "OnWLicenseGiveSearch", "ddd", playerid, listitem, p);

    return 1;
}

Dialog:DialogGunRequest(playerid, response, listitem, inputtext[])
{
    new type = PlayerInfo[playerid][pWeaponsLicenseRequestInfo][0],
        senderid = PlayerInfo[playerid][pWeaponsLicenseRequestInfo][1],
        price = PlayerInfo[playerid][pWeaponsLicenseRequestInfo][2];

    static const strLicense[2][12] = {"sivil", "LEO"};

    if(PlayerInfo[playerid][pCash] < price)
    {
        HataMesaji(playerid, "%s kiþisi tarafýndan %s lisansýný kabul edecek paran yok. (Fiyat: $%d).", ReturnRoleplayName(senderid), strLicense[type], price);
        return SendFormattedMessage(senderid, COLOR_ERROR, "%s kiþisinin %s silah lisansý için yeterli parasý yok. ($%d).", ReturnRoleplayName(playerid), strLicense[type], price);
    }

    if(!IsPlayerConnected(senderid) || PlayerInfo[senderid][pWeaponsLicenseRequest] != playerid) return
        SunucuMesaji(playerid, "Bir hata oluþtu. Hata Kodu: #626");

    if(!response)
    {
        HataMesaji(playerid, "%s tarafýndan gönderilen %s lisansýný reddettin.", ReturnRoleplayName(senderid), strLicense[type]);
        return HataMesaji(senderid, "%s kiþisi %s lisansý talebini almayý reddetti.", ReturnRoleplayName(playerid), strLicense[type]);
    }

    BasariMesaji(playerid, "Tebrikler, %s lisansýný %s kiþisinden $%d karþýlýðýnda aldýn.", strLicense[type], ReturnRoleplayName(senderid), price);
    BasariMesaji(senderid, "%s, %s lisansýný $%d karþýlýðýnda almayý kabul etti.", ReturnRoleplayName(playerid), strLicense[type], price);

    SendFactionMessage(PlayerInfo[senderid][pFaction], "** HQ: %s %s kiþisi %s lisansýný %s kiþisine verdi.", fRanks[PlayerInfo[senderid][pFaction]][PlayerInfo[senderid][pRank] - 1], ReturnRoleplayName(senderid), strLicense[type], ReturnRoleplayName(playerid));

    // new query[512];

    AC_GivePlayerMoney(playerid, -price, "/ccwlisansi sat");
//    Faction_GovernmentCash(price);

    PlayerInfo[playerid][pWeaponsLicense][0] = type + 1;
    PlayerInfo[playerid][pWeaponsLicense][1] = gettime() + 86400 * 31;

    for(new i; i < 4; i++) PlayerInfo[playerid][pWeaponsLicenseGuns][i] = 0;

    mysql_format(ourConnection, queryx, sizeof(queryx), "INSERT INTO weapon_licenses (receiver_id, type, weapons, expires, created_at) VALUES ('%d', '%d', '0|0|0|0|', '%d', NOW())", PlayerInfo[playerid][pID], PlayerInfo[playerid][pWeaponsLicense][0], PlayerInfo[playerid][pWeaponsLicense][1]);
    mysql_tquery(ourConnection, queryx);

    mysql_format(ourConnection, queryx, sizeof(queryx), "INSERT INTO weapon_license_logs (officer_id, subject_id, action, created_at, value) VALUES ('%d', '%d', '%d', NOW(), '%d')", PlayerInfo[senderid][pID], PlayerInfo[playerid][pID], WEAPONLICENSE_ACTION_GIVE, PlayerInfo[playerid][pWeaponsLicense][0]);
    mysql_tquery(ourConnection, queryx);

    return 1;
}

Dialog:DialogGunRenew(playerid, response, listitem, inputtext[])
{
    new type = PlayerInfo[playerid][pWeaponsLicenseRequestInfo][0],
        senderid = PlayerInfo[playerid][pWeaponsLicenseRequestInfo][1],
        price = PlayerInfo[playerid][pWeaponsLicenseRequestInfo][2];

    static const strLicense[2][12] = {"sivil", "devlet"};

    if(PlayerInfo[playerid][pCash] < price)
    {
        HataMesaji(playerid, "%s tarafýndan gönderilen %s silah lisansýný yenileyecek paraya sahip deðilsin. ($%d)", ReturnRoleplayName(senderid), strLicense[type], price);
        return HataMesaji(senderid, "%s senin tarafýndan gönderilen %s silah lisansýný yenileyecek paraya sahip deðil. ($%d)", ReturnRoleplayName(playerid), strLicense[type], price);
    }

    if(!IsPlayerConnected(senderid) || PlayerInfo[senderid][pWeaponsLicenseRequest] != playerid) return
        SunucuMesaji(playerid, "CCW lisansýnýn yenilemesini kabul edemezsin.");

    if(!response)
    {
        HataMesaji(playerid, "%s tarafýndan gönderilen %s silah lisansýný yenileme isteðini reddettin. ($%d)", ReturnRoleplayName(senderid), strLicense[type], price);
        return SendFormattedMessage(senderid, COLOR_ERROR, "%s senin tarafýndan gönderilen %s silah lisansýný yenilemeyi reddetti. ($%d)", ReturnRoleplayName(playerid), strLicense[type], price);
    }

    BasariMesaji(playerid, "%s tarafýndan gönderilen %s silah lisansýný $%d karþýlýðýnda yeniledin.", ReturnRoleplayName(senderid), strLicense[type], price);
    BasariMesaji(senderid, "%s, senin tarafýndan gönderilen %s silah lisansý isteðini kabul etti. (Ücret: $%d)", ReturnRoleplayName(playerid), strLicense[type], price);
    SendFactionMessage(PlayerInfo[senderid][pFaction], "** HQ: %s %s %s adlý kiþinin %s silah lisansýný yeniledi.", fRanks[PlayerInfo[senderid][pFaction]][PlayerInfo[senderid][pRank] - 1], ReturnRoleplayName(senderid), ReturnRoleplayName(playerid), strLicense[type]);

    // new query[512];

    AC_GivePlayerMoney(playerid, -price, "/ccwlisansi yenile");
//    Faction_GovernmentCash(price);

    PlayerInfo[playerid][pWeaponsLicense][0] = type + 1;
    PlayerInfo[playerid][pWeaponsLicense][1] = gettime() + 86400 * 31;

    mysql_format(ourConnection, queryx, sizeof(queryx), "INSERT INTO weapon_license_logs (officer_id, subject_id, action, created_at, value) VALUES ('%d', '%d', '%d', NOW(), '%d')", PlayerInfo[senderid][pID], PlayerInfo[playerid][pID], WEAPONLICENSE_ACTION_RENEW, PlayerInfo[playerid][pWeaponsLicense][0]);
    mysql_tquery(ourConnection, queryx);

    return 1;
}

Dialog:DialogGunRemoveName(playerid, response, listitem, inputtext[])
{
    if(!response)return
        pc_cmd_ccwlisansi(playerid, NULL);

    new id = sscanf(inputtext, "u", id) ? -1 : PlayerInfo[id][pID];

    if(id == -1)
    {
        mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT id FROM characters WHERE char_name = '%e' AND banned = 0 AND deleted = 0 AND deleted_at IS NULL", inputtext);
        mysql_tquery(ourConnection, queryx, "OnWLicenseRemoveSearch", "ds", playerid, inputtext);
    }
    else
    {
        PlayerInfo[playerid][pWeaponsLicenseRequest] = id;
        Dialog_Show(playerid, DialogGunRemoveConfirm, DIALOG_STYLE_MSGBOX, "Ruhsat iptali", "%s kiþisinin ateþli CCW lisansýný iptal etmek istediðine emin misin?", "Ýleri", "Geri", inputtext);
    }

    return 1;
}

Dialog:DialogGunRemoveConfirm(playerid, response, listitem, inputtext[])
{
    if(!response) return
        pc_cmd_ccwlisansi(playerid, NULL);

    // new query[512];

    mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT id FROM weapon_licenses WHERE receiver_id = '%d'", PlayerInfo[playerid][pWeaponsLicenseRequest]);
    mysql_tquery(ourConnection, queryx, "OnWLicenseRemoveConfirm", "d", playerid);

    return 1;
}

Dialog:DialogGunEditName(playerid, response, listitem, inputtext[])
{
    if(!response) return
        pc_cmd_ccwlisansi(playerid, NULL);

    new id;

    if(sscanf(inputtext, "u", id))return
        Dialog_Show(playerid, DialogGunEditName, DIALOG_STYLE_INPUT, "Ýsmi girin", "CCW lisansýný deðiþtirmek istediðiniz kiþinin adýný girin.\n(( KULLANIM: isim_soyisim ))\nHATA: Geçersiz isim girildi.", "Ýleri", "Geri");

    if(!IsPlayerConnected(id) || !PlayerInfo[id][pLogged])return
        Dialog_Show(playerid, DialogGunEditName, DIALOG_STYLE_INPUT, "Ýsmi girin", "CCW lisansýný deðiþtirmek istediðiniz kiþinin adýný girin.\n(( KULLANIM: isim_soyisim ))\nHATA: Oyuncu baðlý deðil.", "Ýleri", "Geri");

    if(PlayerInfo[id][pWeaponsLicense][0] <= 0)return
        Dialog_Show(playerid, DialogGunEditName, DIALOG_STYLE_INPUT, "Ýsmi girin", "CCW lisansýný deðiþtirmek istediðiniz kiþinin adýný girin.\n(( KULLANIM: isim_soyisim ))\nHATA: %s CCW lisansýna sahip deðil.", "Ýleri", "Geri", ReturnRoleplayName(id));

    static const statusStr[2][10] = {"Hayýr", "Evet"};

    PlayerInfo[playerid][pWeaponsLicenseRequest] = id;

    Dialog_Show(playerid, DialogGunEditGun, DIALOG_STYLE_TABLIST_HEADERS, ReturnRoleplayName(id), "Silah\tSatýn Alýnabilir\nColt\t%s\nDesert Eagle\t%s\nShotgun\t%s\nCountry Rifle\t%s\n", "Düzenle", "Geri", statusStr[PlayerInfo[id][pWeaponsLicenseGuns][0]], statusStr[PlayerInfo[id][pWeaponsLicenseGuns][1]], statusStr[PlayerInfo[id][pWeaponsLicenseGuns][2]], statusStr[PlayerInfo[id][pWeaponsLicenseGuns][3]]);

    return 1;
}

Dialog:DialogGunEditGun(playerid, response, listitem, inputtext[])
{
    if(!response) return
        Dialog_Show(playerid, DialogGunEditName, DIALOG_STYLE_INPUT, "Ýsim Girin", "CCW lisansýný düzenlemek istediðiniz kiþinin adýný girin.\n(( KULLANIM: isim_soyisim ))", "Ýleri", "Geri");

    static const weaponName[4][16] = {"Colt", "Desert Eagle", "Shotgun", "Country rifle"};

    new id = PlayerInfo[playerid][pWeaponsLicenseRequest];

    PlayerInfo[id][pWeaponsLicenseGuns][listitem] = !PlayerInfo[id][pWeaponsLicenseGuns][listitem];

    new weapons_string[16];

    for(new i; i < 4; i++) format(weapons_string, sizeof(weapons_string), "%s%d|", weapons_string, PlayerInfo[id][pWeaponsLicenseGuns][i]);

    mysql_format(ourConnection, queryx, sizeof(queryx), "UPDATE weapon_licenses SET weapons = '%e' WHERE receiver_id = '%d'", weapons_string, PlayerInfo[id][pID]);
    mysql_tquery(ourConnection, queryx);

    mysql_format(ourConnection, queryx, sizeof(queryx), "INSERT INTO weapon_license_logs (officer_id, subject_id, action, created_at, value) VALUES ('%d', '%d', '%d', NOW(), '%d')", PlayerInfo[playerid][pID], PlayerInfo[id][pID], WEAPONLICENSE_ACTION_EDIT, listitem);
    mysql_tquery(ourConnection, queryx);

    SendFactionMessage(PlayerInfo[playerid][pFaction], "** HQ: %s %s kiþisi %s kiþisine %s silahýný %s kýldý.", fRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pRank] - 1], ReturnRoleplayName(playerid), ReturnRoleplayName(id), weaponName[listitem], (PlayerInfo[id][pWeaponsLicenseGuns][listitem]) ? ("alabilir") : ("alýnamaz"));

    static const statusStr[2][10] = {"Hayýr", "Evet"};

    Dialog_Show(playerid, DialogGunEditGun, DIALOG_STYLE_TABLIST_HEADERS, ReturnRoleplayName(id), "Silah\tSatýn Alýnabilir\nColt\t%s\nDesert Eagle\t%s\nShotgun\t%s\nCountry Rifle\t%s\n", "Düzenle", "Geri", statusStr[PlayerInfo[id][pWeaponsLicenseGuns][0]], statusStr[PlayerInfo[id][pWeaponsLicenseGuns][1]], statusStr[PlayerInfo[id][pWeaponsLicenseGuns][2]], statusStr[PlayerInfo[id][pWeaponsLicenseGuns][3]]);

    return 1;
}

Dialog:DialogGunLogName(playerid, response, listitem, inputtext[])
{
    if(!response) return
        pc_cmd_ccwlisansi(playerid, NULL);

    new id;

    if(sscanf(inputtext, "u", id))
    {
        format(PlayerInfo[playerid][pTempName], MAX_PLAYER_NAME, inputtext);

        mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT id FROM characters WHERE char_name = '%e' AND banned = 0 AND deleted = 0 AND deleted_at IS NULL", PlayerInfo[playerid][pTempName]);
        mysql_tquery(ourConnection, queryx, "OnWLicenseLogSearch", "d", playerid);
    }
    else
    {
        if(!IsPlayerConnected(id) || !PlayerInfo[id][pLogged])return
            HataMesajiC(playerid, "Geçersiz ID.");

        PlayerInfo[playerid][pWeaponsLicenseRequest] = PlayerInfo[id][pID];
        MDC_ShowWeaponLicenseLogs(playerid, PlayerInfo[id][pID]);
    }

    return 1;
}

Dialog:DialogBarikatSec(playerid, response, listitem, inputtext[]) {
    if(!response) return 1;
    new id = PlayerInfo[playerid][pBarikatObje];
    if(id == -1) return HataMesajiC(playerid, "Seçtiðiniz barikat silindi ya da seçtiðiniz obje bir barikat deðildi.");
    if(!IsPlayerInRangeOfPoint(playerid, 15.0, RoadBlockInfo[id][rbPosX], RoadBlockInfo[id][rbPosY], RoadBlockInfo[id][rbPosZ]))
                return HataMesajiC(playerid, "Düzenlemek istediðiniz barikata yakýn deðilsiniz.");
    switch(listitem) {
        case 0: {
            if(RoadBlockInfo[id][rbExists])
            {
                new location[MAX_ZONE_NAME];
                RoadBlockInfo[id][rbExists] = 0;
                RoadBlockInfo[id][rbType] = 0;
                GetCoords2DZone(RoadBlockInfo[id][rbPosX], RoadBlockInfo[id][rbPosY], location, MAX_ZONE_NAME);

                DestroyDynamicObjectEx(RoadBlockInfo[id][rbObject]);

                if(PlayerInfo[playerid][pFaction] != 1) SendFactionMessage(PlayerInfo[playerid][pFaction], "** HQ: %s, %s lokasyonundaki barikatý kaldýrdý.", ReturnRoleplayName(playerid), location);
                else SendFactionMessageTR(PlayerInfo[playerid][pFaction], "** HQ: %s, %s lokasyonundaki barikatý kaldýrdý.", ReturnRoleplayName(playerid), location);

                Iter_Remove(RoadBlocks, id);
            }
        }
        case 1: {
            PlayerInfo[playerid][pEditingMode] = 10;
            PlayerInfo[playerid][pSelectedItem] = id;
            SunucuMesaji(playerid, "Barikatý düzenliyorsunuz.");
            EditDynamicObject(playerid, RoadBlockInfo[id][rbObject]);
        }
    }
    return 1;
}

Dialog:DialogRoadblock(playerid, response, listitem, inputtext[])
{
    if(!response)return 0;

    switch(listitem)
    {
        case 0:
        {
            if(IsPlayerInAnyVehicle(playerid))return
                SunucuMesaji(playerid, "Araçtayken barikat yerleþtiremezsin.");

            new govObjectsList[] = {19425, 3380, 3379, 19948, 19949, 19950, 19955, 19956, 19957, 19968, 19970, 19978, 19952, 19951, 19967, 19958, 19959, 19960, 19961, 19962, 19963, 1238, 16023, 19953, 19954,
                                    19975, 19972, 978, 981, 1228, 1237, 1238, 1422, 1423, 1424, 1425, 1427, 1434, 1459, 3091, 3264, 3265, 4526, 1428, 1437, 18728};

            new pdObjectsList[] = {19425, 1238, 19972, 978, 981, 1228, 1237, 1422, 1423, 1424, 1425, 1427, 1434, 1459, 1593, 2892, 2899, 19834, 1428, 1437, 18728};

            new fdObjectsList[] = {1238, 978, 981, 1228, 1237, 1238, 1422, 1423, 1425, 1434, 1459, 19425, 1428, 1437, 2146, 18728, -2012, -2014};

            if(PlayerInfo[playerid][pFaction] == 0)
                ShowModelSelectionMenuEx(playerid, pdObjectsList, sizeof(pdObjectsList), "Barikat Listesi", TBARIKAT, 16.0, 0.0, -55.0);
            else if(PlayerInfo[playerid][pFaction] == 1)
                ShowModelSelectionMenuEx(playerid, fdObjectsList, sizeof(fdObjectsList), "Barikat Listesi", TBARIKAT, 16.0, 0.0, -55.0);
            else if(PlayerInfo[playerid][pFaction] == 2)
                ShowModelSelectionMenuEx(playerid, govObjectsList, sizeof(govObjectsList), "Barikat Listesi", TBARIKAT, 16.0, 0.0, -55.0);
            else return HataMesajiC(playerid, "Bu komutu kullanamazsýnýz.");
        }
        case 1:
        {
            if(PlayerInfo[playerid][pRank] <= 3) {
                for(new i; i < MAX_ROADBLOCKS; i++)
                {
                    RoadBlockInfo[i][rbExists] = 0;
                    RoadBlockInfo[i][rbType] = 0;
                    DestroyDynamicObjectEx(RoadBlockInfo[i][rbObject]);
                    Iter_Remove(RoadBlocks, i);
                }

                if(PlayerInfo[playerid][pFaction] == 0) SendFactionMessage(PlayerInfo[playerid][pFaction], "** HQ: %s, tüm kontrol noktalarýný kaldýrdý.", ReturnRoleplayName(playerid));
                else SendFactionMessageTR(PlayerInfo[playerid][pFaction], "** HQ: %s, tüm kontrol noktalarýný kaldýrdý.", ReturnRoleplayName(playerid));
            } else return HataMesajiC(playerid, "Yetkiniz bu seçeneði kullanmaya yetmemekte.");
        }
        case 2: {
            for(new i; i < MAX_ROADBLOCKS; i++) {
                if(RoadBlockInfo[i][rbExists]) {
                    if(!strcmp(RoadBlockInfo[i][rOwner], ReturnRoleplayName(playerid), false)) {
                        RoadBlockInfo[i][rbExists] = 0;
                        RoadBlockInfo[i][rbType] = 0;
                        DestroyDynamicObjectEx(RoadBlockInfo[i][rbObject]);
                        Iter_Remove(RoadBlocks, i);
                    }
                }
            }
            if(PlayerInfo[playerid][pFaction] == 0) SendFactionMessage(PlayerInfo[playerid][pFaction], "** HQ: %s, kendine ait tüm kontrol noktalarýný kaldýrdý.", ReturnRoleplayName(playerid));
            else SendFactionMessageTR(PlayerInfo[playerid][pFaction], "** HQ: %s, kendine ait tüm kontrol noktalarýný kaldýrdý.", ReturnRoleplayName(playerid));
        }
        case 3: {
            if(PlayerInfo[playerid][pRank] <= 3) {
                for(new i; i < MAX_ROADBLOCKS; i++) {
                    if(RoadBlockInfo[i][rbExists]) {
                        if(RoadBlockInfo[i][rbFaction] == PlayerInfo[playerid][pFaction]) {
                            RoadBlockInfo[i][rbExists] = 0;
                            RoadBlockInfo[i][rbType] = 0;
                            DestroyDynamicObjectEx(RoadBlockInfo[i][rbObject]);
                            Iter_Remove(RoadBlocks, i);
                        }
                    }
                }
                if(PlayerInfo[playerid][pFaction] == 0) SendFactionMessage(PlayerInfo[playerid][pFaction], "** HQ: %s, tüm kontrol noktalarýný kaldýrdý.", ReturnRoleplayName(playerid));
                else SendFactionMessageTR(PlayerInfo[playerid][pFaction], "** HQ: %s, tüm kontrol noktalarýný kaldýrdý.", ReturnRoleplayName(playerid));
            } else return HataMesajiC(playerid, "Yetkiniz bu seçeneði kullanmaya yetmemekte.");
        }
        default: return 1;
    }

    return 1;
}

Dialog:DialogTutorial(playerid, response, listitem, inputtext[])
{
    if(!response) return 0;

    new string[1024];

    switch(listitem)
    {
        case 0: format(string, sizeof(string), "Mal kazanmak ve satýn almak için çeþitli iþler yapabilirsiniz.\nMeslek noktasýna gidip /meslekgir ile iþe girebilirsin.\n \"/harita\" komutuyla meslek alanlarýný görebilirsin.");
        case 1: return pc_cmd_harita(playerid, NULL);
        case 2: format(string, sizeof(string), "Aracýnýz yoksa seyahat etmek için taksi çaðýrabilirsiniz. Tek ihtiyacýn olan bir cep telefonu.\n/ara 444 komutu ile bir taksi çaðýrabilirsin. Aktif taksi þoförü bulunuyorsa aramanýzý cevaplayacaktýr.");
        case 3: format(string, sizeof(string), "Elbiseni deðiþtirmek için / kiyafetal [id] yazmalýsýn.\nAlternatif olarak Karakter Paneli üzerinden kýyafetini deðiþtirebilirsin.");
    }

    Dialog_Show(playerid, DialogTutorialBack, DIALOG_STYLE_MSGBOX, "Tanýtým", string, "Ýptal", "");

    return 1;
}

Dialog:DialogTutorialBack(playerid, response, listitem, inputtext[]) return pc_cmd_tanitim(playerid, NULL);

Dialog:DialogGPS(playerid, response, listitem, inputtext[])
{
    if(!response)return 0;

    new count;
    
    foreach(new d : Dealers) if(DealerInfo[d][dExists]) count++;

    if(listitem == 0)
    {
        Dialog_Show(playerid, DialogIsletmeBul, DIALOG_STYLE_INPUT, "Ýþletme Bul", "Ýþletme kapý numarasýný girin:", "Ýþaretle", "Ýptal");
    }
    else if(listitem <= count)
    {
        listitem--;
        PlayerInfo[playerid][pLocalize] = true;
        AC_SetPlayerCheckpoint(playerid, DealerInfo[listitem][dPosX], DealerInfo[listitem][dPosY], DealerInfo[listitem][dPosZ], 5.0);
        SendClientMessageEx(playerid, COLOR_WHITE, "Checkpoint haritanýzda iþaretlendi.");
    }
    else
    {
        listitem = listitem - count;
        listitem--;
        mysql_tquery(ourConnection, "SELECT * FROM points", "OnPointsSearch", "dd", playerid, listitem);
    }

    return 1;
}

Dialog:DialogIsletmeBul(playerid, response, listitem, inputtext[])
{
    if(!response)return 1;
    
    if(response)
    {
        if(!isnull(inputtext))
        {
            if(IsNumeric(inputtext))
            {
                new buildingid = strval(inputtext);
                if(BuildingInfo[buildingid][bGPS])
                {
                    PlayerInfo[playerid][pLocalize] = true;
                    AC_SetPlayerCheckpoint(playerid, BuildingInfo[buildingid][bPosX], BuildingInfo[buildingid][bPosY], BuildingInfo[buildingid][bPosZ], 5.0);
                    BasariMesaji(playerid, "%d nolu iþletme haritanýzda iþaretlendi.", buildingid);
                }
                else HataMesajiC(playerid, "Bu iþletmenin konum paylaþýmý pasif durumda.");
            }
        }
    }
    return 1;
}

//Command Flags

//copculuk
flags:copkaristir(CMD_USER);
flags:copkutusuekle(CMD_Marvellous);
flags:copkutususil(CMD_Marvellous);
flags:copkutularinisil(CMD_Marvellous);
flags:copkutusuid(CMD_Marvellous);
flags:copkutusuduzenle(CMD_Marvellous);
flags:copkutususayi(CMD_Marvellous);

// iþletme reklam
flags:isletmereklam(CMD_USER);

//Users
flags:esyacal(CMD_USER);
flags:uyusturucuek(CMD_USER); //uyuþturucu sistemi
flags:uyusturucutopla(CMD_USER); //uyuþturucu sistemi
flags:cagrikabul(CMD_USER);
//flags:rehineal(CMD_USER); // rehine sistemi
flags:dinlemebirak(CMD_USER);
flags:kulaklikmenu(CMD_USER);// kulaklýk sistemi
flags:kulaklikcikar(CMD_USER);// kulaklýk sistemi
flags:ceset(CMD_USER); // ceset sistemi
flags:cesetial(CMD_USER); // ceset sistemi
flags:factions(CMD_USER);
flags:tezgah(CMD_USER); // tezgah sistemi - Rufio
flags:cadir(CMD_USER); // çadýr sistemi - Rufio
flags:masaal(CMD_USER);
flags:ck(CMD_USER);
flags:reklamiptal(CMD_USER);
flags:faracliste(CMD_USER);
flags:cevapla(CMD_USER);
flags:koli(CMD_USER);
flags:bocekkaldir(CMD_LSPD);
flags:uyusturucu(CMD_USER);
flags:casino(CMD_USER);
flags:frespawn(CMD_USER);
flags:fdavet(CMD_USER);
flags:fkov(CMD_USER);
flags:frutbe(CMD_USER);
flags:forutbe(CMD_USER);
flags:fduzenle(CMD_USER);
flags:hoparlor(CMD_USER);
flags:ara(CMD_USER);
flags:sms(CMD_USER);
flags:tkap(CMD_USER);
flags:rehber(CMD_USER);
flags:frekans(CMD_USER);
flags:slot(CMD_USER);
flags:telsizgiris(CMD_USER);
flags:telsiz(CMD_USER);
flags:t(CMD_USER);
flags:tlow(CMD_USER);
//flags:frekanskirala(CMD_USER);
flags:ev(CMD_USER);
flags:evsatinal(CMD_USER);
flags:isletme(CMD_USER);
flags:isletmesatinal(CMD_USER);
flags:frot(CMD_USER);
flags:fpos(CMD_USER);
flags:piyangoal(CMD_USER); // piyango sistemi - rufio
flags:kapiyavur(CMD_USER);
flags:olusumdancik(CMD_USER);
flags:ver(CMD_USER);
flags:ustara(CMD_USER);
flags:maske(CMD_USER);
flags:cezalarim(CMD_USER);
flags:pizza(CMD_USER); // pizza sistemi - rufio
flags:otel(CMD_USER); // otel sistemi - rufio
flags:checkpointekle(CMD_USER);
flags:yaris(CMD_USER);
flags:etkilesim(CMD_USER);
flags:lisansgoster(CMD_USER);
flags:aksesuar(CMD_USER);
flags:sanpoint(CMD_USER);
flags:kulube(CMD_USER);
flags:tanitim(CMD_USER);
flags:ekiyafetal(CMD_USER);
flags:kiyafetal(CMD_USER);
flags:modifiye(CMD_USER);
flags:dekorasyonid(CMD_USER);
flags:anahtar(CMD_USER);
flags:isbasi(CMD_USER);
//flags:ruba(CMD_USER);
flags:fbirim(CMD_PDGOV);
//flags:guzergahbasla(CMD_GOV);
flags:araccati(CMD_USER);
flags:motor(CMD_USER);
flags:arac(CMD_USER);
flags:v(CMD_USER);
flags:acam(CMD_USER);
flags:gate(CMD_USER);
flags:kilit(CMD_USER);
flags:aracboya(CMD_USER);
flags:kamyoncu(CMD_USER);
flags:mevduat(CMD_USER);
flags:mic(CMD_USER);
flags:mikrofon(CMD_USER);
flags:reklamver(CMD_USER);
flags:parcaalani(CMD_USER);
flags:tamir(CMD_USER);
flags:tamiriptal(CMD_USER);
flags:duzkontak(CMD_USER);
flags:parayatir(CMD_USER);
flags:paracek(CMD_USER);
flags:transfer(CMD_USER);
flags:kapi(CMD_USER);
flags:giseac(CMD_USER);
flags:freklam(CMD_USER);
flags:satinal(CMD_USER);
flags:cw(CMD_USER);
flags:envanter(CMD_USER);
flags:env(CMD_USER);
flags:bagajdanal(CMD_PDGOV);
flags:asilahbirak(CMD_PDGOV);
flags:mobilyayenile(CMD_USER);
flags:pm(CMD_USEROOC);
flags:re(CMD_USEROOC);
flags:atm(CMD_USER);
flags:aracparcala(CMD_USER);
flags:envanteryerlestir(CMD_USER);
flags:telefon(CMD_USER);

//Factions
flags:cs(CMD_LEGALFACT);
flags:senaryoekle(CMD_PDFDLSNNMODGOV); //pd&fd ve admin
flags:ekipman(CMD_SERVERFACTS);

// LSPD flags
flags:guvenliksertifikasi(CMD_LSPD);
flags:aracibagla(CMD_LSPD);
flags:araccek(CMD_PDFDGOV);
flags:cezakes(CMD_LSPD);
flags:acezakes(CMD_LSPD);
flags:euelkoy(CMD_LSPD);
flags:bocekyerlestir(CMD_LSPD);
flags:fisbasireset(CMD_LSPD);
flags:fisbasiliste(CMD_LSPD);
flags:bocek(CMD_LSPD);
flags:telefondinle(CMD_LSPD);
flags:telefondinlemekapat(CMD_LSPD);
flags:pdaksesuar(CMD_LSPD);
flags:mdc(CMD_PDGOV);
flags:apbkullanimdisixd(CMD_LSPD);
flags:telefontakip(CMD_LSPD);
flags:tutukla(CMD_LSPD);
flags:ccwlisansi(CMD_LSPD);
//flags:ocwlisansi(CMD_LSPD);
flags:aracara(CMD_LSPD);
flags:gisedurum(CMD_LSPD);
flags:hizkamerasi(CMD_LSPD);
flags:ustundenal(CMD_LSPD);
flags:snakecam(CMD_LSPD);
flags:cezalar(CMD_LSPD);
flags:plastikmermi(CMD_LSPD);
flags:ayagakaldir(CMD_LSPD);
flags:swat(CMD_LSPD);
flags:swatsec(CMD_LSPD);

// FD flags
flags:tedaviet(CMD_LSFD);
flags:fkapikilit(CMD_LSFD);

// PD&FD ortak flags
flags:kapiyikir(CMD_PDFD);
flags:cesettorbasi(CMD_PDFD);
flags:mulkbul(CMD_PDFD);
flags:destekiste(CMD_PDFD);

// LSNN flags
flags:haber(CMD_LSNN);
flags:canliyayin(CMD_LSNN);

// PD&FD&GOV ortak flags
flags:barikat(CMD_PDFDGOV);
flags:konikoy(CMD_PDFDGOV);
flags:barikatsec(CMD_PDFDGOV);
flags:ybarikatsil(CMD_PDFDGOV);
flags:ybarikatid(CMD_PDFDGOV);
flags:barikatsil(CMD_PDFDGOV);
flags:barikatduzenle(CMD_PDFDGOV);

//Helper

flags:raporlar(CMD_SUPPORTER);
flags:sorular(CMD_SUPPORTER);
flags:raporkabul(CMD_SUPPORTER);
flags:ar(CMD_SUPPORTER);
flags:raporred(CMD_SUPPORTER);
flags:raporcevap(CMD_SUPPORTER);
flags:reklamlar(CMD_SUPPORTER);
flags:kick(CMD_SUPPORTER3);

//Game Admin 1
flags:sorukontrol(CMD_GAME1);
flags:warn(CMD_GAME1);
flags:mapgit(CMD_GAME1);
flags:tpliste(CMD_GAME1);
flags:evgit(CMD_GAME1);
flags:notekle(CMD_GAME1);
flags:revive(CMD_GAME1);
flags:cesetkaldir(CMD_GAME1);
flags:cesetlerikaldir(CMD_GAME1);
flags:mark(CMD_GAME1);
flags:gotomark(CMD_GAME1);
flags:torbakaldir(CMD_GAME1);
flags:torbalarikaldir(CMD_GAME1);
flags:kulubegit(CMD_GAME1);
flags:bagliaraclar(CMD_GAME1); //test edilecek
flags:galerigit(CMD_GAME1);
flags:gotoi(CMD_GAME1);
flags:labgit(CMD_GAME1);
flags:unjail(CMD_GAME1);
flags:ajail(CMD_GAME1);
flags:gotoc(CMD_GAME1);
flags:senaryokaldir(CMD_GAME1);
flags:senaryolarisil(CMD_GAME1);
flags:asunucubilgi(CMD_GAME1);
flags:envantercheck(CMD_GAME1);
flags:check(CMD_GAME1);
flags:rtc(CMD_GAME1);
flags:rtc2(CMD_GAME1);
flags:removeitem(CMD_GAME1);
flags:aracliste(CMD_GAME1);
flags:araclisteoffline(CMD_GAME1);
flags:jobrespawn(CMD_GAME1);
flags:ckban(CMD_GAME1);
flags:unckban(CMD_GAME1);
flags:specoff(CMD_GAME1);
flags:spec(CMD_GAME1);
flags:kulubekontrol(CMD_GAME1);
flags:anote(CMD_GAME1);
flags:ipconflict(CMD_GAME1);
flags:ocheck(CMD_GAME1);
flags:oenvantercheck(CMD_GAME1);
flags:unban(CMD_GAME1);
flags:vpark(CMD_GAME1);
flags:silahbilgi(CMD_GAME1);
flags:disarm(CMD_GAME1);
flags:removegun(CMD_GAME1);
flags:tezgahid(CMD_GAME1);
flags:tezgahgit(CMD_GAME1);
flags:tezgahsil(CMD_GAME1);
flags:tezgahkuran(CMD_GAME1);
flags:interiorgit(CMD_GAME1);
flags:ageridon(CMD_GAME1);

//Game Admin 2
flags:respawncars(CMD_GAME2);


//Game Admin 3
flags:inactivelist(CMD_GAME3);
flags:createfreq(CMD_GAME3);

flags:bcreate(CMD_GAME3);
flags:bdelete(CMD_GAME3);
flags:bedit(CMD_GAME3);
flags:isletmesahip(CMD_GAME3);
flags:isletmesifirla(CMD_GAME3);
flags:oyarat(CMD_GAME3);
flags:osil(CMD_GAME3);
flags:oedit(CMD_GAME3);
flags:evyarat(CMD_GAME3);
flags:evsil(CMD_GAME3);
flags:evedit(CMD_GAME3);
flags:evsahip(CMD_GAME3);
flags:evsifirla(CMD_GAME3);
flags:gateolustur(CMD_GAME3);
flags:agate(CMD_GAME3);
flags:gatesil(CMD_GAME3);
flags:gateduzenle(CMD_GAME3);
flags:gatenear(CMD_GAME3);

//Game Admin 4
flags:skick(CMD_iglead);
//flags:despawncars(CMD_iglead);
flags:yarac(CMD_iglead);
flags:yaracmenu(CMD_iglead);
flags:vdelete(CMD_iglead);
flags:anamechange(CMD_iglead);
flags:kumaryarat(CMD_iglead);
flags:kumarsil(CMD_iglead);
flags:setfaction(CMD_iglead);
flags:freset(CMD_iglead);
flags:fyarat(CMD_iglead);
flags:fedit(CMD_iglead);
flags:lcreate(CMD_iglead);
flags:ledit(CMD_iglead);
flags:ldelete(CMD_iglead);
flags:giveitem(CMD_iglead);
flags:dolapolustur(CMD_iglead);
flags:sirketolustur(CMD_iglead);
flags:sirketduzenle(CMD_iglead);
flags:sirketsil(CMD_iglead);
flags:givegun(CMD_iglead);
flags:kickall(CMD_iglead);
flags:cdelete(CMD_iglead);
flags:cedit(CMD_iglead);
flags:ccreate(CMD_iglead);
flags:dedit(CMD_iglead);
flags:dcreate(CMD_iglead);
flags:ddelete(CMD_iglead);

//Lead
flags:placeobject(CMD_iglead);
flags:icreate(CMD_Marvellous);
flags:setpremium(CMD_Marvellous);
flags:iedit(CMD_Marvellous);
flags:givemoney(CMD_Marvellous);
flags:resetcash(CMD_Marvellous);
flags:objectdelete(CMD_Marvellous);
flags:amapsil(CMD_Marvellous);
flags:amapyukle(CMD_Marvellous);
flags:vveritabanikayit(CMD_Marvellous);
flags:fdelete(CMD_Marvellous);
flags:nitroizin(CMD_Marvellous);
flags:yarisduzenle(CMD_Marvellous);
flags:bahisbaslat(CMD_Marvellous);
flags:atisimleri(CMD_Marvellous);
//pasif lead cmds
flags:userlogs(CMD_Marvellous);
flags:serverlogs(CMD_Marvellous);
flags:cesetolusturadmin(CMD_jamyPlus);
flags:acheatkick(CMD_jamyPlus);
flags:stopalerts(CMD_jamyPlus);
flags:sethelper(CMD_jamyPlus);
flags:adeprembaslat(CMD_jamyPlus);
flags:idelete(CMD_jamyPlus);
flags:gcreate(CMD_jamyPlus);
flags:gedit(CMD_jamyPlus);
flags:gdelete(CMD_jamyPlus);
flags:ekonomi(CMD_jamyPlus);
flags:agizliol(CMD_jamyPlus);
flags:gizliadminler(CMD_jamyPlus);
flags:talepkontrol(CMD_jamyPlus);

flags:setjob(CMD_GAME1);
CMD:setjob(playerid, params[])
{
    new id,
        job;

    if(sscanf(params, "ud", id, job))
    {
        KullanimMesajiC(playerid, "/setjob [id/isim] [meslekid]");
        return SendClientMessageEx(playerid, COLOR_GREY, "0: Kamyon Þöförü - 1: Tamirci - 2: Taksici - 3: Pizza Kuryesi");
    }

    if(!IsPlayerConnected(id) || !PlayerInfo[id][pLogged])return
        HataMesajiC(playerid, "Geçersiz ID.");

    if(job < 0 || job > sizeof(Jobs)) return
        SunucuMesaji(playerid, "Meslek bulunamadý.");

    PlayerInfo[id][pJob] = job;

    BasariMesaji(id, "%s seni %s yaptý.", ReturnRoleplayName(playerid), Jobs[job][jobName]);
    BasariMesaji(playerid, "%s adlý oyuncuyu %s mesleðine aldýn.", ReturnRoleplayName(id), Jobs[job][jobName]);
    SendAworkAlert(false, COLOR_ADMIN, "AdmCmd: %s kiþisi %s mesleðine %s kiþisini aldý.", ReturnRoleplayName(playerid), Jobs[job][jobName], ReturnRoleplayName(id));

    return 1;
}

// PD
CMD:ccwlisansi(playerid, params[])
{
    if(PlayerInfo[playerid][pRank] > 1 && !PlayerInfo[playerid][pDivision][2])
    {

        if(PlayerInfo[playerid][pUsingMDC]) PlayerInfo[playerid][pUsingMDC] = 0;
        return HataMesajiC(playerid, "Gerekli birimde deðilsin.");
    }
    Dialog_Show(playerid, DialogGunLicense, DIALOG_STYLE_LIST, "CCW lisansý", "Sat\nDüzenle\nKaldýr\nKontrol", "Ýleri", "Geri");

    return 1;
}
CMD:bocek(playerid, params[])
{
    if(PlayerInfo[playerid][pRank] > 1 && !PlayerInfo[playerid][pDivision][0])return
        SunucuMesaji(playerid, "Gerekli birimde deðilsin.");

    new option[20], cid;

    if(sscanf(params, "s[20]D(-1)", option, cid)) return
        KullanimMesajiC(playerid, "/bocek [liste - bilgi - kilit - deaktif - aktif - dinle]");

    if(!strcmp(option, "liste", true))return
        Dialog_Show(playerid, DialogCimiciType, DIALOG_STYLE_LIST, "LSPD - Böcek Sistemi", "Benim eklediðim böcekler\nDiðer böcekler", "Seç", "Geri");

    else if(!strcmp(option, "bilgi", true))
    {
        if(cid == -1)return
            KullanimMesajiC(playerid, "/bocek [bilgi] [böcek ID]");

        if(Cimice_IsValid(cid) > 0)
        {
            cid = Cimice_GetID(cid);

            if(CimiceInfo[cid][cOwner] != PlayerInfo[playerid][pID] && CimiceInfo[cid][cPrivate]) return
                HataMesaji(playerid, "#%d ID'li böceðin bilgilerini görüntüleyemezsin.", CimiceInfo[cid][cID]);

            static const cimiceType[][32] = {"Kullanýcý", "Araç", "Ev", "Ýþletme"};
            static const cimicePrivate[][10] = {"Hayýr", "Evet"};

            new type = CimiceInfo[cid][cType];
            new is_private = CimiceInfo[cid][cPrivate];

            SunucuMesaji(playerid, "Böcek #%d | Durum: %s | Tip: %s | Kilit: %s | Aktif: %s", CimiceInfo[cid][cID], (CimiceInfo[cid][cExpires] < gettime() || !CimiceInfo[cid][cEnabled]) ? ("Hayýr") : ("Evet"), cimiceType[type], cimicePrivate[is_private]);
        }
        else return
            SunucuMesajiC(playerid, "Böcek bulunamadý.");
    }
    else if(!strcmp(option, "kilit", true))
    {
        if(cid == -1) return
            KullanimMesajiC(playerid, "/bocek [kilit] [böcek id]");

        if(Cimice_IsValid(cid) > 0)
        {
            cid = Cimice_GetID(cid);

            if(CimiceInfo[cid][cOwner] != PlayerInfo[playerid][pID]) return
                SunucuMesaji(playerid, "Bu böcek sana ait deðil.");

            CimiceInfo[cid][cPrivate] = !CimiceInfo[cid][cPrivate];
            SaveCimice(cid);

            if(CimiceInfo[cid][cPrivate])
                SunucuMesaji(playerid, "#%d ID'li böcek artýk sana özel.", CimiceInfo[cid][cID]);
            else
                SunucuMesaji(playerid, "#%d ID'li böceði artýk tüm memurlar kullanabilir.", CimiceInfo[cid][cID]);
        }
        else return
            SunucuMesajiC(playerid, "Böcek bulunamadý.");
    }
    else if(!strcmp(option, "deaktif", true) || !strcmp(option, "aktif", true))
    {
        if(cid == -1) return
            KullanimMesajiC(playerid, "/bocek <deaktif - aktif> [böcek ID]");

        if(Cimice_IsValid(cid) > 0)
        {
            cid = Cimice_GetID(cid);

            if(CimiceInfo[cid][cOwner] != PlayerInfo[playerid][pID]) return
                SunucuMesaji(playerid, "Bu böcek sana ait deðil.");

            CimiceInfo[cid][cEnabled] = !CimiceInfo[cid][cEnabled];

            SunucuMesaji(playerid, "#%d ID'li böceðin durumu: %s.", CimiceInfo[cid][cID], (CimiceInfo[cid][cEnabled]) ? ("aktif") : ("deaktif"));

            if(!CimiceInfo[cid][cEnabled])SendClientMessageEx(playerid, COLOR_WHITE, "Böceði kaldýrmak için \"/bocekkaldir\" kullan.");

            SaveCimice(cid);
        }
        else return
            SunucuMesajiC(playerid, "Böcek bulunamadý.");
    }
    else if(!strcmp(option, "dinle", true))
    {
        new buildingid = GetPlayerBuilding(playerid, true);

        if(buildingid == -1 || (buildingid != -1 && BuildingInfo[buildingid][bFaction] != 0) || PlayerInfo[playerid][pRank] > MAX_FACTION_RANKS)return
            SunucuMesaji(playerid, "Böceði sadece departmanda dinleyebilirsin.");

        if(PlayerInfo[playerid][pCimice] != -1)
        {
            SunucuMesaji(playerid, "#%d numaralý böceði dinlemeyi býraktýn.", PlayerInfo[playerid][pCimice]);
            PlayerInfo[playerid][pCimice] = -1; return 1;
        }

        if(cid == -1)return
            KullanimMesajiC(playerid, "/bocek [dinle] [böcek id]");

        if(Cimice_IsValid(cid) > 0)
        {
            cid = Cimice_GetID(cid);

            if(CimiceInfo[cid][cOwner] != PlayerInfo[playerid][pID] && CimiceInfo[cid][cPrivate])return
                HataMesaji(playerid, "#%d böceðini dinleyemezsin.", CimiceInfo[cid][cID]);

            SunucuMesaji(playerid, "#%d numaralý böceði dinliyorsun.", CimiceInfo[cid][cID]);
            SendClientMessageEx(playerid, COLOR_WHITE, "Dinlemeyi bitirmek için tekrar \"/bocek dinle\" yaz.");
            PlayerInfo[playerid][pCimice] = CimiceInfo[cid][cID];
        }
        else return
            SunucuMesajiC(playerid, "Böcek bulunamadý.");
    }
    else return
        HataMesajiC(playerid, "Geçersiz parametre.");

    return 1;
}

CMD:telefondinle(playerid, params[])
{
    if(PlayerInfo[playerid][pRank] > 5 && !PlayerInfo[playerid][pDivision][0]) return
        SunucuMesajiC(playerid, "Bu komutu kullanmak için yetkiniz bulunmuyor.");

    new telno, phoneid, payphoneid, id;
    if(sscanf(params, "d", telno)) return KullanimMesajiC(playerid, "/telefondinle [numara]");

    if(PlayerInfo[playerid][pTelDinle]) return HataMesajiC(playerid, "Zaten þu anda telefon dinliyorsunuz. (/telefondinlemekapat)");

    foreach(new j : Player)
    {
        if(!IsPlayerConnected(j) || j == playerid)continue;

        phoneid = Inventory_HasPhone(j, telno);
        payphoneid = PlayerInfo[j][pUsingPP];

        if(payphoneid == -1 && phoneid == -1)continue;
        if(phoneid != -1 && !PlayerInfo[j][pInvExtra][phoneid])continue;
        if(payphoneid != -1 && PayPhoneInfo[payphoneid][cNumber] != telno)continue;

        id = j; break;
    }

    if(id == -1)
        return HataMesajiC(playerid, "Bu numaraya þu anda ulaþýlamýyor, dinleme baþarýsýz. (Telefon kapalý veya kullanýcý çevrimdýþý olabilir.)");

    PlayerInfo[playerid][pTelDinle] = true;
    PlayerInfo[playerid][pDinlenenTelNo] = telno;
    BasariMesaji(playerid, "%d nolu telefonu dinlemeye baþladýnýz.", telno);
    return 1;
}

CMD:telefondinlemekapat(playerid)
{
    if(!PlayerInfo[playerid][pTelDinle]) return HataMesajiC(playerid, "Zaten þu anda bir telefon numarasýný dinlemiyorsunuz.");

    PlayerInfo[playerid][pTelDinle] = false;
    PlayerInfo[playerid][pDinlenenTelNo] = -1;
    BasariMesaji(playerid, "Telefon dinlemeyi býraktýnýz.");
    return 1;
}

CMD:bocekyerlestir(playerid, params[])
{
    if(PlayerInfo[playerid][pRank] > 1 && PlayerInfo[playerid][pDivision][0] == 0)return
        SunucuMesaji(playerid, "Gerekli birimde deðilsin.");

    if(isnull(params)) return
        KullanimMesajiC(playerid, "/bocekyerlestir [ev - isletme - arac]");

    new Float:x, Float:y, Float:z;
    GetPlayerPos(playerid, x, y, z);

    if(!strcmp(params, "ev", true))
    {
        new houseid = GetPlayerHouse(playerid, true);

        if(houseid == -1 || !HouseInfo[houseid][hExists]) return
            SunucuMesajiC(playerid, "Evin içerisinde deðilsin.");

        if(Cimice_Attach(playerid, CIMICE_TYPE_HOUSE, houseid, x, y, z) != -1)
            SunucuMesaji(playerid, "Eve bir böcek yerleþtirdin. Böceðin þarjý %d saat sonra bitiyor.", CIMICE_HOUSE_HOURS);

        else return 1;
    }
    else if(!strcmp(params, "isletme", true))
    {
        new buildingid = GetPlayerBuilding(playerid, true);

        if(buildingid == -1 || !BuildingInfo[buildingid][bExists]) return
            SunucuMesaji(playerid, "Ýþletmede deðilsin.");

        if(Cimice_Attach(playerid, CIMICE_TYPE_BUILDING, BuildingInfo[buildingid][bID], x, y, z) != -1)
            SunucuMesaji(playerid, "Ýþletmeye bir böcek yerleþtirdin. Böceðin þarjý %d saat sonra bitiyor.",  CIMICE_BUILDING_HOURS);

        else return 1;
    }
    else if(!strcmp(params, "arac", true))
    {
        new vehicleid = GetPlayerVehicleID(playerid);

        if(!IsPlayerInAnyVehicle(playerid) || VehicleInfo[vehicleid][vTemporary]) return
            SunucuMesaji(playerid, "Araçta deðilsin veya bu araç veritabanýna kayýtlý deðil.");

        if(Cimice_Attach(playerid, CIMICE_TYPE_VEHICLE, VehicleInfo[vehicleid][vID]) != -1)
            SunucuMesaji(playerid, "Araca bir böcek yerleþtirdin. Böceðin þarjý %d saat sonra bitiyor.", CIMICE_VEHICLE_HOURS);

        else return 1;
    }

    return 1;
}

CMD:bocekkaldir(playerid, params[])
{

    new vid = GetPlayerVehicleID(playerid);

    foreach(new cid : Cimici)
    {
        if(CimiceInfo[cid][cSubject] != PlayerInfo[playerid][pID] && CimiceInfo[cid][cType] == CIMICE_TYPE_PLAYER) continue;
        if(GetPlayerHouseID(playerid) == -1 && CimiceInfo[cid][cType] == CIMICE_TYPE_HOUSE) continue;
        if(CimiceInfo[cid][cSubject] != GetPlayerHouseID(playerid) && CimiceInfo[cid][cType] == CIMICE_TYPE_HOUSE) continue;
        if(GetPlayerBuildingID(playerid) == -1 && CimiceInfo[cid][cType] == CIMICE_TYPE_BUILDING) continue;
        if(CimiceInfo[cid][cSubject] != GetPlayerBuildingID(playerid) && CimiceInfo[cid][cType] == CIMICE_TYPE_BUILDING) continue;
        if(!IsPlayerInAnyVehicle(playerid) && CimiceInfo[cid][cType] == CIMICE_TYPE_VEHICLE) continue;
        if(VehicleInfo[vid][vID] != CimiceInfo[cid][cSubject] && CimiceInfo[cid][cType] == CIMICE_TYPE_VEHICLE) continue;

        if(CimiceInfo[cid][cType] == CIMICE_TYPE_PLAYER || CimiceInfo[cid][cType] == CIMICE_TYPE_VEHICLE)
        {
            SendClientMessageEx(playerid, COLOR_GREEN, "Böcek kaldýrýldý.");
            return Cimice_Delete(cid);
        }

        if(IsPlayerInRangeOfPoint(playerid, (PlayerInfo[playerid][pID] == CimiceInfo[cid][cOwner]) ? 25.0 : 15.3, CimiceInfo[cid][cPos][0], CimiceInfo[cid][cPos][1] , CimiceInfo[cid][cPos][2]) == 0) continue;

        SendClientMessageEx(playerid, COLOR_GREEN, "Böcek kaldýrýldý.");
        return Cimice_Delete(cid);
    }

    PlayerInfo[playerid][pCimiceTime] = GetTickCount();
    SunucuMesaji(playerid, "Burada böcek yok.");

    return 1;
}
CMD:fduzenle(playerid, params[])
{
    if(PlayerInfo[playerid][pFaction] == -1 || PlayerInfo[playerid][pRank] > 3)
        return HataMesajiC(playerid, "Bu komutu kullanmak için bir oluþumda 1 ile 3 arasýnda olmalýdýr.");

    Faction_ShowOptions(playerid, PlayerInfo[playerid][pFaction]);

    return 1;
}
CMD:fisbasireset(playerid)
{
    if(Faction_GetType(PlayerInfo[playerid][pFaction]) != POLICE || PlayerInfo[playerid][pRank] > 3)
        return 1;
    PolisDutyReset();
    SunucuMesaji(playerid, "Ýþbaþý sürelerini sýfýrladýnýz.");
    return 1;
}
CMD:fisbasiliste(playerid)
{
    new isimi[MAX_PLAYER_NAME], saati, dialogtex[2048];
    if(Faction_GetType(PlayerInfo[playerid][pFaction]) != POLICE || PlayerInfo[playerid][pRank] > 3)
        return 1;
    mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT * FROM polisduty WHERE saat < 60");
    new Cache:veri = mysql_query(ourConnection, queryx, true);
    new rows;
    cache_get_row_count(rows);
    for(new i; i < rows; i++)
    {
        //printf("loop girdi");
        cache_get_value(i, "username", isimi, MAX_PLAYER_NAME);
        cache_get_value_int(i, "saat", saati);
        format(dialogtex, sizeof(dialogtex), "%s\n%s - %d", dialogtex, isimi, saati);
    }
    Dialog_Show(playerid, DialogIsbasiList, DIALOG_STYLE_LIST, "Ýþbaþý Sistemi Listesi", dialogtex, "Tamam", "");
    cache_delete(veri);
    return 1;
}

/*CMD:ocwlisansi(playerid, params[])
{
    if(PlayerInfo[playerid][pRank] > 1 && !PlayerInfo[playerid][pDivision][2])
    {
        if(PlayerInfo[playerid][pUsingMDC]) PlayerInfo[playerid][pUsingMDC] = 0;
        return HataMesajiC(playerid, "Gerekli birimde deðilsin.");
    }
    new id;
    if(sscanf(params, "d", id)) return KullanimMesajiC(playerid, "/ocwlisansi [id] (UYARI: Bu komutun bilinçsiz kullanýmý yasaktýr.)");

    if(!PlayerInfo[id][pGuvenlik])
    {
        PlayerInfo[id][pGuvenlik] = 1;
        SunucuMesaji(playerid, "%s(%d) adlý vatandaþa OCW lisansý verdiniz.", ReturnRoleplayName(id), id);
    }
    else
    {
        PlayerInfo[id][pGuvenlik] = 0;
        SunucuMesaji(playerid, "%s(%d) adlý vatandaþýn OCW lisansýna el koydunuz.", ReturnRoleplayName(id), id);
    }
    return 1;
}*/

CMD:guvenliksertifikasi(playerid, params[])
{
    if(PlayerInfo[playerid][pRank] > 1 && !PlayerInfo[playerid][pDivision][2])
    {
        if(PlayerInfo[playerid][pUsingMDC]) PlayerInfo[playerid][pUsingMDC] = 0;
        return HataMesajiC(playerid, "Gerekli birimde deðilsin.");
    }
    new id;
    if(sscanf(params, "d", id)) return KullanimMesajiC(playerid, "/guvenliksertifikasi [id] (UYARI: Bu komutun bilinçsiz kullanýmý yasaktýr.)");

    if(!PlayerInfo[id][pGuvenlikLisansi])
    {
        PlayerInfo[id][pGuvenlikLisansi] = 1;
        SunucuMesaji(playerid, "%s(%d) adlý vatandaþa güvenlik sertifikasý verdiniz.", ReturnRoleplayName(id), id);
    }
    else
    {
        PlayerInfo[id][pGuvenlikLisansi] = 0;
        SunucuMesaji(playerid, "%s(%d) adlý vatandaþýn güvenlik sertifikasýna el koydunuz.", ReturnRoleplayName(id), id);
    }
    return 1;
}

CMD:jobrespawn(playerid, params[])
{
    new bool:toRespawn;

    foreach(new j : Player)
    {
        if(IsPlayerConnected(j) && PlayerInfo[j][pLogged])
        {
            if(!PlayerInfo[playerid][pGizliAdmin]) SendFormattedMessage(j, COLOR_ADMIN, "%s tüm sürücüsüz meslek araçlarýný spawn etti.", ReturnRoleplayName(playerid));
            else SendFormattedMessage(j, COLOR_ADMIN, "Administrator tüm sürücüsüz meslek araçlarýný spawn etti.");
        }
    }

    foreach(new vid : Vehicles) if(IsValidVehicle(vid) && VehicleInfo[vid][vScript])
    {
        if(VehicleInfo[vid][vJob] == -1) continue;

        if(GetVehicleDriver(vid) != -1) toRespawn = false;
        else toRespawn = true;

        if(toRespawn) Vehicle_Respawn2(vid);
    }
    return 1;
}

CMD:frespawn(playerid, params[])
{
    if(PlayerInfo[playerid][pFaction] == -1) return 1;

    new fid = PlayerInfo[playerid][pFaction];
    new bool:toRespawn;

    if(PlayerInfo[playerid][pAdminDuty])
    {
        if(fid != 1) SendFactionMessage(fid, "(( %s %s sürücüsüz tüm oluþum araçlarýný spawn etti. ))", fRanks[fid][PlayerInfo[playerid][pRank] - 1], ReturnRoleplayName(playerid));
        else SendFactionMessageTR(fid, "(( %s %s sürücüsüz tüm oluþum araçlarýný spawn etti. ))", fRanks[fid][PlayerInfo[playerid][pRank] - 1], ReturnRoleplayName(playerid));

        for(new vid = 1; vid < MAX_VEHICLES; vid ++)
        {
            toRespawn = true;

            if(VehicleInfo[vid][vFaction] != fid/*|| gettime() < VehicleInfo[vid][vSpawnExpires]*/) continue;
            if(GetVehicleDriver(vid) != -1) toRespawn = false;
            if(!toRespawn) continue;

            if(Faction_GetType(VehicleInfo[vid][vFaction]) == POLICE && VehicleInfo[vid][vOwner] == -1)
            {
                for(new j; j < MAX_CAR_WEAPONS; j++)
                    VehicleInfo[vid][vSlotUsed][j] = 0;
            }

            if(VehicleInfo[vid][vFaction] == fid) Vehicle_Respawn(vid);
        }
        return 1;
    }
    else if(PlayerInfo[playerid][pFaction] == 1 && PlayerInfo[playerid][pRank] == 10 || PlayerInfo[playerid][pFaction] == 1 && PlayerInfo[playerid][pRank] == 11)
    {

        if(fid != 1) SendFactionMessage(fid, "(( %s %s sürücüsüz tüm oluþum araçlarýný spawn etti. ))", fRanks[fid][PlayerInfo[playerid][pRank] - 1], ReturnRoleplayName(playerid));
        else SendFactionMessageTR(fid, "(( %s %s sürücüsüz tüm oluþum araçlarýný spawn etti. ))", fRanks[fid][PlayerInfo[playerid][pRank] - 1], ReturnRoleplayName(playerid));

        for(new vid = 1; vid < MAX_VEHICLES; vid ++)
        {
            toRespawn = true;

            if(VehicleInfo[vid][vFaction] != fid/*|| gettime() < VehicleInfo[vid][vSpawnExpires]*/) continue;
            if(GetVehicleDriver(vid) != -1) toRespawn = false;
            if(!toRespawn) continue;

            if(Faction_GetType(VehicleInfo[vid][vFaction]) == POLICE && VehicleInfo[vid][vOwner] == -1)
            {
                for(new j; j < MAX_CAR_WEAPONS; j++)
                    VehicleInfo[vid][vSlotUsed][j] = 0;
            }

            if(VehicleInfo[vid][vFaction] == fid) Vehicle_Respawn(vid);
        }
        return 1;
    }
    
    if(PlayerInfo[playerid][pRank] > 6) return 1;

    if(fid != 1) SendFactionMessage(fid, "(( %s %s sürücüsüz tüm oluþum araçlarýný spawn etti. ))", fRanks[fid][PlayerInfo[playerid][pRank] - 1], ReturnRoleplayName(playerid));
    else SendFactionMessageTR(fid, "(( %s %s sürücüsüz tüm oluþum araçlarýný spawn etti. ))", fRanks[fid][PlayerInfo[playerid][pRank] - 1], ReturnRoleplayName(playerid));

    for(new vid = 1; vid < MAX_VEHICLES; vid ++)
    {
        toRespawn = true;

        if(VehicleInfo[vid][vFaction] != fid/*|| gettime() < VehicleInfo[vid][vSpawnExpires]*/) continue;
        if(GetVehicleDriver(vid) != -1) toRespawn = false;
        if(!toRespawn) continue;

        if(Faction_GetType(VehicleInfo[vid][vFaction]) == POLICE && VehicleInfo[vid][vOwner] == -1)
        {
            for(new j; j < MAX_CAR_WEAPONS; j++)
                VehicleInfo[vid][vSlotUsed][j] = 0;
        }

        if(VehicleInfo[vid][vFaction] == fid) Vehicle_Respawn(vid);
    }
    return 1;
}

CMD:respawncars(playerid, params[])
{
    new bool:toRespawn;

    if(!PlayerInfo[playerid][pGizliAdmin])
    {
        foreach(new ix: Player)
            SendFormattedMessage(ix, COLOR_ADMIN, "%s adlý yetkili sürücüsüz tüm araçlarý re-spawn etti. [%s]", ReturnRoleplayName(playerid), ReturnDate());
    }
    else
    {
        foreach(new ix: Player)
            SendFormattedMessage(ix, COLOR_ADMIN, "Administrator sürücüsüz tüm araçlarý re-spawn etti. [%s]", ReturnDate());
    }

    for(new vid = 1; vid < MAX_VEHICLES; vid ++)
    {
        toRespawn = true;

        if(GetVehicleDriver(vid) != -1) toRespawn = false;
        if(!toRespawn) continue;

        Vehicle_Respawn(vid);
    }
    return 1;
}

CMD:cekilisyap(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 10) return HataMesajiC(playerid, "Yetersiz yetki.");

    new cekilis = getRandomPlayer();

    if(!IsPlayerConnected(cekilis) || playerid == cekilis)
        return HataMesajiC(playerid, "Çekiliþ baþarýsýz, tekrar deneyin.");

    foreach(new j : Player)
    {
        if(!IsPlayerConnected(j))continue;
        SendFormattedMessage(j, COLOR_LIGHTRED, "%s elini torbaya soktu ve karýþtýrýyor. Çekiliþi kazanan: %s", ReturnRoleplayName(playerid, true), ReturnRoleplayName(cekilis, true));
    }
    return 1;
}
/*CMD:yayindurum(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 1) return HataMesajiC(playerid, "Yetersiz yetki.");

    if(!SunucuBilgi[LSNNYayin])
    {
        BasariMesajiC(playerid, "LSNN oluþumu artýk TV yayýný yapabilir.");
        SunucuBilgi[LSNNYayin] = true;
    }
    else
    {
        if(SunucuBilgi[LSNNYayinDurum])
        {
            foreach(new j : Player)
            {
                if(!IsPlayerConnected(j) || !PlayerInfo[j][pNews])continue;
                SendFormattedMessage(j, COLOR_LIGHTRED, "%s adlý yetkili LSNN canlý yayýnýný sonlandýrdý.", ReturnRoleplayName(playerid));
            }
        }
        BasariMesajiC(playerid, "LSNN oluþumu artýk TV yayýný yapamayacak.");
        SunucuBilgi[LSNNYayin] = false;
        SunucuBilgi[LSNNYayinDurum] = false;
        SunucuBilgi[LSNNYayinPos][0] = 0;
        SunucuBilgi[LSNNYayinPos][1] = 0;
        SunucuBilgi[LSNNYayinPos][2] = 0;
        SunucuBilgi[LSNNYayinPos][3] = 0;
        SunucuBilgi[LSNNYayinPos][4] = 0;
        SunucuBilgi[LSNNYayinPos][5] = 0;
        SunucuBilgi[LSNNYayinINT] = 0;
        SunucuBilgi[LSNNYayinVW] = 0;
    }
    return 1;
}

CMD:yayinsifirla(playerid)
{
    if(PlayerInfo[playerid][pFaction] == -1 || Faction_GetType(PlayerInfo[playerid][pFaction]) != LSNN)
        return HataMesajiC(playerid, "Bu komutu kullanmak için televizyon kanalýnda çalýþmalýsýn.");

    if(PlayerInfo[playerid][pRank] == 3 || PlayerInfo[playerid][pRank] > 9)
        return HataMesajiC(playerid, "Bu komutu kullanamazsýn.");

    if(!PlayerInfo[playerid][pFactionDuty])return
        SunucuMesajiC(playerid, "Ýþbaþýnda deðilsin.");

    SunucuBilgi[LSNNYayinDurum] = false;
    SunucuBilgi[LSNNYayinPos][0] = 0;
    SunucuBilgi[LSNNYayinPos][1] = 0;
    SunucuBilgi[LSNNYayinPos][2] = 0;
    SunucuBilgi[LSNNYayinPos][3] = 0;
    SunucuBilgi[LSNNYayinPos][4] = 0;
    SunucuBilgi[LSNNYayinPos][5] = 0;
    SunucuBilgi[LSNNYayinINT] = 0;
    SunucuBilgi[LSNNYayinVW] = 0;
    DestroyDynamicObjectEx(SunucuBilgi[LSNNKamera]);
    SendFactionMessage(PlayerInfo[playerid][pFaction], "(( %s tarafýndan kameralar kapatýldý ve sistem sýfýrlandý. ))", ReturnRoleplayName(playerid));
    return 1;
}

flags:yayinbaslat(CMD_LSNN);
flags:tvayarla(CMD_LSNN);
flags:yayinsifirla(CMD_LSNN);
CMD:tvayarla(playerid, params[])
{
    if(PlayerInfo[playerid][pFaction] == -1 || Faction_GetType(PlayerInfo[playerid][pFaction]) != LSNN)
        return HataMesajiC(playerid, "Bu komutu kullanmak için televizyon kanalýnda çalýþmalýsýn.");

    if(PlayerInfo[playerid][pRank] == 3 || PlayerInfo[playerid][pRank] > 9)
        return HataMesajiC(playerid, "Bu komutu kullanamazsýn.");

    if(!PlayerInfo[playerid][pFactionDuty])return
        SunucuMesajiC(playerid, "Ýþbaþýnda deðilsin.");

    if(!SunucuBilgi[LSNNYayin])
        return HataMesajiC(playerid, "LSNN canlý yayýn sistemi yönetim tarafýndan pasife alýnmýþ.");

    if(SunucuBilgi[LSNNYayinDurum]) return HataMesajiC(playerid, "Yayýn açýkken kamera posu düzenleyemezsiniz.");

    DestroyDynamicObjectEx(SunucuBilgi[LSNNKamera]);

    GetPlayerPos(playerid, SunucuBilgi[LSNNYayinPos][0], SunucuBilgi[LSNNYayinPos][1], SunucuBilgi[LSNNYayinPos][2]);
    SunucuBilgi[LSNNYayinINT] = GetPlayerInterior(playerid);
    SunucuBilgi[LSNNYayinVW] = GetPlayerVirtualWorld(playerid);

    SunucuBilgi[LSNNKamera] = CreateDynamicObject(1886, SunucuBilgi[LSNNYayinPos][0], SunucuBilgi[LSNNYayinPos][1], SunucuBilgi[LSNNYayinPos][2], SunucuBilgi[LSNNYayinPos][3], SunucuBilgi[LSNNYayinPos][4], SunucuBilgi[LSNNYayinPos][5], SunucuBilgi[LSNNYayinVW], SunucuBilgi[LSNNYayinINT]);
    SunucuMesaji(playerid, "Kamera pozisyonunu düzenliyorsunuz.");
    PlayerInfo[playerid][pEditingMode] = 5;
    PlayerInfo[playerid][pSelectedItem] = SunucuBilgi[LSNNKamera];
    EditDynamicObject(playerid, SunucuBilgi[LSNNKamera]);
    return 1;
}

CMD:yayinbaslat(playerid, params[])
{
    if(PlayerInfo[playerid][pFaction] == -1 || Faction_GetType(PlayerInfo[playerid][pFaction]) != LSNN)
        return HataMesajiC(playerid, "Bu komutu kullanmak için televizyon kanalýnda çalýþmalýsýn.");

    if(PlayerInfo[playerid][pRank] == 3 || PlayerInfo[playerid][pRank] > 9)
        return HataMesajiC(playerid, "Bu komutu kullanamazsýn.");

    if(!PlayerInfo[playerid][pFactionDuty])return
        SunucuMesajiC(playerid, "Ýþbaþýnda deðilsin.");

    if(!SunucuBilgi[LSNNYayin])
        return HataMesajiC(playerid, "LSNN canlý yayýn sistemi yönetim tarafýndan pasife alýnmýþ.");

    if(SunucuBilgi[LSNNYayinDurum]) return HataMesajiC(playerid, "Yayýn zaten açýk. (/yayinkapat)");

    if(!SunucuBilgi[LSNNYayinPos][0] && !SunucuBilgi[LSNNYayinPos][3] && !SunucuBilgi[LSNNYayinPos][3] && !SunucuBilgi[LSNNYayinPos][3])
        return HataMesajiC(playerid, "Kameralar ayarlý deðil.");

    SunucuBilgi[LSNNYayinDurum] = true;

    new fid = PlayerInfo[playerid][pFaction];

    foreach(new j : Player)
    {
        if(!IsPlayerConnected(j) || !PlayerInfo[j][pNews])continue;
        SendFormattedMessage(j, COLOR_LIGHTGREEN, "[%s] %s: %s þimdi canlý yayýnda! (/tvizle)", ReturnDate(), ReturnRoleplayName(playerid), FactionInfo[fid][fShortName]);
    }
    return 1;
}

CMD:yayinkapat(playerid, params[])
{
    if(PlayerInfo[playerid][pFaction] == -1 || Faction_GetType(PlayerInfo[playerid][pFaction]) != LSNN)
        return HataMesajiC(playerid, "Bu komutu kullanmak için televizyon kanalýnda çalýþmalýsýn.");

    if(PlayerInfo[playerid][pRank] == 3 || PlayerInfo[playerid][pRank] > 9)
        return HataMesajiC(playerid, "Bu komutu kullanamazsýn.");

    if(!PlayerInfo[playerid][pFactionDuty])return
        SunucuMesajiC(playerid, "Ýþbaþýnda deðilsin.");

    if(!SunucuBilgi[LSNNYayin])
    {
        SunucuBilgi[LSNNYayinDurum] = false;
        SunucuMesaji(playerid, "Yönetim tarafýndan LSNN yayýn sistemi zaten kapatýlmýþ. Yayýn bitiriliyor.");
        return 1;
    }
    SunucuBilgi[LSNNYayinDurum] = false;
    new fid = PlayerInfo[playerid][pFaction];
    foreach(new j : Player)
    {
        if(!IsPlayerConnected(j) || !PlayerInfo[j][pNews])continue;
        SendFormattedMessage(j, COLOR_LIGHTGREEN, "[%s] %s: %s canlý yayýný sonlandý!", ReturnDate(), ReturnRoleplayName(playerid), FactionInfo[fid][fShortName]);
    }
    SendFactionMessage(PlayerInfo[playerid][pFaction], "(( %s tarafýndan TV yayýný sonlandýrýldý. ))", ReturnRoleplayName(playerid));
    SunucuMesaji(playerid, "TV yayýný sonlandý. (Kamera deðerlerini sýfýrlamak için: /yayinsifirla)");
    return 1;
}

flags:tvizle(CMD_USER);
CMD:tvizle(playerid, params[])
{
    if(PlayerInfo[playerid][pTVActor] != -1)
    {
        DestroyDynamicActor(PlayerInfo[playerid][pTVActor]);

        if(IsValidDynamic3DTextLabel(PlayerInfo[playerid][TVLabel]))
            DestroyDynamic3DTextLabelEx(PlayerInfo[playerid][TVLabel]);

        PlayerInfo[playerid][pJustSpawned] = true;
        Player_SetSpawn(playerid);
        BasariMesaji(playerid, "Televizyon izlemeyi býraktýnýz.");
        return 1;
    }

    if(!SunucuBilgi[LSNNYayin] || !SunucuBilgi[LSNNYayinDurum]) return HataMesajiC(playerid, "Herhangi bir kanal þu anda canlý yayýnda deðil.");

    if(!SunucuBilgi[LSNNYayinPos][0] && !SunucuBilgi[LSNNYayinPos][3] && !SunucuBilgi[LSNNYayinPos][3] && !SunucuBilgi[LSNNYayinPos][3])
        return HataMesajiC(playerid, "Sinyal yok.");

    if(GetPlayerInterior(playerid) == 0 || GetPlayerVirtualWorld(playerid) == 0)
        return HataMesajiC(playerid, "Televizyona yakýn deðilsiniz.");

    if(GetPlayerState(playerid) != PLAYER_STATE_SPECTATING)
    {
        new weapons[12];
        new ammo[12];

        for(new x; x < 12; x++)
        {
            GetPlayerWeaponData(playerid, x, weapons[x], ammo[x]);
            if(!AC_PlayerHasWeapon(playerid, weapons[x]) || !ammo[x])
            {
                weapons[x] = 0;
                ammo[x] = 0;
            }
            PlayerInfo[playerid][pWeapons][x] = weapons[x];
            PlayerInfo[playerid][pAmmo][x] = ammo[x];
        }

        AC_GetPlayerHealth(playerid, PlayerInfo[playerid][pHealth]);
        AC_GetPlayerArmour(playerid, PlayerInfo[playerid][pArmour]);
    }

    GetPlayerPos(playerid, PlayerInfo[playerid][pPosX], PlayerInfo[playerid][pPosY], PlayerInfo[playerid][pPosZ]);
    GetPlayerFacingAngle(playerid, PlayerInfo[playerid][pPosA]);
    PlayerInfo[playerid][pWorld] = GetPlayerVirtualWorld(playerid);
    PlayerInfo[playerid][pInterior] = GetPlayerInterior(playerid);
    AC_GetPlayerHealth(playerid, PlayerInfo[playerid][pHealth]);
    AC_GetPlayerArmour(playerid, PlayerInfo[playerid][pArmour]);
    PlayerInfo[playerid][pCrashInt] = PlayerInfo[playerid][pInterior];
    PlayerInfo[playerid][pCrashWorld] = PlayerInfo[playerid][pWorld];
    //PlayerInfo[playerid][pTVMode] = true;

    PlayerInfo[playerid][pTVActor] = CreateDynamicActor(PlayerInfo[playerid][pSkin], PlayerInfo[playerid][pPosX], PlayerInfo[playerid][pPosY], PlayerInfo[playerid][pPosZ], PlayerInfo[playerid][pPosA]);
    SetDynamicActorVirtualWorld(PlayerInfo[playerid][pTVActor], PlayerInfo[playerid][pWorld]);
    new string[300];
    format(string, 300, "%s (%d)", ReturnRoleplayName(playerid, true), playerid);
    PlayerInfo[playerid][TVLabel] = CreateDynamic3DTextLabel(string, -1, PlayerInfo[playerid][pPosX], PlayerInfo[playerid][pPosY], PlayerInfo[playerid][pPosZ]+0.9, 8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, PlayerInfo[playerid][pWorld]);

    SetPlayerInterior(playerid, SunucuBilgi[LSNNYayinINT]);
    AC_SetPlayerVirtualWorld(playerid, SunucuBilgi[LSNNYayinVW]);
    TogglePlayerControllable(playerid, 0);
    TogglePlayerSpectating(playerid, true);
    SetPlayerCameraPos(playerid, SunucuBilgi[LSNNYayinPos][0], SunucuBilgi[LSNNYayinPos][1], SunucuBilgi[LSNNYayinPos][2]);
    SetPlayerCameraLookAt(playerid, SunucuBilgi[LSNNYayinPos][0], SunucuBilgi[LSNNYayinPos][1], SunucuBilgi[LSNNYayinPos][2]);
    AttachCameraToDynamicObject(playerid, SunucuBilgi[LSNNKamera]);

    BasariMesaji(playerid, "Canlý yayýn izlemeye baþladýnýz. (Görüntüde bozukluk varsa: /tvyenile)");
    SetTimerEx("TVYenile", 1000, false, "d", playerid);
    return 1;
}

TVYenile(playerid); public TVYenile(playerid)
{
    if(!PlayerInfo[playerid][pTVMode] || !SunucuBilgi[LSNNYayin] || !SunucuBilgi[LSNNYayinDurum])
        return pc_cmd_tvizle(playerid, "");

    SetPlayerInterior(playerid, SunucuBilgi[LSNNYayinINT]);
    AC_SetPlayerVirtualWorld(playerid, SunucuBilgi[LSNNYayinVW]);
    TogglePlayerControllable(playerid, 0);
    TogglePlayerSpectating(playerid, true);
    SetPlayerCameraPos(playerid, SunucuBilgi[LSNNYayinPos][0], SunucuBilgi[LSNNYayinPos][1], SunucuBilgi[LSNNYayinPos][2]);
    SetPlayerCameraLookAt(playerid, SunucuBilgi[LSNNYayinPos][0], SunucuBilgi[LSNNYayinPos][1], SunucuBilgi[LSNNYayinPos][2]);
    AttachCameraToDynamicObject(playerid, SunucuBilgi[LSNNKamera]);
    return 1;
}

CMD:tvyenile(playerid)
{
    if(!PlayerInfo[playerid][pTVMode] || !SunucuBilgi[LSNNYayin] || !SunucuBilgi[LSNNYayinDurum])
        return HataMesajiC(playerid, "Bir hata oluþtu, bu komutu kullanamazsýnýz.");

    SetPlayerInterior(playerid, SunucuBilgi[LSNNYayinINT]);
    AC_SetPlayerVirtualWorld(playerid, SunucuBilgi[LSNNYayinVW]);
    TogglePlayerControllable(playerid, 0);
    TogglePlayerSpectating(playerid, true);
    SetPlayerCameraPos(playerid, SunucuBilgi[LSNNYayinPos][0], SunucuBilgi[LSNNYayinPos][1], SunucuBilgi[LSNNYayinPos][2]);
    SetPlayerCameraLookAt(playerid, SunucuBilgi[LSNNYayinPos][0], SunucuBilgi[LSNNYayinPos][1], SunucuBilgi[LSNNYayinPos][2]);
    AttachCameraToDynamicObject(playerid, SunucuBilgi[LSNNKamera]);
    return 1;
}
*/
CMD:haber(playerid, params[])
{
    if(PlayerInfo[playerid][pFaction] == -1 || Faction_GetType(PlayerInfo[playerid][pFaction]) != LSNN)
        return HataMesajiC(playerid, "Bu komutu kullanmak için televizyon kanalýnda çalýþmalýsýn.");

    if(!PlayerInfo[playerid][pFactionDuty])return
        SunucuMesajiC(playerid, "Ýþbaþýnda deðilsin.");

    if(isnull(params) || strlen(params) > 256)return
        KullanimMesajiC(playerid, "/haber [yazý]");

    new fid = PlayerInfo[playerid][pFaction];

    foreach(new j : Player)
    {
        if(!IsPlayerConnected(j) || !PlayerInfo[j][pNews])continue;
        SendFormattedMessage(j, COLOR_LIGHTGREEN, "[%s] Sunucu %s: %s", FactionInfo[fid][fShortName], ReturnRoleplayName(playerid), params);
    }

    return 1;
}

LabelSil(targetid); public LabelSil(targetid)
{
    if(PlayerInfo[targetid][pOzellikGosteriyor])
    {
        PlayerInfo[targetid][pOzellikGosteriyor] = false;
        DestroyDynamic3DTextLabelEx(PlayerInfo[targetid][pOzellikLabel]);
    }
    return 1;
}

CMD:tedaviol(playerid, params[])
{
    new buildingid = GetPlayerBuilding(playerid, true);

    if(buildingid != -1 && BuildingInfo[buildingid][bType] == HASTANE && PlayerInfo[playerid][pTedaviSure] != 1)
    {
        if(!PlayerInfo[playerid][pLegHit]) return HataMesajiC(playerid, "Yaralý deðilsin.");

        PlayerInfo[playerid][pLegHit] = 0;
        ClearAnimations(playerid);
        AC_SetPlayerHealth(playerid, 100);
        OAC_GivePlayerMoney(playerid, -200);
        BuildingInfo[buildingid][bCash] += 20;
        BasariMesaji(playerid, "$200 karþýlýðýnda tedavi oldunuz, bir süre aksiyonlu rollere girmeyin.");
        LogYaz(playerid, "/tedaviol", -1);
        return 1;
    }

    if(PlayerInfo[playerid][pTedaviSure] != 1)
        return HataMesajiC(playerid, "Yaralý deðilsiniz veya tedavi süreniz dolmamýþ.");

    LogYaz(playerid, "/tedaviol", -1);

    PlayerInfo[playerid][pInCare] = 1;
    PlayerInfo[playerid][pCare] = -1;
    DestroyDynamic3DTextLabelEx(PlayerInfo[playerid][pNameTag]);
    if(PlayerInfo[playerid][pAgirYarali])
    {
//          AC_ResetPlayerWeapons(playerid);
        BasariMesaji(playerid, "Tedavi oldunuz fakat yaþadýðýnýz yaralanmanýn etkileri halen sürüyor.");
        PlayerInfo[playerid][pAgirYarali] = 0;
        PlayerInfo[playerid][pTedaviSure] = 0;
        PlayerTextDrawHide(playerid, PlayerInfo[playerid][pTextdraws][0]);
        return 1;
    }
    PlayerInfo[playerid][pTedaviSure] = 0;
    PlayerTextDrawHide(playerid, PlayerInfo[playerid][pTextdraws][0]);
    BasariMesaji(playerid, "Tedavi oldunuz fakat yaþadýðýnýz yaralanmanýn etkileri halen sürüyor.");
    return 1;
}

CMD:tedaviet(playerid, params[])
{
    new id;

    if(sscanf(params, "k<m>", id))return
        KullanimMesajiC(playerid, "/tedaviet [id/isim]");

    if(!IsPlayerConnected(id) || id == playerid)return
        HataMesajiC(playerid, "Kendi kendini tedavi edemezsin.");

    if(!ProxDetectorS(5.0, playerid, id))return
        SunucuMesaji(playerid, "Bu oyuncuya yakýn deðilsin.");

    if(PlayerInfo[id][pCare] != -1)return
        SunucuMesaji(playerid, "Bu oyuncuya tedavi isteði zaten atýlmýþ.");

    if(GetTickCount() - PlayerInfo[playerid][pSendedCare] < 20000)return
        SunucuMesaji(playerid, "20 saniyede bir bu komutu kullanabilirsiniz.");

    if(PlayerInfo[id][pDeath] == 0) return HataMesajiC(playerid, "Bu oyuncu ölü deðil.");

    PlayerInfo[id][pCare] = playerid;
    PlayerInfo[playerid][pSendedCare] = GetTickCount();

    BasariMesaji(id, "%s sizi tedavi etmek istiyor. Kabul etmek için /kabulet tedavi yazýn.", ReturnRoleplayName(playerid));
    BasariMesaji(playerid, "%s kiþisine tedavi isteði gönderildi.", ReturnRoleplayName(id));
    LogYaz(playerid, "/tedaviet", id);
    return 1;
}

CMD:grafiti(playerid, params[]) return pc_cmd_graffiti(playerid, params);
CMD:graffiti(playerid, params[])
{
    if(PlayerInfo[playerid][pEditingMode])return
        SunucuMesaji(playerid, "Düzenleme yaparken bunu yapamazsýn.");

    if(PlayerInfo[playerid][pLevel] < 3) return HataMesajiC(playerid, "Bu sistemden yararlanmak için en az 3 seviye olmalýsýnýz.");

    new fid = PlayerInfo[playerid][pFaction];

    if(fid == -1 || fid != -1 && !FactionInfo[fid][fGraffiti])return
        SunucuMesaji(playerid, "Bu komutu kullanmak için graffiti izni olan bir oluþumda olmalýsýn.");

    if(AC_GetPlayerWeapon(playerid) == 41 && AC_GetPlayerAmmo(playerid) >= 100)
    {
        new yapabilir = 0;
        foreach(new j : Graffitis) if(GraffitoInfo[j][gExists])
        {
            if(IsPlayerInRangeOfPoint(playerid, 3.0, GraffitoInfo[j][gX], GraffitoInfo[j][gY], GraffitoInfo[j][gZ]) == 0)continue;
            yapabilir = 1;
            PlayerInfo[playerid][pSelectedItem] = j;
            Dialog_Show(playerid, DialogGraffito, DIALOG_STYLE_INPUT, "Grafiti", "Grafiti metnini #renk ile birlikte girin.\nKullaným: '#renk GrafittiYazisi'", "Ýleri", "Ýptal");
            ApplyAnimation(playerid, "GRAFFITI", "spraycan_fire", 4.0, 0, 0, 0, 0, 0);

            break;
        }
        if(yapabilir == 0) return HataMesajiC(playerid, "Yakýnýnýzda grafiti yapabileceðiniz bir alan yok. Lütfen /rapor ile grafiti alaný isteyin.");
    }
    else HataMesajiC(playerid, "Üzerinizde boya kutusu (spray) bulunmuyor veya kapasitesi yeterli deðil. ");

    return 1;
}

CMD:apbkullanimdisixd(playerid, params[])
{
    if(isnull(params) || strlen(params) > 50)return
        KullanimMesajiC(playerid, "/apb [ekle - liste]");
    if(Faction_GetType(PlayerInfo[playerid][pFaction]) == GOVERNMENT) return HataMesajiC(playerid, "Bu seçeneði sadece polis kullanabilir.");
    if(!strcmp(params, "liste", true)) mysql_tquery(ourConnection, "SELECT * FROM wanteds ORDER BY id DESC", "OnAPBListSearch", "dd", playerid, 1);
    else if(!strcmp(params, "ekle", true)) Dialog_Show(playerid, DialogAPBCreate, DIALOG_STYLE_INPUT, "APB Oluþtur", "Oluþturulacak APB'nin konusunu girin:", "Ýleri", "<< Geri");

    else return
        HataMesajiC(playerid, "Geçersiz parametre.");

    return 1;
}

CMD:barikat(playerid, params[])
{
    if(SunucuBilgi[AntiDinamikObje])
        return HataMesaji(playerid, "Bu sistem geçici olarak geliþtirici ekip tarafýndan pasife çekildi.");
        
    if(PlayerInfo[playerid][pEditingMode]) return HataMesajiC(playerid, "Düzenleme iþlemi esnasýnda bu komutu kullanamazsýnýz.");

    if(GetPlayerInterior(playerid) > 0 && GetPlayerVirtualWorld(playerid) > 0)
        return HataMesajiC(playerid, "Bu komutu sadece dýþ dünyada kullanabilirsiniz.");
            
    return Dialog_Show(playerid, DialogRoadblock, DIALOG_STYLE_LIST, "Barikat Sistemi", "Barikat Yerleþtir\nTüm Barikatlarý Temizle\nBenim tarafýmdan konulmuþ tüm barikatlarý temizle\nOluþumuma ait tüm barikatlarý temizle", "Sonraki", "Geri");
}

CMD:barikatsec(playerid) {
    if(SunucuBilgi[AntiDinamikObje])
        return HataMesaji(playerid, "Bu sistem geçici olarak geliþtirici ekip tarafýndan pasife çekildi.");
    if(PlayerInfo[playerid][pEditingMode])
        return HataMesajiC(playerid, "Düzenleme yaparken bunu yapamazsýn.");
    SetPVarInt(playerid, "BarikatSeciyor", 1);
    SelectObject(playerid);
    return 1;
}

CMD:ybarikatsil(playerid) {
    new id = YakindakiBarikatiBul(playerid);
    if(id == -1) return HataMesajiC(playerid, "Yakýnýnýzda barikat bulunmamaktadýr.");
    new location[MAX_ZONE_NAME];
    RoadBlockInfo[id][rbExists] = 0;
    RoadBlockInfo[id][rbType] = 0;
    GetCoords2DZone(RoadBlockInfo[id][rbPosX], RoadBlockInfo[id][rbPosY], location, MAX_ZONE_NAME);

    DestroyDynamicObjectEx(RoadBlockInfo[id][rbObject]);

    if(PlayerInfo[playerid][pFaction] != 1) SendFactionMessage(PlayerInfo[playerid][pFaction], "** HQ: %s, %s lokasyonundaki barikatý kaldýrdý.", ReturnRoleplayName(playerid), location);
    else SendFactionMessageTR(PlayerInfo[playerid][pFaction], "** HQ: %s, %s lokasyonundaki barikatý kaldýrdý.", ReturnRoleplayName(playerid), location);

    Iter_Remove(RoadBlocks, id);
    return 1;
}

CMD:ybarikatid(playerid) {
    new id = YakindakiBarikatiBul(playerid);
    if(id == -1) return HataMesajiC(playerid, "Yakýnýnýzda barikat bulunmamaktadýr.");
    SendFormattedMessage(playerid, COLOR_LIGHTRED, "[SA-RP] {FFFFFF}Yakýnýnýzdaki barikatýn ID'si %d.", id);
    return 1;
}

CMD:barikatsil(playerid, params[]) {
    if(strlen(params) < 1) return KullanimMesajiC(playerid, "/barikatsil <ID>");
    if(!IsNumeric(params)) return KullanimMesajiC(playerid, "/barikatsil <ID>");
    if(strval(params) < 0 || strlen(params) >= MAX_ROADBLOCKS) return HataMesajiC(playerid, "Hatalý barikat ID'si girdiniz.");
    if(RoadBlockInfo[strval(params)][rbExists] == 0) return HataMesajiC(playerid, "Hatalý barikat ID'si girdiniz.");
    new id = strval(params);
    if(!IsPlayerInRangeOfPoint(playerid, 5.0, RoadBlockInfo[id][rbPosX], RoadBlockInfo[id][rbPosY], RoadBlockInfo[id][rbPosZ])) return HataMesajiC(playerid, "Barikata yeterince yakýn deðilsiniz.");
    new location[MAX_ZONE_NAME];
    RoadBlockInfo[id][rbExists] = 0;
    RoadBlockInfo[id][rbType] = 0;
    GetCoords2DZone(RoadBlockInfo[id][rbPosX], RoadBlockInfo[id][rbPosY], location, MAX_ZONE_NAME);
    DestroyDynamicObjectEx(RoadBlockInfo[id][rbObject]);
    if(PlayerInfo[playerid][pFaction] != 1) SendFactionMessage(PlayerInfo[playerid][pFaction], "** HQ: %s, %s lokasyonundaki barikatý kaldýrdý.", ReturnRoleplayName(playerid), location);
    else SendFactionMessageTR(PlayerInfo[playerid][pFaction], "** HQ: %s, %s lokasyonundaki barikatý kaldýrdý.", ReturnRoleplayName(playerid), location);
    Iter_Remove(RoadBlocks, id);
    return 1;
}

CMD:barikatduzenle(playerid, params[]) {
    if(strlen(params) < 1) return KullanimMesajiC(playerid, "/barikatsil <ID>");
    if(!IsNumeric(params)) return KullanimMesajiC(playerid, "/barikatsil <ID>");
    if(strval(params) < 0 || strlen(params) >= MAX_ROADBLOCKS) return HataMesajiC(playerid, "Hatalý barikat ID'si girdiniz.");
    if(RoadBlockInfo[strval(params)][rbExists] == 0) return HataMesajiC(playerid, "Hatalý barikat ID'si girdiniz.");
    new id = strval(params);
    if(!IsPlayerInRangeOfPoint(playerid, 5.0, RoadBlockInfo[id][rbPosX], RoadBlockInfo[id][rbPosY], RoadBlockInfo[id][rbPosZ])) return HataMesajiC(playerid, "Barikata yeterince yakýn deðilsiniz.");
    PlayerInfo[playerid][pEditingMode] = 10;
    PlayerInfo[playerid][pSelectedItem] = strval(params);
    SunucuMesaji(playerid, "Barikatý düzenliyorsunuz.");
    EditDynamicObject(playerid, RoadBlockInfo[id][rbObject]);
    return 1;
}

CMD:aracara(playerid, params[])
{
    new vid = GetNearestVehicle(playerid);

    if(vid == -1)return
        SunucuMesaji(playerid, "Aracýn yakýnýnda veya içerisinde deðilsin.");

    Trunk_ShowItems(playerid, vid, 1);

    PlayerME(playerid, "aracý aramaya baþlar.");

    return 1;
}

CMD:aracibagla(playerid, params[])
{
    /*if(!IsPlayerInRangeOfPoint(playerid, 10.0, IMPOUND_X, IMPOUND_Y, IMPOUND_Z))
    {
        AC_SetPlayerCheckpoint(playerid, IMPOUND_X, IMPOUND_Y, IMPOUND_Z, 5.0);
        return HataMesajiC(playerid, "Ele geçirilen araçlarýn depolandýðý noktada deðilsiniz.");
    }*/

    new id, days, amount, reason[64];

    if(sscanf(params, "ddds[64]", id, days, amount, reason))return
        KullanimMesajiC(playerid, "/aracibagla [aracid] [gün] [fiyat] [sebep]");

    if(!PlayerInfo[playerid][pDivision][4])return
        SunucuMesaji(playerid, "Trafik biriminde deðilsin.");

    if(!IsValidVehicle(id) || VehicleInfo[id][vOwner] == -1 || !IsPlayerNearestVehicle(playerid, id))return
        SunucuMesaji(playerid, "Araca yakýn deðilsin ya da ele geçiremezsin.");

    if(amount < 0)return
        SunucuMesajiC(playerid, "Envanterde boþ yer yok.");

    SendFactionMessage(PlayerInfo[playerid][pFaction], "** HQ: %s, %s model aracý baðladý. (Plaka: %s)",  ReturnRoleplayName(playerid), GetVehicleModelName(VehicleInfo[id][vModel]), VehicleInfo[id][vPlate]);

    new expires = (!days) ? gettime() : gettime() + (60 * 60 * 24 * days);

    mysql_format(ourConnection, queryx, sizeof(queryx), "INSERT INTO vehicles_impounded (created_at, vehicle_id, officer, reason, expires, price, model, plate, owner_id) VALUES (NOW(), '%d', '%e', '%e', '%d', '%d', '%e', '%e', '%d')",
        VehicleInfo[id][vID],
        ReturnRoleplayName(playerid),
        reason, expires, amount,
        GetVehicleModelName(VehicleInfo[id][vModel]),
        VehicleInfo[id][vPlate],
        VehicleInfo[id][vOwner]);

    mysql_tquery(ourConnection, queryx);

    VehicleInfo[id][vImpounded] = 1;
    VehicleInfo[id][vSpawnPosX] = IMPOUND_SPAWN_X;
    VehicleInfo[id][vSpawnPosY] = IMPOUND_SPAWN_Y;
    VehicleInfo[id][vSpawnPosZ] = IMPOUND_SPAWN_Z;
    VehicleInfo[id][vSpawnPosA] = IMPOUND_SPAWN_ANGLE;

    Vehicle_Despawn(id);

    return 1;
}
CMD:acezakes(playerid, params[])
{
    new id, amount, reason[64];

    if(sscanf(params, "dds[64]", id, amount, reason))return
        KullanimMesajiC(playerid, "/acezakes [aracid] [miktar] [sebep]");

    if(!IsValidVehicle(id) || VehicleInfo[id][vOwner] == -1 || !IsPlayerNearestVehicle(playerid, id, 5.0) || VehicleInfo[id][vOwner] == PlayerInfo[playerid][pID])return
        SunucuMesaji(playerid, "Araca yakýn deðilsin veya ceza kesemiyorsun.");

    if(amount < 10)return
        SunucuMesaji(playerid, "Geçersiz deðer. ($10+)");

    mysql_format(ourConnection, queryx, sizeof(queryx), "INSERT INTO police_fine_records (created_at, officer, vehicle_id, amount, reason) VALUES (NOW(), '%e', '%d', '%d', '%e')", ReturnRoleplayName(playerid), VehicleInfo[id][vID], amount, reason);
    mysql_tquery(ourConnection, queryx);

    BasariMesaji(playerid, "%d nolu araca %s sebebiyle $%d ceza kestin.", id, reason, amount);

    return 1;
}
CMD:ustundenal(playerid, params[])
{
    new id, option;

    if(sscanf(params, "k<m>d", id, option))return
        KullanimMesajiC(playerid, "/ustundenal [id/isim] [0: sürücü lisansý - 1: denizcilik lisansý - 2: uçuþ lisansý - 3: silah]");

    if(!IsPlayerConnected(id) || id == playerid)return
        HataMesajiC(playerid, "Kendi kendinin üzerinden bir þey alamazsýn.");

    if(!ProxDetectorS(5.0, playerid, id))return
        SunucuMesajiC(playerid, "Oyuncuya yakýn deðilsin.");

    if(option >= 0 && option < 3)
    {
        static const licensesName[3][32] = {"sürücü lisansý", "denizcilik lisansý", "uçuþ lisansý"};

        if(!PlayerInfo[id][pLicenses][option])return
            HataMesaji(playerid, "Oyuncunun üzerinde %s yok.", licensesName[option]);

        PlayerInfo[id][pLicenses][option] = 0;
        if(!option)PlayerInfo[id][pLicenseWarn] = 0;

        BasariMesaji(id, "%s %snýza el koydu", ReturnRoleplayName(playerid), licensesName[option]);

        PlayerMEPlayer(playerid, id, "kiþisinin lisansýna el koyar");
    }
    else if(option == 3) Inventory_ShowItems(id, playerid, true);

    return 1;
}

flags:plakakontrol(CMD_LSPD);
CMD:plakakontrol(playerid, params[]) {
    new vehid;
    if(sscanf(params, "d", vehid)) return KullanimMesajiC(playerid, "/plakakontrol [araç id]");
    if(!IsValidVehicle(vehid)) return HataMesajiC(playerid, "Araç bulunamadý.");
    new Float:vX, Float:vY, Float:vZ;
    GetVehiclePos(vehid, vX, vY, vZ);
    if(!IsPlayerInRangeOfPoint(playerid, 5.0, vX, vY, vZ)) return HataMesajiC(playerid, "Araç yakýnýnýzda deðil.");
    if(VehicleInfo[vehid][vUnregistered]) return HataMesajiC(playerid, "Araç üstünde plaka bulunmamaktadýr.");
    SunucuMesaji(playerid, "%d ID'li aracýn plakasý: %s", vehid, VehicleInfo[vehid][vPlate]);
    return 1;
}

CMD:cezakes(playerid, params[])
{
    new id, amount, reason[64];

    if(sscanf(params, "k<m>ds[64]", id, amount, reason))return
        KullanimMesajiC(playerid, "/cezakes [id/isim] [miktar] [sebep]");

    if(!IsPlayerConnected(id) || id == playerid)return
        HataMesajiC(playerid, "Kendi kendine ceza kesemezsin.");

    if(!ProxDetectorS(6.0, playerid, id))return
        SunucuMesajiC(playerid, "Oyuncuya yakýn deðilsin.");

    if(amount < 10)return
        SunucuMesaji(playerid, "Geçersiz deðer. ($10+)");

    mysql_format(ourConnection, queryx, sizeof(queryx), "INSERT INTO police_fine_records (created_at, officer, target, amount, reason) VALUES (NOW(), '%e', '%e', '%d', '%e')", ReturnRoleplayName(playerid), ReturnRoleplayName(id), amount, reason);
    mysql_tquery(ourConnection, queryx);

    mysql_format(ourConnection, queryx, sizeof(queryx), "INSERT INTO police_arrest_records (officer, created_at, target) VALUES ('%e', NOW(), '%e')", ReturnRoleplayName(playerid), ReturnRoleplayName(id));
    mysql_tquery(ourConnection, queryx, "OnFineInsert", "ds", playerid, reason);
    PlayerInfo[id][pToplamCeza] += amount;
    BasariMesaji(id, "%s sana %s sebebiyle ceza kesti.", ReturnRoleplayName(playerid), reason);
    BasariMesaji(id, "Ceza: $%d. (Cezayý ödemek için: /cezalarim)", amount);
    BasariMesaji(playerid, "%s kiþisine %s sebebiyle $%d ceza kestin.", ReturnRoleplayName(id), reason, amount);

//    PlayerMEPlayer(playerid, id, "kiþisine ceza makbuzunu uzatýr");

    return 1;
}

flags:amuhur(CMD_Marvellous);
CMD:amuhur(playerid, params[]) {
    new id;
    if(sscanf(params, "d", id)) return KullanimMesajiC(playerid, "/amuhur <iþyeri ID>");
    if(BuildingInfo[id][bExists] == 0) return HataMesajiC(playerid, "Ýþletme bulunamadý.");
    if(!BuildingInfo[id][bMuhurlu]) {
        Pickup_Destroy(BuildingInfo[id][bPickup]);
        BuildingInfo[id][bMuhurlu] = 1;
        SunucuMesaji(playerid, "%d ID'li iþletmeyi mühürledin.", id);
        BuildingInfo[id][bPickup] = Pickup_Create(ELEMENT_BUILDING, id, 19522, 23, BuildingInfo[id][bPosX], BuildingInfo[id][bPosY], BuildingInfo[id][bPosZ], BuildingInfo[id][bPosWorld], BuildingInfo[id][bPosInterior]);
    }
    else {
        Pickup_Destroy(BuildingInfo[id][bPickup]);
        BuildingInfo[id][bMuhurlu] = 0;
        PlayerAME(playerid, "iþletmenin mührünü açar.");
        SunucuMesaji(playerid, "%d ID'li iþletmenin mührünü açtýn.", id);
        BuildingInfo[id][bPickup] = Pickup_Create(ELEMENT_BUILDING, id, (BuildingInfo[id][bType] == COMPLEX) ? 1314 : 1239, 23, BuildingInfo[id][bPosX], BuildingInfo[id][bPosY], BuildingInfo[id][bPosZ], BuildingInfo[id][bPosWorld], BuildingInfo[id][bPosInterior]);
    }
    return 1;
}

CMD:freklam(playerid, params[]) {
    if(Faction_GetType(PlayerInfo[playerid][pFaction]) != POLICE && Faction_GetType(PlayerInfo[playerid][pFaction]) != MEDICAL && Faction_GetType(PlayerInfo[playerid][pFaction]) != GOVERNMENT) return HataMesajiC(playerid, "Bu komutu kullanamazsýn.");
    if(PlayerInfo[playerid][pRank] > 3) return HataMesajiC(playerid, "Bu komutu kullanamazsýn.");
    new message[124];
    if(sscanf(params, "s[124]", message))return
            KullanimMesajiC(playerid, "/freklam[reklam metni]");
    foreach(new j : Player)
        SendFormattedMessage(j, COLOR_GREEN, "[Oluþum Reklamý] %s [%s]", message, FactionInfo[PlayerInfo[playerid][pFaction]][fName]);
    SunucuMesaji(playerid, "Oluþum reklamý yayýnlandý.");
    return 1;
}

CMD:copkaristir(playerid, params[]) {
    new opsiyon[32];
    if(sscanf(params, "s[32]", opsiyon)) return KullanimMesajiC(playerid, "/copkaristir <al/sil/yerebirak/yerdenal/ac/envanter>");
    if(!strcmp(opsiyon, "al", true)) {
        if(PlayerInfo[playerid][pCopTasiyor]) return HataMesajiC(playerid, "Sadece 1 çöp poþeti taþýyabilirsin.");
        if(PlayerInfo[playerid][pCopEsyaAldi] == 5) return HataMesajiC(playerid, "Saat baþý maksimum 5 tane çöp alýp açabilirsiniz.");
        new id = YakindakiCopKutusunuBul(playerid);
        if(id != -1) {
            new sonuc = CopKutusuCopAl(id);
            if(!sonuc) return HataMesajiC(playerid, "Bu çöp konteynýrýnda daha fazla çöp kalmamýþ.");
            PlayerInfo[playerid][pCopTasiyor] = true;
            PlayerAME(playerid, "çöp konteynýrýndan bir çöp poþeti alýr.");
            SunucuMesaji(playerid, "Çöp konteynýrýndan bir poþet aldýnýz. /copkaristir yerebirak ile çöpü yere býrakabilirsiniz.");
            SunucuMesaji(playerid, "Çöpü açýp içinden rastgele bir eþya elde etmek için yere býrakýp /copkaristir ac yazýn.");
            SunucuMesaji(playerid, "Eðer /copkaristir sil yazarsanýz çöpü tamamen silebilirsiniz.");
            new slot = -1;
            for(new i = 6; i < MAX_PLAYER_ATTACHED_OBJECTS; i++) {
                if(!IsPlayerAttachedObjectSlotUsed(playerid, i)) {
                    slot = i;
                    PlayerInfo[playerid][pCopObjeSlot] = slot;
                    break;
                }
            }
            if(slot != -1)
                SetPlayerAttachedObject(playerid, slot, 1265, 6, 0.220999, 0.091000, -0.072999, 9.899993, -48.500034, -130.899978, 0.370000, 0.577000, 0.989000);
            else return HataMesajiC(playerid, "Boþ aksesuar slotu olmadýðý için elinize çöp poþeti objesi verilmeyecek.");

        } else return HataMesajiC(playerid, "Yakýnýnýzda bir çöp konteynýrý yok.");
    }
    else if(!strcmp(opsiyon, "sil", true)) {
        if(!PlayerInfo[playerid][pCopTasiyor]) return HataMesajiC(playerid, "Zaten çöp taþýmýyorsun.");
        if(PlayerInfo[playerid][pCopObjeSlot] != -1)
            RemovePlayerAttachedObject(playerid, PlayerInfo[playerid][pCopObjeSlot]);
        PlayerInfo[playerid][pCopObjeSlot] = -1;
        PlayerInfo[playerid][pCopTasiyor] = false;
        SunucuMesaji(playerid, "Elinde olan çöp poþetini sildin.");
    }
    else if(!strcmp(opsiyon, "yerdenal", true)) {
        if(PlayerInfo[playerid][pCopTasiyor]) return HataMesajiC(playerid, "Sadece 1 çöp poþeti taþýyabilirsin.");
        new id = -1;
        foreach(new i: YerdekiCopler) {
            if(YerdekiCopInfo[i][ycopExists]) {
                if(IsPlayerInRangeOfPoint(playerid, 3.0, YerdekiCopInfo[i][ycopPosX], YerdekiCopInfo[i][ycopPosY], YerdekiCopInfo[i][ycopPosZ]) && GetPlayerInterior(playerid) == YerdekiCopInfo[i][ycopInterior] && GetPlayerVirtualWorld(playerid) == YerdekiCopInfo[i][ycopVW]) {
                    id = i;
                    break;
                }
            }
        }
        if(id == -1) return HataMesajiC(playerid, "Yakýnýnýzda yerde çöp yok.");
        Iter_Remove(YerdekiCopler, id);
        DestroyDynamicObjectEx(YerdekiCopInfo[id][ycopObje]);
        DestroyDynamic3DTextLabelEx(YerdekiCopInfo[id][ycopLabel]);
        PlayerInfo[playerid][pCopTasiyor] = true;
        YerdekiCopInfo[id][ycopExists] = 0;
        PlayerAME(playerid, "yerden bir çöp poþeti alýr.");
        SunucuMesaji(playerid, "Yerden bir poþet aldýnýz. /copkaristir yerebirak ile çöpü yere býrakabilirsiniz.");
        SunucuMesaji(playerid, "Çöpü açýp içinden rastgele bir eþya elde etmek için yere býrakýp /copkaristir ac yazýn.");
        SunucuMesaji(playerid, "Eðer /copkaristir sil yazarsanýz çöpü tamamen silebilirsiniz.");
        new slot = -1;
        for(new i = 6; i < MAX_PLAYER_ATTACHED_OBJECTS; i++) {
            if(!IsPlayerAttachedObjectSlotUsed(playerid, i)) {
                slot = i;
                PlayerInfo[playerid][pCopObjeSlot] = slot;
                break;
            }
        }
        if(slot != -1)
            SetPlayerAttachedObject(playerid, slot, 1265, 6, 0.220999, 0.091000, -0.072999, 9.899993, -48.500034, -130.899978, 0.370000, 0.577000, 0.989000);
        else return HataMesajiC(playerid, "Boþ aksesuar slotu olmadýðý için elinize çöp poþeti objesi verilmeyecek.");
    }
    else if(!strcmp(opsiyon, "yerebirak", true)) {
        if(!PlayerInfo[playerid][pCopTasiyor]) return HataMesajiC(playerid, "Çöp taþýmýyorsun.");
        PlayerInfo[playerid][pCopTasiyor] = false;
        if(PlayerInfo[playerid][pCopObjeSlot] != -1)
            RemovePlayerAttachedObject(playerid, PlayerInfo[playerid][pCopObjeSlot]);
        PlayerInfo[playerid][pCopObjeSlot] = -1;
        new id = Iter_Free(YerdekiCopler);
        Iter_Add(YerdekiCopler, id);
        YerdekiCopInfo[id][ycopExists] = 1;
        YerdekiCopInfo[id][ycopID] = id;
        new Float:pX, Float:pY, Float:pZ;
        GetPlayerPos(playerid, pX, pY, pZ);
        YerdekiCopInfo[id][ycopPosZ] = pZ - 0.7;
        GetXYInFrontOfPlayer(playerid, pX, pY, 1.5);
        YerdekiCopInfo[id][ycopPosX] = pX;
        YerdekiCopInfo[id][ycopPosY] = pY;
        YerdekiCopInfo[id][ycopInterior] = GetPlayerInterior(playerid);
        YerdekiCopInfo[id][ycopVW] = GetPlayerVirtualWorld(playerid);
        YerdekiCopInfo[id][ycopObje] = CreateDynamicObject(1265, YerdekiCopInfo[id][ycopPosX], YerdekiCopInfo[id][ycopPosY], YerdekiCopInfo[id][ycopPosZ], 0.0, 0.0, 0.0,  YerdekiCopInfo[id][ycopVW], YerdekiCopInfo[id][ycopInterior]);
        YerdekiCopInfo[id][ycopLabel] = CreateDynamic3DTextLabel("[Çöp]", COLOR_WHITE, YerdekiCopInfo[id][ycopPosX], YerdekiCopInfo[id][ycopPosY], YerdekiCopInfo[id][ycopPosZ] + 0.75, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, YerdekiCopInfo[id][ycopVW]);
        PlayerAME(playerid, "yere bir çöp poþeti býrakýr.");
        SunucuMesaji(playerid, "Yere bir poþet býraktýnýz. /copkaristir yerdenal ile tekrar alabilir, /copkaristir ac ile poþeti açabilirsiniz.");
    }
    else if(!strcmp(opsiyon, "ac", true)) {
        if(PlayerInfo[playerid][pCopTasiyor]) return HataMesajiC(playerid, "Önce elindeki çöpü yere býrakmalýsýn.");
        new slot = -1;
        for(new i; i < 5; i++) {
            if(PlayerInfo[playerid][pCopEsyaEnvanter][i] != -1) continue;
            slot = i;
            break;
        }
        if(slot == -1) return HataMesajiC(playerid, "Çöp envanterinizde daha fazla eþya taþýyamazsýnýz.");
        if(PlayerInfo[playerid][pCopEsyaAldi] == 5) return HataMesajiC(playerid, "Saat baþý maksimum 5 tane çöp alýp açabilirsiniz.");
        new id = -1;
        foreach(new i: YerdekiCopler) {
            if(YerdekiCopInfo[i][ycopExists]) {
                if(IsPlayerInRangeOfPoint(playerid, 3.0, YerdekiCopInfo[i][ycopPosX], YerdekiCopInfo[i][ycopPosY], YerdekiCopInfo[i][ycopPosZ]) && GetPlayerInterior(playerid) == YerdekiCopInfo[i][ycopInterior] && GetPlayerVirtualWorld(playerid) == YerdekiCopInfo[i][ycopVW]) {
                    id = i;
                    break;
                }
            }
        }
        if(id == -1) return HataMesajiC(playerid, "Yakýnýnýzda yerde çöp yok.");
        Iter_Remove(YerdekiCopler, id);
        DestroyDynamicObjectEx(YerdekiCopInfo[id][ycopObje]);
        DestroyDynamic3DTextLabelEx(YerdekiCopInfo[id][ycopLabel]);
        YerdekiCopInfo[id][ycopExists] = 0;
        new copRand = random(COPESYASAYISI);
        PlayerInfo[playerid][pCopEsyaEnvanter][slot] = copRand;
        PlayerInfo[playerid][pCopEsyaAldi]++;
        PlayerAME(playerid, "çöp poþetini açar ve içinden bir eþya alýr.");
        SunucuMesaji(playerid, "Çöp poþetini açtýnýz ve içinden %s aldýnýz.", CopEsya[copRand][esyaIsim]);
    }
    else if(!strcmp(opsiyon, "envanter", true)) {
        new strEnvanter[400];
        for(new i; i < 5; i++) {
            if(PlayerInfo[playerid][pCopEsyaEnvanter][i] == -1)
                format(strEnvanter, sizeof strEnvanter, "%s{3e6bd3}%d.\t{ff0000}Eþya yok\t{d3643e}$0\n", strEnvanter, i+1);
            else
                format(strEnvanter, sizeof strEnvanter, "%s{3e6bd3}%d.\t{ffffff}%s\t{4dcd3b}$%d\n", strEnvanter, i+1, CopEsya[PlayerInfo[playerid][pCopEsyaEnvanter][i]][esyaIsim], CopEsya[PlayerInfo[playerid][pCopEsyaEnvanter][i]][esyaPara]);
        }
        SunucuMesaji(playerid, "Satmak istediðiniz eþyayý seçin.");
        Dialog_Show(playerid, DialogCopEsyaSecenek, DIALOG_STYLE_TABLIST_HEADERS, "Çöp Envanteri", "{838483}Slot\t{838483}Eþya Ýsmi\t{838483}Kazanýlacak Para\n%s", "Sat", "Ýptal", strEnvanter);
    }
    else return HataMesajiC(playerid, "Bilinmeyen bir parametre girdiniz.");
    return 1;
}

flags:aracilan(CMD_USER);
CMD:aracilan(playerid, params[])
{
    new vehicleid = GetPlayerVehicleID(playerid);

    if(!IsPlayerInAnyVehicle(playerid))
        return HataMesajiC(playerid, "Ýlan vermek için kendinize ait bir araçta olmalýsýnýz.");

    if(!Vehicle_IsOwner(playerid, vehicleid, true))
        return HataMesajiC(playerid, "Bu araç size ait deðil, ilan veremezsiniz.");

    if(PlayerInfo[playerid][pCash] < 200)
        return HataMesajiC(playerid, "Yeterli paran yok.");

    if(VehicleInfo[vehicleid][vCallSign] == true)
    {
        DestroyDynamic3DTextLabelEx(VehicleInfo[vehicleid][vSignText]);
        VehicleInfo[vehicleid][vCallSign] = false;
        SunucuMesaji(playerid, "Aracýnýzda bulunan ilaný kaldýrdýnýz.");
    }
    else
    {
        new yazi[40];

        if(sscanf(params, "s[40]", yazi))return
            KullanimMesajiC(playerid, "/aracilan [yazý] (UYARI: NON-RP yazýlar ceza sebebidir.)");

        if(3 < strlen(params) > 40 || 3 < strlen(yazi) > 40) return HataMesajiC(playerid, "En az 3, en fazla 40 harf kullanýn.");

        new model = VehicleInfo[vehicleid][vModel];
        new Float:x, Float:y, Float:z, Float:un;

        GetVehicleModelInfo(model, VEHICLE_MODEL_INFO_WHEELSREAR, x, un, un);
        GetVehicleModelInfo(model, VEHICLE_MODEL_INFO_SIZE, un, y, un); y /= -2.0;
        GetVehicleModelInfo(model, VEHICLE_MODEL_INFO_REAR_BUMPER_Z, un, un, z);

        if(z <= -5.0 || z >= 5.0) z = 0.0;
        x += -0.2;
        y += 0.3;
        z += 0.0;

        x = 0.0;
        VehicleInfo[vehicleid][vSignText] = CreateDynamic3DTextLabel(yazi, COLOR_DARKGREEN, x, y, z, 20.0, INVALID_PLAYER_ID, vehicleid, 1);
        VehicleInfo[vehicleid][vCallSign] = true;
        OAC_GivePlayerMoney(playerid, -200);
        SunucuMesaji(playerid, "$200 karþýlýðýnda ilan verdin. Aracýný park edersen(re-spawn) veya komutu tekrarlarsan ilan silinir.");
        Streamer_Update(playerid);
        printf("%s adlý oyuncu %d nolu araca ilan verdi. (%s)", ReturnRoleplayName(playerid, true), VehicleInfo[vehicleid][vID], yazi);
    }

    return 1;
}

flags:aracetiket(CMD_LEGALFACT);
CMD:aracetiket(playerid, params[])return pc_cmd_cs(playerid,params);
CMD:cs(playerid, params[])
{
    new vehicleid = GetPlayerVehicleID(playerid);

    if(!IsPlayerInAnyVehicle(playerid))return
        HataMesajiC(playerid, "Herhangi bir araçta deðilsin.");

    if(VehicleInfo[vehicleid][vCallSign] == true)
    {
        DestroyDynamic3DTextLabelEx(VehicleInfo[vehicleid][vSignText]);
        VehicleInfo[vehicleid][vCallSign] = false;
    }
    else
    {
        new text[32];
        new pos;

        if(sscanf(params, "ds[32]", pos, text))return
            KullanimMesajiC(playerid, "/cs [pos(0 - 2)] [yazý]");

        if(pos < 0 || pos > 2)return
            SunucuMesaji(playerid, "Araç etiketi 0 ve 2 arasýnda deðer alabilir.");

        new model = VehicleInfo[vehicleid][vModel];
        new Float:x, Float:y, Float:z, Float:un;

        GetVehicleModelInfo(model, VEHICLE_MODEL_INFO_WHEELSREAR, x, un, un);
        GetVehicleModelInfo(model, VEHICLE_MODEL_INFO_SIZE, un, y, un); y /= -2.0;
        GetVehicleModelInfo(model, VEHICLE_MODEL_INFO_REAR_BUMPER_Z, un, un, z);

        if(z <= -5.0 || z >= 5.0) z = 0.0;
        x += -0.2;
        y += 0.3;
        z += 0.0;

        switch(pos)
        {
            case 1: x = -x;
            case 2: x = 0.0;
        }

        VehicleInfo[vehicleid][vSignText] = CreateDynamic3DTextLabel(text, COLOR_WHITE, x, y, z, 20.0, INVALID_PLAYER_ID, vehicleid, 1);
        VehicleInfo[vehicleid][vCallSign] = true;
        Streamer_Update(playerid);
    }

    return 1;
}
CMD:hizkamerasi(playerid, params[])
{
    new speed,
        vehicleid = GetPlayerVehicleID(playerid);

    if(!PlayerInfo[playerid][pDivision][4])return
        SunucuMesaji(playerid, "Trafik biriminde deðilsin.");

    if(!IsPlayerInAnyVehicle(playerid) || VehicleInfo[vehicleid][vFaction] == -1 || Faction_GetType(VehicleInfo[vehicleid][vFaction]) != POLICE)return
        SunucuMesaji(playerid, "Bu komutu LSPD aracýnda kullanabilirsin.");

    if(isnull(params) && VehicleInfo[vehicleid][vAutovelox] > 20)
    {
        VehicleInfo[vehicleid][vAutovelox] = 0;
        return HataMesajiC(playerid, "Hýz kamerasýný kapattýn.");
    }

    if(sscanf(params, "d", speed))return
        KullanimMesajiC(playerid, "/hizkamerasi [hýz deðeri (20 - 220)]");

    if(speed < 20 || speed > 256)return
        SunucuMesaji(playerid, "Geçerli bir hýz girin. (20 - 220)");

    VehicleInfo[vehicleid][vAutovelox] = speed;
    SunucuMesaji(playerid, "Hýz kamerasýný aktif ettin (%d KM/H).", speed);

    return 1;
}

CMD:plastikmermi(playerid) {
    if(PlayerInfo[playerid][pPlastikMermi]) {
        PlayerInfo[playerid][pPlastikMermi] = false;
        SunucuMesaji(playerid, "Plastik mermi modunu {ff0000}KAPATTINIZ.");
    } else {
        PlayerInfo[playerid][pPlastikMermi] = true;
        SunucuMesaji(playerid, "Plastik mermi modunu {00ff00}AÇTINIZ.");
    }
    return 1;
}

CMD:swat(playerid) {
    new yapabilir = 0, bid = GetPlayerBuilding(playerid, true), Float:pX, Float:pY, Float:pZ;
    for(new i; i < Iter_Count(Vehicles); i++) {
        GetVehiclePos(i, pX, pY, pZ);
        if(IsPlayerInRangeOfPoint(playerid, 5.0, pX, pY, pZ)) {
            if(Faction_GetType(VehicleInfo[i][vFaction]) == POLICE) {
                yapabilir = 1;
                break;
            }
        }
    }

    if((bid != -1 && BuildingInfo[bid][bFaction] == PlayerInfo[playerid][pFaction]) || yapabilir == 1 )
    {
        if(PlayerInfo[playerid][pSWAT]) {
            SetPlayerSkinEx(playerid, PlayerInfo[playerid][pSWATOncesi]);
            PlayerInfo[playerid][pKelepceSayisi] = 2;
            AC_SetPlayerHealth(playerid, 100.0);
            AC_SetPlayerArmour(playerid, 100.0);
            if(AC_PlayerHasWeapon(playerid, 17))
            {
                AC_RemovePlayerWeapon(playerid, 17);
            }
            SendFactionMessage(PlayerInfo[playerid][pFaction], "HQ: SWAT operatörü %s artýk çaðrýda deðil.", ReturnRoleplayName(playerid));
            PlayerInfo[playerid][pSWAT] = false;
        } else {
            PlayerInfo[playerid][pSWAT] = true;
            new skin = GetPlayerCustomSkin(playerid);
            PlayerInfo[playerid][pSWATOncesi] = skin;
            if(PlayerInfo[playerid][pSWATSkin] != 0)
                SetPlayerSkinEx(playerid, PlayerInfo[playerid][pSWATSkin]);
            else return HataMesajiC(playerid, "Bir SWAT skini seçmemiþsiniz, /swatsec ile seçebilirsiniz.");
            AC_SetPlayerHealth(playerid, 200.0);
            AC_SetPlayerArmour(playerid, 100.0);
            AC_GivePlayerWeapon(playerid, 17, 10);
            PlayerInfo[playerid][pKelepceSayisi] = 10;
            SendFactionMessage(PlayerInfo[playerid][pFaction], "HQ: SWAT operatörü %s çaðrýda!", ReturnRoleplayName(playerid));
        }
    } else return HataMesajiC(playerid, "Bu komutu bir oluþum aracýna yakýnken ya da bir oluþum binasýndayken kullanabilirsin.");
    return 1;
}

CMD:swatsec(playerid) {
    new skin = GetPlayerCustomSkin(playerid);
    PlayerInfo[playerid][pSWATSkin] = skin;
    SunucuMesaji(playerid, "Üstünüzdeki kýyafet SWAT skininiz olarak ayarlandý. Tekrar deðiþtirmek isterseniz /swatsec komutunu kullanýn.");
    return 1;
}

CMD:ayagakaldir(playerid, params[]) {
    new id;
    if(sscanf(params, "u", id)) return KullanimMesajiC(playerid, "/ayagakaldir <oyuncu adi/ID>");
    if(!IsPlayerConnected(id) || id == playerid || !PlayerInfo[id][pLogged] || !PlayerInfo[id][pPlastikMermiDustu]) return HataMesajiC(playerid, "Oyuncuyu ayaða kaldýramazsýnýz.");
    ClearAnimations(id);
    TogglePlayerControllable(id, true);
    PlayerInfo[id][pFreezed] = false;
    PlayerInfo[id][pPlastikMermiDustu] = false;
    PlayerAME(playerid, "birisini ayaða kaldýrýr.");
    SunucuMesaji(playerid, "%s(ID:%d) kiþisini ayaða kaldýrdýn.", ReturnRoleplayName(id), id);
    return 1;
}

CMD:cezalar(playerid, params[]) {
    new buildingid = GetPlayerBuilding(playerid, true), vehid = GetPlayerVehicleID(playerid);

    if(IsPlayerInAnyVehicle(playerid) && Faction_GetType(VehicleInfo[vehid][vFaction]) == POLICE || BuildingInfo[buildingid][bFaction] == 0) {
        SendClientMessage(playerid, COLOR_GREEN, "Aktif cezasý olan kiþiler:");
        new stringo[128];
        foreach(new i: Player) {
            if(PlayerInfo[i][pLogged] && PlayerInfo[i][pToplamCeza] >= 1000) {
                format(stringo, sizeof stringo, "%s - $%d ödenmemiþ ceza", ReturnRoleplayName(i), PlayerInfo[i][pToplamCeza]);
                SendClientMessage(playerid, COLOR_WHITE, stringo);
            }
        }
        return 1;
    }
    HataMesajiC(playerid, "Bu komutu kullanmak için bir polis binasýnýn veya aracýnýn içinde olmalýsýnýz.");
    return 1;
}

CMD:snakecam(playerid, params[])
{
    if(IsPlayerInAnyVehicle(playerid) > 0)return
        SunucuMesaji(playerid, "Bu komutu araç içerisinde kullanamazsýn.");

    if(GetPlayerCameraMode(playerid) == 7 || GetPlayerCameraMode(playerid) == 46) return 1;
    if(PlayerInfo[playerid][pSnakeCamActor] >= 0)return DestroyPoliceActor(playerid);

    new houseid = (GetPlayerHouse(playerid, false) == -1) ? GetPlayerHouse(playerid, true) : GetPlayerHouse(playerid, false);
    new buildingid  = (GetPlayerBuilding(playerid, false) == -1) ? GetPlayerBuilding(playerid, true) :  GetPlayerBuilding(playerid, false);
    new weapons[12];
    new ammo[12];

    if(houseid == -1 && buildingid == -1)return
        SunucuMesajiC(playerid, "Ýþletme veya ev giriþinde deðilsin.");

    if(houseid != -1 && HouseInfo[houseid][hExists] && IsPlayerInRangeOfPoint(playerid, 1.0, HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ]) && GetPlayerVirtualWorld(playerid) == HouseInfo[houseid][hPosWorld] && GetPlayerInterior(playerid) == HouseInfo[houseid][hPosInterior])
    {

        GetPlayerPos(playerid, PlayerInfo[playerid][pPosX], PlayerInfo[playerid][pPosY], PlayerInfo[playerid][pPosZ]);
        GetPlayerFacingAngle(playerid, PlayerInfo[playerid][pPosA]);
        PlayerInfo[playerid][pWorld] = GetPlayerVirtualWorld(playerid);
        PlayerInfo[playerid][pInterior] = GetPlayerInterior(playerid);
        PlayerInfo[playerid][pSnakeCamActorSkin] = PlayerInfo[playerid][pFactionSkin];
        if(PlayerInfo[playerid][pSWAT])
        {
            if(PlayerInfo[playerid][pSWATSkin] != 0)
            {
                PlayerInfo[playerid][pSnakeCamActorSkin] = PlayerInfo[playerid][pSWATSkin];
            }
        }
        PlayerInfo[playerid][pSnakeCamActor] = CreateDynamicActor(PlayerInfo[playerid][pSnakeCamActorSkin], PlayerInfo[playerid][pPosX], PlayerInfo[playerid][pPosY], PlayerInfo[playerid][pPosZ], PlayerInfo[playerid][pPosA]);
        ApplyDynamicActorAnimation(PlayerInfo[playerid][pSnakeCamActor], "BOMBER", "BOM_Plant_Loop", 4.1, 1, 1, 0, 0, 0);
        SetActorInvulnerable(PlayerInfo[playerid][pSnakeCamActor], 0);
        SetTimerEx("BombAnim", 1000, false, "d", PlayerInfo[playerid][pSnakeCamActor]);
        PlayerInfo[playerid][pSnakeCamMode] = 1;

        AC_SetPlayerVirtualWorld(playerid, HouseInfo[houseid][hWorld]);
        SetPlayerInterior(playerid, HouseInfo[houseid][hInterior]);
        SetPlayerPos(playerid, HouseInfo[houseid][hPosIntX], HouseInfo[houseid][hPosIntY], HouseInfo[houseid][hPosIntZ]-2);
        TogglePlayerSpectating(playerid, true);
        PlayerInfo[playerid][pSnakeCamObject] = CreatePlayerObject(playerid, 19300, HouseInfo[houseid][hPosIntX], HouseInfo[houseid][hPosIntY], HouseInfo[houseid][hPosIntZ], 0.0, 0.0, 0.0);
        AttachCameraToPlayerObject(playerid, PlayerInfo[playerid][pSnakeCamObject]);
        SendClientMessageEx(playerid, COLOR_GREEN, "Snakecam izliyorsun. Mouse kullanarak yönetebilirsin. Çýkmak için ise tekrar /snakecam yaz.");

        if(GetPlayerState(playerid) != PLAYER_STATE_SPECTATING)
        {
            for(new x; x < 12; x++)
            {
                GetPlayerWeaponData(playerid, x, weapons[x], ammo[x]);
                if(!AC_PlayerHasWeapon(playerid, weapons[x]) || !ammo[x])
                {
                    weapons[x] = 0;
                    ammo[x] = 0;
                }
                PlayerInfo[playerid][pWeapons][x] = weapons[x];
                PlayerInfo[playerid][pAmmo][x] = ammo[x];
            }

            AC_GetPlayerHealth(playerid, PlayerInfo[playerid][pHealth]);
            AC_GetPlayerArmour(playerid, PlayerInfo[playerid][pArmour]);
        }
    }

    if(buildingid != -1 && BuildingInfo[buildingid][bExists] && BuildingInfo[buildingid][bType] != FUEL_STATION && BuildingInfo[buildingid][bType] != PNS && IsPlayerInRangeOfPoint(playerid, 1.0, BuildingInfo[buildingid][bPosX], BuildingInfo[buildingid][bPosY], BuildingInfo[buildingid][bPosZ]) && GetPlayerVirtualWorld(playerid) == BuildingInfo[buildingid][bPosWorld] && GetPlayerInterior(playerid) == BuildingInfo[buildingid][bPosInterior])
    {

        GetPlayerPos(playerid, PlayerInfo[playerid][pPosX], PlayerInfo[playerid][pPosY], PlayerInfo[playerid][pPosZ]);
        GetPlayerFacingAngle(playerid, PlayerInfo[playerid][pPosA]);
        PlayerInfo[playerid][pWorld] = GetPlayerVirtualWorld(playerid);
        PlayerInfo[playerid][pInterior] = GetPlayerInterior(playerid);
        PlayerInfo[playerid][pSnakeCamActorSkin] = PlayerInfo[playerid][pFactionSkin];
        if(PlayerInfo[playerid][pSWAT])
        {
            if(PlayerInfo[playerid][pSWATSkin] != 0)
            {
                PlayerInfo[playerid][pSnakeCamActorSkin] = PlayerInfo[playerid][pSWATSkin];
            }
        }
        PlayerInfo[playerid][pSnakeCamActor] = CreateDynamicActor(PlayerInfo[playerid][pSnakeCamActorSkin], PlayerInfo[playerid][pPosX], PlayerInfo[playerid][pPosY], PlayerInfo[playerid][pPosZ], PlayerInfo[playerid][pPosA]);
        ApplyDynamicActorAnimation(PlayerInfo[playerid][pSnakeCamActor], "BOMBER", "BOM_Plant_Loop", 4.1, 1, 1, 0, 0, 0);
        SetActorInvulnerable(PlayerInfo[playerid][pSnakeCamActor], 0);
        SetTimerEx("BombAnim", 1000, false, "d", PlayerInfo[playerid][pSnakeCamActor]);
        PlayerInfo[playerid][pSnakeCamMode] = 1;

        AC_SetPlayerVirtualWorld(playerid, BuildingInfo[buildingid][bWorld]);
        SetPlayerInterior(playerid, BuildingInfo[buildingid][bInterior]);
        SetPlayerPos(playerid, BuildingInfo[buildingid][bPosIntX], BuildingInfo[buildingid][bPosIntY], BuildingInfo[buildingid][bPosIntZ]-2);
        TogglePlayerSpectating(playerid, true);
        PlayerInfo[playerid][pSnakeCamObject] = CreatePlayerObject(playerid, 19300, BuildingInfo[buildingid][bPosIntX], BuildingInfo[buildingid][bPosIntY], BuildingInfo[buildingid][bPosIntZ], 0.0, 0.0, 0.0);
        AttachCameraToPlayerObject(playerid, PlayerInfo[playerid][pSnakeCamObject]);
        SendClientMessageEx(playerid, COLOR_GREEN, "Snakecam izliyorsun. Mouse kullanarak yönetebilirsin. Çýkmak için ise tekrar /snakecam yaz.");
        if(GetPlayerState(playerid) != PLAYER_STATE_SPECTATING)
        {
            for(new x; x < 12; x++)
            {
                GetPlayerWeaponData(playerid, x, weapons[x], ammo[x]);
                if(!AC_PlayerHasWeapon(playerid, weapons[x]) || !ammo[x])
                {
                    weapons[x] = 0;
                    ammo[x] = 0;
                }
                PlayerInfo[playerid][pWeapons][x] = weapons[x];
                PlayerInfo[playerid][pAmmo][x] = ammo[x];
            }

            AC_GetPlayerHealth(playerid, PlayerInfo[playerid][pHealth]);
            AC_GetPlayerArmour(playerid, PlayerInfo[playerid][pArmour]);
        }
    }
    return 1;
}

CMD:kapiyikir(playerid, params[])
{
    new VW = GetPlayerVirtualWorld(playerid);

    if(VW >= HOUSE_WORLD)
    {
        // new query[90];

        mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT * FROM furnitures WHERE world = '%d'", VW);
        mysql_tquery(ourConnection, queryx, "OnFurnitureOptions", "dd", playerid, 0); return 1;
    }

    if(GetPlayerHouse(playerid, false) == -1 && GetPlayerBuilding(playerid, false) == -1 && GetPlayerTeleport(playerid) == -1)return
        SunucuMesajiC(playerid, "Bir kapýya yakýn deðilsin.");

    if(PlayerInfo[playerid][pRank] > 14) return
        SunucuMesajiC(playerid, "Bu komutu kullanmak için yetkiniz bulunmuyor.");

    new house_id = GetPlayerHouse(playerid, false);
    new building_id = GetPlayerBuilding(playerid, false);

    if(house_id != -1) HouseInfo[house_id][hLocked] = 0;
    if(building_id != -1) BuildingInfo[building_id][bLocked] = 0;

    new ix = GetPlayerTeleport(playerid);
    if(ix != -1) if(TeleportInfo[ix][tKilitli]) TeleportInfo[ix][tKilitli] = 0;

    SunucuMesajiC(playerid, "Kapý kýrýldý, Y tuþuna basarak veya /gir yazarak girebilirsin.");

    PlayerME(playerid, "kapýyý tekmeleyerek açar.");
    ApplyAnimation(playerid, "FIGHT_E", "FightKick_B", 4.1, 0, 1, 1, 0, 0, 1);
    return 1;
}

CMD:fkapikilit(playerid, params[])
{
    if(GetPlayerHouse(playerid, false) == -1 && GetPlayerBuilding(playerid, false) == -1)return
        SunucuMesajiC(playerid, "Bir kapýya yakýn deðilsin.");

    new houseID = GetPlayerHouse(playerid, false);
    new buildingID = GetPlayerBuilding(playerid, false);
    new fid = PlayerInfo[playerid][pFaction];

    if(buildingID != -1)
    {
        if(BuildingInfo[buildingID][bLocked])return
            SunucuMesajiC(playerid, "Bu bina kilitli.");

        BuildingInfo[buildingID][bLocked] = 1;
        SendFactionMessage(fid, "(( %s %s %s'i kitledi. ))", fRanks[fid][PlayerInfo[playerid][pRank] - 1], ReturnRoleplayName(playerid), BuildingInfo[buildingID][bName]);
    }
    else
    {
        if(HouseInfo[houseID][hLocked])return
            SunucuMesajiC(playerid, "Bu ev kilitli.");

        HouseInfo[houseID][hLocked] = 1;
        SendFactionMessage(fid, "(( %s %s %d ID'li evi kitledi. ))", fRanks[fid][PlayerInfo[playerid][pRank] - 1], ReturnRoleplayName(playerid), houseID);
    }

    return 1;
}

CMD:tutukla(playerid, params[])
{
    new buildingid = GetPlayerBuilding(playerid, true);
    new id, time;
    new target_name[MAX_PLAYER_NAME];

    if(buildingid == -1 || (buildingid != -1 && BuildingInfo[buildingid][bFaction] != 0) || PlayerInfo[playerid][pRank] > MAX_FACTION_RANKS)return
        HataMesajiC(playerid, "Bu komutu burada kullanamazsýn.");

    if(sscanf(params, "k<m>d", id, time))return
        KullanimMesajiC(playerid, "/tutukla [id/isim] [dakika]");

    if(!IsPlayerConnected(id) || id == playerid)return
        HataMesajiC(playerid, "Kendi kendini tutuklayamazsýn.");

    if(!ProxDetectorS(15.0, playerid, id))return
        HataMesajiC(playerid, "Bu oyuncuya yakýn deðilsin.");

    for(new j; j < MAX_INVENTORY_ITEMS; j++)
    {
        new listid = PlayerInfo[id][pInvList][j]; if(!listid || InventoryObjects[listid][invType] != ITEM_PHONE || !PlayerInfo[id][pInvExtra][j])continue;
        PlayerInfo[id][pInvExtra][j] = !PlayerInfo[id][pInvExtra][j];
    }

    if(time < 0)return
        HataMesajiC(playerid, "0 dakikadan daha az giremezsin.");

    PlayerTextDrawShow(id, PlayerInfo[id][pTextdraws][0]);

    SetCameraBehindPlayer(id);

    SetPlayerSpecialAction(id, SPECIAL_ACTION_NONE);
    RemovePlayerAttachedObject(id, 8);
    PlayerInfo[id][pCuffed] = 0;

    ClearAnimations(id);
    Faction_OffDuty(id);

    PlayerInfo[id][pJailTime] = time * 60;
    PlayerInfo[id][pJailC] = 1;
    SetPlayerToJailPos(id);

    if(PlayerInfo[id][pCuffed])
    {
        SetPlayerSpecialAction(id, SPECIAL_ACTION_NONE);
        RemovePlayerAttachedObject(id, 8);
    }

    BasariMesaji(id, "%s tarafýndan %d dakikalýðýna tutuklandýn.", ReturnRoleplayName(playerid), time);
    SendFactionMessage(PlayerInfo[playerid][pFaction], "** HQ: %s %s adlý polis %s kiþisini %d dakika hapse gönderdi.", fRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pRank] - 1], ReturnRoleplayName(playerid), ReturnRoleplayName(id), time);

    LogYaz(playerid, "/tutukla", id, time * 60);

    strmid(target_name, ReturnRoleplayName(id), 0, MAX_PLAYER_NAME);
    format(PlayerInfo[playerid][pTargetName], MAX_PLAYER_NAME, target_name);

    return 1;
}

CMD:mulkbul(playerid, params[])
{
    new option[20], id;

    if(PlayerInfo[playerid][pRank] > 5 && !PlayerInfo[playerid][pDivision][0]) return
        SunucuMesajiC(playerid, "Bu komutu kullanmak için yetkiniz bulunmuyor.");

    if(sscanf(params, "s[20]d", option, id))return
        KullanimMesajiC(playerid, "/mulkbul [ev-isletme] [id]");

    if(PlayerInfo[playerid][pRank] > 5) return
        SunucuMesajiC(playerid, "Bu komutu kullanmak için yetkiniz bulunmuyor.");

    new Float:X, Float:Y, Float:Z;

    if(!strcmp(option, "ev", true))
    {
        if(id < 0 || id >= MAX_HOUSES || !HouseInfo[id][hExists])return
            SunucuMesajiC(playerid, "Ev bulunamadý.");

        if(HouseInfo[id][hPosWorld] >= BUILDING_WORLD) foreach(new b : Buildings)
        {
            if(!BuildingInfo[b][bExists] || BuildingInfo[b][bWorld] != HouseInfo[id][hPosWorld])continue;
            return HataMesaji(playerid, "%d\"/mulkbul ev %d\".", id, b);
        }

        X = HouseInfo[id][hPosX];
        Y = HouseInfo[id][hPosY];
        Z = HouseInfo[id][hPosZ];
    }
    else if(!strcmp(option, "isletme", true))
    {
        if(id < 0 || id >= MAX_BUILDINGS || !BuildingInfo[id][bExists])return
            SunucuMesajiC(playerid, "Ýþletme bulunamadý.");

        if(BuildingInfo[id][bPosWorld] >= BUILDING_WORLD) foreach(new b : Buildings)
        {
            if(!BuildingInfo[b][bExists] || BuildingInfo[b][bWorld] != BuildingInfo[id][bPosWorld])continue;
            return HataMesaji(playerid, "%d\"/mulkbul isletme %d\".", id, b);
        }

        X = BuildingInfo[id][bPosX];
        Y = BuildingInfo[id][bPosY];
        Z = BuildingInfo[id][bPosZ];
    }
    else return
        HataMesajiC(playerid, "Geçersiz parametre.");

    AC_SetPlayerCheckpoint(playerid, X, Y, Z, 2.0);
    SunucuMesaji(playerid, "Seçtiðiniz mülk haritanýzda iþaretlendi.");

    return 1;
}

flags:civi(CMD_LSPD);
CMD:civi(playerid, params[])
{
    if(SunucuBilgi[AntiDinamikObje])
        return HataMesaji(playerid, "Bu sistem geçici olarak geliþtirici ekip tarafýndan pasife çekildi.");

    if(GetPlayerInterior(playerid) > 0 && GetPlayerVirtualWorld(playerid) > 0)
        return HataMesajiC(playerid, "Bu komutu sadece dýþ dünyada kullanabilirsiniz.");
        
    if(isnull(params) || strlen(params) > 8) return KullanimMesajiC(playerid, "/civi [kisa, orta, uzun, sil]");

    if(!strcmp(params, "sil", true))
    {
        new id = -1;

        foreach(new i : RoadBlocks) if(RoadBlockInfo[i][rbExists])
        {
            if(IsPlayerInRangeOfPoint(playerid, 5.0, RoadBlockInfo[i][rbPosX], RoadBlockInfo[i][rbPosY], RoadBlockInfo[i][rbPosZ]))
                id = i;
        }

        if(id == -1) return HataMesajiC(playerid, "Yakýnýnýzda çivi yok.");

        if(RoadBlockInfo[id][rbExists])
        {
            new location[MAX_ZONE_NAME];
            RoadBlockInfo[id][rbExists] = 0;
            RoadBlockInfo[id][rbType] = 0;
            GetCoords2DZone(RoadBlockInfo[id][rbPosX], RoadBlockInfo[id][rbPosY], location, MAX_ZONE_NAME);
            format(RoadBlockInfo[id][rOwner], MAX_PLAYER_NAME, ReturnRoleplayName(playerid));
            RoadBlockInfo[id][rbFaction] = PlayerInfo[playerid][pFaction];
            DestroyDynamicObjectEx(RoadBlockInfo[id][rbObject]);

            if(PlayerInfo[playerid][pFaction] != 1) SendFactionMessage(PlayerInfo[playerid][pFaction], "** HQ: %s, %s lokasyonundaki barikatý kaldýrdý.", ReturnRoleplayName(playerid), location);
            else SendFactionMessageTR(PlayerInfo[playerid][pFaction], "** HQ: %s, %s lokasyonundaki barikatý kaldýrdý.", ReturnRoleplayName(playerid), location);
            Iter_Remove(RoadBlocks, id);
        }
        return 1;
    }
    else if(!strcmp(params, "kisa", true))
    {
        new i = Iter_Free(RoadBlocks);
        if(i > MAX_ROADBLOCKS) return HataMesajiC(playerid, "Sunucu barikat limitine ulaþtý.");
        RoadBlockInfo[i][rbModelID] = 1593;
        new location[MAX_ZONE_NAME],
            Float:pX,
            Float:pY,
            Float:pZ,
            Float:pAngle;

        GetPlayerPos(playerid, pX, pY, pZ);
        GetPlayerFacingAngle(playerid, pAngle);

        new modelid = RoadBlockInfo[i][rbModelID];
        RoadBlockInfo[i][rbExists] = 1;
        RoadBlockInfo[i][rbType] = (modelid != 2899 && modelid != 2892 && modelid != 1593) ? 1 : 2;
        if(RoadBlockInfo[i][rbType] == 2)
        {
            RoadBlockInfo[i][rbPosX] = pX+1;
            RoadBlockInfo[i][rbPosY] = pY+1;
            if(RoadBlockInfo[i][rbModelID] == 2892) RoadBlockInfo[i][rbPosZ] = pZ-1;
            else RoadBlockInfo[i][rbPosZ] = pZ-0.9;
        }
        else
        {
            RoadBlockInfo[i][rbPosX] = pX+1;
            RoadBlockInfo[i][rbPosY] = pY+1;
            RoadBlockInfo[i][rbPosZ] = pZ-0.5;
        }

        RoadBlockInfo[i][rbObject] = CreateDynamicObject(modelid, RoadBlockInfo[i][rbPosX], RoadBlockInfo[i][rbPosY], RoadBlockInfo[i][rbPosZ], 0.0, 0.0, pAngle + 90.0, 0, 0);
        format(RoadBlockInfo[i][rOwner], MAX_PLAYER_NAME, ReturnRoleplayName(playerid));

        PlayerInfo[playerid][pEditingMode] = 10;
        PlayerInfo[playerid][pSelectedItem] = i;
        EditDynamicObject(playerid, RoadBlockInfo[i][rbObject]);

        GetCoords2DZone(pX, pY, location, MAX_ZONE_NAME);
        PlayerME(playerid, "yere çivi yerleþtirir.");
        Streamer_Update(playerid);
        if(PlayerInfo[playerid][pFaction] != 1) SendFactionMessage(PlayerInfo[playerid][pFaction], "** HQ: %s, %s alanýna bir kontrol noktasý yerleþtirdi.", ReturnRoleplayName(playerid), location);
        else SendFactionMessageTR(PlayerInfo[playerid][pFaction], "** HQ: %s, %s alanýna bir kontrol noktasý yerleþtirdi.", ReturnRoleplayName(playerid), location);
        SetPVarInt(playerid, "RoadblockDuzenle", RoadBlockInfo[i][rbObject]);
        Iter_Add(RoadBlocks, i);
    }
    else if(!strcmp(params, "orta", true))
    {
        new i = Iter_Free(RoadBlocks);
        if(i > MAX_ROADBLOCKS) return HataMesajiC(playerid, "Sunucu barikat limitine ulaþtý.");
        RoadBlockInfo[i][rbModelID] = 2899;
        new location[MAX_ZONE_NAME],
            Float:pX,
            Float:pY,
            Float:pZ,
            Float:pAngle;

        GetPlayerPos(playerid, pX, pY, pZ);
        GetPlayerFacingAngle(playerid, pAngle);

        new modelid = RoadBlockInfo[i][rbModelID];
        RoadBlockInfo[i][rbExists] = 1;
        RoadBlockInfo[i][rbType] = (modelid != 2899 && modelid != 2892 && modelid != 1593) ? 1 : 2;
        if(RoadBlockInfo[i][rbType] == 2)
        {
            RoadBlockInfo[i][rbPosX] = pX+1;
            RoadBlockInfo[i][rbPosY] = pY+1;
            if(RoadBlockInfo[i][rbModelID] == 2892) RoadBlockInfo[i][rbPosZ] = pZ-1;
            else RoadBlockInfo[i][rbPosZ] = pZ-0.9;
        }
        else
        {
            RoadBlockInfo[i][rbPosX] = pX+1;
            RoadBlockInfo[i][rbPosY] = pY+1;
            RoadBlockInfo[i][rbPosZ] = pZ-0.5;
        }

        RoadBlockInfo[i][rbObject] = CreateDynamicObject(modelid, RoadBlockInfo[i][rbPosX], RoadBlockInfo[i][rbPosY], RoadBlockInfo[i][rbPosZ], 0.0, 0.0, pAngle + 90.0, 0, 0);
        format(RoadBlockInfo[i][rOwner], MAX_PLAYER_NAME, ReturnRoleplayName(playerid));

        PlayerInfo[playerid][pEditingMode] = 10;
        PlayerInfo[playerid][pSelectedItem] = i;
        EditDynamicObject(playerid, RoadBlockInfo[i][rbObject]);

        GetCoords2DZone(pX, pY, location, MAX_ZONE_NAME);
        PlayerME(playerid, "yere çivi yerleþtirir.");
        Streamer_Update(playerid);
        if(PlayerInfo[playerid][pFaction] != 1) SendFactionMessage(PlayerInfo[playerid][pFaction], "** HQ: %s, %s alanýna bir kontrol noktasý yerleþtirdi.", ReturnRoleplayName(playerid), location);
        else SendFactionMessageTR(PlayerInfo[playerid][pFaction], "** HQ: %s, %s alanýna bir kontrol noktasý yerleþtirdi.", ReturnRoleplayName(playerid), location);
        SetPVarInt(playerid, "RoadblockDuzenle", RoadBlockInfo[i][rbObject]);
        Iter_Add(RoadBlocks, i);
    }
    else if(!strcmp(params, "uzun", true))
    {
        new i = Iter_Free(RoadBlocks);
        if(i > MAX_ROADBLOCKS) return HataMesajiC(playerid, "Sunucu barikat limitine ulaþtý.");
        RoadBlockInfo[i][rbModelID] = 2892;
        new location[MAX_ZONE_NAME],
            Float:pX,
            Float:pY,
            Float:pZ,
            Float:pAngle;

        GetPlayerPos(playerid, pX, pY, pZ);
        GetPlayerFacingAngle(playerid, pAngle);

        new modelid = RoadBlockInfo[i][rbModelID];
        RoadBlockInfo[i][rbExists] = 1;
        RoadBlockInfo[i][rbType] = (modelid != 2899 && modelid != 2892 && modelid != 1593) ? 1 : 2;
        if(RoadBlockInfo[i][rbType] == 2)
        {
            RoadBlockInfo[i][rbPosX] = pX+1;
            RoadBlockInfo[i][rbPosY] = pY+1;
            if(RoadBlockInfo[i][rbModelID] == 2892) RoadBlockInfo[i][rbPosZ] = pZ-1;
            else RoadBlockInfo[i][rbPosZ] = pZ-0.9;
        }
        else
        {
            RoadBlockInfo[i][rbPosX] = pX+1;
            RoadBlockInfo[i][rbPosY] = pY+1;
            RoadBlockInfo[i][rbPosZ] = pZ-0.5;
        }

        RoadBlockInfo[i][rbObject] = CreateDynamicObject(modelid, RoadBlockInfo[i][rbPosX], RoadBlockInfo[i][rbPosY], RoadBlockInfo[i][rbPosZ], 0.0, 0.0, pAngle + 90.0, 0, 0);
        format(RoadBlockInfo[i][rOwner], MAX_PLAYER_NAME, ReturnRoleplayName(playerid));

        PlayerInfo[playerid][pEditingMode] = 10;
        PlayerInfo[playerid][pSelectedItem] = i;
        EditDynamicObject(playerid, RoadBlockInfo[i][rbObject]);

        GetCoords2DZone(pX, pY, location, MAX_ZONE_NAME);
        PlayerME(playerid, "yere çivi yerleþtirir.");
        Streamer_Update(playerid);
        if(PlayerInfo[playerid][pFaction] != 1) SendFactionMessage(PlayerInfo[playerid][pFaction], "** HQ: %s, %s alanýna bir kontrol noktasý yerleþtirdi.", ReturnRoleplayName(playerid), location);
        else SendFactionMessageTR(PlayerInfo[playerid][pFaction], "** HQ: %s, %s alanýna bir kontrol noktasý yerleþtirdi.", ReturnRoleplayName(playerid), location);
        SetPVarInt(playerid, "RoadblockDuzenle", RoadBlockInfo[i][rbObject]);
        Iter_Add(RoadBlocks, i);
    }
    else return KullanimMesajiC(playerid, "Geçersiz parametre giriþi. || /civi [kisa, orta, uzun, sil]");
    return 1;
}

CMD:ekonomi(playerid, params[]) return Taxex_ShowMenu(playerid);


CMD:faracliste(playerid, params[]) {
    if((PlayerInfo[playerid][pFaction] < 0 || PlayerInfo[playerid][pFaction] >= MAX_FACTIONS) && PlayerInfo[playerid][pAdmin] < 2) return HataMesajiC(playerid, "Bu komutu kullanmak için bir oluþumda olmalýsýn.");
    if(PlayerInfo[playerid][pRank] > 3 && PlayerInfo[playerid][pAdmin] < 2) return HataMesajiC(playerid, "Bu komutu kullanmak için oluþumda yetkili olmalýsýn.");
    new fid;
    sscanf(params, "D(900)", fid);
    if(fid == 900) {
        fid = PlayerInfo[playerid][pFaction];
        if(fid < 0 || fid >= MAX_FACTIONS) return KullanimMesajiC(playerid, "/faracliste <faction id>");
        new stringq[128], count = 0;
        format(stringq, 128, "%s(%d) oluþumuna ait araçlar:", FactionInfo[fid][fName], fid);
        SendClientMessage(playerid, COLOR_GREEN, stringq);
        foreach(new i: Vehicles) {
            if(VehicleInfo[i][vFaction] != fid)continue;
            format(stringq, 128, "%s - ID: %d - SQLID: %d", GetVehicleModelName(VehicleInfo[i][vModel]), i, VehicleInfo[i][vID]);
            SendClientMessage(playerid, COLOR_WHITE, stringq);
            count++;
        }
        if(!count)
            SendClientMessage(playerid, COLOR_WHITE, "Bu oluþumun aracý yok.");
    } else {
        if(PlayerInfo[playerid][pAdmin] < 2) return HataMesajiC(playerid, "Baþka oluþumlarýn araç listesine bakmak için yönetici olmalýsýnýz.");
        if(fid < 0 || fid >= MAX_FACTIONS) return KullanimMesajiC(playerid, "/faracliste <faction id>");
        new stringq[128], count = 0;
        format(stringq, 128, "%s(%d) oluþumuna ait araçlar:", FactionInfo[fid][fName], fid);
        SendClientMessage(playerid, COLOR_GREEN, stringq);
        foreach(new i: Vehicles) {
            if(VehicleInfo[i][vFaction] != fid)continue;
            format(stringq, 128, "%s - ID: %d - SQLID: %d", GetVehicleModelName(VehicleInfo[i][vModel]), i, VehicleInfo[i][vID]);
            SendClientMessage(playerid, COLOR_WHITE, stringq);
            count++;
        }
        if(!count)
            SendClientMessage(playerid, COLOR_WHITE, "Bu oluþumun aracý yok.");
    }
    return 1;
}

CMD:masaal(playerid) {
    if(!PlayerInfo[playerid][pTezgahMasa]) {
        if(IsPlayerInRangeOfPoint(playerid, 3.0, 387.2847, -1897.2672, 7.8359)) {
            Dialog_Show(playerid, DialogMasaAl, DIALOG_STYLE_MSGBOX, "Tezgah Sistemi", "$250 karþýlýðýnda masa almak istediðine emin misin?", "Evet", "Hayýr");
        } else return HataMesajiC(playerid, "Santa Maria'daki tezgah satýþ noktasýnda deðilsin.");
    } else return HataMesajiC(playerid, "Zaten bir masanýz bulunuyor.");
    return 1;
}

CMD:cadir(playerid, params[]) {
    new secenek[14];
    if(sscanf(params, "s[14]", secenek)) return KullanimMesajiC(playerid, "/cadir <satinal/kur/kaldir>");
    if(!strcmp(secenek, "satinal", true)) {
        if(PlayerInfo[playerid][pKampEkipmani]) return HataMesaji(playerid, "Zaten kamp ekipmanýnýz bulunuyor.");
        if(!IsPlayerInRangeOfPoint(playerid, 3.0, 821.4810,-1758.2771,13.6484)) return HataMesaji(playerid, "Kamp ekipman satýþ noktasýnda deðilsin.");
        Dialog_Show(playerid, DialogCadirAlOnay, DIALOG_STYLE_MSGBOX, "Çadýr Sistemi", "$2500 karþýlýðýnda çadýr almak üzeresiniz.\nÇadýr kalýcýdýr ve hesabýnýzdan asla silinmez. Çýkýþ yaptýðýnýzda çadýrýnýz kaldýrýlýr, fakat envanterinize geri döner.\nLos Santos içerisinde çadýr kurmanýz sistemsel olarak engellenmiþtir, çadýrýnýzý Los Santos dýþýnda kurabilirsiniz.", "Satýn Al", "Ýptal");
    }
    else if(!strcmp(secenek, "kur", true)) {
        if(SunucuBilgi[AntiDinamikObje])
            return HataMesaji(playerid, "Bu sistem geçici olarak geliþtirici ekip tarafýndan pasife çekildi.");
        if(!PlayerInfo[playerid][pKampEkipmani]) return HataMesaji(playerid, "Kamp ekipmanýnýz yok.");
        if(LSDEBU(playerid) || GetPlayerInterior(playerid) != 0 || GetPlayerVirtualWorld(playerid) != 0) return HataMesaji(playerid, "Los Santos sýnýrlarý içerisinde ve interiorlar içerisinde kamp kuramazsýn.");
        if(PlayerInfo[playerid][pKurduguKamp] != -1) return HataMesaji(playerid, "Zaten bir kamp kurmuþsunuz.");
        if(GetPVarInt(playerid, "KampDuzenliyor") == 1) return HataMesaji(playerid, "Çadýrýnýzý düzenlemeyi bitirmeniz gerekiyor.");
        SetPVarInt(playerid, "KampDuzenliyor", 1);
        new Float:pX, Float:pY, Float:pZ, Float:pA;
        GetPlayerPos(playerid, pX, pY, pZ);
        GetPlayerFacingAngle(playerid, pA);
        GetXYInFrontOfPlayer(playerid, pX, pY, 2.0);
        if(PlayerInfo[playerid][pEditingMode]) return HataMesajiC(playerid, "Bir objeyi düzenlerken bunu yapamazsýn.");
        new tmpObj;
        tmpObj = CreateDynamicObject(-2004, pX, pY, pZ, 0.0, 0.0, pA);
        EditDynamicObject(playerid, tmpObj);
        SunucuMesaji(playerid, "Disk ikonuna basarsanýz çadýr eklenecek, iptal ederseniz silinecektir.");
    }
    else if(!strcmp(secenek, "kaldir", true)) {
        if(PlayerInfo[playerid][pKurduguKamp] == -1) return HataMesaji(playerid, "Zaten bir kamp kurmamýþsýnýz.");
        if(GetPVarInt(playerid, "KampDuzenliyor") == 1) return HataMesaji(playerid, "Çadýrýnýzý düzenlemeyi bitirmeniz gerekiyor.");
        new kampObje = PlayerInfo[playerid][pKurduguKamp];
        new Float:oX, Float:oY, Float:oZ;
        GetDynamicObjectPos(kampObje, oX, oY, oZ);
        if(!IsPlayerInRangeOfPoint(playerid, 3.0, oX, oY, oZ)) return HataMesaji(playerid, "Çadýrýnýza yakýn deðilsiniz.");
        PlayerAME(playerid, "çadýrýný kaldýrýr.");
        DestroyDynamicObjectEx(kampObje);
        SunucuMesaji(playerid, "Çadýrýnýzý kaldýrdýnýz.");
        PlayerInfo[playerid][pKurduguKamp] = -1;
    } else return HataMesaji(playerid, "Bilinmeyen bir parametre girdiniz.");
    return 1;
}

CMD:baliksandigi(playerid, params[]) {
    new secenek[14], slot;
    if(sscanf(params, "s[14]D(-1)", secenek, slot)) return KullanimMesajiC(playerid, "/baliksandigi <satinal/aracakoy/aractanal/balikkoy/tumbalikkoy/sat/sil>");
    if(!strcmp(secenek, "satinal", true)) {
        SandikOlustur(playerid);
    }
    else if(!strcmp(secenek, "aracakoy")) {
        new aracID = GetNearestVehicle(playerid);
        if(aracID == -1) return HataMesajiC(playerid, "Bir aracýn yakýnýnda deðilsin.");
        if(SandikKapasiteHesapla(aracID) == 0) return HataMesajiC(playerid, "Yakýnýndaki araç sandýk sistemini kullanamýyor.");
        if(PlayerInfo[playerid][pTasidigiSandik] == -1) return HataMesajiC(playerid, "Bir sandýk taþýmýyorsun.");
        SandigiAracaBagla(playerid, aracID, PlayerInfo[playerid][pTasidigiSandik]);
    }
    else if(!strcmp(secenek, "aractanal")) {
        new aracID = GetNearestVehicle(playerid);
        if(aracID == -1) return HataMesajiC(playerid, "Bir aracýn yakýnýnda deðilsin.");
        if(SandikKapasiteHesapla(aracID) == 0) return HataMesajiC(playerid, "Yakýnýndaki araç sandýk sistemini kullanamýyor.");
        SandikAractanAl(playerid);
    }
    else if(!strcmp(secenek, "balikkoy")) {
        if(slot == -1) return KullanimMesaji(playerid, "/baliksandigi balikkoy <slot>");
        SandikBalikEkle(playerid, slot, PlayerInfo[playerid][pBalikAgirlik][slot], 0);
    }
    else if(!strcmp(secenek, "tumbalikkoy")) {
        if(KacBalikVar(playerid) == 0) return HataMesajiC(playerid, "Hiç balýðýnýz yok.");
        SandikTumBaliklariEkle(playerid);
    }
    else if(!strcmp(secenek, "sat")) {
        SandikSat(playerid);
    }
    else if(!strcmp(secenek, "sil")) {
        if(PlayerInfo[playerid][pTasidigiSandik] == -1) return HataMesajiC(playerid, "Bir sandýk taþýmýyorsun.");
        SandikSil(PlayerInfo[playerid][pTasidigiSandik]);
    } else return HataMesajiC(playerid, "Bilinmeyen bir opsiyon girdin.");
    return 1;
}

CMD:tezgah(playerid, params[])
{
    if(PlayerInfo[playerid][pJailTime] > 1) return HataMesajiC(playerid, "Bu komutu hapiste kullanmazsýn.");
    new secenek[14];
    if(sscanf(params, "s[14]", secenek)) return KullanimMesajiC(playerid, "/tezgah <secenek/satinal/kur/sil/yemeksat/iceceksat/satisiptal/ayril/arabakur>");
    if(GetPVarInt(playerid, "TezgahDuzenliyor") == 1 || GetPVarInt(playerid, "TezgahMasaDuzenliyor") == 1) return HataMesajiC(playerid, "Bir tezgah düzenlerken bu komutu kullanamazsýn.");
    if(!strcmp(secenek, "satinal", true)) {
        if(!PlayerInfo[playerid][pTezgah]) {
            if(PlayerInfo[playerid][pActigiTezgah] == -1) {
                if(PlayerInfo[playerid][pCalistigiTezgah] == -1) {
                    if(IsPlayerInRangeOfPoint(playerid, 3.0, 387.2847, -1897.2672, 7.8359)) {
                        new objeListesi[] = {3039, 1341, 1342, 1340};
                        SunucuMesaji(playerid, "Satýn almak istediðiniz tezgah tipini seçin, bu sistem BETA sürümündedir.");
                        SunucuMesaji(playerid, "Masasýz tezgah fiyatý $4750, masalý tezgah fiyatý ise $5000'dir.");
                        ShowModelSelectionMenuEx(playerid, objeListesi, sizeof(objeListesi), "Tezgahlar", TTEZGAH, 16.0, 0.0, -55.0);
                    } else return HataMesajiC(playerid, "Santa Maria'daki tezgah satýþ noktasýnda deðilsin.");
                } else return HataMesajiC(playerid, "Zaten bir tezgahta çalýþýyorsun. Önce bu tezgahtan ayrýlýn. (/tezgah ayril)");
            } else return HataMesajiC(playerid, "Zaten kurulu bir tezgahýnýz var. Önce bu tezgahý silin. (/tezgah sil)");
        } else return HataMesajiC(playerid, "Zaten bir tezgahýnýz bulunuyor.");
    }
    else if(!strcmp(secenek, "kur", true)) {
        if(SunucuBilgi[AntiDinamikObje])
            return HataMesaji(playerid, "Bu sistem geçici olarak geliþtirici ekip tarafýndan pasife çekildi.");
        if(PlayerInfo[playerid][pTezgah] != 0) {
            if(PlayerInfo[playerid][pActigiTezgah] == -1) {
                if(PlayerInfo[playerid][pCalistigiTezgah] == -1) {
                    new id = Iter_Free(Tezgahlar);
                    if(id != -1) {
                        Iter_Add(Tezgahlar, id);
                        StandInfo[id][saracID] = -1;
                        new Float:pX, Float:pY, Float:pZ, Float:pA;
                        GetPlayerPos(playerid, pX, pY, pZ);
                        GetPlayerFacingAngle(playerid, pA);
                        GetXYInFrontOfPlayer(playerid, pX, pY, 2.0);
                        if(PlayerInfo[playerid][pEditingMode]) return HataMesajiC(playerid, "Bir objeyi düzenlerken bunu yapamazsýn.");
                        StandInfo[id][sObje] = CreateDynamicObject(PlayerInfo[playerid][pTezgah], pX, pY, pZ, 0.0, 0.0, pA, 0, 0);
                        EditDynamicObject(playerid, StandInfo[id][sObje]);
                        SetPVarInt(playerid, "TezgahDuzenliyor", 1);
                        SetPVarInt(playerid, "DuzenledigiTezgah", id);
                    } else return HataMesajiC(playerid, "Sunucuda maksimum tezgah sayýsýna ulaþýlmýþ.");
                } else return HataMesajiC(playerid, "Zaten bir tezgahta çalýþýyorsun. Önce bu tezgahtan ayrýlýn. (/tezgah ayril)");
            } else return HataMesajiC(playerid, "Zaten kurulu bir tezgahýnýz var. Önce bu tezgahý silin. (/tezgah sil)");
        } else return HataMesajiC(playerid, "Kuracak bir tezgahýnýz yok.");
    }
    else if(!strcmp(secenek, "sil", true)) {
        if(PlayerInfo[playerid][pActigiTezgah] != -1) return Dialog_Show(playerid, DialogTezgahSilOnay, DIALOG_STYLE_MSGBOX, "Tezgah Sistemi", "Tezgahýnýzý bozmak üzeresiniz.\nYaptýðýnýz tüm ayarlar ve tezgah yok olacak, bu sistem BETA sürümündedir.\nTezgahý bozmasanýz bile tezgahýnýz restart ile ya da yönetici inisiyatifi ile silinebilir.\nDevam etmek istiyor musunuz?", "Evet", "Hayýr");
        else return HataMesajiC(playerid, "Açtýðýnýz bir tezgah yok.");
    }
    else if(!strcmp(secenek, "secenek", true)) {
        if(PlayerInfo[playerid][pActigiTezgah] != -1) {
            new tezgah = PlayerInfo[playerid][pActigiTezgah];
            if(IsPlayerInRangeOfPoint(playerid, 5.0, StandInfo[tezgah][sPosX], StandInfo[tezgah][sPosY], StandInfo[tezgah][sPosZ]) && !StandInfo[tezgah][sArabali])return
                Dialog_Show(playerid, DialogTezgahSecenek, DIALOG_STYLE_LIST, "Tezgah Sistemi", "Çalýþan Ýþlemleri\nYiyecek Ýþlemleri\nLabel deðiþtir\nKasadaki Parayý Çek\nÝçecek Ýþlemleri\nÇalýþanlara satýþlardan pay ver", "Seç", "Ýptal");
            else if(StandInfo[tezgah][sArabali]) {
                new arac = StandInfo[tezgah][saracID];
                new Float:vX, Float:vY, Float:vZ;
                GetVehiclePos(arac, vX, vY, vZ);
                if(IsPlayerInRangeOfPoint(playerid, 5.0, vX, vY, vZ)) return Dialog_Show(playerid, DialogTezgahSecenek, DIALOG_STYLE_LIST, "Tezgah Sistemi", "Çalýþan Ýþlemleri\nYiyecek Ýþlemleri\nLabel deðiþtir\nKasadaki Parayý Çek\nÝçecek Ýþlemleri\nÇalýþanlara satýþlardan pay ver", "Seç", "Ýptal");
            }
            else return HataMesajiC(playerid, "Bu seçeneði kullanmak için tezgahýna yakýn olmalýsýn.");
        } else return HataMesajiC(playerid, "Önce bir tezgah açmalýsýn.");
    }
    else if(!strcmp(secenek, "iceceksat", true)) {
        if(GetPVarInt(playerid, "TezgahSatis") == 1) return HataMesajiC(playerid, "Birisine zaten satýþ teklifi göndermiþsiniz.");
        if(PlayerInfo[playerid][pActigiTezgah] != -1) {
            new tezgah = PlayerInfo[playerid][pActigiTezgah];
            SetPVarInt(playerid, "SatisTezgah", tezgah);
            if(!StandInfo[tezgah][sArabali]) {
                if(IsPlayerInRangeOfPoint(playerid, 10.0, StandInfo[tezgah][sPosX], StandInfo[tezgah][sPosY], StandInfo[tezgah][sPosZ])) {
                    new dialogString[520];
                    for(new i; i < 3; i++) {
                        if(StandInfo[PlayerInfo[playerid][pActigiTezgah]][sIcecekFiyati][i] != 0)
                            format(dialogString, sizeof dialogString, "%s{4b75c3}%s\t{45b94a}$%d\n", dialogString, StandIcecekInfo[PlayerInfo[playerid][pActigiTezgah]][i], StandInfo[PlayerInfo[playerid][pActigiTezgah]][sIcecekFiyati][i]);
                        else
                            format(dialogString, sizeof dialogString, "%s{4b75c3}Yok\t{ea3636}$0\n", dialogString);
                    }
                    Dialog_Show(playerid, DialogTezgahIcecekSat, DIALOG_STYLE_TABLIST_HEADERS, "Tezgah Ürünleri", "{FFFFFF}Ürün Adý\t{FFFFFF}Ürün Fiyatý\n%s", "Seç", "<< Geri", dialogString);
                } else return HataMesajiC(playerid, "Çalýþtýðýn tezgaha yakýn deðilsin.");
            } else {
                new vid = StandInfo[tezgah][saracID], Float:vX, Float:vY, Float:vZ;
                GetVehiclePos(vid, vX, vY, vZ);
                if(IsPlayerInRangeOfPoint(playerid, 10.0, vX, vY, vZ)) {
                    new dialogString[520];
                    for(new i; i < 3; i++) {
                        if(StandInfo[PlayerInfo[playerid][pActigiTezgah]][sIcecekFiyati][i] != 0)
                            format(dialogString, sizeof dialogString, "%s{4b75c3}%s\t{45b94a}$%d\n", dialogString, StandIcecekInfo[PlayerInfo[playerid][pActigiTezgah]][i], StandInfo[PlayerInfo[playerid][pActigiTezgah]][sIcecekFiyati][i]);
                        else
                            format(dialogString, sizeof dialogString, "%s{4b75c3}Yok\t{ea3636}$0\n", dialogString);
                    }
                    Dialog_Show(playerid, DialogTezgahIcecekSat, DIALOG_STYLE_TABLIST_HEADERS, "Tezgah Ürünleri", "{FFFFFF}Ürün Adý\t{FFFFFF}Ürün Fiyatý\n%s", "Seç", "<< Geri", dialogString);
                } else return HataMesajiC(playerid, "Çalýþtýðýn tezgaha yakýn deðilsin.");
            }
        } else if(PlayerInfo[playerid][pCalistigiTezgah] != -1) {
            new tezgah = PlayerInfo[playerid][pCalistigiTezgah];
            if(!StandInfo[tezgah][sArabali]) {
                if(IsPlayerInRangeOfPoint(playerid, 10.0, StandInfo[tezgah][sPosX], StandInfo[tezgah][sPosY], StandInfo[tezgah][sPosZ])) {
                    new dialogString[520];
                    for(new i; i < 3; i++) {
                        if(StandInfo[PlayerInfo[playerid][pCalistigiTezgah]][sIcecekFiyati][i] != 0)
                            format(dialogString, sizeof dialogString, "%s{4b75c3}%s\t{45b94a}$%d\n", dialogString, StandIcecekInfo[PlayerInfo[playerid][pCalistigiTezgah]][i], StandInfo[PlayerInfo[playerid][pCalistigiTezgah]][sIcecekFiyati][i]);
                        else
                            format(dialogString, sizeof dialogString, "%s{4b75c3}Yok\t{ea3636}$0\n", dialogString);
                    }
                    SetPVarInt(playerid, "SatisTezgah", tezgah);
                    Dialog_Show(playerid, DialogTezgahIcecekSat, DIALOG_STYLE_TABLIST_HEADERS, "Tezgah Ürünleri", "{FFFFFF}Ürün Adý\t{FFFFFF}Ürün Fiyatý\n%s", "Seç", "<< Geri", dialogString);
                } else return HataMesajiC(playerid, "Çalýþtýðýn tezgaha yakýn deðilsin.");
            } else {
                new vid = StandInfo[tezgah][saracID], Float:vX, Float:vY, Float:vZ;
                GetVehiclePos(vid, vX, vY, vZ);
                if(IsPlayerInRangeOfPoint(playerid, 10.0, vX, vY, vZ)) {
                    new dialogString[520];
                    for(new i; i < 3; i++) {
                        if(StandInfo[PlayerInfo[playerid][pCalistigiTezgah]][sIcecekFiyati][i] != 0)
                            format(dialogString, sizeof dialogString, "%s{4b75c3}%s\t{45b94a}$%d\n", dialogString, StandIcecekInfo[PlayerInfo[playerid][pCalistigiTezgah]][i], StandInfo[PlayerInfo[playerid][pCalistigiTezgah]][sIcecekFiyati][i]);
                        else
                            format(dialogString, sizeof dialogString, "%s{4b75c3}Yok\t{ea3636}$0\n", dialogString);
                    }
                    SetPVarInt(playerid, "SatisTezgah", tezgah);
                    Dialog_Show(playerid, DialogTezgahIcecekSat, DIALOG_STYLE_TABLIST_HEADERS, "Tezgah Ürünleri", "{FFFFFF}Ürün Adý\t{FFFFFF}Ürün Fiyatý\n%s", "Seç", "<< Geri", dialogString);
                } else return HataMesajiC(playerid, "Çalýþtýðýn tezgaha yakýn deðilsin.");
            }
        } else return HataMesajiC(playerid, "Önce bir tezgah açmalýsýn ya da bir tezgahta çalýþmalýsýn.");
    }
    else if(!strcmp(secenek, "yemeksat", true)) {
        if(GetPVarInt(playerid, "TezgahSatis") == 1) return HataMesajiC(playerid, "Birisine zaten satýþ teklifi göndermiþsiniz.");
        if(PlayerInfo[playerid][pActigiTezgah] != -1) {
            new tezgah = PlayerInfo[playerid][pActigiTezgah];
            SetPVarInt(playerid, "SatisTezgah", tezgah);
            if(!StandInfo[tezgah][sArabali]) {
                if(IsPlayerInRangeOfPoint(playerid, 10.0, StandInfo[tezgah][sPosX], StandInfo[tezgah][sPosY], StandInfo[tezgah][sPosZ])) {
                    new dialogString[520];
                    for(new i; i < 3; i++) {
                        if(StandInfo[PlayerInfo[playerid][pActigiTezgah]][sUrunFiyati][i] != 0)
                            format(dialogString, sizeof dialogString, "%s{4b75c3}%s\t{45b94a}$%d\n", dialogString, StandUrunInfo[PlayerInfo[playerid][pActigiTezgah]][i], StandInfo[PlayerInfo[playerid][pActigiTezgah]][sUrunFiyati][i]);
                        else
                            format(dialogString, sizeof dialogString, "%s{4b75c3}Yok\t{ea3636}$0\n", dialogString);
                    }
                    Dialog_Show(playerid, DialogTezgahUrunSat, DIALOG_STYLE_TABLIST_HEADERS, "Tezgah Ürünleri", "{FFFFFF}Ürün Adý\t{FFFFFF}Ürün Fiyatý\n%s", "Seç", "<< Geri", dialogString);
                } else return HataMesajiC(playerid, "Çalýþtýðýn tezgaha yakýn deðilsin.");
            } else {
                new vid = StandInfo[tezgah][saracID], Float:vX, Float:vY, Float:vZ;
                GetVehiclePos(vid, vX, vY, vZ);
                if(IsPlayerInRangeOfPoint(playerid, 10.0, vX, vY, vZ)) {
                    new dialogString[520];
                    for(new i; i < 3; i++) {
                        if(StandInfo[PlayerInfo[playerid][pActigiTezgah]][sUrunFiyati][i] != 0)
                            format(dialogString, sizeof dialogString, "%s{4b75c3}%s\t{45b94a}$%d\n", dialogString, StandUrunInfo[PlayerInfo[playerid][pActigiTezgah]][i], StandInfo[PlayerInfo[playerid][pActigiTezgah]][sUrunFiyati][i]);
                        else
                            format(dialogString, sizeof dialogString, "%s{4b75c3}Yok\t{ea3636}$0\n", dialogString);
                    }
                    Dialog_Show(playerid, DialogTezgahUrunSat, DIALOG_STYLE_TABLIST_HEADERS, "Tezgah Ürünleri", "{FFFFFF}Ürün Adý\t{FFFFFF}Ürün Fiyatý\n%s", "Seç", "<< Geri", dialogString);
                } else return HataMesajiC(playerid, "Çalýþtýðýn tezgaha yakýn deðilsin.");
            }
        } else if(PlayerInfo[playerid][pCalistigiTezgah] != -1) {
            new tezgah = PlayerInfo[playerid][pCalistigiTezgah];
            if(!StandInfo[tezgah][sArabali]) {
                if(IsPlayerInRangeOfPoint(playerid, 10.0, StandInfo[tezgah][sPosX], StandInfo[tezgah][sPosY], StandInfo[tezgah][sPosZ])) {
                    new dialogString[520];
                    for(new i; i < 3; i++) {
                        if(StandInfo[PlayerInfo[playerid][pCalistigiTezgah]][sUrunFiyati][i] != 0)
                            format(dialogString, sizeof dialogString, "%s{4b75c3}%s\t{45b94a}$%d\n", dialogString, StandUrunInfo[PlayerInfo[playerid][pCalistigiTezgah]][i], StandInfo[PlayerInfo[playerid][pCalistigiTezgah]][sUrunFiyati][i]);
                        else
                            format(dialogString, sizeof dialogString, "%s{4b75c3}Yok\t{ea3636}$0\n", dialogString);
                    }
                    SetPVarInt(playerid, "SatisTezgah", tezgah);
                    Dialog_Show(playerid, DialogTezgahUrunSat, DIALOG_STYLE_TABLIST_HEADERS, "Tezgah Ürünleri", "{FFFFFF}Ürün Adý\t{FFFFFF}Ürün Fiyatý\n%s", "Seç", "<< Geri", dialogString);
                } else return HataMesajiC(playerid, "Çalýþtýðýn tezgaha yakýn deðilsin.");
            } else {
                new vid = StandInfo[tezgah][saracID], Float:vX, Float:vY, Float:vZ;
                GetVehiclePos(vid, vX, vY, vZ);
                if(IsPlayerInRangeOfPoint(playerid, 10.0, vX, vY, vZ)) {
                    new dialogString[520];
                    for(new i; i < 3; i++) {
                        if(StandInfo[PlayerInfo[playerid][pCalistigiTezgah]][sUrunFiyati][i] != 0)
                            format(dialogString, sizeof dialogString, "%s{4b75c3}%s\t{45b94a}$%d\n", dialogString, StandUrunInfo[PlayerInfo[playerid][pCalistigiTezgah]][i], StandInfo[PlayerInfo[playerid][pCalistigiTezgah]][sUrunFiyati][i]);
                        else
                            format(dialogString, sizeof dialogString, "%s{4b75c3}Yok\t{ea3636}$0\n", dialogString);
                    }
                    SetPVarInt(playerid, "SatisTezgah", tezgah);
                    Dialog_Show(playerid, DialogTezgahUrunSat, DIALOG_STYLE_TABLIST_HEADERS, "Tezgah Ürünleri", "{FFFFFF}Ürün Adý\t{FFFFFF}Ürün Fiyatý\n%s", "Seç", "<< Geri", dialogString);
                } else return HataMesajiC(playerid, "Çalýþtýðýn tezgaha yakýn deðilsin.");
            }
        } else return HataMesajiC(playerid, "Önce bir tezgah açmalýsýn ya da bir tezgahta çalýþmalýsýn.");
    } else if(!strcmp(secenek, "satisiptal", true)) {
        if(GetPVarInt(playerid, "TezgahSatis") != 1) return HataMesajiC(playerid, "Zaten ürün satýþ teklifi göndermemiþsiniz.");
        new karsiOyuncu = GetPVarInt(playerid, "TezgahSatisID");
        DeletePVar(playerid, "TezgahSatisID");
        DeletePVar(karsiOyuncu, "TezgahSatis");
        DeletePVar(karsiOyuncu, "TezgahSatan");
        DeletePVar(playerid, "TezgahSatis");
        DeletePVar(playerid, "SatisTezgah");
        DeletePVar(playerid, "SatisUrun");
        SunucuMesaji(playerid, "Tezgah ürün satýþýný iptal ettiniz.");
        SunucuMesaji(karsiOyuncu, "%s (ID: %d) tezgah ürün satýþýný iptal etti.", ReturnRoleplayName(playerid), playerid);
    }
    else if(!strcmp(secenek, "ayril", true)) {
        if(PlayerInfo[playerid][pCalistigiTezgah] != -1) {
            TezgahCalisanCikar(PlayerInfo[playerid][pCalistigiTezgah], playerid);
        } else return HataMesajiC(playerid, "Bir tezgahta çalýþan olarak çalýþmýyorsunuz.");
    }
    else if(!strcmp(secenek, "arabakur", true)) {
        if(PlayerInfo[playerid][pCalistigiTezgah] == -1 && PlayerInfo[playerid][pActigiTezgah] == -1) {
            new veh = GetPlayerVehicleID(playerid);
            if(IsValidVehicle(veh) && (GetVehicleModel(veh) == 588 || GetVehicleModel(veh) == 423)) {
                new id = Iter_Free(Tezgahlar);
                if(id != -1) {
                    Iter_Add(Tezgahlar, id);
                    new Float:pX, Float:pY, Float:pZ;
                    GetPlayerPos(playerid, pX, pY, pZ);
                    StandInfo[id][sExists] = 1;
                    StandInfo[id][sID] = PlayerInfo[playerid][pID];
                    format(StandInfo[id][sKuran], MAX_PLAYER_NAME, "%s", ReturnRoleplayName(playerid, true));
                    StandInfo[id][sPosX] = pX;
                    StandInfo[id][sPosY] = pY;
                    StandInfo[id][sPosZ] = pZ;
                    format(StandInfo[id][sLabelText], 128, "[TEZGAH]");
                    for(new i; i < 3; i++) {
                        StandInfo[id][sCalisan][i] = -1;
                        StandInfo[id][sUrunFiyati][i] = 0;
                        format(StandUrunInfo[id][i], 80, "Yok");
                    }
                    StandInfo[id][sArabali] = true;
                    StandInfo[id][sKasa] = 0;
                    StandInfo[id][sCalisanSayisi] = 0;
                    SunucuMesaji(playerid, "Tezgahýnýzý yerleþtirdiniz, tezgahýnýzýn ID'si: %d", id);
                    TezgahFix(playerid);
                    StandInfo[id][saracID] = veh;
                    StandInfo[id][sLabel] = CreateDynamic3DTextLabel(StandInfo[id][sLabelText], COLOR_WHITE, 0.0, 0.0, 0.0, 30.0, INVALID_PLAYER_ID, veh);
                    if(PlayerInfo[playerid][pTezgahMasa]) {
                        GetXYInFrontOfPlayer(playerid, pX, pY, 2.0);
                        StandInfo[id][sMasaObje] = CreateDynamicObject(PlayerInfo[playerid][pTezgahMasa], pX, pY, pZ, 0.0, 0.0, 0.0, 0, 0);
                        EditDynamicObject(playerid, StandInfo[id][sMasaObje]);
                        SetPVarInt(playerid, "TezgahMasaDuzenliyor", 1);
                        SetPVarInt(playerid, "DuzenledigiTezgah", id);
                        SunucuMesaji(playerid, "Masayý düzenliyorsunuz, iptal etmek için ESC tuþuna basabilirsiniz. (Masanýz elinizden alýnmaz.)");
                        SunucuMesaji(playerid, "Masanýn yerinden emin olduðunuzda ve yerleþtirmek istediðinizde disk ikonuna basabilirsiniz.");
                        SunucuMesaji(playerid, "Disk ikonuna basýp masayý yerleþtirirseniz masanýz elinizden alýnýr, tek kullanýmlýktýr.");
                    }
                } else return HataMesaji(playerid, "Sunucudaki maksimum tezgah sayýsýna ulaþýlmýþ.");
            } else return HataMesaji(playerid, "Uygun bir araçta deðilsin.");
        } else return HataMesaji(playerid, "Zaten bir tezgahta çalýþýyorsunuz ya da tezgah sahibisiniz.");
    }
    else return HataMesajiC(playerid, "Bilinmeyen bir parametre girdiniz.");
    return 1;
}

CMD:ck(playerid) {
//  if(PlayerInfo[playerid][pLevel] < 2) return HataMesajiC(playerid, "Lütfen forumda CK talebi oluþturun. (Forum > Yönetim ve Oyuncu > CK Alaný > CK Talepleri(Kiþisel))");
    SetPVarInt(playerid, "CKIstiyor", 1);
    SunucuMesaji(playerid, "Karakterini CK etmek üzeresin, bunun geri dönüþü olmaz. Eðer eminsen /kabulet ck yazarak onaylayabilirsin.");
    LogYaz(playerid, "/ck", -1, -1);
    return 1;
}

CMD:factions(playerid) {
    new factionString[2048], onlineUye = 0;
    foreach(new i: Factions) {
        if(FactionInfo[i][fExists]) {
            foreach(new j: Player) {
                if(PlayerInfo[j][pLogged]) {
                    if(PlayerInfo[j][pFaction] == i)
                        onlineUye++;
                }
            }
            format(factionString, sizeof factionString, "%s\n%s\t(%d/%d)\t%d", factionString, FactionInfo[i][fName], onlineUye, FactionInfo[i][fMembersCount], FactionInfo[i][fOlusumPuani]);
            onlineUye = 0;
        }
    }
    Dialog_Show(playerid, DialogFactionOnlineGoster, DIALOG_STYLE_TABLIST_HEADERS, "Faction Listesi", "Oluþum Adý\tOnline Üye/Toplam Üye\tOluþum Puaný\n%s", "Tamam", "", factionString);
    return 1;
}

CMD:cesetial(playerid, params[])
{
    new vehid = GetNearestVehicle(playerid);
    new bid = BagajKacCesetAlabilir(vehid);
    new text[10];
    if(!VehicleInfo[vehid][vLocked]) {
        if(VehicleInfo[vehid][vBoot]) {
            if(!GetPVarInt(playerid, "CesetSurukluyor")) {
                if(!GetPVarInt(playerid, "CesetAldi")) {
                    if(sscanf(params, "S[10](none)", text)) {
                        if(bid == 0) return HataMesajiC(playerid, "Bu bagaj ceset alamaz.");
                        new string[200], count = 0, i;
                        do {
                            new names[MAX_PLAYER_NAME];
                            if(i == 0) {
                                if(VehicleInfo[vehid][vCeset][0] == 1)
                                {
                                    CesetList[playerid][count] = 0;
                                    format(names, MAX_PLAYER_NAME, "%s", VehicleInfo[vehid][vIsim1]);
                                    count++;
                                    format(string, sizeof(string), "%s\n%s(Ceset)", string, names);
                                }
                            }
                            else if(i == 1) {
                                if(VehicleInfo[vehid][vCeset][1] == 1) {
                                    CesetList[playerid][count] = 1;
                                    format(names, MAX_PLAYER_NAME, "%s", VehicleInfo[vehid][vIsim1]);
                                    count++;
                                    format(string, sizeof(string), "%s\n%s(Ceset)", string, names);
                                }
                            }
                            else if(i == 2) {
                                if(VehicleInfo[vehid][vCeset][2] == 1) {
                                    CesetList[playerid][count] = 2;
                                    format(names, MAX_PLAYER_NAME, "%s", VehicleInfo[vehid][vIsim1]);
                                    count++;
                                    format(string, sizeof(string), "%s\n%s(Ceset)", string, names);
                                }
                            }
                            i++;
                        } while(i < bid);
                        if(count == 0) return HataMesajiC(playerid, "Bu bagajda ceset yok.");
                        SendClientMessageEx(playerid, COLOR_GREY, "Almak istediðiniz cesedi seçin.");
                        SetPVarInt(playerid, "CesetArac", vehid);
                        Dialog_Show(playerid, DialogCesetAl, DIALOG_STYLE_LIST, "Ceset Al", string, "Tamam", "Ýptal");

                    }
                } else return HataMesajiC(playerid, "Ayný anda 2 ceset sürükleyemezsiniz. Ceseti býrakmak için /cesetialonayla yazýn.");
            } else return HataMesajiC(playerid, "Ayný anda 2 ceset sürükleyemezsiniz. Ceseti býrakmak için /cesetbirak yazýn.");
        } else return HataMesajiC(playerid, "Yakýnýnýzdaki aracýn bagajý kapalý.");
    } else return HataMesajiC(playerid, "Yakýnýnýzdaki araç kilitli.");
    return 1;
}

CMD:cesetialonayla(playerid, params[])
{
    if(GetPVarInt(playerid, "CesetAldi") == 1)
    {
        SendClientMessageEx(playerid, COLOR_ADMIN, "Olduðunuz yerden uzaklaþmak için 5 saniyeniz var. 5 saniye sonra ceset spawn olcak ve sýkýþabilirsiniz.");
        new cid = CesetIDBul(playerid);

        if(GetPVarInt(playerid, "CesetBulunamadi") == 1)
        {
            CesetSil(cid);
            DeletePVar(playerid, "CesetBulunamadi");
        }

        CesetInfo[cid][cID] = cid;
        CesetInfo[cid][cExists] = 1;
        GetPVarString(playerid, "CesetIsim", CesetInfo[cid][cName], MAX_PLAYER_NAME);
        CesetInfo[cid][cSkin] = GetPVarInt(playerid, "CesetSkin");
        GetPlayerPos(playerid, CesetInfo[cid][ceX], CesetInfo[cid][ceY], CesetInfo[cid][ceZ]);
        GetPlayerFacingAngle(playerid, CesetInfo[cid][ceA]);
        CesetInfo[cid][ceInterior] = GetPlayerInterior(playerid);
        CesetInfo[cid][ceVW] = GetPlayerVirtualWorld(playerid);
        CesetInfo[cid][cBagaj] = 1;
        format(CesetInfo[cid][cOlduren], MAX_PLAYER_NAME, "%s", ReturnRoleplayName(playerid));
        DeletePVar(playerid, "CesetArac");
        DeletePVar(playerid, "CesetIsim");
        DeletePVar(playerid, "CesetSkin");
        DeletePVar(playerid, "CesetAldi");
        SetTimerEx("CesetYereKoy", 5000, false, "d", cid);
        PlayerME(playerid, "yere ceset býrakýr.");
        DestroyDynamic3DTextLabelEx(PlayerInfo[playerid][pNameTag]);
    }
    else return HataMesajiC(playerid, "Bagajdan ceset almamýþsýnýz.");
    return 1;
}

CMD:ceset(playerid, params[])
{
    new id, text[10];
    if(sscanf(params, "ds[10]", id, text)) return KullanimMesajiC(playerid, "/ceset [id] [hasarlar/torbala/yak/bagajakoy/surukle]");
    if(!CesetInfo[id][cExists]) return HataMesajiC(playerid, "Belirttiðiniz ceset bulunamadý.");
    if(!IsPlayerInRangeOfPoint(playerid, 3.0, CesetInfo[id][ceX], CesetInfo[id][ceY], CesetInfo[id][ceZ])) return HataMesajiC(playerid, "Bu komutu kullanmak için belirttiðiniz cesede yakýn olmalýsýnýz.");
    if(GetPlayerInterior(playerid) != CesetInfo[id][ceInterior] || CesetInfo[id][ceVW] != GetPlayerVirtualWorld(playerid)) return HataMesajiC(playerid, "Bu komutu kullanmak için belirttiðiniz cesede yakýn olmalýsýnýz.");
    if(!strcmp(text, "hasarlar", true))
    {
        new damagesString[1024];

        for(new i; i < MAX_DAMAGES_FOR_PLAYER; i++)
        {
            if(CesetInfo[id][cOccupied][i] == 1)
                //format(damagesString, sizeof(damagesString), "%s%s\t%s\t%s\n", damagesString, PlayerDamages[id][i][eIssuer], GetWeaponNameByID(CesetInfo[id][cSilah][i]), CesetBodyPart[id][i]);
                format(damagesString, sizeof(damagesString), "%s%s\t%s\n", damagesString, GetWeaponNameByID(CesetInfo[id][cSilah][i]), CesetBodyPart[id][i]);

        }

        if(PlayerInfo[playerid][pAdmin] > 2) BasariMesaji(playerid, "Bu kullanýcýyý öldüren kiþi: %s", CesetInfo[id][cOlduren]);

        //Dialog_Show(playerid, DialogNull, DIALOG_STYLE_TABLIST_HEADERS, CesetInfo[id][cName], "Ýsim\tSilah\tBölge\n%s", "Tamam", "", damagesString);
        Dialog_Show(playerid, DialogNull, DIALOG_STYLE_TABLIST_HEADERS, CesetInfo[id][cName], "Silah\tBölge\n%s", "Tamam", "", damagesString);
    }
    else if(!strcmp(text, "torbala", true)) {
        if(PlayerInfo[playerid][pTorba]) {
            if(!TorbaInfo[GetPVarInt(playerid, "TorbaID")][toCeset]) {
                RemovePlayerAttachedObject(playerid, PlayerInfo[playerid][pTorbaIndex]);
                TorbaInfo[GetPVarInt(playerid, "TorbaID")][toObje] = CreateDynamicObject(19944, CesetInfo[id][ceX], CesetInfo[id][ceY], CesetInfo[id][ceZ] - 1.0, 0.0, 0.0, CesetInfo[id][ceA], CesetInfo[id][ceVW], CesetInfo[id][ceInterior]);
                TorbaInfo[GetPVarInt(playerid, "TorbaID")][toYerde] = 1;
                TorbaInfo[GetPVarInt(playerid, "TorbaID")][toX] = CesetInfo[id][ceX];
                TorbaInfo[GetPVarInt(playerid, "TorbaID")][toY] = CesetInfo[id][ceY];
                TorbaInfo[GetPVarInt(playerid, "TorbaID")][toZ] = CesetInfo[id][ceZ];
                TorbaInfo[GetPVarInt(playerid, "TorbaID")][toA] = CesetInfo[id][ceA];
                TorbaInfo[GetPVarInt(playerid, "TorbaID")][toInterior] = CesetInfo[id][ceInterior];
                TorbaInfo[GetPVarInt(playerid, "TorbaID")][toVW] = CesetInfo[id][ceVW];
                TorbaInfo[GetPVarInt(playerid, "TorbaID")][toYerde] = 1;
                TorbaInfo[GetPVarInt(playerid, "TorbaID")][toCeset] = true;
                CesetSil(id);
                ClearAnimations(playerid, 1);
                SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
                DeletePVar(playerid, "TorbaID");
                PlayerME(playerid, "bir cesedi ceset torbasýna koyar.");
            } else return HataMesajiC(playerid, "Elinizdeki ceset torbasýnda zaten bir ceset var.");
        } else return HataMesajiC(playerid, "Bu komutu kullanmak için elinizde bir ceset torbasý olmalý.");
    }
    else if(!strcmp(text, "yak", true)) {
        if(!CesetInfo[id][cYaniyor]) {
            CesetInfo[id][cYanginObjesi] = CreateDynamicObject(18688, CesetInfo[id][ceX], CesetInfo[id][ceY], CesetInfo[id][ceZ] - 1.8, 0.0, 0.0, CesetInfo[id][ceA], CesetInfo[id][ceVW], CesetInfo[id][ceInterior]);
            CesetInfo[id][cYaniyor] = 1;
            SetTimerEx("CesetYangin", 1000 * 180, false, "d", id);
            PlayerME(playerid, "bir cesedi ateþe verir.");
        } else return HataMesajiC(playerid, "Belirttiðiniz ceset zaten yanýyor.");
    }
    else if(!strcmp(text, "bagajakoy", true)) {
        new vehid = GetNearestVehicle(playerid);
        if(IsValidVehicle(vehid)) {
            if(!VehicleInfo[vehid][vLocked]) {
                if(VehicleInfo[vehid][vBoot]) {
                    new slot = CesetBagajIDBul(vehid);
                    if(slot == 9999) return HataMesajiC(playerid, "Bu bagaj daha fazla ceset alamaz.");
                    VehicleInfo[vehid][vCeset][slot] = 1;
                    VehicleInfo[vehid][vSkin][slot] = CesetInfo[id][cSkin];
                    switch(slot) {
                        case 0:
                            format(VehicleInfo[vehid][vIsim1], MAX_PLAYER_NAME, "%s", CesetInfo[id][cName]);
                        case 1:
                            format(VehicleInfo[vehid][vIsim2], MAX_PLAYER_NAME, "%s", CesetInfo[id][cName]);
                        case 2:
                            format(VehicleInfo[vehid][vIsim3], MAX_PLAYER_NAME, "%s", CesetInfo[id][cName]);
                    }
                    CesetSil(id);
                    PlayerME(playerid, "bir cesedi bagaja koyar.");
                } else return HataMesajiC(playerid, "Yakýnýnýzdaki aracýn bagajý açýk deðil.");
            } else return HataMesajiC(playerid, "Yakýnýnýzdaki araç kilitli.");
        } else return HataMesajiC(playerid, "Yakýnýnýzda araç yok.");
    }
    else if(!strcmp(text, "surukle", true)) {

        if(CesetInfo[id][cYaniyor]) return HataMesajiC(playerid, "Yanan ceseti taþýyamazsýn.");

        if(!GetPVarInt(playerid, "CesetSurukluyor")) {
                if(!GetPVarInt(playerid, "CesetAldi")) {
                    PlayerME(playerid, "bir cesedi sürüklemeye baþlar.");
                    SetPVarInt(playerid, "CesetSurukluyor", 1);
                    SetPVarInt(playerid, "CesetSkin", CesetInfo[id][cSkin]);
                    SetPVarString(playerid, "CesetIsim", CesetInfo[id][cName]);
                    CesetSil(id);
                    PlayerInfo[playerid][pNameTag] = CreateDynamic3DTextLabel("(( Bu kullanýcý bir ceset sürüklüyor. ))", COLOR_ADMIN, 0, 0, 0.5, 30.0, playerid, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0);
                    SendClientMessageEx(playerid, COLOR_GREY, "Bir ceset sürüklüyorsunuz. Cesedi býrakmak için /cesetbirak yazýn.");
                } else return HataMesajiC(playerid, "Ayný anda 2 ceset sürükleyemezsiniz. Ceseti býrakmak için /cesetialonayla yazýn.");
        } else return HataMesajiC(playerid, "Ayný anda 2 ceset sürükleyemezsiniz. Ceseti býrakmak için /cesetbirak yazýn.");
    } else return KullanimMesajiC(playerid, "/ceset [id] [hasarlar/torbala/yak/bagajakoy/surukle]");
    return 1;
}

CMD:cesetbirak(playerid) {
    if(GetPVarInt(playerid, "CesetSurukluyor") == 1) {
        SendClientMessageEx(playerid, COLOR_ADMIN, "Olduðunuz yerden uzaklaþmak için 5 saniyeniz var. 5 saniye sonra ceset spawn olacak ve sýkýþabilirsiniz.");
        new cid = CesetIDBul(playerid);
        if(GetPVarInt(playerid, "CesetBulunamadi") == 1) {
            CesetSil(cid);
            DeletePVar(playerid, "CesetBulunamadi");
        }
        CesetInfo[cid][cID] = cid;
        CesetInfo[cid][cExists] = 1;
        GetPVarString(playerid, "CesetIsim", CesetInfo[cid][cName], MAX_PLAYER_NAME);
        CesetInfo[cid][cSkin] = GetPVarInt(playerid, "CesetSkin");
        GetPlayerPos(playerid, CesetInfo[cid][ceX], CesetInfo[cid][ceY], CesetInfo[cid][ceZ]);
        GetPlayerFacingAngle(playerid, CesetInfo[cid][ceA]);
        CesetInfo[cid][ceInterior] = GetPlayerInterior(playerid);
        CesetInfo[cid][ceVW] = GetPlayerVirtualWorld(playerid);
        CesetInfo[cid][cBagaj] = 1;
        format(CesetInfo[cid][cOlduren], MAX_PLAYER_NAME, "%s", ReturnRoleplayName(playerid));
        DeletePVar(playerid, "CesetArac");
        DeletePVar(playerid, "CesetIsim");
        DeletePVar(playerid, "CesetSkin");
        DeletePVar(playerid, "CesetAldi");
        SetTimerEx("CesetYereKoy", 5000, false, "d", cid);
        PlayerME(playerid, "yere ceset býrakýr.");
        SetPVarInt(playerid, "CesetSurukluyor", 0);
        DestroyDynamic3DTextLabelEx(PlayerInfo[playerid][pNameTag]);
    } else return HataMesajiC(playerid, "Bir ceset sürüklemiyorsunuz.");
    return 1;
}

CMD:destekiste(playerid, params[]) {
    if(strlen(params) < 1) return KullanimMesajiC(playerid, "/destekiste <pd/fd/hepsi/kapat>");
    if(!strcmp(params, "pd", true)) {
        new location[MAX_ZONE_NAME], Float:pX, Float:pY, Float:pZ;
        GetPlayerPos(playerid, pX, pY, pZ);
        GetCoords2DZone(pX, pY, location, MAX_ZONE_NAME);
        if(PlayerInfo[playerid][pDestekIstedi][0]) return HataMesajiC(playerid, "Zaten PD'den destek istemiþsiniz.");
        PlayerInfo[playerid][pDestekIstedi][0] = 1;
        PlayerAME(playerid, "telsizindeki destek tuþuna basar.");
        SunucuMesaji(playerid, "Los Santos Police Department'a destek talebiniz iletildi.");
        SendFactionMessage(0, "[OPERATÖR]: Tüm birimlerin dikkatine, %s %s, %s konumunda destek istiyor.", fRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pRank]-1], ReturnRoleplayName(playerid), location);
    } else if(!strcmp(params, "fd", true)) {
        new location[MAX_ZONE_NAME], Float:pX, Float:pY, Float:pZ;
        GetPlayerPos(playerid, pX, pY, pZ);
        GetCoords2DZone(pX, pY, location, MAX_ZONE_NAME);
        if(PlayerInfo[playerid][pDestekIstedi][1]) return HataMesajiC(playerid, "Zaten FD'den destek istemiþsiniz.");
        PlayerInfo[playerid][pDestekIstedi][1] = 1;
        PlayerAME(playerid, "telsizindeki destek tuþuna basar.");
        SunucuMesaji(playerid, "Los Santos Fire Department'a destek talebiniz iletildi.");
        SendFactionMessage(1, "[OPERATÖR]: Tüm birimlerin dikkatine, %s %s, %s konumunda destek istiyor.", fRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pRank]-1], ReturnRoleplayName(playerid), location);
    } else if(!strcmp(params, "hepsi", true)) {
        new location[MAX_ZONE_NAME], Float:pX, Float:pY, Float:pZ;
        GetPlayerPos(playerid, pX, pY, pZ);
        GetCoords2DZone(pX, pY, location, MAX_ZONE_NAME);
        if(PlayerInfo[playerid][pDestekIstedi][1] && PlayerInfo[playerid][pDestekIstedi][0]) return HataMesajiC(playerid, "Zaten hem PD'den hem de FD'den destek istemiþsiniz.");
        if(!PlayerInfo[playerid][pDestekIstedi][1]) {
            PlayerInfo[playerid][pDestekIstedi][1] = 1;
            SendFactionMessage(1, "[OPERATÖR]: Tüm birimlerin dikkatine, %s %s, %s konumunda destek istiyor.", fRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pRank]-1], ReturnRoleplayName(playerid), location);
        }
        if(!PlayerInfo[playerid][pDestekIstedi][0]) {
            PlayerInfo[playerid][pDestekIstedi][0] = 1;
            SendFactionMessage(0, "[OPERATÖR]: Tüm birimlerin dikkatine, %s %s, %s konumunda destek istiyor.", fRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pRank]-1], ReturnRoleplayName(playerid), location);
        }
        PlayerAME(playerid, "telsizindeki destek tuþuna basar.");
        SunucuMesaji(playerid, "Hem polise hem de FD'ye destek talebiniz iletildi.");
    } else if(!strcmp(params, "kapat", true)) {
        if(!PlayerInfo[playerid][pDestekIstedi][1] && !PlayerInfo[playerid][pDestekIstedi][0]) return HataMesajiC(playerid, "Zaten destek istememiþsiniz.");
        if(PlayerInfo[playerid][pDestekIstedi][0]) {
            PlayerInfo[playerid][pDestekIstedi][0] = 0;
            SendFactionMessage(0, "[OPERATÖR]: Destek isteyen %s %s artýk desteðe ihtiyaç duymuyor.", fRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pRank]-1], ReturnRoleplayName(playerid));
        }
        if(PlayerInfo[playerid][pDestekIstedi][1]) {
            PlayerInfo[playerid][pDestekIstedi][1] = 0;
            SendFactionMessage(1, "[OPERATÖR]: Destek isteyen %s %s artýk desteðe ihtiyaç duymuyor.", fRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pRank]-1], ReturnRoleplayName(playerid));
        }
        PlayerAME(playerid, "telsizindeki destek tuþuna basar.");
        SunucuMesaji(playerid, "Destek talebinizi iptal ettiniz.");
    } else return KullanimMesajiC(playerid, "/destekiste <pd/fd/hepsi/kapat>");
    return 1;
}

CMD:cesettorbasi(playerid, params[])
{
    if(isnull(params)) return KullanimMesajiC(playerid, "/cesettorbasi [al/sil/yerebirak/yerdenal]");
    if(!strcmp(params, "al", true)) {
        new vehid = GetNearestVehicle(playerid);
        if(Faction_GetType(VehicleInfo[vehid][vFaction]) == POLICE || Faction_GetType(VehicleInfo[vehid][vFaction]) == MEDICAL) {
            if(!PlayerInfo[playerid][pTorba]) {
                new torbaid = TorbaIDBul(playerid);
                if(GetPVarInt(playerid, "TorbaBulunamadi") == 1) {
                    TorbaReset(torbaid);
                    DeletePVar(playerid, "TorbaBulunamadi");
                }
                TorbaOlustur(playerid, torbaid);
                SetPVarInt(playerid, "TorbaID", torbaid);
                PlayerInfo[playerid][pTorba] = 1;
                SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
                TorbaInfo[torbaid][toCeset] = false;
            } else return HataMesajiC(playerid, "Zaten bir torbanýz var.");
        } else return HataMesajiC(playerid, "Bir polis ya da FD aracýna yeterince yakýn deðilsiniz.");
    }
    else if(!strcmp(params, "sil", true)) {
        new vehid = GetNearestVehicle(playerid);
        if(Faction_GetType(VehicleInfo[vehid][vFaction]) == POLICE || Faction_GetType(VehicleInfo[vehid][vFaction]) == MEDICAL) {
            if(PlayerInfo[playerid][pTorba]) {
                TorbaSil(playerid, GetPVarInt(playerid, "TorbaID"));
                DeletePVar(playerid, "TorbaID");
                PlayerInfo[playerid][pTorba] = 0;
                PlayerInfo[playerid][pTorbaIndex] = -1;
                SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
                ClearAnimations(playerid, 1);
                PlayerME(playerid, "ceset torbasýný býrakýr.");
            } else return HataMesajiC(playerid, "Bir torbanýz yok.");
        } else return HataMesajiC(playerid, "Bir polis ya da FD aracýna yeterince yakýn deðilsiniz.");
    }
    else if(!strcmp(params, "yerebirak", true)) {
        if(PlayerInfo[playerid][pTorba]) {
            RemovePlayerAttachedObject(playerid, PlayerInfo[playerid][pTorbaIndex]);
            new Float:pX, Float:pY, Float:pZ, Float:pA, pINT, pVW;
            GetPlayerPos(playerid, pX, pY, pZ);
            GetPlayerFacingAngle(playerid, pA);
            pINT = GetPlayerInterior(playerid);
            pVW = GetPlayerVirtualWorld(playerid);
            TorbaInfo[GetPVarInt(playerid, "TorbaID")][toObje] = CreateDynamicObject(19944, pX, pY, pZ - 1.0, 0.0, 0.0, pA, pVW, pINT);
            TorbaInfo[GetPVarInt(playerid, "TorbaID")][toYerde] = 1;
            TorbaInfo[GetPVarInt(playerid, "TorbaID")][toX] = pX;
            TorbaInfo[GetPVarInt(playerid, "TorbaID")][toY] = pY;
            TorbaInfo[GetPVarInt(playerid, "TorbaID")][toZ] = pZ;
            TorbaInfo[GetPVarInt(playerid, "TorbaID")][toA] = pA;
            TorbaInfo[GetPVarInt(playerid, "TorbaID")][toInterior] = pINT;
            TorbaInfo[GetPVarInt(playerid, "TorbaID")][toVW] = pVW;
            ApplyAnimation(playerid, "CARRY", "putdwn", 4.1, 0, 0, 0, 0, 0, 1);
            SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
            DeletePVar(playerid, "TorbaID");
            PlayerME(playerid, "ceset torbasýný býrakýr.");
            PlayerInfo[playerid][pTorba] = 0;
        } else return HataMesajiC(playerid, "Bu komutu kullanmak için elinizde bir ceset torbasý olmalý.");

    }
    else if(!strcmp(params, "yerdenal", true)) {
        new id, founda = 0;
        for(new i; i < MAX_TORBA; i++) {
            if(TorbaInfo[i][toYerde]) {
                if(IsPlayerInRangeOfPoint(playerid, 5.0, TorbaInfo[i][toX], TorbaInfo[i][toY], TorbaInfo[i][toZ])) {
                    id = i;
                    founda = 1;
                    break;
                }
            }
        }
        if(founda == 1) {
            DestroyDynamicObjectEx(TorbaInfo[id][toObje]);
            TorbaInfo[id][toYerde] = 0;
            TorbaInfo[id][toElindeki] = playerid;
            SetPVarInt(playerid, "TorbaID", id);
            PlayerInfo[playerid][pTorba] = 1;
            //new count, found = 0;
            //for(new i=0; i<MAX_PLAYER_ATTACHED_OBJECTS; i++)
            //{
                //if(!IsPlayerAttachedObjectSlotUsed(playerid, i)) {
                    //count = i;
                  //  found = 1;
                //    break;
              //  }
            //}
            //if(found == 0) {
            RemovePlayerAttachedObject(playerid, 9);
            SetPlayerAttachedObject(playerid, 9, 19944, 5, 0.29, 0.0, 0.09, -83.60, 2.59, 12.69, 0.83, 1.0, 0.53, 0, 0);
            //} else
                //SetPlayerAttachedObject(playerid, count, 19944, 5, 0.29, 0.0, 0.09, -83.60, 2.59, 12.69, 0.83, 1.0, 0.53, 0, 0);//
            SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
            PlayerInfo[playerid][pTorbaIndex] = 9;
            PlayerME(playerid, "yerden bir ceset torbasý alýr.");
        } else return HataMesajiC(playerid, "Yakýnýnýzda bir ceset torbasý yok.");
    } else return KullanimMesajiC(playerid, "/cesettorbasi [al/sil/yerdenal]");
    return 1;
}

CMD:ekipman(playerid) {
    DolapGoster(playerid);
    return 1;
}

CMD:gisedurum(playerid, params[])
{
    if(isnull(params) || strlen(params) > 16) return
        KullanimMesajiC(playerid, "/gisedurum [hepsinikapat - hepsiniac - santamaria - rodeo - montgomery - blueberry - lv]");

    if(PlayerInfo[playerid][pRank] > 15) return
        SunucuMesajiC(playerid, "Bu komutu kullanmak için yetkiniz bulunmuyor.");

    if(!strcmp(params, "hepsinikapat", true))
    {
        for(new i; i < MAX_GATES; i++) if(GateBilgi[i][GateGise] == 1) Toll_Lock(i);

        SendFactionMessage(0, "** HQ: %s %s tüm giþeleri kapattý.", fRanks[0][PlayerInfo[playerid][pRank] - 1], ReturnRoleplayName(playerid));
    }
    else if(!strcmp(params, "hepsiniac", true))
    {
        for(new i; i < MAX_GATES; i++) if(GateBilgi[i][GateGise] == 1) Toll_Unlock(i);

        SendFactionMessage(0, "** HQ: %s %s tüm giþeleri açtý.", fRanks[0][PlayerInfo[playerid][pRank] - 1], ReturnRoleplayName(playerid));
    }
    else if(!strcmp(params, "santamaria", true))
    {
        if(GateBilgi[0][GateGise] == 0 || GateBilgi[1][GateGise] == 0) return 1;

        if(GateBilgi[0][GiseDurum] == true)
        {
            Toll_Unlock(0);
            Toll_Unlock(1);
            SendFactionMessage(0, "** HQ: %s %s Santa Maria giþelerini açtý.", fRanks[0][PlayerInfo[playerid][pRank] - 1], ReturnRoleplayName(playerid));
        }
        else
        {
            Toll_Lock(0);
            Toll_Lock(1);
            SendFactionMessage(0, "** HQ: %s %s Santa Maria giþelerini kapattý.", fRanks[0][PlayerInfo[playerid][pRank] - 1], ReturnRoleplayName(playerid));

        }
    }
    else if(!strcmp(params, "rodeo", true))
    {
        if(GateBilgi[2][GateGise] == 0 || GateBilgi[3][GateGise] == 0) return 1;

        if(GateBilgi[2][GiseDurum] == true)
        {
            Toll_Unlock(2);
            Toll_Unlock(3);
            SendFactionMessage(0, "** HQ: %s %s Rodeo giþelerini açtý.", fRanks[0][PlayerInfo[playerid][pRank] - 1], ReturnRoleplayName(playerid));
        }
        else
        {
            Toll_Lock(2);
            Toll_Lock(3);
            SendFactionMessage(0, "** HQ: %s %s Rodeo giþelerini kapattý.", fRanks[0][PlayerInfo[playerid][pRank] - 1], ReturnRoleplayName(playerid));

        }
    }
    else if(!strcmp(params, "lv", true))
    {
        if(GateBilgi[4][GateGise] == 0 || GateBilgi[5][GateGise] == 0) return 1;

        if(GateBilgi[4][GiseDurum] == true)
        {
            Toll_Unlock(4);
            Toll_Unlock(5);
            SendFactionMessage(0, "** HQ: %s %s LS-LV giþelerini açtý.", fRanks[0][PlayerInfo[playerid][pRank] - 1], ReturnRoleplayName(playerid));
        }
        else
        {
            Toll_Lock(4);
            Toll_Lock(5);
            SendFactionMessage(0, "** HQ: %s %s LS-LV giþelerini kapattý.", fRanks[0][PlayerInfo[playerid][pRank] - 1], ReturnRoleplayName(playerid));

        }
    }
    else if(!strcmp(params, "montgomery", true))
    {
        if(GateBilgi[6][GateGise] == 0 || GateBilgi[7][GateGise] == 0) return 1;

        if(GateBilgi[6][GiseDurum] == true)
        {
            Toll_Unlock(6);
            Toll_Unlock(7);
            SendFactionMessage(0, "** HQ: %s %s Montgomery lokasyonunun batýsýndaki giþeleri açtý.", fRanks[0][PlayerInfo[playerid][pRank] - 1], ReturnRoleplayName(playerid));
        }
        else
        {
            Toll_Lock(6);
            Toll_Lock(7);
            SendFactionMessage(0, "** HQ: %s %s Montgomery lokasyonunun batýsýndaki giþeleri kapattý.", fRanks[0][PlayerInfo[playerid][pRank] - 1], ReturnRoleplayName(playerid));

        }
    }
    else if(!strcmp(params, "blueberry", true))
    {
        if(GateBilgi[8][GateGise] == 0 || GateBilgi[9][GateGise] == 0) return 1;

        if(GateBilgi[8][GiseDurum] == true)
        {
            Toll_Unlock(8);
            Toll_Unlock(9);
            SendFactionMessage(0, "** HQ: %s %s Blueberry lokasyonunun batýsýndaki giþeleri açtý.", fRanks[0][PlayerInfo[playerid][pRank] - 1], ReturnRoleplayName(playerid));
        }
        else
        {
            Toll_Lock(8);
            Toll_Lock(9);
            SendFactionMessage(0, "** HQ: %s %s Blueberry lokasyonunun batýsýndaki giþeleri kapattý.", fRanks[0][PlayerInfo[playerid][pRank] - 1], ReturnRoleplayName(playerid));

        }
    }
    return 1;
}

CMD:fyarat(playerid, params[])
{
    new id = Iter_Free(Factions),
        type,
        name[32],
        shortname[17];

    if(id >= MAX_FACTIONS)return
        SunucuMesaji(playerid, "Oluþum sýnýrýna ulaþýldý.");

    if(sscanf(params, "ds[17]s[32]", type, shortname, name))
    {
        KullanimMesajiC(playerid, "/fyarat [tip] [oluþum kýsaltmasý] [isim]");
        return SendClientMessageEx(playerid, COLOR_GREY, "[TÝP] 1: Polis - 2: Hükümet - 3: Saðlýk - 4: LSN - 5: Ýllegal (Uyuþturucu Onaylý) - 6: Ýllegal (Normal) - 7: Diðer");
    }

    if(type < 1 || type > 7)return
        SunucuMesaji(playerid, "1 ile 7 arasýnda deðer girin.");

    if(strlen(shortname) > 17)return
        SunucuMesaji(playerid, "Kýsaltma 17 karakterden kýsa olmalý.");

    format(FactionInfo[id][fName], 32, name);

    FactionInfo[id][fExists] = 1;
    FactionInfo[id][fType] = type;

    for(new x; x < MAX_FACTION_RANKS; x++)
    {
        FactionInfo[id][fSkins][x] = 0;
        format(fRanks[id][x], 80, "boþ");
        FactionInfo[id][fSalary][x] = 0;
    }
    FactionInfo[id][fOlusumPuani] = 0;
    // new query[200];

    mysql_format(ourConnection, queryx, sizeof(queryx), "INSERT INTO factions (short_name, name, type) VALUES ('%e', '%e', '%d')", shortname, name, type);
    mysql_tquery(ourConnection, queryx, "OnQueryFinished", "dd", id, THREAD_CREATE_FACTION);

    SendAworkAlert(false, COLOR_ADMIN, "AdmCmd: %s, ID %d'li oluþumu oluþturdu. (Tip: %d).", ReturnRoleplayName(playerid), id, type);

    LogYaz(playerid, "/fyarat", -1, id, type);

    Iter_Add(Factions, id);

    return 1;
}
CMD:fedit(playerid, params[])return Faction_ShowList(playerid);
CMD:freset(playerid, params[])
{
    new id;

    if(sscanf(params, "d", id))return
        KullanimMesajiC(playerid, "/freset [id]");

    if(id < 0 || id >= MAX_FACTIONS || !FactionInfo[id][fExists])return
        SunucuMesaji(playerid, "Oluþum bulunamadý.");

    // new query[128];

    mysql_format(ourConnection, queryx, sizeof(queryx), "UPDATE characters SET faction_id = '%d', faction_rank_id = '0' WHERE faction_id = '%d'", -1, FactionInfo[id][fID]);
    mysql_tquery(ourConnection, queryx);

    foreach(new i : Player)
    {
        if(!IsPlayerConnected(i) || !PlayerInfo[i][pLogged])continue;

        if(PlayerInfo[i][pFaction] == id)
        {
            PlayerInfo[i][pFaction] = -1;
            PlayerInfo[i][pRank] = -1;
        }
        if(PlayerInfo[i][pFactionMOD] == id)
        {
            PlayerInfo[i][pFactionMOD] = -1;
            PlayerInfo[i][pSelectedSlot] = -1;
        }
        else continue;
    }

    for(new x; x < MAX_FACTION_RANKS; x++)
    {
        FactionInfo[id][fSkins][x] = 0;
        format(fRanks[id][x], 80, "boþ");
        FactionInfo[id][fSalary][x] = 0;
    }

    FactionInfo[id][fGraffiti] = 0;
    FactionInfo[id][fOOC] = 1;
    FactionInfo[id][fCash] = 0;
    FactionInfo[id][fMembersCount] = 0;
    FactionInfo[id][fSkinsCount] = 0;
    FactionInfo[id][fMaleSkin] = 0;
    FactionInfo[id][fFemaleSkin] = 0;
    FactionInfo[id][fType] = 0;
    FactionInfo[id][fID] = 0;
    format(FactionInfo[id][fName], 32, "Boþ");
    format(FactionInfo[id][fShortName], 17, "N/A");

    SendAdminAlert(false, COLOR_ADMIN, "AdmCmd: %s, %d ID'li oluþumu sýfýrladý.", ReturnRoleplayName(playerid), id);

    LogYaz(playerid, "/freset", -1, id);

    SaveFaction(id);

    return 1;
}

CMD:asilahkullan(playerid, params[])
{
    new vehicleid = GetPlayerVehicleID(playerid);

    if(IsABike(vehicleid) || !vehicleid)return
        SunucuMesaji(playerid, "Komutu kullanmak için ya uygun deðilsin ya da araçta deðilsin.");

    if(GetPlayerState(playerid) != PLAYER_STATE_PASSENGER)return
        SunucuMesaji(playerid, "Bu komutu kullanmak için yolcu olmalýsýn. (sürücü koltuðunun dýþýnda)");

    new slot;

    if(sscanf(params, "d", slot))return
        KullanimMesajiC(playerid, "/asilahkullan [slot(3 - 6)]");

    if(!slot)return SetPlayerArmedWeapon(playerid, 0);

    if(slot < 3 || slot > 6)return
        SunucuMesaji(playerid, "Geçersiz slot. (3 - 6)");

    new weaponid, ammo;

    GetPlayerWeaponData(playerid, slot, weaponid, ammo);

    switch(weaponid)
    {
        case 22, 25, 28 .. 33: if(weaponid == WEAPON_SHOTGUN && !PlayerInfo[playerid][pBeanBag] || weaponid != WEAPON_SHOTGUN)
        {
            SetPlayerArmedWeapon(playerid, weaponid);
        }
        default: SetPlayerArmedWeapon(playerid, 0);
    }

    SetPlayerArmedWeapon(playerid, weaponid);

    return 1;
}
CMD:modifiye(playerid, params[])
{
    if(PlayerInfo[playerid][pInTuning])return
        HataMesajiC(playerid, "Aracý zaten modifiye ediyorsun.");

    new buildingid = GetPlayerBuilding(playerid, true);

    if(buildingid != -1 && BuildingInfo[buildingid][bType] == TAMIRHANE)
    {
        new b = GetPlayerMenuBiz(playerid);

        if(b == -1)return
            HataMesajiC(playerid, "Yetkiniz olan bir tamirhaneye yakýn deðilsiniz.");

        if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)return
            HataMesajiC(playerid, "Bu komutu sürücü koltuðunda kullanabilirsin.");

        new vehID = GetPlayerVehicleID(playerid);

        if(VehicleInfo[vehID][vEngine]) return HataMesajiC(playerid, "Modifiye iþlemi için motoru kapatmalýsýnýz.");

        if(IsABike(vehID) > 0 || IsAMotorBike(vehID) > 0)return
            HataMesajiC(playerid, "Bu araç modifiye edilemez.");

        if(VehicleInfo[vehID][vJob] != -1) return HataMesajiC(playerid, "Meslek araçlarýný modifiye edemezsiniz.");

        foreach(new i : Player) if(IsPlayerConnected(i) && GetPlayerVehicleID(i) == vehID && i != playerid)return
            HataMesajiC(playerid, "Araç içerisinde bir yolcu bulunmamalý.");

        SetVehicleParamsEx(vehID, VEHICLE_PARAMS_OFF, VEHICLE_PARAMS_OFF, VEHICLE_PARAMS_OFF, VehicleInfo[vehID][vLocked], VehicleInfo[vehID][vBonnet], VehicleInfo[vehID][vBoot], VehicleInfo[vehID][vObje]);
        VehicleInfo[vehID][vEngine] = 0;
        VehicleInfo[vehID][vLights] = 0;
        PlayerInfo[playerid][pFreezed] = 1;
        TogglePlayerControllable(playerid, false);

        PlayerInfo[playerid][pInTuning] = 1;
        PlayerInfo[playerid][pTuningCategoryID] = 0;

        new string[64];
        new categoryTuning = PlayerInfo[playerid][pTuningCategoryID];

        format(string, sizeof(string), "%s (~>~)~y~ %s", TuningCategories[categoryTuning], TuningCategories[categoryTuning + 1]);
        PlayerTextDrawSetString(playerid, TDTuning_Component[playerid], string);
        PlayerTextDrawShow(playerid, TDTuning_Component[playerid]);

        PlayerInfo[playerid][pTamirciyim] = 1;
        Tuning_SetDisplay(playerid);

        PlayerTextDrawShow(playerid, TDTuning_Dots[playerid]);
        PlayerTextDrawShow(playerid, TDTuning_Price[playerid]);
        PlayerTextDrawShow(playerid, TDTuning_ComponentName[playerid]);
        PlayerTextDrawShow(playerid, TDTuning_YN[playerid]);

        SunucuMesaji(playerid, "{FF6347}Q {C8C8C8}ve {FF6347}E {C8C8C8}tuþlarýna basarak modifiye çeþitlerini inceleyebilirsin.");
        SunucuMesaji(playerid, "{FF6347}LMB {C8C8C8}ve {FF6347}RMB {C8C8C8}tuþlarýna basarak baktýðýn modifiye çeþidine ait modifiyeleri inceleyebilirsin.");

        if(PlayerInfo[playerid][pVehicleHud]) pc_cmd_kapat(playerid, "aracgosterge");
        return 1;
    }

    PlayerInfo[playerid][pTamirciyim] = 0;

    if(IsPlayerInRangeOfPoint(playerid, 5, EXTERIOR_TUNING_X, EXTERIOR_TUNING_Y, EXTERIOR_TUNING_Z) == 0)
    {
        AC_SetPlayerCheckpoint(playerid, EXTERIOR_TUNING_X, EXTERIOR_TUNING_Y, EXTERIOR_TUNING_Z, 1.0);
        return HataMesajiC(playerid, "Bu komutu \"modifiye noktasý\" üzerinde kullanabilirsin.");
    }

    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)return
        HataMesajiC(playerid, "Bu komutu sürücü koltuðunda kullanabilirsin.");

    new vehID = GetPlayerVehicleID(playerid);

    if(VehicleInfo[vehID][vEngine]) return HataMesajiC(playerid, "Tamir iþlemi için motoru kapatmalýsýnýz.");

    if(IsABike(vehID) > 0 || IsAMotorBike(vehID) > 0)return
        HataMesajiC(playerid, "Bu araç modifiye edilemez.");

    if(Vehicle_IsOwner(playerid, vehID, true) == 0)return
        HataMesajiC(playerid, "Bu aracýn sahibi sen deðilsin.");

    if(VehicleInfo[vehID][vJob] != -1) return HataMesajiC(playerid, "Meslek araçlarýný modifiye edemezsiniz.");

    foreach(new i : Player) if(IsPlayerConnected(i) && GetPlayerVehicleID(i) == vehID && i != playerid)return
        HataMesajiC(playerid, "Araç içerisinde bir yolcu bulunmamalý.");

    SetPlayerCameraPos(playerid, 441.1662, -1302.0037, 18.0385);
    SetPlayerCameraLookAt(playerid, 440.2185, -1301.6881, 17.6184);

    SetVehiclePos(vehID, INTERIOR_TUNING_X, INTERIOR_TUNING_Y, INTERIOR_TUNING_Z);
    SetVehicleZAngle(vehID, -180);
    AC_SetPlayerVirtualWorld(playerid, playerid + 1);
    SetVehicleVirtualWorld(vehID, playerid + 1);
    SetVehicleParamsEx(vehID, VEHICLE_PARAMS_OFF, VEHICLE_PARAMS_OFF, VEHICLE_PARAMS_OFF, VehicleInfo[vehID][vLocked], VehicleInfo[vehID][vBonnet], VehicleInfo[vehID][vBoot], VehicleInfo[vehID][vObje]);
    VehicleInfo[vehID][vEngine] = 0;
    VehicleInfo[vehID][vLights] = 0;
    PlayerInfo[playerid][pFreezed] = 1;
    TogglePlayerControllable(playerid, false);

    PlayerInfo[playerid][pInTuning] = 1;
    PlayerInfo[playerid][pTuningCategoryID] = 0;

    new string[64];
    new categoryTuning = PlayerInfo[playerid][pTuningCategoryID];

    format(string, sizeof(string), "%s (~>~)~y~ %s", TuningCategories[categoryTuning], TuningCategories[categoryTuning + 1]);
    PlayerTextDrawSetString(playerid, TDTuning_Component[playerid], string);
    PlayerTextDrawShow(playerid, TDTuning_Component[playerid]);

    Tuning_SetDisplay(playerid);

    PlayerTextDrawShow(playerid, TDTuning_Dots[playerid]);
    PlayerTextDrawShow(playerid, TDTuning_Price[playerid]);
    PlayerTextDrawShow(playerid, TDTuning_ComponentName[playerid]);
    PlayerTextDrawShow(playerid, TDTuning_YN[playerid]);

    SunucuMesaji(playerid, "{FF6347}Q {C8C8C8}ve {FF6347}E {C8C8C8}tuþlarýna basarak modifiye çeþitlerini inceleyebilirsin.");
    SunucuMesaji(playerid, "{FF6347}LMB {C8C8C8}ve {FF6347}RMB {C8C8C8}tuþlarýna basarak baktýðýn modifiye çeþidine ait modifiyeleri inceleyebilirsin.");

    if(PlayerInfo[playerid][pVehicleHud]) pc_cmd_kapat(playerid, "aracgosterge");

    return 1;
}
CMD:bagajdanal(playerid, params[])
{
    new cid = GetNearestVehicle(playerid);

    if(cid == -1)return
        SunucuMesajiC(playerid, "Aracýn içinde veya yakýnýnda deðilsin.");

    if(PlayerInfo[playerid][pFaction] != VehicleInfo[cid][vFaction] && PlayerInfo[playerid][pFactionDuty])return
        SunucuMesaji(playerid, "Bu aracýn bulunduðu oluþumda veya iþbaþýnda deðilsin.");

    new slot;
    //new quantity;
    new string[128];

    if(PlayerInfo[playerid][pFactionDuty] && (Faction_GetType(VehicleInfo[cid][vFaction]) == MEDICAL || Faction_GetType(VehicleInfo[cid][vFaction]) == POLICE || Faction_GetType(VehicleInfo[cid][vFaction]) == GOVERNMENT) && VehicleInfo[cid][vOwner] == -1)
    {
        if(PlayerInfo[playerid][pFaction] != VehicleInfo[cid][vFaction])return 1;

        if(sscanf(params, "d", slot))
        {
            static const allowedStatus[][10] = {"Evet", "Hayýr"};

            for(new j; j < MAX_CAR_WEAPONS; j++) if(Faction_GetType(VehicleInfo[cid][vFaction]) == CarFactionWeaponsInfo[j][weaponFaction] && VehicleInfo[cid][vSlotUsed][j] != 2)
                SendFormattedMessage(playerid, COLOR_GREY, "Slot %d: %s (Mermi: %d - Rezervasyon: %s)", j + 1, GetWeaponNameEx(CarFactionWeaponsInfo[j][weaponID]), CarFactionWeaponsInfo[j][weaponAmmo], allowedStatus[CarFactionWeaponsInfo[j][weaponAllowed]]);

            return KullanimMesajiC(playerid, "/bagajdanal [slot]");
        }

        slot--;

        if(slot < 0 || slot >= MAX_CAR_WEAPONS || VehicleInfo[cid][vSlotUsed][slot] == 2)return
            HataMesaji(playerid, "Geçersiz veya boþ slot. (1 - %d)", MAX_CAR_WEAPONS);

        if(CarFactionWeaponsInfo[slot][weaponFaction] == POLICE && !CarFactionWeaponsInfo[slot][weaponAllowed] && !PlayerInfo[playerid][pDivision][1])return
            SunucuMesaji(playerid, "Bunu kullanabilecek birimde deðilsin.");

        if(Faction_GetType(VehicleInfo[cid][vFaction]) != CarFactionWeaponsInfo[slot][weaponFaction])return
            SunucuMesaji(playerid, "Bu silahý kullanamazsýn.");

        if(CarFactionWeaponsInfo[slot][weaponID] == 25 && PlayerInfo[playerid][pBeanBag]) pc_cmd_beanbag(playerid, NULL);
        if(CarFactionWeaponsInfo[slot][weaponID] == 23 && PlayerInfo[playerid][pTaser]) pc_cmd_taser(playerid, NULL);

        AC_GivePlayerWeapon(playerid, CarFactionWeaponsInfo[slot][weaponID], CarFactionWeaponsInfo[slot][weaponAmmo]);
        PlayerInfo[playerid][pOldGun] = CarFactionWeaponsInfo[slot][weaponID];

        VehicleInfo[cid][vSlotUsed][slot]++;
        SunucuMesaji(playerid, "%s (mermi: %d) silahýný aracýnýn içerisinden aldýn.", GetWeaponNameEx(CarFactionWeaponsInfo[slot][weaponID]), CarFactionWeaponsInfo[slot][weaponAmmo]);

        format(string, sizeof(string), "%s adlý silahý aracýn içerisinden çýkartýr.", GetWeaponNameEx(CarFactionWeaponsInfo[slot][weaponID]));
        PlayerAME(playerid, string);
    }
    return 1;
}

CMD:asilahbirak(playerid, params[])
{
    new cid = GetNearestVehicle(playerid);

    if(cid == -1)return
        SunucuMesajiC(playerid, "Aracýn içinde veya yakýnýnda deðilsin.");

    new weaponid = (GetPlayerState(playerid) == PLAYER_STATE_PASSENGER || GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) ? AC_GetPlayerWeapon(playerid) : PlayerInfo[playerid][pOldGun];
    new ammo = AC_GetPlayerAmmo(playerid), string[90];

    if(PlayerInfo[playerid][pFaction] != VehicleInfo[cid][vFaction])return 1;
    if(PlayerInfo[playerid][pFactionDuty] && (VehicleInfo[cid][vFaction] != INVALID_VEHICLE_ID && (Faction_GetType(VehicleInfo[cid][vFaction]) == POLICE || Faction_GetType(VehicleInfo[cid][vFaction]) == GOVERNMENT)) && VehicleInfo[cid][vOwner] == -1)
    {
        if(PlayerInfo[playerid][pFaction] != VehicleInfo[cid][vFaction])return 1;

        new bool:depositGun = false;

        for(new j; j < MAX_CAR_WEAPONS; j++) if(CarFactionWeaponsInfo[j][weaponID] == weaponid || weaponid == WEAPON_SHOTGUN && !PlayerInfo[playerid][pBeanBag])
        {
            VehicleInfo[cid][vSlotUsed][j]--;
            if(ammo > 100) VehicleInfo[cid][vSlotUsed][j]--;
            if(VehicleInfo[cid][vSlotUsed][j] < 0) VehicleInfo[cid][vSlotUsed][j] = 0;
            depositGun = true; break;
        }

        if(!depositGun)return
            SunucuMesajiC(playerid, "Bu silahý oluþum aracýnýn bagajýna koyamazsýn.");

        AC_RemovePlayerWeapon(playerid, weaponid);
        SunucuMesaji(playerid, "%s silahýný bagaja koydun.", GetWeaponNameEx(weaponid));

        format(string, sizeof(string), "%s silahýný bagaja koyar.", GetWeaponNameEx(weaponid));
        PlayerAME(playerid, string);
    }

    SetPlayerArmedWeapon(playerid, 0);
    PlayerInfo[playerid][pOldGun] = 0;

    return 1;
}

CMD:arac(playerid, params[])
{
    if(PlayerInfo[playerid][pBuyingVehicle] || PlayerInfo[playerid][pInTuning]) return 1;
    new id, option[20], vid = GetNearestVehicle(playerid);//, query[90];

    if(sscanf(params, "s[20]D(-1)", option, id))
    {
        SendClientMessage(playerid, COLOR_WHITE, "{AFAFAF}KULLANIM: /arac [seçenek]");
        SendClientMessage(playerid, COLOR_WHITE, "[SEÇENEK] {AFAFAF}kilit - park - parksatinal - getir - sat - sistemesat - motor - far - ceza");
        SendClientMessage(playerid, COLOR_WHITE, "[SEÇENEK] {AFAFAF}envanter - kaput - bagaj - liste - benzindoldur - olusum - radyo - radyokapat");
        SendClientMessage(playerid, COLOR_WHITE, "[SEÇENEK] {AFAFAF}modifiyekaldir - gps - anahtar - anahtarsifirla - bilgi - gelisim - benzinkutusu");
        SendClientMessage(playerid, COLOR_WHITE, "[SEÇENEK] {AFAFAF}respawn - plakaekle - plakakaldir - vergiode");
        SendClientMessage(playerid, COLOR_WHITE, "[EK] {AFAFAF}/modifiye: Aracýnýzý modifiye etmeye yarar, modifiye noktasýnda olmalýsýnýz.");
        SendClientMessage(playerid, COLOR_WHITE, "[EK] {AFAFAF}Anahtarýnýz olan araçlara uygulayabileceðiniz komutlar: /aracgetir /aracgps");
        SendClientMessage(playerid, COLOR_WHITE, "[EK] {AFAFAF}Envanterindeki silahý /envanter > Eþyayý araca yerleþtir ile yerleþtirebilirsin.");
        SendClientMessage(playerid, COLOR_WHITE, "[EK] {AFAFAF}/acam: Aracýnýn camlarýný açmaya ve açýk olan camlarý kapatmaya yarar.");
        return 1;
    }

    if(gettime() < PlayerInfo[playerid][pVehicleTime])return
        SunucuMesaji(playerid, "Bu komutu kullanmadan önce biraz bekle.");

    PlayerInfo[playerid][pVehicleTime] = gettime() + 1;

    if(!strcmp(option, "far", true))
    {
        VehicleInfo[vid][vELM] = false;
        KillTimer(ELMTimer[vid]);

        if(vid == -1)return HataMesajiC(playerid, "Bu komutu bir aracýn sürücü koltuðunda kullanabilirsin.");
        if(IsABike(vid) || GetPlayerState(playerid) != PLAYER_STATE_DRIVER)return HataMesajiC(playerid, "Bu komutu bir aracýn sürücü koltuðunda kullanabilirsin.");

        VehicleInfo[vid][vLights] = !VehicleInfo[vid][vLights];

        SetVehicleParamsEx(vid, VehicleInfo[vid][vEngine], VehicleInfo[vid][vLights], VEHICLE_PARAMS_OFF, VehicleInfo[vid][vLocked], VehicleInfo[vid][vBonnet], VehicleInfo[vid][vBoot], VehicleInfo[vid][vObje]);
    }
    else if(!strcmp(option, "motor", true))
    {
        if(PlayerInfo[playerid][pYakitTimer] > 0 || PlayerInfo[playerid][pKamyoncuTimer] > 0)
            return HataMesajiC(playerid, "Bu iþlemi þu anda yapamazsýnýz.");
            
        new aracmodeli[64];
        format(aracmodeli, 64, "%s", GetVehicleModelName(VehicleInfo[vid][vModel]));
        if(vid == -1)return HataMesajiC(playerid, "Bu komutu anahtarýna ya da kendisine sahip olduðun araçlarda kullanabilirsin.");
        if(GetPVarInt(playerid, "pTamir") > 0) return HataMesajiC(playerid, "Tamir iþlemi sürüyor lütfen bekleyin.");
        if(IsABike(vid) || GetPlayerState(playerid) != PLAYER_STATE_DRIVER)return HataMesajiC(playerid, "Bu komutu motoru açýlabilen araçlarda kullanabilirsin.");
        if(!Vehicle_IsOwner(playerid, vid, false) && !VehicleInfo[vid][vEngine] && PlayerInfo[playerid][pStealCorrect] < STEALVEH_SUCCESS)
        {
            if(InSafeZone(playerid)) return HataMesajiC(playerid, "Güvenli bölgede bu sistemden yararlanamazsýnýz.");

            if(VehicleInfo[vid][vKoruma])
                return HataMesajiC(playerid, "Bu aracýn motoru güvenli bölgede kapanmýþ, koruma aktif.");
                
            if(VehicleInfo[vid][vHurda])
                return HataMesajiC(playerid, "Bu araç hasarlý, motoru açmak için tamir ettirmeniz gerekiyor.");
            
            if(VehicleInfo[vid][vDoorLevel] >= 4)
                return HataMesajiC(playerid, "Bu aracýn anahtarýna sahip deðilsiniz, son seviye güvenlik mevcut.");

            if(PlayerInfo[playerid][pStealTime] > 0)return
                SunucuMesaji(playerid, "Parolalarý çözerek motoru açmak için \"/duzkontak [parola]\" komutunu kullanýn.");

            PlayerInfo[playerid][pStealTime] = 120;
            PlayerInfo[playerid][pStealLevel] = 1;

            if(VehicleInfo[vid][vAlarm]) PlayerInfo[playerid][pStealTime] = floatround(120 / VehicleInfo[vid][vAlarm]);
            if(VehicleInfo[vid][vAlarm]) PlayerInfo[playerid][pStealLevel] = VehicleInfo[vid][vAlarm];

            SendClientMessageEx(playerid, COLOR_YELLOW, "Parolalarý çözerek motoru açmak için \"/duzkontak\" [parola] komutunu kullanýn.");
            TextStealVeh_Show(playerid);

            mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT * FROM scramble_words WHERE level = '%d'", PlayerInfo[playerid][pStealLevel]);
            mysql_tquery(ourConnection, queryx, "OnScrambleWordSearch", "d", playerid);

            return 1;
        }
        if(PlayerInfo[playerid][pStealCorrect] >= STEALVEH_SUCCESS)
        {
            PlayerInfo[playerid][pStealTime] = -1;
            PlayerInfo[playerid][pStealCorrect] = 0;
            PlayerInfo[playerid][pStealWrong] = 0;
            TextStealVeh_Hide(playerid);
        }
        if(PlayerInfo[playerid][pStealWrong]) PlayerInfo[playerid][pStealWrong] = 0;

        new Float:health;
        GetVehicleHealth(vid, health);

        if(VehicleInfo[vid][vPrice] > 0 && !DevletAraci(vid) && !IsABike(vid) && VehicleInfo[vid][vVergi] >= VehicleInfo[vid][vPrice] / 2 || !VehicleInfo[vid][vFuel] || health <= 400.0 || VehicleInfo[vid][vEngineHealth] <= 0 || VehicleInfo[vid][vBatteryHealth] <= 0)
        {
            if(!VehicleInfo[vid][vFuel]) SunucuMesaji(playerid, "Araçta benzin yok. Benzinliðe götürün veya benzin kutusu ile doldurun.");
            if(health <= 400.0) SunucuMesaji(playerid, "Aracýn motoru hasar görmüþ, motor baþlatýlamaz.");
            if(VehicleInfo[vid][vEngineHealth] <= 0) SunucuMesaji(playerid, "Aracýn motor ömrü yeterli deðil. (/arac bilgi)");
            if(VehicleInfo[vid][vBatteryHealth] <= 0) SunucuMesaji(playerid, "Aracýn akü ömrü yeterli deðil. (/arac bilgi)");
            if(VehicleInfo[vid][vPrice] > 0 && !DevletAraci(vid) && !IsABike(vid) && VehicleInfo[vid][vVergi] >= VehicleInfo[vid][vPrice] / 2) SunucuMesaji(playerid, "Bu araç vergi kilidine girmiþ, bu iþlemi yapamazsýnýz.");

            SetVehicleParamsEx(vid, VEHICLE_PARAMS_OFF, VehicleInfo[vid][vLights], VEHICLE_PARAMS_OFF, VehicleInfo[vid][vLocked], VehicleInfo[vid][vBonnet], VehicleInfo[vid][vBoot], VehicleInfo[vid][vObje]);
            return VehicleInfo[vid][vEngine] = VEHICLE_PARAMS_OFF;
        }

        if(!Vehicle_IsOwner(playerid, vid, false) && VehicleInfo[vid][vEngine]) return HataMesajiC(playerid, "Size ait olmayan aracýn motorunu kapatamazsýnýz.");

        if(VehicleInfo[vid][vKMGosteren] < 1500) {
            VehicleInfo[vid][vEngine] = !VehicleInfo[vid][vEngine];

            if(VehicleInfo[vid][vEngine] && VehicleInfo[vid][vFaction] == INVALID_VEHICLE_ID && VehicleInfo[vid][vJob] == -1)
                VehicleInfo[vid][vBatteryHealth] = (VehicleInfo[vid][vBatteryHealth] - 1.0 < 0.0) ? 0.0 : VehicleInfo[vid][vBatteryHealth] - 1.0;

            VehicleInfo[vid][vLights] = (!VehicleInfo[vid][vEngine]) ? VEHICLE_PARAMS_OFF : VehicleInfo[vid][vLights];
            SetVehicleParamsEx(vid, VehicleInfo[vid][vEngine], VehicleInfo[vid][vLights], VEHICLE_PARAMS_OFF, VehicleInfo[vid][vLocked], VehicleInfo[vid][vBonnet], VehicleInfo[vid][vBoot], VehicleInfo[vid][vObje]);
            new motoremote[124];
            if(VehicleInfo[vid][vEngine])
            {
                format(motoremote, 124, "%s model aracýn motorunu çalýþtýrýr.", aracmodeli);
                VehicleInfo[vid][vKoruma] = 0;
            }
            else
            {
                format(motoremote, 124, "%s model aracýn motorunu kapatýr.", aracmodeli);

                if(InSafeZone(playerid) || InSafeZoneVeh(vid)) VehicleInfo[vid][vKoruma] = 1;
                else VehicleInfo[vid][vKoruma] = 0;
            }
            PlayerAME(playerid, motoremote);
            VehicleInfo[vid][vAlarmOn] = 0;
            VehicleInfo[vid][vObje] = VEHICLE_PARAMS_OFF;
        }
        else if(PlayerInfo[playerid][pPremium] < 4 && VehicleInfo[vid][vKMGosteren] >= 1500 && !VehicleInfo[vid][vEngine] && Faction_GetType(VehicleInfo[vid][vFaction]) != POLICE && Faction_GetType(VehicleInfo[vid][vFaction]) != MEDICAL && Faction_GetType(VehicleInfo[vid][vFaction]) != GOVERNMENT && VehicleInfo[vid][vJob] == -1) {
            new motorSaniye = VehicleInfo[vid][vKMGosteren] / 1500;
            PlayerInfo[playerid][pAracMotorTimer] = motorSaniye;
            new motoremote[124];
            format(motoremote, sizeof motoremote, "%s model aracýn kontaðýndaki anahtarý çevirir.", aracmodeli);
            PlayerAME(playerid, motoremote);
            SunucuMesaji(playerid, "Aracýnýzýn kilometresi yüksek olduðu için motor açmanýz gecikebilir, motor açýlýyor.");
        } else {
            VehicleInfo[vid][vEngine] = !VehicleInfo[vid][vEngine];

            if(VehicleInfo[vid][vEngine] && VehicleInfo[vid][vFaction] == INVALID_VEHICLE_ID && VehicleInfo[vid][vJob] == -1)
                VehicleInfo[vid][vBatteryHealth] = (VehicleInfo[vid][vBatteryHealth] - 1.0 < 0.0) ? 0.0 : VehicleInfo[vid][vBatteryHealth] - 1.0;

            VehicleInfo[vid][vLights] = (!VehicleInfo[vid][vEngine]) ? VEHICLE_PARAMS_OFF : VehicleInfo[vid][vLights];
            SetVehicleParamsEx(vid, VehicleInfo[vid][vEngine], VehicleInfo[vid][vLights], VEHICLE_PARAMS_OFF, VehicleInfo[vid][vLocked], VehicleInfo[vid][vBonnet], VehicleInfo[vid][vBoot], VehicleInfo[vid][vObje]);
            new motoremote[124];
            if(VehicleInfo[vid][vEngine])
            {
                format(motoremote, 124, "%s model aracýn motorunu çalýþtýrýr.", aracmodeli);
                VehicleInfo[vid][vKoruma] = 0;
            }
            else
            {
                format(motoremote, 124, "%s model aracýn motorunu kapatýr.", aracmodeli);
                if(InSafeZone(playerid) || InSafeZoneVeh(vid)) VehicleInfo[vid][vKoruma] = 1;
                else VehicleInfo[vid][vKoruma] = 0;
            }
            PlayerAME(playerid, motoremote);
            VehicleInfo[vid][vAlarmOn] = 0;
            VehicleInfo[vid][vObje] = VEHICLE_PARAMS_OFF;
        }

    }
    else if(!strcmp(option, "kilit", true))
    {
        if(PlayerInfo[playerid][pKaravanda]) {
            new vidx = GetPlayerVirtualWorld(playerid);
            if(Vehicle_IsOwner(playerid, vidx, false) != 0 || HasPlayerUserKey(playerid, KEY_VEHICLE, VehicleInfo[GetPlayerVirtualWorld(playerid)][vID]) > 0) {
                PlayerAME(playerid, (VehicleInfo[GetPlayerVirtualWorld(playerid)][vLocked]) ? ("aracýnýn kilidini açar.") : ("aracýný kilitler."));
                if(!VehicleInfo[GetPlayerVirtualWorld(playerid)][vLocked])
                    Player_Info(playerid, "Araciniz ~r~kilitlendi.");
                else
                    Player_Info(playerid, "Aracinizin ~g~kilidi acildi.");
                VehicleInfo[GetPlayerVirtualWorld(playerid)][vLocked] = !VehicleInfo[GetPlayerVirtualWorld(playerid)][vLocked];
                SetVehicleParamsEx(GetPlayerVirtualWorld(playerid), VehicleInfo[GetPlayerVirtualWorld(playerid)][vEngine], VehicleInfo[GetPlayerVirtualWorld(playerid)][vLights], VEHICLE_PARAMS_OFF, VehicleInfo[GetPlayerVirtualWorld(playerid)][vLocked], VehicleInfo[GetPlayerVirtualWorld(playerid)][vBonnet], VehicleInfo[GetPlayerVirtualWorld(playerid)][vBoot], VehicleInfo[GetPlayerVirtualWorld(playerid)][vObje]);
                return 1;
            }
        }
        if(PlayerInfo[playerid][pGemide]) {
            new vidx = GetPlayerVirtualWorld(playerid);
            if(Vehicle_IsOwner(playerid, vidx, false) != 0 || HasPlayerUserKey(playerid, KEY_VEHICLE, VehicleInfo[GetPlayerVirtualWorld(playerid)][vID]) > 0) {
                PlayerAME(playerid, (VehicleInfo[GetPlayerVirtualWorld(playerid)][vLocked]) ? ("aracýnýn kilidini açar.") : ("aracýný kilitler."));
                if(!VehicleInfo[GetPlayerVirtualWorld(playerid)][vLocked])
                    Player_Info(playerid, "Araciniz ~r~kilitlendi.");
                else
                    Player_Info(playerid, "Aracinizin ~g~kilidi acildi.");
                VehicleInfo[GetPlayerVirtualWorld(playerid)][vLocked] = !VehicleInfo[GetPlayerVirtualWorld(playerid)][vLocked];
                SetVehicleParamsEx(GetPlayerVirtualWorld(playerid), VehicleInfo[GetPlayerVirtualWorld(playerid)][vEngine], VehicleInfo[GetPlayerVirtualWorld(playerid)][vLights], VEHICLE_PARAMS_OFF, VehicleInfo[GetPlayerVirtualWorld(playerid)][vLocked], VehicleInfo[GetPlayerVirtualWorld(playerid)][vBonnet], VehicleInfo[GetPlayerVirtualWorld(playerid)][vBoot], VehicleInfo[GetPlayerVirtualWorld(playerid)][vObje]);
                return 1;
            }
        }
        if(id != -1 && IsPlayerNearestVehicle(playerid, id)) vid = id;

        if(vid == -1)return 1;
        if(Vehicle_IsOwner(playerid, vid, false) == 0) return HataMesajiC(playerid, "Sana ait olmayan araçlarda bunu yapamazsýn.");

        if(!IsABike(vid) && !IsAMotorBike(vid) && VehicleInfo[vid][vDoorHealth] <= 0.0)return
            SunucuMesaji(playerid, "Bu aracýn kapýlarý hasarlý olduðu için kilidini açamazsýnýz.");

        if(IsABike(vid) && GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
        {
            PlayerAME(playerid, (VehicleInfo[vid][vLocked]) ? ("bisikletinin zincirini açar.") : ("bisikletini zincirler."));

            if(!VehicleInfo[vid][vLocked])
                Player_Info(playerid, "Bisiklet ~r~kilitlendi.");
            else
                Player_Info(playerid, "Bisikletin ~g~kilidi acildi.");
        }
        else
        {
            PlayerAME(playerid, (VehicleInfo[vid][vLocked]) ? ("aracýnýn kilidini açar.") : ("aracýný kilitler."));
            if(!VehicleInfo[vid][vLocked])
                Player_Info(playerid, "Araciniz ~r~kilitlendi.");
            else
                Player_Info(playerid, "Aracinizin ~g~kilidi acildi.");
        }
        
        VehicleInfo[vid][vLocked] = !VehicleInfo[vid][vLocked];
        SetVehicleParamsEx(vid, VehicleInfo[vid][vEngine], VehicleInfo[vid][vLights], VEHICLE_PARAMS_OFF, VehicleInfo[vid][vLocked], VehicleInfo[vid][vBonnet], VehicleInfo[vid][vBoot], VehicleInfo[vid][vObje]);
    }
    else if(!strcmp(option, "parksatinal", true))
    {
        if(id != -1 && IsPlayerNearestVehicle(playerid, id)) vid = id;

        if(vid == -1)return 1;
        if(Vehicle_IsOwner(playerid, vid, false) == 0) return 1;

        if(PlayerInfo[playerid][pCash] < 250) return
            SunucuMesaji(playerid, "Yeterli paran yok. ($250)");

        PlayerInfo[playerid][pParkingRequest] = vid;
        SendFormattedMessage(playerid, COLOR_LIGHTBLUE, "%s (ID: %d - %s) model aracýný $250 karþýlýðýnda park(spawn) noktasýný deðiþtirmek istediðine", GetVehicleModelName(VehicleInfo[vid][vModel]), vid, VehicleInfo[vid][vPlate]);
        SendClientMessage(playerid, COLOR_LIGHTBLUE, "emin misin? (\"/kabulet parksatinal\")");
    }
    else if(!strcmp(option, "sistemesat", true))
    {
        if(id != -1 && IsPlayerNearestVehicle(playerid, id)) vid = id;

        if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return HataMesajiC(playerid, "Araçta sürücü olmalýsýnýz.");
        if(Commodities_GetSlotCount(vid) > 0) return HataMesajiC(playerid, "Bu araçta koli bulunuyor, bunu yapamazsýnýz.");

        if(vid == -1)return 1;
        if(Vehicle_IsOwnerLead(playerid, vid, true) == 0)return 1;

        if(VehicleInfo[vid][vVergi] >= 1000) return SunucuMesaji(playerid, "Bu araçta vergi borcu var, bu iþlemi yapamazsýnýz.");

        Dialog_Show(playerid, DialogSell, DIALOG_STYLE_INPUT, "Sisteme Sat", "%s model aracýný $%d karþýlýðýnda sisteme satmak istediðine emin misin?\nAþaðýdaki boþluða iþlemi onaylamak için 'EVET' yazýn.", "Onayla", "Ýptal", GetVehicleModelName(VehicleInfo[vid][vModel]), VehicleInfo[vid][vPrice] * SunucuBilgi[ASSY] / 100 - VehicleInfo[vid][vKMGosteren] / 2 - VehicleInfo[vid][vVergi]);
    }
    else if(!strcmp(option, "vergiode", true))
    {
        if(id != -1 && IsPlayerNearestVehicle(playerid, id)) vid = id;
        if(vid == -1)return 1;
        if(Vehicle_IsOwnerLead(playerid, vid, true) == 0)return 1;
        
        if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
            return HataMesajiC(playerid, "Bu komutu kullanmak için araçta sürücü olmalýsýnýz.");

        if(VehicleInfo[vid][vVergi] <= 0)
                return HataMesajiC(playerid, "Zaten vergi borcunuz bulunmuyor.");

        if(PlayerInfo[playerid][pCash] < VehicleInfo[vid][vVergi])
            return HataMesajiC(playerid, "Yeterli paranýz yok.");

        OAC_GivePlayerMoney(playerid, -VehicleInfo[vid][vVergi]);
        BasariMesaji(playerid, "Araç vergisini baþarýyla ödediniz. (%s)", ReturnDate());
        VehicleInfo[vid][vVergi] = 0;
        SaveVehicleElements(vid);
    }
    else if(!strcmp(option, "sat", true))
    {
        if(id != -1 && IsPlayerNearestVehicle(playerid, id)) vid = id;

        if(Commodities_GetSlotCount(vid) > 0) return HataMesajiC(playerid, "Bu araçta koli bulunuyor, bunu yapamazsýnýz.");

        if(vid == -1)return 1;
        if(Vehicle_IsOwnerLead(playerid, vid, true) == 0)return 1;

        if(VehicleInfo[vid][vVergi] >= 1000) return SunucuMesaji(playerid, "Bu araçta vergi borcu var, bu iþlemi yapamazsýnýz.");

        PlayerInfo[playerid][pSelectedVehicle] = vid;
        Dialog_Show(playerid, DialogVSellTo, DIALOG_STYLE_INPUT, "Kiþiye sat", "Satmak istediðiniz kiþinin ID'sini ve satmak istediðiniz fiyatý girin. (Örnek: 5 360000)", "Ýleri", "Ýptal");
    }
    else if(!strcmp(option, "envanter",true) || !strcmp(option, "env", true) || !strcmp(option, "inv", true))
    {
        if(id != -1 && IsPlayerNearestVehicle(playerid, id)) vid = id;
        if(vid == -1) return HataMesajiC(playerid, "Yakýnýnýzda bir araç bulunamadý.");
        if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !VehicleInfo[vid][vEngine]) return HataMesajiC(playerid, "Bu komutu kullanmak için motoru açýk bir aracýn sürücü koltuðunda olmalýsýn.");
        if(PlayerInfo[playerid][pLevel] < 2) return HataMesajiC(playerid, "Bu iþlemi yapabilmek için en az 2 seviye olmalýsýnýz.");

        if(VehicleInfo[vid][vLocked])return
            SunucuMesajiC(playerid, "Araç kilitli.");

        if(PlayerInfo[playerid][pFactionDuty])return
            SunucuMesajiC(playerid, "Ýþbaþýnda envanterine eriþemezsin.");

        Trunk_ShowItems(playerid, vid);
    }
    else if(!strcmp(option, "kaput", true))
    {
        if(vid == -1)return 1;
        if(Vehicle_IsOwnerLead(playerid, vid, false) == 0)return 1;
        if(VehicleInfo[vid][vLocked])return
            SunucuMesajiC(playerid, "Araç kilitli.");

        VehicleInfo[vid][vBonnet] = !VehicleInfo[vid][vBonnet];
        SunucuMesaji(playerid, "Aracýn kaputu %s.", (VehicleInfo[vid][vBonnet]) ? ("açýldý") : ("kapandý"));

        SetVehicleParamsEx(vid, VehicleInfo[vid][vEngine], VehicleInfo[vid][vLights], VEHICLE_PARAMS_OFF, VehicleInfo[vid][vLocked], VehicleInfo[vid][vBonnet], VehicleInfo[vid][vBoot], VehicleInfo[vid][vObje]);
    }
    else if(!strcmp(option, "bagaj", false))
    {
        if(vid == -1)return 1;
        if(Vehicle_IsOwnerLead(playerid, vid, false) == 0)return 1;
        if(VehicleInfo[vid][vLocked])return
            SunucuMesajiC(playerid, "Araç kilitli.");

        VehicleInfo[vid][vBoot] = !VehicleInfo[vid][vBoot];
        SunucuMesaji(playerid, "Aracýn bagajý %s.", (VehicleInfo[vid][vBoot]) ? ("açýldý") : ("kapandý"));

        SetVehicleParamsEx(vid, VehicleInfo[vid][vEngine], VehicleInfo[vid][vLights], VEHICLE_PARAMS_OFF, VehicleInfo[vid][vLocked], VehicleInfo[vid][vBonnet], VehicleInfo[vid][vBoot], VehicleInfo[vid][vObje]);
    }
    else if(!strcmp(option, "benzindoldur", true))
    {
        if(PlayerInfo[playerid][pFuelTimer] > 0)
            return HataMesajiC(playerid, "Þu anda bu iþlemi zaten gerçekleþtiriyorsunuz.");

        new fuel_station = GetNearestService(playerid, FUEL_STATION);

        if(fuel_station == -1)
            return HataMesajiC(playerid, "Benzin istasyonunda deðilsin veya satýþlar kapalý.");

        if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER || IsABike(vid) || VehicleInfo[vid][vEngine])return
            SunucuMesaji(playerid, "Bu komutu kullanmak için motoru kapalý bir araçta sürücü olmalýsýn.");

        if(id <= 0) return KullanimMesajiC(playerid, "/arac benzindoldur [miktar]");
        if(id > 100) return HataMesajiC(playerid, "Geçersiz parametre.");

        if(!BuildingInfo[fuel_station][bProducts]) return SunucuMesaji(playerid, "Bu benzin istasyonundaki stok tükendi.");

        if(VehicleInfo[vid][vFuel] == 100)
            return HataMesajiC(playerid, "Aracýn deposu zaten dolu.");

        if(VehicleInfo[vid][vFuel] + id > 100) return HataMesajiC(playerid, "Hatalý deðer girdiniz, depo bu kadar fazla benzin alamaz.");
        PlayerInfo[playerid][pOldFuel] = VehicleInfo[vid][vFuel];
        
        if(id <= 5)
            PlayerInfo[playerid][pFuelTimer] = id;
        else
            PlayerInfo[playerid][pFuelTimer] = 5;
            
        TogglePlayerControllable(playerid, false);
        PlayerInfo[playerid][pFreezed] = 1;
        PlayerInfo[playerid][pAlincakBenzin] = id;
        BasariMesaji(playerid, "Þu anda aracýnýza %d litre benzin dolduruyorsunuz, lütfen bekleyin.", id);
        Player_Info(playerid, "Benzin ~y~doluyor~w~.");
    }
    else if(!strcmp(option, "benzinkutusu", true))
    {
        if(id != -1 && IsPlayerNearestVehicle(playerid, id)) vid = id;
        if(vid == -1)return 1;

        if(VehicleInfo[vid][vFuel] == 100)return
            SunucuMesaji(playerid, "Benzin zaten dolu.");

        new has_tank = Inventory_HasItem(playerid, "Benzin Kutusu", ITEM_BIZ);

        if(has_tank == -1)return
            SunucuMesaji(playerid, "Benzin kutunuz yok.");

        Inventory_DecraseAmount(playerid, has_tank);

        VehicleInfo[vid][vFuel] += 10;
        if(VehicleInfo[vid][vFuel] >= 100)
        {
            VehicleInfo[vid][vFuel] = 100;
        }
        SunucuMesaji(playerid, "Benzin kutusu kullanýldý.");
    }
    else if(!strcmp(option, "liste", true)) Vehicle_ShowList(playerid, playerid);
    else if(!strcmp(option, "park", true))
    {
        if(id != -1 && IsPlayerNearestVehicle(playerid, id)) vid = id;
        //if(VehicleInfo[vid][vRehine][0] != -1 || VehicleInfo[vid][vRehine][1] != -1 || VehicleInfo[vid][vRehine][2] != -1) return HataMesaji(playerid, "Araçta rehine varken aracý park edemezsin.");
        if(VehicleInfo[vid][vFaction] != INVALID_VEHICLE_ID) return HataMesajiC(playerid, "Bu aracý gizleyemezsin.");

        if(vid == -1)return 1;
        if(Vehicle_IsOwner(playerid, vid, false) == 0) return 1;

        if(!IsPlayerInRangeOfPoint(playerid, 5.0, VehicleInfo[vid][vSpawnPosX], VehicleInfo[vid][vSpawnPosY], VehicleInfo[vid][vSpawnPosZ])) {
            SunucuMesaji(playerid, "Aracýnýzýn park yerine yakýn olmalýsýnýz. Aracýnýz park yeri haritanýzda iþaretlendi.");
            SetPlayerCheckpoint(playerid, VehicleInfo[vid][vSpawnPosX], VehicleInfo[vid][vSpawnPosY], VehicleInfo[vid][vSpawnPosZ], 4.0);
            SetPVarInt(playerid, "AracParkCP", 1);
            return 1;
        }

        if(Commodities_GetSlotCount(vid) > 0) return HataMesajiC(playerid, "Bu araçta koli bulunuyor, park edemezsiniz.");

        SunucuMesaji(playerid, "%s (ID: %d) model aracýnýz saklandý.", GetVehicleModelName(VehicleInfo[vid][vModel]), vid);
        SaveVehicle(vid);
        Vehicle_Despawn(vid);
        for(new i; i < 4; i++)
        {
            AracYolcu[vid][i] = -1;
            AracKoltuk[vid][i] = 0;
        }
    }
    else if(!strcmp(option, "respawn", true))
    {
        if(id != -1 && IsPlayerNearestVehicle(playerid, id)) vid = id;

        if(vid == -1)return 1;

        if(PlayerInfo[playerid][pFaction] != VehicleInfo[vid][vFaction])
            return SunucuMesaji(playerid, "Bu araç faction aracý deðil.");

        if(IsPlayerInRangeOfPoint(playerid, 5.0, VehicleInfo[vid][vSpawnPosX], VehicleInfo[vid][vSpawnPosY], VehicleInfo[vid][vSpawnPosZ]) < 1)
        {
            AC_SetPlayerCheckpoint(playerid, VehicleInfo[vid][vSpawnPosX], VehicleInfo[vid][vSpawnPosY], VehicleInfo[vid][vSpawnPosZ], 5.0);
            return HataMesajiC(playerid, "Aracýnýn respawn alaný haritanda iþaretlendi. (Komutu alanda kullanýn.)");
        }

        new slot = Commodities_GetSlotCount(vid);
        if(slot > 0) return HataMesajiC(playerid, "Bu araçta koli bulunuyor, respawn edemezsiniz.");
        SunucuMesaji(playerid, "%s [ID: %d] respawnlandý.", GetVehicleModelName(VehicleInfo[vid][vModel]), vid);
        if(Faction_GetType(PlayerInfo[playerid][pFaction]) == POLICE || Faction_GetType(PlayerInfo[playerid][pFaction]) == MEDICAL || Faction_GetType(PlayerInfo[playerid][pFaction]) == GOVERNMENT) Vehicle_Respawn2(vid);
        else Vehicle_Respawn(vid);
    }
    else if(!strcmp(option, "gps", true))
    {
        if(id <= -1 || !id)return
            KullanimMesajiC(playerid, "/arac gps [slot]");

        if(GetPlayerVehicleCount(playerid) < id)return
            SunucuMesajiC(playerid, "Bu slotta araç bulunmuyor.");
        mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT * FROM vehicles WHERE owner_id = '%d'", PlayerInfo[playerid][pID]);
        mysql_tquery(ourConnection, queryx, "OnVFindSearch", "dd", playerid, id);
    }
    else if(!strcmp(option, "getir", true))
    {
        if(PlayerInfo[playerid][AracSpawn])
            return 1;
            
        if(id <= -1 || !id)return
            KullanimMesajiC(playerid, "/arac getir [slot]");

        if(GetPlayerVehicleCount(playerid) < id)return
            SunucuMesajiC(playerid, "Bu slotta araç bulunmuyor.");

        new spawnedVehiclesLimit = (!PlayerInfo[playerid][pPremium]) ? MAX_SPAWNED_VEH : (PlayerInfo[playerid][pPremium] == 1) ? MAX_SPAWNED_VEH_BRONZE : (PlayerInfo[playerid][pPremium] == 2) ? MAX_SPAWNED_VEH_SILVER : (PlayerInfo[playerid][pPremium] == 3) ? MAX_SPAWNED_VEH_GOLD : (PlayerInfo[playerid][pPremium] == 4) ? MAX_SPAWNED_VEH_PLATINUM : MAX_SPAWNED_VEH_DIAMOND;

        if(Vehicle_SpawnedCount(playerid) >= spawnedVehiclesLimit)return
            HataMesaji(playerid, "%d adet aracýn zaten spawnlý.", spawnedVehiclesLimit);
            
        PlayerInfo[playerid][AracSpawn] = true;
        mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT * FROM vehicles WHERE owner_id = '%d'", PlayerInfo[playerid][pID]);
        mysql_tquery(ourConnection, queryx, "OnVSpawnSearch", "dd", playerid, id);
    }
    else if(!strcmp(option, "olusum", true))
    {
        if(PlayerInfo[playerid][pFaction] == -1 || PlayerInfo[playerid][pRank] > 3)return
            SunucuMesajiC(playerid, "Bu özelliði kullanamazsýn.");

        if(vid == -1)return 1;
        if(Vehicle_IsOwnerLead(playerid, vid, true) == 0)return 1;

        VehicleInfo[vid][vFaction] = (VehicleInfo[vid][vFaction] == INVALID_VEHICLE_ID) ? PlayerInfo[playerid][pFaction] : INVALID_VEHICLE_ID;

        Player_Info(playerid, (VehicleInfo[vid][vFaction] != INVALID_VEHICLE_ID) ?  ("Arac ~g~olusuma eklendi~w~.") : ("Arac ~r~olusumdan ayrildi~w~."), true);

        SaveVehicle(vid);
    }
    else if(!strcmp(option, "bilgi", true))
    {
        if(vid == -1 || GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return HataMesajiC(playerid, "Bu komutu anahtarýna ya da kendisine sahip olduðun araçlarda kullanabilirsin.");
        if(Vehicle_IsOwnerLead(playerid, vid, false) == 0) return HataMesajiC(playerid, "Bu komutu anahtarýna ya da kendisine sahip olduðun araçlarda kullanabilirsin.");

        BasariMesaji(playerid, "____________________[%s | ID: %d]____________________", GetVehicleModelName(VehicleInfo[vid][vModel]), vid);
        SunucuMesaji(playerid, "Motor Ömrü: %.1f% | Akü Ömrü: %.1f% | Kapýnýn Ömrü: %.1f% | KM: %d", VehicleInfo[vid][vEngineHealth], VehicleInfo[vid][vBatteryHealth], VehicleInfo[vid][vDoorHealth], VehicleInfo[vid][vKMGosteren]);
        SunucuMesaji(playerid, "Birinci araç rengi: #%d | Ýkinci araç rengi: #%d | Plaka: %s", VehicleInfo[vid][vFirstColor], VehicleInfo[vid][vSecondColor], VehicleInfo[vid][vPlate]);
        SunucuMesaji(playerid, "Alarm Seviyesi: %d", VehicleInfo[vid][vAlarm]);
        if(VehicleInfo[vid][vModel] == 525) SunucuMesaji(playerid, "Tamir Parçalarý: %d", VehicleInfo[vid][vComponents]);
        BasariMesaji(playerid, "____________________[%s | ID: %d]____________________", GetVehicleModelName(VehicleInfo[vid][vModel]), vid);
    }
    else if(!strcmp(option, "ceza", true))
    {
        if(vid == -1)return HataMesajiC(playerid, "Bu komutu anahtarýna ya da kendisine sahip olduðun araçlarda kullanabilirsin.");
        if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)return HataMesajiC(playerid, "Bu komutu anahtarýna ya da kendisine sahip olduðun araçlarda kullanabilirsin.");
        if(Vehicle_IsOwnerLead(playerid, vid, true) == 0)return HataMesajiC(playerid, "Bu komutu anahtarýna ya da kendisine sahip olduðun araçlarda kullanabilirsin.");
        SetPVarInt(playerid, "AracCeza", 1);
        mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT * FROM police_fine_records WHERE vehicle_id = '%d'", VehicleInfo[vid][vID]);
        mysql_tquery(ourConnection, queryx, "OnVFinesSearch", "dd", playerid, id);
    }
    else if(!strcmp(option, "radyo", true))
    {
        if(!IsPlayerInAnyVehicle(playerid) || IsABike(vid))
            return HataMesajiC(playerid, "Bu komutu kullanmak için araçta olmalýsýn.");

        ShowRadioLinks(playerid, 1);
    }
    else if(!strcmp(option, "radyokapat", true))
    {
        if(!IsPlayerInAnyVehicle(playerid) || IsABike(vid))
            return HataMesajiC(playerid, "Bunu yapmak için bir araçta oturmalýsýn.");

        if(!VehicleInfo[vid][vStereo])
        return HataMesajiC(playerid, "Radyo zaten kapalý.");

        VehicleInfo[vid][vStereo] = false;

        foreach(new i: Player) if(IsPlayerInAnyVehicle(i) && GetPlayerVehicleID(i) == vid)
            StopAudioStreamForPlayer(i);

        SunucuMesaji(playerid, "Radyo kapalý.");
        PlayerAME(playerid, "radyo istasyonunu deðiþtirir.");
    }
    else if(!strcmp(option, "anahtar", true))
    {
        if(vid == -1)return 1;
        if(Vehicle_IsOwnerLead(playerid, vid, true) == 0) return 1;

        if(id == -1)return
            SendFormattedMessage(playerid, COLOR_GREY, "/arac anahtar [id/isim]");

        if(!IsPlayerConnected(id) || playerid == id)return
            HataMesajiC(playerid, "Geçersiz ID.");

        if(!ProxDetectorS(3.0, playerid, id))return
            SunucuMesaji(playerid, "Bu oyuncuya yakýn deðilsin.");

        SunucuMesaji(id, "Araç yedek anahtarlarýný aldýn.");
        SunucuMesaji(playerid, "%s yedek anahtar teklifini kabul etti.", ReturnRoleplayName(id));

        Key_Give(id, KEY_VEHICLE, VehicleInfo[vid][vID]);
    }
    else if(!strcmp(option, "anahtarsifirla", true))
    {
        if(vid == -1)return 1;
        if(Vehicle_IsOwnerLead(playerid, vid, true) == 0) return 1;

        Key_Remove(KEY_VEHICLE, VehicleInfo[vid][vID]);
        SendClientMessageEx(playerid, COLOR_GREEN, "Araç kilidini deðiþtirdin. Önceden anahtara sahip kiþiler bunu kullanamayacak.");
    }
    else if(!strcmp(option, "gelisim", true))
    {
        if(vid == -1)return 1;
        if(Vehicle_IsOwnerLead(playerid, vid, true) == 0) return 1;

        Dialog_Show(playerid, DialogVehicleUpgradeList, DIALOG_STYLE_LIST, "Araç Güvenliði", "Alarm\nKilit\nZýrh", "Sonraki", "Geri");
    }
    else if(!strcmp(option, "modifiyekaldir", true))
    {
        if(!GetPlayerVehicleID(playerid))
            return HataMesajiC(playerid, "Herhangi bir araçta deðilsin.");

        new xvid = GetPlayerVehicleID(playerid);

        if(!Vehicle_IsOwnerLead(playerid, xvid, true))
            return HataMesajiC(playerid, "Bu araç size ait deðil.");

        new string[512] = "{FF6347}>> Sýfýrla{FFFFFF}\n{FF6347}Boyaiþi Kaldýr{FFFFFF}\n";
        new component;
        new strName[32];
        new count;

        for(new j; j < MAX_TUNING_COMPONENTS; j++)
        {
            strName = "Boþ"; component = VehicleInfo[vid][vTuning][j];
            if(component)strmid(strName, GetComponentName(component), 0, 32);
            format(string, sizeof(string), "%sSlot %d: %s (#%d)\n", string, j, strName, component);
            count++;
        }

        if(!count && VehicleInfo[vid][vPaintjob] == 3)return
            SunucuMesajiC(playerid, "Bu araçta boya veya boya iþi bulunmuyor.");

        Dialog_Show(playerid, DialogRemoveComponent, DIALOG_STYLE_LIST, "Modifiye kaldýr", string, "Kaldýr", "Ýptal");
    }
    else if(!strcmp(option, "plakakaldir", true))
    {
        if(vid == -1)return 1;
        if(Vehicle_IsOwnerLead(playerid, vid, true) == 0)return 1;

        if(GetPlateZone(playerid) == -1)return
            SunucuMesajiC(playerid, "Yasadýþý plaka yerinde deðilsin.");

        if(VehicleInfo[vid][vUnregistered])return
            SunucuMesajiC(playerid, "Zaten aracýndan plakayý çýkartmýþsýn.");

        SendClientMessageEx(playerid, COLOR_WHITE, "\"/arac plakakaldir\" komutuyla aracýnýn plakasýný kaldýrmak mý istiyorsun?");
        SendClientMessageEx(playerid, COLOR_WHITE, "Bundan eminsen \"/kabulet plakaislem\" komutunu kullan.");
        SendClientMessageEx(playerid, COLOR_ERROR, "Bu eylem gerçekleþmesi durumunda $3000 ödeyeceksin.");

        PlayerInfo[playerid][pPlateOption] = 0;
        PlayerInfo[playerid][pPlateVeh] = vid;
    }
    else if(!strcmp(option, "plakaekle", true))
    {
        if(vid == -1)return 1;
        if(Vehicle_IsOwnerLead(playerid, vid, true) == 0)return 1;

        if(GetPlateZone(playerid) == -1)return
            SunucuMesajiC(playerid, "Yasadýþý plaka yerinde deðilsin.");

        if(PlayerInfo[playerid][pPlateVeh] != -1 && PlayerInfo[playerid][pPlateVeh] != vid)return
            SunucuMesajiC(playerid, "Zaten baþka bir aracýn plakasýyla etkileþime geçiyorsun.");

        if(!VehicleInfo[vid][vUnregistered])return
            SunucuMesaji(playerid, "Bu araç zaten kayýtlý.");

        PlayerInfo[playerid][pPlateVeh] = vid;

        Dialog_Show(playerid, DialogRegisterVeh, DIALOG_STYLE_LIST, "Araç kayýt", "Yeni bir plaka oluþtur\t\t$6000\nÖnceki plakaya dön\t$1000", "Seç", "Ýptal");
    }
    else return
        HataMesajiC(playerid, "Geçersiz parametre.");

    //if(vid != -1) VehicleInfo[vid][vSpawnExpires] = gettime() + (60 * 30);

    return 1;
}
CMD:isyerlerim(playerid, params[])
{
    pc_cmd_karakter(playerid, params);
    SunucuMesajiC(playerid, "/isyerlerim diye bir komut yok, iþletmelerinizi /karakter üzerinden görebilirsiniz.");
    SendFormattedMessage(playerid, COLOR_YELLOW, "Yapay Zeka: {FFFFFF}Þuan için senin yerine /karakter komutunu ben kullandým (:");
}
CMD:evlerim(playerid, params[])
{
    pc_cmd_karakter(playerid, params);
    SunucuMesajiC(playerid, "/evlerim diye bir komut yok, evlerinizi /karakter üzerinden görebilirsiniz.");
    SendFormattedMessage(playerid, COLOR_YELLOW, "Yapay Zeka: {FFFFFF}Þuan için senin yerine /karakter komutunu ben kullandým (:");
}

CMD:araclarim(playerid, params[])return pc_cmd_arac(playerid, "liste");
CMD:motor(playerid, params[])return pc_cmd_arac(playerid, "motor");
CMD:kilit(playerid, params[])return pc_cmd_arac(playerid, "kilit");
CMD:v(playerid, params[])return pc_cmd_arac(playerid, params);
CMD:duzkontak(playerid, params[])
{
    if(!IsPlayerInAnyVehicle(playerid))return
        SunucuMesaji(playerid, "Bu komutu kullanmak için araçta olmalýsýnýz.");

    if(PlayerInfo[playerid][pStealTime] <= 0)return
        SunucuMesaji(playerid, "Araç çalmayý denemiyorsun.");

    if(PlayerInfo[playerid][pLevel] < 10) return
        SunucuMesaji(playerid, "Seviye 10 ve üstü kullanýcýlar bunu yapabilirler.");

    if(InSafeZone(playerid)) return HataMesajiC(playerid, "Bu bölgede bu sistemden yararlanamazsýnýz.");

    new word[64];

    if(sscanf(params, "s[64]", word) || strlen(params) > 64)return
        KullanimMesajiC(playerid, "/duzkontak [parola]");

    new vid = GetPlayerVehicleID(playerid);
    
    if(VehicleInfo[vid][vDoorLevel] >= 4)
        return HataMesajiC(playerid, "Bu araç çalýnamaz, son teknoloji güvenlik sistemiyle korunuyor.");

    if(VehicleInfo[vid][vModel] == 416) return HataMesajiC(playerid, "Bu araca düzkontak yapamazsýn.");
    
    if(VehicleInfo[vid][vIAKS] > 0) return HataMesajiC(playerid, "Sistemden kiralanan araçlar çalýnamaz.");

    DestroyDynamic3DTextLabelEx(PlayerInfo[playerid][pNameTag]);
    PlayerInfo[playerid][pNameTag] = CreateDynamic3DTextLabel("(( Kullanýcý þu anda düz kontak yapýyor. ))", COLOR_ADMIN, 0, 0, 0.5, 30.0, playerid, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0);

    printf("[%d - %d] word %s stealscramble %s scramble %s", vid, VehicleInfo[vid][vID], word, PlayerInfo[playerid][pStealScrambleWord]);
    if(strcmp(word, PlayerInfo[playerid][pStealScrambleWord], false) == 0)
    {
        PlayerInfo[playerid][pStealCorrect]++;

        if(PlayerInfo[playerid][pStealCorrect] >= STEALVEH_SUCCESS)
            return DestroyDynamic3DTextLabelEx(PlayerInfo[playerid][pNameTag]), pc_cmd_arac(playerid, "motor"), printf("[%s] %s: %s model (%d) aracý çalmayý baþardý.", ReturnDate(), ReturnRoleplayName(playerid), GetVehicleModelName(VehicleInfo[vid][vModel]), VehicleInfo[vid][vID]);
    }
    else PlayerInfo[playerid][pStealWrong]++;

    if(floatround(STEALVEH_MISTAKES / PlayerInfo[playerid][pStealLevel]) <= PlayerInfo[playerid][pStealWrong])
    {
        PlayerInfo[playerid][pStealCorrect] = 0;
        PlayerInfo[playerid][pStealWrong] = 0;
        PlayerInfo[playerid][pStealTime] = -1;
        TextStealVeh_Hide(playerid);
        SunucuMesaji(playerid, "Çok fazla kelime kaçýrdýðýn için motoru açamadýn.");
        Alarm_VehicleTurnOn(playerid, vid);
        PlayerInfo[playerid][pStealWrong] = 0;
        PlayerInfo[playerid][pStealCorrect] = 0;
        DestroyDynamic3DTextLabelEx(PlayerInfo[playerid][pNameTag]);
    }
    else
    {
        // new query[128];
        mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT * FROM scramble_words WHERE level = '%d'", PlayerInfo[playerid][pStealLevel]);
        mysql_tquery(ourConnection, queryx, "OnScrambleWordSearch", "d", playerid);
    }

    return 1;
}

flags:removetag(CMD_Marvellous);
CMD:removetag(playerid, params[])
{
    new id;

    if(sscanf(params, "u", id))return
        KullanimMesajiC(playerid, "/removetag [id/isim]");

    if(!IsPlayerConnected(id) || !PlayerInfo[id][pLogged])return
        HataMesajiC(playerid, "Geçersiz ID.");

    DestroyDynamic3DTextLabelEx(PlayerInfo[id][pNameTag]);
    return 1;
}

flags:ccall(CMD_iglead);
CMD:ccall(playerid, params[])
{
    foreach(new i : Player)
    {
        ClearChat(i, 25);
    }
    SendAdminAlert(false, COLOR_ADMIN, "AdmCmd: %s tarafýndan tüm oyuncularýn sohbet ekraný temizlendi.", PlayerInfo[playerid][pUsername]);
    return 1;
}

CMD:yaracmenu(playerid, params[])
{
    Dialog_Show(playerid, DialogAracYaratma, DIALOG_STYLE_MSGBOX, "Araç Yaratma Menüsü", "SA-RP Yönetici Araç Yaratma Menüsü'ne hoþ geldiniz.\n{FFFFFF}Devam etmek için lütfen bir seçenek seçin.", "{199691}Yarat", "{199691}Düzenle");
    return 1;
}

CMD:yarac(playerid, params[])
{
    new model[32],
        COLOR_one,
        COLOR_two,
        siren;

    if(sscanf(params, "s[32]ddD(0)", model, COLOR_one, COLOR_two, siren))return
        KullanimMesajiC(playerid, "/yarac [model] [birinci renk] [ikinci renk] [siren(opsiyonel)]");

    new modelid = (GetVehicleID(model) != -1) ? GetVehicleID(model) : strval(model),
        Float:x,
        Float:y,
        Float:z,
        Float:a,
        vid;

    if(modelid < 400 || modelid > 611)return
        SunucuMesaji(playerid, "Varolmayan araç.");

    GetPlayerPos(playerid, x, y, z);
    GetPlayerFacingAngle(playerid, a);

    vid = CreateVehicle(modelid, x, y+2.0, z, a, COLOR_one, COLOR_two, -1, siren);

    VehicleInfo[vid][vPaintjob] = 3;
    VehicleInfo[vid][vDestroyed] = false;
    VehicleInfo[vid][vEngineHealth] = 1000.0;
    VehicleInfo[vid][vBatteryHealth] = 1000.0;
    VehicleInfo[vid][vHealth] = 1000.0;
    VehicleInfo[vid][vMaxHealth] = 1000.0;
    VehicleInfo[vid][vDoorHealth] = 120.0;
    VehicleInfo[vid][vEngine] = 1;
    VehicleInfo[vid][vModel] = modelid;
    VehicleInfo[vid][vFaction] = INVALID_VEHICLE_ID;
    VehicleInfo[vid][vJob] = -1;
    VehicleInfo[vid][vFirstColor] = COLOR_one;
    VehicleInfo[vid][vSecondColor] = COLOR_two;
    VehicleInfo[vid][vSpawnPosX] = x;
    VehicleInfo[vid][vSpawnPosY] = y;
    VehicleInfo[vid][vSpawnPosZ] = z;
    VehicleInfo[vid][vSpawnPosA] = a;
    VehicleInfo[vid][vELM] = false;
    VehicleInfo[vid][vFuel] = 100;
    VehicleInfo[vid][vScript] = vid;
    VehicleInfo[vid][vOwner] = PlayerInfo[playerid][pID];
    VehicleInfo[vid][vWorld] = GetPlayerVirtualWorld(playerid);
    VehicleInfo[vid][vInterior] = GetPlayerInterior(playerid);
    //VehicleInfo[vid][vRehine][0] = -1;
    //VehicleInfo[vid][vRehine][1] = -1;
    //VehicleInfo[vid][vRehine][2] = -1;
    VehicleInfo[vid][vCeset][0] = -1;
    VehicleInfo[vid][vCeset][1] = -1;
    VehicleInfo[vid][vCeset][2] = -1;
    VehicleInfo[vid][vSigortaSeviyesi] = 0;
    VehicleInfo[vid][vObje] = VEHICLE_PARAMS_OFF;
    VehicleInfo[vid][vVergi] = 0;
    Vehicle_Respray(vid);

    SetVehicleVirtualWorld(vid, VehicleInfo[vid][vWorld]);
    LinkVehicleToInterior(vid, VehicleInfo[vid][vInterior]);

    SendAdminAlert(false, COLOR_ADMIN, "AdmCmd: %s, %d ID'sinde bir araç oluþturur.", ReturnRoleplayName(playerid), vid);

    LogYaz(playerid, "/yarac", -1, vid);

    Iter_Add(Vehicles, vid);
    // new query[500];
    mysql_format(ourConnection, queryx, sizeof(queryx), "INSERT INTO vehicles (world, interior, job, plate, model, color0, color1, faction, pos_x, pos_y, pos_z, pos_a, health, owner_id) VALUES ('%d', '%d', '%d', '%e', '%d', '%d', '%d', '%d', '%f', '%f', '%f', '%f', '1000.0', '%d')",
    VehicleInfo[vid][vWorld],
    VehicleInfo[vid][vInterior],
    VehicleInfo[vid][vJob],
    VehicleInfo[vid][vPlate],
    VehicleInfo[vid][vModel],
    VehicleInfo[vid][vFirstColor],
    VehicleInfo[vid][vSecondColor],
    VehicleInfo[vid][vFaction],
    VehicleInfo[vid][vSpawnPosX],
    VehicleInfo[vid][vSpawnPosY],
    VehicleInfo[vid][vSpawnPosZ],
    VehicleInfo[vid][vSpawnPosA],
    VehicleInfo[vid][vOwner]);
    mysql_tquery(ourConnection, queryx, "OnQueryFinished", "dd", vid, THREAD_CREATE_VEHICLE);
    VehicleInfo[vid][vTemporary] = 0;
    return 1;
}
CMD:vveritabanikayit(playerid, params[])
{
    if(!IsPlayerInAnyVehicle(playerid))return
        HataMesajiC(playerid, "Herhangi bir araçta deðilsin.");

    new vid = GetPlayerVehicleID(playerid);

    if(!VehicleInfo[vid][vTemporary])return
        SunucuMesaji(playerid, "Araç zaten veritabanýna kayýtlý.");

    VehicleInfo[vid][vEngine] = 0;
    VehicleInfo[vid][vLights] = 0;
    VehicleInfo[vid][vBoot] = 0;
    VehicleInfo[vid][vBonnet] = 0;
    SetVehicleParamsEx(vid, VEHICLE_PARAMS_ON, VEHICLE_PARAMS_OFF, VEHICLE_PARAMS_OFF, VEHICLE_PARAMS_OFF, VEHICLE_PARAMS_OFF, VEHICLE_PARAMS_OFF, VehicleInfo[vid][vObje]);

    mysql_format(ourConnection, queryx, sizeof(queryx), "INSERT INTO vehicles (world, interior, job, plate, model, color0, color1, faction, pos_x, pos_y, pos_z, pos_a, health) VALUES ('%d', '%d', '%d', '%e', '%d', '%d', '%d', '%d', '%f', '%f', '%f', '%f', '1000.0')",
    VehicleInfo[vid][vWorld],
    VehicleInfo[vid][vInterior],
    VehicleInfo[vid][vJob],
    VehicleInfo[vid][vPlate],
    VehicleInfo[vid][vModel],
    VehicleInfo[vid][vFirstColor],
    VehicleInfo[vid][vSecondColor],
    VehicleInfo[vid][vFaction],
    VehicleInfo[vid][vSpawnPosX],
    VehicleInfo[vid][vSpawnPosY],
    VehicleInfo[vid][vSpawnPosZ],
    VehicleInfo[vid][vSpawnPosA]);

    mysql_tquery(ourConnection, queryx, "OnQueryFinished", "dd", vid, THREAD_CREATE_VEHICLE);

    VehicleInfo[vid][vTemporary] = 0;

    LogYaz(playerid, "/vveritabanikayit", -1, vid);

    return 1;
}

CMD:vdelete(playerid, params[])
{
    new vid;
    if(IsPlayerInAnyVehicle(playerid)) vid = GetPlayerVehicleID(playerid);

    if(!vid && sscanf(params, "d",vid))return
        KullanimMesajiC(playerid, "/vdelete [id]");

    if(!IsValidVehicle(vid))return
        SunucuMesaji(playerid, "Varolmayan araç.");

    new slot = Commodities_GetSlotCount(vid);
    if(slot > 0) return HataMesajiC(playerid, "Bu araçta koli bulunuyor, aracý silemezsin.");

    // new query[90];
    VehicleInfo[vid][vUnregistered] = 0;
    VehicleInfo[vid][vSpawnPosX] = 0.0;
    VehicleInfo[vid][vSpawnPosY] = 0.0;
    VehicleInfo[vid][vSpawnPosZ] = 0.0;
    VehicleInfo[vid][vSpawnPosA] = 0.0;
    VehicleInfo[vid][vFaction] = INVALID_VEHICLE_ID;
    VehicleInfo[vid][vJob] = -1;
    VehicleInfo[vid][vFirstColor] = 0;
    VehicleInfo[vid][vSecondColor] = 0;
    VehicleInfo[vid][vOwner] = -1;
    VehicleInfo[vid][vLocked] = 0;
    VehicleInfo[vid][vEngine] = 0;
    VehicleInfo[vid][vLights] = 0;
    if(VehicleInfo[vid][vSandik] != -1) {
        SandikSil(VehicleInfo[vid][vSandik]);
        VehicleInfo[vid][vSandik] = -1;
    }
    VehicleInfo[vid][vBonnet] = 0;
    VehicleInfo[vid][vBoot] = 0;
    VehicleInfo[vid][vCallSign] = false;
    if(VehicleInfo[vid][vELM] == true)
        KillTimer(ELMTimer[vid]);
    VehicleInfo[vid][vELM] = false;
    DestroyDynamic3DTextLabelEx(VehicleInfo[vid][vSignText]);
    if(VehicleInfo[vid][vSirenOn] == true)
    {
        DestroyDynamicObjectEx(VehicleInfo[vid][vSirenObject]);
        VehicleInfo[vid][vSirenOn] = false;
    }

    if(!VehicleInfo[vid][vTemporary])
    {
        mysql_format(ourConnection, queryx, sizeof(queryx), "DELETE FROM vehicles WHERE id = '%d'", VehicleInfo[vid][vID]);
        mysql_tquery(ourConnection, queryx);
    }
    for(new i; i < MAX_TRUNK_ITEMS; i++) {
        VehicleInfo[vid][vInvList][i] = 0;
        VehicleInfo[vid][vInvExtra][i] = 0;
        VehicleInfo[vid][vInvAmount][i] = 0;
    }

    for(new i; i < MAX_TUNING_COMPONENTS; i++) {
        VehicleInfo[vid][vTuning][i] = 0;
    }
    foreach(new i: Player) {
        if(!PlayerInfo[i][pLogged])continue;
        if(!IsPlayerInAnyVehicle(i))continue;
        if(GetPlayerVehicleID(i) != vid)continue;
        if(!PlayerInfo[i][pEmniyetKemeri])continue;
        pc_cmd_arackemer(i);
    }
    VehicleInfo[vid][vTemporary] = 0;
    VehicleInfo[vid][vModel] = 0;
    VehicleInfo[vid][vHealth] = 0.0;
    VehicleInfo[vid][vMaxHealth] = 0.0;
    VehicleInfo[vid][vBatteryHealth] = 0.0;
    VehicleInfo[vid][vEngineHealth] = 0.0;
    VehicleInfo[vid][vDoorHealth] = 0.0;
    VehicleInfo[vid][vFuel] = 0;
    VehicleInfo[vid][vPrice] = 0;
    Vehicle_ClearCargo(vid);
    VehicleInfo[vid][vSigortaSeviyesi] = 0;
    VehicleInfo[vid][vComponents] = 0;
    VehicleInfo[vid][vAutovelox] = 0;
    for(new i; i < 4; i++)
        VehicleInfo[vid][vWindows][i] = 0;
    VehicleInfo[vid][vInterior] = 0;
    VehicleInfo[vid][vWorld] = 0;
    if(VehicleInfo[vid][vStereo]) {
        VehicleInfo[vid][vStereo] = false;
        foreach(new i: Player) {
            if(PlayerInfo[i][pLogged]) {
                if(GetPlayerVehicleID(i) == vid)
                    StopAudioStreamForPlayer(i);
            }
        }
    }
    VehicleInfo[vid][vImpounded] = 0;
    VehicleInfo[vid][vAlarm] = 0;
    VehicleInfo[vid][vDoorLevel] = 0;
    VehicleInfo[vid][vAlarmOn] = 0;
    VehicleInfo[vid][vPaintjob] = 3;
    for(new i; i < 3; i++) {
        VehicleInfo[vid][vCeset][i] = 0;
        VehicleInfo[vid][vSkin][i] = 0;
        //VehicleInfo[vid][vRehine][i] = -1;
    }
    VehicleInfo[vid][vKM] = 0.0;
    VehicleInfo[vid][vKMGosteren] = 0;
    format(VehicleInfo[vid][vIsim1], MAX_PLAYER_NAME, "");
    format(VehicleInfo[vid][vIsim2], MAX_PLAYER_NAME, "");
    format(VehicleInfo[vid][vIsim3], MAX_PLAYER_NAME, "");
    //format(VehicleInfo[vid][vRehineIsim1], MAX_PLAYER_NAME, "");
    //format(VehicleInfo[vid][vRehineIsim2], MAX_PLAYER_NAME, "");
    //format(VehicleInfo[vid][vRehineIsim3], MAX_PLAYER_NAME, "");
    VehicleInfo[vid][vShowingCargo] = false;
    VehicleInfo[vid][vRespraying] = 0;
    for(new p; p < MAX_CAR_WEAPONS; p++)
        VehicleInfo[vid][vSlotUsed][p] = 0;
    VehicleInfo[vid][vSpawnExpires] = 0;
    VehicleInfo[vid][vVergi] = 0;
    foreach(new id: Tezgahlar) {
        if(StandInfo[id][sExists]) {
            if(StandInfo[id][saracID] == vid) {
                foreach(new i: Player) if(PlayerInfo[i][pLogged]) {
                    if(PlayerInfo[i][pID] == StandInfo[id][sID]) {
                        PlayerInfo[i][pActigiTezgah] = -1;
                        break;
                    }
                }
                StandInfo[id][sExists] = 0;
                StandInfo[id][sID] = -1;
                format(StandInfo[id][sKuran], MAX_PLAYER_NAME, "Yok");
                StandInfo[id][sModel] = 0;
                DestroyDynamicObjectEx(StandInfo[id][sObje]);
                StandInfo[id][sPosX] = 0.0;
                StandInfo[id][sPosY] = 0.0;
                StandInfo[id][sPosZ] = 0.0;
                StandInfo[id][sRotX] = 0.0;
                StandInfo[id][sRotY] = 0.0;
                StandInfo[id][sRotZ] = 0.0;
                StandInfo[id][sMasaModel] = 0;
                DestroyDynamicObjectEx(StandInfo[id][sMasaObje]);
                StandInfo[id][sMasaPosX] = 0.0;
                StandInfo[id][sMasaPosY] = 0.0;
                StandInfo[id][sMasaPosZ] = 0.0;
                StandInfo[id][sMasaRotX] = 0.0;
                StandInfo[id][sMasaRotY] = 0.0;
                StandInfo[id][sMasaRotZ] = 0.0;
                if(IsValidDynamic3DTextLabel(StandInfo[id][sLabel]))
                    DestroyDynamic3DTextLabelEx(StandInfo[id][sLabel]);
                format(StandInfo[id][sLabelText], 128, "");
                StandInfo[id][sArabali] = false;
                for(new i; i < 3; i++) {
                    StandInfo[id][sCalisan][i] = -1;
                    StandInfo[id][sUrunFiyati][i] = 0;
                    format(StandUrunInfo[id][i], 80, "Yok");
                }
                StandInfo[id][saracID] = -1;
                SunucuMesaji(playerid, "Tezgahýnýzý sildiniz.");
                Iter_Remove(Tezgahlar, id);
                PlayerInfo[playerid][pActigiTezgah] = -1;
                break;
            }
        }
    }
    SendAdminAlert(false, COLOR_ADMIN, "AdmCmd: %s, %d ID'li aracý sildi.", ReturnRoleplayName(playerid), vid);
    LogYaz(playerid, "/vdelete", -1, vid);

    DestroyVehicle(vid);
    Iter_Remove(Vehicles, vid);
    return 1;
}
CMD:vpark(playerid, params[])
{
    if(!IsPlayerInAnyVehicle(playerid))return
        HataMesajiC(playerid, "Herhangi bir araçta deðilsin.");

    new id = GetPlayerVehicleID(playerid);

    GetVehiclePos(id, VehicleInfo[id][vSpawnPosX], VehicleInfo[id][vSpawnPosY], VehicleInfo[id][vSpawnPosZ]);
    GetVehicleZAngle(id, VehicleInfo[id][vSpawnPosA]);
    VehicleInfo[id][vWorld] = GetPlayerVirtualWorld(playerid);
    VehicleInfo[id][vInterior] = GetPlayerInterior(playerid);

//    if(!VehicleInfo[id][vTemporary]) SaveVehicle(id);

    BasariMesaji(playerid, "Araç baþarýyla park edildi. (%d)", id);

    mysql_format(ourConnection, queryx, sizeof(queryx), "UPDATE vehicles SET interior = '%d', world = '%d', color0 = '%d', color1 = '%d', pos_x = '%f', pos_y = '%f', pos_z = '%f', pos_a = '%f' WHERE id = '%d'",
    VehicleInfo[id][vInterior],
    VehicleInfo[id][vWorld],
    VehicleInfo[id][vFirstColor],
    VehicleInfo[id][vSecondColor],
    VehicleInfo[id][vSpawnPosX],
    VehicleInfo[id][vSpawnPosY],
    VehicleInfo[id][vSpawnPosZ],
    VehicleInfo[id][vSpawnPosA],
    VehicleInfo[id][vID]);
    mysql_tquery(ourConnection, queryx);
//  LogYaz(playerid, "/vpark", -1, id);
    return 1;
}

flags:vfactionsil(CMD_Marvellous);
CMD:vfactionsil(playerid)
{
    new vid = GetPlayerVehicleID(playerid);
    VehicleInfo[vid][vFaction] = INVALID_VEHICLE_ID;
    SaveVehicle(vid);
    return 1;
}

CMD:aracgps(playerid, params[])
{
    new id;

    if(sscanf(params, "d", id))return
        KullanimMesajiC(playerid, "/aracgps [SQL ID] (Bu komut sadece anahtar sahipleri içindir.)");

    if(id < 1) return HataMesajiC(playerid, "Geçersiz ID.");

    mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT * FROM vehicles WHERE id = '%d'", id);
    mysql_tquery(ourConnection, queryx, "AnahtarAracGPS", "dd", playerid, id);

    return 1;
}

CMD:aracgetir(playerid, params[])
{
    new id;
    if(id == 0) HataMesaji(playerid, "Bu fonksiyon geliþtirici ekip tarafýndan pasife alýndý, bu konu hakkýnda rapor atmayýn.");
        
/*
    if(sscanf(params, "d", id))return
        KullanimMesajiC(playerid, "/aracgetir [SQL ID] (Bu komut sadece anahtar sahipleri içindir.)");

    if(id < 1) return HataMesajiC(playerid, "Geçersiz ID.");

    mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT * FROM vehicles WHERE id = '%d'", id);
    mysql_tquery(ourConnection, queryx, "AnahtarAracGetir", "dd", playerid, id);
*/
    return 1;
}

CMD:aksesuar(playerid, params[])
{
    new count;
    new slotid;
    new p_slots[MAX_PLAYER_OBJECTS] = {-1, ...};
    new attach_object_slot;

    sscanf(params, "a<d>[5]", p_slots);

    for(new i; i < MAX_PLAYER_OBJECTS; i++)
    {
        if(p_slots[i] == -1)continue;

        slotid = p_slots[i]; if(slotid < 0 || slotid >= MAX_PLAYER_OBJECTS)continue;

        if(PlayerInfo[playerid][pObjectWearing][slotid] != -1)
        {
            attach_object_slot = PlayerInfo[playerid][pObjectWearing][slotid];

            SunucuMesaji(playerid, "Belirtilen aksesuar kaldýrýldý");
            RemovePlayerAttachedObject(playerid, attach_object_slot);
            PlayerInfo[playerid][pObjectSlotOccupied][attach_object_slot] = 0;
            PlayerInfo[playerid][pObjectWearing][slotid] = -1;
            PlayerInfo[playerid][pObjectWearingVar][slotid] = -1;
        }
        else PlayerObjects_CheckWear(playerid, slotid);

        count++;
    }

    if(!count)
    {
        new string[512];

        for(new i; i < MAX_PLAYER_OBJECTS; i++) format(string, sizeof(string), "%s\n{9999ff}%d. {FFFFFF}%s", string, i, PlayerObjects_GetName(playerid, i));

        Dialog_Show(playerid, DialogPObjects, DIALOG_STYLE_LIST, "Aksesuar", "%s", "Düzenle", "Geri", string);
    }

    return 1;
}

CMD:mulksaat(playerid, params[])
{
    new buildingid = GetPlayerBuilding(playerid, true);
    new houseid = GetPlayerHouse(playerid, true);

    if(houseid != -1 || buildingid != -1)
    {
        if(houseid != -1 && GetPlayerMenuHouse(playerid, true) != houseid)return 1;
        if(buildingid != -1 && GetPlayerMenuBiz(playerid, true) != buildingid)return 1;

        new VW = GetPlayerVirtualWorld(playerid);
        new time = SunucuBilgi[CurrentHour];

        mysql_format(ourConnection, queryx, sizeof(queryx), "DELETE FROM time_interiors WHERE world = '%d'", VW);
        mysql_tquery(ourConnection, queryx);

        if(!sscanf(params, "d", time) && time >= 0 && time <= 23)
        {
            mysql_format(ourConnection, queryx, sizeof(queryx), "INSERT INTO time_interiors (time, world) VALUES ('%d', '%d')", time, VW);
            mysql_tquery(ourConnection, queryx);

            SendClientMessageEx(playerid, COLOR_WHITE, "Sýnýrlamayý kaldýrmak için komutu tekrar kullanýn.");
        }

        foreach(new i : Player) if(GetPlayerVirtualWorld(i) == VW) SetPlayerTime(i, time, 0);

        SendFormattedMessage(playerid, COLOR_WHITE, "Mülkün interior saatýný %d olarak deðiþtirdin.", time);
    }
    else SendClientMessageEx(playerid, COLOR_ERROR, "Bu komutu sadece bir mülkün içerisinde kullanabilirsin.");

    return 1;
}

CMD:ev(playerid, params[])
{
    new h = GetPlayerMenuHouse(playerid);

    if(h == -1)return
        SunucuMesaji(playerid, "Anahtarýna sahip olduðun eve yakýn deðilsin.");

    if(HasPlayerUserKey(playerid, KEY_HOUSE, HouseInfo[h][hID]) > 0 && HouseInfo[h][hOwner] != PlayerInfo[playerid][pID])
        return Dialog_Show(playerid, DialogHouse, DIALOG_STYLE_LIST, "Ev", "Kilit\nEnvanter", "Ýleri", "Ýptal");
        
    if(PlayerInfo[playerid][pAdmin] < 6 && HouseInfo[h][Kiraci] == PlayerInfo[playerid][pID])
        return Dialog_Show(playerid, DialogHouse, DIALOG_STYLE_LIST, "Ev", "Kilit", "Ýleri", "Ýptal");

    new string[256] = "Sisteme Sat";

    if(PlayerInfo[playerid][pHousePrice] != -1) string = "Ev";
    format(string, sizeof(string), "Kilit\nEnvanter\n%s\nPara al\nPara koy", string);
    new dekorString[16];
    if(HouseInfo[h][hDekorKilit]) format(dekorString, 16, "{FF0000}KÝLÝTLÝ");
    else if(!HouseInfo[h][hDekorKilit]) format(dekorString, 16, "{09ab3a}AÇIK");
    new envanterKilitString[16];
    if(HouseInfo[h][hEnvanterKilit]) format(envanterKilitString, 16, "{FF0000}KÝLÝTLÝ");
    else if(!HouseInfo[h][hEnvanterKilit]) format(envanterKilitString, 16, "{09ab3a}AÇIK");
    if(HouseInfo[h][hOwner] == PlayerInfo[playerid][pID] || PlayerInfo[playerid][pAdminDuty])format(string, sizeof(string),"%s\nSat\nBilgi\nInterior\nAnahtar Ver\nKilit sýfýrla/deðiþtir\nÇýkýþ Yeri\nDolap/Envanter Pozisyonu\nVergi\t$%d\nKýyafet deðiþtir\nDekor Kilidi\t%s\nEnvanter Kilidi\t%s\nEvi Satýþa Çýkar", string, HouseInfo[h][hVergi],dekorString, envanterKilitString);
    if(HouseInfo[h][hOwner] != PlayerInfo[playerid][pID] && GetHouseComplexOwner(h) == PlayerInfo[playerid][pID])format(string, sizeof(string),"%s\nSat", string);

    Dialog_Show(playerid, DialogHouse, DIALOG_STYLE_LIST, "Ev", string, "Ýleri", "Ýptal");

    return 1;
}
CMD:evsatinal(playerid, params[])
{
    foreach(new j : Houses) if(HouseInfo[j][hExists] && IsPlayerInRangeOfPoint(playerid,1.0,HouseInfo[j][hPosX],HouseInfo[j][hPosY],HouseInfo[j][hPosZ]) && GetPlayerInterior(playerid) == HouseInfo[j][hPosInterior] && GetPlayerVirtualWorld(playerid) == HouseInfo[j][hPosWorld])
    {
        if(HouseInfo[j][hOwner] && HouseInfo[j][Satis] == 0)return
            SunucuMesaji(playerid, "Bu ev satýlýk deðil.");

        if(!HouseInfo[j][hOwner] && HouseInfo[j][Satis] == 0)
        {
            if(PlayerInfo[playerid][pCash] < HouseInfo[j][hPrice])return
                HataMesaji(playerid, "Yeterli paran yok. ($%d)", HouseInfo[j][hPrice]);

            new maxProperty = GetPlayerMaxProperties(playerid, true);

            if(GetPlayerHousesCount(playerid) >= maxProperty) return
                HataMesaji(playerid, "Zaten %d evin var.", maxProperty);

            AC_GivePlayerMoney(playerid, -HouseInfo[j][hPrice], "/evsatinal");

            if(HouseInfo[j][hComplex] != -1) foreach(new b : Buildings)
            {
                if(BuildingInfo[b][bID] != HouseInfo[j][hComplex])continue;

                //BuildingInfo[b][bCash] += HouseInfo[j][hPrice] / 2;
                SaveBuilding(b);
            }

            HouseInfo[j][hOwner] = PlayerInfo[playerid][pID];

            BasariMesaji(playerid, "$%d karþýlýðýnda evi satýn aldýn. /ev ile yönetebilirsin.", HouseInfo[j][hPrice]);
        }
        else
        {
            if(PlayerInfo[playerid][pID] == HouseInfo[j][hOwner])
                return HataMesajiC(playerid, "Kendi evini satýn alamazsýn.");
        
            if(PlayerInfo[playerid][pCash] < HouseInfo[j][Satis])return
                HataMesaji(playerid, "Yeterli paran yok. ($%d)", HouseInfo[j][Satis]);

            new maxProperty = GetPlayerMaxProperties(playerid, true);

            if(GetPlayerHousesCount(playerid) >= maxProperty) return
                HataMesaji(playerid, "Zaten %d evin var.", maxProperty);

            AC_GivePlayerMoney(playerid, -HouseInfo[j][Satis], "/evsatinal");

            if(HouseInfo[j][hComplex] != -1) foreach(new b : Buildings)
            {
                if(BuildingInfo[b][bID] != HouseInfo[j][hComplex])continue;

                //BuildingInfo[b][bCash] += HouseInfo[j][hPrice] / 2;
                SaveBuilding(b);
            }
            
            if(IsPlayerOnlineID(HouseInfo[j][hOwner]) && PlayerInfo[IsPlayerOnlineID(HouseInfo[j][hOwner])][pLogged])
            {
                AC_GivePlayerMoney(playerid, HouseInfo[j][Satis], "Ev Satýþý");
                BasariMesaji(playerid, "%d nolu evinizin $%d karþýlýðýnda satýþý gerçekleþti.", j, HouseInfo[j][Satis]);
            }
            else
            {
                mysql_format(ourConnection, queryx, sizeof queryx, "SELECT cash FROM characters WHERE id = '%d'", HouseInfo[j][hOwner]);
                new para, Cache:veri = mysql_query(ourConnection, queryx, true);

                static rows, fields;
                cache_get_row_count(rows);
                cache_get_field_count(fields);

                if(rows)
                {
                    cache_get_value_int(0, "cash", para);
                    cache_delete(veri);

                    para += HouseInfo[j][Satis];
                    mysql_format(ourConnection, queryx, sizeof(queryx), "UPDATE characters SET cash = '%d' WHERE id = '%d'", para, HouseInfo[j][hOwner]);
                    mysql_tquery(ourConnection, queryx);
                }
            }

            HouseInfo[j][hOwner] = PlayerInfo[playerid][pID];
            HouseInfo[j][Satis] = 0;

            BasariMesaji(playerid, "$%d karþýlýðýnda evi satýn aldýn. /ev ile yönetebilirsin.", HouseInfo[j][Satis]);
        }
        
        LogYaz(playerid, "/evsatinal", -1, j);
        return SaveHouse(j);
    }

    return 1;
}

CMD:oyarat(playerid, params[])
{
    new price, interiorid,
        otel = Iter_Free(Oteller),
        Float:x, Float:y, Float:z;

    if(otel >= MAX_OTEL)return
        SunucuMesaji(playerid, "Otel oda limitine ulaþtýn.");

    if(sscanf(params, "dd", price, interiorid))return
        KullanimMesajiC(playerid, "/oyarat [fiyat] [interior]");

    if(price < 1 || price > 999999)return
        SunucuMesaji(playerid, "Geçersiz deðer. ($1 - $999999)");

    if(interiorid < 0 || interiorid > sizeof(allHouseInteriors)-1)return
        HataMesaji(playerid, "Interior bulunamadý. (0 - %d)", sizeof(allHouseInteriors)-1);

    GetPlayerPos(playerid, x, y, z);
    OtelInfo[otel][otelExists] = 1;
    OtelInfo[otel][otelID] = otel;
    OtelInfo[otel][otelSahibi] = -1;
    OtelInfo[otel][otelDisX] = x;
    OtelInfo[otel][otelDisY] = y;
    OtelInfo[otel][otelDisZ] = z;
    OtelInfo[otel][otelDisInterior] = GetPlayerInterior(playerid);
    OtelInfo[otel][otelDisWorld] = GetPlayerVirtualWorld(playerid);
    OtelInfo[otel][otelIntX] = allHouseInteriors[interiorid][iHouseX];
    OtelInfo[otel][otelIntY] = allHouseInteriors[interiorid][iHouseY];
    OtelInfo[otel][otelIntZ] = allHouseInteriors[interiorid][iHouseZ];
    OtelInfo[otel][otelIntInterior] = allHouseInteriors[interiorid][iHouseInt];
    OtelInfo[otel][otelIntWorld] = 10000 + otel;
    OtelInfo[otel][otelKilitli] = 0;
    OtelInfo[otel][otelKalanSure] = -1;
    OtelInfo[otel][otelUcret] = price;
    OtelInfo[otel][otelKiralik] = 1;
    OtelInfo[otel][otelCheckpoint] = Pickup_Create(ELEMENT_OTEL, otel, 1273, 1, OtelInfo[otel][otelDisX], OtelInfo[otel][otelDisY], OtelInfo[otel][otelDisZ], OtelInfo[otel][otelDisWorld], OtelInfo[otel][otelDisInterior]);

    OtelKaydet(otel, 1);

    SendAdminAlert(false, COLOR_ADMIN, "AdmCmd: %s, %d ID'li otel odasýný $%d'a kiraya koydu.", ReturnRoleplayName(playerid), otel, price);

    LogYaz(playerid, "/oyarat", -1, otel, price);

    Iter_Add(Oteller, otel);

    return 1;
}

CMD:osil(playerid, params[])
{
    new houseid;

    if(sscanf(params, "d", houseid))return
        KullanimMesajiC(playerid, "/osil [id]");

    if(houseid < 0 || houseid >= MAX_OTEL || !OtelInfo[houseid][otelExists])return
        SunucuMesajiC(playerid, "Otel bulunamadý.");

    new sonuc = OtelSil(houseid);
    if(!sonuc) return HataMesajiC(playerid, "Otel bulunamadý.");
    SendAdminAlert(false, COLOR_ADMIN, "AdmCmd: %s, %d ID'li otel odasýný sildi.", ReturnRoleplayName(playerid), houseid);

    LogYaz(playerid, "/osil", -1, houseid);

    Iter_Remove(Oteller, houseid);

    return 1;
}

CMD:oedit(playerid, params[])
{
    new houseid,
        option[20],
        amount;

    if(sscanf(params, "ds[20]D(-1)", houseid, option, amount))return
        KullanimMesajiC(playerid, "/oedit [id] [pozisyon - interior - konuminterior - fiyat - kilit]");

    if(houseid < 0 || houseid >= MAX_OTEL || !OtelInfo[houseid][otelExists])return
        SunucuMesajiC(playerid, "Otel bulunamadý.");

    if(!strcmp(option, "pozisyon", true))
    {
        new Float:x, Float:y, Float:z;

        GetPlayerPos(playerid, x, y, z);

        OtelInfo[houseid][otelDisX] = x;
        OtelInfo[houseid][otelDisY] = y;
        OtelInfo[houseid][otelDisZ] = z;
        OtelInfo[houseid][otelDisInterior] = GetPlayerInterior(playerid);
        OtelInfo[houseid][otelDisWorld] = GetPlayerVirtualWorld(playerid);

        Pickup_Destroy(OtelInfo[houseid][otelCheckpoint]);
        OtelInfo[houseid][otelCheckpoint] = Pickup_Create(ELEMENT_OTEL, houseid, 1273, 1, OtelInfo[houseid][otelDisX], OtelInfo[houseid][otelDisY], OtelInfo[houseid][otelDisZ], OtelInfo[houseid][otelDisWorld], OtelInfo[houseid][otelDisInterior]);

        LogYaz(playerid, "/oedit pozisyon", -1, houseid);

        OtelKaydet(houseid);
    }
    else if(!strcmp(option, "interior", true))
    {
        if(amount == -1)return
            KullanimMesajiC(playerid, "/oedit [id] [interior] [n]");

        if(amount < 0 || amount > sizeof(allHouseInteriors)-1)return
            HataMesaji(playerid, "Interior Geçersiz ID. (0 - %d)", sizeof(allHouseInteriors)-1);

        OtelInfo[houseid][otelIntX] = allHouseInteriors[amount][iHouseX];
        OtelInfo[houseid][otelIntY] = allHouseInteriors[amount][iHouseY];
        OtelInfo[houseid][otelIntZ] = allHouseInteriors[amount][iHouseZ];
        OtelInfo[houseid][otelIntInterior] = allHouseInteriors[amount][iHouseInt];
        OtelInfo[houseid][otelIntWorld] = 10000 + houseid;

        LogYaz(playerid, "/oedit interior", -1, houseid, amount);

        OtelKaydet(houseid);
    }
    else if(!strcmp(option, "konuminterior", true))
    {
        new Float:x,
            Float:y,
            Float:z;

        GetPlayerPos(playerid, x, y, z);

        OtelInfo[houseid][otelIntX] = x;
        OtelInfo[houseid][otelIntY] = y;
        OtelInfo[houseid][otelIntZ] = z;
        OtelInfo[houseid][otelIntInterior] = GetPlayerInterior(playerid);

        AC_SetPlayerVirtualWorld(playerid, OtelInfo[houseid][otelIntWorld]);

        LogYaz(playerid, "/oedit konuminterior", -1, houseid);

        OtelKaydet(houseid);
    }
    else if(!strcmp(option, "fiyat", true))
    {
        if(amount == -1)return
            KullanimMesajiC(playerid, "/oedit [id] [fiyat] [deðer/miktar]");

        if(amount < 1 || amount > 99999999)return
            SunucuMesaji(playerid, "Geçersiz deðer. ($1 - $99999999)");

        OtelInfo[houseid][otelUcret] = amount;

        LogYaz(playerid, "/oedit fiyat", -1, houseid, amount);

        OtelKaydet(houseid);
    }
    else if(!strcmp(option, "kilit", true))
    {
        OtelInfo[houseid][otelKilitli] = !OtelInfo[houseid][otelKilitli];
        OtelKaydet(houseid);
    }
    else return
        HataMesajiC(playerid, "Geçersiz parametre.");

    SendAdminAlert(false, COLOR_ADMIN, "AdmCmd: %s, %d ID'li evi düzenledi. Seçim: \"%s\" - deðiþtirilen deðer: \"%d\".", ReturnRoleplayName(playerid), houseid, option, amount);

    return 1;
}



CMD:evyarat(playerid, params[])
{
    new price, interiorid,
        houseid = Iter_Free(Houses),
        Float:x, Float:y, Float:z,
        complex = -1;

    if(houseid >= MAX_HOUSES)return
        SunucuMesaji(playerid, "Ev limitine ulaþtýn.");

    if(sscanf(params, "ddD(-1)", price, interiorid, complex))return
        KullanimMesajiC(playerid, "/evyarat [fiyat] [interior] [apartman(opsiyonel)]");

    if(price < 1 || price > 999999)return
        SunucuMesaji(playerid, "Geçersiz deðer. ($1 - $999999)");

    if(interiorid < 0 || interiorid > sizeof(allHouseInteriors)-1)return
        HataMesaji(playerid, "Interior bulunamadý. (0 - %d)", sizeof(allHouseInteriors)-1);

    if(complex != -1) if(complex < 0 || complex >= MAX_BUILDINGS || !BuildingInfo[complex][bExists] || BuildingInfo[complex][bType] != COMPLEX)return
        SunucuMesaji(playerid, "Apartman bulunamadý.");

    GetPlayerPos(playerid, x, y, z);

    HouseInfo[houseid][hExists] = 1;
    HouseInfo[houseid][hOwner] = 0;

    HouseInfo[houseid][hPosX] = x;
    HouseInfo[houseid][hPosY] = y;
    HouseInfo[houseid][hPosZ] = z;

    HouseInfo[houseid][hPosIntX] = allHouseInteriors[interiorid][iHouseX];
    HouseInfo[houseid][hPosIntY] = allHouseInteriors[interiorid][iHouseY];
    HouseInfo[houseid][hPosIntZ] = allHouseInteriors[interiorid][iHouseZ];
    HouseInfo[houseid][hInterior] = allHouseInteriors[interiorid][iHouseInt];
    HouseInfo[houseid][hIGInterior] = interiorid;
    HouseInfo[houseid][hVergi] = 0;
    
    HouseInfo[houseid][Satis] = 0;

    HouseInfo[houseid][hLocked] = 0;
    HouseInfo[houseid][hCash] = 0;
    HouseInfo[houseid][hPrice] = price;
    HouseInfo[houseid][hComplex] = (complex != -1) ? BuildingInfo[complex][bID] : -1;
    HouseInfo[houseid][hPosWorld] = (complex != -1) ?  BuildingInfo[complex][bWorld] : GetPlayerVirtualWorld(playerid);
    HouseInfo[houseid][hPosInterior] = (complex != -1) ? BuildingInfo[complex][bInterior] : GetPlayerInterior(playerid);

    HouseInfo[houseid][hCheckpoint] = CreateDynamicCP(HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ]-0.3, 2.2000, HouseInfo[houseid][hPosWorld], HouseInfo[houseid][hPosInterior], -1, 1.5, -1, 1);
    Streamer_SetIntData(STREAMER_TYPE_CP, HouseInfo[houseid][hCheckpoint], E_STREAMER_EXTRA_ID, houseid);

    // new query[700];

    mysql_format(ourConnection, queryx, sizeof(queryx), "INSERT INTO houses (complex, price, pos_x, pos_y, pos_z, pos_int_x, pos_int_y, pos_int_z, interior, pos_world, pos_interior, ig_interior) \
    VALUES ('%d', '%d', '%f', '%f', '%f', '%f', '%f', '%f', '%d', '%d', '%d', '%d')",
    HouseInfo[houseid][hComplex],
    HouseInfo[houseid][hPrice],
    HouseInfo[houseid][hPosX],
    HouseInfo[houseid][hPosY],
    HouseInfo[houseid][hPosZ],
    HouseInfo[houseid][hPosIntX],
    HouseInfo[houseid][hPosIntY],
    HouseInfo[houseid][hPosIntZ],
    HouseInfo[houseid][hInterior],
    HouseInfo[houseid][hPosWorld],
    HouseInfo[houseid][hPosInterior],
    HouseInfo[houseid][hIGInterior]);

    mysql_tquery(ourConnection, queryx, "OnQueryFinished", "dd", houseid, THREAD_CREATE_HOUSE);

    SendAdminAlert(false, COLOR_ADMIN, "AdmCmd: %s, %d ID'li evi $%d'a satýlýða koydu.", ReturnRoleplayName(playerid), houseid, price);

    LogYaz(playerid, "/evyarat", -1, houseid, price);

    Iter_Add(Houses, houseid);

    return 1;
}
CMD:evsil(playerid, params[])
{
    new houseid;

    if(sscanf(params, "d", houseid))return
        KullanimMesajiC(playerid, "/evsil [id]");

    if(houseid < 0 || houseid >= MAX_HOUSES || !HouseInfo[houseid][hExists])return
        SunucuMesajiC(playerid, "Ev bulunamadý.");

    House_Delete(houseid);

    SendAdminAlert(false, COLOR_ADMIN, "AdmCmd: %s, %d ID'li evi sildi.", ReturnRoleplayName(playerid), houseid);

    LogYaz(playerid, "/evsil", -1, houseid);

    Iter_Remove(Houses, houseid);

    return 1;
}
CMD:evgit(playerid, params[])
{
    new houseid;

    if(sscanf(params, "d", houseid))return
        KullanimMesajiC(playerid, "/evgit [id]");

    if(houseid < 0 || houseid >= MAX_HOUSES || !HouseInfo[houseid][hExists])return
        SunucuMesajiC(playerid, "Ev bulunamadý.");

    SetPlayerPos(playerid, HouseInfo[houseid][hPosX],HouseInfo[houseid][hPosY],HouseInfo[houseid][hPosZ]);
    SetPlayerInterior(playerid, HouseInfo[houseid][hPosInterior]);
    AC_SetPlayerVirtualWorld(playerid, HouseInfo[houseid][hPosWorld]);

    return 1;
}
CMD:evedit(playerid, params[])
{
    new houseid,
        option[20],
        amount;

    if(sscanf(params, "ds[20]D(-1)", houseid, option, amount))return
        KullanimMesajiC(playerid, "/evedit [id] [pozisyon - interior - fiyat - kilit - sifirla - complex]");

    if(houseid < 0 || houseid >= MAX_HOUSES || !HouseInfo[houseid][hExists])return
        SunucuMesajiC(playerid, "Ev bulunamadý.");

    if(!strcmp(option, "pozisyon", true))
    {
        new Float:x, Float:y, Float:z;

        GetPlayerPos(playerid, x, y, z);

        HouseInfo[houseid][hPosX] = x;
        HouseInfo[houseid][hPosY] = y;
        HouseInfo[houseid][hPosZ] = z;
        HouseInfo[houseid][hPosWorld] = GetPlayerVirtualWorld(playerid);
        HouseInfo[houseid][hPosInterior] = GetPlayerInterior(playerid);

        DestroyDynamicCP(HouseInfo[houseid][hCheckpoint]);
        HouseInfo[houseid][hCheckpoint] = CreateDynamicCP(HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ]-0.3, 2.2000, HouseInfo[houseid][hPosWorld], HouseInfo[houseid][hPosInterior], -1, 1.0, -1, 1);
        Streamer_SetIntData(STREAMER_TYPE_CP, HouseInfo[houseid][hCheckpoint], E_STREAMER_EXTRA_ID, houseid);

        LogYaz(playerid, "/evedit posizione", -1, houseid);

        SaveHouse(houseid);
    }
    else if(!strcmp(option, "interior", true))
    {
        if(amount == -1)return
            KullanimMesajiC(playerid, "/evedit [id] [interior] [n]");

        if(amount < 0 || amount > sizeof(allHouseInteriors)-1)return
            HataMesaji(playerid, "Interior Geçersiz ID. (0 - %d)", sizeof(allHouseInteriors)-1);

        HouseInfo[houseid][hPosIntX] = allHouseInteriors[amount][iHouseX];
        HouseInfo[houseid][hPosIntY] = allHouseInteriors[amount][iHouseY];
        HouseInfo[houseid][hPosIntZ] = allHouseInteriors[amount][iHouseZ];
        HouseInfo[houseid][hInterior] = allHouseInteriors[amount][iHouseInt];
        HouseInfo[houseid][hIGInterior] = amount;

        LogYaz(playerid, "/evedit interior", -1, houseid, amount);

        SaveHouse(houseid);
    }
    else if(!strcmp(option, "konuminterior", true))
    {
        new Float:x,
            Float:y,
            Float:z;

        GetPlayerPos(playerid, x, y, z);

        HouseInfo[houseid][hPosIntX] = x;
        HouseInfo[houseid][hPosIntY] = y;
        HouseInfo[houseid][hPosIntZ] = z;
        HouseInfo[houseid][hInterior] = GetPlayerInterior(playerid);

        AC_SetPlayerVirtualWorld(playerid, HouseInfo[houseid][hWorld]);

        LogYaz(playerid, "/evedit interior", -1, houseid);

        SaveHouse(houseid);
    }
    else if(!strcmp(option, "fiyat", true))
    {
        if(amount == -1)return
            KullanimMesajiC(playerid, "/evedit [id] [fiyat] [deðer/miktar]");

        if(amount < 1 || amount > 99999999)return
            SunucuMesaji(playerid, "Geçersiz deðer. ($1 - $99999999)");

        HouseInfo[houseid][hPrice] = amount;

        LogYaz(playerid, "/evedit fiyat", -1, houseid, amount);

        SaveHouse(houseid);
    }
    else if(!strcmp(option, "kilit", true))
    {
        HouseInfo[houseid][hLocked] = !HouseInfo[houseid][hLocked];
        SaveHouse(houseid);
    }
    else if(!strcmp(option, "sifirla", true))
    {
        House_Reset(houseid);

        LogYaz(playerid, "/evedit sifirla", -1, houseid);
    }
    else if(!strcmp(option, "complex", true))
    {
        if(amount < 0 || amount >= MAX_BUILDINGS || !BuildingInfo[amount][bExists] || BuildingInfo[amount][bType] != COMPLEX)return
            SunucuMesaji(playerid, "Apartman bulunamadý.");

        HouseInfo[houseid][hComplex] = BuildingInfo[amount][bID];

        LogYaz(playerid, "/evedit complex", -1, houseid, amount);

        SaveHouse(houseid);
    }
    else return
        HataMesajiC(playerid, "Geçersiz parametre.");

    SendAdminAlert(false, COLOR_ADMIN, "AdmCmd: %s, %d ID'li evi düzenledi. Seçim: \"%s\" - deðiþtirilen deðer: \"%d\".", ReturnRoleplayName(playerid), houseid, option, amount);

    return 1;
}

CMD:bdunya(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 5) return HataMesajiC(playerid, "Bu komutu kullanamazsýnýz");

    new buildingid, interior, virtualworld;

    if(sscanf(params, "ddd", buildingid, interior, virtualworld))
        return KullanimMesajiC(playerid, "/bdunya [ID] [INT] [VW]");

    if(buildingid < 0 || buildingid >= MAX_BUILDINGS || !BuildingInfo[buildingid][bExists])return
        SunucuMesaji(playerid, "Varolmayan bina/iþletme.");

    BuildingInfo[buildingid][bInterior] = interior;
    BuildingInfo[buildingid][bWorld] = virtualworld;
    SaveBuilding(buildingid);

    BasariMesaji(playerid, "%d nolu binanýn dünya deðerleriyle oynadýnýz. (INT: %d / VW: %d)", buildingid, interior, virtualworld);
    return 1;
}

CMD:isletmesatinal(playerid, params[])
{
    foreach(new j : Buildings)
    {
        if(!BuildingInfo[j][bExists] || BuildingInfo[j][bType] == BUILDING || BuildingInfo[j][bType] == BANK)continue;
        if(!IsPlayerInRangeOfPoint(playerid, 1.0, BuildingInfo[j][bPosX], BuildingInfo[j][bPosY], BuildingInfo[j][bPosZ]) || GetPlayerInterior(playerid) != BuildingInfo[j][bPosInterior] || GetPlayerVirtualWorld(playerid) != BuildingInfo[j][bPosWorld])continue;

        if(BuildingInfo[j][bOwner])return
            SunucuMesaji(playerid, "Bu iþletme satýlýk deðil.");

        if(PlayerInfo[playerid][pCash] < BuildingInfo[j][bPrice])return
            HataMesaji(playerid, "Yeterli paran yok. ($%d)", BuildingInfo[j][bPrice]);

        new maxProperty = GetPlayerMaxProperties(playerid, false);

        if(GetPlayerBizCount(playerid) >= maxProperty)return
            HataMesaji(playerid, "Ýþletme sýnýrýna ulaþtýn. (%d)", maxProperty);

        AC_GivePlayerMoney(playerid, -BuildingInfo[j][bPrice], "/isletmesatinal");

        BuildingInfo[j][bOwner] = PlayerInfo[playerid][pID];

        BasariMesaji(playerid, "$%d karþýlýðýnda iþletmeyi satýn aldýn. /isletme komutuyla yönetebilirsin.", BuildingInfo[j][bPrice]);

        LogYaz(playerid, "/isletmesatinal", -1, j);

        return SaveBuilding(j);
    }

    return 1;
}

CMD:isletme(playerid)
{
    new b = GetPlayerMenuBiz(playerid);

    if(b == -1)return
        HataMesajiC(playerid, "Yetkiniz olan bir iþletmeye yakýn deðilsiniz.");

    if(BuildingInfo[b][bType] == BUILDING)return 1;
    if(BuildingInfo[b][bType] == GARAJ || BuildingInfo[b][bType] == TAMIRHANE) return pc_cmd_garaj(playerid);
    if(BuildingInfo[b][bMuhurlu] && PlayerInfo[playerid][pAdmin] < 2) return HataMesajiC(playerid, "Bu iþletme mühürlenmiþ, lütfen mührünü açtýrýn.");

    if(HasPlayerUserKey(playerid, KEY_BUILDING, BuildingInfo[b][bID]) == 0 && PlayerInfo[playerid][pID] != BuildingInfo[b][bOwner] && PlayerInfo[playerid][pCalistigiIsyeri][0] == b && PlayerInfo[playerid][pAdmin] < 6)
        return Dialog_Show(playerid, IsletmeYeniMenu, DIALOG_STYLE_LIST, "Ýþletme", "Kilit\nMüzik\nMüzik Kapat", "Seç", "Ýptal");

    if(HasPlayerUserKey(playerid, KEY_BUILDING, BuildingInfo[b][bID]) > 0 && PlayerInfo[playerid][pID] != BuildingInfo[b][bOwner] && PlayerInfo[playerid][pAdmin] < 6)
        return Dialog_Show(playerid, IsletmeYeniMenu, DIALOG_STYLE_LIST, "Ýþletme", "Kilit\nMüzik\nMüzik Kapat", "Seç", "Ýptal");

    new string[620];
    format(string, sizeof(string), "Seçenek\tDeðer\n");
    if(BuildingInfo[b][bLocked])
        format(string, sizeof(string), "%sKilit\t{FF0000}[KÝLÝTLÝ]\n", string);
    else
        format(string, sizeof(string), "%sKilit\t{00cc00}[AÇIK]\n", string);
    if(BuildingInfo[b][bCash] > 0)
        format(string, sizeof string, "%sÝsim deðiþtir\t\nÝþletme kasasý\t{00cc00}[$%d]\n", string, BuildingInfo[b][bCash]);
    else
        format(string, sizeof string, "%sÝsim deðiþtir\t\nÝþletme kasasý\t{FF0000}$0\n", string);
    format(string, sizeof(string), "%sDetay\t\nSisteme Sat\t\nKiþiye Sat\t\nYedek Anahtar\t\nKilit sýfýrla/deðiþtir\t\n\nÇalýþan sayýsý\t{00cc00}[%d kiþi]\nÇalýþan iþlemleri\nAktör sistemi\n", string, BuildingInfo[b][bCalisanSayisi]);
    format(string, sizeof(string),"%sÜrünleri Yönet\t\nGiriþ ücreti\t{00cc00}[$%d]\n", string, BuildingInfo[b][bEntrance]);
    format(string, sizeof(string),"%sMüzik Kapat\t\nRadyo\nÇýkýþ Yerini Deðiþtir\nVergi\t$%d", string, BuildingInfo[b][bVergi]);
    if(BuildingInfo[b][bDekorKilit]) format(string, sizeof string, "%s\nDekor Kilidi\t{FF0000}[KÝLÝTLÝ]", string);
    else format(string, sizeof string, "%s\nDekor Kilidi\t{09ab3a}[AÇIK]", string);
    format(string, sizeof(string),"%s\nCeza\t$%d\nInterior\nÝþletme Tipi Deðiþtir\nÝþletme Konum Paylaþýmý\t%s", string, BuildingInfo[b][bCeza], (!BuildingInfo[b][bGPS]) ? "{FF0000}PASIF" : "{00cc00}AKTIF");
    if(BuildingInfo[b][bType] == CUSTOM) format(string, sizeof(string), "%s\nÜrün Ekle", string);
    Dialog_Show(playerid, DialogBiz, DIALOG_STYLE_TABLIST_HEADERS, "Ýþletme", string, "Seç", "Ýptal");

    return 1;
}

CMD:garaj(playerid)
{
    new b = GetPlayerMenuBiz(playerid);

    if(b == -1)return
        HataMesajiC(playerid, "Yetkiniz olan bir garaja yakýn deðilsiniz.");

    if(BuildingInfo[b][bType] != GARAJ && BuildingInfo[b][bType] != TAMIRHANE)return 1;
    if(BuildingInfo[b][bMuhurlu] && PlayerInfo[playerid][pAdmin] < 2) return HataMesajiC(playerid, "Bu garaj mühürlenmiþ, lütfen mührünü açtýrýn.");

    if(HasPlayerUserKey(playerid, KEY_BUILDING, BuildingInfo[b][bID]) == 0 && PlayerInfo[playerid][pID] != BuildingInfo[b][bOwner] && PlayerInfo[playerid][pCalistigiIsyeri][0] == b && PlayerInfo[playerid][pAdmin] < 6)
        return Dialog_Show(playerid, DialogBiz, DIALOG_STYLE_LIST, "Garaj", "Kilit", "Seç", "Ýptal");

    if(HasPlayerUserKey(playerid, KEY_BUILDING, BuildingInfo[b][bID]) > 0 && PlayerInfo[playerid][pID] != BuildingInfo[b][bOwner] && PlayerInfo[playerid][pAdmin] < 6)
        return Dialog_Show(playerid, DialogBiz, DIALOG_STYLE_LIST, "Garaj", "Kilit", "Seç", "Ýptal");

    new string[620];
    format(string, sizeof(string), "Seçenek\tDeðer\n");
    if(BuildingInfo[b][bLocked])
        format(string, sizeof(string), "%sKilit\t{FF0000}[KÝLÝTLÝ]\n", string);
    else
        format(string, sizeof(string), "%sKilit\t{00cc00}[AÇIK]\n", string);
    if(BuildingInfo[b][bCash] > 0)
        format(string, sizeof string, "%sÝsim deðiþtir\t\nGaraj kasasý\t{00cc00}[$%d]\n", string, BuildingInfo[b][bCash]);
    else
        format(string, sizeof string, "%sÝsim deðiþtir\t\nGaraj kasasý\t{FF0000}$0\n", string);
    format(string, sizeof(string), "%sDetay\t\nSisteme Sat\t\nKiþiye Sat\t\nYedek Anahtar\t\nKilit sýfýrla/deðiþtir\t\n\nÇalýþan sayýsý\t{00cc00}[%d kiþi]\nÇalýþan iþlemleri\nAktör sistemi\n", string, BuildingInfo[b][bCalisanSayisi]);
    format(string, sizeof(string),"%sÜrünleri Yönet\t\nGiriþ ücreti\t{00cc00}[$%d]\n", string, BuildingInfo[b][bEntrance]);
    format(string, sizeof(string),"%sMüzik Kapat\t\nRadyo\nÇýkýþ Yerini Deðiþtir\nVergi\t$%d", string, BuildingInfo[b][bVergi]);
    if(BuildingInfo[b][bDekorKilit]) format(string, sizeof string, "%s\nDekor Kilidi\t{FF0000}[KÝLÝTLÝ]", string);
    else format(string, sizeof string, "%s\nDekor Kilidi\t{09ab3a}[AÇIK]", string);
    format(string, sizeof(string),"%s\nCeza\t$%d\nInterior", string, BuildingInfo[b][bCeza]);
    Dialog_Show(playerid, DialogGaraj, DIALOG_STYLE_TABLIST_HEADERS, "Garaj", string, "Seç", "Ýptal");

    return 1;
}

CMD:gateolustur(playerid, params[])
{
    if(SunucuBilgi[AntiDinamikObje])
        return HataMesaji(playerid, "Bu sistem geçici olarak geliþtirici ekip tarafýndan pasife çekildi.");
        
    if(Iter_Count(Gates) >= MAX_GATES) return HataMesajiC(playerid, "Sunucu max gate limitine ulaþýldý.");
    if(GetPVarInt(playerid, "GateOlusturuyor")) return HataMesajiC(playerid, "Zaten bir gate oluþturuyorsunuz.");
    new modelid = 980;
    if(sscanf(params, "d", modelid)) return KullanimMesajiC(playerid, "/gateolustur [model id]");
    SetPVarInt(playerid, "GateOlusturuyor", 1);
    GateOlustur(playerid, modelid);
    return 1;
}

CMD:gatesil(playerid, params[])
{
    new id;
    if(sscanf(params, "d", id)) return KullanimMesajiC(playerid, "/gatesil [gateid]");
    if(GateBilgi[id][GateGise] == 1) return HataMesajiC(playerid, "Giþe olarak atanan bir gateyi silmeye çalýþýyorsunuz, giþe deðerini sýfýrlayýn.");
    new exists = GateSil(id);
    if(!exists) return HataMesajiC(playerid, "Belirttiðiniz ID'de gate yok.");
    SunucuMesaji(playerid, "%d nolu gate silindi.", id);
    return 1;
}

CMD:gateduzenle(playerid, params[])
{
    new id, type[24], string[128];
    if(sscanf(params, "ds[24]S()[128]", id, type, string))
    {
        KullanimMesajiC(playerid, "/gateduzenle [id] [fonksiyon]");
        KullanimMesajiC(playerid, "Fonksiyonlar: kapalipos, acikpos, model, sahip, faction, sifre, menzil, hiz, gise");
        return 1;
    }
    if((id < 0 || id >= MAX_GATES) || !GateBilgi[id][gateExists])
        return HataMesajiC(playerid, "Geçersiz gate!");

    if(!strcmp(type, "kapalipos", true))
    {
        SetPVarInt(playerid, "GateID", id);
        SetPVarInt(playerid, "GateDuzenliyorK", 1);
        EditDynamicObject(playerid, GateBilgi[id][gateObject]);
        SunucuMesaji(playerid, "%d nolu gatenin kapalý pozisyonunu düzenliyorsunuz.", id);
        return 1;
    }
    else if(!strcmp(type, "acikpos", true))
    {
        SetPVarInt(playerid, "GateID", id);
        SetPVarInt(playerid, "GateDuzenliyorA", 1);
        EditDynamicObject(playerid, GateBilgi[id][gateObject]);
        SunucuMesaji(playerid, "%d nolu gatenin açýk pozisyonunu düzenliyorsunuz.", id);
        return 1;
    }
    else if(!strcmp(type, "model", true))
    {
        static model;

        if(sscanf(string, "d", model))
            return KullanimMesajiC(playerid, "/gateduzenle [id] [model] [modelid(980)]");

        SunucuMesaji(playerid, "%d nolu gatenin modelini %d olarak deðiþtirdiniz.", id, model);
        GateBilgi[id][gateModel] = model;
        DestroyDynamicObjectEx(GateBilgi[id][gateObject]);
        GateBilgi[id][gateObject] = CreateDynamicObject(model, GateBilgi[id][gateClosePX], GateBilgi[id][gateClosePY], GateBilgi[id][gateClosePZ], GateBilgi[id][gateCloseRX], GateBilgi[id][gateCloseRY], GateBilgi[id][gateCloseRZ], GateBilgi[id][gateVW], GateBilgi[id][gateInt]);
        return GateDuzenle(id);
    }
    else if(!strcmp(type, "sahip", true))
    {
        static sahip;

        if(sscanf(string, "d", sahip))
            return KullanimMesajiC(playerid, "/gateduzenle [id] [sahip] [oyuncu ID] (silmek için -1)");

        if(sahip == -1) {
            GateBilgi[id][gateOwner] = -1;
            SunucuMesaji(playerid, "%d nolu gatenin sahibini sildiniz.", id);
        }
        else {
            if(!IsPlayerConnected(sahip))
                return HataMesajiC(playerid, "Girilen kiþi oyunda deðil.");

            GateBilgi[id][gateOwner] = PlayerInfo[sahip][pID];
            SunucuMesaji(playerid, "%d nolu gatenin sahibini %s(%d) olarak deðiþtirdiniz.", id, ReturnRoleplayName(sahip), sahip);
        }
        return GateDuzenle(id);
    }
    else if(!strcmp(type, "faction", true))
    {
        static birlikid = -1;

        if(sscanf(string, "d", birlikid))
            return KullanimMesajiC(playerid, "/gateduzenle [id] [birlik] [birlik id] (silmek için -1)");

        if((birlikid < -1 || birlikid >= MAX_FACTIONS) || (birlikid != -1 && !FactionInfo[birlikid][fExists]))
            return HataMesajiC(playerid, "Geçersiz birlik.");

        GateBilgi[id][gateFaction] = birlikid;

        if(birlikid == -1) {
            SunucuMesaji(playerid, "%d nolu gatenin oluþum deðerini sildiniz.", id);
        }
        else {
            SunucuMesaji(playerid, "%d nolu gatenin oluþum deðerini %d olarak deðiþtirdiniz.", id, birlikid);
        }
        return GateDuzenle(id);
    }
    else if(!strcmp(type, "menzil", true))
    {
        static Float:menzil = 8.0;

        if(sscanf(string, "f", menzil))
            return KullanimMesajiC(playerid, "/gateduzenle [id] [menzil] [deðer]");

        if(menzil < 0.0 || menzil > 20.0)
            return HataMesajiC(playerid, "Girilen menzil en az 0, en fazla 20 olmalýdýr.");

        SunucuMesaji(playerid, "%d nolu gatenin menzil deðerini deðiþtirdiniz.", id);
        GateBilgi[id][gateMenzil] = menzil;
        return GateDuzenle(id);
    }
    else if(!strcmp(type, "hiz", true))
    {
        static Float:hiz = 5.0;

        if(sscanf(string, "f", hiz))
            return KullanimMesajiC(playerid, "/gateduzenle [id] [hiz] [deðer]");

        if(hiz < 0.0 || hiz > 20.0)
            return HataMesajiC(playerid, "Girilen hýz sýfýrýn altýnda, yirminin üstünde olamaz!");

        SunucuMesaji(playerid, "%d nolu gatenin hýz deðerini deðiþtirdiniz.", id);
        GateBilgi[id][gateHiz] = hiz;
        return GateDuzenle(id);
    }
    else if(!strcmp(type, "sifre", true))
    {
        static sifre[24];

        if(sscanf(string, "s[24]", sifre))
            return KullanimMesajiC(playerid, "/gateduzenle [id] [sifre] [sifre(min.1/max.24)] (Kaldýrmak için: -1)");

        if(strlen(sifre) < 1 || strlen(sifre) > 24)
            return HataMesajiC(playerid, "Þifre en fazla 24 karakter olabilir.");

        if(!strcmp(sifre, "-1", true)) SunucuMesaji(playerid, "%d nolu gatenin þifresini kaldýrdýnýz.", id);
        else SunucuMesaji(playerid, "%d nolu gatenin þifresini deðiþtirdiniz.", id);
        format(GateBilgi[id][gatePass], 24, sifre);
        return GateDuzenle(id);
    }
    else if(!strcmp(type, "gise", true))
    {
        if(!GateBilgi[id][GateGise])
        {
            GateBilgi[id][GateGise] = 1;
            new mesaj[32];
            format(mesaj, sizeof(mesaj), "/gise ($%d)", SunucuBilgi[TollTax]);
            GateBilgi[id][GiseLabel] = CreateDynamic3DTextLabel(mesaj, COLOR_WHITE, GateBilgi[id][gateClosePX], GateBilgi[id][gateClosePY], GateBilgi[id][gateClosePZ]+0.6, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0, -1);
            GateBilgi[id][GiseDurum] = false;
            SunucuMesaji(playerid, "%d nolu gateyi giþeye dönüþtürdünüz.", id);
        }
        else
        {
            GateBilgi[id][GateGise] = 0;
            DestroyDynamic3DTextLabelEx(GateBilgi[id][GiseLabel]);
            SunucuMesaji(playerid, "%d nolu giþeyi gateye çevirdiniz.", id);
        }
        return GateDuzenle(id);
    }
    else HataMesajiC(playerid, "Hatalý fonksiyon ismi girdiniz.");
    return 1;
}

CMD:bcreate(playerid, params[])
{
    new price,
        type,
        buildingid = Iter_Free(Buildings),
        Float:x,
        Float:y,
        Float:z,
        Float:a,
        name[32];

    if(buildingid >= MAX_BUILDINGS)return
        SunucuMesaji(playerid, "Ýþletme limitine ulaþýldý.");

    if(sscanf(params, "dds[32]", price, type, name))
    {
        KullanimMesajiC(playerid, "/bcreate [fiyat] [tip] [isim]");
        SendClientMessageEx(playerid, COLOR_GREY, "[Tipler] 0: Libero - 1: Store - 2: Cluckin Bell - 3: Pizza Stack - 4: Burger Shot - 5: Kýyafet Dükkaný - 6: Eðlence - 7: Bina - 8: Apartman - 9: Yayýn ofisi - 10: Banka - 11: Ammunation");
        return SendClientMessageEx(playerid, COLOR_GREY, "[Tipler] 12: Blackmarket - 13: PNS - 14: Benzinlik - 15: Garaj - 16: Tamirhane - 18: Özel - 19: Kumarhane - 20: Klinik / Hastane - 21: ganyan");
    }

    if(price < 1 || price > 100000000)return
        SunucuMesaji(playerid, "Geçersiz deðer. ($1 - $100000000)");

    if(type < 0 || type >= MAX_TYPES)return
        HataMesaji(playerid, "Geçersiz seçenek. (0 - %d)", MAX_TYPES-1);

    if(!strlen(name) || strlen(name) > 32)return
        SunucuMesaji(playerid, "En çok 32 karakterden oluþan bir isim girin.");

    GetPlayerPos(playerid, x, y, z);
    GetPlayerFacingAngle(playerid, a);
    format(BuildingInfo[buildingid][bName],32,name);

    BuildingInfo[buildingid][bExists] = 1;
    BuildingInfo[buildingid][bOwner] = 0;
    BuildingInfo[buildingid][bFaction] = -1;
    BuildingInfo[buildingid][bVergi] = 0;

    BuildingInfo[buildingid][bPosX] = x;
    BuildingInfo[buildingid][bPosY] = y;
    BuildingInfo[buildingid][bPosZ] = z;
    BuildingInfo[buildingid][bPosA] = a;
    BuildingInfo[buildingid][bPosWorld] = GetPlayerVirtualWorld(playerid);
    BuildingInfo[buildingid][bPosInterior] = GetPlayerInterior(playerid);

    BuildingInfo[buildingid][bPosIntX] = 0.0;
    BuildingInfo[buildingid][bPosIntY] = 0.0;
    BuildingInfo[buildingid][bPosIntZ] = 0.0;
    BuildingInfo[buildingid][bInterior] = 0;

    BuildingInfo[buildingid][bLocked] = 0;
    BuildingInfo[buildingid][bCash] = 0;
    BuildingInfo[buildingid][bPrice] = price;
    BuildingInfo[buildingid][bType] = type;
    BuildingInfo[buildingid][bCeza] = 0;
    BuildingInfo[buildingid][bDekor] = 0;
    BuildingInfo[buildingid][bProducts] = 500;
    BuildingInfo[buildingid][bMuhurlu] = 0;
    BuildingInfo[buildingid][bPickup] = Pickup_Create(ELEMENT_BUILDING, buildingid, (BuildingInfo[buildingid][bType] == COMPLEX) ? 1314 : 1239, 23, BuildingInfo[buildingid][bPosX], BuildingInfo[buildingid][bPosY], BuildingInfo[buildingid][bPosZ], BuildingInfo[buildingid][bPosWorld], BuildingInfo[buildingid][bPosInterior]);
    BuildingInfo[buildingid][bLabel] = CreateDynamic3DTextLabel(BuildingInfo[buildingid][bName], COLOR_WHITE, BuildingInfo[buildingid][bPosX], BuildingInfo[buildingid][bPosY], BuildingInfo[buildingid][bPosZ]+0.4, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, BuildingInfo[buildingid][bPosWorld], BuildingInfo[buildingid][bPosInterior], -1);

    new count;

    for(new j, js = sizeof(ProductInfo); j < js; j++)
    {
        if(ProductInfo[j][productBiz] != type)continue;
        BuildingInfo[buildingid][bPrices][count] = ProductInfo[j][productPrice];
        count++;
    }

    mysql_format(ourConnection, queryx, sizeof(queryx), "INSERT INTO buildings (name, price, pos_x, pos_y, pos_z, pos_a, pos_int_x, pos_int_y, pos_int_z, interior, pos_world, pos_interior, type) VALUES ('%e', '%d', '%f', '%f', '%f', '%f', '%f', '%f', '%f', '%d', '%d', '%d', '%d')",
    BuildingInfo[buildingid][bName],
    BuildingInfo[buildingid][bPrice],
    BuildingInfo[buildingid][bPosX],
    BuildingInfo[buildingid][bPosY],
    BuildingInfo[buildingid][bPosZ],
    BuildingInfo[buildingid][bPosA],
    BuildingInfo[buildingid][bPosIntX],
    BuildingInfo[buildingid][bPosIntY],
    BuildingInfo[buildingid][bPosIntZ],
    BuildingInfo[buildingid][bInterior],
    BuildingInfo[buildingid][bPosWorld],
    BuildingInfo[buildingid][bPosInterior],
    BuildingInfo[buildingid][bType]);

    mysql_tquery(ourConnection, queryx, "OnQueryFinished", "dd", buildingid, THREAD_CREATE_BUILDING);

    SendAdminAlert(false, COLOR_ADMIN, "AdmCmd: %s, %d ID'li (tip: %d) iþletmeyi oluþturdu. Fiyat: $%d.", ReturnRoleplayName(playerid), buildingid, type, price);

    LogYaz(playerid, "/bcreate", -1, buildingid, price);

    Iter_Add(Buildings, buildingid);

    return 1;
}

CMD:interiorgit(playerid)
{
    new string[2050];
    for(new i; i < sizeof(IsyeriInterior); i++) format(string, sizeof(string), "%s\n%s", string, IsyeriInterior[i][interior_isim]);
    Dialog_Show(playerid, DialogInterioraGit, DIALOG_STYLE_LIST, "{E67226}Interiorlar", string, "Seç", "Ýptal");
    return 1;
}

CMD:ageridon(playerid) {
    if(!GetPVarInt(playerid, "Isinlandi")) return HataMesajiC(playerid, "Bir interiora ýþýnlanmamýþsýnýz.");
    SetPlayerPos(playerid, GetPVarFloat(playerid, "EskiX"), GetPVarFloat(playerid, "EskiY"), GetPVarFloat(playerid, "EskiZ"));
    SetPlayerInterior(playerid, GetPVarInt(playerid, "EskiINT"));
    AC_SetPlayerVirtualWorld(playerid, GetPVarInt(playerid, "EskiVW"));
    DeletePVar(playerid, "EskiX");
    DeletePVar(playerid, "EskiY");
    DeletePVar(playerid, "EskiZ");
    DeletePVar(playerid, "EskiINT");
    DeletePVar(playerid, "EskiVW");
    DeletePVar(playerid, "Isinlandi");
    return 1;
}

CMD:bdelete(playerid, params[])
{
    new buildingid;

    if(sscanf(params, "d", buildingid))return
        KullanimMesajiC(playerid, "/bdelete [id]");

    if(buildingid < 0 || buildingid >= MAX_BUILDINGS || !BuildingInfo[buildingid][bExists])return
        SunucuMesaji(playerid, "Varolmayan bina.");

    BuildingInfo[buildingid][bExists] = 0;
    BuildingInfo[buildingid][bOwner] = 0;
    
    BuildingInfo[buildingid][bDekor] = 0;

    BuildingInfo[buildingid][bPosX] = 0.0;
    BuildingInfo[buildingid][bPosY] = 0.0;
    BuildingInfo[buildingid][bPosZ] = 0.0;
    BuildingInfo[buildingid][bPosA] = 0.0;
    BuildingInfo[buildingid][bPosWorld] = 0;
    BuildingInfo[buildingid][bPosInterior] = 0;

    BuildingInfo[buildingid][bPosIntX] = 0.0;
    BuildingInfo[buildingid][bPosIntY] = 0.0;
    BuildingInfo[buildingid][bPosIntZ] = 0.0;
    BuildingInfo[buildingid][bInterior] = 0;

    BuildingInfo[buildingid][bLocked] = 0;
    BuildingInfo[buildingid][bCash] = 0;
    BuildingInfo[buildingid][bPrice] = 0;
    BuildingInfo[buildingid][bEntrance] = 0;

    IsletmeCalisanlariSifirla(buildingid);
    IsletmeUrunleriSifirla(buildingid);
    Pickup_Destroy(BuildingInfo[buildingid][bPickup]);
    DestroyDynamic3DTextLabelEx(BuildingInfo[buildingid][bLabel]);

    mysql_format(ourConnection, queryx, sizeof(queryx), "DELETE FROM buildings WHERE id = '%d'", BuildingInfo[buildingid][bID]);
    mysql_tquery(ourConnection, queryx);

    mysql_format(ourConnection, queryx, sizeof(queryx), "UPDATE characters SET biz = '%d' WHERE biz = '%d'", -1, buildingid);
    mysql_tquery(ourConnection, queryx);

    mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT * FROM furnitures WHERE world = '%d'", BuildingInfo[buildingid][bWorld]);
    mysql_tquery(ourConnection, queryx, "OnDeleteFurnitures", "ddd", -1, BuildingInfo[buildingid][bWorld], 0);

    if(BuildingInfo[buildingid][bType] == COMPLEX) foreach(new h : Houses) if(HouseInfo[h][hExists] && HouseInfo[h][hComplex] == BuildingInfo[buildingid][bID])
        House_Delete(h);

    SendAdminAlert(false, COLOR_ADMIN, "AdmCmd: %s, %d ID'li iþletmeyi sildi.", ReturnRoleplayName(playerid), buildingid);

    LogYaz(playerid, "/bdelete", -1, buildingid);

    Iter_Remove(Buildings, buildingid);

    return 1;
}

CMD:warn(playerid, params[]) {
    new uid, sebep[128];
    if(sscanf(params, "uS(Yok)[128]", uid, sebep)) return KullanimMesajiC(playerid, "/warn <id/isim> <sebep>");
    if(!IsPlayerConnected(uid) || !PlayerInfo[uid][pLogged] || playerid == uid) return HataMesajiC(playerid, "Hatalý oyuncu girdiniz.");
    PlayerInfo[uid][pUyariSayisi]++;
    SendAworkAlert(false, COLOR_ADMIN, "AdmCmd: %s adlý yönetici %s (%s) adlý oyuncuyu %s sebebiyle uyardý.", ReturnRoleplayName(playerid), ReturnRoleplayName(uid), PlayerInfo[uid][pUsername], sebep);
    if(PlayerInfo[uid][pUyariSayisi] >= 3) {
        PlayerInfo[uid][pUyariSayisi] = 0;
        SaveCharacter(uid);
        mysql_format(ourConnection, queryx, sizeof(queryx), "UPDATE accounts SET banned = '1' WHERE username = '%e'", PlayerInfo[uid][pUsername]);
        mysql_tquery(ourConnection, queryx);

        mysql_format(ourConnection, queryx, sizeof(queryx), "INSERT INTO admin_records (target_id, admin_id, reason, created_at, type) VALUES ('%d', '%d', '%e', NOW(), 'WarnAccount')", PlayerInfo[uid][pID], PlayerInfo[playerid][pID], sebep);
        mysql_tquery(ourConnection, queryx);
        BasariMesaji(uid, "Hesabýn 3 uyarý aldýðý için yasaklandý. Son uyarý sebebin: %s", sebep);
        SetTimerEx("KickTimer", 200, false, "d", uid);
        foreach(new i: Player)
            SendFormattedMessage(i, COLOR_ADMIN, "AdmCmd: %s(%s) adlý oyuncu 3 uyarý sebebiyle 45 gün yasaklandý.", ReturnRoleplayName(uid), PlayerInfo[uid][pUsername]);

        mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT id FROM characters WHERE account_id = '%d'", PlayerInfo[uid][pAccountID]);
//      mysql_tquery(ourConnection, queryx, "OnSearchAccountBannedVehicles");

        LogYaz(playerid, "/warn", uid, -1);
    } else {
        if(PlayerInfo[playerid][pGizliAdmin]) {
            SendFormattedMessage(uid, COLOR_ADMIN, "Bir yönetici seni %s sebebiyle uyardý.", sebep);
        } else {
            SendFormattedMessage(uid, COLOR_ADMIN, "%s(%s) isimli yönetici seni %s sebebiyle uyardý.", ReturnRoleplayName(playerid), PlayerInfo[playerid][pUsername], sebep);
        }
    }
    return 1;
}

CMD:sorukontrol(playerid, params[])
{
    new type = (PlayerInfo[playerid][pAdmin] > SUPPORTER) ? 0 : 1;

    if(!isnull(params) && !strcmp(params, "all", true) && PlayerInfo[playerid][pAdmin] > SUPPORTER)return
        mysql_tquery(ourConnection, "SELECT * FROM staffrequests", "OnListRequestsSearch", "d", playerid);

    mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT * FROM staffrequests WHERE type = '%d' ORDER BY time ASC", type);
    mysql_tquery(ourConnection, queryx, "OnListRequestsSearch", "d", playerid);

    return 1;
}
CMD:raporlar(playerid, params[])
{
    new type = (PlayerInfo[playerid][pAdmin] < GAMEADMIN1) ? 0 : 1;

    if(!isnull(params) && !strcmp(params, "hepsi", true) && PlayerInfo[playerid][pAdmin] > SUPPORTER)return
        mysql_tquery(ourConnection, "SELECT * FROM staffrequests", "OnListRequestsSearch", "d", playerid);

    mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT * FROM staffrequests WHERE type = '%d' ORDER BY time ASC", type);
    mysql_tquery(ourConnection, queryx, "OnListRequestsSearch", "d", playerid);

    return 1;
}
CMD:sorular(playerid, params[])return pc_cmd_raporlar(playerid,params);

CMD:reklamlar(playerid) {
    new dialogString[2048], count = 0;
    foreach(new i: Reklamlar) {
        if(ReklamInfo[i][reklamExists]) {
            format(dialogString, sizeof dialogString, "%s{ffffff}%d\t{ffffff}%s\n", dialogString, ReklamInfo[i][reklamID], ReklamInfo[i][reklamYapan]);
            PlayerInfo[playerid][pReklamID][count] = ReklamInfo[i][reklamID];
            count++;
        }
    }
    if(count == 0) return HataMesajiC(playerid, "Gösterilebilecek bir reklam yok.");
    Dialog_Show(playerid, DialogReklamList, DIALOG_STYLE_TABLIST_HEADERS, "Reklam Listesi", "Reklam ID\tReklamý Yapan\n%s", "Seçenekler", "Ýptal", dialogString);
    return 1;
}


CMD:ar(playerid, params[])return pc_cmd_raporkabul(playerid, params);
CMD:raporkabul(playerid, params[])
{
    new id;

    if(sscanf(params, "d", id))return
        KullanimMesajiC(playerid, "/raporkabul [r-id]");

    Request_Accept(playerid, id);

    return 1;
}

flags:forumayolla(CMD_SUPPORTER);
flags:stf(CMD_SUPPORTER);
CMD:forumayolla(playerid, params[])return pc_cmd_stf(playerid, params);
CMD:stf(playerid, params[])
{
    new id;

    if(sscanf(params, "d", id))return
        KullanimMesajiC(playerid, "/forumayolla [r-id]");

    Request_ForumaYolla(playerid, id);

    return 1;
}
CMD:raporred(playerid, params[])
{
    new id, reason[80];

    if(sscanf(params, "ds[80]", id, reason))return
        KullanimMesajiC(playerid, "/raporred [r-id] [sebep]");

    format(PlayerInfo[playerid][pText], 256, reason);
    Request_Refuse(playerid, id);

    return 1;
}
CMD:rc(playerid, params[]) return pc_cmd_raporcevap(playerid, params);
CMD:raporcevap(playerid, params[])
{
    new id, reason[80];

    if(sscanf(params, "ds[80]", id, reason))return
        KullanimMesajiC(playerid, "/raporcevap [r-id] [sebep]");

    format(PlayerInfo[playerid][pText], 256, reason);
    RaporCevap(playerid, id);

    return 1;
}
CMD:raporiptal(playerid) return pc_cmd_taleplerim(playerid);
CMD:soruiptal(playerid) return pc_cmd_taleplerim(playerid);
CMD:talepiptal(playerid) return pc_cmd_taleplerim(playerid);
CMD:taleplerim(playerid)
{
    if(!PlayerInfo[playerid][pRequestCount])return
        SunucuMesaji(playerid, "Bekleyen isteðin bulunmuyor.");

    Request_Reset(playerid);
    SunucuMesaji(playerid, "Gönderdiðin talep iptal edildi.");
    return 1;
}
CMD:rapor(playerid, params[])
{
    if(PlayerInfo[playerid][pRequestCount] >= MAX_REQUESTS_FOR_PLAYER)return
        HataMesaji(playerid, "Yanýtlanmamýþ bir talebin varken soru gönderemezsin. (/talepiptal)");

    if(isnull(params) || strlen(params) > 200)return
        KullanimMesajiC(playerid, "/rapor [yazý]");

    format(PlayerInfo[playerid][pTmpText], 256, params);

    new string[1024] = "Bu raporu göndermek istediðinden emin misin?\n\
    Bu raporun yöneticilere gideceðini unutmayýn. Daha önemsiz bir isteðiniz için /sorusor kullanabilirsiniz.\n\
    {FF6347}Bir bugta olduðunuzu düþünüyorsanýz: {FFFFFF}/bugkurtar{FF6347} komutunu kullanarak kurtulabilirsiniz.\n\
    {FF6347}Aþaðýdaki raporu göndermek istediðinizden emin misiniz? (Uygunsuz mesajýn / raporun cezalandýrýlabileceðini unutmayýn)\n";

    format(string, sizeof(string), "{FFFFFF}%sGönderilen Rapor: %s", string, PlayerInfo[playerid][pTmpText]);
    Dialog_Show(playerid, DialogConfirmDom, DIALOG_STYLE_MSGBOX, "Rapor Gönderme Politikasý", string, "Gönder", "Ýptal");

    return 1;
}

YasakliBolgeler(playerid)
{
    if(IsPlayerInRangeOfPoint(playerid, 100.0, 1476.213256, -1414.097534, 38.769855) || IsPlayerInRangeOfPoint(playerid, 100.0, 287.410888, -1609.440185, 69.780876))
        return 1;

    return 0;
}

CMD:silahbilgi(playerid, params[])
{
    new weapons[12], ammo[12], p_weapon, p_ammo;
    new str[32], id;

    if(sscanf(params, "u", id)) id = playerid;

    if(!IsPlayerConnected(id) || !PlayerInfo[id][pLogged])return 1;

    for(new j; j < 12; j++)
    {
        GetPlayerWeaponData(id, j, weapons[j], ammo[j]);

        format(str, sizeof(str), "weapon%d", j); p_weapon = GetPVarInt(id, str);
        format(str, sizeof(str), "ammo%d", j); p_ammo = GetPVarInt(id, str);

        if(ammo[j] != 0 || p_ammo != 0)
            BasariMesaji(playerid, "[%s] Weapons IG: %d - %d | Weapons server-side: %d - %d", ReturnRoleplayName(id), weapons[j], ammo[j], p_weapon, p_ammo);
    }
    return 1;
}

CMD:aksesuaral(playerid) return PlayerObjects_ShowCategories(playerid);

CMD:ekiyafetal(playerid) {
    new buildingid = GetPlayerBuilding(playerid, true);

    if(buildingid != -1 && BuildingInfo[buildingid][bType] == CLOTHING)
    {
        if(BuildingInfo[buildingid][bProducts] < 1)return
            SunucuMesaji(playerid, "Bu iþletmede yeterli ürün yok.");
        new pEvSayisi;
        foreach(new h : Houses) if(HouseInfo[h][hExists] && PlayerInfo[playerid][pID] == HouseInfo[h][hOwner]) {
            pEvSayisi = 1;
            break;
        }
        if(pEvSayisi) {
            new houseString[2048];
            foreach(new h : Houses) if(HouseInfo[h][hExists] && PlayerInfo[playerid][pID] == HouseInfo[h][hOwner]) {
                format(houseString, sizeof(houseString), "%s\nID: %d(%s)", houseString, HouseInfo[h][hID], House_GetAddress(h));
            }
            Dialog_Show(playerid, DialogEvKiyafet, DIALOG_STYLE_LIST, "Eve Kýyafet Alma Ev Menüsü", houseString, "Seç", "Ýptal");
        } else return HataMesajiC(playerid, "Bir eviniz yok.");
    }
    else if(IsPlayerInRangeOfPoint(playerid, 5.0, 1096.650512, -1435.518798, 15.787182))
    {
        new pEvSayisi;
        foreach(new h : Houses) if(HouseInfo[h][hExists] && PlayerInfo[playerid][pID] == HouseInfo[h][hOwner]) {
            pEvSayisi = 1;
            break;
        }
        if(pEvSayisi) {
            new houseString[2048];
            foreach(new h : Houses) if(HouseInfo[h][hExists] && PlayerInfo[playerid][pID] == HouseInfo[h][hOwner]) {
                format(houseString, sizeof(houseString), "%s\nID: %d(%s)", houseString, h, House_GetAddress(h));
            }
            Dialog_Show(playerid, DialogEvKiyafet, DIALOG_STYLE_LIST, "Eve Kýyafet Alma Ev Menüsü", houseString, "Seç", "Ýptal");
        } else return HataMesajiC(playerid, "Bir eviniz yok.");
    }
    else return HataMesajiC(playerid, "Bu komutu sadece kýyafet dükkanlarýnda kullanabilirsin.");
    return 1;
}

CMD:kiyafetal(playerid, params[])
{
    new buildingid = GetPlayerBuilding(playerid, true);

    if(buildingid != -1 && BuildingInfo[buildingid][bType] == CLOTHING)
    {
        if(BuildingInfo[buildingid][bProducts] < 1)return
            SunucuMesaji(playerid, "Bu iþletmede yeterli ürün yok.");

        //SunucuMesaji(playerid, "Aþaðýdan bir skin seçin, seçtiðiniz skin size $50'e mâl olacak.");
        if(PlayerInfo[playerid][pSex] == 0 && PlayerInfo[playerid][pTenRengi] == 0)  // erkek beyaz
            ShowModelSelectionMenuEx(playerid, MaleWhite, TOTAL_M_WHITE, "Kiyafetler", TKIYAFET, 16.0, 0.0, -55.0);
        else if(PlayerInfo[playerid][pSex] == 0 && PlayerInfo[playerid][pTenRengi] == 1)  // erkek siyah
            ShowModelSelectionMenuEx(playerid, MaleBlack, TOTAL_M_BLACK, "Kiyafetler", TKIYAFET, 16.0, 0.0, -55.0);

        else if(PlayerInfo[playerid][pSex] == 1 && PlayerInfo[playerid][pTenRengi] == 0)  // kadýn beyaz
            ShowModelSelectionMenuEx(playerid, FemaleWhite, TOTAL_F_WHITE, "Kiyafetler", TKIYAFET, 16.0, 0.0, -55.0);

        else if(PlayerInfo[playerid][pSex] == 1 && PlayerInfo[playerid][pTenRengi] == 1)  // kadýn siyah
            ShowModelSelectionMenuEx(playerid, FemaleBlack, TOTAL_F_BLACK, "Kiyafetler", TKIYAFET, 16.0, 0.0, -55.0);
        SetPVarInt(playerid, "kiyafetaliyor", 1);
        SetPVarInt(playerid, "kiyafetdukkan", buildingid);
    }
    else if(IsPlayerInRangeOfPoint(playerid, 5.0, 1096.650512, -1435.518798, 15.787182))
    {
        //SunucuMesaji(playerid, "Aþaðýdan bir skin seçin, seçtiðiniz skin size $50'e mâl olacak.");
        if(PlayerInfo[playerid][pSex] == 0 && PlayerInfo[playerid][pTenRengi] == 0)  // erkek beyaz
            ShowModelSelectionMenuEx(playerid, MaleWhite, TOTAL_M_WHITE, "Kiyafetler", TKIYAFET, 16.0, 0.0, -55.0);
        else if(PlayerInfo[playerid][pSex] == 0 && PlayerInfo[playerid][pTenRengi] == 1)  // erkek siyah
            ShowModelSelectionMenuEx(playerid, MaleBlack, TOTAL_M_BLACK, "Kiyafetler", TKIYAFET, 16.0, 0.0, -55.0);

        else if(PlayerInfo[playerid][pSex] == 1 && PlayerInfo[playerid][pTenRengi] == 0)  // kadýn beyaz
            ShowModelSelectionMenuEx(playerid, FemaleWhite, TOTAL_F_WHITE, "Kiyafetler", TKIYAFET, 16.0, 0.0, -55.0);

        else if(PlayerInfo[playerid][pSex] == 1 && PlayerInfo[playerid][pTenRengi] == 1)  // kadýn siyah
            ShowModelSelectionMenuEx(playerid, FemaleBlack, TOTAL_F_BLACK, "Kiyafetler", TKIYAFET, 16.0, 0.0, -55.0);
        SetPVarInt(playerid, "choose_item", 0);
        SetPVarInt(playerid, "kiyafetaliyor", 2);
    }
    else HataMesajiC(playerid, "Bu komutu sadece kýyafet dükkanlarýnda kullanabilirsin.");
    return 1;
}

CMD:araccikart(playerid, params[])
{
    if(!IsPlayerInRangeOfPoint(playerid, 2.0, IMPOUND_X, IMPOUND_Y, IMPOUND_Z) && !PlayerInfo[playerid][pAdminDuty])
    {
        AC_SetPlayerCheckpoint(playerid, IMPOUND_X, IMPOUND_Y, IMPOUND_Z, 5.0);
        return HataMesajiC(playerid, "Araç serbest býrakma noktasýnda deðilsin.");
    }

    mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT * FROM vehicles_impounded WHERE owner_id = '%d'", PlayerInfo[playerid][pID]);
    mysql_tquery(ourConnection, queryx, "OnUnimpoundVehicleSearch", "d", playerid);
    return 1;
}
CMD:bagliaraclar(playerid, params[])return pc_cmd_araccikart(playerid, params);

CMD:gise(playerid,params[])return pc_cmd_giseac(playerid,params);
CMD:giseac(playerid, params[])
{
    new id = YakindakiGate(playerid);
    if(id != -1)
    {
        if(GateBilgi[id][GateGise] != 1) return HataMesajiC(playerid, "Giþeye yakýn deðilsiniz.");
        if(GateBilgi[id][gateOpened]) return HataMesajiC(playerid, "Giþeyi açmak için önce giþenin kapanmasýný bekleyiniz.");
        if(GateBilgi[id][GiseDurum]) return HataMesajiC(playerid, "Bu giþe þu anda kapalý, geçiþ yapamazsýnýz.");

        if(!PlayerInfo[playerid][pFactionDuty])
        {
            if(PlayerInfo[playerid][pPremium] != 5)
            {
                if(PlayerInfo[playerid][pCash] < SunucuBilgi[TollTax])return
                    HataMesaji(playerid, "Yeterli paranýz yok. ($%d)", SunucuBilgi[TollTax]);

                OAC_GivePlayerMoney(playerid, -SunucuBilgi[TollTax]);
                new string[124];
                format(string, 124, "giþe memuruna $%d para uzatýr.", SunucuBilgi[TollTax]);
                PlayerAME(playerid, string);
                Faction_GovernmentCash(SunucuBilgi[TollTax]);
            }
        }

        GateBilgi[id][gateOpened] = true;
        MoveDynamicObject(GateBilgi[id][gateObject], GateBilgi[id][gateOpenPX], GateBilgi[id][gateOpenPY], GateBilgi[id][gateOpenPZ], GateBilgi[id][gateHiz], GateBilgi[id][gateOpenRX], GateBilgi[id][gateOpenRY], GateBilgi[id][gateOpenRZ]);

        SendClientMessage(playerid, COLOR_WHITE, "Giþe Memuru: Teþekkürler, dikkatli kullanýn!");
        SendClientMessage(playerid, COLOR_ERROR, "Giþeden geçmeniz için 5 saniyeniz bulunmaktadýr! Dikkatli geçtiðinize emin olun!");
        GateBilgi[id][GiseTimer] = SetTimerEx("CloseToll", 5000, false, "d", id);
    }
    else if(id == -1) HataMesajiC(playerid, "Herhangi bir giþeye yakýn deðilsiniz.");
    return 1;
}

CMD:hapisayril(playerid, params[])
{
    if(PlayerInfo[playerid][pJailTime] != 1)
        return SunucuMesaji(playerid, "Hapis süren bitmedi veya hapiste deðilsin.");

    PlayerInfo[playerid][pForceSpawn] = true;
    PlayerInfo[playerid][pJailTime] = 0;
    PlayerInfo[playerid][pJailC] = 0;
    PlayerTextDrawHide(playerid, PlayerInfo[playerid][pTextdraws][0]);
    TogglePlayerSpectating(playerid, 0);
    TogglePlayerControllable(playerid, true);
    PlayerInfo[playerid][pFreezed] = 0;
    SetCameraBehindPlayer(playerid);
    PlayerSpectatePlayer(playerid, INVALID_PLAYER_ID);
    PlayerSpectateVehicle(playerid, INVALID_VEHICLE_ID);
    PlayerInfo[playerid][pInRecon] = -1;
    AC_ResetTimer(playerid);
    SetCameraBehindPlayer(playerid);
    PreloadAnimations(playerid);
    SetPlayerPos(playerid, SPAWN_X, SPAWN_Y, SPAWN_Z);
    SetPlayerFacingAngle(playerid, SPAWN_A);
    SetPlayerInterior(playerid, 0);
    AC_SetPlayerVirtualWorld(playerid, 0);
    BasariMesaji(playerid, "Hapisten çýktýnýz.");
    PlayerInfo[playerid][pHealth] = 100;
    SaveCharacter(playerid);
    ClearAnimations(playerid, 1);
    AC_SetPlayerHealth(playerid, 100);
    Damages_Reset(playerid);
    return 1;
}

CMD:yerdenal(playerid, params[])
{
    if(PlayerInfo[playerid][pEditingMode])return
        SunucuMesaji(playerid, "Düzenleme yaparken bunu yapamazsýn.");

    if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return 1;

    new itemid = Item_Nearest(playerid);
    if(PlayerInfo[playerid][pLevel] < 2) return HataMesajiC(playerid, "Bu iþlemi yapabilmek için en az 2 seviye olmalýsýnýz.");

    if(itemid != -1)
    {
        /*if(Inventory_HasItem(playerid, InventoryObjects[listid][invName], ITEM_WEAPON) > 0)
        {
            return HataMesajiC(playerid, "%s model silah zaten envanterinde mevcut. Yenisini ekleyemezsin.", InventoryObjects[listid][invName]);
        }*/

        Item_Pick(playerid, itemid);
    }
    else return HataMesajiC(playerid, "Yakýnýnda toplayabileceðin eþya yok.");

    return 1;
}

CMD:ruhsatgoster(playerid, params[])
{
    new id, vehicleid = GetPlayerVehicleID(playerid);

    if(!vehicleid || IsABike(vehicleid)) return HataMesajiC(playerid, "Araçta deðilsiniz.");

    if(Vehicle_IsOwner(playerid, vehicleid, false) == 0)
        return HataMesajiC(playerid, "Bu araçta bu komutu kullanamazsýnýz.");

    if(sscanf(params, "k<m>", id)) id = playerid;

    if(!IsPlayerConnected(id) || !PlayerInfo[id][pLogged])return
        HataMesajiC(playerid, "Geçersiz ID.");

    if(!ProxDetectorS(5.0, playerid, id))return
        SunucuMesaji(playerid, "Bu oyuncuya yakýn deðilsin.");

    SendFormattedMessage(id, COLOR_GREEN, "_________________[Araç Ruhsatý]_________________", ReturnRoleplayName(playerid));
    SendFormattedMessage(id, COLOR_GREY, "Araç sahibi: %s", GetCharacterName(VehicleInfo[vehicleid][vOwner]));
    SendFormattedMessage(id, COLOR_GREY, "Araç modeli: %s", GetVehicleModelName(VehicleInfo[vehicleid][vModel]));
    SendFormattedMessage(id, COLOR_GREY, "Araç plakasý: %s", VehicleInfo[vehicleid][vPlate]);

    if(playerid != id) PlayerMEPlayer(playerid, id, "kiþisine aracýnýn ruhsatýný gösterir");

    return 1;
}

CMD:lisansgoster(playerid, params[])
{
    new id;

    if(sscanf(params, "k<m>", id)) id = playerid;

    if(!IsPlayerConnected(id) || !PlayerInfo[id][pLogged])return
        HataMesajiC(playerid, "Geçersiz ID.");

    if(!ProxDetectorS(5.0, playerid, id))return
        SunucuMesaji(playerid, "Bu oyuncuya yakýn deðilsin.");

    static const statusStr[][32] = {"Mevcut Deðil", "Mevcut"};
    static const gunLicenseStr[][32] = {"Mevcut Deðil", "Sivil", "Devlet"};

    new gunLicenseExpires[24];

    if(PlayerInfo[playerid][pWeaponsLicense][0] != 0)
        format(gunLicenseExpires, sizeof(gunLicenseExpires), " [%s - %s]", timec(PlayerInfo[playerid][pWeaponsLicense][1]), (gettime() > PlayerInfo[playerid][pWeaponsLicense][1]) ? ("Geçersiz") : ("Geçerli"));

    SendFormattedMessage(id, COLOR_GREEN, "_________________[%s adýna kayýtlý lisanslar]_________________", ReturnRoleplayName(playerid));
    SendFormattedMessage(id, COLOR_GREY, "Ehliyet: %s - Deniz Lisansý: %s - Uçuþ Lisansý: %s", statusStr[PlayerInfo[playerid][pLicenses][0]], statusStr[PlayerInfo[playerid][pLicenses][1]], statusStr[PlayerInfo[playerid][pLicenses][2]]);
    SendFormattedMessage(id, COLOR_GREY, "CCW Lisansý: %s%s", gunLicenseStr[PlayerInfo[playerid][pWeaponsLicense][0]], gunLicenseExpires);
    //SendFormattedMessage(id, COLOR_GREY, "OCW Lisansi: %s", PlayerInfo[playerid][pGuvenlik] ? ("Mevcut") : ("Mevcut deðil"));
    SendFormattedMessage(id, COLOR_GREY, "Güvenlik Sertifikasý: %s", PlayerInfo[playerid][pGuvenlikLisansi] ? ("Mevcut") : ("Mevcut deðil"));
    if(playerid != id) PlayerMEPlayer(playerid, id, "kiþisine lisanslarýný gösterir");

    return 1;
}

CMD:hasarlar(playerid, params[])
{
    new id;

    if(strlen(params) <= 0) id = playerid;

    else if(sscanf(params, "k<m>", id))return
        KullanimMesajiC(playerid, "/hasarlar [id/isim]");

    if(!IsPlayerConnected(id) || !PlayerInfo[id][pLogged])return
        HataMesajiC(playerid, "Geçersiz ID.");

    if(!ProxDetectorS(5.0, playerid, id))return
        SunucuMesaji(playerid, "Bu oyuncuya yakýn deðilsin.");

    new damagesString[1024] = "Ýsim\tSilah\tHasar\tBölgesi\n";

    for(new i; i < MAX_DAMAGES_FOR_PLAYER; i++)
    {
        if(!PlayerDamages[id][i][eOccupied] || PlayerDamages[id][i][eAmount] < 1) continue;
        format(damagesString, sizeof(damagesString), "%s%s\t%s\t%d\t%s\n", damagesString, PlayerDamages[id][i][eIssuer], GetWeaponNameByID(PlayerDamages[id][i][eWeapon]), PlayerDamages[id][i][eAmount], PlayerDamages[id][i][eBodypart]);
    }

    Dialog_Show(playerid, DialogNull, DIALOG_STYLE_TABLIST_HEADERS, ReturnRoleplayName(id), damagesString, "Ýleri", "");

    return 1;
}

CMD:casino(playerid, params[])
{
    new option[20];
    new amount;
    new buildingid = GetPlayerBuilding(playerid, true);
    if(buildingid == -1)return
        HataMesajiC(playerid, "Bu komutu sadece kumarhanelerin içerisinde kullanabilirsin.");

    if(sscanf(params, "s[20]D(-1)", option, amount))return
        KullanimMesajiC(playerid, "/casino [cevir - oyna - durdur]");

    new gameid = PlayerInfo[playerid][pCurrentGameID];

    if(!strcmp(option, "cevir", true))
    {
        if(buildingid != -1 && BuildingInfo[buildingid][bCash] < 25)return
            HataMesajiC(playerid, "Kasada yeterli para yok.");

        if(PlayerInfo[playerid][pCurrentGameID] == -1)return
            SunucuMesaji(playerid, "Bir oyuna yakýn deðilsin.");

        if(GameInfo[gameid][gameType] != 1)return
            SunucuMesaji(playerid, "Bir slot makinesine yakýn deðilsin.");

        if(PlayerInfo[playerid][pCash] < SunucuBilgi[CasinoCevir])return
            SunucuMesaji(playerid, "Yeterli paran yok. ($%d)", SunucuBilgi[CasinoCevir]);

        Casino_StartSlotMachine(playerid);
    }
    else if(!strcmp(option, "oyna", true))
    {
        if(PlayerInfo[playerid][pInCasinoWheel])return
            SunucuMesaji(playerid, "Zaten oynuyorsun.");

        if(PlayerInfo[playerid][pCurrentGameID] == -1)return
            SunucuMesaji(playerid, "Bir oyuna yakýn deðilsin.");

        if(GameInfo[gameid][gameType] != 0)return
            SunucuMesaji(playerid, "Çarka yakýn deðilsin.");

        if(buildingid != -1 && BuildingInfo[buildingid][bCash] < amount)return
            HataMesajiC(playerid, "Kasada yeterli para yok.");

        if(amount == -1 || amount < 250 || amount > 5000)return
            KullanimMesajiC(playerid, "/casino [oyna] [bahis($250 - $5000)]");

        if(PlayerInfo[playerid][pCash] < amount)return
            HataMesaji(playerid, "Yeterli paran yok. ($%d)", amount);

        SunucuMesaji(playerid, "Servet çarkýna hoþgeldin! Burada beþ renkten birini seçip ona yoðunlaþabilirsin.");
        SunucuMesaji(playerid, "Kazançlar seçtiðiniz renge göre deðiþiklik gösterir. Eðer servet çarký seçtiðiniz..");
        SunucuMesaji(playerid, "... renk üzerinde bahsinizi ($%d) renkle çarpýn:", amount);
        SunucuMesaji(playerid, "Kýrmýzý: x6 - Sarý: x5 - Yeþil: x4 - Mor: x2");
        SunucuMesaji(playerid, "Hangi rengi seçmek istiyorsun? Kýrmýzý, sarý, yeþil, mor?");
        SendClientMessage(playerid, COLOR_ERROR, "UYARI: Mavi renk size para kazandýrmayacaktýr.");

        PlayerInfo[playerid][pInCasinoWheel] = 1;
        PlayerInfo[playerid][pCasinoWheelBet] = amount;
    }
    else if(!strcmp(option, "durdur", true))
    {
        if(!PlayerInfo[playerid][pInCasinoWheel])return HataMesajiC(playerid, "Servet çarkýyla oynamýyorsun.");

        BasariMesaji(playerid, "Oyun durduruldu.");

        PlayerInfo[playerid][pInCasinoWheel] = PlayerInfo[playerid][pCasinoWheelBet] = 0;
    }
    else return
        HataMesajiC(playerid, "Geçersiz parametre.");

    return 1;
}

CMD:etkilesim(playerid) {
    new building = GetPlayerBuilding(playerid, true);
    if(IsPlayerInRangeOfPoint(playerid, 5.0, 1110.6406,-1802.3993,2111.5696)) { // sigorta NPC
        new diyalog[128];
        format(diyalog, sizeof diyalog, "Lucy Smith: Los Santos City olarak Mors Mutual Insurance ile anlaþmalýyýz. Mors Mutual Insurance'ýn sigorta poliçelerini size göstereyim. Devam etmek için imzanýz gerekiyor.");
        SendClientMessageEx(playerid, COLOR_FADE1, diyalog);
        SunucuMesajiC(playerid, "Çýkan diyaloðu okuyup hazýr olduðunuzda devam edebilirsiniz.");
        Dialog_Show(playerid, DialogSigortaBilgi, DIALOG_STYLE_MSGBOX, "Mors Mutual Insurance", "{FFFFFF}Los Santos City'de 2 adet sigorta çeþidi bulunmaktadýr. Bu sigortalar seviye sistemiyle de düþünülebilir.\nBirinci seviye sigorta basit sigortadýr, aracýnýz için sigorta çýkartýlýr fakat sadece kanuni olarak yükümlülükten kurtulmak içindir.\nÝkinci seviye sigorta ileri sigortadýr, aracýnýz hem basit sigortadan yararlanýr hem de Pay'n'Spray iþletmelerinde yüzde 25lik bir indirim alýr.\nBirinci seviye sigortanýn fiyatý araç stok fiyatýnýn yüzde 10'u, ikinci seviye sigortanýn fiyatý ise araç stok fiyatýnýn yüzde 20'sidir.\nÖrneðin $200.000 fiyatý olan bir araç için ikinci seviye sigorta fiyatý $40.000'dir, birinci seviye sigorta fiyatý ise $20.000'dir.\n", "Devam Et", "Ýstemiyorum");
        return 1;
    }
    else if(building != -1 && BuildingInfo[building][bType] == GANYAN) { // ganyan NPC
        Dialog_Show(playerid, DialogGanyanSecenek, DIALOG_STYLE_LIST, "Ganyan", "Bilet Al\nKazancýný Topla", "Seç", "Ýptal");
        SendClientMessageEx(playerid, COLOR_FADE3, "Görevli: Bayimize hoþ geldiniz, ne yapmak istersiniz?");
    }
    else if(IsPlayerInRangeOfPoint(playerid, 5.0, 1122.9252,-1813.5692,2111.5696)) { // gov NPC
        new diyalog[128];
        format(diyalog, sizeof diyalog, "Harvey Knight: Los Santos City Hall'a hoþgeldin. Size nasýl yardýmcý olabilirim?");
        SendClientMessageEx(playerid, COLOR_FADE1, diyalog);
        Dialog_Show(playerid, DialogCityHallNPC, DIALOG_STYLE_LIST, "City Hall", "Oy ver\nVergi Öde\nCezalarýmý Görüntüle", "Seç", "Ýptal");
    } else return HataMesajiC(playerid, "Etkileþime geçebileceðin bir NPC'ye yakýn deðilsin.");
    return 1;
}

Dialog:DialogCityHallNPC(playerid, response, listitem, inputtext[]) {
    if(!response) return 1;
    switch(listitem) {
        case 0: return pc_cmd_oyver(playerid, "");
        case 1: return pc_cmd_vergiode(playerid);
        case 2: return pc_cmd_cezalarim(playerid, "");
    }
    return 1;
}

Dialog:DialogGanyanSecenek(playerid, response, listitem, inputtext[]) {
    if(!response) return 1;
    switch(listitem) {
        case 0: { // bilet al
            if(PlayerInfo[playerid][pYatirdigiAt] != -1) return SendClientMessageEx(playerid, COLOR_FADE3, "Görevli: Dostum zaten bir bilet almýþsýn, önce oynanmasýný bekle, amma sabýrsýzsýn!");
            if(PlayerInfo[playerid][pBahisKazandi] != 0) return SendClientMessageEx(playerid, COLOR_FADE3, "Görevli: Dostum önceki yarýþtan kalma kazancýn var önce onu bizden al.");
            Dialog_Show(playerid, DialogGanyanMiktar, DIALOG_STYLE_INPUT, "Ganyan", "Ne kadar para yatýrmak istediðini aþaðýdaki kutuya sayýsal olarak gir, en az $10 en fazla $5000 yatýrabilirsin:", "Tamam", "<< Geri");
            SendClientMessageEx(playerid, COLOR_FADE3, "Görevli: Pekala, size bir bilet ayarlayalým hemen. Ne kadar yatýrmak istiyorsunuz?");
        }
        case 1: { // kazanç al
            if(!PlayerInfo[playerid][pBahisKazandi]) return SendClientMessageEx(playerid, COLOR_FADE3, "Görevli: Bir þey kazanmamýþsýnýz, benimle dalga mý geçiyorsunuz?");
            AC_GivePlayerMoney(playerid, PlayerInfo[playerid][pYatirdigiBahis] * PlayerInfo[playerid][pBahisKazandi], "bahis kazandi");
            SunucuMesaji(playerid, "Yarýþý kazandýðýnýz için $%d aldýnýz.", PlayerInfo[playerid][pYatirdigiBahis] * PlayerInfo[playerid][pBahisKazandi]);
            SendClientMessageEx(playerid, COLOR_FADE3, "Görevli: Buyrun paranýz, saymayý unutmayýn yanlýþlýk olsun istemeyiz.(güler)");
            PlayerInfo[playerid][pYatirdigiBahis] = 0;
            PlayerInfo[playerid][pBahisKazandi] = 0;
        }
    }
    return 1;
}

Dialog:DialogGanyanMiktar(playerid, response, listitem, inputtext[]) {
    if(!response) return Dialog_Show(playerid, DialogGanyanSecenek, DIALOG_STYLE_LIST, "Ganyan", "Bilet Al", "Kazancýný topla", "Seç", "Ýptal");
    if(!strlen(inputtext)) {
        Dialog_Show(playerid, DialogGanyanMiktar, DIALOG_STYLE_INPUT, "Ganyan", "Kutu boþ býrakýlamaz.\nNe kadar para yatýrmak istediðini aþaðýdaki kutuya sayýsal olarak gir, en az $10 en fazla $5000 yatýrabilirsin:", "Tamam", "<< Geri");
        return SendClientMessageEx(playerid, COLOR_FADE3, "Görevli: Üzgünüm, istediðiniz miktarý anlayamadým. Tekrar söyler misiniz?");
    } 
    if(!IsNumeric(inputtext)) {
        Dialog_Show(playerid, DialogGanyanMiktar, DIALOG_STYLE_INPUT, "Ganyan", "Sayýsal deðer girin.\nNe kadar para yatýrmak istediðini aþaðýdaki kutuya sayýsal olarak gir, en az $10 en fazla $5000 yatýrabilirsin:", "Tamam", "<< Geri");
        return SendClientMessageEx(playerid, COLOR_FADE3, "Görevli: Üzgünüm, istediðiniz miktarý anlayamadým. Tekrar söyler misiniz?");
    }
    if(strval(inputtext) < 10 || strval(inputtext) > 5000) {
        Dialog_Show(playerid, DialogGanyanMiktar, DIALOG_STYLE_INPUT, "Ganyan", "10'dan küçük 5000'den büyük bir sayý giremezsiniz.\nNe kadar para yatýrmak istediðini aþaðýdaki kutuya sayýsal olarak gir, en az $10 en fazla $5000 yatýrabilirsin:", "Tamam", "<< Geri");
        return SendClientMessageEx(playerid, COLOR_FADE3, "Görevli: Söylediðiniz miktar kurallarýmýza uymuyor, lütfen 10 ile 5000 arasýnda bir deðer söyleyin.");
    }
    if(PlayerInfo[playerid][pCash] < strval(inputtext) + 200) {
        Dialog_Show(playerid, DialogGanyanMiktar, DIALOG_STYLE_INPUT, "Ganyan", "Üstünüzde o kadar para yok.(Belirttiðiniz miktarýn üstüne $200 olan bilet parasýnýn da kesileceðini unutmayýn.)\nNe kadar para yatýrmak istediðini aþaðýdaki kutuya sayýsal olarak gir, en az $10 en fazla $5000 yatýrabilirsin:", "Tamam", "<< Geri");
        return SendClientMessageEx(playerid, COLOR_FADE3, "Görevli: Dostum, pek o miktarý verebileceðe benzemiyorsun. Daha küçük bir miktara ne dersin?");
    }
    if(!bahisAktif || bahisOyunAktif || bahisHazirlikAktif) return SendClientMessageEx(playerid, COLOR_FADE3, "Görevli: Üzgünüm dostum fakat bilet alýmlarý þu an kapalý.");
    SetPVarInt(playerid, "BahisMiktar", strval(inputtext));
    SendFormattedMessage(playerid, COLOR_FADE3, "Görevli: $%d, huh? Beðendim, hangi ata oynamak istersin dostum?", strval(inputtext));
    new strDialog[180];
    for(new i; i < MAX_YARIS_ATI; i++) {
        if(i != MAX_YARIS_ATI-1) {
            format(strDialog, sizeof strDialog,"%s%s\n", strDialog, atIsimleri[i]);
        } else {
            format(strDialog, sizeof strDialog,"%s%s", strDialog, atIsimleri[i]);
        }
    }
    Dialog_Show(playerid, DialogGanyanAt, DIALOG_STYLE_LIST, "Yarýþ Atlarý", strDialog, "Seç", "<< Geri");
    return 1;
}

Dialog:DialogGanyanAt(playerid, response, listitem, inputtext[]) {
    if(!response) {
        DeletePVar(playerid, "BahisMiktar");
        Dialog_Show(playerid, DialogGanyanMiktar, DIALOG_STYLE_INPUT, "Ganyan", "Ne kadar para yatýrmak istediðini aþaðýdaki kutuya sayýsal olarak gir, en az $10 en fazla $5000 yatýrabilirsin:", "Tamam", "<< Geri");
        SendClientMessageEx(playerid, COLOR_FADE3, "Görevli: Demek verdiðin miktarý beðenmedin. Pekala o halde, ne kadar istersin?");
        return 1;
    }
    new paraBahis = GetPVarInt(playerid, "BahisMiktar");
    DeletePVar(playerid, "BahisMiktar");
    if(PlayerInfo[playerid][pCash] < paraBahis + 200) {
        Dialog_Show(playerid, DialogGanyanMiktar, DIALOG_STYLE_INPUT, "Ganyan", "Üstünüzde o kadar para yok.(Belirttiðiniz miktarýn üstüne $200 olan bilet parasýnýn da kesileceðini unutmayýn.)\nNe kadar para yatýrmak istediðini aþaðýdaki kutuya sayýsal olarak gir, en az $10 en fazla $5000 yatýrabilirsin:", "Tamam", "<< Geri");
        return SendClientMessageEx(playerid, COLOR_FADE3, "Görevli: Dostum, pek o miktarý verebileceðe benzemiyorsun. Daha küçük bir miktara ne dersin?");
    }
    if(!bahisAktif || bahisOyunAktif || bahisHazirlikAktif) return SendClientMessageEx(playerid, COLOR_FADE3, "Görevli: Üzgünüm dostum fakat bilet alýmlarý þu an kapalý.");
    PlayerInfo[playerid][pYatirdigiAt] = listitem;
    PlayerInfo[playerid][pYatirdigiBahis] = paraBahis;
    PlayerInfo[playerid][pBahisKazandi] = 0;
    AC_GivePlayerMoney(playerid, -(paraBahis+200), "bahis yapti");
    SendClientMessageEx(playerid, COLOR_FADE3, "Görevli: Pekala, biletin hazýr. Oturup yarýþýn baþlamasýný bekleyebilirsin.");
    SunucuMesaji(playerid, "%s isimli ata $%d'lik bahis koydun, ek olarak $200 olan bilet ücreti kesildi.", atIsimleri[listitem], paraBahis);
    return 1;
}


CMD:isletmereklam(playerid, params[]) {
    new buildingid = GetPlayerBuilding(playerid, true);
    if(buildingid == -1) return HataMesajiC(playerid, "Sadece iþletmenizin içinde iþletme reklamý verebilirsiniz.");
    if(BuildingInfo[buildingid][bOwner] != PlayerInfo[playerid][pID] && !HasPlayerUserKey(playerid, KEY_BUILDING, BuildingInfo[buildingid][bID]) && PlayerInfo[playerid][pCalistigiIsyeri][0] != buildingid) return HataMesajiC(playerid, "Reklam verebileceðiniz bir iþyerinde deðilsiniz.");
    new reklam[124];
    if(sscanf(params, "s[124]", reklam)) return KullanimMesajiC(playerid, "/isletmereklam [reklam  yazýsý]");
    if(GetTickCount() - sonIsletmeReklam < 1000 * 60 * 3) return HataMesajiC(playerid, "Her 3 dakikada bir iþletme reklamý verilebilir."); 
    if(sonIsletme == buildingid) return HataMesajiC(playerid, "Son iþletme reklamý sizin iþletmenize ait, diðer iþletmelerin reklam vermesine izin verin.");
    sonIsletmeReklam = GetTickCount();
    sonIsletme = buildingid;
    SunucuMesajiC(playerid, "Ýþletme reklamýnýz yayýnlandý.");
    foreach(new j : Player) 
    {
        if(PlayerInfo[j][pReklam] || !PlayerInfo[j][pLogged])continue;
        SendFormattedMessage(j, COLOR_GREEN, "[Ýþletme Reklamý] %s [%s]", reklam, BuildingInfo[buildingid][bName]);
    }
    SendAworkAlert(false, COLOR_ADMIN, "Reklam veren kullanýcý: %s", ReturnRoleplayName(playerid));
    return 1; 
}

CMD:checkpointekle(playerid) {
    if(PlayerInfo[playerid][pYarisSahibi] == -1) return HataMesajiC(playerid, "Bir yarýþýn sahibi deðilsiniz.");
    new yaris = PlayerInfo[playerid][pYarisSahibi];
    if(YarisInfo[yaris][yarisAktifCheckpoint] >= MAX_YARIS_CHECKPOINT) return HataMesajiC(playerid, "Bu yarýþa daha fazla checkpoint ekleyemezsin.");
    if(YarisInfo[yaris][yarisAktif]) return HataMesajiC(playerid, "Aktif olan bir yarýþa checkpoint ekleyemezsin.");
    new Float:oX, Float:oY, Float:oZ, oInterior, oVW;
    GetPlayerPos(playerid, oX, oY, oZ);
    oInterior = GetPlayerInterior(playerid);
    oVW = GetPlayerVirtualWorld(playerid);
    new oCP = YarisInfo[yaris][yarisAktifCheckpoint];
    YarisInfo[yaris][yarisCheckpointX][oCP] = oX;
    YarisInfo[yaris][yarisCheckpointY][oCP] = oY;
    YarisInfo[yaris][yarisCheckpointZ][oCP] = oZ;
    YarisInfo[yaris][yarisCheckpointInterior][oCP] = oInterior;
    YarisInfo[yaris][yarisCheckpointVirtualWorld][oCP] = oVW;
    YarisInfo[yaris][yarisAktifCheckpoint]++;
    SunucuMesajiC(playerid, "Checkpoint baþarýyla eklendi.");
    return 1;
}

CMD:yaris(playerid, params[]) {
    new opsiyon[32], oyuncuID;
    if(sscanf(params, "s[32]U(-1)", opsiyon, oyuncuID)) return KullanimMesajiC(playerid, "/yaris [ayril/davet/at/baslat]");
    if(PlayerInfo[playerid][pKatildigiYaris] == -1) return HataMesajiC(playerid, "Bu komutu kullanmak için bir yarýþta olmalýsýn.");
    if(!strcmp(opsiyon, "ayril", true)) {
        if(PlayerInfo[playerid][pYarisSahibi] != -1) return HataMesajiC(playerid, "Sahibi olduðunuz bir yarýþtan ayrýlamazsýnýz, yönetimle iletiþime geçin.");
        new yaris = PlayerInfo[playerid][pKatildigiYaris];
        if(PlayerInfo[playerid][pGidilecekCP] != -1) {
            DestroyDynamicRaceCP(PlayerInfo[playerid][pGidilecekCP]);
            PlayerInfo[playerid][pGidilecekCP] = -1;
            YarisInfo[yaris][yarisKatilanSayisi]--;
            if(YarisInfo[yaris][yarisKatilanSayisi] <= 0)
                YarisBitir(yaris);
        }
        PlayerInfo[playerid][pKatildigiYaris] = -1;
        PlayerInfo[playerid][pYarisCP] = -1;
        SunucuMesajiC(playerid, "Yarýþtan baþarýyla ayrýldýn.");
        return 1;
    }
    else if(!strcmp(opsiyon, "davet", true)) {
        if(oyuncuID == -1) return KullanimMesajiC(playerid, "/yaris davet [oyuncu ID/ismi]");
        new yaris = PlayerInfo[playerid][pKatildigiYaris];
        if(YarisInfo[yaris][yarisAktif]) return HataMesajiC(playerid, "Yarýþ baþladýðý için yeni oyuncu davet edemezsin.");
        if(PlayerInfo[playerid][pYarisSahibi] != yaris) return HataMesajiC(playerid, "Yarýþýn sahibi siz deðilsiniz.");
        if(!IsPlayerConnected(oyuncuID) || !PlayerInfo[oyuncuID][pLogged] || oyuncuID == playerid) return HataMesajiC(playerid, "Geçersiz kullanýcý girdiniz.");
        if(PlayerInfo[oyuncuID][pKatildigiYaris] != -1 || PlayerInfo[oyuncuID][pYarisSahibi] != -1) return HataMesajiC(playerid, "Belirttiðiniz oyuncu zaten bir yarýþta.");
        new Float:oyX, Float:oyY, Float:oyZ;
        GetPlayerPos(oyuncuID, oyX, oyY, oyZ);
        if(!IsPlayerInRangeOfPoint(playerid, 5.0, oyX, oyY, oyZ)) return HataMesajiC(playerid, "Belirttiðiniz kullanýcýya yeterince yakýn deðilsiniz.");
        SunucuMesaji(oyuncuID, "%s tarafýndan %s isimli yarýþa alýndýn, ayrýlmak için /yaris ayril yaz.", ReturnRoleplayName(playerid), YarisInfo[yaris][yarisIsmi]);
        SunucuMesaji(playerid, "%s isimli oyuncuyu yarýþa aldýn.", ReturnRoleplayName(oyuncuID));
        PlayerInfo[oyuncuID][pKatildigiYaris] = yaris;
        YarisInfo[yaris][yarisKatilanSayisi]++;
        PlayerInfo[oyuncuID][pYarisCP] = 0;
        DisablePlayerCheckpoint(oyuncuID);
        return 1;
    }
    else if(!strcmp(opsiyon, "at", true)) {
        if(oyuncuID == -1) return KullanimMesajiC(playerid, "/yaris at [oyuncu ID/ismi]");
        new yaris = PlayerInfo[playerid][pKatildigiYaris];
        if(PlayerInfo[playerid][pYarisSahibi] != yaris) return HataMesajiC(playerid, "Yarýþýn sahibi siz deðilsiniz.");
        if(!IsPlayerConnected(oyuncuID) || !PlayerInfo[oyuncuID][pLogged] || oyuncuID == playerid) return HataMesajiC(playerid, "Geçersiz kullanýcý girdiniz.");
        if(PlayerInfo[oyuncuID][pKatildigiYaris] != yaris || PlayerInfo[oyuncuID][pYarisSahibi] != yaris) return HataMesajiC(playerid, "Belirttiðiniz oyuncu zaten yarýþýnýzda deðil.");
        SunucuMesaji(oyuncuID, "%s tarafýndan %s isimli yarýþtan atýldýn.", ReturnRoleplayName(playerid), YarisInfo[yaris][yarisIsmi]);
        SunucuMesaji(playerid, "%s isimli oyuncuyu yarýþtan attýn.", ReturnRoleplayName(oyuncuID));
        if(PlayerInfo[oyuncuID][pGidilecekCP] != -1) {
            DestroyDynamicRaceCP(PlayerInfo[oyuncuID][pGidilecekCP]);
            PlayerInfo[oyuncuID][pGidilecekCP] = -1;
            YarisInfo[yaris][yarisKatilanSayisi]--;
            if(YarisInfo[yaris][yarisKatilanSayisi] <= 0)
                YarisBitir(yaris);
        }
        PlayerInfo[oyuncuID][pKatildigiYaris] = -1;
        PlayerInfo[oyuncuID][pYarisCP] = -1;
        return 1;
    }
    else if(!strcmp(opsiyon, "baslat", true)) {
        new yaris = PlayerInfo[playerid][pKatildigiYaris];
        if(PlayerInfo[playerid][pYarisSahibi] != yaris) return HataMesajiC(playerid, "Yarýþýn sahibi siz deðilsiniz.");
        if(YarisInfo[yaris][yarisAktif]) return HataMesajiC(playerid, "Yarýþ zaten baþlatýlmýþ.");
        YarisBaslat(playerid, yaris);
        return 1;
    }
    else return HataMesajiC(playerid, "Bilinmeyen bir opsiyon girdin.");
}

CMD:otel(playerid, params[]) {
    new opsiyon[32], saat;
    if(sscanf(params, "s[32]D(-1)", opsiyon, saat)) return KullanimMesajiC(playerid, "/otel [kirala/kiraiptal/kilit/bilgi]");
    if(!strcmp(opsiyon, "kirala", true)) {
        if(saat == -1) return KullanimMesajiC(playerid, "/otel kirala [saat(1-12)]");
        if(saat < 1 || saat > 12) return HataMesajiC(playerid, "Saat deðerleri 1 ile 12 arasýndadýr.");
        new otel = Pickup_Nearest(playerid, ELEMENT_OTEL);
        if(otel == -1) return HataMesajiC(playerid, "Yakýnýnýzda bir otel odasý yok.");
        if(OtelInfo[otel][otelSahibi] != -1) return HataMesajiC(playerid, "Bu otel odasýnýn zaten bir sahibi var.");
        if(OtelInfo[otel][otelKiralik] == 0) return HataMesajiC(playerid, "Bu otel odasý kiralýk deðil.");
        if(PlayerInfo[playerid][pCash] < OtelInfo[otel][otelUcret] * saat) return HataMesaji(playerid, "Bu otel odasýný kiralamak için yeterli paran yok.($%d)", OtelInfo[otel][otelUcret] * saat);
        if(PlayerInfo[playerid][pKiraladigiOtel] != -1) return HataMesajiC(playerid, "Zaten bir otel odasý kiralýyorsun.");
        AC_GivePlayerMoney(playerid, -(OtelInfo[otel][otelUcret] * saat), "/otel kirala");
        OtelInfo[otel][otelSahibi] = PlayerInfo[playerid][pID];
        OtelInfo[otel][otelKiralik] = 0;
        OtelInfo[otel][otelKalanSure] = saat;
        SunucuMesaji(playerid, "Otelin %d numaralý odasýný $%d para ödeyerek %d saatliðine kiraladýnýz.", otel, OtelInfo[otel][otelUcret] * saat, saat);
        PlayerInfo[playerid][pKiraladigiOtel] = otel;
        return 1;
    }
    else if(!strcmp(opsiyon, "kiraiptal", true)) {
        new otel = Pickup_Nearest(playerid, ELEMENT_OTEL);
        if(otel == -1) return HataMesajiC(playerid, "Bu komutu kullanmak için otel odanýzýn giriþinin önünde olmalýsýnýz.");
        if(PlayerInfo[playerid][pKiraladigiOtel] == -1) return HataMesajiC(playerid, "Zaten bir otel odasý kiralamýyorsun.");
        if(otel != PlayerInfo[playerid][pKiraladigiOtel]) return HataMesajiC(playerid, "Giriþinde durduðun otel odasýný sen kiralamýyorsun.");
        OtelInfo[otel][otelSahibi] = -1;
        OtelInfo[otel][otelKiralik] = 1;
        OtelInfo[otel][otelKalanSure] = -1;
        OtelInfo[otel][otelKilitli] = 0;
        SunucuMesaji(playerid, "Otelin %d numaralý odasýný artýk kiralamýyorsunuz.", otel);
        PlayerInfo[playerid][pKiraladigiOtel] = -1;
        return 1;
    }
    else if(!strcmp(opsiyon, "kilit", true)) {
        new otel = Pickup_Nearest(playerid, ELEMENT_OTEL);
        if(otel == -1) {
            otel = GetPlayerOtel(playerid);
            if(otel == -1) return HataMesajiC(playerid, "Bu komutu kullanmak için kiraladýðýnýz bir otelin içinde ya da kapýsýnýn önünde olmalýsýnýz.");
        }
        OtelInfo[otel][otelKilitli] = !OtelInfo[otel][otelKilitli];
        PlayerAME(playerid, (OtelInfo[otel][otelKilitli]) ? ("odasýný kilitler.") : ("odasýnýn kilidini açar."));
        if(!OtelInfo[otel][otelKilitli])
            Player_Info(playerid, "Odanizin ~g~kilidi acildi.");
        else
            Player_Info(playerid, "Odaniz ~r~kilitlendi.");
        return 1;
    } 
    else if(!strcmp(opsiyon, "bilgi", true)) {
        new otel = PlayerInfo[playerid][pKiraladigiOtel];
        if(otel == -1) return SunucuMesajiC(playerid, "Kiraladýðýnýz bir otel yok.");
        SunucuMesaji(playerid, "Kiraladýðýnýz Otel Numarasý: %d", otel);
        SunucuMesaji(playerid, "Saatlik Kira Ücreti: %d", OtelInfo[otel][otelUcret]);
        SunucuMesaji(playerid, "Kalan Süre: %d saat", OtelInfo[otel][otelKalanSure]);
        if(OtelInfo[otel][otelKilitli]) SunucuMesaji(playerid, "Oda Kilit Durumu: {FF0000}KÝLÝTLÝ");
        else SunucuMesaji(playerid, "Oda Kilit Durumu: {1fac0f}AÇIK");
        return 1;
    }
    else return HataMesajiC(playerid, "Bilinmeyen bir opsiyon girdiniz.");
}

CMD:pizza(playerid, params[]) {
    new opsiyon[32];
    if(PlayerInfo[playerid][pJob] != 3) return HataMesajiC(playerid, "Bu komutu kullanmak için pizza kuryesi olmalýsýn.");
    if(sscanf(params, "s[32]", opsiyon)) return KullanimMesajiC(playerid, "/pizza [al/birak/teslim/baslat/bitir/checkpointfix(nokta haritada kaybolursa kullanýn)]");
    if(GetPlayerInterior(playerid) != 0 || GetPlayerVirtualWorld(playerid) != 0) return HataMesajiC(playerid, "Bir interior ya da virtual world içinde bu komutu kullanamazsýn.");
    if(!strcmp(opsiyon, "al", true, 32)) {
        if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) return HataMesajiC(playerid, "Herhangi bir aracýn içindeyken bu komutu kullanamazsýn.");
        new vid = GetNearestVehicle(playerid);
        if(vid == -1) return HataMesajiC(playerid, "Yakýnýnýzda araç yok.");
        if(GetVehicleModel(vid) != 448) return HataMesajiC(playerid, "Yakýnýnýzdaki araç pizza motoru deðil.");
        if(!PlayerInfo[playerid][pJobDuty]) return HataMesajiC(playerid, "Ýþbaþýnda deðilsin.");
        if(PlayerInfo[playerid][pPizzaAldi]) return HataMesajiC(playerid, "Zaten pizza almýþsýn.");
        PlayerAME(playerid, "moturundan bir pizza kutusu alýr.");
        PlayerInfo[playerid][pPizzaAldi] = true;
        new slot = -1;
        for(new i = 6; i < MAX_PLAYER_ATTACHED_OBJECTS; i++) {
            if(!IsPlayerAttachedObjectSlotUsed(playerid, i)) {
                slot = i;
                break;
            }
        }
        if(slot != -1) {
            SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
            SetPlayerAttachedObject(playerid, slot, 2814, 1, 0.004999, 0.529999, 0.126999, -83.200004, 115.999961, -31.799890, 0.500000, 0.816000, 0.500000);
            PlayerInfo[playerid][pPizzaObje] = slot;
        } else {
            SunucuMesajiC(playerid, "Üstünüzde boþ aksesuar slotu olmadýðý için elinize pizza objesi verilmedi, görevinizi etkilemeyecek.");
            PlayerInfo[playerid][pPizzaObje] = -1;
        }
    }
    else if(!strcmp(opsiyon, "birak", true, 32)) {
        if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) return HataMesajiC(playerid, "Herhangi bir aracýn içindeyken bu komutu kullanamazsýn.");
        new vid = GetNearestVehicle(playerid);
        if(vid == -1) return HataMesajiC(playerid, "Yakýnýnýzda araç yok.");
        if(GetVehicleModel(vid) != 448) return HataMesajiC(playerid, "Yakýnýnýzdaki araç pizza motoru deðil.");
        if(!PlayerInfo[playerid][pJobDuty]) return HataMesajiC(playerid, "Ýþbaþýnda deðilsin.");
        if(!PlayerInfo[playerid][pPizzaAldi]) return HataMesajiC(playerid, "Zaten pizza almamýþsýn.");
        PlayerAME(playerid, "moturuna pizza kutusunu geri koyar.");
        PlayerInfo[playerid][pPizzaAldi] = false;
        if(PlayerInfo[playerid][pPizzaObje] != -1) {
            RemovePlayerAttachedObject(playerid, PlayerInfo[playerid][pPizzaObje]);
            PlayerInfo[playerid][pPizzaObje] = -1;
        } 
        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
    }
    else if(!strcmp(opsiyon, "teslim", true, 32)) {
        if(!PlayerInfo[playerid][pPizzaAldi]) return HataMesajiC(playerid, "Elinde bir pizza kutusu yok.");
        if(!PlayerInfo[playerid][pJobDuty]) return HataMesajiC(playerid, "Ýþbaþýnda deðilsin.");
        if(GetPVarInt(playerid, "SiparisAldi") != 1) return HataMesajiC(playerid, "Aktif bir sipariþin yok.");
        if(!IsPlayerInRangeOfPoint(playerid, 3.0, GetPVarFloat(playerid, "SiparisX"), GetPVarFloat(playerid, "SiparisY"), GetPVarFloat(playerid, "SiparisZ"))) return HataMesajiC(playerid, "Sipariþ teslim noktasýna yakýn deðilsin.");
        PlayerAME(playerid, "eve pizza teslim eder.");
        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
        PlayerInfo[playerid][pPizzaAldi] = false;
        if(PlayerInfo[playerid][pPizzaObje] != -1) {
            RemovePlayerAttachedObject(playerid, PlayerInfo[playerid][pPizzaObje]);
            PlayerInfo[playerid][pPizzaObje] = -1;
        } 
        new rand = random(200) + 225 + random(20);
        SunucuMesaji(playerid, "Bu teslimatýnýzdan $%d kazandýnýz, sonraki teslimat haritanýzda iþaretlendi.", rand);
        PlayerInfo[playerid][pPizzaPara] += rand;
        PlayerInfo[playerid][pPizzaTamamlanan]++;
        if(PlayerInfo[playerid][pPizzaTamamlanan] == 10) {
            PlayerInfo[playerid][pJobDuty] = false;
            PlayerInfo[playerid][pPizzaAldi] = false;
            PlayerInfo[playerid][pPizzaObje] = -1;
            AC_GivePlayerMoney(playerid, PlayerInfo[playerid][pPizzaPara], "/pizza");
            SunucuMesaji(playerid, "Baþka sipariþ yok. %d noktaya giderek $%d kazandýn.", PlayerInfo[playerid][pPizzaTamamlanan], PlayerInfo[playerid][pPizzaPara]);
            PlayerInfo[playerid][pPizzaPara] = 0;
            PlayerInfo[playerid][pPizzaTamamlanan] = 0;
            PlayerInfo[playerid][pPizzaSonEv] = -1;
            DeletePVar(playerid, "SiparisAldi");
            DeletePVar(playerid, "SiparisX");
            DeletePVar(playerid, "SiparisY");
            DeletePVar(playerid, "SiparisZ");
            return 1;
        } 
        new sonuc = PizzaEvSec(playerid);
        if(!sonuc) {
            PlayerInfo[playerid][pJobDuty] = false;
            PlayerInfo[playerid][pPizzaAldi] = false;
            PlayerInfo[playerid][pPizzaObje] = -1;
            AC_GivePlayerMoney(playerid, PlayerInfo[playerid][pPizzaPara], "/pizza");
            SunucuMesaji(playerid, "%d noktaya giderek $%d kazandýn.", PlayerInfo[playerid][pPizzaTamamlanan], PlayerInfo[playerid][pPizzaPara]);
            PlayerInfo[playerid][pPizzaPara] = 0;
            PlayerInfo[playerid][pPizzaTamamlanan] = 0;
            SunucuMesajiC(playerid, "Sonraki ev seçilirken bilinmeyen bir hata oluþtu, lütfen tekrar deneyin.");
            return 1;
        }
    }
    else if(!strcmp(opsiyon, "baslat", true, 32)) {
        if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return HataMesajiC(playerid, "Bu komutu kullanmak için aracýn sürücüsü olmalýsýn.");
        new vid = GetPlayerVehicleID(playerid);
        if(GetVehicleModel(vid) != 448) return HataMesajiC(playerid, "Sürdüðünüz araç pizza motoru deðil.");
        if(PlayerInfo[playerid][pJobDuty]) return HataMesajiC(playerid, "Zaten iþbaþýndasýn.");
        if(!IsPlayerInRangeOfPoint(playerid, 5.0, 792.6245, -1626.4695, 13.3906)) {
            HataMesajiC(playerid, "Kuryeliðe baþlama noktasýnda deðilsin, haritanda iþaretlendi. Gidip komutu tekrar kullan.");
            AC_SetPlayerCheckpoint(playerid, 792.6245, -1626.4695, 13.3906, 5.0);
            return 1;
        }
        PlayerInfo[playerid][pJobDuty] = true;
        PlayerInfo[playerid][pPizzaAldi] = false;
        PlayerInfo[playerid][pPizzaObje] = -1;
        PlayerInfo[playerid][pPizzaPara] = 0;
        PlayerInfo[playerid][pPizzaTamamlanan] = 0;
        new sonuc = PizzaEvSec(playerid);
        if(!sonuc) {
            PlayerInfo[playerid][pJobDuty] = false;
            PlayerInfo[playerid][pPizzaAldi] = false;
            PlayerInfo[playerid][pPizzaObje] = -1;
            AC_GivePlayerMoney(playerid, PlayerInfo[playerid][pPizzaPara], "/pizza");
            SunucuMesaji(playerid, "%d noktaya giderek $%d kazandýn.", PlayerInfo[playerid][pPizzaTamamlanan], PlayerInfo[playerid][pPizzaPara]);
            PlayerInfo[playerid][pPizzaPara] = 0;
            PlayerInfo[playerid][pPizzaTamamlanan] = 0;
            SunucuMesajiC(playerid, "Sonraki ev seçilirken bilinmeyen bir hata oluþtu, lütfen tekrar deneyin.");
            return 1;
        }
        SunucuMesajiC(playerid, "Sonraki hedefiniz haritada iþaretlendi, yaklaþýnca araçtan inin.");
        SunucuMesajiC(playerid, "Araçtan indikten sonra /pizza al komutu ile araçtan bir pizza kutusu alýn.");
        SunucuMesajiC(playerid, "Pizza kutusu aldýktan sonra kapýya yaklaþýn ve /pizza teslim komutunu kullanýn.");
        SunucuMesajiC(playerid, "Checkpoint kaybolursa /pizza checkpointfix komutunu kullanabilirsin.");
    }
    else if(!strcmp(opsiyon, "bitir", true, 32)) {
        if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return HataMesajiC(playerid, "Bu komutu kullanmak için aracýn sürücüsü olmalýsýn.");
        new vid = GetPlayerVehicleID(playerid);
        if(GetVehicleModel(vid) != 448) return HataMesajiC(playerid, "Sürdüðünüz araç pizza motoru deðil.");
        if(!PlayerInfo[playerid][pJobDuty]) return HataMesajiC(playerid, "Zaten iþbaþýnda deðilsin.");
        if(!IsPlayerInRangeOfPoint(playerid, 5.0, 792.6245, -1626.4695, 13.3906)) {
            HataMesajiC(playerid, "Kuryeliðe baþlama noktasýnda deðilsin, haritanda iþaretlendi. Gidip komutu tekrar kullan.");
            AC_SetPlayerCheckpoint(playerid, 792.6245, -1626.4695, 13.3906, 5.0);
            return 1;
        }
        PlayerInfo[playerid][pJobDuty] = false;
        PlayerInfo[playerid][pPizzaAldi] = false;
        PlayerInfo[playerid][pPizzaObje] = -1;
        AC_GivePlayerMoney(playerid, PlayerInfo[playerid][pPizzaPara], "/pizza");
        SunucuMesaji(playerid, "%d noktaya giderek $%d kazandýn.", PlayerInfo[playerid][pPizzaTamamlanan], PlayerInfo[playerid][pPizzaPara]);
        PlayerInfo[playerid][pPizzaPara] = 0;
        PlayerInfo[playerid][pPizzaTamamlanan] = 0;
        DeletePVar(playerid, "SiparisAldi");
        DeletePVar(playerid, "SiparisX");
        DeletePVar(playerid, "SiparisY");
        DeletePVar(playerid, "SiparisZ");
        PlayerInfo[playerid][pPizzaSonEv] = -1;
    }
    else if(!strcmp(opsiyon, "checkpointfix", true, 32)) {
        AC_SetPlayerCheckpoint(playerid, GetPVarFloat(playerid, "SiparisX"), GetPVarFloat(playerid, "SiparisY"), GetPVarFloat(playerid, "SiparisZ"), 5.0);
        SunucuMesajiC(playerid, "Gitmeniz gereken nokta haritanýzda iþaretlendi. Eðer checkpoint tekrar kaybolursa bu komutu tekrar kullanabilirsiniz.");
    }
    else return HataMesajiC(playerid, "Bilinmeyen bir opsiyon girdin.");
    return 1;
}


CMD:cezalarim(playerid, params[])
{
    new target_name[MAX_PLAYER_NAME];

    strmid(target_name, ReturnRoleplayName(playerid), 0, MAX_PLAYER_NAME);
    format(PlayerInfo[playerid][pTargetName], MAX_PLAYER_NAME, target_name);

    if(strlen(params) > 0)
    {
        if(PlayerInfo[playerid][pFaction] == -1 || Faction_GetType(PlayerInfo[playerid][pFaction]) != POLICE || !PlayerInfo[playerid][pFactionDuty] || PlayerInfo[playerid][pDeath]) return
            SunucuMesaji(playerid, "Bu komutu kullanmak için polis olmalýsýn.");

        if(sscanf(params, "s[24]", PlayerInfo[playerid][pTargetName]) > 0)return
            KullanimMesajiC(playerid, "/cezalarim [isim_soyisim]");
    }

    mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT * FROM police_fine_records WHERE target = '%e'", PlayerInfo[playerid][pTargetName]);
    mysql_tquery(ourConnection, queryx, "OnFinesListSearch", "d", playerid);

    return 1;
}

CMD:meslekgir(playerid, params[])
{
    if(Faction_GetType(PlayerInfo[playerid][pFaction]) == POLICE || Faction_GetType(PlayerInfo[playerid][pFaction]) == MEDICAL || Faction_GetType(PlayerInfo[playerid][pFaction]) == GOVERNMENT || Faction_GetType(PlayerInfo[playerid][pFaction]) == LSNN)return
        SunucuMesaji(playerid, "Bulunduðun faction bu komutu kullanmaný desteklemiyor.");

    if(PlayerInfo[playerid][pJob] != -1)return
        SunucuMesaji(playerid, "Zaten bir meslektesin, olduðun meslekten çýkman gerekiyor. (/meslekayril)");

    new listitem = Pickup_Nearest(playerid, ELEMENT_JOB);

    if(listitem == -1)return
        SunucuMesaji(playerid, "Mesleðe girebileceðin bir noktada deðilsin.");

    PlayerInfo[playerid][pJob] = listitem;

    SunucuMesaji(playerid, "%s oldun. /meslekyardim yazarak meslek komutlarýný görebilirsin.", Jobs[listitem][jobName]);

    return 1;
}

CMD:araccati(playerid, params[]) {
    if(strlen(params) < 1) return KullanimMesajiC(playerid, "/araccati <tak/cikart>");
    if(!IsPlayerInAnyVehicle(playerid)) return HataMesajiC(playerid, "Bu komutu kullanmak için bir araçta olmalýsýnýz.");
    new veh = GetPlayerVehicleID(playerid);
    if(GetVehicleModel(veh) != 567 && GetVehicleModel(veh) != 536) return HataMesajiC(playerid, "Bu komutu bu araçta kullanamazsýnýz.");
    if(!strcmp(params, "tak", false)) {
        if(GetVehicleModel(veh) == 567) { // Savanna
            new yapabilir = -1, tuning;
            for(new j; j < MAX_TUNING_COMPONENTS; j++) {
                if(VehicleInfo[veh][vTuning][j] == 1130 || VehicleInfo[veh][vTuning][j] == 1131) {
                    yapabilir = j;
                    if(VehicleInfo[veh][vTuning][j] == 1130)
                        tuning = 1130;
                    else
                        tuning = 1131;
                    break;
                }
            }
            if(yapabilir == -1) return HataMesajiC(playerid, "Takabileceðiniz bir çatý bulunmamakta.");
            if(GetVehicleComponentInSlot(veh, yapabilir) == tuning) return HataMesajiC(playerid, "Çatý zaten takýlý.");
            PlayerME(playerid, "Savanna model aracýnýn çatýsýný takar.");
            AddVehicleComponent(veh, tuning);
        } else if(GetVehicleModel(veh) == 536) { // Blade
            new yapabilir = -1;
            for(new j; j < MAX_TUNING_COMPONENTS; j++) {
                if(VehicleInfo[veh][vTuning][j] == 1128) {
                    yapabilir = j;
                    break;
                }
            }
            if(yapabilir == -1) return HataMesajiC(playerid, "Takabileceðiniz bir çatý bulunmamakta.");
            if(GetVehicleComponentInSlot(veh, yapabilir) == 1128) return HataMesajiC(playerid, "Çatý zaten takýlý.");
            PlayerME(playerid, "Blade model aracýnýn çatýsýný takar.");
            AddVehicleComponent(veh, 1128);
        } else return HataMesajiC(playerid, "Bu komutu bu araçta kullanamazsýnýz.");
    }
    else if(!strcmp(params, "cikart", false)) {
        if(GetVehicleModel(veh) == 567) { // Savanna
            new yapabilir = -1, tuning;
            for(new j; j < MAX_TUNING_COMPONENTS; j++) {
                if(VehicleInfo[veh][vTuning][j] == 1130 || VehicleInfo[veh][vTuning][j] == 1131) {
                    yapabilir = j;
                    if(VehicleInfo[veh][vTuning][j] == 1130)
                        tuning = 1130;
                    else
                        tuning = 1131;
                    break;
                }
            }
            if(yapabilir == -1) return HataMesajiC(playerid, "Takýp çýkartabileceðiniz bir çatý bulunmamakta.");
            if(GetVehicleComponentInSlot(veh, yapabilir) != tuning) return HataMesajiC(playerid, "Çatý zaten takýlý deðil.");
            PlayerME(playerid, "Savanna model aracýnýn çatýsýný çýkartýr.");
            RemoveVehicleComponent(veh, tuning);
        } else if(GetVehicleModel(veh) == 536) { // Blade
            new yapabilir = -1;
            for(new j; j < MAX_TUNING_COMPONENTS; j++) {
                if(VehicleInfo[veh][vTuning][j] == 1128) {
                    yapabilir = j;
                    break;
                }
            }
            if(yapabilir == -1) return HataMesajiC(playerid, "Takýp çýkartabileceðiniz bir çatý bulunmamakta.");
            if(GetVehicleComponentInSlot(veh, yapabilir) == 1103) return HataMesajiC(playerid, "Çatý zaten takýlý deðil.");
            PlayerME(playerid, "Blade model aracýnýn çatýsýný çýkartýr.");
            AddVehicleComponent(veh, 1103);
        } else return HataMesajiC(playerid, "Bu komutu bu araçta kullanamazsýnýz.");
    } else return HataMesajiC(playerid, "Bilinmeyen bir parametre girdiniz.");
    return 1;
}

CMD:kamyoncu(playerid, params[])
{
    if(Faction_GetType(PlayerInfo[playerid][pFaction]) == POLICE || Faction_GetType(PlayerInfo[playerid][pFaction]) == MEDICAL || Faction_GetType(PlayerInfo[playerid][pFaction]) == GOVERNMENT || Faction_GetType(PlayerInfo[playerid][pFaction]) == LSNN)return
        SunucuMesaji(playerid, "Bulunduðun faction bu komutu kullanmaný desteklemiyor.");

    if(PlayerInfo[playerid][pJob] != 0)return
        SunucuMesaji(playerid, "Kamyon Þöförü deðilsin.");

    new vid = GetPlayerVehicleID(playerid);

    if(GetVehicleTrailer(vid) != 0)
        vid = GetVehicleTrailer(vid);

    if(!IsPlayerInAnyVehicle(playerid) || !IsATruckableVehicle(vid))return
        SunucuMesaji(playerid, "Bu mesleðe uygun bir araçta deðilsin.");

    switch(VehicleInfo[vid][vModel])
    {
        case 413, 459, 414, 498, 456, 499: if(PlayerInfo[playerid][pPlayingHours] < 3)return
            SunucuMesaji(playerid, "Bu þekilde çalýþmak için meslekte 3 saat geçirmen gerekiyor.");

        case 403, 515, 591, 435: if(PlayerInfo[playerid][pPlayingHours] < 35)return
            SunucuMesaji(playerid, "Bu þekilde çalýþmak için meslekte 35 saat geçirmen gerekiyor.");
    }

    if(!isnull(params) && !strcmp(params, "iptal", true) && PlayerInfo[playerid][pSelectedRequest] != -1)
    {
        PlayerInfo[playerid][pSelectedRequest] = -1;
        return AC_DisablePlayerCheckpoint(playerid);
    }

    if(PlayerInfo[playerid][pSelectedRequest] != -1)
    {
        if(PlayerInfo[playerid][pContinueTrucking])
        {
            new tmpID = PlayerInfo[playerid][pSelectedRequest];
            return HataMesaji(playerid, "Taþýnmasý gereken miktar: %d. \"/kamyoncu iptal\" yazarak iþi iptal edebilirsin.", BuildingInfo[tmpID][bRequestTruck]);
        }

        return Dialog_Show(playerid, DialogContinueTruck, DIALOG_STYLE_MSGBOX, "Koli", "Taþýma henüz bitmedi. Sipariþe devam edebilirsin veya diðer kamyonculara býrakabilirsin.", "Devam Et", "Býrak");
    }

    Dialog_Show(playerid, DialogTPDA, DIALOG_STYLE_LIST, "Trucker", "Þirketleri göster\nAraç bilgilerini göster", "Ýleri", "Ýptal");

    return 1;
}
CMD:koli(playerid, params[])
{
    new j = Pickup_Nearest(playerid, ELEMENT_COMPANY);
    new vid = GetNearestVehicle(playerid);
    new id, xvid, option[20];

    if(vid != -1 && GetVehicleTrailer(vid) != 0) vid = GetVehicleTrailer(vid);

    if(sscanf(params, "s[20]D(-1)", option, xvid))
    {
        KullanimMesajiC(playerid, "/koli [fonksiyon]");
        SendClientMessageEx(playerid, COLOR_GREY, "liste: Araçtaki kolileri görmeye ve almaya yarar.");
        SendClientMessageEx(playerid, COLOR_GREY, "yerlestir: Elinizdeki kutuyu araca yerleþtirmeye yarar.");
        SendClientMessageEx(playerid, COLOR_GREY, "birak: Elinizdeki kutuyu býrakmaya yarar.");
        SendClientMessageEx(playerid, COLOR_GREY, "al: Yerdeki koliyi almaya yarar.");
        SendClientMessageEx(playerid, COLOR_GREY, "satinal: Kutu satýn almaya yarar.");
        SendClientMessageEx(playerid, COLOR_GREY, "sat: Elindeki kutuyu trucker noktasýna satmaya yarar.");
        //SendClientMessageEx(playerid, COLOR_GREY, "isletmeyesat: Elindeki kutuyu sipariþ veren iþletmeye satmaya yarar.");
        SendClientMessageEx(playerid, COLOR_GREY, "siparisnoktasi: Özel trucker noktalarýndan koli almaya yarar. (Ýllegal)");
        if(PlayerInfo[playerid][pAdmin] >= SUPPORTER) SendClientMessageEx(playerid, COLOR_GREY, "yoket: Koliyi silmeye yarar. (Helper Komutu)");
        return SendClientMessageEx(playerid, COLOR_GREY, "ac: Yerdeki koliyi açmaya yarar.");
    }

    if(!strcmp(option, "liste", true))
    {
        if(IsPlayerInAnyVehicle(playerid) || vid == -1)return
            HataMesajiC(playerid, "Koli olan bir araca yakýn deðilsin.");

        if(!IsATruckableVehicle(vid) || (VehicleInfo[vid][vLocked] && !Vehicle_IsOwnerLead(playerid, vid, false)))return
            SunucuMesaji(playerid, "Anahtarýnýz yoksa kilitli araçtan koli alamazsýnýz.");

        switch(VehicleInfo[vid][vModel])
        {
            case 413, 459, 414, 498, 456, 499: if(PlayerInfo[playerid][pPlayingHours] < 3)return
                SunucuMesaji(playerid, "Bu þekilde çalýþmak için 3 oynama saatine ihtiyacýn var.");

            case 403, 515, 591, 435: if(PlayerInfo[playerid][pPlayingHours] < 35)return
                SunucuMesaji(playerid, "Bu þekilde çalýþmak için 35 oynama saatine ihtiyacýn var.");
        }

        new string[2048], crateCount;

        if(VehicleInfo[vid][vShowingCargo]) foreach(new i : Player)
        {
            if(IsPlayerConnected(i) && PlayerInfo[i][pLogged] && Dialog_IsOpened(i) && PlayerInfo[i][pViewingCargo] == vid)return
                SunucuMesaji(playerid, "Birisi bu aracýn yükünü aldý.");
        }

        foreach(new x : Crates) if(CrateInfo[x][crExists] && CrateInfo[x][crVehicleID] == vid)
        {
            new industryid = CrateInfo[x][crCompany];
            new tmpName[32] = "Mühürlü Kutu";
            if(CrateInfo[x][crType] != ILLEGAL_BOX)format(tmpName, sizeof(tmpName), CompanyInfo[industryid][cName]);
            format(string, sizeof(string), "%sKoli %d\t{FF6347}%s{FFFFFF}\n", string, crateCount + 1, tmpName);
            PlayerInfo[playerid][pCrates][crateCount] = x;
            crateCount++;
        }

        if(!crateCount)return
            SunucuMesaji(playerid, "Bu araçta koli bulunmuyor.");

        VehicleInfo[vid][vShowingCargo] = true;
        PlayerInfo[playerid][pViewingCargo] = vid;
        Dialog_Show(playerid, DialogVehicleCargo, DIALOG_STYLE_TABLIST, "Araçtaki Koliler", string, "Al", "Ýptal");
    }
    else if(!strcmp(option, "birak", true))
    {
        if(Faction_GetType(PlayerInfo[playerid][pFaction]) == POLICE || Faction_GetType(PlayerInfo[playerid][pFaction]) == MEDICAL || Faction_GetType(PlayerInfo[playerid][pFaction]) == GOVERNMENT || Faction_GetType(PlayerInfo[playerid][pFaction]) == LSNN)return
            SunucuMesaji(playerid, "Bulunduðun faction bu komutu kullanmaný desteklemiyor.");

        id = PlayerInfo[playerid][pCarryCrate];

        if(id == -1 || id != -1 && !CrateInfo[id][crExists])return
            SunucuMesaji(playerid, "Zaten bir koli taþýmýyorsun.");

        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
        RemovePlayerAttachedObject(playerid, 9);

        new Float:x, Float:y, Float:z;

        GetPlayerPos(playerid, x, y, z);

        CrateInfo[id][crPosX] = x;
        CrateInfo[id][crPosY] = y;
        CrateInfo[id][crPosZ] = z - 0.9;
        CrateInfo[id][crInterior] = GetPlayerInterior(playerid);
        CrateInfo[id][crWorld] = GetPlayerVirtualWorld(playerid);
        CrateInfo[id][crPlayer] = -1;

        new companyid = CrateInfo[id][crCompany];
        new type = CrateInfo[id][crType];

        new tmpName[32] = "Mühürlü Kutu";
        if(type != ILLEGAL_BOX)format(tmpName, sizeof(tmpName), CompanyInfo[companyid][cName]);

        CrateInfo[id][crObject] = CreateDynamicObject(BOX_OBJECT, CrateInfo[id][crPosX], CrateInfo[id][crPosY], CrateInfo[id][crPosZ], 0.0, 0.0, 0.0, CrateInfo[id][crWorld], CrateInfo[id][crInterior]);
        CrateInfo[id][crLabel] = CreateDynamic3DTextLabel(tmpName, COLOR_WHITE, CrateInfo[id][crPosX], CrateInfo[id][crPosY], CrateInfo[id][crPosZ] + 1.0, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid), -1);
        Streamer_Update(playerid);

        PlayerAME(playerid, "taþýdýðý koliyi yere býrakýr.");
        ApplyAnimation(playerid, "CARRY", "putdwn", 4.1, 0, 0, 0, 0, 0, 1);
        SunucuMesaji(playerid, "Taþýdýðýn koliyi yere býraktýn.");

        PlayerInfo[playerid][pCarryCrate] = -1;
    }
    else if(!strcmp(option, "yoket", true))
    {
        if(PlayerInfo[playerid][pAdmin] < 1)return 1;

        if(PlayerInfo[playerid][pCarryCrate] != -1)return
            SunucuMesaji(playerid, "Taþýdýðýn koliyi yok edemezsin, önce yere býrakmalýsýn.");

        if(GetNearestCrate(playerid) == -1)return
            SunucuMesaji(playerid, "Yere býrakýlan bir kolinin yakýnýnda deðilsin.");

        if(IsPlayerInAnyVehicle(playerid) || GetPlayerState(playerid) == PLAYER_STATE_ENTER_VEHICLE_DRIVER || GetPlayerState(playerid) == PLAYER_STATE_ENTER_VEHICLE_PASSENGER)return
            SunucuMesaji(playerid, "Araç içinde bu komutu kullanamazsýnýz.");

        id = GetNearestCrate(playerid);
        Crate_Delete(id);

        SendAworkAlert(false, COLOR_ADMIN, "AdmCmd: %s, %d ID'li koliyi sildi.", ReturnRoleplayName(playerid), id);
    }
    else if(!strcmp(option, "al", true))
    {
        if(Faction_GetType(PlayerInfo[playerid][pFaction]) == POLICE || Faction_GetType(PlayerInfo[playerid][pFaction]) == MEDICAL || Faction_GetType(PlayerInfo[playerid][pFaction]) == GOVERNMENT || Faction_GetType(PlayerInfo[playerid][pFaction]) == LSNN)return
            SunucuMesaji(playerid, "Bulunduðun faction bu komutu kullanmaný desteklemiyor.");

        if(PlayerInfo[playerid][pCarryCrate] != -1)return
            SunucuMesaji(playerid, "Zaten bir koli taþýyorsun.");

        if(GetNearestCrate(playerid) == -1)return
            SunucuMesaji(playerid, "Etrafýnda alabileceðin bir koli yok veya yeteri kadar yakýn deðilsin. ");

        if(IsPlayerInAnyVehicle(playerid) || GetPlayerState(playerid) == PLAYER_STATE_ENTER_VEHICLE_DRIVER || GetPlayerState(playerid) == PLAYER_STATE_ENTER_VEHICLE_PASSENGER)return
            SunucuMesaji(playerid, "Araç içinde bu komutu kullanamazsýnýz.");

        id = GetNearestCrate(playerid);

        ApplyAnimation(playerid, "CARRY", "liftup", 4.1, 0, 0, 0, 0, 0, 1);

        CrateInfo[id][crPosX] = 0.0;
        CrateInfo[id][crPosY] = 0.0;
        CrateInfo[id][crPosZ] = 0.0;
        CrateInfo[id][crPlayer] = playerid;

        PlayerInfo[playerid][pCarryCrate] = id;
        SetPlayerAttachedObject(playerid, 9, BOX_OBJECT, 1, -0.067019, 0.413313, -0.040999, 0.000000, 88.000000, 180.000000, 0.500000, 0.500000, 0.500000);

        PlayerAME(playerid, "kutuyu yerden alýr.");
        SunucuMesaji(playerid, "Yerdeki koliyi aldýn.");

        DestroyDynamic3DTextLabelEx(CrateInfo[id][crLabel]);
        DestroyDynamicObjectEx(CrateInfo[id][crObject]);

        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
    }
    else if(!strcmp(option, "yerlestir", true))
    {
        if(Faction_GetType(PlayerInfo[playerid][pFaction]) == POLICE || Faction_GetType(PlayerInfo[playerid][pFaction]) == MEDICAL || Faction_GetType(PlayerInfo[playerid][pFaction]) == GOVERNMENT || Faction_GetType(PlayerInfo[playerid][pFaction]) == LSNN)return
            SunucuMesaji(playerid, "Bulunduðun faction bu komutu kullanmaný desteklemiyor.");

        if(vid == -1) return HataMesajiC(playerid, "Herhangi bir araca yakýn deðilsin.");

        if(!IsATruckableVehicle(vid) || (VehicleInfo[vid][vLocked] && (!Vehicle_IsOwnerLead(playerid, vid, true) && HasPlayerUserKey(playerid, KEY_VEHICLE, VehicleInfo[vid][vID]) == 0)))return
            SunucuMesaji(playerid, "Anahtarýna sahip olduðun araca yakýn deðilsin veya bu araç koli almýyor.");

        if(PlayerInfo[playerid][pCarryCrate] == -1)return
            SunucuMesaji(playerid, "Elinde koli bulunmuyor.");

        id = PlayerInfo[playerid][pCarryCrate];

        switch(VehicleInfo[vid][vModel])
        {
            case 413, 459, 414, 498, 456, 499: if(PlayerInfo[playerid][pPlayingHours] < 3)return
                SunucuMesaji(playerid, "Bu araca koli koymak istiyorsan 3 oynama saatine sahip olmalýsýn.");

            case 403, 515, 591, 435: if(PlayerInfo[playerid][pPlayingHours] < 35)return
                SunucuMesaji(playerid, "Bu araca koli koymak istiyorsan 35 oynama saatine sahip olmalýsýn.");
        }

        if(id == -1 || id != -1 && !CrateInfo[id][crExists])return 1;

        new slot = Commodities_GetSlotCount(vid);

        if(CrateInfo[id][crType] != VEHICLE_PART && Commodities_GetSlot(VehicleInfo[vid][vModel]) <= slot)return
            SunucuMesaji(playerid, "Bu araca daha fazla koli yerleþtiremezsiniz.");

        ApplyAnimation(playerid, "CARRY", "putdwn", 4.1, 0, 0, 0, 0, 0, 1);
        PlayerAME(playerid, "taþýdýðý koliyi araca yerleþtirir.");

        PlayerInfo[playerid][pCarryCrate] = -1;
        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
        RemovePlayerAttachedObject(playerid, 9);

        if(CrateInfo[id][crType] == VEHICLE_PART)
        {
            VehicleInfo[vid][vComponents] += CrateInfo[id][crAmount];
            SunucuMesaji(playerid, "Araç parçasýný entegre ettin.");
            Crate_Delete(id);

            return SaveVehicle(vid);
        }

        Commodities_Attach(vid);
        CrateInfo[id][crPlayer] = -1;
        CrateInfo[id][crVehicleID] = vid;
        CrateInfo[id][crPosX] = 0.0;
        CrateInfo[id][crPosY] = 0.0;
        CrateInfo[id][crPosZ] = 0.0;
        Streamer_Update(playerid);
    }
    else if(!strcmp(option, "satinal", true))
    {
        if(PlayerInfo[playerid][pEditingMode])return 1;

        if(PlayerInfo[playerid][pCarryCrate] != -1)return
            SunucuMesaji(playerid, "Zaten bir koli taþýyorsun.");

        if(PlayerInfo[playerid][pJob] != 0 && PlayerInfo[playerid][pJob] != 1)return
            SunucuMesaji(playerid, "Trucker mesleðinde deðilsin.");

        if(Faction_GetType(PlayerInfo[playerid][pFaction]) == POLICE || Faction_GetType(PlayerInfo[playerid][pFaction]) == MEDICAL || Faction_GetType(PlayerInfo[playerid][pFaction]) == GOVERNMENT || Faction_GetType(PlayerInfo[playerid][pFaction]) == LSNN)return
            SunucuMesaji(playerid, "Bulunduðun faction bu komutu kullanmaný desteklemiyor.");

        if(Pickup_Nearest(playerid, ELEMENT_COMPANY) == -1 && Pickup_Nearest(playerid, ELEMENT_INDUSTRY) == -1)return
            SunucuMesaji(playerid, "Etrafýnda koli satýn alabileceðin bir yer yok veya yeteri kadar yakýn deðilsin.");

        if(IsPlayerInAnyVehicle(playerid))return
            SunucuMesaji(playerid, "Araç içerisinde bu komutu kullanamazsýnýz.");

        if(CompanyInfo[j][sirketid] == 1 || CompanyInfo[j][cBuyType] == HIRSIZLIK)
            return HataMesajiC(playerid, "Buradan koli satýn alamazsýn.");

        if(Pickup_Nearest(playerid, ELEMENT_COMPANY) != -1)
        {
            if(Crate_FreeID() == -1)return 1;

            if(PlayerInfo[playerid][pPremium] != 5)
            {
                if(PlayerInfo[playerid][pCash] < CompanyInfo[j][cPrice])return
                    HataMesaji(playerid, "Yeterli paran bulunmuyor. ($%d)", CompanyInfo[j][cPrice]);

                if(CompanyInfo[j][stok] < 1) return HataMesajiC(playerid, "Bu noktada daha ürün kalmadý.");

                if(PlayerInfo[playerid][pKamyoncuYetenegi] >= 0 && PlayerInfo[playerid][pKamyoncuYetenegi] < 300)
                {
                    OAC_GivePlayerMoney(playerid, -CompanyInfo[j][cPrice]);
                    SunucuMesaji(playerid, "%s kolisini $%d karþýlýðýnda satýn aldýn.", CompanyInfo[j][cName], CompanyInfo[j][cPrice]);
                }

                if(PlayerInfo[playerid][pKamyoncuYetenegi] >= 300 && PlayerInfo[playerid][pKamyoncuYetenegi] < 1200)
                {
                    OAC_GivePlayerMoney(playerid, -(CompanyInfo[j][cPrice] - 10));
                    SunucuMesaji(playerid, "%s kolisini $%d karþýlýðýnda satýn aldýn.", CompanyInfo[j][cName], CompanyInfo[j][cPrice] - 10);
                }

                if(PlayerInfo[playerid][pKamyoncuYetenegi] >= 1200)
                {
                    OAC_GivePlayerMoney(playerid, -(CompanyInfo[j][cPrice] - 15));
                    SunucuMesaji(playerid, "%s kolisini $%d karþýlýðýnda satýn aldýn.", CompanyInfo[j][cName], CompanyInfo[j][cPrice] - 15);
                }
            }
            else
            {
                new yenitutar = (CompanyInfo[j][cPrice] * 90 / 100);
                
                if(yenitutar < 1) yenitutar = 5;
                
                if(PlayerInfo[playerid][pCash] < yenitutar)return
                    HataMesaji(playerid, "Yeterli paran bulunmuyor. ($%d)", yenitutar);

                if(CompanyInfo[j][stok] < 1) return HataMesajiC(playerid, "Bu noktada daha ürün kalmadý.");
                
                if(PlayerInfo[playerid][pKamyoncuYetenegi] >= 0 && PlayerInfo[playerid][pKamyoncuYetenegi] < 300)
                {
                    OAC_GivePlayerMoney(playerid, -yenitutar);
                    SunucuMesaji(playerid, "%s kolisini $%d karþýlýðýnda satýn aldýn.", CompanyInfo[j][cName], yenitutar);
                }

                if(PlayerInfo[playerid][pKamyoncuYetenegi] >= 300 && PlayerInfo[playerid][pKamyoncuYetenegi] < 1200)
                {
                    OAC_GivePlayerMoney(playerid, -(yenitutar - 10));
                    SunucuMesaji(playerid, "%s kolisini $%d karþýlýðýnda satýn aldýn.", CompanyInfo[j][cName], yenitutar - 10);
                }

                if(PlayerInfo[playerid][pKamyoncuYetenegi] >= 1200)
                {
                    OAC_GivePlayerMoney(playerid, -(yenitutar - 15));
                    SunucuMesaji(playerid, "%s kolisini $%d karþýlýðýnda satýn aldýn.", CompanyInfo[j][cName], yenitutar - 15);
                }
            }
            
            id = Crate_FreeID(); if(id == -1)return 1;

            CompanyInfo[j][stok]--;
            Company_RefreshText(j);

            CrateInfo[id][crExists] = 1;
            CrateInfo[id][crType] = CompanyInfo[j][cBuyType];
            CrateInfo[id][crAmount] = CompanyInfo[j][cUnit];
            CrateInfo[id][crVehicleID] = -1;
            CrateInfo[id][crPosX] = 0.0;
            CrateInfo[id][crPosY] = 0.0;
            CrateInfo[id][crPosZ] = 0.0;
            CrateInfo[id][crInterior] = GetPlayerInterior(playerid);
            CrateInfo[id][crWorld] = GetPlayerVirtualWorld(playerid);
            CrateInfo[id][crPlayer] = playerid;
            CrateInfo[id][crCompany] = j;

            Iter_Add(Crates, id);
            PlayerInfo[playerid][pCarryCrate] = id;

            ApplyAnimation(playerid, "CARRY", "liftup", 4.1, 0, 0, 0, 0, 0, 1);
            SetPlayerAttachedObject(playerid, 9, BOX_OBJECT, 1, -0.067019, 0.413313, -0.040999, 0.000000, 88.000000, 180.000000, 0.500000, 0.500000, 0.500000);
            SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);

            return PlayerInfo[playerid][pCargoTime][0] = gettime() + (60);
        }
    }
    else if(!strcmp(option, "siparisnoktasi", true))
    {
        if(!SunucuBilgi[SiparisNoktalari])
        {
            if(Faction_GetType(PlayerInfo[playerid][pFaction]) != SADECEUYUSTURUCU)return
                SunucuMesaji(playerid, "Bu komutu kullanman için uyuþturucu satýþ izni olan onaylý bir oluþumda olmalýsýn.");
                
            if(PlayerInfo[playerid][pFaction] == -1 || PlayerInfo[playerid][pRank] > 3)return HataMesajiC(playerid, "Bu komutu kullanmak için bir oluþumda 1-3 rütbesinde olmalýsýn.");
    
            new string[1024];
            new count;

            if(Pickup_Nearest(playerid, ELEMENT_INDUSTRY) == -1) return HataMesajiC(playerid, "Sipariþ noktasýna yakýn deðilsin.");

            new industryid = Pickup_Nearest(playerid, ELEMENT_INDUSTRY);

            PlayerInfo[playerid][pIndustryMOD] = industryid;

            if(IllegalIndustryInfo[industryid][iRefreshTime] >= gettime() + 86400) IllegalIndustries_Refresh(industryid);

            for(new i; i < 28; i++)
            {
                if(!IllegalIndustryInfo[industryid][iIngredients][i] || IllegalIndustryInfo[industryid][iIngredients][i] == -1) continue;

                new listid = IllegalIndustryInfo[industryid][iIngredients][i];

                format(string, sizeof(string), "%s%s\t$%d\t%d\n", string, InventoryObjects[listid][invName], IllegalIndustryInfo[industryid][iPrices][i], IllegalIndustryInfo[industryid][iAmounts][i]);
                PlayerInfo[playerid][pIngredientsID][count] = IllegalIndustryInfo[industryid][iIngredients][i];
                count++;
            }

            return Dialog_Show(playerid, DialogBuyIngredients, DIALOG_STYLE_TABLIST_HEADERS, "Ürün Al", "Ürün\tFiyat\tMiktar\n%s", "Satýn Al", "Ýptal", string);
        }
        else return HataMesaji(playerid, "Sipariþ noktasý yönetim tarafýndan pasife çekilmiþ.");
    }
    else if(!strcmp(option, "isletmeyesataq", true))
    {
        if(Faction_GetType(PlayerInfo[playerid][pFaction]) == POLICE || Faction_GetType(PlayerInfo[playerid][pFaction]) == MEDICAL || Faction_GetType(PlayerInfo[playerid][pFaction]) == GOVERNMENT || Faction_GetType(PlayerInfo[playerid][pFaction]) == LSNN)return
            SunucuMesaji(playerid, "Bulunduðun faction bu komutu kullanmaný desteklemiyor.");

        id = PlayerInfo[playerid][pCarryCrate];

        if(id == -1 || id != -1 && !CrateInfo[id][crExists])return
            SunucuMesaji(playerid, "Elinde koli bulunmuyor.");

        if(CrateInfo[id][crType] == VEHICLE_PART || CrateInfo[id][crType] == ILLEGAL_BOX)return
            SunucuMesaji(playerid, "Bu kutuyu satamazsýn.");

        if(IsPlayerInAnyVehicle(playerid))return
            SunucuMesaji(playerid, "Kutu satmak için araçtan çýkmalýsýn.");

        if(gettime() < PlayerInfo[playerid][pCargoTime][0])return
            SunucuMesaji(playerid, "Bu komutu kullanmak için bir dakika beklemelisin.");

        foreach(new i : Buildings) if(BuildingInfo[i][bExists] && IsPlayerInRangeOfPoint(playerid, 5.0, BuildingInfo[i][bPosX], BuildingInfo[i][bPosY], BuildingInfo[i][bPosZ]) && GetPlayerVirtualWorld(playerid) == BuildingInfo[i][bPosWorld] && GetPlayerInterior(playerid) == BuildingInfo[i][bPosInterior])
        {
            if(!BuildingInfo[i][bRequestTruck] || PlayerInfo[playerid][pSelectedRequest] != i)return
                SunucuMesaji(playerid, "Bu iþletme bunu talep etmedi.");

            new request = GetBizRequestType(i);
            BuildingInfo[i][bCash] -= CompanyInfo[request][cPrice];
            BuildingInfo[i][bProducts] += CrateInfo[id][crAmount];

            Crate_SellIsletme(playerid, id);

            BuildingInfo[i][bRequestTruck]--;
            SaveBuilding(i);

            if(BuildingInfo[i][bRequestTruck] <= 0)
            {
                PlayerInfo[playerid][pContinueTrucking] = false;
                PlayerInfo[playerid][pSelectedRequest] = -1;
            }

            return 1;
        }
        return 1;
    }
    else if(!strcmp(option, "sat", true))
    {
        if(Faction_GetType(PlayerInfo[playerid][pFaction]) == POLICE || Faction_GetType(PlayerInfo[playerid][pFaction]) == MEDICAL || Faction_GetType(PlayerInfo[playerid][pFaction]) == GOVERNMENT || Faction_GetType(PlayerInfo[playerid][pFaction]) == LSNN)return
            SunucuMesaji(playerid, "Bulunduðun faction bu komutu kullanmaný desteklemiyor.");

        if(PlayerInfo[playerid][pJob] != 0 && CompanyInfo[j][cBuyType] != HIRSIZLIK)return
            SunucuMesaji(playerid, "Trucker mesleðinde deðilsin.");

        id = PlayerInfo[playerid][pCarryCrate];

        if(id == -1 || id != -1 && !CrateInfo[id][crExists])return
            SunucuMesaji(playerid, "Elinde koli bulunmuyor.");

        if(CrateInfo[id][crType] == VEHICLE_PART || CrateInfo[id][crType] == ILLEGAL_BOX)return
            SunucuMesaji(playerid, "Bu kutuyu satamazsýn.");

        if(IsPlayerInAnyVehicle(playerid))return
            SunucuMesaji(playerid, "Kutu satmak için araçtan çýkmalýsýn.");

        if(gettime() < PlayerInfo[playerid][pCargoTime][0])return
            SunucuMesaji(playerid, "Bu komutu kullanmak için bir dakika beklemelisin.");

        if(CompanyInfo[j][sirketid] == 17) return HataMesajiC(playerid, "Buraya koli satamazsýn.");

        if(CompanyInfo[j][stok] >= CompanyInfo[j][mstok]) return HataMesajiC(playerid, "Koli satmak istediðiniz yerin stoklarý dolu.");

        if(Pickup_Nearest(playerid, ELEMENT_COMPANY) == -1)return
            SunucuMesaji(playerid, "Bir endüstride veya ürün alma noktasýnda deðilsin.");

        switch(CompanyInfo[j][cBuyType])
        {
            case APPLIANCES: if(CrateInfo[id][crType] == APPLIANCES) Crate_Sell(playerid, id);
            case FOOD: if(CrateInfo[id][crType] == FOOD) Crate_Sell(playerid, id);
            case ICECEK: if(CrateInfo[id][crType] == ICECEK) Crate_Sell(playerid, id);
            case KIYAFET: if(CrateInfo[id][crType] == KIYAFET) Crate_Sell(playerid, id);
            case MEAT: if(CrateInfo[id][crType] == MEAT) Crate_Sell(playerid, id);
            case YUMURTA: if(CrateInfo[id][crType] == YUMURTA) Crate_Sell(playerid, id);
            case MEYVE: if(CrateInfo[id][crType] == MEYVE) Crate_Sell(playerid, id);
            case BOYA: if(CrateInfo[id][crType] == BOYA) Crate_Sell(playerid, id);
            case PAMUK: if(CrateInfo[id][crType] == PAMUK) Crate_Sell(playerid, id);
            case ARPA: if(CrateInfo[id][crType] == ARPA) Crate_Sell(playerid, id);
            case MALT: if(CrateInfo[id][crType] == MALT) Crate_Sell(playerid, id);
            case SHAPES: if(CrateInfo[id][crType] == SHAPES) Crate_Sell(playerid, id);
            case VEHICLE_PART: if(CrateInfo[id][crType] == VEHICLE_PART) Crate_Sell(playerid, id);
            case ILLEGAL_BOX: if(CrateInfo[id][crType] == ILLEGAL_BOX) Crate_Sell(playerid, id);
            case PETROL: if(CrateInfo[id][crType] == PETROL) Crate_Sell(playerid, id);
            case YAKIT: if(CrateInfo[id][crType] == YAKIT) Crate_Sell(playerid, id);
            case BIRA: if(CrateInfo[id][crType] == BIRA) Crate_Sell(playerid, id);
            case SUT: if(CrateInfo[id][crType] == SUT) Crate_Sell(playerid, id);
            case TAHTA_PARCALARI: if(CrateInfo[id][crType] == TAHTA_PARCALARI) Crate_Sell(playerid, id);
            case MOBILYA: if(CrateInfo[id][crType] == MOBILYA) Crate_Sell(playerid, id);
            case GAZOZ: if(CrateInfo[id][crType] == GAZOZ) Crate_Sell(playerid, id);
            case DERI: if(CrateInfo[id][crType] == DERI) Crate_Sell(playerid, id);
            case HIRSIZLIK: if(CrateInfo[id][crType] == HIRSIZLIK) Crate_SellHirsizlik(playerid, id);
        }
        return 1;
    }
    else if(!strcmp(option, "ac", true))
    {
        id = GetNearestCrate(playerid);

        if(PlayerInfo[playerid][pCarryCrate] != -1)return
            SunucuMesajiC(playerid, "Kutuyu açmadan önce yerleþtirin.");

        if(GetNearestCrate(playerid) == -1)return
            SunucuMesajiC(playerid, "Bir kutunun yanýnda deðilsin.");

        if(IsPlayerInAnyVehicle(playerid))return
            SunucuMesajiC(playerid, "Aracýn dýþýnda olmalýsýn.");

        if(Inventory_FreeID(playerid) == -1)return
            SunucuMesajiC(playerid, "Envanterinizde yeterli yer yok.");

        if(PlayerInfo[playerid][pImporting] == true)return
            SunucuMesajiC(playerid, "Bunu yapmadan önce ödeme yapmalýsýn. (checkpointe git)");

        if(CrateInfo[id][crType] != ILLEGAL_BOX)return
            SunucuMesajiC(playerid, "Bu kutuyu açamazsýn.");

        PlayerAME(playerid, "kutuyu açýp içindekileri alýr.");

        for(new i; i < MAX_IMPORT_FOR_PLAYER; i++) if(CrateInfo[id][crItems][i] && CrateInfo[id][crAmounts][i])
        {
            if(Inventory_FreeID(playerid) == -1 && CrateInfo[id][crItemsCount])
            {
                SunucuMesaji(playerid, "Kutuda hala bir þeyler kaldý, çünkü üzerinde yer yok.");
                break;
            }

            new item = CrateInfo[id][crItems][i];
            new player_item = Inventory_AddItem(playerid, Inventory_FreeID(playerid), InventoryObjects[item][invName], CrateInfo[id][crAmounts][i], CrateInfo[id][crQuality][i]);

            SunucuMesaji(playerid, "Kutunun içerisinden %s aldýn.", Inventory_ReturnString(playerid, ENTITY_TYPE_PLAYER, player_item));

            CrateInfo[id][crItems][i] = 0;
            CrateInfo[id][crAmounts][i] = 0;
            CrateInfo[id][crQuality][i] = 0;
            CrateInfo[id][crItemsCount]--;
        }

        if(!CrateInfo[id][crItemsCount]) Crate_Delete(id);
    }
    else return
        HataMesajiC(playerid, "Geçersiz parametre.");

    return 1;
}

CMD:olusumdancik(playerid, params[])
{
    if(PlayerInfo[playerid][pFaction] == -1)return
        SunucuMesaji(playerid, "Bir oluþumda deðilsin.");

    new fid = PlayerInfo[playerid][pFaction];

    PlayerInfo[playerid][pFaction] = -1;
    PlayerInfo[playerid][pRank] = 0;

    FactionInfo[fid][fMembersCount]--;

    BasariMesaji(playerid, "%s oluþumundan ayrýldýn.", FactionInfo[fid][fName]);

    Faction_OffDuty(playerid);

    LogYaz(playerid, "/olusumdancik", -1, fid);

    return 1;
}
CMD:acheatkick(playerid, params[])
{
    new anticheat = SunucuBilgi[CheatKick];

    SunucuBilgi[CheatKick] = !anticheat;

    static const statusStr[2][20] = {"deaktif", "aktif"};

    return SendAworkAlert(false, COLOR_ADMIN, "AdmCmd: %s anti hile özelliðini %s etti.", ReturnRoleplayName(playerid), statusStr[SunucuBilgi[CheatKick]]);
}

CMD:maske(playerid, params[])
{
    if(PlayerInfo[playerid][pLevel] < 3) return HataMesajiC(playerid, "Bu sistemden 3. seviyeden az oyuncular yararlanamaz.");
    switch(PlayerInfo[playerid][pMasked])
    {
        case 0:
        {
            if(Inventory_HasItem(playerid, "Maske", ITEM_BIZ) == -1)return
                HataMesajiC(playerid, "Maskeye sahip deðilsin.");

            if(PlayerInfo[playerid][pPremium] < 2 && Faction_GetType(PlayerInfo[playerid][pFaction]) != POLICE && PlayerInfo[playerid][pAdmin] < 2)
                Inventory_DecraseAmount(playerid, Inventory_HasItem(playerid, "Maske", ITEM_BIZ));

            foreach(new i : Player) if(IsPlayerConnected(i) && PlayerInfo[i][pLogged])
            {
                if(PlayerInfo[i][pAdminDuty])
                {
                    SetPlayerMarkerForPlayer(i, playerid, COLOR_YELLOW); continue;
                }
                ShowPlayerNameTagForPlayer(i, playerid, false);
            }

            new randomid = random(100);
            new mask_number[12];

            if(PlayerInfo[playerid][pID] < 10 && randomid < 10)
                format(PlayerInfo[playerid][pMaskName], MAX_PLAYER_NAME , "Maske%d_%d", randomid, PlayerInfo[playerid][pID]);

            else if(PlayerInfo[playerid][pID] < 10 && randomid > 10 && randomid < 100)
                format(PlayerInfo[playerid][pMaskName], MAX_PLAYER_NAME, "Maske00%d_%d", randomid, PlayerInfo[playerid][pID]);

            else if(PlayerInfo[playerid][pID] < 10 && randomid > 100 && randomid < 1000)
                format(PlayerInfo[playerid][pMaskName], MAX_PLAYER_NAME, "Maske0%d_%d", randomid, PlayerInfo[playerid][pID]);

            else if(PlayerInfo[playerid][pID] < 10 && randomid > 1000)
                format(PlayerInfo[playerid][pMaskName], MAX_PLAYER_NAME, "Maske%d_%d", randomid, PlayerInfo[playerid][pID]);

            if(PlayerInfo[playerid][pID] > 10 && randomid < 10)
                format(PlayerInfo[playerid][pMaskName], MAX_PLAYER_NAME, "Maske000%d_%d", randomid, PlayerInfo[playerid][pID]);

            else if(PlayerInfo[playerid][pID] > 10 && randomid > 10 && randomid < 100)
                format(PlayerInfo[playerid][pMaskName], MAX_PLAYER_NAME, "Maske00%d_%d", randomid, PlayerInfo[playerid][pID]);

            else if(PlayerInfo[playerid][pID] > 10 && randomid > 100 && randomid < 1000)
                format(PlayerInfo[playerid][pMaskName], MAX_PLAYER_NAME, "Maske0%d_%d", randomid, PlayerInfo[playerid][pID]);

            else if(PlayerInfo[playerid][pID] > 10 && randomid > 1000)
                format(PlayerInfo[playerid][pMaskName], MAX_PLAYER_NAME, "Maske%d_%d", randomid, PlayerInfo[playerid][pID]);

            else format(PlayerInfo[playerid][pMaskName], MAX_PLAYER_NAME, "Maske%d_%d", randomid, PlayerInfo[playerid][pID]);

            PlayerInfo[playerid][pMasked] = 1;
            strmid(mask_number, PlayerInfo[playerid][pMaskName], 11, 24);

            /*new yazi[64];
            format(yazi, sizeof(yazi), "%s", PlayerInfo[playerid][pMaskName]);
            DestroyDynamic3DTextLabelEx(PlayerInfo[playerid][pNameTag]);
            PlayerInfo[playerid][pNameTag] = CreateDynamic3DTextLabel(yazi, COLOR_WHITE, 0, 0, 0.1, 20.0, playerid, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0);
            */
            if(PlayerInfo[playerid][pBoxShowed] == true)
            {
                PlayerTextDrawHide(playerid, PlayerInfo[playerid][pTextdraws][1]);
                PlayerInfo[playerid][pBoxShowed] = false;
            }
            Player_Info(playerid, "Maskeni ~y~taktin~w~.");
        }
        case 1: ToggleMask(playerid);
    }

    return 1;
}
CMD:transfer(playerid, params[])
{
    new buildingid = GetPlayerBuilding(playerid, true);

    if(buildingid != -1 && BuildingInfo[buildingid][bType] == BANK)
    {
        new name[MAX_PLAYER_NAME];
        new amount;

        if(sscanf(params, "s[24]d", name, amount))return
            KullanimMesajiC(playerid, "/transfer [isim_soyisim] [miktar]");

        if(amount < 1 || amount > PlayerInfo[playerid][pCashBank])return
            SunucuMesajiC(playerid, "Banka hesabýnýzda yeterli para yok.");

        foreach(new i : Player) if(IsPlayerConnected(i) && !strcmp(ReturnName(i), name, false) && i != playerid)
        {
            LogYaz(playerid, "/transfer", i, amount);

            SendFormattedMessage(i, COLOR_WHITE, "%s banka hesabýna $%d transfer etti.", ReturnRoleplayName(playerid), amount);
            SunucuMesaji(playerid, "%s adlý oyuncuya $%d transfer ettin.", ReturnRoleplayName(i), amount);

            ArtanPara(i, amount);
            EksilenPara(playerid, -amount);
            PlayerInfo[i][pCashBank] += amount;
            return PlayerInfo[playerid][pCashBank] -= amount;
        }

        // new query[256];

        mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT * FROM characters WHERE LOWER(char_name) = LOWER('%e') AND banned = 0 AND deleted = 0 AND deleted_at IS NULL", name);
        mysql_tquery(ourConnection, queryx, "OnTransferPlayerSearch", "dd", playerid, amount);
    }
    else return
        SunucuMesajiC(playerid, "Bankada deðilsin.");

    return 1;
}
CMD:parayatir(playerid, params[])
{
    new buildingid = GetPlayerBuilding(playerid, true);

    if(buildingid != -1 && BuildingInfo[buildingid][bType] == BANK)
    {
        new amount;

        if(sscanf(params, "d", amount))return
            KullanimMesajiC(playerid, "/parayatir [miktar]");

        if(amount < 1 || amount > PlayerInfo[playerid][pCash])return
            SunucuMesajiC(playerid, "Envanterde boþ yer yok.");

        PlayerInfo[playerid][pCashBank] += amount;
        AC_GivePlayerMoney(playerid, -amount, "/parayatir");

        SunucuMesaji(playerid, "Bankaya $%d yatýrdýn.", amount);
    }
    else return
        SunucuMesajiC(playerid, "Bankada deðilsin.");

    return 1;
}
CMD:mevduat(playerid, params[])
{
    new buildingid = GetPlayerBuilding(playerid, true);

    if(buildingid != -1 && BuildingInfo[buildingid][bType] == BANK)
    {
        new amount, option[12];

        if(sscanf(params, "s[12]D(0)", option, amount))return
            KullanimMesajiC(playerid, "/mevduat [paracek-parayatir]");

        if(!strcmp(option, "paracek", true)) {
            if(PlayerInfo[playerid][pSavings] <= 0) return
                SunucuMesaji(playerid, "Mevduatýnda paran yok.");

            amount = PlayerInfo[playerid][pSavings];
            PlayerInfo[playerid][pSavings] = 0;
            AC_GivePlayerMoney(playerid, amount, "/mevduat paracek");

            SunucuMesaji(playerid, "Mevduat hesabýndaki $%d miktarýndaki paraný çektin.", amount);

            LogYaz(playerid, "/mevduat paracek", -1, amount);
        }
        else if(!strcmp(option, "parayatir", true)) {
            if(amount < MIN_SAVINGS_AMOUNT || amount > MAX_SAVINGS_AMOUNT)return
                HataMesaji(playerid, "Geçersiz deðer (minimum $%d - maksimum $%d).", MIN_SAVINGS_AMOUNT, MAX_SAVINGS_AMOUNT);

            if(amount > PlayerInfo[playerid][pCash]) return
                HataMesaji(playerid, "Yeterli paran yok. ($%d)", amount);

            if(PlayerInfo[playerid][pSavings] > 0) return
                HataMesaji(playerid, "Mevduat hesabýnda $%d bulunuyor. /mevduat paracek ile hepsini çekebilirsin. (parça parça çekemezsin)", PlayerInfo[playerid][pSavings]);

            PlayerInfo[playerid][pSavings] += amount;
            AC_GivePlayerMoney(playerid, -amount, "/mevduat");

            SunucuMesaji(playerid, "Mevduat hesabýna $%d yatýrdýn. (/mevduat paracek ile paraný geri alabilirsin.)", amount);
            SendClientMessageEx(playerid, COLOR_WHITE, "Bu parayý çekene kadar banka hesabýnýzdan para çekemezsiniz.");
        }
    }
    else return
        SunucuMesajiC(playerid, "Bankada deðilsin.");

    return 1;
}
CMD:paracek(playerid, params[])
{
    new buildingid = GetPlayerBuilding(playerid, true);

    if(buildingid != -1 && (BuildingInfo[buildingid][bType] == BANK))
    {
        new option[16], amount;

        if(sscanf(params, "s[16]D(-1)", option, amount))return
            KullanimMesajiC(playerid, "/paracek [banka - maas]");

        if(!strcmp(option, "banka", true))
        {
            if(amount == -1)return
                KullanimMesajiC(playerid, "/paracek [banka] [deðer/miktar]");

            if(amount < 1 || amount > PlayerInfo[playerid][pCashBank]) return
                SunucuMesaji(playerid, "Hatalý giriþ yaptýn.");

            PlayerInfo[playerid][pCashBank] -= amount;
            AC_GivePlayerMoney(playerid, amount, "/paracek");

            SunucuMesaji(playerid, "Banka hesabýndan $%d çektin.", amount);

            LogYaz(playerid, "/paracek banka", -1, amount);
        }
        else if(!strcmp(option, "maas", true))
        {
            if(PlayerInfo[playerid][pPaycheck] <= 0) return
                SunucuMesaji(playerid, "Çekilecek maaþ paran yok.");

            amount = PlayerInfo[playerid][pPaycheck];
            PlayerInfo[playerid][pPaycheck] = 0;
            AC_GivePlayerMoney(playerid, amount, "/paracek maas");

            SunucuMesaji(playerid, "Maaþýný çektin. ($%d)", amount);

            LogYaz(playerid, "/paracek maas", -1, amount);
        }
        else return
            HataMesajiC(playerid, "Geçersiz parametre.");
    }
    else return
        SunucuMesajiC(playerid, "Bankada deðilsin.");

    return 1;
}
CMD:slot(playerid, params[])
{
    if(Inventory_HasItem(playerid, "Telsiz", ITEM_BIZ) == -1)return
        SunucuMesaji(playerid, "Telsize sahip deðilsin.");

    if(isnull(params) || strlen(params) > 20)
    {
        for(new x; x < 8; x++)
            SendFormattedMessage(playerid, COLOR_GREY, "[Telsiz] Slot %d: Frekans %d", x + 1, PlayerInfo[playerid][pRadioSlot][x]);

        return KullanimMesajiC(playerid, "/slot [slot]");
    }

    new slot;

    if(sscanf(params, "d", slot))return
        KullanimMesajiC(playerid, "/slot [slot]");

    if(slot < 1 || slot > 8)return
        SunucuMesaji(playerid, "Geçersiz slot. (1 - 8)");

    slot--;

    if(!PlayerInfo[playerid][pRadioSlot][slot])return
        HataMesaji(playerid, "%d slotunu deneyin. | /frekans %d [frekans]", slot + 1, slot + 1);

    PlayerInfo[playerid][pRadioDefault] = slot + 1;
    BasariMesaji(playerid, "Ana frekans slotunu %d olarak ayarladýn, /t ile bu frekansý kullanabilirsin.", slot + 1);

    return 1;
}
CMD:frekans(playerid, params[])
{
    if(Inventory_HasItem(playerid, "Telsiz", ITEM_BIZ) == -1)return
        SunucuMesaji(playerid, "Telsize sahip deðilsin.");

    if(isnull(params) || strlen(params) > 20)
    {
        for(new x; x < 8; x++)
            SendFormattedMessage(playerid, COLOR_GREY, "[Telsiz] Slot %d: Frekans %d", x + 1, PlayerInfo[playerid][pRadioSlot][x]);

        return KullanimMesajiC(playerid, "/frekans [slot] [frekans]");
    }

    new slot, channel;

    if(sscanf(params, "dd", slot, channel)) return
        KullanimMesajiC(playerid, "/frekans [slot] [frekans]");

    if(slot < 1 || slot > 8) return
        SunucuMesaji(playerid, "Geçersiz slot. (1 - 8)");

    if(channel < 0 || channel >= MAX_FREQUENCES)return
        HataMesaji(playerid, "Frekans bulunamadý. (0 - %d)", MAX_FREQUENCES - 1);

    if(channel == 911) return HataMesajiC(playerid, "Bu frekansa eriþiminiz yok.");
    if(channel == 692 && PlayerInfo[playerid][pFaction] != 0) return HataMesajiC(playerid, "Bu frekansa giremezsin.");

    if(FrequenceInfo[channel][rFaction] != -1 && PlayerInfo[playerid][pFaction] != FrequenceInfo[channel][rFaction])return
        SunucuMesaji(playerid, "Bu frekansa giremezsin.");

    slot--;

    PlayerInfo[playerid][pRadioSlot][slot] = channel;
    PlayerInfo[playerid][pRadioDefault] = slot + 1;

    if(PlayerInfo[playerid][pAuthorized][channel] == false && PlayerInfo[playerid][pFaction] != -1 && PlayerInfo[playerid][pFaction] == FrequenceInfo[channel][rFaction])
        PlayerInfo[playerid][pAuthorized][channel] = true;

    BasariMesaji(playerid, "Radyo frekansýný deðiþtirdin. [Frekans: %d - Slot: %d]", channel, slot + 1);
    BasariMesaji(playerid, "%d slotu artýk ana frekans. Bunu /slot [slot] ile deðiþtirebilirsin.", slot + 1);

    if(strlen(FrequenceInfo[channel][rPassword]) > 0)
        SendFormattedMessage(playerid, COLOR_WHITE, (PlayerInfo[playerid][pAuthorized][channel] == false) ? ("Bu frekans kilitlendi, /telsizgiris komutuyla baðlanmayý dene.") : ("%d kanalýna giriþ yaptýn."), channel);
    else
        PlayerInfo[playerid][pAuthorized][channel] = true;

    return 1;
}
CMD:telsizgiris(playerid, params[])
{
    if(Inventory_HasItem(playerid, "Telsiz", ITEM_BIZ) == -1)return
        SunucuMesaji(playerid, "Telsize sahip deðilsin.");

    new slot, password[32];

    if(sscanf(params, "ds[32]", slot, password)) return
        KullanimMesajiC(playerid, "/telsizgiris [slot] [þifre]");

    if(slot < 1 || slot > 8) return
        SunucuMesaji(playerid, "Geçersiz slot (1-8).");

    slot--;

    new channel = PlayerInfo[playerid][pRadioSlot][slot];

    if(!channel)return
        SunucuMesaji(playerid, "Bu slotta geçerli bir frekans yok.");

    if(!strlen(FrequenceInfo[channel][rPassword]) || FrequenceInfo[channel][rFaction] != -1 && PlayerInfo[playerid][pFaction] == FrequenceInfo[channel][rFaction])return
        SunucuMesaji(playerid, "Þifreli bir frekansta deðilsin.");

    if(PlayerInfo[playerid][pAuthorized][channel] == true)return
        SunucuMesaji(playerid, "Bu frekansta doðrulanmýþ durumdasýn.");

    if(strlen(FrequenceInfo[channel][rPassword]) > 0 && strcmp(FrequenceInfo[channel][rPassword], password, false))return
        SunucuMesaji(playerid, "Yanlýþ þifre.");

    // new query[128];

    PlayerInfo[playerid][pAuthorized][channel] = true;
    BasariMesaji(playerid, "%d frekansýna girme yetkisine sahipsin.", channel);

    mysql_format(ourConnection, queryx, sizeof(queryx), "INSERT INTO radio_authorized (id, channel) VALUES ('%d', '%d')", PlayerInfo[playerid][pID], channel);
    mysql_tquery(ourConnection, queryx);

    return 1;
}
CMD:telsiz(playerid, params[]) return SendRadioMessage(playerid, params, 15.0);
CMD:t(playerid, params[]) return pc_cmd_telsiz(playerid, params);
CMD:tlow(playerid, params[]) return SendRadioMessage(playerid, params, 3.5);
CMD:satinal(playerid, params[])
{
    if(IsPlayerInRangeOfPoint(playerid, 5.0, 1096.650512, -1435.518798, 15.787182))
        return Dialog_Show(playerid, DialogBincoSecim, DIALOG_STYLE_LIST, "Kýyafet Dükkaný", "Kýyafet al\nEve kýyafet al\nAksesuar al", "Tamam", "Geri");

    if(!IsPlayerInAnyVehicle(playerid) && Pickup_Nearest(playerid, ELEMENT_LICENSE) != -1)
    {
        if(PlayerInfo[playerid][pFreezed]) return 1;

        new id = Pickup_Nearest(playerid, ELEMENT_LICENSE);

        if(PlayerInfo[playerid][pLicenses][LicensesPoint[id][licenseType] - 1])return
            SunucuMesaji(playerid, "Zaten lisansa sahipsin.");
            
        if((LicensesPoint[id][licenseType] - 1) == 0 && !PlayerInfo[playerid][pLicenses][0] && PlayerInfo[playerid][pLisansCeza])
        {
            if(gettime() < PlayerInfo[playerid][pLisansCeza] && PlayerInfo[playerid][pLisansCeza] != -1)
            {
                new year, month, day, hour, minute, second;
                TimestampToDate(PlayerInfo[playerid][pLisansCeza], year, month, day, hour, minute, second, 3);
                return HataMesaji(playerid, "Yeni ehliyet alabileceðiniz tarih: %d/%d/%d - %d:%d:%d", day, month, year, hour, minute, second);
            }
            PlayerInfo[playerid][pLisansCeza] = -1;
        }

        GetPlayerPos(playerid, PlayerInfo[playerid][pPosX], PlayerInfo[playerid][pPosY], PlayerInfo[playerid][pPosZ]);

        return Exam_Init(playerid, LicensesPoint[id][licenseType]);
    }

    new string[500];

    if(!IsPlayerInAnyVehicle(playerid) && Pickup_Nearest(playerid, ELEMENT_DEALER) != -1)
    {
        if(!SunucuBilgi[GaleriDurum])
        {
            new d = Pickup_Nearest(playerid, ELEMENT_DEALER);
            new premiumLevel;// = Vehicle_Premium(DealerInfo[d][dModel][0]);

            PlayerTextDrawSetString(playerid, TDDealer_Select[playerid][1], DealerInfo[d][dName]);
            PlayerTextDrawSetPreviewModel(playerid, TDDealer_Select[playerid][2], DealerInfo[d][dModel][0]);

            strmid(string, GetVehicleModelName(DealerInfo[d][dModel][0]), 0, 32);
            PlayerTextDrawSetString(playerid, TDDealer_Select[playerid][5], string);

            format(string,sizeof(string),"~w~Fiyat:~y~ %d$", DealerInfo[d][dPrice][0]);
            PlayerTextDrawSetString(playerid, TDDealer_Select[playerid][6], string);

            for(new j; j < 9; j++) PlayerTextDrawShow(playerid, TDDealer_Select[playerid][j]);
            
            new model = DealerInfo[d][dModel][0];

            for(new i; i < sizeof(PremiumVehicles); ++i)
            {
                if(PremiumVehicles[i][pvmodelid] == model)
                {
                    premiumLevel = PremiumVehicles[i][pvdonator];
                    break;
                }
            }
            
            if(premiumLevel)
            {
                static const premiumName[5][32] = {"~y~DONATOR", "~y~DONATOR", "~y~DONATOR", "~y~DONATOR", "~y~DONATOR"};

                PlayerTextDrawShow(playerid, TDDealer_Select[playerid][9]);
                PlayerTextDrawSetString(playerid, TDDealer_Select[playerid][9], premiumName[premiumLevel - 1]);
            }

            PlayerInfo[playerid][pDealerListitem] = 0;
            SelectTextDraw(playerid, 0xC9C9C9AA);
        }
        else HataMesaji(playerid, "Galeri kapalý, araç satýþý þu anda yapýlmýyor.");
    }
    
    if(IsPlayerInRangeOfPoint(playerid, 4.0, 449.1310,-83.6897,999.5547) && GetPlayerVirtualWorld(playerid) == 19 && GetPlayerInterior(playerid) == 4) {
        new count;
        for(new j, js = sizeof(ProductInfo); j < js; j++)
        {
            if(ProductInfo[j][productBiz] == KANTIN) {
                format(string, sizeof(string), "%s%s\t$%d\n", string, ProductInfo[j][productName], ProductInfo[j][productPrice]);
                PlayerInfo[playerid][pBuyID][count] = j;
                count++;
            }
        }

        return Dialog_Show(playerid, DialogBuyItem, DIALOG_STYLE_TABLIST_HEADERS, "Satýn Al", "Ürün\tFiyat\n%s", "Satýn Al", "Ýptal", string);
    }
    if(GetPlayerVirtualWorld(playerid) >= BUILDING_WORLD)
    {
        new buildingid = GetPlayerBuilding(playerid, true);
        new count;

        if(BuildingInfo[buildingid][bType] == COMPLEX || BuildingInfo[buildingid][bType] == BUILDING || BuildingInfo[buildingid][bType] == CLEAN)
            return HataMesaji(playerid, "Burada alýþveriþ yapamazsýn.");

        if(BuildingInfo[buildingid][bType] == ADVERTISEMENT)
            return HataMesaji(playerid, "\"/reklamver\" komutunu kullanarak reklam verebilirsin.");

        if(BuildingInfo[buildingid][bType] == BANK)
            return HataMesaji(playerid, "\"/bankayardim\" komutunu kullanarak ekonomi komutlarýna eriþebilirsin.");

        if(BuildingInfo[buildingid][bType] == CLOTHING)
            return Dialog_Show(playerid, DialogBincoSecim, DIALOG_STYLE_LIST, "Kýyafet Dükkaný", "Kýyafet al\nEve kýyafet al\nAksesuar al", "Tamam", "Geri");
            
        if(BuildingInfo[buildingid][bType] == BLACK_MARKET && PlayerInfo[playerid][pFaction] == -1)
            return HataMesaji(playerid, "Burada alýþveriþ yapma yetkin yok, iþlem baþarýsýz.");
            
        if(BuildingInfo[buildingid][bType] == BLACK_MARKET && FactionInfo[PlayerInfo[playerid][pFaction]][fOlusumPuani] < 35)
            return HataMesaji(playerid, "Oluþum puanýn yeterli olmadýðý için bu komutu kullanamýyorsun.");
            
        if(BuildingInfo[buildingid][bType] == BLACK_MARKET && HasPlayerUserKey(playerid, KEY_BUILDING, BuildingInfo[buildingid][bID]) == 0 && PlayerInfo[playerid][pID] != BuildingInfo[buildingid][bOwner])
            return HataMesaji(playerid, "Burada alýþveriþ yapma yetkin yok, iþlem baþarýsýz.");
            
        if(BuildingInfo[buildingid][bType] == GARAJ || BuildingInfo[buildingid][bType] == TAMIRHANE || BuildingInfo[buildingid][bType] == NONE)
            return HataMesaji(playerid, "Bulunduðunuz iþletmede /satinal komutu devre dýþý.");

        if(BuildingInfo[buildingid][bType] == KUMARHANE)
            return HataMesaji(playerid, "Burada ürün satýþý yapýlmamaktadýr.");
            
        if(BuildingInfo[buildingid][bType] == HASTANE)
            return pc_cmd_ilacal(playerid);
            
        if(BuildingInfo[buildingid][bType] == CUSTOM) {
            new stringDialog[2048];
            for(new i; i < 5; i++) {
                if(BuildingInfo[buildingid][bUrunFiyat][i] != 0) {
                    format(stringDialog, sizeof stringDialog, "%s\n{0896aa}%s\t{66b743}$%d", stringDialog, BuildingUrunInfo[buildingid][i], BuildingInfo[buildingid][bUrunFiyat][i]);
                }
                else {
                    format(stringDialog, sizeof stringDialog, "%s\n{ffffff}Ürün Yok\t{b74c3b}$0", stringDialog);
                }
            }
            Dialog_Show(playerid, DialogIsyeriUrunAl, DIALOG_STYLE_TABLIST_HEADERS, "Ýþyeri Ürün Ýþlemleri", "{5d5a59}Ürün Ýsmi\t{5d5a59}Ürün Fiyatý%s", "Seç", "Ýptal", stringDialog);
            return 1;
        }
        if(BuildingInfo[buildingid][bProducts] < 1)return
            SunucuMesaji(playerid, "Bu iþletmede yeterli ürün yok, satýn alma iþlemi baþarýsýz.");

        for(new j, js = sizeof(ProductInfo); j < js; j++)
        {
            if(ProductInfo[j][productBiz] != BuildingInfo[buildingid][bType])continue;
            format(string, sizeof(string), "%s%s\t$%d\n", string, ProductInfo[j][productName], BuildingInfo[buildingid][bPrices][count]);
            PlayerInfo[playerid][pBuyID][count] = j;
            count++;
        }

        return Dialog_Show(playerid, DialogBuyItem, DIALOG_STYLE_TABLIST_HEADERS, "Satýn Al", "Ürün\tFiyat\n%s", "Satýn Al", "Ýptal", string);
    }
    if(GetNearestService(playerid, PNS) != -1) return Dialog_Show(playerid, DialogServisSatin, DIALOG_STYLE_LIST, "Satýn Al", "Alet Çantasý\nTamir Kiti", "Satýn Al", "Ýptal");

    return 1;
}
CMD:ustara(playerid, params[])
{
    new id;

    if(sscanf(params, "k<m>", id))return
        KullanimMesajiC(playerid, "/ustara [id/isim]");

    if(!IsPlayerConnected(id) || id == playerid)return
        HataMesajiC(playerid, "Bu ID'de birisi yok ya da kendi üzerini arýyorsun.");

    if(!ProxDetectorS(5.0, playerid, id))return
        SunucuMesaji(playerid, "Bu oyuncuya yakýn deðilsin.");

    PlayerInfo[id][pFrisk] = playerid;

    if(GetPlayerSpecialAction(id) != SPECIAL_ACTION_HANDSUP)
    {
        if(!PlayerInfo[playerid][pMasked]) {
            BasariMesaji(id, "%s sana üst arama isteði gönderdi. /kabulet ustara komutuyla kabul edebilirsin.", ReturnRoleplayName(playerid));
            BasariMesaji(playerid, "Üst arama isteði %s kiþine gönderildi.", ReturnRoleplayName(id));
        } else {
            BasariMesaji(id, "%s sana üst arama isteði gönderdi. /kabulet ustara komutuyla kabul edebilirsin.", PlayerInfo[playerid][pMaskName]);
            BasariMesaji(playerid, "Üst arama isteði %s kiþine gönderildi.", ReturnRoleplayName(id));
        }
    }
    else pc_cmd_kabulet(id, "ustara");

    return 1;
}

CMD:acam(playerid, params[])
{
    if(!IsPlayerInAnyVehicle(playerid))return SunucuMesaji(playerid, "Bu komutu kullanmak için araçta olmalýsýn.");

    new vehicleid = GetPlayerVehicleID(playerid);
    new sWindow = GetPlayerVehicleSeat(playerid);

    if(IsABike(vehicleid) || IsAMotorBike(vehicleid))return
        SunucuMesaji(playerid, "Bu komutu bu araçta kullanamazsýn");

    GetVehicleParamsCarWindows(vehicleid, VehicleInfo[vehicleid][vWindows][0], VehicleInfo[vehicleid][vWindows][1], VehicleInfo[vehicleid][vWindows][2], VehicleInfo[vehicleid][vWindows][3]);

    if(isnull(params) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)return
        KullanimMesajiC(playerid, "/acam [0 - 3 ya da hepsi]");

    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER && strlen(params) > 0)
        sWindow = strval(params);

    if(!strcmp(params, "hepsi", true)) {
        new found;
        for(new i; i<= 3; i++) {
            if(VehicleInfo[vehicleid][vWindows][i]) {
                found = 1;
                break;
            }
        }
        if(!found) {
            for(new i; i <= 3; i++)
                VehicleInfo[vehicleid][vWindows][i] = 1;
            SetVehicleParamsCarWindows(vehicleid, VehicleInfo[vehicleid][vWindows][0], VehicleInfo[vehicleid][vWindows][1], VehicleInfo[vehicleid][vWindows][2], VehicleInfo[vehicleid][vWindows][3]);
            PlayerAME(playerid, "aracýn tüm camlarýný kapatýr.");
        } else {
            for(new i; i <= 3; i++)
                VehicleInfo[vehicleid][vWindows][i] = 0;
            SetVehicleParamsCarWindows(vehicleid, VehicleInfo[vehicleid][vWindows][0], VehicleInfo[vehicleid][vWindows][1], VehicleInfo[vehicleid][vWindows][2], VehicleInfo[vehicleid][vWindows][3]);
            PlayerAME(playerid, "aracýn tüm camlarýný açar.");
        }
        return 1;
    }

    if(sWindow < 0 || sWindow > 3)return
        SunucuMesaji(playerid, "Varolmayan cam. (0 - 3)");

    VehicleInfo[vehicleid][vWindows][sWindow] = !VehicleInfo[vehicleid][vWindows][sWindow];
    SetVehicleParamsCarWindows(vehicleid, VehicleInfo[vehicleid][vWindows][0], VehicleInfo[vehicleid][vWindows][1], VehicleInfo[vehicleid][vWindows][2], VehicleInfo[vehicleid][vWindows][3]);
    PlayerAME(playerid, (VehicleInfo[vehicleid][vWindows][sWindow]) ? ("aracýn bir camýný kapatýr.") : ("aracýn bir camýný açar."));
    return 1;
}

CMD:arabacek(playerid, params[])
{
    new vehicleid = GetPlayerVehicleID(playerid);
    if(IsTrailerAttachedToVehicle(vehicleid))return DetachTrailerFromVehicle(vehicleid);

    if(Faction_GetType(PlayerInfo[playerid][pFaction]) == POLICE || Faction_GetType(PlayerInfo[playerid][pFaction]) == MEDICAL || Faction_GetType(PlayerInfo[playerid][pFaction]) == GOVERNMENT || Faction_GetType(PlayerInfo[playerid][pFaction]) == LSNN)return
        SunucuMesaji(playerid, "Bulunduðun faction bu komutu kullanmaný desteklemiyor.");

    if(PlayerInfo[playerid][pJob] != 1)return
        SunucuMesaji(playerid, "Tamirci deðilsin.");

    new id;
    if(sscanf(params, "k<m>", id)) return KullanimMesajiC(playerid, "/arabacek [sürücü id]");

    if(!InTowTruck(playerid))
        return HataMesajiC(playerid, "Towtruck'da deðilsiniz.");

    if(GetPlayerState(id) != PLAYER_STATE_PASSENGER)
        return HataMesajiC(playerid, "Araç çekme isteðini göndereceðiniz oyuncu araçta yolcu durumunda olmalýdýr.");

    if(Vehicle_IsOwner(id, GetPlayerVehicleID(id), false) == 0)
        return HataMesajiC(playerid, "Ýstek göndermek istediðiniz oyuncu araç veya anahtar sahibi deðil.");

    if(!ProxDetectorS(10.0, playerid, id) || !IsPlayerInAnyVehicle(id))return
        HataMesajiC(playerid, "Oyuncu sizden uzakta veya bir araçta deðil.");

    PlayerInfo[id][pAracCekmeIstegi] = playerid;
    BasariMesaji(playerid, "Araç çekme isteðiniz baþarýyla gönderildi, lütfen bekleyin.");
    SunucuMesaji(id, "%s adlý tamirci size araç çekme isteði gönderdi. (/kabulet cek)", ReturnRoleplayName(playerid));
    return 1;
}

CMD:araccek(playerid, params[])
{
    new vehicleid = GetPlayerVehicleID(playerid),
        Float:x, Float:y, Float:z,
        Float:vx, Float:vy, Float:vz;

    if(!InTowTruck(playerid))return
        SunucuMesaji(playerid, "Çekicide deðilsin.");

    if(IsTrailerAttachedToVehicle(vehicleid))return
        DetachTrailerFromVehicle(vehicleid);

    GetPlayerPos(playerid, x, y, z);

    foreach(new i : Vehicles)
    {
        if(!IsValidVehicle(i) || !VehicleInfo[i][vScript])continue;

        GetVehiclePos(i, vx, vy, vz);

        if(vehicleid && (floatabs(x - vx) < 7.0) && (floatabs(y - vy) < 7.0) && (floatabs(z - vz) < 7.0) && i != vehicleid)
        {
            AttachTrailerToVehicle(i, vehicleid); break;
        }

        continue;
    }
    return 1;
}

CMD:cagrikabul(playerid, params[])
{
    new vehicleid = GetPlayerVehicleID(playerid);

    if(InTowTruck(playerid) && PlayerInfo[playerid][pJob] != 1 || IsTaxi(vehicleid) && PlayerInfo[playerid][pJob] != 2)return
        SunucuMesaji(playerid, "Mesleðine uygun araçta deðilsin.");

    if(PlayerInfo[playerid][pJob] != 1 && PlayerInfo[playerid][pJob] != 2)return
        SunucuMesaji(playerid, "Tamirci veya taksici deðilsin.");

    if(!PlayerInfo[playerid][pJobDuty])return
        SunucuMesaji(playerid, "Meslek iþbaþýnda olmalýsýn.");

    new Float:playerPosX, Float:playerPosY, Float:playerPosZ, id;

    if(sscanf(params, "d", id))return
        KullanimMesajiC(playerid, "/cagrikabul [arayan id]");

    new targetid = IsPlayerIDOnline(id);

    if(targetid == -1 || targetid == playerid)return
        HataMesajiC(playerid, "Geçersiz ID.");

    if(PlayerInfo[targetid][pRequiredService] != PlayerInfo[playerid][pJob])return
        SunucuMesaji(playerid, "Kullanýcýnýn bir çaðrýsý yok veya baþkasý tarafýndan kabul edildi.");

    new location[MAX_ZONE_NAME];

    GetDynamicPlayerPos(targetid, playerPosX, playerPosY, playerPosZ);
    AC_SetPlayerCheckpoint(playerid, playerPosX, playerPosY, playerPosZ, 5.0);

    PlayerInfo[targetid][pRequiredService] = 0;

    GetCoords2DZone(playerPosX, playerPosY, location, MAX_ZONE_NAME);

    SunucuMesaji(playerid, "%s noktasýna gidin.", location);
    SendFormattedMessage(targetid, COLOR_GREY, "(( %s çaðrýyý aldý. ))", ReturnRoleplayName(playerid));

    SendJobMessage(PlayerInfo[playerid][pJob], "%s %d çaðrýsýný kabul etti.", ReturnRoleplayName(playerid), id);

    PlayerInfo[playerid][pLocalize] = true;

    return 1;
}

flags:aracboyat(CMD_USER);
CMD:aracboyat(playerid, params[])
{
    if(!IsPlayerInAnyVehicle(playerid))
        return HataMesajiC(playerid, "Herhangi bir araçta deðilsin.");

    if(Vehicle_IsOwner(playerid, GetPlayerVehicleID(playerid), true) == 0)
        return HataMesajiC(playerid, "Araç boyatma iþlemi için araç sahibi olmalýsýnýz.");

    new aracboyatiyormuyum = GetPVarInt(playerid, "AracBoyatiyorum");
    if(PlayerInfo[playerid][pInTuning] || aracboyatiyormuyum == 1) // evet boyatiyorsun
        return HataMesajiC(playerid, "Bu iþlemi þu anda yapamazsýn.");

    if(IsPlayerInRangeOfPoint(playerid, 5, EXTERIOR_TUNING_X, EXTERIOR_TUNING_Y, EXTERIOR_TUNING_Z) == 0 && IsPlayerInRangeOfPoint(playerid, 20, 135.987304, -1824.971679, 1.669062) == 0)
    {
        AC_SetPlayerCheckpoint(playerid, EXTERIOR_TUNING_X, EXTERIOR_TUNING_Y, EXTERIOR_TUNING_Z, 1.0);
        return HataMesajiC(playerid, "Bu komutu \"modifiye noktasý\" üzerinde kullanabilirsin.");
    }

    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
        return HataMesajiC(playerid, "Bu komutu sürücü koltuðunda kullanabilirsin.");

    new color[2], vid = GetPlayerVehicleID(playerid);

    if(VehicleInfo[vid][vJob] != -1) return HataMesajiC(playerid, "Meslek araçlarýný boyatamazsýnýz.");

    if(sscanf(params, "dd", color[0], color[1]))
    {
        KullanimMesajiC(playerid, "/aracboyat [birincil renk kodu] [ikincil renk kodu]");
        KullanimMesajiC(playerid, "Araç renk kodlarýna /renkler komutunu kullanarak ulaþabilirsin.");
        KullanimMesajiC(playerid, "Araç boyatma iþleminin ücreti $500 olup iþlem 30 saniye sürmektedir.");
        return 1;
    }
    OAC_GivePlayerMoney(playerid, -500);
    SunucuMesaji(playerid, "Araç boyama iþlemi $500 karþýlýðýnda baþladý, lütfen bekleyiniz.");
    SetPVarInt(playerid, "AracBoyatiyorum", 1);
    DestroyDynamic3DTextLabelEx(PlayerInfo[playerid][pNameTag]);
    PlayerInfo[playerid][pNameTag] = CreateDynamic3DTextLabel("(( Kullanýcý þu anda aracýný boyatýyor. ))", COLOR_ADMIN, 0, 0, 0.5, 30.0, playerid, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0);
    SetTimerEx("AracBoyatBitir", 30000, false, "dddd", playerid, vid, color[0], color[1]);
    PlayerInfo[playerid][pFreezed] = 1;
    TogglePlayerControllable(playerid, false);
    return 1;
}
AracBoyatBitir(playerid, vid, c, cc); public AracBoyatBitir(playerid, vid, c, cc)
{
    RemoveTag(playerid);
    VehicleInfo[vid][vFirstColor] = c;
    VehicleInfo[vid][vSecondColor] = cc;
    ChangeVehicleColor(vid, c, cc);
    if(!VehicleInfo[vid][vTemporary]) SaveVehicle(vid);
    DeletePVar(playerid, "AracBoyatiyorum");
    BasariMesaji(playerid, "Araç boyatma iþlemi baþarýyla sonuçlandý.");
    PlayerInfo[playerid][pFreezed] = 0;
    TogglePlayerControllable(playerid, true);
    return 1;
}

CMD:aracboya(playerid, params[])
{
    if(PlayerInfo[playerid][pJob] != 1)return
        HataMesajiC(playerid, "Tamirci mesleðinde deðilsin.");

    if(!InTowTruck(playerid))return
        HataMesajiC(playerid, "Tow Truck'ýn içerisinde deðilsin.");

    new colors[2], id;
    new vehicleid = GetPlayerVehicleID(playerid);
    new price;

    if(sscanf(params, "k<m>ddd", id, colors[0], colors[1], price))return
        KullanimMesajiC(playerid, "/aracboya [id/isim] [birincil renk] [ikincil renk] [fiyat]");

    if(VehicleInfo[vehicleid][vComponents] < 10)return
        HataMesajiC(playerid, "Araç boyamak için yeterli parçaya sahip deðilsin. (10)");

    if(!IsPlayerConnected(id) || id == playerid)return
        HataMesajiC(playerid, "Geçersiz ID.");

    if(!ProxDetectorS(15.0, playerid, id) || !IsPlayerInAnyVehicle(id))return
        HataMesajiC(playerid, "Oyuncu sizden uzakta veya bir araçta deðil.");

    if(Vehicle_IsOwner(id, GetPlayerVehicleID(id), false) == 0)
        return HataMesajiC(playerid, "Ýstek göndermek istediðiniz oyuncu araç veya anahtar sahibi deðil.");

    if(price < 0)return
        HataMesajiC(playerid, "Geçersiz ücret girdiniz.");

    if(PlayerInfo[id][pCash] < price)return
        HataMesaji(playerid, "Bu oyuncunun yeterli parasý yok. ($%d)", price);

    PlayerInfo[id][pRequestSpray] = playerid;
    PlayerInfo[id][pSprayPrice] = price;
    PlayerInfo[id][pFirstColor] = colors[0];
    PlayerInfo[id][pSecondColor] = colors[1];

    SunucuMesaji(id, "%s adlý tamirci aracýný $%d karþýlýðýnda boyamak (%d/%d) istiyor. (/kabulet aracboya)", ReturnRoleplayName(playerid), price, colors[0], colors[1]);
    SunucuMesaji(playerid, "Araç boyama isteðiniz (%d/%d) %s adlý müþteriye gönderildi. ($%d)", colors[0], colors[1], ReturnRoleplayName(id), price);

    return 1;
}

CMD:tamiriptal(playerid) {
    if(PlayerInfo[playerid][pJob] != 1)return
        SunucuMesaji(playerid, "Tamirci mesleðinde deðilsin.");
    new aid = -1;
    foreach(new pid: Player) {
        if(PlayerInfo[pid][pRequestRepair] == playerid) {
            aid = pid;
            break;
        }
    }
    if(aid != -1) {
        PlayerInfo[aid][pRequestRepair] = -1;
        SunucuMesaji(playerid, "Tamir isteði iptal edildi.");
        SunucuMesaji(aid, "Tamir isteði iptal edildi.");
    } else return HataMesajiC(playerid, "Tamir isteði yollamamýþsýnýz.");
    return 1;
}

flags:aletcantasi(CMD_USER);
CMD:aletcantasi(playerid)
{
    if(PlayerInfo[playerid][pAletCantasi]) return HataMesajiC(playerid, "Üzerinizde sadece bir adet alet çantasý bulundurabilirsiniz.");

    if(PlayerInfo[playerid][pCash] < 1200) return HataMesajiC(playerid, "Üzerinizde yeterli miktarda para bulunmuyor.");

    if(GetNearestService(playerid, PNS) != -1)
    {
        PlayerInfo[playerid][pAletCantasi] = 1;
        if(PlayerInfo[playerid][pHirsizlikYetenegi] < 20)
        {
            OAC_GivePlayerMoney(playerid, -1200);
            SunucuMesaji(playerid, "$1200 karþýlýðýnda alet çantasý satýn aldýnýz.");
        }
        if(PlayerInfo[playerid][pHirsizlikYetenegi] >= 20)
        {
            OAC_GivePlayerMoney(playerid, -900);
            SunucuMesaji(playerid, "$900 karþýlýðýnda alet çantasý satýn aldýnýz.");
            SunucuMesajicp(playerid, "(Seviye 2 araç hýrsýzý olduðun için 1200 yerine 900 ödedin.)");
        }
    }
    else HataMesajiC(playerid, "Alet çantalarýný sadece Pay'n Spray noktalarýndan satýn alabilirsiniz.");
    return 1;
}

flags:tamirkitial(CMD_USER);
CMD:tamirkitial(playerid)
{
    if(GetNearestService(playerid, PNS) != -1)
    {
        if(PlayerInfo[playerid][pCash] < 600) return HataMesajiC(playerid, "Üzerinizde yeterli miktarda para bulunmuyor.");
        if(PlayerInfo[playerid][pTamirKiti] >= 2) return HataMesajiC(playerid, "Üzerinizde en fazla 2 adet tamir kiti bulundurabilirsiniz.");

        PlayerInfo[playerid][pTamirKiti]++;
        OAC_GivePlayerMoney(playerid, -600);
        SunucuMesaji(playerid, "$600 karþýlýðýnda tamir kiti satýn aldýnýz.");
    }
    else HataMesajiC(playerid, "Tamir kitlerini sadece Pay'n Spray noktalarýndan satýn alabilirsiniz.");
    return 1;
}

flags:tamirkiti(CMD_USER);
CMD:tamirkiti(playerid, params[])
{
    if(!PlayerInfo[playerid][pTamirKiti])
        return HataMesajiC(playerid, "Tamir kitine sahip deðilsiniz. (Pay'n Spray > /tamirkitial)");

    if(GetPVarInt(playerid, "pTamir") > 0) return HataMesajiC(playerid, "Tamir iþlemi sürüyor lütfen bekleyin.");
    if(!IsPlayerInAnyVehicle(playerid)) return HataMesajiC(playerid, "Araçta deðilsin.");
    new vehicleid = GetPlayerVehicleID(playerid);
    if(VehicleInfo[vehicleid][vEngine]) return HataMesajiC(playerid, "Tamir iþlemi için motoru kapatmalýsýnýz.");

    SetPVarInt(playerid, "pTamir", 1);
    DestroyDynamic3DTextLabelEx(PlayerInfo[playerid][pNameTag]);
    PlayerInfo[playerid][pNameTag] = CreateDynamic3DTextLabel("(( Kullanýcý þu anda aracýný tamir ediyor. ))", COLOR_ADMIN, 0, 0, 0.5, 30.0, playerid, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0);

    SetTimerEx("AracTamirEdiyorum", 10000, false, "dd", playerid, vehicleid);

    SunucuMesaji(playerid, "Araç tamir iþlemi baþladý.");
    PlayerInfo[playerid][pTamirKiti]--;
    return 1;
}

AracTamirEdiyorum(playerid, vehicleid); public AracTamirEdiyorum(playerid, vehicleid)
{
    VehicleInfo[vehicleid][vHealth] = 600;
    AC_SetVehicleHealth(vehicleid, VehicleInfo[vehicleid][vHealth]);
    if(PlayerInfo[playerid][pLogged]) SunucuMesaji(playerid, "Araç tamir iþlemi sonlandý.");
    DeletePVar(playerid, "pTamir");
    DestroyDynamic3DTextLabelEx(PlayerInfo[playerid][pNameTag]);
    return 1;
}

CMD:tamir(playerid, params[])
{
    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER && GetNearestService(playerid, PNS) != -1)
    {
        new vehicleid = GetPlayerVehicleID(playerid);

        if(VehicleInfo[vehicleid][vEngine]) return HataMesajiC(playerid, "Tamir iþlemi için motoru kapatmalýsýnýz.");
        if(GetPVarInt(playerid, "pTamir") > 0) return HataMesajiC(playerid, "Tamir iþlemi sürüyor, lütfen bekleyin.");

        if(VehicleInfo[vehicleid][vRespraying])return 1;

        new price;

        if(VehicleInfo[vehicleid][vHurda] == 0)
        {
            new pns = GetNearestService(playerid, PNS);
            price = (BuildingInfo[pns][bPrices][0] + Vehicle_RepairPrice(vehicleid));
            
            if(VehicleInfo[vehicleid][vSigortaSeviyesi] >= 2)
                price = price - ((price*25) / 100);
                
            if(!PlayerInfo[playerid][pFactionDuty] && PlayerInfo[playerid][pCash] < price) return
                HataMesaji(playerid, "Yeterli paranýz yok. ($%d)", price);

    /*        BuildingInfo[pns][bCash] += price;
            if(BuildingInfo[pns][bOwner]) BuildingInfo[pns][bProducts] -= 1;*/

            foreach(new p : Player) if(IsPlayerConnected(p) && GetPlayerVehicleID(p) == vehicleid)
            {
                TogglePlayerControllable(p, false);
                PlayerInfo[p][pFreezed] = 1;
            }
            if(VehicleInfo[vehicleid][vSigortaSeviyesi] >= 2)
                SunucuMesajiC(playerid, "Kaskonuz olduðu için tamir hizmetinden yüzde 25 indirim aldýnýz.");
                
            SunucuMesaji(playerid, "Tamir iþlemi baþladý, 8 saniye sonra bitecek.");
            SetPVarInt(playerid, "pTamir", 1);
            DestroyDynamic3DTextLabelEx(PlayerInfo[playerid][pNameTag]);
            PlayerInfo[playerid][pNameTag] = CreateDynamic3DTextLabel("(( Kullanýcý þu anda aracýný tamir ediyor. ))", COLOR_ADMIN, 0, 0, 0.5, 30.0, playerid, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0);

            SetTimerEx("StopRepair", 8000, false, "ddd", playerid, price, 0);
            return 1;
        }
        else
        {
            price = VehicleInfo[vehicleid][vPrice] * 8 / 100;
            
            if(VehicleInfo[vehicleid][vSigortaSeviyesi] >= 2)
                price = price - ((price*25) / 100);
                
            if(PlayerInfo[playerid][pCash] < price) return
                HataMesaji(playerid, "Yeterli paranýz yok. ($%d)", price);

            foreach(new p : Player) if(IsPlayerConnected(p) && GetPlayerVehicleID(p) == vehicleid)
            {
                TogglePlayerControllable(p, false);
                PlayerInfo[p][pFreezed] = 1;
            }
            
            if(VehicleInfo[vehicleid][vSigortaSeviyesi] >= 2)
                SunucuMesajiC(playerid, "Kaskonuz olduðu için tamir hizmetinden yüzde 25 indirim aldýnýz.");
                
            SunucuMesaji(playerid, "Tamir iþlemi baþladý, 10 saniye sonra bitecek.");
            SetPVarInt(playerid, "pTamir", 1);
            DestroyDynamic3DTextLabelEx(PlayerInfo[playerid][pNameTag]);
            PlayerInfo[playerid][pNameTag] = CreateDynamic3DTextLabel("(( Kullanýcý þu anda aracýný tamir ediyor. ))", COLOR_ADMIN, 0, 0, 0.5, 30.0, playerid, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0);

            SetTimerEx("StopRepair", 10000, false, "ddd", playerid, price, 1);
            return 1;
        }
    }
    return 1;
}

CMD:objectdelete(playerid, params[])
{
    new id;
    if(sscanf(params, "d", id))return
        KullanimMesajiC(playerid, "/objectdelete [obje id]");
        
    if(id < 1 || !IsValidDynamicObject(id))return
        SunucuMesaji(playerid, "Geçersiz obje.");
        
    DestroyDynamicObjectEx(id);
    SendAdminAlert(false, COLOR_ADMIN, "AdmCmd: %s %d ID'li objeyi sildi.", ReturnRoleplayName(playerid), id);
    LogYaz(playerid, "/objectdelete", -1, id);
    return 1;
}

CMD:amapyukle(playerid, params[])
{
    if(strlen(params) == 0 || strlen(params) >= 100) return HataMesajiC(playerid, "Map isimleri 1-100 karakter arasýndadýr.");
    if(isnull(params)) return SendClientMessage(playerid, -1, "{ff9900}KULLANIM: {FFFFFF}/amapyukle [mapismi]");
    new DB_Query[200];
    mysql_format(ourConnection, DB_Query, sizeof(DB_Query), "SELECT * FROM `mapler` WHERE `mapIsmi` = '%e'", params);
    mysql_tquery(ourConnection, DB_Query);
    new rows;
    cache_get_row_count(rows);
    if(!rows)
    {
        new string[128];
        format(string, sizeof(string), "loadfs %s", params);
        SendRconCommand(string);
        mysql_format(ourConnection, DB_Query, sizeof(DB_Query), "INSERT INTO `mapler` (`mapIsmi`) VALUES ('%e')", params);
        mysql_tquery(ourConnection, DB_Query);
        BasariMesaji(playerid, "%s adlý map baþarýyla yüklendi.", params);
    }
    else HataMesajiC(playerid, "Map zaten yüklü.");
    return 1;
}

CMD:amapsil(playerid, params[])
{
    if(strlen(params) == 0 || strlen(params) >= 100) return HataMesajiC(playerid, "Map isimleri 1-100 karakter arasýndadýr.");
    if(isnull(params)) return SendClientMessage(playerid, -1, "{ff9900}KULLANIM: {FFFFFF}/amapsil [mapismi]");

    new DB_Query[200];
    mysql_format(ourConnection, DB_Query, sizeof(DB_Query), "SELECT * FROM `mapler` WHERE `mapIsmi` = '%e' LIMIT 1", params);
    mysql_tquery(ourConnection, DB_Query, "MapSorgu", "is", playerid, params);
    return 1;
}

CMD:nitroizin(playerid, params[]) {
    new factionid;
    if(sscanf(params, "d", factionid)) return KullanimMesajiC(playerid, "/nitroizin [oluþum ID]");
    if(factionid < 0 || factionid >= MAX_FACTIONS) return HataMesaji(playerid, "Oluþum ID'leri 0 ile %d arasýndadýr.", MAX_FACTIONS);
    if(!FactionInfo[factionid][fExists]) return HataMesajiC(playerid, "Geçersiz oluþum ID'si girdiniz.");
    if(FactionInfo[factionid][fNitroVerebilir]) {
        SunucuMesaji(playerid, "%s oluþumunun nitro iznini aldýnýz.", FactionInfo[factionid][fName]);
        SendAdminAlert(false, COLOR_ADMIN, "AdmCmd: %s, %d ID'li oluþumun nitro iznini aldý.", ReturnRoleplayName(playerid), factionid);
    } else {
        SunucuMesaji(playerid, "%s oluþumuna nitro izni verdiniz.", FactionInfo[factionid][fName]);
        SendAdminAlert(false, COLOR_ADMIN, "AdmCmd: %s, %d ID'li oluþuma nitro izni verdi.", ReturnRoleplayName(playerid), factionid);
    }
    FactionInfo[factionid][fNitroVerebilir] = !FactionInfo[factionid][fNitroVerebilir];
    return 1;
}

CMD:yarisduzenle(playerid) {
    new strDialog[180];
    for(new i; i < MAX_YARIS; i++) {
        if(i < MAX_YARIS - 1) {
            if(YarisInfo[i][yarisBaslatildi]) {
                format(strDialog, sizeof strDialog, "%s{FFFFFF}%s\t{1bae2d}AKTÝF\n", strDialog, YarisInfo[i][yarisIsmi]);
            } else {
                format(strDialog, sizeof strDialog, "%s{FFFFFF}%s\t{ff0000}KAPALI\n", strDialog, YarisInfo[i][yarisIsmi]);
            }
        } else {
            if(YarisInfo[i][yarisBaslatildi]) {
                format(strDialog, sizeof strDialog, "%s{FFFFFF}%s\t{1bae2d}AKTÝF", strDialog, YarisInfo[i][yarisIsmi]);
            } else {
                format(strDialog, sizeof strDialog, "%s{FFFFFF}%s\t{ff0000}KAPALI", strDialog, YarisInfo[i][yarisIsmi]);
            }
        }
    }
    Dialog_Show(playerid, DialogAdminYarisDuzenle, DIALOG_STYLE_TABLIST_HEADERS, "Yarýþ Sistemi", "{a3aba4}Yarýþ Ýsmi\t{a3aba4}Yarýþ Durumu\n%s", "Seç", "Ýptal", strDialog);
    return 1;
}

CMD:bahisbaslat(playerid) {
    if(bahisAktif) {
        SunucuMesajiC(playerid, "Bahis bilet alýmýný kapattýnýz, oyunun 1 dakika içerisinde baþlayacak.");
        foreach(new pl: Player) {
            if(!PlayerInfo[pl][pLogged])continue;
            if(GetPlayerBuilding(playerid, true) <= 0 || BuildingInfo[GetPlayerBuilding(playerid, true)][bType] != GANYAN)continue;
            SendClientMessage(pl, COLOR_FADE3, "Görevli: Yarýþ için bilet alýmlarý kapatýldý, yarýþ 1 dakika içerisinde baþlayacak, yerlerinizi alýn!");
        }
        bahisAktif = 0;
        bahisHazirlikAktif = 1;
        bahisTimer = 60;
        for(new i; i < MAX_YARIS_ATI; i++) {
            atlarinDurumu[i] = 0;
        }
        return 1;
    } else {
        SunucuMesajiC(playerid, "Bahis bilet alýmýný aktifleþtirdiniz, istediðiniz zaman /bahisbaslat yazarak bilet alýmlarýný kapatabilirsiniz.");
        SunucuMesajiC(playerid, "Bilet alýmlarýný kapattýktan 1 dakika sonra oyun otomatik olarak baþlayacaktýr.");
        bahisAktif = 1;
        bahisOyunAktif = 0;
        bahisHazirlikAktif = 0;
        bahisTimer = 0;
        foreach(new pl: Player) {
            if(!PlayerInfo[pl][pLogged])continue;
            if(GetPlayerBuilding(playerid, true) <= 0 || BuildingInfo[GetPlayerBuilding(playerid, true)][bType] != GANYAN)continue;
            SendClientMessage(pl, COLOR_FADE3, "Görevli: Yarýþ için bilet alýmlarý açýldý, hemen biletinizi alýn!");
        }
        SendClientMessageToAll(COLOR_WHITE, "{cc7b13}[AT YARIÞI]: {FFFFFF}At yarýþý aktif edildi, hemen bir ganyandan biletinizi alýn.");
        return 1;
    }
}

CMD:atisimleri(playerid) {
    new strDialog[180];
    for(new i; i < MAX_YARIS_ATI; i++) {
        if(i != MAX_YARIS_ATI-1) {
            format(strDialog, sizeof strDialog,"%s%s\n", strDialog, atIsimleri[i]);
        } else {
            format(strDialog, sizeof strDialog,"%s%s", strDialog, atIsimleri[i]);
        }
    }
    Dialog_Show(playerid, DialogAtIsimleri, DIALOG_STYLE_LIST, "Yarýþ Atlarý", strDialog, "Seç", "Ýptal");
    SunucuMesajiC(playerid, "Ýsmini deðiþtirmek istediðiniz atý seçin.");
    return 1;
}

Dialog:DialogAtIsimleri(playerid, response, listitem, inputtext[]) {
    if(response) {
        SetPVarInt(playerid, "SecilenAt", listitem);
        Dialog_Show(playerid, DialogAtIsmi, DIALOG_STYLE_INPUT, "Yarýþ Atlarý", "%s isimli atýn yeni ismini girin(maksimum 32 karakter)", "Tamam", "<< Geri", atIsimleri[listitem]);
    }
    return 1;
}

Dialog:DialogAtIsmi(playerid, response, listitem, inputtext[]) {
    if(!response) {
        DeletePVar(playerid, "SecilenAt");
        new strDialog[180];
        for(new i; i < MAX_YARIS_ATI; i++) {
            if(i != MAX_YARIS_ATI-1) {
                format(strDialog, sizeof strDialog,"%s%s\n", strDialog, atIsimleri[i]);
            } else {
                format(strDialog, sizeof strDialog,"%s%s", strDialog, atIsimleri[i]);
            }
        }
        Dialog_Show(playerid, DialogAtIsimleri, DIALOG_STYLE_LIST, "Yarýþ Atlarý", strDialog, "Seç", "Ýptal");
        return 1;
    }
    if(!strlen(inputtext)) return Dialog_Show(playerid, DialogAtIsmi, DIALOG_STYLE_INPUT, "Yarýþ Atlarý", "Kutu boþ býrakýlamaz.\nAtýn yeni ismini girin(maksimum 32 karakter)", "Tamam", "<< Geri");
    if(strlen(inputtext) > 32) return Dialog_Show(playerid, DialogAtIsmi, DIALOG_STYLE_INPUT, "Yarýþ Atlarý", "32 karakterden fazla olamaz.\nAtýn yeni ismini girin(maksimum 32 karakter)", "Tamam", "<< Geri");
    new at = GetPVarInt(playerid, "SecilenAt");
    DeletePVar(playerid, "SecilenAt");
    format(atIsimleri[at], 32, "%s", inputtext);
    return 1;
}

CMD:servis(playerid, params[]) {
    new price, vehicleid = GetPlayerVehicleID(playerid), repairType, id, factionid = PlayerInfo[playerid][pFaction];
    if(!FactionInfo[factionid][fNitroVerebilir]) return HataMesajiC(playerid, "Bulunduðunuz oluþum bu komutu desteklemiyor.");
    if(PlayerInfo[playerid][pRank] > 3) return HataMesajiC(playerid, "Rütbeniz bu komutu kullanmaya yetmiyor.");
    if(InTowTruck(playerid) <= 0)return
        HataMesajiC(playerid, "Tow Truck'ýn içerisinde deðilsin.");
    if(sscanf(params, "udd", id, repairType, price)) {
        KullanimMesajiC(playerid, "/servis [id/isim] [nos tipi] [fiyat]");
        KullanimMesajiC(playerid, "Nos Tipleri:");
        KullanimMesajiC(playerid, "1 - 70 parça karþýlýðýnda 2x NOS yükler.");
        KullanimMesajiC(playerid, "2 - 175 parça karþýlýðýnda 5x NOS yükler.");
        KullanimMesajiC(playerid, "3 - 350 parça karþýlýðýnda 10x NOS yükler.");
        KullanimMesajiC(playerid, "$500 karþýlýðýnda 10x NOS yüklemek için örnek kullanim; /servis [id] 3 500");
    }
       
    if(repairType < 1 || repairType > 3)return HataMesajiC(playerid, "Nos tipleri 1 ile 3 arasýndadýr.");

    new parcasayi;
    switch(repairType)
    {
        case 1: parcasayi = 70;
        case 2: parcasayi = 175;
        case 3: parcasayi = 350;
    }
    new mevcutparca = VehicleInfo[vehicleid][vComponents];
    if(mevcutparca < parcasayi)
        return HataMesaji(playerid, "Araca NOS yüklemek için yeterli parçanýz yok. (%d)", parcasayi);

    if(!IsPlayerConnected(id) || id == playerid)return
        HataMesajiC(playerid, "Geçersiz ID.");

    if(!ProxDetectorS(20.0, playerid, id) || GetPlayerState(id) != PLAYER_STATE_DRIVER)return
        HataMesajiC(playerid, "Oyuncu sizden uzakta veya bir araçta deðil.");

    if(Vehicle_IsOwner(id, GetPlayerVehicleID(id), false) == 0)
        return HataMesajiC(playerid, "Ýstek göndermek istediðiniz oyuncu araç veya anahtar sahibi deðil.");

    if(price < 1 || price > 5000)return
        HataMesajiC(playerid, "Geçersiz tutar. ($1 - $5000)");

    if(PlayerInfo[id][pCash] < price)return
        HataMesaji(playerid, "Bu oyuncunun yeterli parasý yok. ($%d)", price);

    PlayerInfo[id][pRequestRepair] = playerid;
    PlayerInfo[id][pRepairType] = repairType;
    PlayerInfo[id][pRepairPrice] = price;
    SetPVarInt(playerid, "NOSIstek", 1);
    new yazi[4];
    switch(repairType)
    {
        case 1: format(yazi, sizeof(yazi), "2x");
        case 2: format(yazi, sizeof(yazi), "5x");
        case 3: format(yazi, sizeof(yazi), "10x");
    }
    SunucuMesaji(id, "%s adlý tamirci $%d karþýlýðýnda aracýnýza %s NOS yüklemek için izin istiyor. (/kabulet servis)", ReturnRoleplayName(playerid), price, yazi);
    SunucuMesaji(playerid, "Servis isteðiniz %s kiþisine $%d olarak gönderildi.", ReturnRoleplayName(id), price);

    return 1;
}

CMD:fdelete(playerid, params[])
{
    if(strlen(params) == 0) return KullanimMesajiC(playerid, "/fdelete <faction ID>");
    if(!IsNumeric(params)) return HataMesajiC(playerid, "Sayýsal bir deðer girin.");
    new fid = strval(params);
    if(fid < 0 || fid >= MAX_FACTIONS || !FactionInfo[fid][fExists])return
        SunucuMesaji(playerid, "Oluþum bulunamadý.");

    mysql_format(ourConnection, queryx, sizeof(queryx), "UPDATE characters SET faction_id = '-1', faction_rank_id = '0' WHERE faction_id = '%d'", FactionInfo[fid][fID]);
    mysql_tquery(ourConnection, queryx);
    mysql_format(ourConnection, queryx, sizeof(queryx), "DELETE FROM factions WHERE id = '%d'", FactionInfo[fid][fID]);
    mysql_tquery(ourConnection, queryx);
    foreach(new i : Player)
    {
        if(!PlayerInfo[i][pLogged])continue;

        if(PlayerInfo[i][pFaction] == fid)
        {
            PlayerInfo[i][pFaction] = -1;
            PlayerInfo[i][pRank] = -1;
        }
    }

    for(new x; x < MAX_FACTION_RANKS; x++)
    {
        FactionInfo[fid][fSkins][x] = 0;
        format(fRanks[fid][x], 80, "boþ");
        FactionInfo[fid][fSalary][x] = 0;
    }
    FactionInfo[fid][fID] = -1;
    FactionInfo[fid][fGraffiti] = 0;
    FactionInfo[fid][fOOC] = 1;
    FactionInfo[fid][fCash] = 0;
    FactionInfo[fid][fMembersCount] = 0;
    FactionInfo[fid][fSkinsCount] = 0;
    FactionInfo[fid][fMaleSkin] = 0;
    FactionInfo[fid][fFemaleSkin] = 0;
    FactionInfo[fid][fType] = 0;
    FactionInfo[fid][fID] = 0;
    format(FactionInfo[fid][fName], 32, "Boþ");
    format(FactionInfo[fid][fShortName], 17, "N/A");
    FactionInfo[fid][fExists] = 0;
    SendAdminAlert(false, COLOR_ADMIN, "AdmCmd: %s, %d ID'li oluþumu sildi.", ReturnRoleplayName(playerid), fid);

    LogYaz(playerid, "/fdelete", -1, fid);
    new vid;
    foreach(new j: Vehicles) {
        // new query[90];
        if(VehicleInfo[j][vFaction] == fid) {
            vid = j;
            VehicleInfo[vid][vUnregistered] = 0;
            VehicleInfo[vid][vSpawnPosX] = 0.0;
            VehicleInfo[vid][vSpawnPosY] = 0.0;
            VehicleInfo[vid][vSpawnPosZ] = 0.0;
            VehicleInfo[vid][vSpawnPosA] = 0.0;
            VehicleInfo[vid][vFaction] = INVALID_VEHICLE_ID;
            VehicleInfo[vid][vJob] = -1;
            VehicleInfo[vid][vFirstColor] = 0;
            VehicleInfo[vid][vSecondColor] = 0;
            VehicleInfo[vid][vOwner] = -1;
            VehicleInfo[vid][vLocked] = 0;
            VehicleInfo[vid][vEngine] = 0;
            VehicleInfo[vid][vLights] = 0;
            VehicleInfo[vid][vBonnet] = 0;
            VehicleInfo[vid][vBoot] = 0;
            VehicleInfo[vid][vCallSign] = false;
            if(VehicleInfo[vid][vELM] == true)
                KillTimer(ELMTimer[vid]);
            VehicleInfo[vid][vELM] = false;
            DestroyDynamic3DTextLabelEx(VehicleInfo[vid][vSignText]);
            if(VehicleInfo[vid][vSirenOn] == true)
            {
                DestroyDynamicObjectEx(VehicleInfo[vid][vSirenObject]);
                VehicleInfo[vid][vSirenOn] = false;
            }

            if(!VehicleInfo[vid][vTemporary])
            {
                mysql_format(ourConnection, queryx, sizeof(queryx), "DELETE FROM vehicles WHERE id = '%d'", VehicleInfo[vid][vID]);
                mysql_tquery(ourConnection, queryx);
            }
            for(new i; i < MAX_TRUNK_ITEMS; i++) {
                VehicleInfo[vid][vInvList][i] = 0;
                VehicleInfo[vid][vInvExtra][i] = 0;
                VehicleInfo[vid][vInvAmount][i] = 0;
            }

            for(new i; i < MAX_TUNING_COMPONENTS; i++) {
                VehicleInfo[vid][vTuning][i] = 0;
            }
            VehicleInfo[vid][vTemporary] = 0;
            VehicleInfo[vid][vModel] = 0;
            VehicleInfo[vid][vHealth] = 0.0;
            VehicleInfo[vid][vMaxHealth] = 0.0;
            VehicleInfo[vid][vBatteryHealth] = 0.0;
            VehicleInfo[vid][vEngineHealth] = 0.0;
            VehicleInfo[vid][vDoorHealth] = 0.0;
            VehicleInfo[vid][vFuel] = 0;
            VehicleInfo[vid][vPrice] = 0;
            Vehicle_ClearCargo(vid);
            VehicleInfo[vid][vSigortaSeviyesi] = 0;
            VehicleInfo[vid][vComponents] = 0;
            VehicleInfo[vid][vAutovelox] = 0;
            for(new i; i < 4; i++)
                VehicleInfo[vid][vWindows][i] = 0;
            VehicleInfo[vid][vInterior] = 0;
            VehicleInfo[vid][vWorld] = 0;
            if(VehicleInfo[vid][vStereo]) {
                VehicleInfo[vid][vStereo] = false;
                foreach(new i: Player) {
                    if(PlayerInfo[i][pLogged]) {
                        if(GetPlayerVehicleID(i) == vid)
                            StopAudioStreamForPlayer(i);
                    }
                }
            }
            VehicleInfo[vid][vImpounded] = 0;
            VehicleInfo[vid][vAlarm] = 0;
            VehicleInfo[vid][vDoorLevel] = 0;
            VehicleInfo[vid][vAlarmOn] = 0;
            VehicleInfo[vid][vPaintjob] = 3;
            for(new i; i < 3; i++) {
                VehicleInfo[vid][vCeset][i] = 0;
                VehicleInfo[vid][vSkin][i] = 0;
                //VehicleInfo[vid][vRehine][i] = -1;
            }
            VehicleInfo[vid][vKM] = 0.0;
            VehicleInfo[vid][vKMGosteren] = 0;
            format(VehicleInfo[vid][vIsim1], MAX_PLAYER_NAME, "");
            format(VehicleInfo[vid][vIsim2], MAX_PLAYER_NAME, "");
            format(VehicleInfo[vid][vIsim3], MAX_PLAYER_NAME, "");
            //format(VehicleInfo[vid][vRehineIsim1], MAX_PLAYER_NAME, "");
            //format(VehicleInfo[vid][vRehineIsim2], MAX_PLAYER_NAME, "");
            //format(VehicleInfo[vid][vRehineIsim3], MAX_PLAYER_NAME, "");
            VehicleInfo[vid][vShowingCargo] = false;
            VehicleInfo[vid][vRespraying] = 0;
            for(new p; p < MAX_CAR_WEAPONS; p++)
                VehicleInfo[vid][vSlotUsed][p] = 0;
            VehicleInfo[vid][vSpawnExpires] = 0;

            VehicleInfo[vid][vVergi] = 0;
            DestroyVehicle(vid);
            Iter_Remove(Vehicles, vid);
        }
    }
    return 1;
}

forward MapSorgu(playerid, params[]);
public MapSorgu(playerid, params[])
{
    static rows;
    cache_get_row_count(rows);
    if(!rows)
    {
        SunucuMesaji(playerid, "Belirttiðiniz isimde map bulunmamaktadýr.");
    }
    else
    {
        new string[128], DB_Query[200];
        format(string, sizeof(string), "unloadfs %s", params);
        SendRconCommand(string);
        mysql_format(ourConnection, DB_Query, sizeof(DB_Query), "DELETE FROM `mapler` WHERE `mapIsmi` = '%e'", params);
        mysql_tquery(ourConnection, DB_Query);
        BasariMesaji(playerid, "%s adlý map baþarýyla kaldýrýldý.", params);
    }
}

CMD:copkutusuekle(playerid)
{
    if(PlayerInfo[playerid][pAdmin] < 10)
        return HataMesaji(playerid, "Bu komutu kullanamazsýnýz.");
        
    CopKutusuMenuGoster(playerid);
    return 1;
}

CMD:copkutususil(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 10)
        return HataMesaji(playerid, "Bu komutu kullanamazsýnýz.");

    new id;
    if(sscanf(params, "d", id)) return HataMesajiC(playerid, "/copkutususil <id>");
    if(!CopKutusuInfo[id][copExists]) return HataMesajiC(playerid, "Belirttiðiniz çöp kutusu yok.");
    CopKutusuSil(id);
    return 1;
}

CMD:copkutularinisil(playerid)
{
    if(PlayerInfo[playerid][pAdmin] < 10)
        return HataMesaji(playerid, "Bu komutu kullanamazsýnýz.");
        
    new count = TumCopKutulariniSil();
    if(!count) return HataMesajiC(playerid, "Sunucuda hiç çöp kutusu yok.");
    SunucuMesaji(playerid, "Tüm çöp kutularýný sildiniz.");
    return 1;
}

CMD:copkutusuid(playerid)
{
    if(PlayerInfo[playerid][pAdmin] < 10)
        return HataMesaji(playerid, "Bu komutu kullanamazsýnýz.");
        
    new id = YakindakiCopKutusunuBul(playerid);
    if(id == -1) return HataMesajiC(playerid, "Yakýnýnýzda bir çöp kutusu yok.");
    SunucuMesaji(playerid, "Çöp kutusunun ID'si: %d", id);
    return 1;
}

CMD:copkutususayi(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 10)
        return HataMesaji(playerid, "Bu komutu kullanamazsýnýz.");
        
    new cop, sayi;
    if(sscanf(params, "dd", cop, sayi)) return KullanimMesajiC(playerid, "/copkutususayi <çöp kutusu ID> <çöp sayýsý>");
    if(cop >= 0 && cop < MAX_COPKUTUSU) {
        if(CopKutusuInfo[cop][copExists]) {
            if(sayi >= 0 && sayi < MAX_COP) {
                CopKutusuInfo[cop][copSayisi] = sayi;
                CopKutusuLabelDuzenle(cop);
                BasariMesaji(playerid, "%d ID'li çöp kutusunun çöp sayýsýný %d yaptýnýz.", cop, sayi);
            } else return HataMesajiC(playerid, "Çöp sayýsý 0 ile 96 arasýnda olabilir. 0 dahil, 96 dahil deðil.");
        } else return HataMesajiC(playerid, "Çöp kutusu bulunamadý.");
    } else return HataMesajiC(playerid, "Çöp kutusu sayýsý 0 ile 50 arasýnda olabilir. 0 dahil, 50 dahil deðil.");
    return 1;
}

CMD:copkutusuduzenle(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 10)
        return HataMesaji(playerid, "Bu komutu kullanamazsýnýz.");
        
    new cop;
    if(sscanf(params, "d", cop)) return KullanimMesajiC(playerid, "/copkutusuduzenle <çöp kutusu ID>");
    if(cop >= 0 && cop < MAX_COPKUTUSU) {
        if(CopKutusuInfo[cop][copExists]) {
            if(IsPlayerInRangeOfPoint(playerid, 5.0, CopKutusuInfo[cop][copPosX], CopKutusuInfo[cop][copPosY], CopKutusuInfo[cop][copPosZ])) {
                EditDynamicObject(playerid, CopKutusuInfo[cop][copObje]);
                SetPVarInt(playerid, "CopDuzenliyor", 1);
                SetPVarInt(playerid, "DuzenledigiCop", cop);
                BasariMesaji(playerid, "%d ID'li çöp kutusunu düzenliyorsunuz.", cop);
                SunucuMesaji(playerid, "Ýptal etmek için ESC tuþuna basabilir, kaydetmek için ise disk ikonuna basabilirsiniz.");
            } else return HataMesajiC(playerid, "Çöp kutusuna yakýn deðilsin.");
        } else return HataMesajiC(playerid, "Çöp kutusu bulunamadý.");
    } else return HataMesajiC(playerid, "Çöp kutusu sayýsý 0 ile 50 arasýnda olabilir. 0 dahil, 50 dahil deðil.");
    return 1;
}

CMD:copkutusugit(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 10)
        return HataMesaji(playerid, "Bu komutu kullanamazsýnýz.");
        
    new cop;
    if(sscanf(params, "d", cop)) return KullanimMesajiC(playerid, "/copkutusugit <çöp kutusu ID>");
    if(cop >= 0 && cop < MAX_COPKUTUSU) {
        if(CopKutusuInfo[cop][copExists]) {
            SetPlayerPos(playerid, CopKutusuInfo[cop][copPosX], CopKutusuInfo[cop][copPosY], CopKutusuInfo[cop][copPosZ]);
            SetPlayerInterior(playerid, 0);
            SetPlayerVirtualWorld(playerid, 0);
            BasariMesaji(playerid, "%d ID'li çöp kutusuna ýþýnlandýnýz.", cop);
        } else return HataMesajiC(playerid, "Çöp kutusu bulunamadý.");
    } else return HataMesajiC(playerid, "Çöp kutusu sayýsý 0 ile 50 arasýnda olabilir. 0 dahil, 50 dahil deðil.");
    return 1;
}


CMD:gdelete(playerid, params[])
{
    if(PlayerInfo[playerid][pEditingMode])return
        SunucuMesaji(playerid, "Düzenleme yaparken bunu yapamazsýn.");

    // new query[90];

    foreach(new j : Graffitis) if(IsPlayerInRangeOfPoint(playerid, 3.0, GraffitoInfo[j][gX], GraffitoInfo[j][gY], GraffitoInfo[j][gZ]) && GraffitoInfo[j][gExists])
    {
        DestroyDynamicObjectEx(GraffitoInfo[j][gObject]);
        GraffitoInfo[j][gExists] = 0;

        SendAworkAlert(false, COLOR_ADMIN, "AdmCmd: %s %d ID'li graffitiyi yok etti.", ReturnRoleplayName(playerid), j);

        mysql_format(ourConnection, queryx, sizeof(queryx), "DELETE FROM graffitis WHERE id = '%d'", GraffitoInfo[j][gID]);
        mysql_tquery(ourConnection, queryx);

        Iter_Remove(Graffitis, j); break;
    }

    return 1;
}
CMD:gedit(playerid, params[])
{
    if(PlayerInfo[playerid][pEditingMode])return
        SunucuMesaji(playerid, "Düzenleme yaparken bunu yapamazsýn.");

    // new query[256];

    foreach(new j : Graffitis) if(IsPlayerInRangeOfPoint(playerid, 3.0, GraffitoInfo[j][gX], GraffitoInfo[j][gY], GraffitoInfo[j][gZ]) && GraffitoInfo[j][gExists])
    {
        if(isnull(params) || strlen(params) > 20)return
            KullanimMesajiC(playerid, "/gedit [pozisyon - sifirla]");

        if(!strcmp(params, "pozisyon", true))
        {
            PlayerInfo[playerid][pEditingMode] = 8;
            PlayerInfo[playerid][pSelectedItem] = j;
            EditDynamicObject(playerid, GraffitoInfo[j][gObject]);
            SunucuMesaji(playerid, "Ýptal etmek için ESC veya boþluk tuþuna basýn, kaydetmek için diskete týklayýn.");
        }
        else if(!strcmp(params, "sifirla", true))
        {
            SetDynamicObjectMaterialText(GraffitoInfo[j][gObject], 0, "Grafiti", OBJECT_MATERIAL_SIZE_256x256, "Arial", 24, 0, 0xFFFFFFFF, 0, 1);

            mysql_format(ourConnection, queryx, sizeof(queryx), "UPDATE graffitis SET font = 'Arial', text = 'Graffito', size = '24', r_z = '0' WHERE id = '%d'", GraffitoInfo[j][gID]);
            mysql_tquery(ourConnection, queryx);
        }
        else return
            HataMesajiC(playerid, "Geçersiz parametre.");

        SendAworkAlert(false, COLOR_ADMIN, "AdmCmd: %s %d ID'li graffitiyi düzenledi. Seçim: \"%s\"", ReturnRoleplayName(playerid), j, params);

        break;
    }

    return 1;
}
CMD:gcreate(playerid, params[])
{
    if(PlayerInfo[playerid][pEditingMode])return
        SunucuMesaji(playerid, "Düzenleme yaparken bunu yapamazsýn.");

    if(Iter_Free(Graffitis) >= MAX_GRAFFITIS)return
        SunucuMesaji(playerid, "Grafiti limiti aþýldý.");

    new id = Iter_Free(Graffitis),
        Float:x,
        Float:y,
        Float:z;

    GetPlayerPos(playerid, x, y, z);

    GraffitoInfo[id][gSize] = 24;
    GraffitoInfo[id][gObject] = CreateDynamicObject(19482, x, y+2.0, z, 0, 0, 0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
    format(GraffitoInfo[id][gText], 128, "Grafiti");
    format(GraffitoInfo[id][gFont], 30, "Arial");

    PlayerInfo[playerid][pEditingMode] = 7;
    PlayerInfo[playerid][pSelectedItem] = id;

    SetDynamicObjectMaterialText(GraffitoInfo[id][gObject], 0, "Grafiti", OBJECT_MATERIAL_SIZE_256x256, "Arial", 24, 0, 0xFFFFFFFF, 0, 1);

    EditDynamicObject(playerid, GraffitoInfo[id][gObject]);

    SunucuMesaji(playerid, "Ýptal etmek için ESC veya boþluk tuþuna basýn, kaydetmek için diskete týklayýn.");

    Iter_Add(Graffitis, id);

    return 1;
}

CMD:senaryokaldir(playerid, params[])
{
    new id,
        slot;

    if(sscanf(params, "ud", id, slot))return
        KullanimMesajiC(playerid, "/senaryokaldir [id] [(1 - 3)]");

    if(!IsPlayerConnected(id) || !PlayerInfo[id][pLogged])return
        HataMesajiC(playerid, "Geçersiz ID.");

    if(slot < 1 || slot > 3)return
        SunucuMesaji(playerid, "Geçersiz deðer girdin. (1 - 3)");

    slot--;

    if(!DPInfo[id][slot][dpExists])return
        SunucuMesaji(playerid, "Bu ID'de DP yok.");

    DeleteDP(id, slot);

    SendAworkAlert(false, COLOR_ADMIN, "AdmCmd: %s %s adlý kullanýcýnýn %d senaryosunu sildi.", ReturnRoleplayName(playerid), ReturnRoleplayName(id), slot);
    return 1;
}
CMD:senaryolarisil(playerid, params[])
{
    foreach(new i : Player)
    {
        if(!IsPlayerConnected(i) || !PlayerInfo[i][pLogged])continue;

        for(new slot; slot < 3; slot++) if(DPInfo[i][slot][dpExists]) DeleteDP(i, slot);
    }

    SendAworkAlert(false, COLOR_ADMIN, "AdmCmd: %s tüm senaryolarý kaldýrdý.", ReturnRoleplayName(playerid));
    return 1;
}
CMD:senaryoekle(playerid, params[])
{
    if(SunucuBilgi[AntiDinamikObje])
        return HataMesaji(playerid, "Bu sistem geçici olarak geliþtirici ekip tarafýndan pasife çekildi.");
        
    new text[256],
        slot,
        Float:x,
        Float:y,
        Float:z;

    GetPlayerPos(playerid, x, y, z);

    if(IsPlayerInAnyVehicle(playerid))return
        SunucuMesaji(playerid, "Araç içerisinde bu komutu kullanamazsýn.");

    if(!sscanf(params, "ds[128]", slot, text))
    {
        if(slot < 1 || slot > MAX_DPS)return
            SunucuMesajiC(playerid, "Ekleyebileceðin bir senaryo slotu kullanmýyorsun.");

        slot--;

        if(DPInfo[playerid][slot][dpExists])return
            SunucuMesaji(playerid, "Bu ID'ye sahip bir DP bulunuyor.");

        DPInfo[playerid][slot][dpExists] = 1;
        DPInfo[playerid][slot][dpX] = x;
        DPInfo[playerid][slot][dpY] = y;
        DPInfo[playerid][slot][dpZ] = z;

        ReplaceText(text, "#kirmizi", "{FF0000}");
        ReplaceText(text, "#mavi", "{0000FF}");
        ReplaceText(text, "#sari", "{FFFF00}");
        ReplaceText(text, "#yesil", "{00FF00}");
        ReplaceText(text, "#mor", "{FF80FF}");
        ReplaceText(text, "#acikmavi", "{00FFFF}");
        ReplaceText(text, "#beyaz", "{FFFFFF}");
        ReplaceText(text, "#turuncu", "{FF8000}");
        ReplaceText(text, "#siyah", "{000000}");
        ReplaceText(text, "#c", "\n");

        format(text, sizeof(text), "%s\n{C0C0C0}((#%d - %d))", text, PlayerInfo[playerid][pID], slot+1);

        DPInfo[playerid][slot][dpText] = CreateDynamic3DTextLabel(text, 0xD0AEEBFF, DPInfo[playerid][slot][dpX], DPInfo[playerid][slot][dpY], DPInfo[playerid][slot][dpZ], 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid), -1);
        DPInfo[playerid][slot][dpTimer] = SetTimerEx("DeleteDP", 6000000, false, "dd", playerid, slot);

        SunucuMesaji(playerid, "%d ID'li senaryoyu ekledin. /senaryoekle %d yazarak kaldýrabilirsin.", slot+1, slot+1);
    }
    else if(!sscanf(params, "d", slot))
    {
        if(slot < 1 || slot > MAX_DPS)return
            SunucuMesajiC(playerid, "Envanterde boþ yer yok.");

        slot--;

        if(!DPInfo[playerid][slot][dpExists])return
            SunucuMesaji(playerid, "Bu ID'de DP yok.");

        SunucuMesaji(playerid, "%d yazýsýný sildin.", slot+1);

        DeleteDP(playerid, slot);
    }
    else return
        KullanimMesajiC(playerid, "/senaryoekle [1 - 3] [yazý]");

    return 1;
}

CMD:bbsahip(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 2)
        return HataMesajiC(playerid, "Bu komutu kullanmak için yetkiniz yok.");

    new itemid = Item_Nearest(playerid);
    if(itemid == -1) return HataMesajiC(playerid, "Yakýnýnýzda eþya bulunmuyor");

    new listid = IDroppedInfo[itemid][idList];

    if(InventoryObjects[listid][invObject] == BOOMBOX_OBJECT)
    {
        new pid = IsPlayerOnlineID(IDroppedInfo[itemid][idPlayer]);
        if(pid == -1) SunucuMesaji(playerid, "Bu boomboxun sahibi çýkýþ yapmýþ.");
        else SunucuMesaji(playerid, "Boombox sahibi: %s", ReturnRoleplayName(pid));
    }
    return 1;
}

CMD:aboombox(playerid, params[])
{
    if(PlayerInfo[playerid][pEditingMode])return
        SunucuMesaji(playerid, "Düzenleme yaparken bunu yapamazsýn.");

    if(PlayerInfo[playerid][pKonserIzin] == -1)return
        SendFormattedMessage(playerid, COLOR_GREY, "Konser mikrofonun bulunmadýðý için bunu yapamazsýn.");


    new boomboxid = Item_Nearest(playerid); if(boomboxid == -1)return 1;
    new listid = IDroppedInfo[boomboxid][idList];

    if(InventoryObjects[listid][invObject] != BOOMBOX_OBJECT)return
        SunucuMesaji(playerid, "Yerde olan bir boomboxa yakýn deðilsin.");

    PlayerInfo[playerid][pSelectedItem] = boomboxid;

    IDroppedInfo[boomboxid][Trisha] = true;

    if(isnull(params) || strlen(params) > 6)return
        ShowRadioLinks(playerid, 0);

    if(!strcmp(params, "kapat", true))
    {
        Item_StopMusic(boomboxid);
        PlayerAME(playerid, "hopörlörleri kapatýr.");
    }
    return 1;
}

CMD:boombox(playerid, params[])
{
    if(PlayerInfo[playerid][pEditingMode])return
        SunucuMesaji(playerid, "Düzenleme yaparken bunu yapamazsýn.");

    new boomboxid = Item_Nearest(playerid); if(boomboxid == -1)return 1;
    new listid = IDroppedInfo[boomboxid][idList];

    if(InventoryObjects[listid][invObject] != BOOMBOX_OBJECT)return
        SunucuMesaji(playerid, "Yerde olan bir boomboxa yakýn deðilsin.");

    PlayerInfo[playerid][pSelectedItem] = boomboxid;

    IDroppedInfo[boomboxid][Trisha] = false;

    if(isnull(params) || strlen(params) > 6)return
        ShowRadioLinks(playerid, 0);

    if(!strcmp(params, "kapat", true))
    {
        Item_StopMusic(boomboxid);
        PlayerAME(playerid, "müzik kutusunu kapatýr.");
    }
    return 1;
}
CMD:fixr(playerid, params[])
{
    StopAudioStreamForPlayer(playerid);
    return 1;
}
CMD:ver(playerid, params[])
{
    new id;
    new option[20];

    if(sscanf(params, "k<m>s[20]", id, option))return
        KullanimMesajiC(playerid, "/ver [id/isim] [silah - ceptelefonu - icecek - esrar - sigara - aletcantasi - tamirkiti]");

    if(!IsPlayerConnected(id) || !PlayerInfo[id][pLogged] || id == playerid)return
        HataMesajiC(playerid, "Geçersiz ID.");

    if(!ProxDetectorS(5.0, playerid, id))return
        SunucuMesajiC(playerid, "Bu oyuncuya yakýn deðilsin.");

    if(gettime() < PlayerInfo[playerid][pGiveTime])return
        SunucuMesajiC(playerid, "Komutu tekrarlamadan önce biraz bekle.");

    PlayerInfo[playerid][pGiveTime] = gettime() + 2;

    if(!strcmp(option, "silah", true))
    {
        new weaponid = (GetPlayerState(playerid) == PLAYER_STATE_PASSENGER || GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) ? AC_GetPlayerWeapon(playerid) : PlayerInfo[playerid][pOldGun];
        new ammo = AC_GetPlayerAmmo(playerid);

        if(!weaponid)return
            SunucuMesajiC(playerid, "Elinde silah bulunmuyor.");

        if(PlayerInfo[playerid][pFactionDuty])return
            SunucuMesajiC(playerid, "Bu komutu iþbaþýnda kullanamazsýn.");

        AC_SetPlayerAmmo(playerid, weaponid, 1);
        //if(AC_GetPlayerWeapon(playerid) == weaponid)
        AC_RemovePlayerWeapon(playerid, weaponid); //Yukaridaki sarta bagliydi
        AC_GivePlayerWeapon(id, weaponid, ammo);

        SetPlayerArmedWeapon(playerid, 0);
        //if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) PlayerInfo[playerid][pOldGun] = 0;
        if(GetPlayerState(id) != PLAYER_STATE_ONFOOT) SetPlayerArmedWeapon(id, 0);//PlayerInfo[id][pOldGun]);

        LogYaz(playerid, "/ver", id, weaponid, ammo);
        SaveCharacter(playerid);
        SaveCharacter(id);
    }
    else if(!strcmp(option, "aletcantasi", true))
    {
        if(!PlayerInfo[playerid][pAletCantasi])return
            SunucuMesajiC(playerid, "Elinde alet çantasý bulunmuyor.");

        if(PlayerInfo[id][pAletCantasi])return
            SunucuMesajiC(playerid, "Belirttiðiniz kiþinin zaten alet çantasý var.");

        PlayerInfo[playerid][pAletCantasi] = 0;
        PlayerInfo[id][pAletCantasi] = 1;
        SaveCharacter(playerid);
        SaveCharacter(id);
    }
    else if(!strcmp(option, "tamirkiti", true))
    {
        if(PlayerInfo[playerid][pTamirKiti] < 1)return
            SunucuMesajiC(playerid, "Elinde tamir kiti bulunmuyor.");

        if(PlayerInfo[id][pTamirKiti] >= 2)return
            SunucuMesajiC(playerid, "Belirttiðiniz kiþinin zaten tamir kiti var.");

        PlayerInfo[playerid][pTamirKiti]--;
        PlayerInfo[id][pTamirKiti]++;
        SaveCharacter(playerid);
        SaveCharacter(id);
    }
    else if(!strcmp(option, "esrar", true) || !strcmp(option, "sigara"))
    {
        if(!PlayerInfo[playerid][pSmoking] || !PlayerInfo[playerid][pSmokingThrows] || PlayerInfo[playerid][pSmokingType] == SMOKING_TYPE_NULL)return
            SunucuMesajiC(playerid, "Sigara içmiyorsun.");

        if(PlayerInfo[id][pSmoking] && PlayerInfo[playerid][pSmokingThrows])return
            SunucuMesajiC(playerid, "Bu oyuncu zaten sigara içiyor.");

        RemovePlayerAttachedObject(id, 7);
        RemovePlayerAttachedObject(id, 6);
        SetPlayerAttachedObject(id, 7, 3027, 6, 0.0852, 0.0303, 0.0194, 88.7970, 53.3082, 162.5791);
        SetPlayerAttachedObject(id, 6, 18673, 6, 0.1570, -0.0588, -1.6079, 0.0000, 0.0000, 0.0000, 1.0000, 1.0000, 1.0000);

        ApplyAnimation(id, "SMOKING", "M_smk_in", 4.1, 0, 0, 0, 0, 0, 1);
        SunucuMesaji(id, "Sigara> Y: Sigara içme, N: Konum deðiþtirme, H: Yere atma.");
        PlayerInfo[id][pSmoking] = PlayerInfo[playerid][pSmoking];
        PlayerInfo[id][pSmokingType] = PlayerInfo[playerid][pSmokingType];
        PlayerInfo[id][pSmokingThrows] = PlayerInfo[playerid][pSmokingThrows];
        PlayerInfo[id][pSmokingQuality] = PlayerInfo[playerid][pSmokingQuality];

        if(PlayerInfo[id][pSmokingType] == SMOKING_TYPE_WEED || PlayerInfo[id][pSmokingType] == SMOKING_TYPE_HASHISH)
        {
            new drug_id = PlayerInfo[id][pSmokingType] - 2;

            PlayerInfo[id][pDrugEffects][drug_id] = 0;
        }

        RemovePlayerAttachedObject(playerid, 7);
        RemovePlayerAttachedObject(playerid, 6);

        PlayerInfo[playerid][pSmoking] = 0;
        PlayerInfo[playerid][pSmokingType] = SMOKING_TYPE_NULL;
        PlayerInfo[playerid][pSmokingThrows] = 0;
        PlayerInfo[playerid][pSmokingQuality] = 0;
    }
    else if(!strcmp(option, "icecek", true))
    {
        new specialAction = GetPlayerSpecialAction(playerid);

        if(specialAction != SPECIAL_ACTION_DRINK_BEER && specialAction != SPECIAL_ACTION_DRINK_SPRUNK || !PlayerInfo[playerid][pSips])return
            SunucuMesajiC(playerid, "Bir þey içmiyorsun.");

        if(GetPlayerSpecialAction(id) == SPECIAL_ACTION_DRINK_BEER || GetPlayerSpecialAction(id) == SPECIAL_ACTION_DRINK_SPRUNK || PlayerInfo[id][pSips])return
            SunucuMesajiC(playerid, "Bu oyuncu zaten bir þey içiyor.");

        SetPlayerSpecialAction(id, specialAction);
        PlayerInfo[id][pSips] = PlayerInfo[playerid][pSips];

        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
        PlayerInfo[playerid][pSips] = 0;
    }
    else if(!strcmp(option, "ceptelefonu", true))
    {
        if(PlayerInfo[playerid][pMobile] == -1)return
            SunucuMesajiC(playerid, "Çaðrýda deðilsin.");

        new mobile_id = PlayerInfo[playerid][pMobile];

        if(!IsPlayerConnected(mobile_id) || !PlayerInfo[mobile_id][pLogged] || PlayerInfo[mobile_id][pMobile] != playerid)return
            SunucuMesajiC(playerid, "Bir oyuncuyla görüþmüyorsun.");

        if(PlayerInfo[id][pMobile] != -1)return
            SunucuMesajiC(playerid, "Bu oyuncu zaten bir arama yapýyor.");

        if(GetPlayerSpecialAction(id) != SPECIAL_ACTION_DUCK) SetPlayerSpecialAction(id,SPECIAL_ACTION_USECELLPHONE);
        SetPlayerAttachedObject(id, 8, PlayerInfo[playerid][pTelefonKilifi], 6, 0.102, 0.012, 0.022, -112.7, 0, 175.1, 1, 1, 1);

        if(GetPVarInt(playerid, "AradigiNumara") != 0) {
            SetPVarInt(id, "AradigiNumara", GetPVarInt(playerid, "AradigiNumara"));
            DeletePVar(playerid, "AradigiNumara");
        }
        if(GetPVarInt(playerid, "RehberdeVar") != 0) {
            SetPVarInt(id, "RehberdeVar", GetPVarInt(playerid, "RehberdeVar"));
            RehberIsim[id] = RehberIsim[playerid];
            DeletePVar(playerid, "RehberdeVar");
        }
        PlayerInfo[id][pMobile] = mobile_id; PlayerInfo[mobile_id][pMobile] = id;
        PlayerInfo[id][pSpeakerPhone] = PlayerInfo[playerid][pSpeakerPhone];
        PlayerInfo[id][pUsingPP] = PlayerInfo[playerid][pUsingPP];
        KillTimer(PlayerInfo[id][pCallTime]);
        PlayerInfo[id][pCallTime] = SetTimerEx("ToggleMoney", 30000, true, "dd", id, playerid);
        PlayerInfo[id][pFreezed] = PlayerInfo[playerid][pFreezed];
        TogglePlayerControllable(id, (PlayerInfo[id][pFreezed]) ? false : true);
        PlayerInfo[id][pEmergency] = PlayerInfo[playerid][pEmergency];

        SetPlayerSpecialAction(playerid,SPECIAL_ACTION_STOPUSECELLPHONE);
        RemovePlayerAttachedObject(playerid, 8);
        TogglePlayerControllable(playerid, true);
        PlayerInfo[playerid][pFreezed] = 0;
        PlayerInfo[playerid][pMobile] = -1;
        PlayerInfo[playerid][pSpeakerPhone] = 0;
        PlayerInfo[playerid][pEmergency] = 0;
        KillTimer(PlayerInfo[playerid][pCallTime]);
        PlayerInfo[playerid][pUsingPP] = -1;
    }
    else return
        HataMesajiC(playerid, "Geçersiz parametre.");

    PlayerMEPlayer(playerid, id, "kiþisine bir þey verdi");

    return 1;
}
CMD:give(playerid, params[])return pc_cmd_ver(playerid, params);
CMD:anahtar(playerid, params[])
{
    if(GetPlayerUserKeys(playerid) == 0) return HataMesajiC(playerid, "Anahtara sahip deðilsin.");

    new slot, option[24], id = -1;

    if(sscanf(params, "ds[24]D(-1)", slot, option, id))
    {
        // new query[256];

        mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT subject_type, subject_id, expired FROM user_keys WHERE owner_id = '%d'", PlayerInfo[playerid][pID]);
        mysql_tquery(ourConnection, queryx, "OnPlayerKeysListSearch", "d", playerid);

        return 1;
    }

    if(slot <= 0 || slot > GetPlayerUserKeys(playerid))return
        SunucuMesaji(playerid, "Bu slotta anahtar yok.");

    if(!strcmp(option, "at", true))
    {
        Key_Drop(playerid, slot-1);
        BasariMesaji(playerid, "%d slotundaki anahtarý attýn.", slot);
    }
    else if(!strcmp(option, "ver", true))
    {
        if(id == -1)return
            SendFormattedMessage(playerid, COLOR_GREY, "/anahtar %d ver [id/isim]", slot);

        if(!IsPlayerConnected(id) || playerid == id)return
            HataMesajiC(playerid, "Geçersiz ID.");

        if(!ProxDetectorS(3.0, playerid, id))return
            SunucuMesaji(playerid, "Bu oyuncuya yakýn deðilsin.");

        Key_Drop(playerid, slot-1, id);
        BasariMesaji(playerid, "%d slotundaki anahtarý %s kiþisine verdin.", slot, ReturnRoleplayName(id));
        BasariMesaji(id, "%s sana bir anahtar verdi. /anahtar komutunu kullanarak anahtarlarý görebilirsin.", ReturnRoleplayName(playerid));

    }
    else HataMesajiC(playerid, "Geçersiz parametre.");

    return 1;
}


CMD:envanteryerlestir(playerid, params[])
{
    if(PlayerInfo[playerid][pFactionDuty])return HataMesajiC(playerid, "Ýþbaþýnda envanterine eriþemezsin.");
    if(PlayerInfo[playerid][pLevel] < 2) return HataMesajiC(playerid, "Bu iþlemi yapabilmek için en az 2 seviye olmalýsýnýz.");
    if(PlayerInfo[playerid][pCuffed]) return HataMesajiC(playerid, "Kelepçeliyken bunu yapamazsýn.");
    if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return HataMesaji(playerid, "Bunu yapamazsýnýz.");
    if(Inventory_FreeID(playerid) == -1) return HataMesajiC(playerid, "Envanterde daha fazla yer yok.");

    new Float:pHP;
    AC_GetPlayerHealth(playerid, pHP);
    if(pHP <= 70.0) return SendClientMessageEx(playerid, COLOR_GREY, "Canýnýz az olduðu için bu komutu kullanamazsýnýz.");
    if(GetPlayerPing(playerid) > 300) return HataMesajiC(playerid, "Ping deðeriniz bu kadar yüksekken bu komutu kullanamazsýnýz.");
    
    new weaponid = AC_GetPlayerWeapon(playerid);
    new ammo = AC_GetPlayerAmmo(playerid);
    
    if(weaponid == 42 && PlayerInfo[playerid][pJob] == 1) return HataMesajiC(playerid, "Bu iþlemi yapamazsýnýz.");

    if(Inventory_HasItem(playerid, GetWeaponNameEx(weaponid), ITEM_WEAPON) > 0)
        return HataMesaji(playerid, "%s model silah zaten envanterinde mevcut. Yenisini ekleyemezsin.", GetWeaponNameEx(weaponid));

    if(!weaponid) return HataMesaji(playerid, "Elinde silah bulunmuyor. [%s]", ReturnDate());

    new string[1024];
    format(string, sizeof(string), "{FFFFFF}Bu eþyayý envanterine yerleþtirmek istediðine emin misin?\nEþya adý: {FF6347}%s (Mermi: %d){FFFFFF} [Bu iþlemi yaparken mutlaka ekran görüntüsü alýn! Mermi 0 ise iptal edin!]\nUYARI: Yerleþtirdiðiniz silahýn eþya adý bölümünde verilen bilgiyle eþleþtiðine emin olunuz.\n[%s - %s] Eðer eþleþmeden eminseniz aþaðýdaki kutucuða 'EVET' yazýn.", GetWeaponNameEx(weaponid), ammo, ReturnRoleplayName(playerid), ReturnDate());
    Dialog_Show(playerid, EnvanterYerlestir, DIALOG_STYLE_INPUT, "{FFFFFF}Envanter Yerleþtirme Sistemi (BETA)", string, "Onay", "Iptal");
    return 1;
}

Dialog:EnvanterYerlestir(playerid, response, listitem, inputtext[])
{
    if(!response)return 1;
    
    if(isnull(inputtext)) return HataMesajiC(playerid, "Hatalý onay kodu giriþi, iþlem baþarýsýz.");

    if(!strcmp("EVET", inputtext, true))
    {
        new weaponid = AC_GetPlayerWeapon(playerid);
        new ammo = AC_GetPlayerAmmo(playerid);

        if(Inventory_HasItem(playerid, GetWeaponNameEx(weaponid), ITEM_WEAPON) > 0)
            return HataMesaji(playerid, "%s model silah zaten envanterinde mevcut. Yenisini ekleyemezsin.", GetWeaponNameEx(weaponid));

        if(!weaponid) return HataMesaji(playerid, "Elinde silah bulunmuyor. [%s]", ReturnDate());

        if(Inventory_FreeID(playerid) == -1) return HataMesajiC(playerid, "Envanterde daha fazla yer yok.");
        
        new slot = Inventory_FreeID(playerid);

        PlayerInfo[playerid][pItemID] = slot;
        EnvanterIDDuzelt(playerid, slot);
        slot = Inventory_AddGun(playerid, Inventory_FreeID(playerid), GetWeaponNameEx(weaponid), ammo);
        if(PlayerInfo[playerid][pHata] == 0)
        {
            AC_RemovePlayerWeapon(playerid, weaponid);
            LogYaz(playerid, "/envanteryerlestir", -1, weaponid, ammo);
            printf("%s tarihinde %s adli kullanici %d (%d) silahini yerlestirdi.", ReturnDate(), ReturnRoleplayName(playerid), weaponid, ammo);
            //Log(envanteryerlestir, INFO, "%s tarihinde %s adli kullanici %d (%d) silahini yerlestirdi.", ReturnDate(), ReturnRoleplayName(playerid), weaponid, ammo);
            BasariMesaji(playerid, "Envanterine '%s' adlý eþyayý koydun. (%s)", Inventory_ReturnString(playerid, ENTITY_TYPE_PLAYER, slot, ammo), ReturnDate());
        }
        else PlayerInfo[playerid][pHata] = 0;
        SaveCharacter(playerid);
    }
    else HataMesajiC(playerid, "Hatalý onay kodu giriþi, iþlem baþarýsýz.");
    return 1;
}

CMD:envanter(playerid, params[])
{
    if(PlayerInfo[playerid][pCuffed]) return HataMesajiC(playerid, "Kelepçeliyken bunu yapamazsýn.");
    new slot, option[24], id, amount, type, listid;

    if(sscanf(params, "ds[24]D(-1)D(0)", slot, option, id, amount))
    {
        EnvanterIDDuzelt(playerid, 0);
        new string[1048];
        for(new x; x < MAX_INVENTORY_ITEMS; x++)
        {
            if(PlayerInfo[playerid][pInvList][x])
            {
                format(string, sizeof string, "%s\n{9999ff}%d. {FFFFFF}%s", string, x + 1, Inventory_ReturnString(playerid, ENTITY_TYPE_PLAYER, x));
            }
            else if(!PlayerInfo[playerid][pInvList][x])
            {
                format(string, sizeof string, "%s\n{9999ff}%d. {FFFFFF}Boþ slot", string, x + 1);
            }
        }
        if(GetPlayerUserKeys(playerid) > 0) SendFormattedMessage(playerid, COLOR_WHITE, "[ENVANTER] {AFAFAF}%d tane anahtara sahipsin (/anahtar).", GetPlayerUserKeys(playerid));
        Dialog_Show(playerid, DialogEnvanter, DIALOG_STYLE_LIST, "Envanter", string, "Seç", "Ýptal");
        return 1;
    }

    slot--;
    if(slot < 0 || slot >= MAX_INVENTORY_ITEMS)return
        SunucuMesaji(playerid, "Geçersiz slot. (1 - 10)");

    listid = PlayerInfo[playerid][pInvList][slot];
    type = InventoryObjects[listid][invType];

    if(!strcmp(option, "imha", true)) {
        if(!PlayerInfo[playerid][pInvList][slot])return
            HataMesajiC(playerid, "Boþ slot.");

        Inventory_DecraseAmount(playerid, slot, PlayerInfo[playerid][pInvAmount][slot]);
        BasariMesajiC(playerid, "Belirttiðiniz envanter slotunda bulunan eþya imha edildi.");
        LogYaz(playerid, "/envanter imha", slot);
        EnvanterIDDuzelt(playerid, slot);
    }
    else if(!strcmp(option, "kullan", true))
    {
        if(!PlayerInfo[playerid][pInvList][slot])return
            HataMesajiC(playerid, "Boþ slot.");

        PlayerInfo[playerid][pItemID] = slot;
        Inventory_UseItem(playerid, slot);
        EnvanterIDDuzelt(playerid, slot);
    }

    else if(!strcmp(option, "at", true))
    {
        if(PlayerInfo[playerid][pFactionDuty])return
        SunucuMesajiC(playerid, "Ýþbaþýnda envanterine eriþemezsin.");

        if(!PlayerInfo[playerid][pInvList][slot])return
            HataMesajiC(playerid, "Boþ slot.");

        if(InventoryObjects[listid][invObject] == 18911 && PlayerInfo[playerid][pMasked])
            ToggleMask(playerid);

        if(IsPlayerInAnyVehicle(playerid) > 0)return
            SunucuMesaji(playerid, "Bu özelliði araçta kullanamazsýn.");

        if(amount > PlayerInfo[playerid][pInvAmount][slot]) return HataMesajiC(playerid, "Bu eþyadan yeterince yok.");

        if(amount > 0) {
            PlayerInfo[playerid][pItemID] = slot;
            Item_Drop(playerid, slot, amount);
        } else return HataMesajiC(playerid, "Miktar en az 1 olmalý.");

        SendFormattedMessage(playerid, COLOR_GREEN, "[SA-RP] {C8C8C8}Envanterinden '%s (%d)' attýn.", InventoryObjects[listid][invName], (type == ITEM_WEAPON ||
            type == ITEM_CLOTHES ||
            type == ITEM_PHONE ||
            type == ITEM_DRUG ||
            type == ITEM_INGREDIENT) ?
            amount : 1);


        LogYaz(playerid, "/envanter at", -1, listid, -1);
        EnvanterIDDuzelt(playerid, slot);
    }
    else if(!strcmp(option, "ver", true))
    {
        if(PlayerInfo[playerid][pFactionDuty])return
        SunucuMesajiC(playerid, "Ýþbaþýnda envanterine eriþemezsin.");

        if(!PlayerInfo[playerid][pInvList][slot])return
            HataMesajiC(playerid, "Boþ slot.");

        if(id == -1)
        {
            SendFormattedMessage(playerid, COLOR_GREY, "/envanter [%d] [ver] [id] [miktar]", slot + 1);
            return SendClientMessageEx(playerid, COLOR_GREY, "[NOT] Miktar sadece silahlar, uyuþturucular ve iþletmelerden satýn alýnan ürünlerde kullanýlabilir.");
        }

        if(!IsPlayerConnected(id) || id == playerid)return
            HataMesajiC(playerid, "Geçersiz ID.");

        if(!ProxDetectorS(5.0, playerid, id))return
            SunucuMesaji(playerid, "Bu oyuncuya yakýn deðilsin.");

        if(PlayerInfo[playerid][pGiveItem] != -1) return
            HataMesaji(playerid, "Eþya verme isteði gönderdin, \"/envanter %d veriptal\" ile iptal edebilirsin.", slot + 1);

        if(gettime() < PlayerInfo[playerid][pGiveTime])return
            SunucuMesaji(playerid, "Bu komutu kullanmadan önce biraz bekle.");

        if(type == ITEM_WEAPON || type == ITEM_CLOTHES || type == ITEM_PHONE) PlayerInfo[playerid][pAmount] = PlayerInfo[playerid][pInvAmount][slot];
        else
        {
            if(amount <= 0)return
                SendFormattedMessage(playerid, COLOR_GREY, "/envanter [%d] [ver] [%d] [miktar]", slot + 1, id);

            if(amount > PlayerInfo[playerid][pInvAmount][slot] || amount <= 0)return
                SunucuMesajiC(playerid, "Envanterde boþ yer yok.");

            PlayerInfo[playerid][pAmount] = amount;
        }

        if(PlayerInfo[playerid][pAmount] <= 0)return
            SendFormattedMessage(playerid, COLOR_GREY, "/envanter [%d] [ver] [%d] [miktar]", slot + 1, id);

        if(PlayerInfo[playerid][pAmount] > PlayerInfo[playerid][pInvAmount][slot] || PlayerInfo[playerid][pAmount] <= 0)return
            SunucuMesajiC(playerid, "Envanterde boþ yer yok.");

        if(PlayerInfo[playerid][pMobile] != -1 && id == PlayerInfo[playerid][pPhoneID])
            Phone_HangupCall(playerid);

        PlayerInfo[playerid][pGiveTime] = gettime() + 2;
        PlayerInfo[playerid][pItemID] = slot;
        PlayerInfo[playerid][pGiveItem] = id;
        PlayerInfo[id][pGiveItem] = playerid;

        SunucuMesaji(playerid, "'%s' adlý eþyaný %s kiþisine vermek için istek yolladýn.", Inventory_ReturnString(playerid, ENTITY_TYPE_PLAYER, slot, PlayerInfo[playerid][pAmount]), ReturnRoleplayName(id));
        BasariMesaji(id, "%s sana %s vermek istiyor. Kabul etmek için \"/kabulet nesne\" kullan.", ReturnRoleplayName(playerid), Inventory_ReturnString(playerid, ENTITY_TYPE_PLAYER, slot, PlayerInfo[playerid][pAmount]));
    }
    else if(!strcmp(option, "veriptal", true))
    {
        id = PlayerInfo[playerid][pGiveItem];

        if(PlayerInfo[playerid][pFactionDuty])return
            SunucuMesajiC(playerid, "Ýþbaþýnda envanterine eriþemezsin.");

        if(id == -1)return
            SunucuMesaji(playerid, "Kimseye verme isteði göndermedin.");

        if(PlayerInfo[playerid][pItemID] != slot)return
            SunucuMesajiC(playerid, "Bu slotta eþya yok.");

        if(IsPlayerConnected(id) && PlayerInfo[id][pGiveItem] == playerid)
        {
            SendFormattedMessage(id, COLOR_ERROR, "%s nesne iletme isteðini iptal etti.", ReturnRoleplayName(playerid));
            PlayerInfo[id][pAmount] = 0;
            PlayerInfo[id][pGiveItem] = -1;
        }

        SendClientMessageEx(playerid, COLOR_WHITE, "Eþya verme isteðini iptal ettin.");

        PlayerInfo[playerid][pItemID] = -1;
        PlayerInfo[playerid][pGiveItem] = -1;
    }
    else if(!strcmp(option, "evekoy", true))
    {
        if(PlayerInfo[playerid][pFactionDuty])return
        SunucuMesajiC(playerid, "Ýþbaþýnda envanterine eriþemezsin.");

        if(PlayerInfo[playerid][pEditingMode])return 1;

        if(!PlayerInfo[playerid][pInvList][slot])return
            HataMesajiC(playerid, "Boþ slot.");

        new houseid = GetPlayerMenuHouse(playerid);

        if(houseid == -1)return
            SunucuMesajiC(playerid, "Evin içerisinde deðilsin.");

        if(GetPlayerMenuHouse(playerid) != houseid)return
            SunucuMesajiC(playerid, "Evde deðilsin.");

        if(Storage_GetCount(houseid) >= MAX_STORAGE_ITEMS)return
            SunucuMesajiC(playerid, "Envanterde boþ yer yok.");

        switch(type)
        {
            case ITEM_BIZ, ITEM_DRUG, ITEM_INGREDIENT:
            {
                if(id == -1)return
                    SendFormattedMessage(playerid, COLOR_GREY, "/envanter [%d] [evekoy] [miktar]", slot + 1);

                if(id < 1 || id > PlayerInfo[playerid][pInvAmount][slot])return
                    SunucuMesajiC(playerid, "Envanterde boþ yer yok.");
            }
            case ITEM_WEAPON, ITEM_CLOTHES, ITEM_PHONE: id = PlayerInfo[playerid][pInvAmount][slot];
        }

        SunucuMesaji(playerid, "'%s' eþyaný evine yerleþtirdin.", Inventory_ReturnString(playerid, ENTITY_TYPE_PLAYER, slot, id));

        Storage_AddItem(playerid, houseid, Storage_FreeID(houseid), slot, id);

        LogYaz(playerid, "/envanter evekoy", -1, houseid, listid);
        EnvanterIDDuzelt(playerid, slot);
        SaveCharacter(playerid);
        SaveHouse(houseid);
    }
    else if(!strcmp(option, "bagaj", true))
    {
        if(PlayerInfo[playerid][pFactionDuty])return
        SunucuMesajiC(playerid, "Ýþbaþýnda envanterine eriþemezsin.");

        if(PlayerInfo[playerid][pEditingMode])return 1;

        if(!PlayerInfo[playerid][pInvList][slot])return
            HataMesajiC(playerid, "Boþ slot.");

        new vehicleid = GetNearestVehicle(playerid);

        if(vehicleid == -1)return
            SunucuMesajiC(playerid, "Bir araca yakýn deðilsin.");

        if(VehicleInfo[vehicleid][vTemporary])return
            SunucuMesaji(playerid, "Veritabanýnda olmayan araca eþya koyamazsýn.");

        if(!IsPlayerInAnyVehicle(playerid) && !VehicleInfo[vehicleid][vEngine] && GetPlayerState(playerid) != PLAYER_STATE_DRIVER)return
            HataMesajiC(playerid, "Motoru açýk bir araçta sürücü olmalýsýn.");

        new vCapacity = Trunk_GetSlot(vehicleid);

        if(Trunk_GetCount(vehicleid) >= vCapacity)return
            SunucuMesajiC(playerid, "Envanterde boþ yer yok.");

        switch(type)
        {
            case ITEM_BIZ, ITEM_DRUG, ITEM_INGREDIENT:
            {
                if(id == -1)return
                    SendFormattedMessage(playerid, COLOR_GREY, "/envanter [%d] <bagaj> [miktar]", slot + 1);

                if(id < 1 || id > PlayerInfo[playerid][pInvAmount][slot])return
                    SunucuMesajiC(playerid, "Geçersiz deðer.");
            }
            case ITEM_WEAPON, ITEM_CLOTHES, ITEM_PHONE: id = PlayerInfo[playerid][pInvAmount][slot];
        }

        SunucuMesaji(playerid, "Aracýnýn bagajýna '%s' koydun.", Inventory_ReturnString(playerid, ENTITY_TYPE_PLAYER, slot, id));

        Trunk_AddItem(playerid, vehicleid, Trunk_FreeID(vehicleid), slot, id);

        LogYaz(playerid, "/envanter bagaj", -1, VehicleInfo[vehicleid][vID], listid);
        EnvanterIDDuzelt(playerid, slot);
    }
    else return
        HataMesajiC(playerid, "Geçersiz parametre.");

    return 1;
}
CMD:env(playerid, params[])return pc_cmd_envanter(playerid,params);
CMD:re(playerid, params[])
{
    new id, text[256];

    id = PlayerInfo[playerid][pPM];

    if(sscanf(params, "s[144]", text))
    {
        if(id == -1) return HataMesajiC(playerid, "En son mesajlaþtýðýnýz kiþi yok. (/pm [id/isim] [yazý])");
        KullanimMesajiC(playerid, "/re [özel mesaj]");
        return HataMesaji(playerid, "En son mesajlaþtýðýnýz kiþi: %s", ReturnRoleplayName(id));
    }

    if(!IsPlayerConnected(id) || !PlayerInfo[id][pLogged])return
        HataMesajiC(playerid, "Geçersiz ID.");

    Player_SendPM(playerid, id, text);
    PlayerInfo[playerid][pPM] = id;
    return 1;
}

CMD:kampatesi(playerid, params[])
{
    new tip[7], Float:oPos[4];

    if(sscanf(params, "s[7]", tip))
    {
        KullanimMesajiC(playerid, "/kampatesi [kur/kaldir]");
        return 1;
    }
    if(!strcmp(tip, "kur", true))
    {
        if(PlayerInfo[playerid][oKampAtesi] != -1)
            return HataMesajiC(playerid, "Zaten kamp ateþi kurmuþsunuz.");

        if(GetPlayerInterior(playerid) > 0 && GetPlayerVirtualWorld(playerid) > 0)
            return HataMesajiC(playerid, "Bu komutu sadece dýþ dünyada kullanabilirsiniz.");
        if(KampInfo[playerid][kExists]) return HataMesajiC(playerid, "Zaten kamp ateþi kurmuþsunuz.");

        GetPlayerPos(playerid, oPos[0], oPos[1], oPos[2]);
        GetPlayerFacingAngle(playerid, oPos[3]);
        for(new i; i < 4; i++)
            KampInfo[playerid][kPos][i] = oPos[i];
        KampInfo[playerid][kPos][4] = 0.0;
        KampInfo[playerid][kPos][5] = 0.0;
        KampInfo[playerid][kObje] = CreateDynamicObject(19632, oPos[0], oPos[1], oPos[2]-1, 0.000, 0.000, oPos[3]);
        Iter_Add(Kamp, playerid);
        KampInfo[playerid][kExists] = 1;
        format(KampInfo[playerid][kKuran],MAX_PLAYER_NAME,"%s",ReturnRoleplayName(playerid, true));
        for(new i; i < 2; i++) {
            KampInfo[playerid][kBalik][i] = -1;
            KampInfo[playerid][kBalikPismeTimer][i] = 0;
            KampInfo[playerid][kBalikPisti][i] = 0;
            KampInfo[playerid][kBalikYandi][i] = 0;
        }
        Streamer_Update(playerid);
        PlayerInfo[playerid][oKampAtesi] = playerid;
        BasariMesaji(playerid, "Kamp ateþini yerleþtirdiniz ve yaktýnýz.");
        return 1;
    }
    else if(!strcmp(tip, "kaldir", true))
    {
        if(PlayerInfo[playerid][oKampAtesi] == -1)
            return HataMesajiC(playerid, "Henüz kamp ateþi yerleþtirmemiþsiniz.");

        new Float:objex, Float:objey, Float:objez;
        GetDynamicObjectPos(KampInfo[playerid][kObje], objex, objey, objez);

        if(!IsPlayerInRangeOfPoint(playerid, 3.0, objex, objey, objez))
            return HataMesajiC(playerid, "Kamp ateþine yakýn deðilsiniz.");
        DestroyDynamicObjectEx(KampInfo[playerid][kObje]);
        for(new i; i < 6; i++)
            KampInfo[playerid][kPos][i] = 0.0;
        KampInfo[playerid][kObje] = INVALID_OBJECT_ID;
        Iter_Remove(Kamp, playerid);
        KampInfo[playerid][kExists] = 0;
        format(KampInfo[playerid][kKuran],MAX_PLAYER_NAME,"Yok");
        for(new i; i < 2; i++) {
            if(IsValidDynamic3DTextLabel(KampInfo[playerid][kLabelText][i]))
                DestroyDynamic3DTextLabelEx(KampInfo[playerid][kLabelText][i]);
            KampInfo[playerid][kBalik][i] = -1;
            KampInfo[playerid][kBalikPismeTimer][i] = 0;
            KampInfo[playerid][kBalikPisti][i] = 0;
            KampInfo[playerid][kBalikYandi][i] = 0;
        }
        PlayerInfo[playerid][oKampAtesi] = -1;
        BasariMesaji(playerid, "Kamp ateþi baþarýyla kaldýrýldý.");
        return 1;
    }
    return 1;
}

CMD:om(playerid, params[])return pc_cmd_pm(playerid, params);
CMD:pm(playerid, params[])
{
    new id, text[256];

    if(sscanf(params, "us[256]", id, text))return
        KullanimMesajiC(playerid, "/pm [id/isim] [yazý]");

    if(!IsPlayerConnected(id) || !PlayerInfo[id][pLogged] || id == playerid)return
        HataMesajiC(playerid, "Geçersiz ID.");

    //PlayerInfo[playerid][pPM] = id;
    Player_SendPM(playerid, id, text);

    return 1;
}

CMD:asunucubilgi(playerid, params[])
{
    new v = Iter_Count(Vehicles);
    new h = Iter_Count(Houses);
    new b = Iter_Count(Buildings);
    new pp = Iter_Count(PayPhones);
    new f = Iter_Count(Factions);
    new g = Iter_Count(Graffitis);
    new di = Iter_Count(DroppedItems);
    new rb = Iter_Count(RoadBlocks);
    new d = Iter_Count(Dealers);
    new c = Iter_Count(Crates);
    new m = Iter_Count(Meals);
    new l = Iter_Count(Lab);
    new cim = Iter_Count(Cimici);
    new ii = Iter_Count(IllegalIndustry);
    new req = Iter_Count(Requests);
    new tel = Iter_Count(Teleports);
    new comp = Iter_Count(Companies);
    new obj = Streamer_GetUpperBound(STREAMER_TYPE_OBJECT);

    SendFormattedMessage(playerid, COLOR_ADMIN, "[%s] %s", ReturnDate(), "Sunucu Ýstatistikleri");
    SunucuMesaji(playerid, "Araçlar: %d - Evler: %d - Ýþletmeler %d - Oluþumlar: %d - Grafiti: %d - Telefon Kulübeleri: %d", v, h, b, f, g, pp);
    SunucuMesaji(playerid, "Yerdeki eþyalar: %d - Barikatlar: %d - Koliler: %d - Tepsiler: %d - Iþýnlana Nok: %d", di, rb, c, m, tel);
    SunucuMesaji(playerid, "Galeriler: %d - Laboratuvarlar: %d - Böcekler: %d - Ýllegal Endüstri: %d - Endüstriler: %d", d, l, cim, ii, comp);
    SunucuMesaji(playerid, "Talepler: %d - Map Objeleri: %d", req, obj);

    return 1;
}
CMD:frekanssifredegistir(playerid, params[])
{
    new channel,
        password[32],
        fid = PlayerInfo[playerid][pFaction];

    if(sscanf(params, "ds[32]", channel, password))return
        KullanimMesajiC(playerid, "/frekanssifredegistir [frekans] [yeni þifre]");

    if(channel < 0 || channel >= MAX_FREQUENCES)return
        HataMesaji(playerid, "Geçerli bir frekans girin. (0-%d)", MAX_FREQUENCES-1);

    if(FrequenceInfo[channel][rFaction] != -1 && PlayerInfo[playerid][pFaction] == -1 || PlayerInfo[playerid][pRank] > 3)return
        SunucuMesajiC(playerid, "Oluþuma ait frekans ayarlarýný deðiþtiremezsin.");

    if(FrequenceInfo[channel][rFaction] == -1 && FrequenceInfo[channel][rOwner] != PlayerInfo[playerid][pID])return
        SunucuMesajiC(playerid, "Bu frekansýn sahibi deðilsiniz.");

    if(!FrequenceInfo[channel][rOwner] && FrequenceInfo[channel][rFaction] != fid)return
        SunucuMesajiC(playerid, "Bu frekans sizin oluþumunuza ait deðil.");

    format(FrequenceInfo[channel][rPassword], 32, password);
    BasariMesaji(playerid, "%d frekansýnýn þifresini %s olarak deðiþtirdin.", channel, password);

    new p_slot;

    foreach(new j : Player)
    {
        if(!IsPlayerConnected(j) || !PlayerInfo[j][pLogged])continue;
        if(Inventory_HasItem(j, "Telsiz", ITEM_BIZ) == -1)continue;

        p_slot = -1;

        for(new x; x < 8; x++) if(PlayerInfo[j][pRadioSlot][x] == channel) p_slot = x;

        if(p_slot == -1) continue;

        PlayerInfo[j][pAuthorized][channel] = false;
        SendFormattedMessage(j, COLOR_YELLOW, "%s slotunda bulunan %d frekansýnýn þifresi deðiþtiði için frekanstan çýkarýldýn.", p_slot, channel);
    }

    mysql_format(ourConnection, queryx, sizeof(queryx), "DELETE FROM radio_authorized WHERE channel = '%d'", channel);
    mysql_tquery(ourConnection, queryx);

    mysql_format(ourConnection, queryx, sizeof(queryx), "UPDATE frequencies SET password = '%e' WHERE channel = '%d'", password, channel);
    mysql_tquery(ourConnection, queryx);
    return 1;
}

CMD:disarm(playerid, params[])
{
    new id;

    if(sscanf(params, "u", id))return
        KullanimMesajiC(playerid, "/disarm [id/isim]");

    if(!IsPlayerConnected(id) || !PlayerInfo[id][pLogged])return
        HataMesajiC(playerid, "Geçersiz ID.");

    AC_ResetPlayerWeapons(id);

    BasariMesaji(id, "%s silahlarýný sýfýrladý.", ReturnRoleplayName(playerid));

    SendAworkAlert(false, COLOR_ADMIN, "AdmCmd: %s, %s kiþisinin silahlarýný sýfýrladý.", ReturnRoleplayName(playerid), ReturnRoleplayName(id));

    LogYaz(playerid, "/disarm", id);

    return 1;
}
CMD:removegun(playerid, params[])
{
    new id, weaponid;

    if(sscanf(params, "ud", id, weaponid))return
        KullanimMesajiC(playerid, "/removegun [id/isim] [silahid]");

    if(!IsPlayerConnected(id) || !PlayerInfo[id][pLogged])return
        HataMesajiC(playerid, "Geçersiz ID.");

    new getWeapon, getAmmo;

    for(new j; j < 12; j++)
    {
        GetPlayerWeaponData(id, j, getWeapon, getAmmo);

        if(getWeapon != weaponid) continue;

        AC_RemovePlayerWeapon(id, weaponid);

        BasariMesaji(id, "%s senin ID %d silahýný sildi.", ReturnRoleplayName(playerid), weaponid);
        SendAworkAlert(false, COLOR_ADMIN, "AdmCmd: %s %s ID'li oyuncunun %d ID'li silahýný sildi.", ReturnRoleplayName(playerid), ReturnRoleplayName(id), weaponid);

        LogYaz(playerid, "/removegun", id, weaponid);

        return 1;
    }

    SunucuMesajiC(playerid, "kiþinin silahý yok.");

    return 1;
}
CMD:givemoney(playerid, params[])
{
    new id,
        cash;

    if(sscanf(params, "ud", id, cash))return
        KullanimMesajiC(playerid, "/givemoney [id/isim] [miktar]");

    if(!IsPlayerConnected(id) || !PlayerInfo[id][pLogged])return
        HataMesajiC(playerid, "Geçersiz ID.");

    if(cash > 100000000)return
        SunucuMesajiC(playerid, "Geçersiz deðer. ($100000000)");

    AC_GivePlayerMoney(id, cash, "/givemoney");

    LogYaz(playerid, "/givemoney", id, cash);

    BasariMesaji(id, "%s sana $%d verdi.", ReturnRoleplayName(playerid), cash);

    foreach(new j : Player) if(IsPlayerConnected(j) && PlayerInfo[j][pLogged] && PlayerInfo[j][pAdmin] >= LEVEL20 && PlayerInfo[j][pAdminAlert])
        SendFormattedMessage(j, COLOR_ADMIN, "AdmCmd: %s $%d miktar parayý %s kiþisine verdi.", ReturnRoleplayName(playerid), cash, ReturnRoleplayName(id));

    return 1;
}
CMD:resetcash(playerid, params[])
{
    new id;

    if(sscanf(params, "u", id))return
        KullanimMesajiC(playerid, "/resetcash [id/isim]");

    if(!IsPlayerConnected(id) || !PlayerInfo[id][pLogged])return
        HataMesajiC(playerid, "Geçersiz ID.");
    SunucuMesaji(playerid, "%s kiþisinin %d miktarýnda parasýný sýfýrladýn.", ReturnRoleplayName(id), PlayerInfo[id][pCash]);
    
    ResetPlayerMoney(id);
    PlayerInfo[id][pCash] = 0;

    BasariMesaji(id, "%s paraný sýfýrladý.", ReturnRoleplayName(playerid));

    SendAdminAlert(false, COLOR_ADMIN, "AdmCmd: %s, %s kiþisinin parasýný sýfýrladý.", ReturnRoleplayName(playerid), ReturnRoleplayName(id));

    return 1;
}
CMD:givegun(playerid, params[])
{
    new id, weaponid, ammo;

    if(sscanf(params, "udD(500)", id, weaponid, ammo)) {
        KullanimMesajiC(playerid, "/givegun [id/isim] [silahid] [mermi]");
        SendClientMessage(playerid, COLOR_ADMIN, "[KULLANILABÝLÝR SÝLAHLAR]");
        SendClientMessage(playerid, COLOR_GREY, "Muþta(1), Golf Sopasý(2), Jop(3), Býçak(4), Beyzbol Sopasý(5), Kürek(6), Bilardo Sopasý(7), Katana(8), Testere(9)");
        SendClientMessage(playerid, COLOR_GREY, "Çiçek(14), Baston(15), Smoke(17), Moltov(18), Colt-45(22), SD Pistol(23), Desert Eagle(24)");
        SendClientMessage(playerid, COLOR_GREY, "Shotgun(25), UZI(28), MP5(29), AK-47(30), M4(31), TEC-9(32), Rifle(33), Sniper(34)");
        return SendClientMessage(playerid, COLOR_GREY, "Spray(41), Yangýn Tüpü(42), Camera(43), Paraþüt(46)");
    }

    if(!IsPlayerConnected(id) || !PlayerInfo[id][pLogged])return
        HataMesajiC(playerid, "Geçersiz ID.");

    if(PlayerInfo[id][pJailTime])return
        SunucuMesajiC(playerid, "Hapiste olan birisine silah veremezsin.");

    AC_GivePlayerWeapon(id, weaponid, ammo);

    LogYaz(playerid, "/givegun", id, weaponid, ammo);

    BasariMesaji(id, "%s sana %s (%d) verdi.", ReturnRoleplayName(playerid), SilahAdi(weaponid), ammo);

    foreach(new j : Player) if(IsPlayerConnected(j) && PlayerInfo[j][pLogged] && PlayerInfo[j][pAdmin] >= LEVEL20 && PlayerInfo[j][pAdminAlert])
        SendFormattedMessage(j, COLOR_ADMIN, "AdmCmd: %s adlý yönetici %s (%d) silahýný %s kiþisine verdi.", ReturnRoleplayName(playerid), SilahAdi(weaponid), ammo, ReturnRoleplayName(id));
    return 1;
}

CMD:isletmesifirla(playerid, params[])
{
    new id;

    if(sscanf(params, "u", id))return
        KullanimMesajiC(playerid, "/isletmesifirla [id/isim]");

    if(!IsPlayerConnected(id) || !PlayerInfo[id][pLogged])return
        HataMesajiC(playerid, "Geçersiz ID.");

    foreach(new b : Buildings) if(BuildingInfo[b][bExists] && BuildingInfo[b][bOwner] == PlayerInfo[id][pID])
    {
        BuildingInfo[b][bOwner] = 0;
        SaveBuilding(b);
    }

    SendAdminAlert(false, COLOR_ADMIN, "AdmCmd: %s, %s adlý oyuncunun iþletmelerini sýfýrladý.", ReturnRoleplayName(playerid), ReturnRoleplayName(id));

    LogYaz(playerid, "/isletmesifirla", id);

    return 1;
}
CMD:evsifirla(playerid, params[])
{
    new id;

    if(sscanf(params, "u", id))return
        KullanimMesajiC(playerid, "/evsifirla [id/isim]");

    if(!IsPlayerConnected(id) || !PlayerInfo[id][pLogged])return
        HataMesajiC(playerid, "Geçersiz ID.");

    foreach(new h : Houses) if(HouseInfo[h][hExists] && HouseInfo[h][hOwner] == PlayerInfo[id][pID])
    {
        HouseInfo[h][hOwner] = 0;
        SaveHouse(h);
    }

    PlayerInfo[id][pHouse] = -1;
    PlayerInfo[id][pHousePrice] = -1;
    PlayerInfo[id][pHouseSpawn] = -1;

    SendAdminAlert(false, COLOR_ADMIN, "AdmCmd: %s, %s adlý oyuncunun evlerini sýfýrladý.", ReturnRoleplayName(playerid), ReturnRoleplayName(id));

    LogYaz(playerid, "/evsifirla", id);

    return 1;
}
CMD:evsahip(playerid, params[])
{
    new id, houseid;

    if(sscanf(params, "udd", id, houseid))return
        KullanimMesajiC(playerid, "/evsahip [id/isim] [ev id]");

    if(!IsPlayerConnected(id) || !PlayerInfo[id][pLogged])return
        HataMesajiC(playerid, "Geçersiz ID.");

    if(houseid < 0 || houseid >= MAX_HOUSES || !HouseInfo[houseid][hExists])return
        SunucuMesajiC(playerid, "Ev bulunamadý.");

    SendAdminAlert(false, COLOR_ADMIN, "AdmCmd: %s %d ID'li evi %s kiþisinin üzerine yaptý.", ReturnRoleplayName(playerid), houseid, ReturnRoleplayName(id));

    HouseInfo[houseid][hOwner] = PlayerInfo[id][pID];
    SaveHouse(houseid);

    LogYaz(playerid, "/evsahip", id, houseid);
    return 1;
}
CMD:isletmesahip(playerid, params[])
{
    new id, buildingid;

    if(sscanf(params, "ud", id, buildingid))return
        KullanimMesajiC(playerid, "/isletmesahip [id/isim] [buildingid]");

    if(!IsPlayerConnected(id) || !PlayerInfo[id][pLogged])return
        HataMesajiC(playerid, "Geçersiz ID.");

    if(buildingid < 0 || buildingid >= MAX_BUILDINGS || !BuildingInfo[buildingid][bExists])return
        SunucuMesajiC(playerid, "Ýþletme bulunamadý.");

    if(PlayerInfo[id][pID] == BuildingInfo[buildingid][bOwner])return
        SunucuMesajiC(playerid, "Bu oyuncu zaten bu iþletmenin sahibi.");

    BuildingInfo[buildingid][bOwner] = PlayerInfo[id][pID];

    SendAdminAlert(false, COLOR_ADMIN, "AdmCmd: %s, %s adlý kiþiyi %d ID'li iþletmenin sahibi yaptý.", ReturnRoleplayName(playerid), ReturnRoleplayName(id), buildingid);

    SaveBuilding(buildingid);
    LogYaz(playerid, "/isletmesahip", id, buildingid);

    return 1;
}

CMD:unjail(playerid, params[])
{
    new id;

    if(sscanf(params, "u", id))return
        KullanimMesajiC(playerid, "/unjail [id/isim]");

    if(!IsPlayerConnected(id) || !PlayerInfo[id][pLogged])return
        HataMesajiC(playerid, "Geçersiz ID.");

    if(!PlayerInfo[id][pJailTime])return
        SunucuMesajiC(playerid, "Bu oyuncu hapiste deðil.");

    PlayerInfo[id][pJailTime] = 0;
    PlayerInfo[id][pJailC] = 0;
    PlayerInfo[id][pForceSpawn] = true;
    PlayerInfo[id][pJailTime] = 0;
    PlayerTextDrawHide(id, PlayerInfo[id][pTextdraws][0]);
    Player_SetSpawn(id);
    if(!PlayerInfo[playerid][pGizliAdmin])
        SendFormattedMessage(id, COLOR_ADMIN, "%s adlý yönetici seni hapisten çýkarttý. [%s]", ReturnRoleplayName(playerid), ReturnDate());
    else
        SendFormattedMessage(id, COLOR_ADMIN, "Administrator seni hapisten çýkarttý. [%s]", ReturnDate());

    SunucuMesaji(playerid, "%s adlý oyuncuyu hapisten çýkarttýn.", ReturnRoleplayName(id));
    SendAworkAlert(false, COLOR_ADMIN, "AdmCmd: %s, %s kiþisini hapisten çýkarttý. [%s]", ReturnRoleplayName(playerid), ReturnRoleplayName(id), ReturnDate());

    LogYaz(playerid, "/unjail", id);

    return 1;
}

CMD:setfaction(playerid, params[])
{
    new id,
        factionid,
        rank;

    if(sscanf(params, "udd", id, factionid, rank))return
        KullanimMesajiC(playerid, "/setfaction [id/isim] [olusum] [rütbe]");

    if(!IsPlayerConnected(id) || !PlayerInfo[id][pLogged])return
        HataMesajiC(playerid, "Geçersiz ID.");

    if(factionid < 0 || factionid >= MAX_FACTIONS || !FactionInfo[factionid][fExists])return
        SunucuMesajiC(playerid, "Oluþum bulunamadý.");

    if(rank < 1 || rank > MAX_FACTION_RANKS)return
        HataMesaji(playerid, "Geçersiz rütbe. (1 - %d)", MAX_FACTION_RANKS);

    PlayerInfo[id][pFaction] = factionid;
    PlayerInfo[id][pRank] = rank;

    FactionInfo[factionid][fMembersCount]++;

    BasariMesaji(id, "%s seni %s oluþumuna aldý. (%s)", ReturnRoleplayName(playerid), FactionInfo[factionid][fName], fRanks[factionid][rank-1]);
    SendAworkAlert(false, COLOR_ADMIN, "AdmCmd: %s, %s kiþisini %s (%s) oluþumuna aldý.", ReturnRoleplayName(playerid), ReturnRoleplayName(id), FactionInfo[factionid][fName], fRanks[factionid][rank-1]);

    LogYaz(playerid, "/setfaction", id, factionid, rank);

    return 1;
}
CMD:kickall(playerid, params[])
{
    new reason[80];

    if(sscanf(params, "s[80]", reason))return
        KullanimMesajiC(playerid, "/kickall [sebep]");

    if(strlen(reason) < 0 || strlen(reason) > 80)return
        SunucuMesajiC(playerid, "Maksimum 80 karakter kullan.");

    SendAdminAlert(false, COLOR_ADMIN, "AdmCmd: %s herkesi oyundan çýkarttý. Sebep: %s", ReturnRoleplayName(playerid), reason);

    foreach(new i : Player) if(PlayerInfo[i][pAdmin] < GAMEADMIN3)
        KickPlayer(i, ReturnRoleplayName(playerid), reason);
    return 1;
}
CMD:kick(playerid, params[])
{
    new id, reason[80];

    if(sscanf(params, "us[80]", id, reason))return
        KullanimMesajiC(playerid, "/kick [id/isim] [sebep]");

    if(PlayerInfo[id][pAdmin] >= PlayerInfo[playerid][pAdmin]) return
        SunucuMesajiC(playerid, "Kendine eþit veya kendinden yüksek kiþileri atamazsýn.");

    if(strlen(reason) < 0 || strlen(reason) > 80)return
        SunucuMesajiC(playerid, "Sebep 80 karakterden kýsa olmalý.");

    mysql_format(ourConnection, queryx, sizeof(queryx), "INSERT INTO admin_records (target_id, admin_id, reason, created_at, type) VALUES ('%d', '%d', '%e', NOW(), 'Kick')", PlayerInfo[id][pID], PlayerInfo[playerid][pID], reason);
    mysql_tquery(ourConnection, queryx);

    if(!PlayerInfo[playerid][pGizliAdmin])
        KickPlayer(id,ReturnRoleplayName(playerid),reason);
    else
        KickPlayer(id, "Administrator", reason);
    if(!PlayerInfo[playerid][pGizliAdmin]) {
        foreach(new i: Player)
            SendFormattedMessage(i, COLOR_ADMIN, "AdmCmd: %s, %s tarafýndan sunucudan atýldý. Sebep: %s [%s]", ReturnRoleplayName(id), PlayerInfo[playerid][pUsername], reason, ReturnDate());
    } else {
        foreach(new i: Player)
            SendFormattedMessage(i, COLOR_ADMIN, "AdmCmd: %s sunucudan atýldý. Sebep: %s [%s]", ReturnRoleplayName(id), reason, ReturnDate());
    }
    return 1;
}

CMD:skick(playerid, params[])
{
    new id/*, query[256]*/, reason[80];

    if(sscanf(params, "us[80]", id, reason))return
        KullanimMesajiC(playerid, "/kick [id/isim] [sebep]");

    if(PlayerInfo[id][pAdmin] >= PlayerInfo[playerid][pAdmin]) return
        SunucuMesajiC(playerid, "Kendine eþit veya kendinden yüksek kiþileri atamazsýn.");

    if(strlen(reason) < 0 || strlen(reason) > 80)return
        SunucuMesajiC(playerid, "Sebep 80 karakterden kýsa olmalý.");

//    mysql_format(ourConnection, queryx, sizeof(queryx), "INSERT INTO admin_records (target_id, admin_id, reason, created_at, type) VALUES ('%d', '%d', '%e', NOW(), 'Kick')", PlayerInfo[id][pID], PlayerInfo[playerid][pID], reason);
//    mysql_tquery(ourConnection, queryx);

    foreach(new j : Player) if(IsPlayerConnected(j) && PlayerInfo[j][pLogged] && PlayerInfo[j][pAdmin] >= GAMEADMIN4 && PlayerInfo[j][pAdminAlert])
        SendFormattedMessage(j, COLOR_ERROR, "%s, %s tarafýndan %s sebebiyle sessizce kicklendi.", ReturnRoleplayName(id), ReturnRoleplayName(playerid), reason);

    KickPlayer(id, "Administrator", reason);

    return 1;
}

flags:truckergelir(CMD_Marvellous);
CMD:truckergelir(playerid, params[])
{
    new targetid, kgeliredit;
    if(sscanf(params, "ud", targetid, kgeliredit)) return KullanimMesajiC(playerid, "/truckergelir [id] [gelir]");

    if(!IsPlayerConnected(targetid)) return HataMesajiC(playerid, "Geçersiz ID.");
    if(kgeliredit <= 0) return HataMesajiC(playerid, "Geçersiz parametre giriþi.");

    PlayerInfo[playerid][KamyoncuGeliri] = kgeliredit;
    BasariMesaji(targetid, "Administrator tarafýndan trucker geliriniz düzenlendi. (%d)", kgeliredit);
    BasariMesaji(playerid, "%s adlý oyuncunun trucker gelirini %d yaptýnýz.", ReturnRoleplayName(targetid), kgeliredit);
    return 1;
}

flags:pdmodifiye(CMD_LSPD);
CMD:pdmodifiye(playerid, params[])
{
    if(!GetPlayerVehicleID(playerid))
        return HataMesajiC(playerid, "Herhangi bir araçta deðilsin.");

    new xvid = GetPlayerVehicleID(playerid);

    if(!Vehicle_IsOwnerLead(playerid, xvid, true))
        return HataMesajiC(playerid, "Bu araç size ait deðil.");

    new string[512] = "{FF6347}>> Sýfýrla{FFFFFF}\n{FF6347}Boyaiþi Kaldýr{FFFFFF}\n";
    new component;
    new strName[32];
    new count;

    for(new j; j < MAX_TUNING_COMPONENTS; j++)
    {
        strName = "Boþ"; component = VehicleInfo[xvid][vTuning][j];
        if(component)strmid(strName, GetComponentName(component), 0, 32);
        format(string, sizeof(string), "%sSlot %d: %s (#%d)\n", string, j, strName, component);
        count++;
    }

    if(!count && VehicleInfo[xvid][vPaintjob] == 3)
        return SunucuMesajiC(playerid, "Bu araçta herhangi bir geliþtirme bulunamadý.");

    Dialog_Show(playerid, DialogModifiyeKaldir, DIALOG_STYLE_LIST, "Modifiye kaldýr", string, "Kaldýr", "Ýptal");
    
    return 1;
}

flags:pdtamir(CMD_LSPD);
CMD:pdtamir(playerid, params[])
{
    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER && IsPlayerInRangeOfPoint(playerid, 5.0, 1817.216308, -1440.427368, 13.589466))
    {
        new vehicleid = GetPlayerVehicleID(playerid);
        
        if(!IsPlayerInAnyVehicle(playerid) || VehicleInfo[vehicleid][vFaction] == -1 || Faction_GetType(VehicleInfo[vehicleid][vFaction]) != POLICE)return
            HataMesajiC(playerid, "Bu komutu LSPD aracýnda kullanabilirsin.");

        if(VehicleInfo[vehicleid][vEngine]) return HataMesajiC(playerid, "Tamir iþlemi için motoru kapatmalýsýnýz.");
        if(GetPVarInt(playerid, "pTamir") > 0) return HataMesajiC(playerid, "Tamir iþlemi sürüyor lütfen bekleyin.");

        if(VehicleInfo[vehicleid][vRespraying])return 1;

        foreach(new p : Player) if(IsPlayerConnected(p) && GetPlayerVehicleID(p) == vehicleid)
        {
            TogglePlayerControllable(p, false);
            PlayerInfo[p][pFreezed] = 1;
        }

        SunucuMesaji(playerid, "Tamir iþlemi baþladý, 10 saniye sonra bitecek.");
        SetPVarInt(playerid, "pTamir", 1);
        DestroyDynamic3DTextLabelEx(PlayerInfo[playerid][pNameTag]);
        PlayerInfo[playerid][pNameTag] = CreateDynamic3DTextLabel("(( Kullanýcý þu anda aracýný tamir ediyor. ))", COLOR_ADMIN, 0, 0, 0.5, 30.0, playerid, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0);

        return SetTimerEx("StopRepairPD", 10000, false, "ddd", playerid);
    }
    return 1;
}
CMD:testmode(playerid, params[])
{
    new string[36];
    format(string, 36, "camera mode %d", GetPlayerCameraMode(playerid));
    SendClientMessage(playerid, -1, string);
}

CMD:mark(playerid) {
    new Float:px, Float:py, Float:pz, inter, vw;
    GetPlayerPos(playerid, px, py, pz);
    inter = GetPlayerInterior(playerid);
    vw = GetPlayerVirtualWorld(playerid);
    SetPVarFloat(playerid, "MarkX", px);
    SetPVarFloat(playerid, "MarkY", py);
    SetPVarFloat(playerid, "MarkZ", pz);
    SetPVarInt(playerid, "MarkInt", inter);
    SetPVarInt(playerid, "MarkVW", vw);
    SetPVarInt(playerid, "MarkBirakti", 1);
    SendClientMessageEx(playerid, COLOR_ADMIN, "Bulunduðunuz yer iþaretlendi, buraya ýþýnlanmak için /gotomark komutunu kullanýn.");
    return 1;
}

CMD:gotomark(playerid) {
    if(GetPVarInt(playerid, "MarkBirakti") == 1) {
        if(IsPlayerInAnyVehicle(playerid)) {
            new veh = GetPlayerVehicleID(playerid);
            if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
                SetVehiclePos(veh, GetPVarFloat(playerid, "MarkX"), GetPVarFloat(playerid, "MarkY"), GetPVarFloat(playerid, "MarkZ"));
                LinkVehicleToInterior(veh, GetPVarInt(playerid, "MarkInt"));
                SetVehicleVirtualWorld(veh, GetPVarInt(playerid, "MarkVW"));
                SetPlayerInterior(playerid, GetPVarInt(playerid, "MarkInt"));
                AC_SetPlayerVirtualWorld(playerid, GetPVarInt(playerid, "MarkVW"));
                PutPlayerInVehicle(playerid, veh, 0);
            }
            else {
                SetVehiclePos(veh, GetPVarFloat(playerid, "MarkX"), GetPVarFloat(playerid, "MarkY"), GetPVarFloat(playerid, "MarkZ"));
                LinkVehicleToInterior(veh, GetPVarInt(playerid, "MarkInt"));
                SetVehicleVirtualWorld(veh, GetPVarInt(playerid, "MarkVW"));
                SetPlayerInterior(playerid, GetPVarInt(playerid, "MarkInt"));
                AC_SetPlayerVirtualWorld(playerid, GetPVarInt(playerid, "MarkVW"));
                PutPlayerInVehicle(playerid, veh, 1);
            }
            DeletePVar(playerid, "MarkX");
            DeletePVar(playerid, "MarkY");
            DeletePVar(playerid, "MarkZ");
            DeletePVar(playerid, "MarkInt");
            DeletePVar(playerid, "MarkVW");
            DeletePVar(playerid, "MarkBirakti");
            SendClientMessageEx(playerid, COLOR_ADMIN, "Ýþaretlediðiniz yere ýþýnlandýnýz, iþaretiniz kaldýrýldý.");
        }
        else {
            SetPlayerPos(playerid, GetPVarFloat(playerid, "MarkX"), GetPVarFloat(playerid, "MarkY"), GetPVarFloat(playerid, "MarkZ"));
            SetPlayerInterior(playerid, GetPVarInt(playerid, "MarkInt"));
            AC_SetPlayerVirtualWorld(playerid, GetPVarInt(playerid, "MarkVW"));
            DeletePVar(playerid, "MarkX");
            DeletePVar(playerid, "MarkY");
            DeletePVar(playerid, "MarkZ");
            DeletePVar(playerid, "MarkInt");
            DeletePVar(playerid, "MarkVW");
            DeletePVar(playerid, "MarkBirakti");
            SendClientMessageEx(playerid, COLOR_ADMIN, "Ýþaretlediðiniz yere ýþýnlandýnýz, iþaretiniz kaldýrýldý.");
        }
    } else return HataMesajiC(playerid, "Bu komutu kullanmak için önce bir yer iþaretlemelisiniz.");
    return 1;
}

CMD:anamechange(playerid, params[])
{
    new id;
    if(sscanf(params, "u", id)) return KullanimMesajiC(playerid, "/anamechange [id/isim]");
    if(!IsPlayerConnected(id)) return HataMesajiC(playerid, "Oyuncu oyunda deðil.");
    if(!PlayerInfo[id][pLogged]) return HataMesajiC(playerid, "Oyuncu giriþ yapmamýþ.");
    Dialog_Show(id, DialogBelesNameChange, DIALOG_STYLE_INPUT, "Ýsim Deðiþikliði", "Ýsim deðiþikliði hakkýný kullanýyorsun.\nYeni isminizi girin. (Örnek: Tony_Serrano)\nUYARI: Üzerinizdeki silahlarý /envanteryerlestir ile envanterinize yerleþtirmelisiniz. Aksi taktirde silahýnýz silinecektir.", "Ýleri", "Geri");
    return 1;
}

CMD:torbakaldir(playerid, params[])
{
    new id;
    if(sscanf(params, "d", id)) return KullanimMesajiC(playerid, "/torbakaldir [id]");
    if(TorbaInfo[id][toExists] == 0) return HataMesajiC(playerid, "Belirttiðiniz ID'de torba yok.");
    TorbaReset(id);
    new string[50];
    format(string, sizeof(string), "%d ID'li torbayý kaldýrdýnýz.", id);
    SendClientMessageEx(playerid, COLOR_ADMIN, string);
    SendAworkAlert(false, COLOR_ADMIN, "AdmCmd: %s isimli yönetici %d ID'li torbayý kaldýrdý.", ReturnRoleplayName(playerid), id);
    return 1;
}

CMD:torbalarikaldir(playerid, params[])
{
    new sayi = TumTorbalariSil();
    new string[50];
    format(string, sizeof(string), "%d adet ceset torbasýný kaldýrdýnýz.", sayi);
    SendClientMessageEx(playerid, COLOR_ADMIN, string);
    SendAworkAlert(false, COLOR_ADMIN, "AdmCmd: %s isimli yönetici tüm ceset torbalarýný kaldýrdý.", ReturnRoleplayName(playerid));
    return 1;
}

CMD:talepkontrol(playerid) {
    new Cache:veri = mysql_query(ourConnection, "SELECT username, sorupuan FROM accounts WHERE admin_level > 0", true);
    new rows, adminUser[MAX_PLAYER_NAME], adminPuan, adminPuanString[2048];
    cache_get_row_count(rows);
    if(!rows) return HataMesajiC(playerid, "Veri bulunamadý.");
    for(new i; i < rows; i++) {
        cache_get_value_int(i, "sorupuan", adminPuan);
        cache_get_value(i, "username", adminUser, MAX_PLAYER_NAME);
        format(adminPuanString, sizeof adminPuanString, "%s%s\t%d\n", adminPuanString, adminUser, adminPuan);
    }
    cache_delete(veri);
    Dialog_Show(playerid, DialogAdminPuanKontrol, DIALOG_STYLE_TABLIST_HEADERS, "Admin Puan Skor Tablosu", "Admin Adý\tAdmin Puaný\n%s", "Tamam", "", adminPuanString);
    return 1;
}

CMD:agizliol(playerid, params[])
{
    if(PlayerInfo[playerid][pGizliAdmin])
        SendClientMessageEx(playerid, COLOR_ADMIN, "Artýk yönetici listesinde görüneceksiniz.");
    else
        SendClientMessageEx(playerid, COLOR_ADMIN, "Artýk yönetici listesinde görünmeyeceksiniz.");
    PlayerInfo[playerid][pGizliAdmin] = !PlayerInfo[playerid][pGizliAdmin];
    PlayerInfo[playerid][pAdminAlert] = !PlayerInfo[playerid][pAdminAlert];
    return 1;
}

CMD:cesetkaldir(playerid, params[])
{
    new id;
    if(sscanf(params, "d", id)) return KullanimMesajiC(playerid, "/cesetkaldir [id]");
    if(CesetInfo[id][cExists] == 0) return HataMesajiC(playerid, "Belirttiðiniz ID'de ceset yok.");
    CesetSil(id);
    new string[50];
    format(string, sizeof(string), "%d ID'li cesedi kaldýrdýnýz.", id);
    SendClientMessageEx(playerid, COLOR_ADMIN, string);
    SendAworkAlert(false, COLOR_ADMIN, "AdmCmd: %s isimli yönetici %d ID'li cesedi kaldýrdý.", ReturnRoleplayName(playerid), id);
    return 1;
}

CMD:adeprembaslat(playerid)
{
    SendClientMessageEx(playerid, COLOR_ADMIN, "Deprem eventi baþlatýldý.");
    SendRconCommand("loadfs deprem");
    return 1;
}

CMD:cesetlerikaldir(playerid)
{
    TumCesetleriSil();
    SendAworkAlert(false, COLOR_ADMIN, "AdmCmd: %s isimli yönetici tüm cesetleri kaldýrdý.", ReturnRoleplayName(playerid));
    return 1;
}

CMD:psound(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 10) return 1;
    new id;
    if(sscanf(params, "d", id)) return KullanimMesajiC(playerid, "/psound [soundid]");

    PlayerPlaySound(playerid, id, 0.0, 0.0, 0.0);
    return 1;
}

flags:kriztedavi(CMD_LSFD);
flags:ilac(CMD_USER);

CMD:kriztedavi(playerid, params[])
{
    new targetid;
    if(sscanf(params, "k<m>", targetid)) return KullanimMesajiC(playerid, "/kriztedavi [oyuncu id]");
    if(!IsPlayerConnected(targetid) || targetid == playerid)return HataMesajiC(playerid, "Geçersiz ID.");
    if(!PlayerInfo[targetid][pDrugCrisis]) return HataMesajiC(playerid, "Kullanýcý yoksunluk krizinde deðil.");
    if(!ProxDetectorS(5.0, playerid, targetid)) return SunucuMesajiC(playerid, "Bu oyuncuya yakýn deðilsin.");

    PlayerInfo[targetid][pDrugCrisis] = 0; // Kriz
    PlayerInfo[targetid][pDrugRemainingTime] = random(6) + 1; // Krize kalan sure
    PlayerInfo[targetid][pDrugRunJumpBlock] = false; // engel
    PlayerInfo[targetid][pDrugUnconscious] = false; // baygin
    PlayerInfo[targetid][pDrugVar] = false;
    SetPlayerDrunkLevel(targetid, 0);
    SetPlayerWeather(targetid, SunucuBilgi[CurrentWeather]);
    SetPlayerTime(targetid, SunucuBilgi[CurrentHour], 0);
    DestroyDynamic3DTextLabelEx(PlayerInfo[targetid][pNameTag]);

    LogYaz(playerid, "/kriztedavi", targetid);

    BasariMesaji(targetid, "%s tarafýndan yoksunluk krizinize tedavi iþlemi uygulandý.", ReturnRoleplayName(playerid));
    SendFactionMessageTR(1, "(( %s adlý personel %s adlý vatandaþa kriz tedavisi uyguladý. ))", ReturnRoleplayName(playerid), ReturnRoleplayName(targetid));
    return 1;
}

CMD:havafix(playerid, params[])return
    SetPlayerWeather(playerid, SunucuBilgi[CurrentWeather]);

CMD:bagimlilikdurum(playerid, params[])
{
    if(!PlayerInfo[playerid][pAdminDuty])return 1;
    
    new targetid;//, ilacmiktar;
    if(sscanf(params, "k<m>", targetid)) return KullanimMesajiC(playerid, "/bagimlilikdurum [oyuncu id]");
    if(!IsPlayerConnected(targetid) || targetid == playerid)return HataMesajiC(playerid, "Geçersiz ID.");
    if(!ProxDetectorS(5.0, playerid, targetid)) return SunucuMesajiC(playerid, "Bu oyuncuya yakýn deðilsin.");
    if(!PlayerInfo[targetid][pDrugster]) return HataMesajiC(playerid, "Bu kullanýcý baðýmlý deðil.");

    BasariMesaji(playerid, "%s adlý kullanýcýnýn baðýmlýlýk seviyesi: %d", ReturnRoleplayName(targetid), PlayerInfo[targetid][pDrugster]);
    return 1;
}

CMD:ilac(playerid, params[])
{
    if(Inventory_HasItem(playerid, "Suboxone", ITEM_INGREDIENT) == -1) return SunucuMesajiC(playerid, "Ýlaca sahip deðilsin.");
    if(PlayerInfo[playerid][BagimlilikTedavi] > 0) return HataMesajiC(playerid, "Bu iþlemi þu anda yapamazsýn, bir süre beklemen gerekiyor.");

    PlayerInfo[playerid][BagimlilikTedavi] = 2;
    Inventory_DecraseAmount(playerid, Inventory_HasItem(playerid, "Suboxone", ITEM_INGREDIENT));
    PlayerInfo[playerid][pDrugster] -=25;
    if(PlayerInfo[playerid][pDrugster] < 1) PlayerInfo[playerid][pDrugster] = 0;
    PlayerInfo[playerid][pDrugCrisis] = 0; // Kriz
    PlayerInfo[playerid][pDrugRemainingTime] = 6; // Krize kalan sure
    PlayerInfo[playerid][pDrugRunJumpBlock] = false; // engel
    PlayerInfo[playerid][pDrugUnconscious] = false; // baygin
    PlayerInfo[playerid][pDrugVar] = false;
    SetPlayerDrunkLevel(playerid, 0);
    SetPlayerWeather(playerid, SunucuBilgi[CurrentWeather]);
    SetPlayerTime(playerid, SunucuBilgi[CurrentHour], 0);
    DestroyDynamic3DTextLabelEx(PlayerInfo[playerid][pNameTag]);

    BasariMesaji(playerid, "Suboxone adlý ilacý baþarýyla kullandýnýz.");
    return 1;
}

flags:aihbar(CMD_GAME1);
CMD:aihbar(playerid, params[]) {
    if(GetPVarInt(playerid, "YoneticiAramasi") == 0) {
        SetPVarInt(playerid, "YoneticiAramasi", 1);
        SunucuMesajiC(playerid, "Yönetici olarak 911 aramasýný aktifleþtirdiniz, þimdi 911 ararsanýz isminiz ve numaranýz görünmeyecek.");
        SunucuMesajiC(playerid, "Ýlk 911 aramanýzdan sonra yönetici olarak 911 aramanýz kapatýlacak ve 911 aramalarýnýzda isim ve numara görünecektir.");
    }
    else {
        DeletePVar(playerid, "YoneticiAramasi");
        SunucuMesajiC(playerid, "Yönetici olarak 911 aramasýný kapattýnýz, þimdi 911 ararsanýz isminiz ve numaranýz görünecek.");
    }
    return 1;
}

flags:vergifix(CMD_GAME1);
CMD:vergifix(playerid, params[])
{
    new vid;
    if(IsPlayerInAnyVehicle(playerid)) vid = GetPlayerVehicleID(playerid);

    if(!vid && sscanf(params, "d",vid))return
        KullanimMesajiC(playerid, "/vergifix [araç id]");

    if(!IsValidVehicle(vid))return
        SunucuMesajiC(playerid, "Varolmayan araç.");

    VehicleInfo[vid][vVergi] = 0;
    return BasariMesaji(playerid, "%d nolu arabanýn vergi deðerlerini sýfýrladýnýz.", vid);
}

flags:drugfix(CMD_GAME1);
CMD:drugfix(playerid, params[])
{
    new targetid;
    new id;
    if(sscanf(params, "k<m>", targetid)) return KullanimMesajiC(playerid, "/drugfix [oyuncu id]");

    if(!IsPlayerConnected(id) || !PlayerInfo[id][pLogged])return
        HataMesajiC(playerid, "Geçersiz ID.");

    for (new i; i < 12; i++)
    {
        PlayerInfo[playerid][pDrugAddiction][i] = 0;
        PlayerInfo[playerid][pDrugEffects][i] = 0;
    }
    PlayerInfo[targetid][pDrugster] = 0; // Bagimlilik
    PlayerInfo[targetid][pDrugCrisis] = 0; // Kriz
    PlayerInfo[targetid][pDrugRemainingTime] = -1; // Krize kalan sure
    PlayerInfo[targetid][pDrugRunJumpBlock] = false; // engel
    PlayerInfo[targetid][pDrugUnconscious] = false; // baygin
    PlayerInfo[targetid][pDrugVar] = false;
    PlayerInfo[targetid][BagimlilikTedavi] = 0;
    SetPlayerDrunkLevel(targetid, 0);
    SetPlayerWeather(targetid, SunucuBilgi[CurrentWeather]);
    SetPlayerTime(targetid, SunucuBilgi[CurrentHour], 0);

    new Float:x, Float:y, Float:z;
    GetPlayerPos(targetid, x, y, z);
    SetPlayerPos(targetid, x, y, z + 1);

    PlayerInfo[targetid][pFreezed] = 0;
    TogglePlayerControllable(targetid, true);
    DestroyDynamic3DTextLabelEx(PlayerInfo[targetid][pNameTag]);

    if(targetid != playerid) BasariMesaji(playerid, "%s adlý oyuncunun uyuþturucu baðýmlýlýðýný, krizini vs. kaldýrdýn.", ReturnRoleplayName(targetid));
    BasariMesaji(targetid, "Administrator tarafýndan karakteriniz üzerindeki etkiler silindi.");
    return 1;
}

flags:krizfix(CMD_GAME1);
CMD:krizfix(playerid, params[])
{
    new targetid;
    new id;
    if(sscanf(params, "k<m>", targetid)) return KullanimMesajiC(playerid, "/drugfix [oyuncu id]");

    if(!IsPlayerConnected(id) || !PlayerInfo[id][pLogged])return
        HataMesajiC(playerid, "Geçersiz ID.");

    for (new i; i < 12; i++)
    {
        PlayerInfo[targetid][pDrugAddiction][i] = 0;
        PlayerInfo[targetid][pDrugEffects][i] = 0;
    }
    PlayerInfo[targetid][pDrugCrisis] = 0; // Kriz
    PlayerInfo[targetid][pDrugRemainingTime] = 6; // Krize kalan sure
    PlayerInfo[targetid][pDrugRunJumpBlock] = false; // engel
    PlayerInfo[targetid][pDrugUnconscious] = false; // baygin
    PlayerInfo[targetid][pDrugVar] = false;
    PlayerInfo[targetid][BagimlilikTedavi] = 0;
    SetPlayerDrunkLevel(targetid, 0);
    SetPlayerWeather(targetid, SunucuBilgi[CurrentWeather]);
    SetPlayerTime(targetid, SunucuBilgi[CurrentHour], 0);

    new Float:x, Float:y, Float:z;
    GetPlayerPos(targetid, x, y, z);
    SetPlayerPos(targetid, x, y, z + 1);

    PlayerInfo[targetid][pFreezed] = 0;
    TogglePlayerControllable(targetid, true);
    DestroyDynamic3DTextLabelEx(PlayerInfo[targetid][pNameTag]);

    if(targetid != playerid) BasariMesaji(playerid, "%s adlý oyuncunun krizini kaldýrdýn.", ReturnRoleplayName(targetid));
    BasariMesaji(targetid, "Bir yetkili krizini iptal etti.");
    return 1;
}

CMD:akm(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 1) return 0;
    new id;
    if(sscanf(params, "d", id)) return KullanimMesajiC(playerid, "/akm [kmh]");
    new vehicleid = GetPlayerVehicleID(playerid);

    if(!vehicleid) return HataMesajiC(playerid, "Araçta deðilsiniz.");
    VehicleInfo[vehicleid][vKMGosteren] = id;
    SaveVehicleElements(vehicleid);
    SunucuMesaji(playerid, "%d nolu aracýn km/h deðerini %d olarak deðiþtirdin.", vehicleid, id);
    return 1;
}

CMD:apaintjob(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 1) return 0;
    new id;
    if(sscanf(params, "d", id)) return KullanimMesajiC(playerid, "/apaintjob [0,1,2 - 3: Siler]");
    new vehicleid = GetPlayerVehicleID(playerid);

    if(!vehicleid) return HataMesajiC(playerid, "Araçta deðilsiniz.");
    VehicleInfo[vehicleid][vFirstColor] = 1;
    VehicleInfo[vehicleid][vSecondColor] = 1;
    ChangeVehiclePaintjobEx(vehicleid, id);
    VehicleInfo[vehicleid][vPaintjob] = id;
    SunucuMesaji(playerid, "%d nolu aracýn boya iþini deðiþtirdin.", vehicleid);
    return 1;
}

CMD:serverlogs(playerid, params[])return Dialog_Show(playerid, DialogLogs, DIALOG_STYLE_INPUT, "Sunucu Loglarý", "Log arama paneline hoþgeldin. \n\nisim_soyisim | Loglanan Komut (genel bir arama için boþ býrakýn):", "Ara", "Ýptal");
CMD:userlogs(playerid, params[])
{
    if(IsNumeric(params) || isnull(params) || strlen(params) > 24)return
        KullanimMesajiC(playerid, "/userlogs [isim_soyisim]");

    // new query[256];

    mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT admin_records.*, characters.id AS id FROM characters JOIN admin_records ON characters.id = admin_records.target_id OR characters.id = admin_records.admin_id WHERE char_name = '%e'", params);
    mysql_tquery(ourConnection, queryx, "OnAdminRecordsSearch", "d", playerid);

    return 1;
}
CMD:ajail(playerid, params[])
{
    new id,
        time; //query[256],
    new reason[80];

    if(sscanf(params, "uds[80]", id, time, reason))return
        KullanimMesajiC(playerid, "/ajail [id/isim] [dakika] [sebep]");

    if(!IsPlayerConnected(id) || !PlayerInfo[id][pLogged])return
        HataMesajiC(playerid, "Geçersiz ID.");

    if(PlayerInfo[playerid][pAdmin] != LEVEL20 && PlayerInfo[id][pAdmin] >= LEVEL20)
        return HataMesajiC(playerid, "Lider yöneticileri hapse atamazsýn.");

    if(time < 1)return
        SunucuMesajiC(playerid, "Geçersiz deðer. (1 - sýnýrsýz)");

    if(strlen(reason) < 0 || strlen(reason) > 80)return
        SunucuMesajiC(playerid, "Sebep 80 karakterden kýsa olmalý.");
        
    if(time > 300)
    {
        new warnekle[130];
        format(warnekle, 130, "%d %s", id, reason);
        pc_cmd_warn(playerid, warnekle);
        if(!PlayerInfo[playerid][pAdminDuty]) SunucuMesaji(playerid, "Jail gönderdiðiniz karaktere 1 adet warn iþlendi.");
    }

    SetPlayerFacingAngle(id, 0);

    PlayerTextDrawShow(id, PlayerInfo[id][pTextdraws][0]);

    SetCameraBehindPlayer(id);

    ClearAnimations(id);
    Faction_OffDuty(id);

    PlayerInfo[id][pJailTime] = time * 60;
    PlayerInfo[id][pJailC] = 0;
    SetPlayerToJailPos(id);
    
    if(PlayerInfo[id][pFaction] != -1 && PlayerInfo[id][pRank] < 4)
    {
        new factionID = PlayerInfo[id][pFaction];
        BasariMesaji(playerid, "%s adlý kullanýcý %s oluþumunun %s (%d) rütbesinde bulunuyor, FM'e bildirin.", ReturnRoleplayName(id), FactionInfo[factionID][fName], fRanks[factionID][PlayerInfo[playerid][pRank] - 1], PlayerInfo[playerid][pRank]);
    }
    
    if(!PlayerInfo[playerid][pGizliAdmin])
            BasariMesaji(id, "%s adlý yönetici seni %d dakika hapse attý. Sebep: %s - %s", ReturnRoleplayName(playerid), time, reason, ReturnDate());
        else
            BasariMesaji(id, "Administrator seni %d dakika hapse attý. Sebep: %s - %s", time, reason, ReturnDate());

    mysql_format(ourConnection, queryx, sizeof(queryx), "INSERT INTO admin_records (target_id, admin_id, reason, created_at, type) VALUES ('%d', '%d', '%e', NOW(), 'Jail (%d)')", PlayerInfo[id][pID], PlayerInfo[playerid][pID], reason, time);
    mysql_tquery(ourConnection, queryx);

    if(!PlayerInfo[playerid][pGizliAdmin]) {
        foreach(new i: Player)
            SendFormattedMessage(i, COLOR_ADMIN, "AdmCmd: %s, %s tarafýndan hapse atýldý. Süre: %d dakika - Sebep: %s [%s]", ReturnRoleplayName(id), PlayerInfo[playerid][pUsername], time, reason, ReturnDate());
    } else {
        foreach(new i: Player)
            SendFormattedMessage(i, COLOR_ADMIN, "AdmCmd: %s hapse atýldý. Süre: %d dakika - Sebep: %s [%s]", ReturnRoleplayName(id), time, reason, ReturnDate());
    }
    LogYaz(playerid, "/ajail", id, time * 60);

    return 1;
}

CMD:envantercheck(playerid, params[])
{
    new id;

    if(sscanf(params, "u", id)) return
        KullanimMesajiC(playerid, "/envantercheck [id/isim]");

    if(!IsPlayerConnected(id) || !PlayerInfo[id][pLogged])return
        HataMesajiC(playerid, "Geçersiz ID.");

    if(PlayerInfo[playerid][pAdmin] != LEVEL20 && PlayerInfo[id][pAdmin] >= LEVEL20)
        return HataMesajiC(playerid, "Lider yöneticileri kontrol edemezsin.");

    new Float:playerSpeed = GetPlayerSpeed(id),
        playerStates[][100] = {"boþ", "Ayakta", "Araç Sürüyor", "Araçta Yolcu", "Araçtan Ýniyor", "Sürücü Koltuðuna Biniyor", "Yolcu Koltuðuna Biniyor", "Karakter seçiyor", "Bilinmiyor", "Giriþ yapýyor", "Giriþ yapýyor"},
        Float:playerHealth,
        Float:playerArmour,
        Float:playerPos[4],
        Float:playerVelocities[3],
        playerIP[16],
        playerWeapon = AC_GetPlayerWeapon(id),
        playerAmmo = AC_GetPlayerAmmo(id),
        animIndex = GetPlayerAnimationIndex(id),
        animLib[32] = "Boþ", animName[32] = "Boþ",
        location[MAX_ZONE_NAME];

    AC_GetPlayerHealth(id, playerHealth);
    AC_GetPlayerArmour(id, playerArmour);
    GetPlayerPos(id, playerPos[0], playerPos[1], playerPos[2]);
    GetPlayerFacingAngle(id, playerPos[3]);
    GetPlayerVelocity(id, playerVelocities[0], playerVelocities[1], playerVelocities[2]);
    GetPlayerIp(id, playerIP, 16);
    GetCoords2DZone(playerPos[0], playerPos[1], location, MAX_ZONE_NAME);

    if(animIndex != 0)
        GetAnimationName(animIndex, animLib, 32, animName, 32);

    if(playerSpeed < 1)
    {
        BasariMesaji(playerid, "%s (%s) [%d] - IP: %s - Durum: %s - Bölge: %s", ReturnRoleplayName(id), PlayerInfo[id][pUsername], id, playerIP, playerStates[GetPlayerState(id)], location);
    }
    else BasariMesaji(playerid, "%s (%s) [%d] - IP: %s - Durum: %s - Hýz: %f KMH - Bölge: %s", ReturnRoleplayName(id), PlayerInfo[id][pUsername], id, playerIP, playerStates[GetPlayerState(id)], playerSpeed, location);

    SendFormattedMessage(playerid, COLOR_YELLOW, "Elindeki silah: %s - Mermi: %d", GetWeaponNameEx(playerWeapon), playerAmmo);
    SendFormattedMessage(playerid, COLOR_YELLOW, "Animasyon: %s %s %d", animLib, animName, animIndex);
    SendFormattedMessage(playerid, COLOR_ADMIN, (PlayerInfo[id][pMasked]) ? ("Maske: Takýlý (%s)") : ("Maske: Takýlý deðil"), PlayerInfo[id][pMaskName]);
    SendFormattedMessage(playerid, COLOR_ADMIN, (PlayerInfo[id][pFactionDuty]) ? ("Faction duty aktif.") : ("Faction duty aktif deðil."));

    for(new j; j < 12; j++)
    {
        if(PlayerInfo[id][pDrugEffects][j])
            SendFormattedMessage(playerid, COLOR_YELLOW, "%s etkisi %d dakika içerisinde son bulacak.", Drug_GetName(j), PlayerInfo[id][pDrugEffects][j]);
    }

    for(new x; x < MAX_INVENTORY_ITEMS; x++)
    {
        if(!PlayerInfo[id][pInvList][x])continue;

        SendFormattedMessage(playerid, COLOR_YELLOW, "Slot %d: %s", x + 1, Inventory_ReturnString(id, ENTITY_TYPE_PLAYER, x));
    }

    new weapons[12], ammo[12];

    for(new a; a < 12; a++)
    {
        GetPlayerWeaponData(id, a, weapons[a], ammo[a]);

        if(!weapons[a] || !ammo[a])continue;

        if(AC_PlayerHasWeapon(id, weapons[a]) <= 0)
            SendFormattedMessage(playerid, COLOR_YELLOW, "%s (mermi: %d)", GetWeaponNameEx(weapons[a]), ammo[a]);
        else
            SendFormattedMessage(playerid, COLOR_YELLOW, "%s (mermi: %d)", GetWeaponNameEx(weapons[a]), ammo[a]);
    }

    return 1;
}

flags:atip(CMD_SUPPORTER);
CMD:atip(playerid, params[])
{
    new id;

    if(sscanf(params, "u", id)) return
        KullanimMesajiC(playerid, "/atip [id/isim]");

    if(!IsPlayerConnected(id) || !PlayerInfo[id][pLogged] || PlayerInfo[id][pAFKTime] < 10 || GetPlayerVirtualWorld(id) != 0)return
        HataMesajiC(playerid, "Geçersiz ID ya da belirtilen oyuncu AFK deðil.");

    PlayerInfo[id][pAFKMode] = true;
    AC_SetPlayerVirtualWorld(id, 1);
    return 1;
}

CMD:check(playerid, params[])
{
    new id;

    if(sscanf(params, "u", id)) return
        KullanimMesajiC(playerid, "/check [id/isim]");

    if(!IsPlayerConnected(id) || !PlayerInfo[id][pLogged])return
        HataMesajiC(playerid, "Geçersiz ID.");

    if(PlayerInfo[playerid][pAdmin] < LEVEL20 && PlayerInfo[id][pAdmin] >= LEVEL20)
        return HataMesajiC(playerid, "Lider yöneticileri kontrol edemezsin.");

    Player_ShowStats(id, playerid);
    
    SendFormattedMessage(playerid, COLOR_GREEN, "_________________[%s - Donate Haklarý]_________________", ReturnRoleplayName(id));
    SendFormattedMessage(playerid, COLOR_WHITE, "Ýsim Haklarý: %d | Numara Haklarý: %d | Plaka Haklarý: %d | Double Payday: %d", PlayerInfo[id][pNickChange], PlayerInfo[id][pNumberChange], PlayerInfo[id][pPlateChange], PlayerInfo[id][DoublePayday]);

    if(PlayerInfo[id][pAFKTime] > 5)
        SunucuMesaji(playerid, "Bu oyuncu %d dakika (%d saniye) itibariyle AFK durumdadýr.", PlayerInfo[id][pAFKTime]/60, PlayerInfo[id][pAFKTime]);
    return 1;
}

CMD:mobilyayenile(playerid, params[])
{
    if(PlayerInfo[playerid][pEditingMode])return
        SunucuMesajiC(playerid, "Düzenleme yaparken bunu yapamazsýn.");

    new buildingid = GetPlayerBuilding(playerid, true);
    new houseid = GetPlayerHouse(playerid, true);

    if(houseid != -1 || buildingid != -1)
    {
        if(houseid != -1 && GetPlayerMenuHouse(playerid, true) != houseid)return 1;
        if(buildingid != -1 && GetPlayerMenuBiz(playerid, true) != buildingid)return 1;

        new VW = GetPlayerVirtualWorld(playerid);

        mysql_format(ourConnection, queryx, sizeof(queryx), "DELETE FROM loaded_furnitures WHERE world = '%d'", VW);
        mysql_tquery(ourConnection, queryx);

        SunucuMesajiC(playerid, "Mobilyalarý görmek için dýþarý çýkýp tekrar girin.");
        LogYaz(playerid, "/mobilyayenile", -1, VW);
    }

    return 1;
}

CMD:rtc(playerid, params[])
{
    new vehicleid;
    sscanf(params, "D(-1)",vehicleid);

    if(IsPlayerInAnyVehicle(playerid)) {
        if(isnull(params)) {
            vehicleid = GetPlayerVehicleID(playerid);
            if(VehicleInfo[vehicleid][vIAKS]) return HataMesajiC(playerid, "Sistemsel araç kiralamaya baðlý araçlar gizlenemez.");
            if(Commodities_GetSlotCount(vehicleid) > 0) return HataMesajiC(playerid, "Bu araçta koli bulunuyor, despawn edemezsiniz.");
            if(VehicleInfo[vehicleid][vFaction] != 65535 || VehicleInfo[vehicleid][vJob] != -1) return HataMesajiC(playerid, "Bu araç kiþisel araç deðil.");
            SendFormattedMessage(playerid, COLOR_ADMIN, "%d ID'li aracý gizlediniz.", vehicleid);
            Vehicle_Despawn(vehicleid);
        } else {
            if(IsValidVehicle(strval(params))) {
                vehicleid = strval(params);
                if(VehicleInfo[vehicleid][vIAKS]) return HataMesajiC(playerid, "Sistemsel araç kiralamaya baðlý araçlar gizlenemez.");
                if(Commodities_GetSlotCount(vehicleid) > 0) return HataMesajiC(playerid, "Bu araçta koli bulunuyor, despawn edemezsiniz.");
                if(VehicleInfo[vehicleid][vFaction] != 65535 || VehicleInfo[vehicleid][vJob] != -1) return HataMesajiC(playerid, "Bu araç kiþisel araç deðil.");
                SendFormattedMessage(playerid, COLOR_ADMIN, "%d ID'li aracý gizlediniz.", vehicleid);
                Vehicle_Despawn(vehicleid);
            } else return HataMesajiC(playerid, "Varolmayan araç.");
        }
    } else {
        if(!isnull(params)) {
            if(IsValidVehicle(strval(params))) {
                vehicleid = strval(params);
                if(VehicleInfo[vehicleid][vIAKS]) return HataMesajiC(playerid, "Sistemsel araç kiralamaya baðlý araçlar gizlenemez.");
                if(Commodities_GetSlotCount(vehicleid) > 0) return HataMesajiC(playerid, "Bu araçta koli bulunuyor, despawn edemezsiniz.");
                if(VehicleInfo[vehicleid][vFaction] != 65535 || VehicleInfo[vehicleid][vJob] != -1) return HataMesajiC(playerid, "Bu araç kiþisel araç deðil.");
                SendFormattedMessage(playerid, COLOR_ADMIN, "%d ID'li aracý gizlediniz.", vehicleid);
                Vehicle_Despawn(vehicleid);
            } else return HataMesajiC(playerid, "Varolmayan araç.");
        } else return KullanimMesajiC(playerid, "/rtc [araç ID] (araçlarý gizler)");
    }
    return 1;
}

CMD:rtc2(playerid, params[])
{
    new vehicleid;
    sscanf(params, "D(-1)",vehicleid);
    if(IsPlayerInAnyVehicle(playerid)) {
        if(isnull(params)) {
            vehicleid = GetPlayerVehicleID(playerid);
            new slot = Commodities_GetSlotCount(vehicleid);
            if(slot > 0) return HataMesajiC(playerid, "Bu araçta koli bulunuyor, respawn edemezsiniz.");
            SendFormattedMessage(playerid, COLOR_ADMIN, "%d ID'li aracý re-spawnladýnýz.", vehicleid);
            Vehicle_Respawn(vehicleid);
        } else {
            if(IsValidVehicle(strval(params))) {
                vehicleid = strval(params);
                new slot2 = Commodities_GetSlotCount(vehicleid);
                if(slot2 > 0) return HataMesajiC(playerid, "Bu araçta koli bulunuyor, respawn edemezsiniz.");
                SendFormattedMessage(playerid, COLOR_ADMIN, "%d ID'li aracý re-spawnladýnýz.", vehicleid);
                Vehicle_Respawn(vehicleid);
            } else return HataMesajiC(playerid, "Varolmayan araç.");
        }
    } else {
        if(!isnull(params)) {
            if(IsValidVehicle(strval(params))) {
                vehicleid = strval(params);
                new slot3 = Commodities_GetSlotCount(vehicleid);
                if(slot3 > 0) return HataMesajiC(playerid, "Bu araçta koli bulunuyor, respawn edemezsiniz.");
                SendFormattedMessage(playerid, COLOR_ADMIN, "%d ID'li aracý re-spawnladýnýz.", vehicleid);
                Vehicle_Respawn(vehicleid);
            } else return HataMesajiC(playerid, "Varolmayan araç.");
        } else return KullanimMesajiC(playerid, "/rtc2 [araç ID] (araçlarý respawn eder)");
    }
    return 1;
}

CMD:removeitem(playerid, params[])
{
    new id, slot;

    if(sscanf(params, "ud", id, slot))return
        KullanimMesajiC(playerid, "/removeitem [id/isim] [slot]");

    if(!IsPlayerConnected(id) || !PlayerInfo[id][pLogged])return
        HataMesajiC(playerid, "Geçersiz ID.");

    if(slot < 1 || slot > MAX_INVENTORY_ITEMS)return
        HataMesajiC(playerid, "Geçersiz slot.");

    slot--;

    if(!PlayerInfo[id][pInvList][slot])return
        HataMesajiC(playerid, "Boþ slot.");

    Inventory_DecraseAmount(id, slot, PlayerInfo[id][pInvAmount][slot]);

    SendAworkAlert(false, COLOR_ADMIN, "AdmCmd: %s, %s adlý oyuncunun %d slotundaki eþyayý sildi.", ReturnRoleplayName(playerid), ReturnRoleplayName(id), slot+1);

    LogYaz(playerid, "/removeitem", id, slot);

    return 1;
}

CMD:araclisteoffline(playerid, params[])
{
    new option[MAX_PLAYER_NAME];
    if(sscanf(params, "s[MAX_PLAYER_NAME]", option)) return KullanimMesajiC(playerid, "/araclisteoffline [oyuncu ismi]");
    // new query[150];
    mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT * FROM characters WHERE char_name = '%e'", option);
    mysql_tquery(ourConnection, queryx, "OnVehicleShowListPlayer", "d", playerid);
    return 1;
}

CMD:aracliste(playerid, params[])
{
    new id;

    if(sscanf(params, "u", id))return
        KullanimMesajiC(playerid, "/aracliste [id/isim]");
    if(!PlayerInfo[id][pLogged]) return HataMesajiC(playerid, "Kullanýcý henüz giriþ yapmamýþ.");
    if(!IsPlayerConnected(id)) return HataMesajiC(playerid, "Kullanýcý çevrimiçi deðil, lütfen /araclisteoffline komutunu kullanýn.");
    Vehicle_ShowList(playerid, id);
    return 1;
}
CMD:stopalerts(playerid, params[])
{
    new id;

    if(sscanf(params, "u", id))return
            KullanimMesajiC(playerid, "/stopalerts [id/isim]");

    if(!IsPlayerConnected(id) || !PlayerInfo[id][pLogged])return
        HataMesajiC(playerid, "Geçersiz ID.");

    PlayerInfo[id][pCheatNotified] = !PlayerInfo[id][pCheatNotified];

    if(!PlayerInfo[id][pCheatNotified])return SendAworkAlert(true, COLOR_ADMIN, "AdmCmd: %s kiþisi %s kiþisinin hile uyarýlarýný durdurdu.", ReturnRoleplayName(playerid), ReturnRoleplayName(id));

    SendAworkAlert(true, COLOR_ADMIN, "AdmCmd: %s kiþisi %s kiþisinin hile uyarýlarýný durdurdu.", ReturnRoleplayName(playerid), ReturnRoleplayName(id));

    return 1;
}

CMD:sirketolustur(playerid, params[])
{
    new xsirketadi[32], xsd = 0;
    if(sscanf(params, "s[32]", xsirketadi)) return KullanimMesajiC(playerid, "/sirketolustur [isim]");

    if(!strlen(xsirketadi) || strlen(xsirketadi) > 32)return
        SunucuMesajiC(playerid, "Þirket ismini boþ ya da 32 karakterden uzun yapamazsýnýz.");

    SetPVarString(playerid, "xsirketadi", xsirketadi);
    SetPVarInt(playerid, "xsirketdurum", xsd);
    SunucuMesaji(playerid, "%s adýnda þirket oluþturdunuz. (DD: %d)", xsirketadi, xsd);
    SirketOlustur(playerid);
    return 1;
}

CMD:sirketduzenle(playerid, params[])
{
    new id;
    if(sscanf(params, "d", id)) return KullanimMesajiC(playerid, "/sirketduzenle [id] [ad/pos/durum]");

    if(!strcmp(params, "ad"))
    {
        new xstring[64], xsirketadi[64];
        if(sscanf(params, "s[64]", xsirketadi)) return KullanimMesajiC(playerid, "/sirketduzenle [id] [ad] [yeniad]");
        format(xstring, sizeof(xstring), xsirketadi, tsInfo[id][sname]);
    }
    else if(!strcmp(params, "pos"))
    {
        GetPlayerPos(playerid, tsInfo[id][sX], tsInfo[id][sY], tsInfo[id][sZ]);
    }
    else if(!strcmp(params, "durum"))
    {
        new durumdeger;
        if(sscanf(params,"d",durumdeger)) return KullanimMesajiC(playerid, "/sirketduzenle [id] [durum] [0:AÇIK - 1:KAPALI]");
        tsInfo[id][sd] = durumdeger;
    }

    SirketKaydet(id);
    return 1;
}

CMD:dolapolustur(playerid, params[])
{
    new id;
    if(sscanf(params, "d", id)) return KullanimMesajiC(playerid, "/dolapolustur [factionid]");
    
    if(Faction_GetType(id) == POLICE || Faction_GetType(id) == MEDICAL || Faction_GetType(id) == GOVERNMENT || Faction_GetType(id) == LSNN)
    {
        new dolapid = DolapOlustur(playerid, id);
        SendFormattedMessage(playerid, COLOR_ADMIN, "%d ID'li dolabý oluþturdunuz.", dolapid);
    }
    else return HataMesajiC(playerid, "Bu komutu sadece PD, FD, GOV ve LSNN üzerinde kullanabilirsiniz.");
    return 1;
}

flags:paydayoran(CMD_jamyPlus);
CMD:paydayoran(playerid, params[])
{
    new oran;
    if(sscanf(params, "d", oran)) return KullanimMesajiC(playerid, "/paydayoran [ORAN] (1: Normal)");
    if(oran < 1 || oran > 10) return HataMesajiC(playerid, "Hatalý deðer girdiniz.");
    SunucuBilgi[PaydayOrani] = oran;
    BasariMesaji(playerid, "Payday maaþ oranýný %d olarak deðiþtirdin. (Kazanç: $%d * %d = $%d)", SunucuBilgi[PaydayOrani], SunucuBilgi[Payday], SunucuBilgi[PaydayOrani], SunucuBilgi[Payday] * SunucuBilgi[PaydayOrani]);
    return 1;
}

CMD:sirketsil(playerid, params[])
{
    new id;
    if(sscanf(params, "d", id)) return KullanimMesajiC(playerid, "/sirketsil [sirketid]");
    if(tsInfo[id][sid] == -1) return HataMesajiC(playerid, "Belirttiðiniz sirket bulunamadý.");
    SirketSil(id);
    SendFormattedMessage(playerid, COLOR_ADMIN, "%d ID'li þirketi sildiniz.", id);
    return 1;
}

CMD:giveitem(playerid, params[])
{
    new id, name[32], amount, quality;

    if(sscanf(params, "udds[32]", id, amount, quality, name)) return
        KullanimMesajiC(playerid, "/giveitem [id/isim] [miktar] [deðer] [isim]");

    if(!IsPlayerConnected(id) || !PlayerInfo[id][pLogged])return
        HataMesajiC(playerid, "Geçersiz ID.");

    if(isnull(name) || strlen(name) > 32)return
        HataMesajiC(playerid, "Geçersiz obje.");

    if(amount < 1)return
        SunucuMesajiC(playerid, "Geçersiz deðer.");

    if(Inventory_FreeID(id) == -1)return
        SunucuMesajiC(playerid, "Oyuncunun envanteri dolu.");

    Inventory_AddItem(id, Inventory_FreeID(id), name, amount, quality);

    LogYaz(playerid, "/giveitem", id, Inventory_ListID(name), amount);

    SendAdminAlert(false, COLOR_ADMIN, "AdmCmd: %s %s kiþisine %s (%d adet) verdi.", ReturnRoleplayName(playerid), ReturnRoleplayName(id), name, amount);
    BasariMesaji(id, "%s adlý yönetici %s(%d) eþyasýný sana verdi.", ReturnRoleplayName(playerid), name, amount);

    return 1;
}

CMD:kelepcekir(playerid) {
    if(PlayerInfo[playerid][pCuffed] != 1) return HataMesajiC(playerid, "Bu komutu kullanmak için kelepçeli olmalýsýn.");
    if(PlayerInfo[playerid][pCash] < 3000) return HataMesajiC(playerid, "Cebinde paran yoksa bunu niye deniyorsun?");
    new diyalog[128];
    if(IsPlayerInRangeOfPoint(playerid, 5.0, 2260.4148, 63.1703, 26.4844)) {
        foreach(new i: Player) {
            if(!PlayerInfo[i][pLogged])continue;
            if(!IsPlayerInRangeOfPoint(i, 10.0, 2260.4148, 63.1703, 26.4844))continue;
            format(diyalog, sizeof diyalog, "Juan Summers: Kelepçeni $3000 karþýlýðýnda hallederim, ne diyorsun?");
            SendClientMessageEx(i, COLOR_FADE1, diyalog);
        }
        Dialog_Show(playerid, DialogKelepceKir, DIALOG_STYLE_MSGBOX, "Kelepçe Kýrma Menüsü", "Kelepçeni $3000 karþýlýðýnda kýrdýracaksýn.\nDevam etmek istiyor musun?", "Evet", "Hayýr");
    } else if(IsPlayerInRangeOfPoint(playerid, 5.0, 1248.9823, 365.7434, 19.5547)) {
        foreach(new i: Player) {
            if(!PlayerInfo[i][pLogged])continue;
            if(!IsPlayerInRangeOfPoint(i, 10.0, 1248.9823, 365.7434, 19.5547))continue;
            format(diyalog, sizeof diyalog, "Liam Sanchez: Kelepçeni $3000 karþýlýðýnda hallederim, ne diyorsun?");
            SendClientMessageEx(i, COLOR_FADE1, diyalog);
        }
        Dialog_Show(playerid, DialogKelepceKir, DIALOG_STYLE_MSGBOX, "Kelepçe Kýrma Menüsü", "Kelepçeni $3000 karþýlýðýnda kýrdýracaksýn.\nDevam etmek istiyor musun?", "Evet", "Hayýr");
    } else return HataMesajiC(playerid, "Kelepçeni kýrabileceðin bir yerde deðilsin.");
    return 1;
}

CMD:aracparcala(playerid)
{
    if(GetPVarInt(playerid, "AracParcaliyor") == 1) return HataMesajiC(playerid, "Zaten araç parçalýyorsunuz, iptal etmek için araçtan inin.");
    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return HataMesajiC(playerid, "Bu komutu kullanmak için araçta sürücü olmalýsýnýz.");
    if(!IsPlayerInAnyVehicle(playerid)) return HataMesajiC(playerid, "Bu komutu kullanmak için bir araçta olmalýsýnýz.");
    
    if(PlayerInfo[playerid][pCalinanArac] >= 1 && PlayerInfo[playerid][pPremium] <= 3) return HataMesajiC(playerid, "Bugün zaten araç çalmýþsýnýz, günde en fazla bir araç çalabilirsiniz.");
    if(PlayerInfo[playerid][pCalinanArac] >= 2 && PlayerInfo[playerid][pPremium] == 4) return HataMesajiC(playerid, "Bugün zaten araç çalmýþsýnýz, günde en fazla iki araç çalabilirsiniz.");
    if(PlayerInfo[playerid][pCalinanArac] >= 3 && PlayerInfo[playerid][pPremium] == 5) return HataMesajiC(playerid, "Bugün zaten araç çalmýþsýnýz, günde en fazla üç araç çalabilirsiniz.");

    if(PlayerInfo[playerid][pLevel] < 10) return HataMesajiC(playerid, "Bu komutu kullanmak için en az seviye 10 olmalýsýnýz.");

    new vid = GetPlayerVehicleID(playerid), diyalog[128];
    
    if(IsATruckableVehicle(vid))
        return SunucuMesaji(playerid, "Trucker araçlarýnýn parçalanmasý 31 Temmuz 2019 güncellemesiyle yasaklandý.");
        
    if(Vehicle_IsOwner(playerid, vid, true))
        return HataMesajiC(playerid, "Bu araç sana ait, Retarded RP / Bug Abuse kapsamýnda cezalandýrýlabilirsin.");

    if(Vehicle_IsOwner(playerid, vid, false))
        return HataMesajiC(playerid, "Bu aracýn anahtarý sende var, Retarded RP / Bug Abuse kapsamýnda cezalandýrýlabilirsin.");
        
    if(VehicleInfo[vid][vKiralayan] == PlayerInfo[playerid][pID] && VehicleInfo[vid][vKiralik] > 0)
        return SunucuMesaji(playerid, "Kiraladýðýn aracý parçalayamazsýn, bu durum Retarded RP kapsamýnda deðerlendirilir.");
        
    if(VehicleInfo[vid][vPrice] >= 30000)
    {
        if(IsPlayerInRangeOfPoint(playerid, 5.0, -1821.7512, -152.4367, 9.4617))
        {
            foreach(new i: Player)
            {
                if(!PlayerInfo[i][pLogged])continue;
                if(!IsPlayerInRangeOfPoint(i, 10.0, -1821.7512, -152.4367, 9.4617))continue;
                format(diyalog, sizeof diyalog, "Mitch Lopez: Bu aracý senden $%d'ye alýrým, ne diyorsun?", VehicleInfo[vid][vPrice] * 6 / 100);
                SendClientMessageEx(i, COLOR_FADE1, diyalog);
            }
            Dialog_Show(playerid, DialogChop, DIALOG_STYLE_MSGBOX, "Araç Parçalama", "%s model aracý $%d karþýlýðýnda parçalayacaksýn.\nDevam etmek istiyor musun?", "Evet", "Hayýr", GetVehicleModelName(VehicleInfo[vid][vModel]), VehicleInfo[vid][vPrice] * 6 / 100);
        }
        else if(IsPlayerInRangeOfPoint(playerid, 5.0, -1916.5311, -1663.2332, 23.1062))
        {
            foreach(new i: Player)
            {
                if(!PlayerInfo[i][pLogged])continue;
                if(!IsPlayerInRangeOfPoint(i, 10.0, -1916.5311, -1663.2332, 23.1062))continue;
                format(diyalog, sizeof diyalog, "Rhett Brown: Bu aracý senden $%d'ye alýrým, ne diyorsun?", VehicleInfo[vid][vPrice] * 6 / 100);
                SendClientMessageEx(i, COLOR_FADE1, diyalog);
            }
            Dialog_Show(playerid, DialogChop, DIALOG_STYLE_MSGBOX, "Araç Parçalama", "%s model aracý $%d karþýlýðýnda parçalayacaksýn.\nDevam etmek istiyor musun?", "Evet", "Hayýr", GetVehicleModelName(VehicleInfo[vid][vModel]), VehicleInfo[vid][vPrice] * 6 / 100);
        }
        else return HataMesajiC(playerid, "Bir chop shopa yakýn deðilsin.");
    }
    else
    {
        if(IsPlayerInRangeOfPoint(playerid, 5.0, -1821.7512, -152.4367, 9.4617))
        {
            foreach(new i: Player)
            {
                if(!PlayerInfo[i][pLogged])continue;
                if(!IsPlayerInRangeOfPoint(i, 10.0, -1821.7512, -152.4367, 9.4617))continue;
                format(diyalog, sizeof diyalog, "Mitch Lopez: Sen beni ne zannediyorsun, hurdayý mý hurdaya çýkartacaðým? Kaybol serseri.");
                SendClientMessageEx(i, COLOR_FADE1, diyalog);
            }
        }
        else if(IsPlayerInRangeOfPoint(playerid, 5.0, -1916.5311, -1663.2332, 23.1062))
        {
            foreach(new i: Player)
            {
                if(!PlayerInfo[i][pLogged])continue;
                if(!IsPlayerInRangeOfPoint(i, 10.0, -1916.5311, -1663.2332, 23.1062))continue;
                format(diyalog, sizeof diyalog, "Rhett Brown: Sen beni ne zannediyorsun, hurdayý mý hurdaya çýkartacaðým? Kaybol serseri.");
                SendClientMessageEx(i, COLOR_FADE1, diyalog);
            }
        }
        else return HataMesajiC(playerid, "Bir chop shopa yakýn deðilsin.");
    }
    return 1;
}

CMD:createfreq(playerid, params[])
{
    new channel, factionid, password[32];//, query[256];

    if(sscanf(params, "ddS[32]", channel, factionid, password))return
        KullanimMesajiC(playerid, "/createfreq [frekans] [oluþum] <credenziale(opsiyonel)>");

    if(channel < 1 || channel >= MAX_FREQUENCES || FrequenceInfo[channel][rExists])return
        SunucuMesajiC(playerid, "Frekans yok veya zaten kullanýlýyor.");

    if(factionid < 0 || factionid >= MAX_FACTIONS || !FactionInfo[factionid][fExists])return
        SunucuMesajiC(playerid, "Oluþum bulunamadý.");

    FrequenceInfo[channel][rFaction] = factionid;
    FrequenceInfo[channel][rOwner] = -1;
    format(FrequenceInfo[channel][rPassword], 32, password);
    FrequenceInfo[channel][rExists] = 1;
    //FrequenceInfo[channel][rHour] = -1;

    mysql_format(ourConnection, queryx, sizeof(queryx), "INSERT INTO frequencies (faction_id, password, channel, owner_id) VALUES ('%d', '%e', '%d', '%d')", FrequenceInfo[channel][rFaction], password, channel, FrequenceInfo[channel][rOwner]);//, FrequenceInfo[channel][rHour]);
    mysql_tquery(ourConnection, queryx);

    SendAworkAlert(false, COLOR_ADMIN, "AdmCmd: %s, %d frekansýný oluþturdu.", ReturnRoleplayName(playerid), channel);

    return 1;
}
CMD:inactivelist(playerid, params[])
{
    new limit;

    if(sscanf(params, "d", limit) || limit < 1)return
        KullanimMesajiC(playerid, "/inactivelist [limit]");

    mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT char_name, last_login FROM characters WHERE deleted = 0 AND deleted_at IS NULL AND banned = 0 AND last_login < date_sub(NOW(), INTERVAL 1 MONTH) ORDER BY last_login ASC LIMIT %d;", limit);
    mysql_tquery(ourConnection, queryx, "OnInactiveListSearch", "d", playerid);

    return 1;
}
CMD:ipconflict(playerid, params[])
{
    // new query[512];

    mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT last_ip, GROUP_CONCAT(DISTINCT username) FROM accounts GROUP BY last_ip HAVING COUNT(DISTINCT username) > 1 ORDER BY COUNT(DISTINCT username) DESC;");
    mysql_tquery(ourConnection, queryx, "OnIPConflictSearch", "d", playerid);

    return 1;
}

flags:ockban(CMD_GAME1);
CMD:ockban(playerid, params[])
{
    new username[MAX_PLAYER_NAME], reason[128];//, query[256];

    if(sscanf(params, "s[24]s[128]", username, reason))
    {
        return KullanimMesajiC(playerid, "/oban [karakter adý] [gerekçe]");
    }
    if(IsPlayerOnline(username))
    {
        return HataMesajiC(playerid, "Belirtilen oyuncu çevrimiçi, /ban komutunu deneyin.");
    }

//  LogYaz(playerid, "/oban", username);
    mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT * FROM characters WHERE char_name = '%e'", username);
    mysql_tquery(ourConnection, queryx, "OnAdminOfflineBan", "iss", playerid, username, reason);
    return 1;
}

CMD:ocheck(playerid, params[])
{
    new username[MAX_PLAYER_NAME], queryBuffer[252];
    if(sscanf(params, "s[24]", username)) return KullanimMesajiC(playerid, "/ocheck [Karakter Adý]");
    if(IsPlayerOnline(username)) return HataMesajiC(playerid, "Bu oyuncu sunucuya giriþ saðlamýþ, diðer komutu kullanýn.");
    mysql_format(ourConnection, queryBuffer, sizeof(queryBuffer), "SELECT * FROM characters WHERE char_name = '%e'", username);
    mysql_tquery(ourConnection, queryBuffer, "OnAdminOfflineCheck", "is", playerid, username);
    return 1;
}

CMD:oenvantercheck(playerid, params[])
{
    new username[MAX_PLAYER_NAME], queryBuffer[252];
    if(sscanf(params, "s[24]", username)) return KullanimMesajiC(playerid, "/oenvantercheck [Karakter Adý]");
    if(IsPlayerOnline(username)) return HataMesajiC(playerid, "Bu oyuncu sunucuya giriþ saðlamýþ, diðer komutu kullanýn.");

    mysql_format(ourConnection, queryBuffer, sizeof(queryBuffer), "SELECT * FROM characters WHERE char_name = '%e'", username);
    mysql_tquery(ourConnection, queryBuffer, "OnAdminOfflineEnvanterCheck", "is", playerid, username);
    return 1;
}

CMD:ojail(playerid, params[])
{
    new username[MAX_PLAYER_NAME], minutes, reason[128], queryBuffer[252];

    if(PlayerInfo[playerid][pAdmin] < 2)
    {
        return HataMesajiC(playerid, "Bu komutu kullanmak için yetkiniz yok.");
    }
    if(sscanf(params, "s[24]is[128]", username, minutes, reason))
    {
        return KullanimMesajiC(playerid, "/ojail [karakter adý] [dakika] [gerekçe]");
    }
    if(minutes < 1)
    {
        return HataMesajiC(playerid, "En az 1 dakika jail atabilirsiniz.");
    }
    if(IsPlayerOnline(username))
    {
        return HataMesajiC(playerid, "Bu oyuncu sunucuya giriþ saðlamýþ, diðer komutu kullanýn.");
    }

    mysql_format(ourConnection, queryBuffer, sizeof(queryBuffer), "SELECT id FROM characters WHERE char_name = '%e'", username);
    mysql_tquery(ourConnection, queryBuffer, "OnAdminOfflinePrison", "isis", playerid, username, minutes, reason);
//  LogYaz(playerid, "/ojail", username, minutes * 60);

    return 1;
}

CMD:ckban(playerid, params[])
{
    new id, reason[80];

    if(sscanf(params, "us[80]", id, reason))return
        KullanimMesajiC(playerid, "/ckban [id/isim] [sebep]");

    if(strlen(reason) < 0 || strlen(reason) > 80)return
        SunucuMesajiC(playerid, "Sebep 80 karakterden kýsa olmalý.");

    if(PlayerInfo[id][pAdmin] >= PlayerInfo[playerid][pAdmin]) return
        SunucuMesajiC(playerid, "Kendine eþit veya kendinden yüksek kiþileri yasaklayamazsýn.");


    PlayerInfo[id][pBanned] = 1;

    mysql_format(ourConnection, queryx, sizeof(queryx), "INSERT INTO admin_records (target_id, admin_id, reason, created_at, type) VALUES ('%d', '%d', '%e', NOW(), 'Ban')", PlayerInfo[id][pID], PlayerInfo[playerid][pID], reason);
    mysql_tquery(ourConnection, queryx);

    if(!PlayerInfo[playerid][pGizliAdmin])
            BasariMesaji(id, "Karakterin %s tarafýndan kalýcý olarak yasaklandý. Sebep: %s", ReturnRoleplayName(playerid),reason);
        else
            BasariMesaji(id, "Karakterin Administrator tarafýndan kalýcý olarak yasaklandý. Sebep: %s",reason);

    SetTimerEx("KickTimer", 200, false, "d", id);

    LogYaz(playerid, "/ckban", id, -1);
    if(!PlayerInfo[playerid][pGizliAdmin]) { // duzgun bu
        foreach(new i: Player)
            SendFormattedMessage(i, COLOR_ADMIN, "AdmCmd: %s tarafýndan %s adlý karakter yasaklandý. Sebep: %s [%s]", PlayerInfo[playerid][pUsername], ReturnRoleplayName(id), reason, ReturnDate());
    } else {
        foreach(new i: Player)
            SendFormattedMessage(i, COLOR_ADMIN, "AdmCmd: %s adlý karakter yasaklandý. Sebep: %s [%s]", ReturnRoleplayName(id), reason, ReturnDate());
    }
    return 1;
}

flags:ban(CMD_GAME1);
CMD:ban(playerid, params[])
{
    new id, reason[80];

    if(sscanf(params, "us[80]", id, reason))return
        KullanimMesajiC(playerid, "/ban [id/isim] [sebep]");

    if(strlen(reason) < 0 || strlen(reason) > 80)return
        SunucuMesajiC(playerid, "Sebep 80 karakterden kýsa olmalý.");

    if(PlayerInfo[id][pAdmin] >= PlayerInfo[playerid][pAdmin]) return
        SunucuMesajiC(playerid, "Kendine eþit veya kendinden yüksek kiþileri yasaklayamazsýn.");

    if(PlayerInfo[id][pPremium] > 0)
        SunucuMesaji(playerid, "Yasakladýðýn kiþinin premium seviyesi: %d", PlayerInfo[id][pPremium]);
        
    if(PlayerInfo[id][pCoyn] > 0)
        SunucuMesaji(playerid, "Yasakladýðýn kullanýcýnýn SA-Point sayýsý: %d", PlayerInfo[id][pCoyn]);

    PlayerInfo[id][pBanned] = 1;

    mysql_format(ourConnection, queryx, sizeof(queryx), "UPDATE accounts SET premium = '0', sorular = '0', testler = '0' WHERE username = '%e'", PlayerInfo[id][pUsername]);
    mysql_tquery(ourConnection, queryx);
    
    mysql_format(ourConnection, queryx, sizeof(queryx), "INSERT INTO admin_records (target_id, admin_id, reason, created_at, type) VALUES ('%d', '%d', '%e', NOW(), 'Ban')", PlayerInfo[id][pID], PlayerInfo[playerid][pID], reason);
    mysql_tquery(ourConnection, queryx);

    if(!PlayerInfo[playerid][pGizliAdmin])
            BasariMesaji(id, "Karakterin %s tarafýndan kalýcý olarak yasaklandý. Sebep: %s", ReturnRoleplayName(playerid),reason);
        else
            BasariMesaji(id, "Karakterin Administrator tarafýndan kalýcý olarak yasaklandý. Sebep: %s",reason);

    SetTimerEx("KickTimer", 200, false, "d", id);

    LogYaz(playerid, "/ban", id, -1);
    if(!PlayerInfo[playerid][pGizliAdmin]) { // duzgun bu
        foreach(new i: Player)
            SendFormattedMessage(i, COLOR_ADMIN, "AdmCmd: %s tarafýndan %s adlý karakter yasaklandý. Sebep: %s [%s]", PlayerInfo[playerid][pUsername], ReturnRoleplayName(id), reason, ReturnDate());
    } else {
        foreach(new i: Player)
            SendFormattedMessage(i, COLOR_ADMIN, "AdmCmd: %s adlý karakter yasaklandý. Sebep: %s [%s]", ReturnRoleplayName(id), reason, ReturnDate());
    }
    return 1;
}

CMD:unckban(playerid, params[])
{
    new name[MAX_PLAYER_NAME];

    if(sscanf(params, "s[24]", name))return
        KullanimMesajiC(playerid, "/unckban [isim_soyisim]");

    mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT * FROM characters WHERE char_name = '%e' AND banned = 1", name);
    mysql_tquery(ourConnection, queryx, "OnUnbanCharacterSearch", "ds", playerid, name);
    return 1;
}

CMD:tezgahid(playerid) {
    new id = -1;
    foreach(new i: Tezgahlar) {
        if(StandInfo[i][sExists]) {
            if(IsPlayerInRangeOfPoint(playerid, 3.0, StandInfo[i][sPosX], StandInfo[i][sPosY], StandInfo[i][sPosZ])) {
                id = i;
                break;
            }
        }
    }
    if(id == -1) return HataMesajiC(playerid, "Yakýnýnýzda bir tezgah yok.");
    return SunucuMesaji(playerid, "Yakýnýnýzdaki tezgahýn ID'si: %d", id);
}

CMD:tezgahgit(playerid, params[]) {
    new id;
    if(sscanf(params, "d", id)) return KullanimMesajiC(playerid, "/tezgahgit <tezgah ID>");
    if(id < 0 || id > MAX_STAND) return HataMesajiC(playerid, "Tezgah bulunamadý.");
    if(!StandInfo[id][sExists]) return HataMesajiC(playerid, "Tezgah bulunamadý.");
    SetPlayerVirtualWorld(playerid, 0);
    SetPlayerInterior(playerid, 0);
    SetPlayerPos(playerid, StandInfo[id][sPosX], StandInfo[id][sPosY], StandInfo[id][sPosZ] + 1);
    SunucuMesaji(playerid, "%d ID'li tezgaha ýþýnlandýn.", id);
    return 1;
}

CMD:tezgahsil(playerid, params[]) {
    new id;
    if(sscanf(params, "d", id)) return KullanimMesajiC(playerid, "/tezgahsil <tezgah ID>");
    if(id < 0 || id > MAX_STAND) return HataMesajiC(playerid, "Tezgah bulunamadý.");
    if(!StandInfo[id][sExists]) return HataMesajiC(playerid, "Tezgah bulunamadý.");
    if(StandInfo[id][sExists]) {
        StandInfo[id][sExists] = 0;
        StandInfo[id][sID] = -1;
        format(StandInfo[id][sKuran], MAX_PLAYER_NAME, "Yok");
        StandInfo[id][sModel] = 0;
        DestroyDynamicObjectEx(StandInfo[id][sObje]);
        StandInfo[id][sPosX] = 0.0;
        StandInfo[id][sPosY] = 0.0;
        StandInfo[id][sPosZ] = 0.0;
        StandInfo[id][sRotX] = 0.0;
        StandInfo[id][sRotY] = 0.0;
        StandInfo[id][sRotZ] = 0.0;
        StandInfo[id][sMasaModel] = 0;
        DestroyDynamicObjectEx(StandInfo[id][sMasaObje]);
        StandInfo[id][sMasaPosX] = 0.0;
        StandInfo[id][sMasaPosY] = 0.0;
        StandInfo[id][sMasaPosZ] = 0.0;
        StandInfo[id][sMasaRotX] = 0.0;
        StandInfo[id][sMasaRotY] = 0.0;
        StandInfo[id][sMasaRotZ] = 0.0;
        if(IsValidDynamic3DTextLabel(StandInfo[id][sLabel]))
            DestroyDynamic3DTextLabelEx(StandInfo[id][sLabel]);
        format(StandInfo[id][sLabelText], 128, "");
        StandInfo[id][sArabali] = false;
        for(new i; i < 3; i++) {
            StandInfo[id][sCalisan][i] = -1;
            StandInfo[id][sUrunFiyati][i] = 0;
            format(StandUrunInfo[id][i], 80, "Yok");
        }
        SunucuMesaji(playerid, "%d ID'li tezgahý sildiniz.", id);
        Iter_Remove(Tezgahlar, id);
        PlayerInfo[playerid][pActigiTezgah] = -1;
    } else return HataMesajiC(playerid, "Tezgah zaten silinmiþ.");
    return 1;
}

CMD:tezgahkuran(playerid, params[]) {
    new id, kuranIsim[MAX_PLAYER_NAME];
    if(sscanf(params, "d", id)) return KullanimMesajiC(playerid, "/tezgahkuran <tezgah ID>");
    if(id < 0 || id > MAX_STAND) return HataMesajiC(playerid, "Tezgah bulunamadý.");
    if(!StandInfo[id][sExists]) return HataMesajiC(playerid, "Tezgah bulunamadý.");
    format(kuranIsim, MAX_PLAYER_NAME, "%s", StandInfo[id][sKuran]);
    SunucuMesaji(playerid, "%d ID'li tezgahýn kurucusu: %s", id, kuranIsim);
    return 1;
}

CMD:unban(playerid, params[])
{
    new name[32];

    if(sscanf(params, "s[32]", name))return
        KullanimMesajiC(playerid, "/unban [isim]");

    // new query[256];

    mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT * FROM accounts WHERE username = '%e'", name);
    mysql_tquery(ourConnection, queryx, "OnUnbanAccountSearch", "ds", playerid, name);

    return 1;
}

flags:oban(CMD_GAME1);
CMD:oban(playerid, params[])
{
    new name[32], reason[80];

    if(sscanf(params, "s[32]s[80]", name, reason))return
        Dialog_Show(playerid, DialogOfflineBan, DIALOG_STYLE_INPUT, "Offline Ban", "Kiþinin adýný aþaðýdaki kutuya yazýn:", "Tamam", "Ýptal");

    if(strlen(reason) < 0 || strlen(reason) > 40)return
        SunucuMesajiC(playerid, "Sebep 40 karakterden kýsa olmalý.");

    mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT * FROM accounts WHERE username = '%e'", name);
    mysql_tquery(ourConnection, queryx, "BanAccountSearch", "dss", playerid, name, reason);
    return 1;
}

flags:osetadmin(CMD_jamyPlus);
CMD:osetadmin(playerid, params[])
{
    new name[32], adminlevel[10];

    if(sscanf(params, "s[32]d[10]", name, adminlevel))
        return KullanimMesajiC(playerid, "/osetadmin [hesap adý] [level]");

    format(queryx, sizeof(queryx), "UPDATE `accounts` SET `admin_level` = '%d' WHERE `username` = '%s'", adminlevel, name);
    mysql_query(ourConnection, queryx);
    SunucuMesaji(playerid, "%s adlý kullanýcýnýn admin levelini %d olarak güncelledin.", name, adminlevel);
    return 1;
}

flags:osetpremium(CMD_jamyPlus);
CMD:osetpremium(playerid, params[])
{
    new name[32], premiumlevel[10];

    if(sscanf(params, "s[32]d[10]", name, premiumlevel))
        return KullanimMesajiC(playerid, "/osetpremium [hesap adý] [level]");

    format(queryx, sizeof(queryx), "UPDATE `accounts` SET `premium` = '%d' WHERE `username` = '%s'", premiumlevel, name);
    mysql_query(ourConnection, queryx);
    SunucuMesaji(playerid, "%s adlý kullanýcýnýn premuim seviyesini %d olarak güncelledin.", name, premiumlevel);
    return 1;
}

flags:hjail(CMD_SUPPORTER3);
CMD:hjail(playerid, params[])
{
    new id,
        time; //query[256],
    new reason[80];

    if(sscanf(params, "uds[80]", id, time, reason))return
        KullanimMesajiC(playerid, "/hjail [id/isim] [dakika] [sebep]");

    if(!IsPlayerConnected(id) || !PlayerInfo[id][pLogged])return
        HataMesajiC(playerid, "Geçersiz ID.");

    if(PlayerInfo[id][pAdmin] >= LEVEL20)
        return HataMesajiC(playerid, "Lider yöneticileri hapse atamazsýn.");

    if(time < 1)return
        SunucuMesajiC(playerid, "Geçersiz deðer. (1 - 20)");

    if(time > 20)return
        SunucuMesajiC(playerid, "Geçersiz deðer.");

    if(strlen(reason) < 0 || strlen(reason) > 80)return
        SunucuMesajiC(playerid, "Sebep 80 karakterden kýsa olmalý.");

    SetPlayerFacingAngle(id, 0);

    PlayerTextDrawShow(id, PlayerInfo[id][pTextdraws][0]);

    SetCameraBehindPlayer(id);

    ClearAnimations(id);
    Faction_OffDuty(id);

    PlayerInfo[id][pJailTime] = time * 60;
    PlayerInfo[id][pJailC] = 0;
    SetPlayerToJailPos(id);

    BasariMesaji(id, "%s adlý yönetici seni %d dakika hapse attý. Sebep: %s - %s", ReturnRoleplayName(playerid), time, reason, ReturnDate());

    mysql_format(ourConnection, queryx, sizeof(queryx), "INSERT INTO admin_records (target_id, admin_id, reason, created_at, type) VALUES ('%d', '%d', '%e', NOW(), 'Jail (%d)')", PlayerInfo[id][pID], PlayerInfo[playerid][pID], reason, time);
    mysql_tquery(ourConnection, queryx);

    if(!PlayerInfo[playerid][pGizliAdmin]) {
        foreach(new i: Player)
            SendFormattedMessage(i, COLOR_ADMIN, "AdmCmd: %s, %s tarafýndan hapse atýldý. Süre: %d dakika - Sebep: %s [%s]", ReturnRoleplayName(id), PlayerInfo[playerid][pUsername], time, reason, ReturnDate());
    } else {
        foreach(new i: Player)
            SendFormattedMessage(i, COLOR_ADMIN, "HlpCmd: %s hapse atýldý. Süre: %d dakika - Sebep: %s [%s]", ReturnRoleplayName(id), time, reason, ReturnDate());
    }
    LogYaz(playerid, "/ajail", id, time * 60);

    return 1;
}

flags:hban(CMD_SUPPORTER2);
CMD:hban(playerid, params[])
{
    new id, reason[80];

    if(sscanf(params, "us[80]", id, reason))return
        KullanimMesajiC(playerid, "/hban [id/isim] [sebep]");

    if(!IsPlayerConnected(id) || !PlayerInfo[id][pLogged])return
        HataMesajiC(playerid, "Geçersiz ID.");

    if(PlayerInfo[id][pLevel] > 2) return SunucuMesajiC(playerid, "Kullanýcý seviye 2'den büyük.");

    if(PlayerInfo[id][pCoyn] > 10) return SunucuMesajiC(playerid, "Kullanýcýnýn SA-Point'i 10'dan fazla.");

    if(PlayerInfo[id][pPremium] > 0) return SunucuMesajiC(playerid, "Donator kullanýcýlarý yasaklayamazsýn.");

    if(strlen(reason) < 0 || strlen(reason) > 40)return
        SunucuMesajiC(playerid, "Sebep 40 karakterden kýsa olmalý.");

    if(PlayerInfo[id][pAdmin] > PlayerInfo[playerid][pAdmin]) return
        SunucuMesajiC(playerid, "Senden yüksek kiþilere bunu yapamazsýn.");

    mysql_format(ourConnection, queryx, sizeof(queryx), "UPDATE accounts SET banned = '1' WHERE username = '%e'", PlayerInfo[id][pUsername]);
    mysql_tquery(ourConnection, queryx);

    mysql_format(ourConnection, queryx, sizeof(queryx), "INSERT INTO admin_records (target_id, admin_id, reason, created_at, type) VALUES ('%d', '%d', '%e', NOW(), 'BanAccount')", PlayerInfo[id][pID], PlayerInfo[playerid][pID], reason);
    mysql_tquery(ourConnection, queryx);

    BasariMesaji(id, "Hesabýn %s tarafýndan yasaklandý. Sebep: %s", ReturnRoleplayName(playerid),reason);
    SetTimerEx("KickTimer", 200, false, "d", id);

    foreach(new i: Player)
        SendFormattedMessage(i, COLOR_ADMIN, "HlpCmd: %s adlý oyuncu %s tarafýndan yasaklandý. Sebep: %s [%s]", ReturnRoleplayName(id), PlayerInfo[playerid][pUsername], reason, ReturnDate());

    mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT id FROM characters WHERE account_id = '%d'", PlayerInfo[id][pAccountID]);
//    mysql_tquery(ourConnection, queryx, "OnSearchAccountBannedVehicles");

    LogYaz(playerid, "/banacc", id, -1);
    return 1;
}

flags:permaban(CMD_GAME1);
CMD:permaban(playerid, params[])
{
    new id, reason[80];

    if(sscanf(params, "us[80]", id, reason))return
        KullanimMesajiC(playerid, "/permaban [id/isim] [sebep]");

    if(!IsPlayerConnected(id) || !PlayerInfo[id][pLogged])return
        HataMesajiC(playerid, "Geçersiz ID.");

    if(strlen(reason) < 0 || strlen(reason) > 40)return
        SunucuMesajiC(playerid, "Sebep 40 karakterden kýsa olmalý.");

    if(PlayerInfo[id][pAdmin] > PlayerInfo[playerid][pAdmin]) return
        SunucuMesajiC(playerid, "Senden yüksek kiþilere bunu yapamazsýn.");

    mysql_format(ourConnection, queryx, sizeof(queryx), "UPDATE accounts SET banned = '1' WHERE username = '%e'", PlayerInfo[id][pUsername]);
    mysql_tquery(ourConnection, queryx);

    mysql_format(ourConnection, queryx, sizeof(queryx), "INSERT INTO admin_records (target_id, admin_id, reason, created_at, type) VALUES ('%d', '%d', '%e', NOW(), 'BanAccount')", PlayerInfo[id][pID], PlayerInfo[playerid][pID], reason);
    mysql_tquery(ourConnection, queryx);

    BasariMesaji(id, "Hesabýn %s tarafýndan yasaklandý. Sebep: %s", ReturnRoleplayName(playerid),reason);
    SetTimerEx("KickTimer", 200, false, "d", id);

    if(!PlayerInfo[playerid][pGizliAdmin])
    {
        foreach(new i: Player)
            SendFormattedMessage(i, COLOR_ADMIN, "AdmCmd: %s adlý oyuncu %s tarafýndan yasaklandý. Sebep: %s [%s]", ReturnRoleplayName(id), PlayerInfo[playerid][pUsername], reason, ReturnDate());
    }
    else
    {
        foreach(new i: Player)
            SendFormattedMessage(i, COLOR_ADMIN, "AdmCmd: %s adlý oyuncu sunucudan yasaklandý. Sebep: %s [%s]", ReturnRoleplayName(id), reason, ReturnDate());
    }

    mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT id FROM characters WHERE account_id = '%d'", PlayerInfo[id][pAccountID]);
//    mysql_tquery(ourConnection, queryx, "OnSearchAccountBannedVehicles");

    LogYaz(playerid, "/permaban", id, -1);
    return 1;
}

CMD:mapgit(playerid, params[])
{
    if(!IsPlayerInAnyVehicle(playerid)) {
        SetPlayerInterior(playerid, 0);
        AC_SetPlayerVirtualWorld(playerid, 0);
        SetPlayerPos(playerid, PlayerInfo[playerid][pClickedX], PlayerInfo[playerid][pClickedY], PlayerInfo[playerid][pClickedZ] + 1.5);
    } else {
        new veh = GetPlayerVehicleID(playerid);
        SetVehiclePos(veh, PlayerInfo[playerid][pClickedX], PlayerInfo[playerid][pClickedY], PlayerInfo[playerid][pClickedZ] + 1.5);
        LinkVehicleToInterior(veh, 0);
        SetVehicleVirtualWorld(veh, 0);
    }
    return 1;
}

CMD:tpliste(playerid, params[])
{
    new str_long[2048], str[32];
    for(new i = 0; i < sizeof(tpInfo); i ++)
    {
        format(str, sizeof str, "%s\n", tpInfo[i][tpisim]);
        strcat(str_long, str);
    }
    Dialog_Show(playerid, DialogTeleportMenu, DIALOG_STYLE_LIST, "Teleport Liste", str_long, "TP", "");

    return 1;
}

Dialog:DialogAdminYarisDuzenle(playerid, response, listitem, inputtext[]) {
    if(!response) return 1;
    SetPVarInt(playerid, "SectigiYaris", listitem);
    Dialog_Show(playerid, DialogAdminYarisSecenek, DIALOG_STYLE_LIST, "Yarýþ Sistemi", "Kurulum Sihirbazý\nYarýþý düzenle", "Seç", "<< Geri");
    SunucuMesajiC(playerid, "Seçtiðiniz yarýþa ne yapmak istediðinizi seçin.");
    return 1;
}

Dialog:DialogAdminYarisSecenek(playerid, response, listitem, inputtext[]) {
    if(!response) {
        DeletePVar(playerid, "SectigiYaris");
        return pc_cmd_yarisduzenle(playerid);
    }
    switch(listitem) {
        case 0: { // kurulum
            Dialog_Show(playerid, DialogAdminYarisKur, DIALOG_STYLE_INPUT, "Yarýþ Sistemi", "Kuracaðýnýz yarýþýn ismini girin(maksimum 32 harf)", "Tamam", "<< Geri");
        }
        case 1: { // düzenle
            Dialog_Show(playerid, DialogAdminYarisDuzenSec, DIALOG_STYLE_LIST, "Yarýþ Sistemi", "Yarýþý baþlat\nÝsim deðiþtir\nYarýþ sahibini deðiþtir\nCheckpointleri sýfýrla\nBaþlamýþ bir yarýþý bitir\nYarýþý sýfýrla", "Tamam", "<< Geri");
        }
    }
    return 1;
}

Dialog:DialogAdminYarisDuzenSec(playerid, response, listitem, inputtext[]) {
    if(!response) {
        Dialog_Show(playerid, DialogAdminYarisSec, DIALOG_STYLE_LIST, "Yarýþ Sistemi", "Kurulum Sihirbazý\nYarýþý düzenle", "Seç", "<< Geri");
        return SunucuMesajiC(playerid, "Seçtiðiniz yarýþa ne yapmak istediðinizi seçin.");
    }
    new yaris = GetPVarInt(playerid, "SectigiYaris");
    switch(listitem) {
        case 0: { // Yarýþý baþalt
            if(!YarisInfo[yaris][yarisAktif]) {
                DeletePVar(playerid, "SectigiYaris");
                YarisBaslat(playerid, yaris);
            } else {
                DeletePVar(playerid, "SectigiYaris");
                HataMesajiC(playerid, "Yarýþ zaten baþlatýlmýþ.");
            }
        }
        case 1: { // isim deðiþtir
            if(YarisInfo[yaris][yarisAktif]) {
                DeletePVar(playerid, "SectigiYaris");
                return HataMesajiC(playerid, "Aktif yarýþlarýn ismini deðiþtiremezsin.");
            }
            Dialog_Show(playerid, DialogAdminYarisIsim, DIALOG_STYLE_INPUT, "Yarýþ Sistemi", "Yarýþýn yeni ismini girin(maksimum 32 harf)", "Tamam", "<< Geri");
        }
        case 2: { // sahibini deðiþtir
            if(YarisInfo[yaris][yarisAktif]) {
                DeletePVar(playerid, "SectigiYaris");
                return HataMesajiC(playerid, "Aktif yarýþlarýn sahibini deðiþtiremezsin.");
            }
            Dialog_Show(playerid, DialogAdminYarisESahip, DIALOG_STYLE_INPUT, "Yarýþ Sistemi", "Yarýþýn yeni sahibini girin:", "Tamam", "<< Geri");
        }
        case 3: { // checkpointleri sýfýrla
            if(YarisInfo[yaris][yarisAktif]) {
                DeletePVar(playerid, "SectigiYaris");
                return HataMesajiC(playerid, "Aktif yarýþlarýn checkpointlerini sýfýrlayamazsýn.");
            }
            for(new j; j < MAX_YARIS_CHECKPOINT; j++) {
                YarisInfo[yaris][yarisCheckpointX][j] = 0.0;
                YarisInfo[yaris][yarisCheckpointY][j] = 0.0;
                YarisInfo[yaris][yarisCheckpointZ][j] = 0.0;
                YarisInfo[yaris][yarisCheckpointInterior][j] = 0;
                YarisInfo[yaris][yarisCheckpointVirtualWorld][j] = 0;
            }
            YarisInfo[yaris][yarisAktifCheckpoint] = 0;
            SunucuMesajiC(playerid, "Yarýþýn checkpointleri sýfýrlandý.");
        }
        case 4: { // baþlamýþ bir yarýþý bitir
            if(!YarisInfo[yaris][yarisAktif]) return HataMesajiC(playerid, "Bu yarýþ aktif deðil.");
            YarisBitir(yaris);
            SunucuMesajiC(playerid, "Yarýþý baþarýyla sonlandýrdýnýz.");
        }
        case 5: {
            if(YarisInfo[yaris][yarisAktif]) {
                YarisBitir(yaris);
                return SunucuMesajiC(playerid, "Yarýþý baþarýyla sýfýrladýnýz.");
            }
            YarisSifirla(yaris);
            return SunucuMesajiC(playerid, "Yarýþý baþarýyla sýfýrladýnýz.");
        }
    }
    return 1;
}

Dialog:DialogAdminYarisIsim(playerid, response, listitem, inputtext[]) {
    if(!response) return Dialog_Show(playerid, DialogAdminYarisSec, DIALOG_STYLE_LIST, "Yarýþ Sistemi", "Kurulum Sihirbazý\nYarýþý düzenle", "Seç", "<< Geri");
    if(!strlen(inputtext)) return Dialog_Show(playerid, DialogAdminYarisIsim, DIALOG_STYLE_INPUT, "Yarýþ Sistemi", "Kutu boþ býrakýlamaz.\nYarýþýn yeni ismini girin(maksimum 32 harf)", "Tamam", "<< Geri");
    if(strlen(inputtext) > 32) return Dialog_Show(playerid, DialogAdminYarisIsim, DIALOG_STYLE_INPUT, "Yarýþ Sistemi", "Maksimum 32 harf girebilirsin.\nYarýþýn yeni ismini girin(maksimum 32 harf)", "Tamam", "<< Geri");
    new yarisID = GetPVarInt(playerid, "SectigiYaris");
    DeletePVar(playerid, "SectigiYaris");
    format(YarisInfo[yarisID][yarisIsmi], 32, "%s", inputtext);
    SunucuMesaji(playerid, "Yarýþýn ismini %s olarak deðiþtirdin.");
    return 1;
}

Dialog:DialogAdminYarisESahip(playerid, response, listitem, inputtext[]) {
    if(!response) return Dialog_Show(playerid, DialogAdminYarisSec, DIALOG_STYLE_LIST, "Yarýþ Sistemi", "Kurulum Sihirbazý\nYarýþý düzenle", "Seç", "<< Geri");
    new yarisSahibiID;
    if(!strlen(inputtext)) return Dialog_Show(playerid, DialogAdminYarisESahip, DIALOG_STYLE_INPUT, "Yarýþ Sistemi", "Kutuyu boþ býrakamazsýn.\nYarýþýn yeni sahibini girin:", "Tamam", "<< Geri");
    sscanf(inputtext, "u", yarisSahibiID);
    if(!IsPlayerConnected(yarisSahibiID) || !PlayerInfo[yarisSahibiID][pLogged] || yarisSahibiID < 0 || yarisSahibiID > MAX_PLAYERS || YarisInfo[GetPVarInt(playerid, "SectigiYaris")][yarisSahibi] == yarisSahibiID) return Dialog_Show(playerid, DialogAdminYarisSahip, DIALOG_STYLE_INPUT, "Yarýþ Sistemi", "Geçersiz bir kullanýcý girdiniz.\nKuracaðýnýz yarýþýn sahibini girin:", "Tamam", "Ýptal");
    if(PlayerInfo[yarisSahibiID][pYarisSahibi] != -1 || PlayerInfo[yarisSahibiID][pKatildigiYaris] != -1) return Dialog_Show(playerid, DialogAdminYarisESahip, DIALOG_STYLE_INPUT, "Yarýþ Sistemi", "Belirttiðiniz oyuncu zaten bir yarýþta.\nYarýþýn yeni sahibini girin:", "Tamam", "<< Geri");
    new yarisID = GetPVarInt(playerid, "SectigiYaris");
    if(YarisInfo[yarisID][yarisBaslatildi] || YarisInfo[yarisID][yarisAktif]) {
        HataMesajiC(playerid, "Aktif yarýþlar üstünde bu komutu kullanamazsýnýz.");
        DeletePVar(playerid, "SectigiYaris");
        return 1;
    }
    SunucuMesajiC(YarisInfo[yarisID][yarisSahibi], "Yönetici tarafýndan yarýþ sahipliðiniz alýndý, yarýþtan ayrýlmak için /yaris ayril komutunu kullanabilirsiniz.");
    PlayerInfo[YarisInfo[yarisID][yarisSahibi]][pYarisSahibi] = -1;
    DeletePVar(playerid, "SectigiYaris");
    YarisInfo[yarisID][yarisSahibi] = yarisSahibiID;
    SunucuMesajiC(yarisSahibiID, "Bir yönetici tarafýndan size yarýþ sahipliði verildi. /checkpointekle komutuyla bulunduðunuz yere checkpoint ekleyebilirsiniz.");
    SunucuMesaji(yarisSahibiID, "Maksimum %d adet checkpoint ekleyebilirsiniz.", MAX_YARIS_CHECKPOINT);
    SunucuMesaji(playerid, "Yarýþ sahibi baþarýyla %s olarak deðiþtirildi.", ReturnRoleplayName(yarisSahibiID));
    PlayerInfo[yarisSahibiID][pYarisSahibi] = yarisID;
    PlayerInfo[yarisSahibiID][pKatildigiYaris] = yarisID;
    PlayerInfo[yarisSahibiID][pYarisCP] = 0;
    return 1;
}

Dialog:DialogAdminYarisKur(playerid, response, listitem, inputtext[]) {
    if(!response) {
        Dialog_Show(playerid, DialogAdminYarisSecenek, DIALOG_STYLE_LIST, "Yarýþ Sistemi", "Kurulum Sihirbazý\nYarýþý düzenle", "Seç", "<< Geri");
        return SunucuMesajiC(playerid, "Seçtiðiniz yarýþa ne yapmak istediðinizi seçin.");
    }
    if(!strlen(inputtext)) return Dialog_Show(playerid, DialogAdminYarisKur, DIALOG_STYLE_INPUT, "Yarýþ Sistemi", "Bu kutuyu boþ býrakamazsýnýz.\nKuracaðýnýz yarýþýn ismini girin(maksimum 32 harf)", "Tamam", "<< Geri");
    if(strlen(inputtext) > 32) return Dialog_Show(playerid, DialogAdminYarisKur, DIALOG_STYLE_INPUT, "Yarýþ Sistemi", "Maksimum 32 harf girebilirsiniz.\nKuracaðýnýz yarýþýn ismini girin(maksimum 32 harf)", "Tamam", "<< Geri");
    SetPVarString(playerid, "SectigiYarisIsim", inputtext);
    SunucuMesaji(playerid, "Yarýþýn ismini %s olarak ayarladýn.", inputtext);
    Dialog_Show(playerid, DialogAdminYarisSahip, DIALOG_STYLE_INPUT, "Yarýþ Sistemi", "Kuracaðýnýz yarýþýn sahibini girin:", "Tamam", "Ýptal");
    return 1;
}

Dialog:DialogAdminYarisSahip(playerid, response, listitem, inputtext[]) {
    if(!response) {
        DeletePVar(playerid, "SectigiYaris");
        DeletePVar(playerid, "SectigiYarisIsim");
        return 1;
    }
    new yarisIsim[32], yarisSahibiID;
    if(!strlen(inputtext)) return Dialog_Show(playerid, DialogAdminYarisSahip, DIALOG_STYLE_INPUT, "Yarýþ Sistemi", "Kutuyu boþ býrakamazsýnýz.\nKuracaðýnýz yarýþýn sahibini girin:", "Tamam", "Ýptal");
    sscanf(inputtext, "u", yarisSahibiID);
    if(!IsPlayerConnected(yarisSahibiID) || !PlayerInfo[yarisSahibiID][pLogged] || yarisSahibiID < 0 || yarisSahibiID > MAX_PLAYERS) return Dialog_Show(playerid, DialogAdminYarisSahip, DIALOG_STYLE_INPUT, "Yarýþ Sistemi", "Geçersiz bir kullanýcý girdiniz.\nKuracaðýnýz yarýþýn sahibini girin:", "Tamam", "Ýptal");
    if(PlayerInfo[yarisSahibiID][pYarisSahibi] != -1 || PlayerInfo[yarisSahibiID][pKatildigiYaris] != -1) return Dialog_Show(playerid, DialogAdminYarisSahip, DIALOG_STYLE_INPUT, "Yarýþ Sistemi", "Belirttiðiniz oyuncu zaten bir yarýþta.\nKuracaðýnýz yarýþýn sahibini girin:", "Tamam", "Ýptal");
    new yarisID = GetPVarInt(playerid, "SectigiYaris");
    GetPVarString(playerid, "SectigiYarisIsim", yarisIsim, 32);
    if(YarisInfo[yarisID][yarisBaslatildi] || YarisInfo[yarisID][yarisAktif]) {
        HataMesajiC(playerid, "Aktif yarýþlar üstünde bu komutu kullanamazsýnýz.");
        DeletePVar(playerid, "SectigiYaris");
        DeletePVar(playerid, "SectigiYarisIsim");
        return 1;
    }
    YarisSifirla(yarisID);
    DeletePVar(playerid, "SectigiYaris");
    DeletePVar(playerid, "SectigiYarisIsim");
    YarisInfo[yarisID][yarisSahibi] = yarisSahibiID;
    format(YarisInfo[yarisID][yarisIsmi], 32, "%s", yarisIsim);
    SunucuMesajiC(yarisSahibiID, "Bir yönetici tarafýndan size yarýþ verildi. /checkpointekle komutuyla bulunduðunuz yere checkpoint ekleyebilirsiniz.");
    SunucuMesaji(yarisSahibiID, "Maksimum %d adet checkpoint ekleyebilirsiniz.", MAX_YARIS_CHECKPOINT);
    SunucuMesajiC(playerid, "Yarýþ baþarýyla kuruldu.");
    PlayerInfo[yarisSahibiID][pYarisSahibi] = yarisID;
    PlayerInfo[yarisSahibiID][pKatildigiYaris] = yarisID;
    PlayerInfo[yarisSahibiID][pYarisCP] = 0;
    YarisInfo[yarisID][yarisKatilanSayisi]++;
    return 1;
}

Dialog:DialogSigortaBilgi(playerid, response, listitem, inputtext[]) {
    if(response) {
        new diyalog[128];
        format(diyalog, sizeof diyalog, "Lucy Smith: Pekala o halde, lütfen sigortalatmak istediðiniz aracýn plakasýný söyleyin.");
        SendClientMessageEx(playerid, COLOR_FADE1, diyalog);
        Dialog_Show(playerid, DialogSigortaPlaka, DIALOG_STYLE_INPUT, "Mors Mutual Insurance", "{FFFFFF}Lütfen sigortalatmak istediðiniz aracýn plakasýný aþaðýdaki kutuya eksiksiz yazýn:", "Tamam", "Ýptal");
    }
    else {
        new diyalog[128];
        format(diyalog, sizeof diyalog, "Lucy Smith: Bunu duyduðuma üzüldüm. Unutmayýn, sigortasýz araç kullanmak bir suç. En kýsa zamanda sizi bekliyoruz.");
        SendClientMessageEx(playerid, COLOR_FADE1, diyalog);
    }
    return 1;
}

Dialog:DialogSigortaPlaka(playerid, response, listitem, inputtext[]) {
    if(response) {
        if(strlen(inputtext) > 0) {
            mysql_format(ourConnection, queryx, sizeof queryx, "SELECT * FROM vehicles WHERE plate = '%e' AND owner_id = '%d' LIMIT 1", inputtext, PlayerInfo[playerid][pID]);
            new Cache:veri = mysql_query(ourConnection, queryx, true);
            new rows;
            cache_get_row_count(rows);
            if(!rows) {
                new diyalog[128];
                format(diyalog, sizeof diyalog, "Lucy Smith: Sistemde belirttiðiniz plaka yok ya da o aracýn sahibi siz deðilsiniz.");
                SendClientMessageEx(playerid, COLOR_FADE1, diyalog);
                Dialog_Show(playerid, DialogSigortaPlaka, DIALOG_STYLE_INPUT, "Mors Mutual Insurance", "{FFFFFF}Lütfen sigortalatmak istediðiniz aracýn plakasýný aþaðýdaki kutuya eksiksiz yazýn:", "Tamam", "Ýptal");
                return 1;
            }
            new tmpID, sigortaSeviyesi;
            cache_get_value_int(0, "id", tmpID);
            cache_get_value_int(0, "sigortaseviyesi", sigortaSeviyesi);
            cache_delete(veri);
            if(sigortaSeviyesi >= 2) {
                new diyalog[128];
                format(diyalog, sizeof diyalog, "Lucy Smith: Belirttiðiniz araçta zaten ileri seviye sigorta bulunmakta, düzenleme yapamazsýnýz.");
                SendClientMessageEx(playerid, COLOR_FADE1, diyalog);
                return 1;
            }
            SetPVarInt(playerid, "SigortaAracID", tmpID);
            SetPVarInt(playerid, "SigortaAracSeviye", sigortaSeviyesi);
            new diyalog[128];
            format(diyalog, sizeof diyalog, "Lucy Smith: Lütfen bir sigorta poliçesi seçin.");
            SendClientMessageEx(playerid, COLOR_FADE1, diyalog);
            Dialog_Show(playerid, DialogSigortaPolice, DIALOG_STYLE_TABLIST_HEADERS, "Mors Mutual Insurance", "{99cc00}Poliçe adý\t{99cc00}Poliçe açýklamasý\n{0099ff}Seviye 1 - Basit Sigorta\t{FFFFFF}Kanuni yükümlülük(Fiyat: Araç fiyatýnýn yüzde 10'u)\n{0099ff}Seviye 2 - Kasko\t{FFFFFF}Kanuni yükümlülük+Pay n Spray indirimi(Fiyat: Araç fiyatýnýn yüzde 20'si)", "Seç", "Ýptal");
        } else {
            new diyalog[128];
            format(diyalog, sizeof diyalog, "Lucy Smith: Plakayý söylemeniz gerekiyor.");
            SendClientMessageEx(playerid, COLOR_FADE1, diyalog);
            Dialog_Show(playerid, DialogSigortaPlaka, DIALOG_STYLE_INPUT, "Mors Mutual Insurance", "{FFFFFF}Lütfen sigortalatmak istediðiniz aracýn plakasýný aþaðýdaki kutuya eksiksiz yazýn:", "Tamam", "Ýptal");
            return 1;
        }
    }
    else {
        new diyalog[128];
        format(diyalog, sizeof diyalog, "Lucy Smith: Bunu duyduðuma üzüldüm. Unutmayýn, sigortasýz araç kullanmak bir suç. En kýsa zamanda sizi bekliyoruz.");
        SendClientMessageEx(playerid, COLOR_FADE1, diyalog);
        DeletePVar(playerid, "SigortaAracSeviye");
        DeletePVar(playerid, "SigortaAracID");
    }
    return 1;
}

Dialog:DialogSigortaPolice(playerid, response, listitem, inputtext[]) {
    if(response) {
        switch(listitem) {
            case 0: {
                if(GetPVarInt(playerid, "SigortaAracSeviye") >= 1) {
                    DeletePVar(playerid, "SigortaAracID");
                    DeletePVar(playerid, "SigortaAracSeviye");
                    new diyalog[128];
                    format(diyalog, sizeof diyalog, "Lucy Smith: Bu araçta zaten ayný ya da daha yüksek bir sigorta poliçesi bulunuyor.");
                    SendClientMessageEx(playerid, COLOR_FADE1, diyalog);
                    return 1;
                }
                mysql_format(ourConnection, queryx, sizeof queryx, "SELECT * FROM vehicles WHERE id = '%d' AND owner_id = '%d' LIMIT 1", GetPVarInt(playerid, "SigortaAracID"), PlayerInfo[playerid][pID]);
                new Cache:veri = mysql_query(ourConnection, queryx, true);
                new rows;
                cache_get_row_count(rows);
                if(!rows) {
                    DeletePVar(playerid, "SigortaAracID");
                    DeletePVar(playerid, "SigortaAracSeviye");
                    new diyalog[128];
                    format(diyalog, sizeof diyalog, "Lucy Smith: Sistemde bilinmeyen bir hata oluþtu, lütfen tekrar deneyin.");
                    SendClientMessageEx(playerid, COLOR_FADE1, diyalog);
                    SunucuMesajiC(playerid, "Sistemde bilinmeyen bir hata oluþtu, lütfen tekrar deneyin. Sorun devam ederse developer ekibiyle iletiþime geçin.");
                    return 1;
                }
                new aracUcret;
                cache_get_value_int(0, "price", aracUcret);
                cache_delete(veri);
                new dialog[225];
                format(dialog, sizeof dialog, "{FFFFFF}Basit sigorta almak üzeresiniz.\nBu sigorta ile kanuni hükümden kurtulursunuz fakat indirim alamazsýnýz.\nBu sigorta size {009933}$%d{FFFFFF}'ye mal olacak.\nDevam etmek istediðinize emin misiniz?", (aracUcret * 10) / 100);
                SetPVarInt(playerid, "SigortaUcret", (aracUcret * 10) / 100);
                SetPVarInt(playerid, "SigortaAracSeviye", 1);
                Dialog_Show(playerid, DialogSigortaOnay, DIALOG_STYLE_MSGBOX, "Mors Mutual Insurance", dialog, "Evet", "Hayýr");
                format(dialog, sizeof dialog, "Lucy Smith: Satýn alýmýnýzý onaylýyor musunuz?");
                SendClientMessageEx(playerid, COLOR_FADE1, dialog);
            }
            case 1: {
                if(GetPVarInt(playerid, "SigortaAracSeviye") >= 2) {
                    DeletePVar(playerid, "SigortaAracID");
                    DeletePVar(playerid, "SigortaAracSeviye");
                    new diyalog[128];
                    format(diyalog, sizeof diyalog, "Lucy Smith: Bu araçta zaten ayný ya da daha yüksek bir sigorta poliçesi bulunuyor.");
                    SendClientMessageEx(playerid, COLOR_FADE1, diyalog);
                    return 1;
                }
                mysql_format(ourConnection, queryx, sizeof queryx, "SELECT * FROM vehicles WHERE id = '%d' AND owner_id = '%d' LIMIT 1", GetPVarInt(playerid, "SigortaAracID"), PlayerInfo[playerid][pID]);
                new Cache:veri = mysql_query(ourConnection, queryx, true);
                new rows;
                cache_get_row_count(rows);
                if(!rows) {
                    DeletePVar(playerid, "SigortaAracID");
                    DeletePVar(playerid, "SigortaAracSeviye");
                    new diyalog[128];
                    format(diyalog, sizeof diyalog, "Lucy Smith: Sistemde bilinmeyen bir hata oluþtu, lütfen tekrar deneyin.");
                    SendClientMessageEx(playerid, COLOR_FADE1, diyalog);
                    SunucuMesajiC(playerid, "Sistemde bilinmeyen bir hata oluþtu, lütfen tekrar deneyin. Sorun devam ederse developer ekibiyle iletiþime geçin.");
                    return 1;
                }
                new aracUcret;
                cache_get_value_int(0, "price", aracUcret);
                cache_delete(veri);
                new dialog[225];
                format(dialog, sizeof dialog, "{FFFFFF}Ýleri seviye sigorta(kasko) almak üzeresiniz.\nBu sigorta ile kanuni hükümden kurtulursunuz ve Pay'n'Spraylerden indirim alýrsýnýz.\nBu sigorta size {009933}$%d{FFFFFF}'ye mal olacak.\nDevam etmek istediðinize emin misiniz?", (aracUcret * 20) / 100);
                SetPVarInt(playerid, "SigortaUcret", (aracUcret * 20) / 100);
                SetPVarInt(playerid, "SigortaAracSeviye", 2);
                Dialog_Show(playerid, DialogSigortaOnay, DIALOG_STYLE_MSGBOX, "Mors Mutual Insurance", dialog, "Evet", "Hayýr");
                format(dialog, sizeof dialog, "Lucy Smith: Satýn alýmýnýzý onaylýyor musunuz?");
                SendClientMessageEx(playerid, COLOR_FADE1, dialog);
            }
        }
    } else {
        new diyalog[128];
        format(diyalog, sizeof diyalog, "Lucy Smith: Bunu duyduðuma üzüldüm. Unutmayýn, sigortasýz araç kullanmak bir suç. En kýsa zamanda sizi bekliyoruz.");
        SendClientMessageEx(playerid, COLOR_FADE1, diyalog);
        DeletePVar(playerid, "SigortaAracSeviye");
        DeletePVar(playerid, "SigortaAracID");
    }
    return 1;
}

Dialog:DialogSigortaOnay(playerid, response, listitem, inputtext[]) {
    if(response) {
        mysql_format(ourConnection, queryx, sizeof queryx, "SELECT * FROM vehicles WHERE id = '%d' AND owner_id = '%d' LIMIT 1", GetPVarInt(playerid, "SigortaAracID"), PlayerInfo[playerid][pID]);
        new Cache:veri = mysql_query(ourConnection, queryx, true);
        new rows;
        cache_get_row_count(rows);
        if(!rows) {
            DeletePVar(playerid, "SigortaAracID");
            DeletePVar(playerid, "SigortaAracSeviye");
            new diyalog[128];
            format(diyalog, sizeof diyalog, "Lucy Smith: Sistemde bilinmeyen bir hata oluþtu, lütfen tekrar deneyin.");
            SendClientMessageEx(playerid, COLOR_FADE1, diyalog);
            SunucuMesajiC(playerid, "Sistemde bilinmeyen bir hata oluþtu, lütfen tekrar deneyin. Sorun devam ederse developer ekibiyle iletiþime geçin.");
            return 1;
        }
        cache_delete(veri);
        new sigortaSeviyesi = GetPVarInt(playerid, "SigortaAracSeviye"), sigortaID = GetPVarInt(playerid, "SigortaAracID"), sigortaUcret = GetPVarInt(playerid, "SigortaUcret");
        DeletePVar(playerid, "SigortaAracSeviye");
        DeletePVar(playerid, "SigortaAracID");
        DeletePVar(playerid, "SigortaUcret");
        if(PlayerInfo[playerid][pCash] >= sigortaUcret) {
            AC_GivePlayerMoney(playerid, -sigortaUcret, "sigorta");
            mysql_format(ourConnection, queryx, sizeof queryx, "UPDATE vehicles SET sigortaseviyesi = '%d' WHERE id='%d'", sigortaSeviyesi, sigortaID);
            mysql_tquery(ourConnection, queryx);
            SunucuMesaji(playerid, "$%d karþýlýðýnda %d. seviye sigorta aldýnýz.", sigortaUcret, sigortaSeviyesi);
            new diyalog[128];
            format(diyalog, sizeof diyalog, "Lucy Smith: Satýn alýmýnýz baþarýlý, aracýnýzý güle güle kullanýn. Ýyi günler.");
            SendClientMessageEx(playerid, COLOR_FADE1, diyalog);
            AracSigortaDuzelt(sigortaID, sigortaSeviyesi);
        } else {
            new diyalog[128];
            format(diyalog, sizeof diyalog, "Lucy Smith: Yeterli paranýz yok.");
            SendClientMessageEx(playerid, COLOR_FADE1, diyalog);
            HataMesaji(playerid, "Yeterli paranýz yok. ($%d)", sigortaUcret);
            return 1;
        }
    } else {
        new diyalog[128];
        DeletePVar(playerid, "SigortaAracSeviye");
        DeletePVar(playerid, "SigortaAracID");
        DeletePVar(playerid, "SigortaUcret");
        format(diyalog, sizeof diyalog, "Lucy Smith: Bunu duyduðuma üzüldüm. Unutmayýn, sigortasýz araç kullanmak bir suç. En kýsa zamanda sizi bekliyoruz.");
        SendClientMessageEx(playerid, COLOR_FADE1, diyalog);
    }
    return 1;
}

Dialog:DialogKelepceKir(playerid, response, listitem, inputtext[]) {
    if(response) {
        SendFormattedMessage(playerid, COLOR_LIGHTRED, "Senaryo: {FFFFFF}Görüþtüðün adam kelepçeni kýrdý.");
        PlayerInfo[playerid][pCuffed] = 0;
        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
        RemovePlayerAttachedObject(playerid, 9);
        OAC_GivePlayerMoney(playerid, -3000);
    } else {
        new diyalog[128];
        if(IsPlayerInRangeOfPoint(playerid, 5.0, 2260.4148, 63.1703, 26.4844)) {
            foreach(new i: Player) {
                if(!PlayerInfo[i][pLogged])continue;
                if(!IsPlayerInRangeOfPoint(i, 10.0, 2260.4148, 63.1703, 26.4844))continue;
                format(diyalog, sizeof diyalog, "Juan Summers: Ýstemiyorsan niye geldin? Polisi arýyorum.");
                SendClientMessageEx(i, COLOR_FADE1, diyalog);
            }
        } else if(IsPlayerInRangeOfPoint(playerid, 5.0, 1248.9823, 365.7434, 19.5547)) {
            foreach(new i: Player) {
                if(!PlayerInfo[i][pLogged])continue;
                if(!IsPlayerInRangeOfPoint(i, 10.0, 1248.9823, 365.7434, 19.5547))continue;
                format(diyalog, sizeof diyalog, "Liam Sanchez: Ýstemiyorsan niye geldin? Polisi arýyorum.");
                SendClientMessageEx(i, COLOR_FADE1, diyalog);
            }
        } else return HataMesajiC(playerid, "Bir kelepçe kýrma noktasýna yakýn deðilsin.");
    }
    return 1;
}


Dialog:DialogServisSatin(playerid, response, listitem, inputtext[]) {
    if(response) {
        switch(listitem) {
            case 0: { // alet çantasý
                return pc_cmd_aletcantasi(playerid);
            }
            case 1: { //
                return pc_cmd_tamirkitial(playerid);
            }
            case 2: { //

            }
        }
    }
    return 1;
}

Dialog:DialogCadirAlOnay(playerid, response, listitem, inputtext[]) {
    if(response) {
        if(PlayerInfo[playerid][pKampEkipmani]) return HataMesaji(playerid, "Zaten kamp ekipmanýnýz bulunuyor.");
        if(!IsPlayerInRangeOfPoint(playerid, 3.0, 821.4810,-1758.2771,13.6484)) return HataMesaji(playerid, "Kamp ekipman satýþ noktasýnda deðilsin.");
        if(PlayerInfo[playerid][pCash] < 2500) return HataMesaji(playerid, "Yeterli paran yok. ($2500)");
        PlayerInfo[playerid][pKampEkipmani] = 1;
        AC_GivePlayerMoney(playerid, -2500, "/cadir satinal");
        SunucuMesaji(playerid, "Çadýr satýn aldýnýz. Los Santos dýþýna kurabilirsiniz. (/cadir)");
    }
    return 1;
}

Dialog:DialogChop(playerid, response, listitem, inputtext[]) {
    if(response) {
        SunucuMesajiC(playerid, "Araç parçalanýyor, lütfen bulunduðunuz yerden ayrýlmayýn ve bekleyin.");
        PlayerInfo[playerid][pFreezed] = 1;
        TogglePlayerControllable(playerid, false);
        PlayerInfo[playerid][pParcalaTimer] = 15;
        PlayerTextDrawShow(playerid, PlayerText:Textdraw0[playerid]);
        PlayerTextDrawShow(playerid, PlayerText:Textdraw1[playerid]);
        SetPVarInt(playerid, "AracParcaliyor", 1);
    } else {
        new diyalog[128];
        if(IsPlayerInRangeOfPoint(playerid, 5.0, -1820.4452, -179.6192, 9.3984)) {
            foreach(new i: Player) {
                if(!PlayerInfo[i][pLogged])continue;
                if(!IsPlayerInRangeOfPoint(i, 10.0, -1820.4452, -179.6192, 9.3984))continue;
                format(diyalog, sizeof diyalog, "Mitch Lopez: Benimle oyun oynamaya mý geldin? Defol gözüm görmesin seni.");
                SendClientMessageEx(i, COLOR_FADE1, diyalog);
            }
        } else if(IsPlayerInRangeOfPoint(playerid, 5.0, -1892.0643,-1671.5939,23.0156)) {
            foreach(new i: Player) {
                if(!PlayerInfo[i][pLogged])continue;
                if(!IsPlayerInRangeOfPoint(i, 10.0, -1892.0643,-1671.5939,23.0156))continue;
                format(diyalog, sizeof diyalog, "Rhett Brown: Benimle oyun oynamaya mý geldin? Defol gözüm görmesin seni.");
                SendClientMessageEx(i, COLOR_FADE1, diyalog);
            }
        } else return HataMesajiC(playerid, "Bir chop shopa yakýn deðilsin.");
    }
    return 1;
}

Dialog:DialogReklamList(playerid, response, listitem, inputtext[]) {
    if(response) {
        new dialogString[300], baslik[35];
        PlayerInfo[playerid][pIlgilendigiReklam] = PlayerInfo[playerid][pReklamID][listitem];
        new reklam = PlayerInfo[playerid][pIlgilendigiReklam];
        format(dialogString, sizeof dialogString, "{4b75c3}Reklam ID: {ffffff}%d\n{4b75c3}Reklamý Yapan: {ffffff}%s\n{4b75c3}Reklam: {ffffff}%s\n{4b75c3}Telefon Numarasý: {ffffff}%d", ReklamInfo[reklam][reklamID], ReklamInfo[reklam][reklamYapan], ReklamInfo[reklam][reklamText], ReklamInfo[reklam][reklamTelefon]);
        format(baslik, sizeof baslik, "Reklam Ayrýntýlarý - {4b75c3}#%d", reklam);
        Dialog_Show(playerid, DialogReklamSecenek, DIALOG_STYLE_MSGBOX, baslik, dialogString, "Seçenekler", "Ýptal");
    } else
        PlayerInfo[playerid][pIlgilendigiReklam] = -1;
    return 1;
}

Dialog:DialogReklamSecenek(playerid, response, listitem, inputtext[]) {
    if(response) {
        new reklam = PlayerInfo[playerid][pIlgilendigiReklam];
        new baslik[35];
        format(baslik, sizeof baslik, "Reklam Seçeneleri - {4b75c3}#%d", reklam);
        Dialog_Show(playerid, DialogReklamSecenekList, DIALOG_STYLE_LIST, baslik, "Kabul et\nReddet", "Seç", "<< Geri");
    }
    return 1;
}

Dialog:DialogReklamSecenekList(playerid, response, listitem, inputtext[]) {
    if(response) {
        switch(listitem) {
            case 0: {
                ReklamKabul(playerid, PlayerInfo[playerid][pIlgilendigiReklam]);
                PlayerInfo[playerid][pIlgilendigiReklam] = -1;
            }
            case 1: {
                Dialog_Show(playerid, DialogReklamReddet, DIALOG_STYLE_INPUT, "Reklam Reddet", "Reddetme sebebini aþaðýya girin:", "Tamam", "<< Geri");
            }
        }
    } else {
        new dialogString[300], baslik[35];
        new reklam = PlayerInfo[playerid][pIlgilendigiReklam];
        format(dialogString, sizeof dialogString, "{4b75c3}Reklam ID: {ffffff}%d\n{4b75c3}Reklamý Yapan: {ffffff}%s\n{4b75c3}Reklam: {ffffff}%s\n{4b75c3}Telefon Numarasý: {ffffff}%d", ReklamInfo[reklam][reklamID], ReklamInfo[reklam][reklamYapan], ReklamInfo[reklam][reklamText], ReklamInfo[reklam][reklamTelefon]);
        format(baslik, sizeof baslik, "Reklam Ayrýntýlarý - {4b75c3}#%d", reklam);
        Dialog_Show(playerid, DialogReklamSecenek, DIALOG_STYLE_MSGBOX, baslik, dialogString, "Seçenekler", "Ýptal");
    }
    return 1;
}

Dialog:DialogReklamReddet(playerid, response, listitem, inputtext[]) {
    if(response) {
        ReklamRed(playerid, PlayerInfo[playerid][pIlgilendigiReklam], inputtext);
        PlayerInfo[playerid][pIlgilendigiReklam] = -1;
    } else {
        new reklam = PlayerInfo[playerid][pIlgilendigiReklam];
        new baslik[35];
        format(baslik, sizeof baslik, "Reklam Seçeneleri - {4b75c3}#%d", reklam);
        Dialog_Show(playerid, DialogReklamSecenekList, DIALOG_STYLE_LIST, baslik, "Kabul et\nReddet", "Seç", "<< Geri");
    }
    return 1;
}

Dialog:DialogMasaAl(playerid, response, listitem, inputtext[]) {
    if(response) {
        PlayerInfo[playerid][pTezgahMasa] = 1825;
        SunucuMesaji(playerid, "Masa satýn aldýnýz. (/tezgah)");
        LogYaz(playerid, "/masaal", -1, -1);
        AC_GivePlayerMoney(playerid, -250, "/masaal");
    }
    return 1;
}

Dialog:DialogTeleportMenu(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        if(!IsPlayerInAnyVehicle(playerid))
        {
            SetPlayerInterior(playerid, 0);
            AC_SetPlayerVirtualWorld(playerid, 0);
            SetPlayerPos(playerid, tpInfo[listitem][tpx], tpInfo[listitem][tpy], tpInfo[listitem][tpz]);
        } else {
            new veh = GetPlayerVehicleID(playerid);
            SetVehiclePos(veh, tpInfo[listitem][tpx], tpInfo[listitem][tpy], tpInfo[listitem][tpz]);
            LinkVehicleToInterior(veh, 0);
            SetVehicleVirtualWorld(veh, 0);
        }
    }
    return 1;
}

CMD:hesapla(playerid, params[])
{
    new method[7], value1, value2;
    if(sscanf(params, "ds[20]d", value1, method, value2))
    {
        SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /hesapla [Sayý 1] [Ýþlem] [Sayý 2]");
        SendClientMessage(playerid, COLOR_GRAD2, "Opsiyonlar: Topla (+), Çýkart (-), Çarp (*), Böl (/)");
        SendClientMessage(playerid, COLOR_GRAD2, "Örnek: /hesapla 3 * 2");
        return 1;
    }

    if(strcmp(method,"carp",true) == 0 || strcmp(method,"*",true) == 0)
    {
        new sum = value1*value2;
        SunucuMesaji(playerid, "%d ile %d sayýsýný çarptýn ve %d buldun.",value1,value2,sum);
        PlayerAME(playerid, "hesap makinesinden hesaplama yapar.");
    }
    else if(strcmp(method,"bol",true) == 0 || strcmp(method,"/",true) == 0)
    {
        new sum = value1/value2;
        SunucuMesaji(playerid, "%d ile %d sayýsýný böldün ve %d buldun.",value1,value2,sum);
        PlayerAME(playerid, "hesap makinesinden hesaplama yapar.");
    }
    else if(strcmp(method,"topla",true) == 0 || strcmp(method,"+",true) == 0)
    {
        new sum = value1+value2;
        SunucuMesaji(playerid, "%d ile %d sayýsýný topladýn ve %d buldun.",value1,value2,sum);
        PlayerAME(playerid, "hesap makinesinden hesaplama yapar.");
    }
    else if(strcmp(method,"cikart",true) == 0 || strcmp(method,"-",true) == 0)
    {
        new sum = value1-value2;
        SunucuMesaji(playerid, "%d sayýsýndan %d sayýsýný çýkarttýn ve %d buldun.",value1,value2,sum);
        PlayerAME(playerid, "hesap makinesinden hesaplama yapar.");
    } else return HataMesajiC(playerid, "Bilinmeyen bir opsiyon girdin.");
    return 1;
}

CMD:specoff(playerid)
{
    if(GetPlayerState(playerid) != PLAYER_STATE_SPECTATING)
        return HataMesajiC(playerid, "Zaten bir oyuncuyu izlemiyorsunuz.");
        
    if(PlayerInfo[playerid][pInRecon] != -1)
    {
        PlayerInfo[PlayerInfo[playerid][pInRecon]][pIzleniyor] = -1;
    }

    TogglePlayerSpectating(playerid, 0);
    PlayerSpectatePlayer(playerid, INVALID_PLAYER_ID);
    PlayerSpectateVehicle(playerid, INVALID_VEHICLE_ID);
    PlayerInfo[playerid][pInRecon] = -1;
    AC_ResetTimer(playerid);
    PreloadAnimations(playerid);
    //SpawnPlayer(playerid);
    AC_SetPlayerHealth(playerid, 100);
    SetPlayerPos(playerid, GetPVarFloat(playerid, "SpecX"), GetPVarFloat(playerid, "SpecY"), GetPVarFloat(playerid, "SpecZ"));
    SetPlayerFacingAngle(playerid, GetPVarFloat(playerid, "SpecA"));
    SetPlayerInterior(playerid, GetPVarInt(playerid, "SpecINT"));
    AC_SetPlayerVirtualWorld(playerid, GetPVarInt(playerid, "SpecVW"));
    if(GetPVarInt(playerid, "SpecVW") < 1)
    {
        SetPlayerWeather(playerid, SunucuBilgi[CurrentWeather]);
        SetPlayerTime(playerid, SunucuBilgi[CurrentHour], 0);
    }
    SetCameraBehindPlayer(playerid);
    PlayerInfo[playerid][pJustSpawned] = true;
    SetTimerEx("OnPlayerSetData", 1000, false, "d", playerid);
    //BasariMesaji(playerid, "Spec modundan çýktýnýz.");
    //DeletePVar(playerid, "SpecX");
    //DeletePVar(playerid, "SpecY");
    //DeletePVar(playerid, "SpecZ");
    //DeletePVar(playerid, "SpecA");
    //DeletePVar(playerid, "SpecINT");
    //DeletePVar(playerid, "SpecVW");
    //PlayerInfo[playerid][pSpecMode] = 0;
    return 1;
}

CMD:spec(playerid, params[])
{
    new id;

    if(sscanf(params, "u", id))return
        KullanimMesajiC(playerid, "/spec [id/isim] || /specoff");

    if(!IsPlayerConnected(id) || id == playerid)return
        HataMesajiC(playerid, "Geçersiz ID.");

    if(PlayerInfo[playerid][pAdmin] < LEVEL20 && PlayerInfo[id][pAdmin] >= LEVEL20)
        return HataMesajiC(playerid, "Lider yöneticileri izleyemezsin.");

    if(GetPlayerState(playerid) != PLAYER_STATE_SPECTATING)
    {
        new weapons[12];
        new ammo[12];

        for(new x; x < 12; x++)
        {
            GetPlayerWeaponData(playerid, x, weapons[x], ammo[x]);
            if(!AC_PlayerHasWeapon(playerid, weapons[x]) || !ammo[x])
            {
                weapons[x] = 0;
                ammo[x] = 0;
            }
            PlayerInfo[playerid][pWeapons][x] = weapons[x];
            PlayerInfo[playerid][pAmmo][x] = ammo[x];
        }

        AC_GetPlayerHealth(playerid, PlayerInfo[playerid][pHealth]);
        AC_GetPlayerArmour(playerid, PlayerInfo[playerid][pArmour]);
    }

    Player_Recon(playerid, id);
    PlayerInfo[playerid][pSpecMode] = 1;

    return 1;
}

flags:acinsiyet(CMD_GAME1);
CMD:acinsiyet(playerid, params[])
{
    new id, sex;

    if(sscanf(params, "ud", id, sex))return
        KullanimMesajiC(playerid, "/acinsiyet [id/isim] [0: Erkek - 1: Kadýn]");

    if(!IsPlayerConnected(id) || !PlayerInfo[id][pLogged])return
        HataMesajiC(playerid, "Geçersiz ID.");

    if(sex < 0 || sex > 1)return
        SunucuMesajiC(playerid, "Geçersiz cinsiyet.");

    static const sexNames[2][10] = {"Erkek", "Kadýn"};

    PlayerInfo[id][pSex] = sex;

    BasariMesaji(id, "%s cinsiyetini %s olarak ayarladý.", ReturnRoleplayName(playerid), sexNames[sex]);
    SendAworkAlert(false, COLOR_ADMIN, "AdmCmd: %s kiþisi %s kiþisinin cinsiyetini %s olarak ayarladý.", ReturnRoleplayName(playerid), ReturnRoleplayName(id), sexNames[sex]);

    return 1;
}

CMD:anote(playerid, params[])
{
    new id;

    if(sscanf(params, "u", id)) return
        KullanimMesajiC(playerid, "/anote [id/isim]");

    if(!IsPlayerConnected(id) || !PlayerInfo[id][pLogged]) return
        HataMesajiC(playerid, "Geçersiz ID.");

    // new query[512];

    mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT admin_notes.*, accounts.username FROM admin_notes JOIN accounts ON accounts.id = admin_notes.admin_id WHERE character_id = '%d';", PlayerInfo[id][pID]);
    mysql_tquery(ourConnection, queryx, "OnAdminNotesSearch", "dd", playerid, id);

    return 1;
}
CMD:notekle(playerid, params[])
{
    new id, text[64];

    if(sscanf(params, "us[64]", id, text))return
        KullanimMesajiC(playerid, "/notekle [id/isim] [yazý]");

    if(!IsPlayerConnected(id) || !PlayerInfo[id][pLogged]) return
        HataMesajiC(playerid, "Geçersiz ID.");

    // new query[512];

    mysql_format(ourConnection, queryx, sizeof(queryx), "INSERT INTO admin_notes (character_id, admin_id, created_at, text) VALUES ('%d', '%d', NOW(), '%e')", PlayerInfo[id][pID], PlayerInfo[playerid][pAccountID], text);
    mysql_tquery(ourConnection, queryx);

//    LogYaz(playerid, "/notekle", id);

//    SendAworkAlert(false, COLOR_ADMIN, "AdmCmd: %s kiþisi %s (%d) kiþisine not ekledi.", ReturnRoleplayName(playerid), ReturnRoleplayName(id), id);
    SunucuMesaji(playerid, "%s kiþisine not ekledin.", ReturnRoleplayName(id));
    return 1;
}
flags:notsil(CMD_GAME1);
CMD:notsil(playerid, params[])
{
    new id, text[64];

    if(sscanf(params, "us[64]", id, text))return
        KullanimMesajiC(playerid, "/notsil [id/isim] [yazý]");

    if(!IsPlayerConnected(id) || !PlayerInfo[id][pLogged]) return
        HataMesajiC(playerid, "Geçersiz ID.");

    // new query[512];
    SunucuMesaji(playerid, "%s kiþisinin notlarýný sildin.", ReturnRoleplayName(id));

    mysql_format(ourConnection, queryx, sizeof(queryx), "DELETE FROM admin_notes WHERE character_id = '%d'", PlayerInfo[id][pID]);
    mysql_tquery(ourConnection, queryx);

//    SendAworkAlert(false, COLOR_ADMIN, "AdmCmd: %s kiþisi %s (%d) kiþisinin notlarýný sildi.", ReturnRoleplayName(playerid), ReturnRoleplayName(id), id);
    return 1;
}

CMD:cw(playerid, params[])
{
    if(isnull(params) || strlen(params) > 256)return
        KullanimMesajiC(playerid, "/cw [yazý]");

    new vehicleid = GetPlayerVehicleID(playerid);
    new string[256];

    if(IsABike(vehicleid) || !vehicleid)return
        SunucuMesajiC(playerid, "Bir aracýn içerisinde deðilsin.");

    format(string, sizeof(string), "[Araç içi] %s sessizce: %s", ReturnRoleplayName(playerid, true), params);
    printf(string);

    foreach(new j : Player)
    {
        if(!IsPlayerConnected(j) || !PlayerInfo[j][pLogged])continue;
        if(GetPlayerVehicleID(j) != vehicleid)continue;

        SendClientMessageEx(j, COLOR_YELLOW, string);

        foreach(new p : Player) if(p != playerid && PlayerInfo[p][pAdmin] > SUPPORTER && PlayerInfo[p][pInRecon] == j)
            SendClientMessageEx(p, COLOR_YELLOW, string);
    }

    return 1;
}
CMD:cb(playerid, params[])
{
    if(isnull(params) || strlen(params) > 256)return
        KullanimMesajiC(playerid, "/cb [yazý]");

    new vehicleid = GetPlayerVehicleID(playerid);
    new string[256];

    if(IsABike(vehicleid) || !vehicleid)return
        SunucuMesajiC(playerid, "Bir aracýn içerisinde deðilsin.");

    format(string, sizeof(string), "[OOC] %s: %s", ReturnRoleplayName(playerid, true), params);
    printf(string);

    foreach(new j : Player)
    {
        if(!IsPlayerConnected(j) || !PlayerInfo[j][pLogged])continue;
        if(GetPlayerVehicleID(j) != vehicleid)continue;

        SendClientMessageEx(j, COLOR_YELLOW, string);

        foreach(new p : Player) if(p != playerid && PlayerInfo[p][pAdmin] > SUPPORTER && PlayerInfo[p][pInRecon] == j)
            SendClientMessageEx(p, COLOR_YELLOW, string);
    }

    return 1;
}

CMD:silah(playerid, params[])
{
    if(IsPlayerInAnyVehicle(playerid))
        return HataMesajiC(playerid, "Araçtayken bu komutu kullanamazsýn.");

    new weaponid = GetPlayerWeapon(playerid);

    if (!weaponid)
        return HataMesajiC(playerid, "Elinizde silah yok.");

    if (!IsWeaponWearable(weaponid))
        return HataMesajiC(playerid, "Elinizdeki silah düzenlenemez.");

    if (isnull(params))
        return  KullanimMesajiC(playerid, "/silah [duzenle/kemik/gizle]");

    if (!strcmp(params, "duzenle", true))
    {
        if (EditingWeapon[playerid])
            return HataMesajiC(playerid, "Zaten bir silah düzenliyorsunuz.");

        if (WeaponSettings[playerid][weaponid - 22][Hidden])
            return HataMesajiC(playerid, "Gizli bir silahý düzenleyemezsiniz.");

        new index = weaponid - 22;

        SetPlayerArmedWeapon(playerid, 0);
        new slot = GetWeaponObjectSlot(weaponid);
        if(slot != -1)
        {
            SetPlayerAttachedObject(playerid, GetWeaponObjectSlot(weaponid), GetWeaponModelEx(weaponid), WeaponSettings[playerid][index][Bone], WeaponSettings[playerid][index][Position][0], WeaponSettings[playerid][index][Position][1], WeaponSettings[playerid][index][Position][2], WeaponSettings[playerid][index][Position][3], WeaponSettings[playerid][index][Position][4], WeaponSettings[playerid][index][Position][5], 1.0, 1.0, 1.0);
            EditAttachedObject(playerid, GetWeaponObjectSlot(weaponid));

            EditingWeapon[playerid] = weaponid;
        }
        else return HataMesajiC(playerid, "Tüm aksesuar slotlarýný kullanýyorsunuz, lütfen bir aksesuar çýkartýp tekrar deneyin.");
    }
    else if (!strcmp(params, "kemik", true))
    {
        if (EditingWeapon[playerid])
            return HataMesajiC(playerid, "Zaten bir silah düzenliyorsunuz.");

        Dialog_Show(playerid, DialogEditBone, DIALOG_STYLE_LIST, "Kemik", "Gövde\nKafa\nSol üst kol\nSað üst kol\nSol el\nSað el\nSol kalça\nSað kalça\nSol ayak\nSað ayak\nSað baldýr\nSol baldýr\nSol ön kol\nSað ön kol\nSol omuz\nSað omuz\nBoyun\nÇene", "Seç", "Ýptal");
        EditingWeapon[playerid] = weaponid;
    }
    else if (!strcmp(params, "gizle", true))
    {
        if (EditingWeapon[playerid])
            return HataMesajiC(playerid, "Düzenlediðiniz bir silahý gizleyemezsiniz, lütfen önce düzenlemeyi bitirin.");

        if (!IsWeaponHideable(weaponid))
            return HataMesajiC(playerid, "Bu silah gizlenemez.");

        new index = weaponid - 22, weaponname[18], string[150];

        GetWeaponName(weaponid, weaponname, sizeof(weaponname));

        if (WeaponSettings[playerid][index][Hidden])
        {
            BasariMesaji(playerid, "%s artýk üstünüzde görünecek.", weaponname);
            WeaponSettings[playerid][index][Hidden] = false;
        }
        else
        {
            if (IsPlayerAttachedObjectSlotUsed(playerid, GetWeaponObjectSlot(weaponid)))
                RemovePlayerAttachedObject(playerid, GetWeaponObjectSlot(weaponid));

            BasariMesaji(playerid, "%s artýk üstünüzde görünmeyecek.", weaponname);
            WeaponSettings[playerid][index][Hidden] = true;
        }
        if(WeaponSettings[playerid][index][duzenlendi])
        {
            mysql_format(ourConnection, string, sizeof(string), "UPDATE weaponsettings SET Hidden = '%d' WHERE sOwner = '%d' AND WeaponID = '%d'", WeaponSettings[playerid][index][Hidden], PlayerInfo[playerid][pID], weaponid);
            mysql_tquery(ourConnection, string);
        }
    }
    else HataMesajiC(playerid, "Bilinmeyen bir parametre girdiniz.");
    return 1;
}

CMD:kulaklikcikar(playerid) {
    if(!GetPVarInt(playerid, "KulakliklaMuzik")) return HataMesajiC(playerid, "Bu komutu kullanmak için kulaklýklýðý aktifleþtirmeniz gerekiyor.");
    if(BirlikteDinlenen[playerid] == -1) return HataMesajiC(playerid, "Zaten birisiyle müzik dinlemiyorsunuz.");
    StopAudioStreamForPlayer(BirlikteDinlenen[playerid]);
    BirlikteDinlenen[BirlikteDinlenen[playerid]] = -1;
    BirlikteDinliyor[BirlikteDinlenen[playerid]] = -1;
    SunucuMesaji(BirlikteDinlenen[playerid], "%s sizden kulaklýklarý aldý, artýk birlikte müzik dinlemiyorsunuz.", ReturnRoleplayName(playerid));
    SunucuMesaji(playerid, "Artýk %s ile birlikte müzik dinlemiyorsunuz.", ReturnRoleplayName(BirlikteDinlenen[playerid]));
    PlayerAME(BirlikteDinlenen[playerid], "kulaklýklarý kulaðýndan çýkarýr");
    BirlikteDinlenen[playerid] = -1;
    BirlikteDinliyor[playerid] = -1;
    return 1;
}

CMD:kulaklikmenu(playerid) {
    if(!GetPVarInt(playerid, "KulakliklaMuzik")) return HataMesajiC(playerid, "Bu komutu kullanmak için kulaklýðý aktifleþtirmeniz gerekiyor.");
    new string[256], name[MAX_PLAYER_NAME], link[128];
    if(BirlikteDinlenen[playerid] == -1)
        format(name, MAX_PLAYER_NAME, "Kimse");
    else
        format(name, MAX_PLAYER_NAME, "%s", ReturnRoleplayName(BirlikteDinlenen[playerid]));
    GetPVarString(playerid, "KulaklikLink", link, 128);
    format(string, sizeof string, "%s{FFFFFF}Birlikte Dinlenen:\t{ff9900}%s\n{FFFFFF}Link deðiþtir:\t{ff9900}%s\n{FFFFFF}Dinlemeyi býrak", string, name, link);
    Dialog_Show(playerid, DialogKulaklikMuzik, DIALOG_STYLE_TABLIST_HEADERS, "Telefondan Kulaklýkla Müzik", "{ffcc66}Seçenek\t{ffcc66}Deðer\n%s", "Seç", "Ýptal", string);
    return 1;
}

CMD:dinlemebirak(playerid) {
    if(BirlikteDinliyor[playerid] == -1) return HataMesajiC(playerid, "Bu komutu kullanmak için birisiyle müzik dinliyor olmanýz ve müziðin sahibi olmamanýz gerekiyor.");
    BirlikteDinlenen[BirlikteDinliyor[playerid]] = -1;
    DeletePVar(playerid, "KulakliklaMuzik");
    SunucuMesajiC(playerid, "Artýk kulaklýkla müzik dinlemiyorsunuz.");
    StopAudioStreamForPlayer(playerid);
    PlayerAME(playerid, "kulaklýklarýný çýkartýr");
    SunucuMesaji(BirlikteDinliyor[playerid], "Artýk kulaklýkla %s ile birlikte müzik dinlemiyorsunuz.", ReturnRoleplayName(playerid));
    BirlikteDinliyor[playerid] = -1;
    return 1;
}

CMD:atm(playerid) {
    new gosterdi = ATMGoster(playerid);
    if(!gosterdi) return HataMesajiC(playerid, "Yakýnýnýzda bir ATM yok.");
    return 1;
}

CMD:rehber(playerid, params[])
{
    if(PlayerInfo[playerid][pCuffed]) return HataMesajiC(playerid, "Kelepçeliyken telefonunuzu kullanamazsýnýz.");
    new slot = Inventory_HasItem(playerid, "Cep Telefonu", ITEM_PHONE);

    if(slot == -1)return
        SunucuMesajiC(playerid, "Cep telefonun yok.");

    if(!sscanf(params, "d", slot) && slot)
    {
        strdel(params, 0, 1); slot--;
    }

    if(slot < 0 || slot >= MAX_INVENTORY_ITEMS)return
        KullanimMesajiC(playerid, "/rehber [slot]");

    new listid = PlayerInfo[playerid][pInvList][slot];

    if(InventoryObjects[listid][invType] != ITEM_PHONE)return
        SunucuMesajiC(playerid, "Bu slotta cep telefonu yok.");

    if(!PlayerInfo[playerid][pInvExtra][slot])return
        SunucuMesajiC(playerid, "Telefonun kapalý.");

    PlayerInfo[playerid][pPhoneID] = slot;

    ShowPlayerPhoneBook(playerid, 1);

    return 1;
}
CMD:hoparlor(playerid, params[])
{
    if(PlayerInfo[playerid][pCuffed]) return HataMesajiC(playerid, "Kelepçeliyken telefonunuzu kullanamazsýnýz.");
    if(PlayerInfo[playerid][pMobile] == -1)return
        SunucuMesajiC(playerid, "Çaðrýda deðilsin.");

    if(PlayerInfo[playerid][pJailTime] > 1) return HataMesajiC(playerid, "Bu komutu hapiste kullanmazsýn.");

    PlayerInfo[playerid][pSpeakerPhone] = !PlayerInfo[playerid][pSpeakerPhone];

    SendClientMessageEx(playerid, COLOR_YELLOW, (!PlayerInfo[playerid][pSpeakerPhone]) ? ("Telefonun hoparlör özelliðini deaktif ettin.") : ("Telefonun hoparlör özelliðini aktif ettin."));

    return 1;
}

CMD:telefon(playerid, params[])
{
    if(PlayerInfo[playerid][pJailTime] > 1) return HataMesajiC(playerid, "Bu komutu hapiste kullanmazsýn.");

    if(PlayerInfo[playerid][pMobile] != -1)return
        SunucuMesajiC(playerid, "Arama esnasýnda telefon sisteminin diðer fonksiyonlarýndan yararlanamazsýnýz.");

    if(PlayerInfo[playerid][pCuffed]) return HataMesajiC(playerid, "Kelepçeliyken telefonunuzu kullanamazsýnýz.");
    new slot = Inventory_HasItem(playerid, "Cep Telefonu", ITEM_PHONE);

    if(!sscanf(params, "d", slot) && slot)
    {
        strdel(params, 0, 1); slot--;
    }

    if(slot < 0 || slot >= MAX_INVENTORY_ITEMS)return
        KullanimMesajiC(playerid, "/telefon [slot]");

    if(slot == -1 || PlayerInfo[playerid][pMobile] != -1)
        return HataMesajiC(playerid, "Cep telefonun yok.");

    new listid = PlayerInfo[playerid][pInvList][slot];

    if(InventoryObjects[listid][invType] != ITEM_PHONE)
        return HataMesajiC(playerid, "Seçtiðiniz envanter slotunda telefon bulunmuyor.");

    new telstring[1024], telno[32], telnom;
    telnom = slot;

    PlayerInfo[playerid][pPhoneID] = slot;

    format(telno, sizeof(telno), "Telefon (%d)", PlayerInfo[playerid][pInvAmount][telnom]);

    new tdurum[32];
    if(!PlayerInfo[playerid][pInvExtra][slot])
        format(tdurum, 50, "{FF6347}[Kapalý]");
    else format(tdurum, 50, "{41D225}[Açýk]");

    new sesdurum[32];
    if(PlayerInfo[playerid][pInvExtra][slot] == 1)
        format(sesdurum, 50, "{41D225}[Açýk]");
    else format(sesdurum, 50, "{FF6347}[Kapalý]");

    PlayerInfo[playerid][pItemID] = slot;

    if(!PlayerInfo[playerid][pTelefonTick])
        PlayerAME(playerid, "cep telefonunu cebinden alýr ve ekrana bakar.");

    format(telstring, sizeof(telstring), "Telefon\t%s\nZil Sesi\t%s\nArama Yap\t{FF6347}>> Numara Gir\nMesaj Gönder\t{FF6347}>> Numara Gir\nMesajlar\t{FF6347}>> Ýncele\nArama Geçmiþi\t{FF6347}>> Ýncele\nTelefon Rehberi\t{FF6347}>> Ýncele\nMüzik\t{FF6347}>> Dinle\nKonum Servisi\t{FF6347}>> Ýncele\nTelefon Kýlýfý Satýn Al\t{FF6347}>> Ýncele", tdurum, sesdurum);
    Dialog_Show(playerid, DialogTelefon, DIALOG_STYLE_TABLIST, telno, telstring, "Ýleri", "Ýptal");
    PlayerInfo[playerid][pTelefonTick] = 1;
    return 1;
}

CMD:ara(playerid, params[])
{
    if(PlayerInfo[playerid][pJailTime] > 1) return HataMesajiC(playerid, "Bu komutu hapiste kullanmazsýn.");

    if(PlayerInfo[playerid][pCuffed]) return HataMesajiC(playerid, "Kelepçeliyken telefonunuzu kullanamazsýnýz.");
    new slot = Inventory_HasItem(playerid, "Cep Telefonu", ITEM_PHONE);

    if(PlayerInfo[playerid][pMobile] != -1) return HataMesajiC(playerid, "Arama esnasýnda bu iþlemi yapamazsýn.");
    if(slot == -1) return HataMesajiC(playerid, "Telefonun yok.");

    if(!sscanf(params, "d", slot) && slot)
    {
        strdel(params, 0, 1); slot--;
    }

    if(slot < 0 || slot >= MAX_INVENTORY_ITEMS)return
        KullanimMesajiC(playerid, "/ara [slot] [numara]");

    new listid = PlayerInfo[playerid][pInvList][slot];

    if(InventoryObjects[listid][invType] != ITEM_PHONE)return
        SunucuMesajiC(playerid, "O slotta telefon yok.");

    if(!PlayerInfo[playerid][pInvExtra][slot])return
        SunucuMesajiC(playerid, "Telefonun kapalý.");

    new contact[32];

    if(sscanf(params, "s[32]", contact) || strlen(contact) > 32) return
        KullanimMesajiC(playerid, "/ara [numara]");

    PlayerInfo[playerid][pPhoneID] = slot;

    if(strval(contact) == RENTER_NUMBER)
    {
        if(PlayerInfo[playerid][pFrequence] != -1 && !PlayerInfo[playerid][pAdminDuty])return
            SunucuMesajiC(playerid, "Zaten bir frekans kiraladýn.");

        return Dialog_Show(playerid, DialogRentFrequence, DIALOG_STYLE_INPUT, "Frekans Kirala", "Saatlik ücret: $5000.", "Ýleri", "Ýptal");
    }

    if(IsNumeric(contact) && strval(contact) > 0)
    {
        new tmpNumber = strval(contact);
        return Phone_CallInit(playerid, tmpNumber);
    }
    // new query[256];

    mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT number FROM phonebooks WHERE owner_number = '%d' AND name LIKE '%%%e%%'", PlayerInfo[playerid][pInvAmount][slot], contact);
    mysql_tquery(ourConnection, queryx, "OnCallNumberSearch", "d", playerid);
    return 1;
}

CMD:sms(playerid, params[])
{
    if(PlayerInfo[playerid][pJailTime] > 1) return HataMesajiC(playerid, "Bu komutu hapiste kullanmazsýn.");

    if(PlayerInfo[playerid][pCuffed]) return HataMesajiC(playerid, "Kelepçeliyken telefonunuzu kullanamazsýnýz.");
    new slot = Inventory_HasItem(playerid, "Cep Telefonu", ITEM_PHONE);

    if(slot == -1)return
        SunucuMesajiC(playerid, "Cep telefonun yok.");

    if(!sscanf(params, "d", slot) && slot)
    {
        strdel(params, 0, 1); slot--;
    }

    if(slot < 0 || slot >= MAX_INVENTORY_ITEMS)return
        KullanimMesajiC(playerid, "/sms [slot] [numara] [mesaj]");

    new listid = PlayerInfo[playerid][pInvList][slot];

    if(InventoryObjects[listid][invType] != ITEM_PHONE)return
        SunucuMesajiC(playerid, "Bu slotta cep telefonu yok.");

    if(!PlayerInfo[playerid][pInvExtra][slot])return
        SunucuMesajiC(playerid, "Telefonun kapalý.");

    new contact[32];
    new message[256];

    if(sscanf(params, "s[32]s[256]", contact, message) || strlen(contact) > 32 || strlen(message) > 256) return
        KullanimMesajiC(playerid, "/sms [numara] [mesaj]");
        
    //if(strval(contact) < 100000) return HataMesaji(playerid, "Bu numaraya mesaj gönderemezsin.");

    PlayerInfo[playerid][pPhoneID] = slot;

    if(IsNumeric(contact) && strval(contact) > 0)
    {
        PlayerInfo[playerid][pNumber] = strval(contact);
        return Phone_SendSMS(playerid, message);
    }

    // new query[256];

    mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT number FROM phonebooks WHERE owner_number = '%d' AND name LIKE '%%%e%%'", PlayerInfo[playerid][pInvAmount][slot], contact);
    mysql_tquery(ourConnection, queryx, "OnSendSMSNumberSearch", "ds", playerid, message);

    return 1;
}

CMD:cevapla(playerid, params[])
{

    if(PlayerInfo[playerid][pJailTime] > 1) return HataMesajiC(playerid, "Bu komutu hapiste kullanmazsýn.");

    if(PlayerInfo[playerid][pCuffed]) return HataMesajiC(playerid, "Kelepçeliyken telefonunuzu kullanamazsýnýz.");
    new slot;
    new listid;

    if(PlayerInfo[playerid][pMobile] != -1)return
        SunucuMesajiC(playerid, "Çaðrý esnasýnda telefon sisteminin diðer fonksiyonlarýndan yararlanamazsýnýz.");

    if(sscanf(params, "d", slot) || slot < 1 || slot > MAX_INVENTORY_ITEMS)return
        KullanimMesajiC(playerid, "/cevapla [slot]");

    slot--;  listid = PlayerInfo[playerid][pInvList][slot];

    if(InventoryObjects[listid][invType] != ITEM_PHONE)return
        SunucuMesajiC(playerid, "Bu slotta cep telefonu yok.");

    new id = -1;

    foreach(new x : Player)
    {
        if(!IsPlayerConnected(x) || PlayerInfo[x][pMobile] != PlayerInfo[playerid][pInvAmount][slot])continue;
        if(PlayerInfo[playerid][pIncomingCall] != x)continue;

        id = x; break;
    }

    if(id == -1)return
        SunucuMesajiC(playerid, "Bu cep telefonundan arama almýyorsun.");

    BasariMesaji(id, "%d aramayý cevapladý.", GetPVarInt(id, "AradigiNumara"));
    KillTimer(PlayerInfo[id][pCallTimer]);
    PlayerInfo[id][AramaYanitlandi] = true;
    PlayerInfo[playerid][AramaYanitlandi] = true;
    
    new itemid = PlayerInfo[id][pPhoneID];
    new burnerID = Inventory_IsBurnerPhone(id, itemid);
    if(burnerID) {
        Inventory_DecraseAmount(id, itemid, PlayerInfo[id][pInvAmount][itemid]);
        EnvanterIDDuzelt(id, itemid);
    }
    OAC_GivePlayerMoney(id, -1);
    SendClientMessageEx(playerid, COLOR_GREEN, "Aramayý cevapladýn.");

    SendClientMessageEx(id, COLOR_GREEN, "Çaðrýyý sonlandýrmak istediðin zaman /tkap komutunu kullanabilirsin.");
    SendClientMessageEx(playerid, COLOR_GREEN, "Çaðrýyý sonlandýrmak istediðin zaman /tkap komutunu kullanabilirsin.");

    PlayerInfo[playerid][pMobile] = id;
    PlayerInfo[id][pMobile] = playerid;
    PlayerInfo[playerid][pIncomingCall] = -1;
    PlayerInfo[id][pIncomingCall] = -1;
    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
    SetPlayerAttachedObject(playerid, 8, PlayerInfo[playerid][pTelefonKilifi], 6, 0.102, 0.012, 0.022, -112.7, 0, 175.1, 1, 1, 1);

    PlayerAME(playerid, "telefonu eline alýr ve çaðrýyý yanýtlar.");
    DeletePVar(playerid, "TelefonuCaliyor");

    PlayerInfo[id][pCallTime] = SetTimerEx("ToggleMoney", 30000, true, "dd", id, -1);

    return 1;
}

CMD:aramared(playerid, params[])
{
    if(PlayerInfo[playerid][pCuffed]) return HataMesajiC(playerid, "Kelepçeliyken telefonunuzu kullanamazsýnýz.");
    new slot;
    new listid;

    if(PlayerInfo[playerid][pMobile] != -1)return
        SunucuMesajiC(playerid, "Çaðrý esnasýnda telefon sisteminin diðer fonksiyonlarýndan yararlanamazsýnýz.");

    if(sscanf(params, "d", slot) || slot < 1 || slot > MAX_INVENTORY_ITEMS)return
        KullanimMesajiC(playerid, "/aramared [slot]");

    slot--;  listid = PlayerInfo[playerid][pInvList][slot];

    if(InventoryObjects[listid][invType] != ITEM_PHONE)return
        SunucuMesajiC(playerid, "Bu slotta cep telefonu yok.");

    new id = -1;

    foreach(new x : Player)
    {
        if(!IsPlayerConnected(x) || PlayerInfo[x][pMobile] != PlayerInfo[playerid][pInvAmount][slot])continue;
        if(PlayerInfo[playerid][pIncomingCall] != x)continue;

        id = x; break;
    }

    if(id == -1)return
        SunucuMesajiC(playerid, "Bu cep telefonundan arama almýyorsun.");

    KillTimer(PlayerInfo[id][pCallTimer]);
    BasariMesaji(id, "Aradýðýn numara (%d) þu anda meþgul.", GetPVarInt(id, "AradigiNumara"));
    PlayerInfo[id][AramaYanitlandi] = false;
    PlayerInfo[playerid][AramaYanitlandi] = false;
    OAC_GivePlayerMoney(id, -1);
    SendClientMessageEx(playerid, COLOR_GREEN, "Aramayý reddettin.");

    PlayerInfo[playerid][pMobile] = -1;
    PlayerInfo[id][pMobile] = -1;
    PlayerInfo[playerid][pIncomingCall] = -1;
    PlayerInfo[id][pIncomingCall] = -1;
    DeletePVar(playerid, "TelefonuCaliyor");

    //PlayerAME(playerid, "telefonu eline alýr ve çaðrýyý reddeder.");
    Phone_HangupCall(playerid);
    TogglePlayerControllable(playerid, 1);
    return 1;
}

CMD:tkap(playerid, params[])
{
    if(PlayerInfo[playerid][pJailTime] > 1) return HataMesajiC(playerid, "Bu komutu hapiste kullanmazsýn.");

    if(PlayerInfo[playerid][pCuffed]) return HataMesajiC(playerid, "Kelepçeliyken bunu yapamazsýnýz.");
    Phone_HangupCall(playerid);
    KillTimer(PlayerInfo[playerid][pCallTimer]);
    TogglePlayerControllable(playerid, 1);
    DeletePVar(playerid, "TelefonuCaliyor");
    return 1;
}

CMD:kulube(playerid, params[])
{
    if(PlayerInfo[playerid][pCuffed]) return HataMesajiC(playerid, "Kelepçeliyken telefonunuzu kullanamazsýnýz.");
    if(GetNearestPayPhone(playerid) == -1)return
        SunucuMesajiC(playerid, "Telefon kulübesine yakýn deðilsin.");

    if(PlayerInfo[playerid][pMobile] != -1)return
        SunucuMesajiC(playerid, "Arama esnasýnda telefon sisteminin diðer fonksiyonlarýndan yararlanamazsýnýz.");

    new pid = GetNearestPayPhone(playerid);

    if(PayPhoneInfo[pid][cDialing])
    {
        DestroyDynamicPickup(PayPhoneInfo[pid][cDialObject]);
        PayPhoneInfo[pid][cDialing] = 0;
        BasariMesaji(playerid, "%d numarasý ile görüþüyorsunuz.", ArayanNumara[pid]);
        ArayanNumara[pid] = 0;
        new id = -1;

        foreach(new x : Player)
        {
            if(!IsPlayerConnected(x) || PlayerInfo[x][pMobile] != PayPhoneInfo[pid][cNumber])continue;
            id = x; break;
        }

        if(id == -1)return
            SunucuMesajiC(playerid, "Çaðrýdaki kiþi çýkýþ yaptý.");

        BasariMesaji(id, "%s aramayý cevapladý.", ReturnRoleplayName(playerid));
        SendClientMessageEx(playerid, COLOR_GREEN, "Aramayý cevapladýn.");

        SendClientMessageEx(id, COLOR_GREEN, "Çaðrýyý sonlandýrmak istediðin zaman /tkap komutunu kullanabilirsin.");
        SendClientMessageEx(playerid, COLOR_GREEN, "Çaðrýyý sonlandýrmak istediðin zaman /tkap komutunu kullanabilirsin.");
        //SendClientMessageEx(playerid, COLOR_ADMIN, "UYARI: {FFFFFF}Hareket etmeniz durumunda telefon kapanacaktýr.");

        PlayerInfo[playerid][pMobile] = id;
        PlayerInfo[id][pMobile] = playerid;

        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
        SetPlayerAttachedObject(playerid, 8, 330, 6, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 );
        TogglePlayerControllable(playerid, false);
        PlayerAME(playerid, "kulübenin çalan telefonunu açar.");
        TogglePlayerControllable(playerid, false);

        PlayerInfo[id][pCallTime] = SetTimerEx("ToggleMoney", 30000, true, "dd", id, -1);

        return 1;
    }

    new number;

    if(sscanf(params, "d", number) || !number)
    {
        SendFormattedMessage(playerid, COLOR_GREY, "[KULÜBE NUMARASI]: %d", PayPhoneInfo[pid][cNumber]);
        return KullanimMesajiC(playerid, "/kulube [numara]");
    }

    if(number == PayPhoneInfo[pid][cNumber])return
        SunucuMesajiC(playerid, "Bulunduðun kabini arayamazsýn.");

    PlayerInfo[playerid][pUsingPP] = pid;
    Phone_CallInit(playerid, number);
    TogglePlayerControllable(playerid, false);

    return 1;
}
CMD:kilitkir(playerid, params[])
{
    if(PlayerInfo[playerid][pLevel] < 10) return
        SunucuMesajiC(playerid, "Seviye 10 ve üstü kullanýcýlar bunu yapabilirler.");

    if(InSafeZone(playerid)) return HataMesajiC(playerid, "Bu bölgede bu sistemden yararlanamazsýnýz.");

    if(!PlayerInfo[playerid][pAletCantasi]) return HataMesajiC(playerid, "Pay'n Spray'dan alet çantasý satýn alýn. (/aletcantasi)");

    PlayerInfo[playerid][pBreakOpen] = !PlayerInfo[playerid][pBreakOpen];

    Player_Info(playerid, (PlayerInfo[playerid][pBreakOpen]) ? ("Kilit kirma ~g~aktif~w~.") : ("Kilit kirma ~r~deaktif~w~."), true);

    return 1;
}

CMD:frot(playerid, params[])
{
    if(PlayerInfo[playerid][pEditingMode] != 2) return HataMesajiC(playerid, "Herhangi bir mobilyayý düzenlemiyorsunuz.");

    new Float:rx,
        Float:ry,
        Float:rz,

        Float:oldrx,
        Float:oldry,
        Float:oldrz,

        itemid = PlayerInfo[playerid][pSelectedItem];

    GetDynamicObjectRot(itemid, oldrx, oldry, oldrz);

    if(sscanf(params, "fff", rx, ry, rz))
    {
        KullanimMesajiC(playerid, "/frot <rx> <ry> <rz>");
        return SendFormattedMessage(playerid, COLOR_GREY, "[ÖRNEK] RX: %f - RY: %f - RZ: %f", oldrx, oldry, oldrz);
    }

    SetDynamicObjectRot(itemid, rx, ry, rz);
    EditDynamicObject(playerid, itemid);
    BasariMesaji(playerid, "Seçtiðiniz mobilyanýn rotasyon deðerini baþarýyla deðiþtirdiniz.");
    return 1;
}

CMD:piyangoal(playerid, params[])
{
    if(GetPlayerVirtualWorld(playerid) < BUILDING_WORLD)
    {
        if(PlayerInfo[playerid][pCash] < BILETPARASI+100) return HataMesaji(playerid, "Yeterli paranýz yok. ($%d)", BILETPARASI+100);
        if(!IsNumeric(params)) return HataMesaji(playerid, "Lütfen sayýsal bir deðer girin. Bilet numaralarý 0 ile 100 arasýndadýr, 0 ve 100 dahil deðildir.");
        if(!strlen(params)) return KullanimMesaji(playerid, "/piyangoal <numara(1-99)>");
        if(strval(params) < 1 || strval(params) > 99) return HataMesaji(playerid, "Bilet numaralarý 0 ile 100 arasýndadýr, 0 ve 100 dahil deðildir.");
        if(PlayerInfo[playerid][pAldigiBilet] != 0) return HataMesaji(playerid, "Zaten bir bilet almýþsýn.");
        new bilet = strval(params);
        if(PiyangoAlindi[bilet]) return HataMesaji(playerid, "Belirttiðiniz bileti bir oyuncu almýþ.");
        PiyangoAlindi[bilet] = 1;
        PlayerInfo[playerid][pAldigiBilet] = bilet;
        AC_GivePlayerMoney(playerid, -(BILETPARASI + 100), "/piyangoal");
        SunucuMesaji(playerid, "%d numaralý piyango biletini aldýnýz, çekiliþ her saat baþýnda yapýlýr, oyundan ayrýlýrsanýz bilet silinir.", bilet);
        PlayerAME(playerid, "bir piyango bileti alýr.");
        BASLANGICPARASI += BILETPARASI / 2;
        if(BASLANGICPARASI > MAKSPARA) BASLANGICPARASI = 2000;
        return 1;
    }
    
    new buildingid = GetPlayerBuilding(playerid, true);
    if(BuildingInfo[buildingid][bType] != STORE)
    {
        if(PlayerInfo[playerid][pCash] < BILETPARASI+100) return HataMesaji(playerid, "Yeterli paranýz yok. ($%d)", BILETPARASI+100);
        if(!IsNumeric(params)) return HataMesaji(playerid, "Lütfen sayýsal bir deðer girin. Bilet numaralarý 0 ile 100 arasýndadýr, 0 ve 100 dahil deðildir.");
        if(!strlen(params)) return KullanimMesaji(playerid, "/piyangoal <numara(1-99)>");
        if(strval(params) < 1 || strval(params) > 99) return HataMesaji(playerid, "Bilet numaralarý 0 ile 100 arasýndadýr, 0 ve 100 dahil deðildir.");
        if(PlayerInfo[playerid][pAldigiBilet] != 0) return HataMesaji(playerid, "Zaten bir bilet almýþsýn.");
        new bilet = strval(params);
        if(PiyangoAlindi[bilet]) return HataMesaji(playerid, "Belirttiðiniz bileti bir oyuncu almýþ.");
        PiyangoAlindi[bilet] = 1;
        PlayerInfo[playerid][pAldigiBilet] = bilet;
        AC_GivePlayerMoney(playerid, -(BILETPARASI + 100), "/piyangoal");
        SunucuMesaji(playerid, "%d numaralý piyango biletini aldýnýz, çekiliþ her saat baþýnda yapýlýr, oyundan ayrýlýrsanýz bilet silinir.", bilet);
        PlayerAME(playerid, "bir piyango bileti alýr.");
        BASLANGICPARASI += BILETPARASI / 2;
        if(BASLANGICPARASI > MAKSPARA) BASLANGICPARASI = 2000;
        return 1;
    }
    if(PlayerInfo[playerid][pCash] < BILETPARASI) return HataMesaji(playerid, "Yeterli paranýz yok. ($%d)", BILETPARASI);

    if(!IsNumeric(params)) return HataMesaji(playerid, "Lütfen sayýsal bir deðer girin. Bilet numaralarý 0 ile 100 arasýndadýr, 0 ve 100 dahil deðildir.");
    if(!strlen(params)) return KullanimMesaji(playerid, "/piyangoal <numara(1-99)>");
    if(strval(params) < 1 || strval(params) > 99) return HataMesaji(playerid, "Bilet numaralarý 0 ile 100 arasýndadýr, 0 ve 100 dahil deðildir.");
    if(PlayerInfo[playerid][pAldigiBilet] != 0) return HataMesaji(playerid, "Zaten bir bilet almýþsýn.");
    new bilet = strval(params);
    if(PiyangoAlindi[bilet]) return HataMesaji(playerid, "Belirttiðiniz bileti bir oyuncu almýþ.");
    PiyangoAlindi[bilet] = 1;
    PlayerInfo[playerid][pAldigiBilet] = bilet;
    AC_GivePlayerMoney(playerid, -BILETPARASI, "/piyangoal");
    SunucuMesaji(playerid, "%d numaralý piyango biletini aldýnýz, çekiliþ her saat baþýnda yapýlýr, oyundan ayrýlýrsanýz bilet silinir.", bilet);
    PlayerAME(playerid, "bir piyango bileti alýr.");
    BASLANGICPARASI += BILETPARASI / 2;
    if(BASLANGICPARASI > MAKSPARA) BASLANGICPARASI = 2000;
    return 1;
}

CMD:fpos(playerid, params[])
{
    if(PlayerInfo[playerid][pEditingMode] != 2) return HataMesajiC(playerid, "Herhangi bir mobilyayý düzenlemiyorsunuz.");

    new Float:mpx,
        Float:mpy,
        Float:mpz,

        Float:oldrx,
        Float:oldry,
        Float:oldrz,

        itemid = PlayerInfo[playerid][pSelectedItem];

    GetDynamicObjectPos(itemid, oldrx, oldry, oldrz);

    if(sscanf(params, "fff", mpx, mpy, mpz))
    {
        KullanimMesajiC(playerid, "/fpos <x> <y> <z>");
        return SendFormattedMessage(playerid, COLOR_GREY, "[ÖRNEK] X: %f - Y: %f - Z: %f", oldrx, oldry, oldrz);
    }

    SetDynamicObjectPos(itemid, mpx, mpy, mpz);
    EditDynamicObject(playerid, itemid);
    BasariMesaji(playerid, "Seçtiðiniz mobilyanýn pozisyon deðerini baþarýyla deðiþtirdiniz.");
    return 1;
}

CMD:dekorasyonid(playerid, params[])
{
    if(SunucuBilgi[AntiDinamikObje])
        return HataMesaji(playerid, "Bu sistem geçici olarak geliþtirici ekip tarafýndan pasife çekildi.");

    new buildingid = GetPlayerMenuBiz(playerid);
    new houseid = GetPlayerMenuHouse(playerid);

    if(houseid != -1 || buildingid != -1)
    {
        if(houseid != -1 && GetPlayerMenuHouse(playerid, true) != houseid)return 1;
        if(buildingid != -1 && GetPlayerMenuBiz(playerid, true) != buildingid)return 1;
        if(houseid != -1) {
            if(HouseInfo[houseid][hOwner] != PlayerInfo[playerid][pID]) {
                if(HasPlayerUserKey(playerid, KEY_HOUSE, HouseInfo[houseid][hID]) > 0 && HouseInfo[houseid][hDekorKilit] && PlayerInfo[playerid][pAdmin] < 2) return HataMesajiC(playerid, "Bu evin sahibi dekorlarýný kilitlemiþ.");
            }
        } else if(buildingid != -1) {
            if(BuildingInfo[buildingid][bOwner] != PlayerInfo[playerid][pID] && buildingid != -1) {
                if(HasPlayerUserKey(playerid, KEY_BUILDING, BuildingInfo[buildingid][bID]) > 0 && BuildingInfo[buildingid][bDekorKilit] && PlayerInfo[playerid][pAdmin] < 2) return HataMesajiC(playerid, "Bu iþyerinin sahibi dekorlarýný kilitlemiþ.");
            }
        }
        if(!PlayerInfo[playerid][pShowingID])
        {
            // new query[90];
            new VW = GetPlayerVirtualWorld(playerid);

            mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT * FROM furnitures WHERE world = '%d'", VW);
            mysql_tquery(ourConnection, queryx, "OnFurnitureOptions", "dd", playerid, 1);
        }
        else return Furniture_DestroyLabels(playerid);

        PlayerInfo[playerid][pShowingID] = !PlayerInfo[playerid][pShowingID];
    }

    return 1;
}

CMD:gatenear(playerid)
{
    new id = YakindakiGate(playerid);
    SunucuMesaji(playerid, "Yakýnýndaki gate numarasý: %d", id);
    return 1;
}

CMD:gatesifre(playerid, params[])
{
    new id = YakindakiGate(playerid);
    static sifre[24];

    if(id != -1)
    {
        if(GateBilgi[id][gateOwner] != PlayerInfo[playerid][pID])
            return HataMesajiC(playerid, "Bu kapýnýn þifresini deðiþtiremezsiniz.");

        if(sscanf(params, "s[24]", sifre))
            return KullanimMesajiC(playerid, "/gatesifre [yeni þifre] (Kaldýrmak için: -1)");

        if(strlen(sifre) < 1 || strlen(sifre) > 24)
            return HataMesajiC(playerid, "Þifre en fazla 24 karakter olabilir.");

        if(!strcmp(sifre, "-1", true)) SunucuMesaji(playerid, "%d nolu gatenin þifresini kaldýrdýnýz.", id);
        else SunucuMesaji(playerid, "%d nolu gatenin þifresini deðiþtirdiniz.", id);
        format(GateBilgi[id][gatePass], 24, sifre);
        return GateDuzenle(id);
    }
    else HataMesajiC(playerid, "Herhangi bir gateye yakýn deðilsiniz.");
    return 1;
}

CMD:gate(playerid, params[])
{
    new id = YakindakiGate(playerid);
    if(id != -1)
    {
        if(GateBilgi[id][GateGise] == 1) return HataMesajiC(playerid, "Yakýnýnda kapý yok.");

        if(GateBilgi[id][gateFaction] != -1)
        {
            if(GateBilgi[id][gateFaction] != PlayerInfo[playerid][pFaction]) return HataMesajiC(playerid, "Bu kapýyý açamýyorsunuz.");
        }
        new sifre[24];
        sscanf(params, "S(-1)[24]", sifre);
        if(strcmp(GateBilgi[id][gatePass], sifre, true) && GateBilgi[id][gateOwner] != PlayerInfo[playerid][pID]) return Dialog_Show(playerid, DialogGatePass, DIALOG_STYLE_INPUT, "Gate Þifresi", "Gate þifresini girin:", "Giriþ", "Ýptal");

        if(GateBilgi[id][gateOwner] == PlayerInfo[playerid][pID])
        {
            GateDurum(id);
            switch(GateBilgi[id][gateOpened])
            {
                case false: SunucuMesajiC(playerid, "Kapý kapatýldý.");
                case true: SunucuMesajiC(playerid, "Kapý açýldý.");
            }
        }
        else if(!strcmp(GateBilgi[id][gatePass], "-1", true))
        {
            GateDurum(id);
            switch(GateBilgi[id][gateOpened])
            {
                case false: SunucuMesajiC(playerid, "Kapý kapatýldý.");
                case true: SunucuMesajiC(playerid, "Kapý açýldý.");
            }
        }
        else HataMesajiC(playerid, "Bunu yapamazsýnýz.");
    }
    else HataMesajiC(playerid, "Yakýnýnda kapý yok.");
    return 1;
}

Dialog:DialogGatePass(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        if(!isnull(inputtext))
        {
            new id = YakindakiGate(playerid);
            if(id != -1)
            {
                if(!strcmp(GateBilgi[id][gatePass], "-1", true)) return HataMesajiC(playerid, "Bu kapýnýn þifre konsolu kapalý.");
                if(!strcmp(GateBilgi[id][gatePass], inputtext, true))
                {
                    GateDurum(id);
                    switch(GateBilgi[id][gateOpened])
                    {
                        case false: SunucuMesajiC(playerid, "Kapý kapatýldý.");
                        case true: SunucuMesajiC(playerid, "Kapý açýldý.");
                    }
                }
                else HataMesajiC(playerid, "Hatalý þifre girdiniz.");
                return true;
            }
            HataMesajiC(playerid, "Yakýnýnda kapý yok!");
        }
        else return HataMesajiC(playerid, "Þifre giriþi baþarýsýz.");
    }
    return 1;
}

CMD:agate(playerid, params[])
{
    new id = YakindakiGate(playerid);
    if(id != -1)
    {
        if(GateBilgi[id][GateGise] == 1) return HataMesajiC(playerid, "Yakýnýnda kapý yok.");

        GateDurum(id);
        switch(GateBilgi[id][gateOpened])
        {
            case false: BasariMesaji(playerid, "Kapý kapatýldý.");
            case true: BasariMesaji(playerid, "Kapý açýldý.");
        }
        return true;
    }
    HataMesajiC(playerid, "Yakýnýnda kapý yok.");

    return 1;
}

flags:gategit(CMD_GAME3);
CMD:gategit(playerid, params[])
{
    new id;
    if(sscanf(params, "d", id)) return KullanimMesajiC(playerid, "/gategit [gateid]");
    if(!GateBilgi[id][gateExists]) return HataMesajiC(playerid, "Geçersiz ID");

    new gateint = GateBilgi[id][gateInt], gatevw = GateBilgi[id][gateVW];

    SetPlayerPos(playerid, GateBilgi[id][gateClosePX], GateBilgi[id][gateClosePY], GateBilgi[id][gateClosePZ]);
    SetPlayerInterior(playerid, gateint);
    AC_SetPlayerVirtualWorld(playerid, gatevw);
    return BasariMesaji(playerid, "%d nolu gateye baþarýyla ýþýnlandýn.", id);
}

GateDurum(id); public GateDurum(id)
{
    new i = id;
    if(GateBilgi[i][gateOpened] == true)
    {
        MoveDynamicObject(GateBilgi[i][gateObject], GateBilgi[i][gateClosePX], GateBilgi[i][gateClosePY], GateBilgi[i][gateClosePZ], GateBilgi[i][gateHiz], GateBilgi[i][gateCloseRX], GateBilgi[i][gateCloseRY], GateBilgi[i][gateCloseRZ]);
        GateBilgi[i][gateOpened] = false;
    }
    else if(GateBilgi[i][gateOpened] == false)
    {
        MoveDynamicObject(GateBilgi[i][gateObject], GateBilgi[i][gateOpenPX], GateBilgi[i][gateOpenPY], GateBilgi[i][gateOpenPZ], GateBilgi[i][gateHiz], GateBilgi[i][gateOpenRX], GateBilgi[i][gateOpenRY], GateBilgi[i][gateOpenRZ]);
        GateBilgi[i][gateOpened] = true;
    }
    return 1;
}
/*stock AdminRutbe(playerid)
{
new str[24];
switch(PlayerInfo[j][pAdmin] == 140)
case 1:str = "Management"
switch(PlayerInfo[j][pAdmin] == 150)
case 2:str = "Developer"
return str;
}*/

stock GiseBul(playerid)
{
    for (new i = 0; i != MAX_GATES; i ++)
    {
        if(GateBilgi[i][GateGise])
        {
            if(!GateBilgi[i][gateOpened] && IsPlayerInRangeOfPoint(playerid, 75.0, GateBilgi[i][gateClosePX], GateBilgi[i][gateClosePY], GateBilgi[i][gateClosePZ]))
            {
                if(GetPlayerInterior(playerid) == GateBilgi[i][gateInt] && GetPlayerVirtualWorld(playerid) == GateBilgi[i][gateVW])
                    return i;
            }
            else if(GateBilgi[i][gateOpened] && IsPlayerInRangeOfPoint(playerid, 75.0, GateBilgi[i][gateOpenPX], GateBilgi[i][gateOpenPY], GateBilgi[i][gateOpenPZ]))
            {
                if(GetPlayerInterior(playerid) == GateBilgi[i][gateInt] && GetPlayerVirtualWorld(playerid) == GateBilgi[i][gateVW])
                    return i;
            }
        }
    }
    return -1;
}

stock GiseBulVeh(vehicleid)
{
    for (new i = 0; i != MAX_GATES; i ++)
    {
        if(GateBilgi[i][GateGise])
        {
            if(!GateBilgi[i][gateOpened] && IsVehicleRangeOfPoint(vehicleid, 50.0, GateBilgi[i][gateClosePX], GateBilgi[i][gateClosePY], GateBilgi[i][gateClosePZ]))
            {
                if(VehicleInfo[vehicleid][vInterior] == GateBilgi[i][gateInt] && VehicleInfo[vehicleid][vWorld] == GateBilgi[i][gateVW])
                    return i;
            }
            else if(GateBilgi[i][gateOpened] && IsVehicleRangeOfPoint(vehicleid, 50.0, GateBilgi[i][gateOpenPX], GateBilgi[i][gateOpenPY], GateBilgi[i][gateOpenPZ]))
            {
                if(VehicleInfo[vehicleid][vInterior] == GateBilgi[i][gateInt] && VehicleInfo[vehicleid][vWorld] == GateBilgi[i][gateVW])
                    return i;
            }
        }
    }
    return -1;
}

stock YakindakiGate(playerid)
{
    for (new i = 0; i != MAX_GATES; i ++)
    {
        if(!GateBilgi[i][gateOpened] && IsPlayerInRangeOfPoint(playerid, GateBilgi[i][gateMenzil], GateBilgi[i][gateClosePX], GateBilgi[i][gateClosePY], GateBilgi[i][gateClosePZ]))
        {
            if(GetPlayerInterior(playerid) == GateBilgi[i][gateInt] && GetPlayerVirtualWorld(playerid) == GateBilgi[i][gateVW])
                return i;
        }
        else if(GateBilgi[i][gateOpened] && IsPlayerInRangeOfPoint(playerid, GateBilgi[i][gateMenzil], GateBilgi[i][gateOpenPX], GateBilgi[i][gateOpenPY], GateBilgi[i][gateOpenPZ]))
        {
            if(GetPlayerInterior(playerid) == GateBilgi[i][gateInt] && GetPlayerVirtualWorld(playerid) == GateBilgi[i][gateVW])
                return i;
        }
    }
    return -1;
}

CMD:kapi(playerid, params[])
{
    new buildingid = GetPlayerBuilding(playerid, true);
    new houseid = GetPlayerHouse(playerid, true);

    if(houseid != -1 || buildingid != -1)
    {
        if(houseid != -1 && GetPlayerMenuHouse(playerid, true) != houseid)return 1;
        if(buildingid != -1 && GetPlayerMenuBiz(playerid, true) != buildingid)return 1;

        // new query[90];
        new VW = GetPlayerVirtualWorld(playerid);

        mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT * FROM furnitures WHERE world = '%d'", VW);
        mysql_tquery(ourConnection, queryx, "OnFurnitureOptions", "dd", playerid, 0);
    }

    return 1;
}
CMD:mikrofon(playerid, params[])
{
    if(isnull(params) || strlen(params) > 256)return
        KullanimMesajiC(playerid, "/mikrofon [yazý]");

    new buildingid = GetPlayerBuilding(playerid, true);

    if(buildingid != -1)
    {
        new id = BuildingInfo[buildingid][bID];
        if(buildingid != -1 && (BuildingInfo[buildingid][bFaction] != -1 && (PlayerInfo[playerid][pFaction] != BuildingInfo[buildingid][bFaction]) || !PlayerInfo[playerid][pRank]) && PlayerInfo[playerid][pID] != BuildingInfo[buildingid][bOwner] && !HasPlayerUserKey(playerid, KEY_BUILDING, id))return 1;

        new string[256];

        format(string, sizeof(string), "[Mikrofon] %s: %s", ReturnRoleplayName(playerid), params);
        ProxDetector(50.0, playerid, string, COLOR_LIGHTGREEN, COLOR_LIGHTGREEN, COLOR_LIGHTGREEN, COLOR_LIGHTGREEN, COLOR_LIGHTGREEN);
    }
    else return HataMesajiC(playerid, "Bu komutu sadece iþletmelerde kullanabilirsin, suistimal etmeyin.");

    return 1;
}
CMD:concert(playerid, params[])
{
    if(isnull(params) || strlen(params) > 256)return
        KullanimMesajiC(playerid, "/mikrofon [yazý]");

    if(PlayerInfo[playerid][pKonserIzin] == -1)return
    SendFormattedMessage(playerid, COLOR_GREY, "Konser mikrofonun bulunmadýðý için bunu yapamazsýn.");

    new string[256];
    format(string, sizeof(string), "[Mikrofon] %s: %s", ReturnRoleplayName(playerid), params);
    ProxDetector(70.0, playerid, string, COLOR_LIGHTGREEN, COLOR_LIGHTGREEN, COLOR_LIGHTGREEN, COLOR_LIGHTGREEN, COLOR_LIGHTGREEN);
    return 1;
}
flags:konserizin(CMD_GAME1);
CMD:konserizin(playerid, params[])
{
    new id;

    if(sscanf(params, "u", id))return
        KullanimMesajiC(playerid, "/konserizin [id/isim]");

    if(!IsPlayerConnected(id) || !PlayerInfo[id][pLogged])return
        HataMesajiC(playerid, "Geçersiz ID.");

    if(PlayerInfo[id][pKonserIzin] == -1) {
        SendAdminAlert(false, COLOR_ADMIN, "AdmCmd: %s, %s adlý oyuncuya konser izni verdi.", PlayerInfo[playerid][pUsername], PlayerInfo[id][pUsername]);
        SendClientMessageEx(id, COLOR_ADMIN, "Administrator sana konser izni verdi.");
        PlayerInfo[id][pKonserIzin] = 1;
    }
    else {
        SendAdminAlert(false, COLOR_ADMIN, "AdmCmd: %s, %s adlý oyuncunun konser iznini geri aldý.", PlayerInfo[playerid][pUsername], PlayerInfo[id][pUsername]);
        SendClientMessageEx(id, COLOR_ADMIN, "Administrator konser iznini geri aldý.");
        PlayerInfo[id][pKonserIzin] = -1;
    }
    return 1;
}
CMD:mic(playerid, params[]) return pc_cmd_mikrofon(playerid, params);

CMD:placeobject(playerid, params[])
{
    if(SunucuBilgi[AntiDinamikObje])
        return HataMesaji(playerid, "Bu sistem geçici olarak geliþtirici ekip tarafýndan pasife çekildi.");
        
    Dialog_Show(playerid, DialogFurniture, DIALOG_STYLE_LIST, "Dekorasyon", "Satýn Al\nYerleþtirilen Mobilya Listesi\nBilgi\nTüm mobilyalarý sat", "Ýleri", "Geri");
    return 1;
}
CMD:adekorsec(playerid)
{
    if(PlayerInfo[playerid][pAdmin] < 10) return pc_cmd_dekorsec(playerid, "");

    if(SunucuBilgi[DekorSecDurum])
    {
        BasariMesaji(playerid, "Dekor seçme sistemi pasife alýndý.");
        SunucuBilgi[DekorSecDurum] = 0;
    }
    else
    {
        BasariMesaji(playerid, "Dekor seçme sistemi aktif edildi.");
        SunucuBilgi[DekorSecDurum] = 1;
    }
    return 1;
}

flags:aobjesec(CMD_jamyPlus);
CMD:aobjesec(playerid, params[])
{
    if(SunucuBilgi[AntiDinamikObje])
        return HataMesaji(playerid, "Bu sistem geçici olarak geliþtirici ekip tarafýndan pasife çekildi.");
        
    BasariMesaji(playerid, "Sunucudaki dinamik objeleri düzenlemeye baþladýnýz.");
    SetPVarInt(playerid, "aObjeSec", 1);
    SelectObject(playerid);
    return 1;
}

flags:dekorsec(CMD_USER);
CMD:dekorsec(playerid, params[])
{
    if(SunucuBilgi[AntiDinamikObje])
        return HataMesaji(playerid, "Bu sistem geçici olarak geliþtirici ekip tarafýndan pasife çekildi.");
        
    if(!SunucuBilgi[DekorSecDurum]) return HataMesajiC(playerid, "Bu komut geçici olarak pasife çekilmiþ.");
    
    if(PlayerInfo[playerid][pEditingMode])
        return HataMesajiC(playerid, "Düzenleme yaparken bunu yapamazsýn.");

    DeletePVar(playerid, "aObjeSec");

    new buildingid = GetPlayerMenuBiz(playerid);
    new houseid = GetPlayerMenuHouse(playerid);
    if(houseid != -1 || buildingid != -1)
    {
        if(houseid != -1 && GetPlayerMenuHouse(playerid, true) != houseid)return 1;
        if(buildingid != -1 && GetPlayerMenuBiz(playerid, true) != buildingid)return 1;
        if(houseid != -1) {
            if(HouseInfo[houseid][hOwner] != PlayerInfo[playerid][pID]) {
                if(HasPlayerUserKey(playerid, KEY_HOUSE, HouseInfo[houseid][hID]) > 0 && HouseInfo[houseid][hDekorKilit] && PlayerInfo[playerid][pAdmin] < 2) return HataMesajiC(playerid, "Bu evin sahibi dekorlarýný kilitlemiþ.");
            }
        } else if(buildingid != -1) {
            if(BuildingInfo[buildingid][bOwner] != PlayerInfo[playerid][pID] && buildingid != -1) {
                if(HasPlayerUserKey(playerid, KEY_BUILDING, BuildingInfo[buildingid][bID]) > 0 && BuildingInfo[buildingid][bDekorKilit] && PlayerInfo[playerid][pAdmin] < 2) return HataMesajiC(playerid, "Bu iþyerinin sahibi dekorlarýný kilitlemiþ.");
            }
        }
        if(PlayerInfo[playerid][pAdmin] < 6 && buildingid != -1 && HasPlayerUserKey(playerid, KEY_BUILDING, BuildingInfo[buildingid][bID]) == 0 && (HasPlayerUserKey(playerid, KEY_BUILDING, BuildingInfo[buildingid][bID]) && BuildingInfo[buildingid][bDekorKilit]) && PlayerInfo[playerid][pID] != BuildingInfo[buildingid][bOwner] && PlayerInfo[playerid][pCalistigiIsyeri][0] != buildingid)
            return HataMesajiC(playerid, "Bu komutu kullanamazsýnýz.");

        if(PlayerInfo[playerid][pAdmin] < 6 && buildingid != -1 && HasPlayerUserKey(playerid, KEY_BUILDING, BuildingInfo[buildingid][bID]) == 0 && PlayerInfo[playerid][pCalistigiIsyeri][0] == buildingid && PlayerInfo[playerid][pID] != BuildingInfo[buildingid][bOwner])
            return HataMesajiC(playerid, "Bu komutu kullanamazsýnýz.");

        SelectObject(playerid);
    }
    else HataMesajiC(playerid, "Bu komutu sadece yetkiniz olan ev ve iþletmelerde kullanabilirsiniz.");
    return 1;
}

CMD:dekorasyon(playerid, params[])
{
    if(SunucuBilgi[AntiDinamikObje])
        return HataMesaji(playerid, "Bu sistem geçici olarak geliþtirici ekip tarafýndan pasife çekildi.");
        
    if(PlayerInfo[playerid][pEditingMode])return
        SunucuMesajiC(playerid, "Düzenleme yaparken bunu yapamazsýn.");
        
    new buildingid = GetPlayerMenuBiz(playerid);
    new houseid = GetPlayerMenuHouse(playerid);
    if(houseid != -1 || buildingid != -1)
    {
        if(houseid != -1 && GetPlayerMenuHouse(playerid, true) != houseid)return 1;
        if(buildingid != -1 && GetPlayerMenuBiz(playerid, true) != buildingid)return 1;
        if(houseid != -1) {
            if(HouseInfo[houseid][hOwner] != PlayerInfo[playerid][pID]) {
                if(HasPlayerUserKey(playerid, KEY_HOUSE, HouseInfo[houseid][hID]) > 0 && HouseInfo[houseid][hDekorKilit] && PlayerInfo[playerid][pAdmin] < 2) return HataMesajiC(playerid, "Bu evin sahibi dekorlarýný kilitlemiþ.");
            }
        } else if(buildingid != -1) {
            if(BuildingInfo[buildingid][bOwner] != PlayerInfo[playerid][pID] && buildingid != -1) {
                if(HasPlayerUserKey(playerid, KEY_BUILDING, BuildingInfo[buildingid][bID]) > 0 && BuildingInfo[buildingid][bDekorKilit] && PlayerInfo[playerid][pAdmin] < 2) return HataMesajiC(playerid, "Bu iþyerinin sahibi dekorlarýný kilitlemiþ.");
            }
        }
        if(PlayerInfo[playerid][pAdmin] < 6 && buildingid != -1 && HasPlayerUserKey(playerid, KEY_BUILDING, BuildingInfo[buildingid][bID]) > 0 && PlayerInfo[playerid][pID] != BuildingInfo[buildingid][bOwner] && !BuildingInfo[buildingid][bDekorKilit])
            return Dialog_Show(playerid, DialogFurniture, DIALOG_STYLE_LIST, "Dekorasyon", "Satýn Al\nYerleþtirilen Mobilya Listesi\nBilgi", "Ýleri", "Geri");
        else if(PlayerInfo[playerid][pAdmin] < 6 && buildingid != -1 && HasPlayerUserKey(playerid, KEY_BUILDING, BuildingInfo[buildingid][bID]) == 0 && PlayerInfo[playerid][pCalistigiIsyeri][0] == buildingid && PlayerInfo[playerid][pID] != BuildingInfo[buildingid][bOwner] && !BuildingInfo[buildingid][bDekorKilit])
            return HataMesajiC(playerid, "Bu komutu kullanamazsýnýz.");
        else if(PlayerInfo[playerid][pAdmin] < 6 && houseid != -1 && HasPlayerUserKey(playerid, KEY_HOUSE, HouseInfo[houseid][hID]) > 0 && HouseInfo[houseid][hOwner] != PlayerInfo[playerid][pID] && !HouseInfo[houseid][hDekorKilit])
            return Dialog_Show(playerid, DialogFurniture, DIALOG_STYLE_LIST, "Dekorasyon", "Satýn Al\nYerleþtirilen Mobilya Listesi\nBilgi", "Ýleri", "Geri");
        else if(PlayerInfo[playerid][pAdmin] < 6 && houseid != -1 && HouseInfo[houseid][hOwner] != PlayerInfo[playerid][pID]) return HataMesajiC(playerid, "Bu evin dekorasyon sistemi kilitli.");
        else if(PlayerInfo[playerid][pAdmin] < 6 && buildingid != -1 && BuildingInfo[buildingid][bOwner] != PlayerInfo[playerid][pID]) return HataMesajiC(playerid, "Bu iþyerinin dekorasyon sistemi kilitli.");
        Dialog_Show(playerid, DialogFurniture, DIALOG_STYLE_LIST, "Dekorasyon", "Satýn Al\nYerleþtirilen Mobilya Listesi\nBilgi\nTüm mobilyalarý sat", "Ýleri", "Geri");
    }
    else SunucuMesajiC(playerid, "Bu komutu sadece evlerin veya binalarýn içerisinde kullanabilirsin.");
    return 1;
}
CMD:kapiyavur(playerid, params[])
{
    if(GetPlayerHouse(playerid, false) == -1 && GetPlayerBuilding(playerid, false) == -1)return
        SunucuMesajiC(playerid, "Bir eve veya iþletmeye yakýn deðilsin.");
        
    if(GetTickCount() - PlayerInfo[playerid][pSendedCare] < 3000)
        return HataMesajiC(playerid, "Spam korumasý devrede, bu komutu bu kadar sýk kullanmayýn.");

    new h = GetPlayerHouse(playerid, false);
    new b = GetPlayerBuilding(playerid, false);

    new world = (h != -1) ? HouseInfo[h][hWorld] : BuildingInfo[b][bWorld];

    foreach(new x : Player) if(GetPlayerVirtualWorld(x) == world)
        SendFormattedMessage(x, COLOR_PURPLE, "** Evin kapýsýný çalýyor. (( %s ))", ReturnRoleplayName(playerid, true));

    PlayerAME(playerid, "kapýya vurur.");
    PlayerInfo[playerid][pSendedCare] = GetTickCount();
    return 1;
}

CMD:kulubegit(playerid, params[])
{
    new id;

    if(sscanf(params, "d", id))return
        KullanimMesajiC(playerid, "/kulubegit [id]");

    if(id < 0 || id >= MAX_PAYPHONES || !PayPhoneInfo[id][cExists])return
        SunucuMesajiC(playerid, "Kulübe bulunamadý.");

    SetPlayerPos(playerid, PayPhoneInfo[id][cPosX]+1.0, PayPhoneInfo[id][cPosY], PayPhoneInfo[id][cPosZ]);
    AC_SetPlayerVirtualWorld(playerid, 0);
    SetPlayerInterior(playerid, 0);

    return 1;
}
CMD:kulubekontrol(playerid, params[])
{
    foreach(new j : PayPhones)
    {
        if(!PayPhoneInfo[j][cExists])continue;

        if(IsPlayerInRangeOfPoint(playerid, 100.0, PayPhoneInfo[j][cPosX], PayPhoneInfo[j][cPosY], PayPhoneInfo[j][cPosZ]))
            SunucuMesaji(playerid, "ID %d: %d.", j, PayPhoneInfo[j][cNumber]);
    }

    return 1;
}
CMD:pedit(playerid, params[])
{
    if(PlayerInfo[playerid][pEditingMode])return
        SunucuMesajiC(playerid, "Düzenleme yaparken bunu yapamazsýn.");

    new id = GetNearestPayPhone(playerid),
        option[20],
        number[8];

    if(id == -1)return
        SunucuMesajiC(playerid, "Telefon kulübesine yakýn deðilsin.");

    if(sscanf(params, "s[20]S()[8]", option, number))return
        KullanimMesajiC(playerid, "/pedit [pozisyon - numara]");

    if(!strcmp(option, "pozisyon", true))
    {
        PlayerInfo[playerid][pEditingMode] = 4;
        PlayerInfo[playerid][pSelectedItem] = id;

        EditDynamicObject(playerid, PayPhoneInfo[id][cObject]);

        SunucuMesajiC(playerid, "Ýptal etmek için ESC veya boþluk tuþuna basýn, kaydetmek için diskete týklayýn.");

    }
    else if(!strcmp(option, "numara", true))
    {
        if(!strlen(number))return
            KullanimMesajiC(playerid, "/pedit [id] [numara] [nnnnnn]");

        if(strlen(number) != 6)return
            SunucuMesajiC(playerid, "Numara 6 rakam uzunluðunda olmalý.");

        foreach(new j : PayPhones)
        {
            if(PayPhoneInfo[j][cExists] && strval(number) == PayPhoneInfo[j][cNumber])return
                SunucuMesajiC(playerid, "Numara zaten kullanýlýyor.");
        }

        PayPhoneInfo[id][cNumber] = strval(number);

        SavePayPhone(id);

    }
    else return
        HataMesajiC(playerid, "Geçersiz parametre.");

    SendAworkAlert(false, COLOR_ADMIN, "AdmCmd: %s %d ID'li kulübeyi düzenledi. Seçim: \"%s\" - deðiþtirilen deðer: \"%d\".", ReturnRoleplayName(playerid), id, option, strval(number));

    return 1;
}

CMD:ccreate(playerid, params[])
{
    new id = Iter_Free(Companies),
        Float:pX, Float:pY, Float:pZ, type, name[50];

    if(id >= MAX_COMPANIES)return
        SunucuMesajiC(playerid, "Maksimum limite ulaþýldý.");

    if(sscanf(params, "ds[50]", type, name))return
        KullanimMesajiC(playerid, "/ccreate [tip] [isim]");

    if(type < APPLIANCES || type > HIRSIZLIK)return
        HataMesaji(playerid, "Geçersiz seçenek. (%d - %d)", APPLIANCES, HIRSIZLIK);

    GetPlayerPos(playerid, pX, pY, pZ);

    foreach(new companyid : Companies)
    {
        if(!IsPlayerInRangeOfPoint(playerid, 0.1, CompanyInfo[companyid][cBuyPosX], CompanyInfo[companyid][cBuyPosY], CompanyInfo[companyid][cBuyPosZ]) && GetPlayerInterior(playerid) == CompanyInfo[companyid][cInterior] && GetPlayerVirtualWorld(playerid) == CompanyInfo[companyid][cWorld]) continue;

        return HataMesajiC(playerid, "Bu alanda zaten trucker noktasý var.");
    }

    CompanyInfo[id][cValid] = 1;
    CompanyInfo[id][cBuyPosX] = pX;
    CompanyInfo[id][cBuyPosY] = pY;
    CompanyInfo[id][cBuyPosZ] = pZ;
    CompanyInfo[id][cBuyType] = type;
    CompanyInfo[id][cInterior] = GetPlayerInterior(playerid);
    CompanyInfo[id][cWorld] = GetPlayerVirtualWorld(playerid);
    format(CompanyInfo[id][cName], 50, name);

    mysql_format(ourConnection, queryx, sizeof(queryx), "INSERT INTO companies (name, pos_x, pos_y, pos_z, type, interior, world) VALUES ('%e', '%f', '%f', '%f', '%d', '%d', '%d')",
    CompanyInfo[id][cName],
    CompanyInfo[id][cBuyPosX],
    CompanyInfo[id][cBuyPosY],
    CompanyInfo[id][cBuyPosZ],
    CompanyInfo[id][cInterior],
    CompanyInfo[id][cWorld],
    CompanyInfo[id][cBuyType]);

    mysql_tquery(ourConnection, queryx, "OnQueryFinished", "dd", id, THREAD_CREATE_COMPANY);

    SendAdminAlert(false, COLOR_ADMIN, "AdmCmd: %s bir trucker oluþturdu ID %d.", ReturnRoleplayName(playerid), id);

    CompanyInfo[id][cPoint] = Pickup_Create(ELEMENT_COMPANY, id, 1318, 23, CompanyInfo[id][cBuyPosX], CompanyInfo[id][cBuyPosY], CompanyInfo[id][cBuyPosZ], CompanyInfo[id][cWorld], CompanyInfo[id][cInterior]);
    Company_RefreshText(id);

    LogYaz(playerid, "/ccreate", -1, id, -1);

    Iter_Add(Companies, id);

    return 1;
}
CMD:gotoc(playerid, params[])
{
    new id;

    if(sscanf(params, "d", id))return
        KullanimMesajiC(playerid, "/gotoc [id]");

    if(id < 0 || id >= MAX_COMPANIES || !CompanyInfo[id][cValid])return
        SunucuMesajiC(playerid, "Geçersiz trucker.");

    SetPlayerPos(playerid, CompanyInfo[id][cBuyPosX], CompanyInfo[id][cBuyPosY], CompanyInfo[id][cBuyPosZ]);
    AC_SetPlayerVirtualWorld(playerid, CompanyInfo[id][cWorld]);
    SetPlayerInterior(playerid, CompanyInfo[id][cInterior]);

    return 1;
}
CMD:cedit(playerid, params[])return Company_ShowList(playerid);
CMD:lcreate(playerid, params[])
{
    new level;

    if(sscanf(params, "d", level)) return
        KullanimMesajiC(playerid, "/lcreate [seviye]");

    if(level < 1 || level > 3) return
        SunucuMesajiC(playerid, "Geçersiz deðer. (1 - 3)");

    new labid = Iter_Free(Lab);
    new interior, world;
    new Float:pX, Float:pY, Float:pZ;
    // new query[1024];

    if(labid >= MAX_LABORATORIES)return
        SunucuMesajiC(playerid, "Maksimum laboratuvar sýnýrýna ulaþýldý.");

    GetPlayerPos(playerid, pX, pY, pZ);
    world = GetPlayerVirtualWorld(playerid);
    interior = GetPlayerInterior(playerid);

    foreach(new l : Lab)
    {
        if(LabInfo[l][lWorld] != world) continue;
        if(LabInfo[l][lInterior] != interior) continue;
        if(IsPlayerInRangeOfPoint(playerid, 10.0, LabInfo[l][lPosX], LabInfo[l][lPosY], LabInfo[l][lPosZ]) == 0) continue;

        return HataMesajiC(playerid, "Burada zaten laboratuvar var.");
    }

    LabInfo[labid][lLevel] = level;
    LabInfo[labid][lInterior] = interior;
    LabInfo[labid][lWorld] = world;
    LabInfo[labid][lPosX] = pX;
    LabInfo[labid][lPosY] = pY;
    LabInfo[labid][lPosZ] = pZ;
    LabInfo[labid][lFaction] = -1;
    LabInfo[labid][lExists] = 1;
    LabInfo[labid][lUretimSayisi] = 0;

    for(new j; j < 12; j++)
    {
        LabInfo[labid][lDrugs][j] = 0;
        LabInfo[labid][lProducing][j] = 0;
        LabInfo[labid][lProducingQuality][j] = 0;
        LabInfo[labid][lProducingQuantity][j] = 0;
        LabInfo[labid][lProducingExpires][j] = 0;
    }

    mysql_format(ourConnection, queryx, sizeof(queryx), "INSERT INTO laboratories (level, interior, world, faction, pos_x, pos_y, pos_z, uretimsayisi) VALUES ('%d', '%d', '%d', '%d', '%f', '%f', '%f', '%d')",
    LabInfo[labid][lLevel],
    LabInfo[labid][lInterior],
    LabInfo[labid][lWorld],
    LabInfo[labid][lFaction],
    LabInfo[labid][lPosX],
    LabInfo[labid][lPosY],
    LabInfo[labid][lPosZ],
    LabInfo[labid][lUretimSayisi]);

    mysql_tquery(ourConnection, queryx, "OnQueryFinished", "dd", labid, THREAD_CREATE_LAB);

    LabInfo[labid][lPickup] = Pickup_Create(ELEMENT_LABORATORY, labid, 1279, 23, LabInfo[labid][lPosX], LabInfo[labid][lPosY], LabInfo[labid][lPosZ], world, interior);

    SendAworkAlert(false, COLOR_ADMIN, "AdmCmd: %s %d ID'li laboratuvarý %d levelda oluþturdu.", ReturnRoleplayName(playerid), labid, level);

    LogYaz(playerid, "/lcreate", -1, labid, level);

    Iter_Add(Lab, labid);

    return 1;
}

CMD:labsatinal(playerid, params[])
{

    if(PlayerInfo[playerid][pCash] < 12500) return HataMesaji(playerid, "Yeterli paraya sahip olmadýðýn için laboratuvar satýn alamazsýn.");
    if(Faction_GetType(PlayerInfo[playerid][pFaction]) != SADECEUYUSTURUCU)return
        SunucuMesaji(playerid, "Bu komutu kullanman için uyuþturucu satýþ izni olan onaylý bir oluþumda olmalýsýn.");

    if(PlayerInfo[playerid][pFaction] == -1 || PlayerInfo[playerid][pRank] > 3)return HataMesajiC(playerid, "Bu komutu kullanmak için bir oluþumda 1-3 rütbesinde olmalýsýn.");

    AC_GivePlayerMoney(playerid, -12500, "/labsatinal");
    SunucuMesajiC(playerid, "Bulunduðun yere $12.500 karþýlýðýnda bir laboratuvar satýn aldýn. Sistem hakkýnda ayrýntýlý..");
    SunucuMesajicp(playerid, ".. bir bilgi almak istiyorsan kesinlikle forumu takip etmelisin.");

    new labid = Iter_Free(Lab);
    new interior, world;
    new Float:pX, Float:pY, Float:pZ;

    if(labid >= MAX_LABORATORIES)return
        SunucuMesajiC(playerid, "Maksimum laboratuvar sýnýrýna ulaþýldý.");

    GetPlayerPos(playerid, pX, pY, pZ);
    world = GetPlayerVirtualWorld(playerid);
    interior = GetPlayerInterior(playerid);

    foreach(new l : Lab)
    {
        if(LabInfo[l][lWorld] != world) continue;
        if(LabInfo[l][lInterior] != interior) continue;
        if(IsPlayerInRangeOfPoint(playerid, 10.0, LabInfo[l][lPosX], LabInfo[l][lPosY], LabInfo[l][lPosZ]) == 0) continue;

        return HataMesajiC(playerid, "Burada zaten laboratuvar var.");
    }

    LabInfo[labid][lLevel] = 1;
    LabInfo[labid][lInterior] = interior;
    LabInfo[labid][lWorld] = world;
    LabInfo[labid][lPosX] = pX;
    LabInfo[labid][lPosY] = pY;
    LabInfo[labid][lPosZ] = pZ;
    LabInfo[labid][lFaction] = PlayerInfo[playerid][pFaction];
    LabInfo[labid][lExists] = 1;
    LabInfo[labid][lUretimSayisi] = 0;

    for(new j; j < 12; j++)
    {
        LabInfo[labid][lDrugs][j] = 0;
        LabInfo[labid][lProducing][j] = 0;
        LabInfo[labid][lProducingQuality][j] = 0;
        LabInfo[labid][lProducingQuantity][j] = 0;
        LabInfo[labid][lProducingExpires][j] = 0;
    }

    mysql_format(ourConnection, queryx, sizeof(queryx), "INSERT INTO laboratories (level, interior, world, faction, pos_x, pos_y, pos_z, uretimsayisi) VALUES ('%d', '%d', '%d', '%d', '%f', '%f', '%f', '%d')",
    LabInfo[labid][lLevel],
    LabInfo[labid][lInterior],
    LabInfo[labid][lWorld],
    LabInfo[labid][lFaction],
    LabInfo[labid][lPosX],
    LabInfo[labid][lPosY],
    LabInfo[labid][lPosZ],
    LabInfo[labid][lUretimSayisi]);

    mysql_tquery(ourConnection, queryx, "OnQueryFinished", "dd", labid, THREAD_CREATE_LAB);

    LabInfo[labid][lPickup] = Pickup_Create(ELEMENT_LABORATORY, labid, 1279, 23, LabInfo[labid][lPosX], LabInfo[labid][lPosY], LabInfo[labid][lPosZ], world, interior);

    SendAworkAlert(false, COLOR_ADMIN, "AdmCmd: %s %d ID'li laboratuvarý oluþturdu.(/labsatinal)", ReturnRoleplayName(playerid), labid);

    LogYaz(playerid, "/labsatinal", -1, labid, -1);

    Iter_Add(Lab, labid);

    return 1;
}

CMD:icreate(playerid, params[])
{
    new id = Iter_Free(IllegalIndustry),
        Float:pX, Float:pY, Float:pZ;

    if(id >= MAX_ILLEGAL_INDUSTRIES)return
        SunucuMesajiC(playerid, "Endüstri limitine ulaþýldý.");

    GetPlayerPos(playerid, pX, pY, pZ);

    foreach(new industryid : IllegalIndustry)
    {
        if(!IsPlayerInRangeOfPoint(playerid, 10.0, IllegalIndustryInfo[industryid][iPosX], IllegalIndustryInfo[industryid][iPosY], IllegalIndustryInfo[industryid][iPosZ])) continue;
        return HataMesajiC(playerid, "Burada zaten illegal endüstri var.");
    }

    IllegalIndustryInfo[id][iExists] = 1;
    IllegalIndustryInfo[id][iPosX] = pX;
    IllegalIndustryInfo[id][iPosY] = pY;
    IllegalIndustryInfo[id][iPosZ] = pZ;
    IllegalIndustryInfo[id][iRefreshAmount] = 500;
    IllegalIndustryInfo[id][iRefreshTime] = gettime();

    for(new j; j < 29; j++)
    {
        IllegalIndustryInfo[id][iIngredients][j] = 0;
        IllegalIndustryInfo[id][iAmounts][j] = 0;
        IllegalIndustryInfo[id][iPrices][j] = 0;
    }

    mysql_format(ourConnection, queryx, sizeof(queryx), "INSERT INTO illegal_industries (pos_x, pos_y, pos_z, refresh_time, refresh_amount) VALUES ('%f', '%f', '%f', '%d', '%d')",
    IllegalIndustryInfo[id][iPosX],
    IllegalIndustryInfo[id][iPosY],
    IllegalIndustryInfo[id][iPosZ],
    IllegalIndustryInfo[id][iRefreshTime],
    IllegalIndustryInfo[id][iRefreshAmount]);

    mysql_tquery(ourConnection, queryx, "OnQueryFinished", "dd", id, THREAD_CREATE_ILLEGALINDUSTRY);

    SendAworkAlert(false, COLOR_ADMIN, "AdmCmd: %s %d ID'li illegal endüstriyi oluþturdu.", ReturnRoleplayName(playerid), id);

    IllegalIndustryInfo[id][iPickup] = Pickup_Create(ELEMENT_INDUSTRY, id, 1318, 23, IllegalIndustryInfo[id][iPosX], IllegalIndustryInfo[id][iPosY], IllegalIndustryInfo[id][iPosZ]);
    IllegalIndustryInfo[id][iLabel] = CreateDynamic3DTextLabel("Sipariþ Noktasý", COLOR_WHITE, IllegalIndustryInfo[id][iPosX], IllegalIndustryInfo[id][iPosY], IllegalIndustryInfo[id][iPosZ]+1.0, 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0, -1);

    LogYaz(playerid, "/icreate", -1, id, -1);

    Iter_Add(IllegalIndustry, id);

    return 1;
}
CMD:labgit(playerid, params[])
{
    new labid;

    if(sscanf(params, "d", labid))return
        KullanimMesajiC(playerid, "/labgit [id]");

    if(labid < 0 || labid >= MAX_LABORATORIES || !LabInfo[labid][lExists])return
        SunucuMesajiC(playerid, "Varolmayan laboratuvar.");

    SetPlayerPos(playerid, LabInfo[labid][lPosX],LabInfo[labid][lPosY],LabInfo[labid][lPosZ]);
    SetPlayerInterior(playerid, LabInfo[labid][lInterior]);
    AC_SetPlayerVirtualWorld(playerid, LabInfo[labid][lWorld]);

    return 1;
}
CMD:gotoi(playerid, params[])
{
    new id;

    if(sscanf(params, "d", id))return
        KullanimMesajiC(playerid, "/gotoi [id]");

    if(id < 0 || id >= MAX_ILLEGAL_INDUSTRIES || !IllegalIndustryInfo[id][iExists])return
        SunucuMesajiC(playerid, "Yasadýþý endüstri bulunamadý.");

    SetPlayerPos(playerid, IllegalIndustryInfo[id][iPosX], IllegalIndustryInfo[id][iPosY], IllegalIndustryInfo[id][iPosZ]);
    SetPlayerInterior(playerid, 0);
    AC_SetPlayerVirtualWorld(playerid, 0);

    return 1;
}
CMD:ledit(playerid, params[])return Lab_ShowList(playerid);
CMD:iedit(playerid, params[])return IllegalIndustries_ShowList(playerid);
CMD:ldelete(playerid, params[])
{
    new labid;

    if(sscanf(params, "d", labid))return
        KullanimMesajiC(playerid, "/ldelete [id]");

    if(labid < 0 || labid >= MAX_LABORATORIES || !LabInfo[labid][lExists])return
        SunucuMesajiC(playerid, "Varolmayan laboratuvar.");

    // new query[256];

    mysql_format(ourConnection, queryx, sizeof(queryx), "DELETE FROM laboratories WHERE id = '%d'", LabInfo[labid][lID]);
    mysql_tquery(ourConnection, queryx);

    Pickup_Destroy(LabInfo[labid][lPickup]);
    LabInfo[labid][lPosX] = 0;
    LabInfo[labid][lPosY] = 0;
    LabInfo[labid][lPosZ] = 0;

    SendAworkAlert(false, COLOR_ADMIN, "AdmCmd: %s %d ID'li laboratuvarý sildi.", ReturnRoleplayName(playerid), labid);

    Iter_Remove(Lab, labid);
    LogYaz(playerid, "/ldelete", -1, labid);

    return 1;
}
CMD:idelete(playerid, params[])
{
    new industryid;

    if(sscanf(params, "d", industryid))return
        KullanimMesajiC(playerid, "/idelete [id]");

    if(industryid < 0 || industryid >= MAX_ILLEGAL_INDUSTRIES || !IllegalIndustryInfo[industryid][iExists])return
        SunucuMesajiC(playerid, "Yasadýþý endüstri bulunamadý.");

    // new query[256];

    mysql_format(ourConnection, queryx, sizeof(queryx), "DELETE FROM illegal_industries WHERE id = '%d'", IllegalIndustryInfo[industryid][iID]);
    mysql_tquery(ourConnection, queryx);

    Pickup_Destroy(IllegalIndustryInfo[industryid][iPickup]);
    DestroyDynamic3DTextLabelEx(IllegalIndustryInfo[industryid][iLabel]);

    IllegalIndustryInfo[industryid][iPosX] = 0;
    IllegalIndustryInfo[industryid][iPosY] = 0;
    IllegalIndustryInfo[industryid][iPosZ] = 0;

    SendAworkAlert(false, COLOR_ADMIN, "AdmCmd: %s %d ID'li illegal endüstriyi yok etti.", ReturnRoleplayName(playerid), industryid);

    Iter_Remove(IllegalIndustry, industryid);

    LogYaz(playerid, "/idelete", -1, industryid);

    return 1;
}
CMD:dcreate(playerid, params[])
{
    new dealerid = Iter_Free(Dealers),
        Float:x,
        Float:y,
        Float:z;

    if(isnull(params) || strlen(params) > 64)return
        KullanimMesajiC(playerid, "/dcreate [isim]");

    if(dealerid >= MAX_DEALERS)return
        SunucuMesajiC(playerid, "Galeri limitine ulaþýldý.");

    GetPlayerPos(playerid, x, y, z);

    format(DealerInfo[dealerid][dName],64,params);

    DealerInfo[dealerid][dExists] = 1;

    DealerInfo[dealerid][dPosX] = x;
    DealerInfo[dealerid][dPosY] = y;
    DealerInfo[dealerid][dPosZ] = z;

    DealerInfo[dealerid][dVehX] = x;
    DealerInfo[dealerid][dVehY] = y;
    DealerInfo[dealerid][dVehZ] = z;

    DealerInfo[dealerid][dPickup] = Pickup_Create(ELEMENT_DEALER, dealerid, 1239, 23, DealerInfo[dealerid][dPosX], DealerInfo[dealerid][dPosY], DealerInfo[dealerid][dPosZ], 0);
    DealerInfo[dealerid][dLabel] = CreateDynamic3DTextLabel(DealerInfo[dealerid][dName], COLOR_WHITE, DealerInfo[dealerid][dPosX], DealerInfo[dealerid][dPosY], DealerInfo[dealerid][dPosZ]+0.4, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0, -1);

    // new query[256];

    mysql_format(ourConnection, queryx, sizeof(queryx), "INSERT INTO dealers (name, pos_x, pos_y, pos_z, veh_x, veh_y, veh_z) VALUES ('%e', '%f', '%f', '%f', '%f', '%f', '%f')",
    DealerInfo[dealerid][dName],
    DealerInfo[dealerid][dPosX],
    DealerInfo[dealerid][dPosY],
    DealerInfo[dealerid][dPosZ],
    DealerInfo[dealerid][dVehX],
    DealerInfo[dealerid][dVehY],
    DealerInfo[dealerid][dVehZ]);

    mysql_tquery(ourConnection, queryx, "OnQueryFinished", "dd", dealerid, THREAD_CREATE_DEALER);

    SendAdminAlert(false, COLOR_ADMIN, "AdmCmd: %s %d ID'li galeriyi oluþturdu.", ReturnRoleplayName(playerid), dealerid);

    LogYaz(playerid, "/dcreate", -1, dealerid);

    Iter_Add(Dealers, dealerid);

    return 1;
}
CMD:ddelete(playerid, params[])
{
    new dealerid;

    if(sscanf(params, "d", dealerid))return
        KullanimMesajiC(playerid, "/ddelete [id]");

    if(dealerid < 0 || dealerid >= MAX_DEALERS || !DealerInfo[dealerid][dExists])return
        SunucuMesajiC(playerid, "Galeri bulunamadý.");

    DealerInfo[dealerid][dExists] = 0;

    DealerInfo[dealerid][dPosX] = 0.0;
    DealerInfo[dealerid][dPosY] = 0.0;
    DealerInfo[dealerid][dPosZ] = 0.0;

    DealerInfo[dealerid][dVehX] = 0.0;
    DealerInfo[dealerid][dVehY] = 0.0;
    DealerInfo[dealerid][dVehZ] = 0.0;

    Pickup_Destroy(DealerInfo[dealerid][dPickup]);
    DestroyDynamic3DTextLabelEx(DealerInfo[dealerid][dLabel]);

    for(new j; j < MAX_DEALER_VEHICLES; j++)
    {
        DealerInfo[dealerid][dModel][j] = 0;
        DealerInfo[dealerid][dPrice][j] = 0;
    }

    // new query[128];

    mysql_format(ourConnection, queryx, sizeof(queryx), "DELETE FROM dealer_vehicles WHERE dealer_id = '%d'", DealerInfo[dealerid][dID]);
    mysql_tquery(ourConnection, queryx);

    mysql_format(ourConnection, queryx, sizeof(queryx), "DELETE FROM dealers WHERE id = '%d'", DealerInfo[dealerid][dID]);
    mysql_tquery(ourConnection, queryx);

    SendAdminAlert(false, COLOR_ADMIN, "AdmCmd: %s %d ID'li galeriyi sildi.", ReturnRoleplayName(playerid), dealerid);

    LogYaz(playerid, "/ddelete", -1, dealerid);

    Iter_Remove(Dealers, dealerid);

    return 1;
}
CMD:dedit(playerid, params[])return Dealer_ShowList(playerid);
CMD:galerigit(playerid, params[])
{
    new id;

    if(sscanf(params, "d", id))return
        KullanimMesajiC(playerid, "/galerigit [id]");

    if(id < 0 || id >= MAX_DEALERS || !DealerInfo[id][dExists])return
        SunucuMesajiC(playerid, "Varolmayan galeri.");

    SetPlayerPos(playerid, DealerInfo[id][dPosX], DealerInfo[id][dPosY], DealerInfo[id][dPosZ]);
    SetPlayerInterior(playerid, 0);
    AC_SetPlayerVirtualWorld(playerid, 0);

    return 1;
}

CMD:cesetolusturid(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 3) return HataMesajiC(playerid, "Yetersiz yetki."); // Flaga gerek yok

    new id;
    if(sscanf(params, "u", id)) return KullanimMesajiC(playerid, "/cesetolusturid [id/isim]");

    if(id < 0 || !PlayerInfo[id][pLogged]) return HataMesajiC(playerid, "Geçersiz parametre.");

    new cesetid = CesetIDBul(id);
    if(GetPVarInt(id, "CesetBulunamadi") == 1)
    {
        CesetSil(cesetid);
        DeletePVar(id, "CesetBulunamadi");
    }
    CesetInfo[cesetid][cID] = cesetid;
    format(CesetInfo[cesetid][cName], MAX_PLAYER_NAME, "%s", ReturnRoleplayName(id));
    CesetInfo[cesetid][cSkin] = PlayerInfo[id][pSkin];
    CesetInfo[cesetid][cExists] = 1;
    for(new i; i < MAX_DAMAGES_FOR_PLAYER; i++)
    {
        if(PlayerDamages[id][i][eOccupied])
        {
            if(PlayerDamages[id][i][eWeapon] != 0)
            {
                CesetInfo[cesetid][cSilah][i] = PlayerDamages[id][i][eWeapon];
                format(CesetBodyPart[cesetid][i], 32, "%s", PlayerDamages[id][i][eBodypart]);
                CesetInfo[cesetid][cOccupied][i] = 1;
            }
        }
        else
            CesetInfo[cesetid][cOccupied][i] = -1;
    }
    Damages_Reset(id);
    GetPlayerPos(id, CesetInfo[cesetid][ceX], CesetInfo[cesetid][ceY], CesetInfo[cesetid][ceZ]);
    GetPlayerFacingAngle(id, CesetInfo[cesetid][ceA]);
    CesetInfo[cesetid][ceInterior] = GetPlayerInterior(id);
    CesetInfo[cesetid][ceVW] = GetPlayerVirtualWorld(id);
    GetPVarString(id, "OyuncuOlduren", CesetInfo[cesetid][cOlduren], MAX_PLAYER_NAME);
    DeletePVar(id, "OyuncuOlduren");
    CesetInfo[cesetid][cBagaj] = 0;
    CesetOlustur(cesetid);
    return 1;
}

CMD:cesetolusturadmin(playerid, params[])
{
    new cesetid = CesetIDBul(playerid);
    if(GetPVarInt(playerid, "CesetBulunamadi") == 1) {
        CesetSil(cesetid);
        DeletePVar(playerid, "CesetBulunamadi");
    }
    CesetInfo[cesetid][cID] = cesetid;
    format(CesetInfo[cesetid][cName], MAX_PLAYER_NAME, "%s", ReturnRoleplayName(playerid));
    CesetInfo[cesetid][cSkin] = PlayerInfo[playerid][pSkin];
    CesetInfo[cesetid][cExists] = 1;
    for(new i; i < MAX_DAMAGES_FOR_PLAYER; i++) {
        if(PlayerDamages[playerid][i][eOccupied]) {
            if(PlayerDamages[playerid][i][eWeapon] != 0) {
                CesetInfo[cesetid][cSilah][i] = PlayerDamages[playerid][i][eWeapon];
                format(CesetBodyPart[cesetid][i], 32, "%s", PlayerDamages[playerid][i][eBodypart]);
                CesetInfo[cesetid][cOccupied][i] = 1;
            }
        }
        else
            CesetInfo[cesetid][cOccupied][i] = -1;
    }
    Damages_Reset(playerid);
    GetPlayerPos(playerid, CesetInfo[cesetid][ceX], CesetInfo[cesetid][ceY], CesetInfo[cesetid][ceZ]);
    GetPlayerFacingAngle(playerid, CesetInfo[cesetid][ceA]);
    CesetInfo[cesetid][ceInterior] = GetPlayerInterior(playerid);
    CesetInfo[cesetid][ceVW] = GetPlayerVirtualWorld(playerid);
    GetPVarString(playerid, "OyuncuOlduren", CesetInfo[cesetid][cOlduren], MAX_PLAYER_NAME);
    DeletePVar(playerid, "OyuncuOlduren");
    CesetInfo[cesetid][cBagaj] = 0;
    CesetOlustur(cesetid);
    return 1;
}

CMD:reddet(playerid, params[])
{
    if(isnull(params) || strlen(params) > 80)
    {
        KullanimMesajiC(playerid, "/reddet [seçenek]");
        KullanimMesajiC(playerid, "parksatinal - tokalas - nesne - taksi - arac - ustara - cek");
        KullanimMesajiC(playerid, "canli - olusum - tedavi - tamir - aracboya - plakaislem - tezgahurun - servis");
        return 1;
    }

    new senderid;
    if(!strcmp(params, "servis", true)) {
        if(PlayerInfo[playerid][pRequestRepair] == -1) return HataMesajiC(playerid, "Size zaten bir servis isteði gönderilmemiþ.");
        senderid = PlayerInfo[playerid][pRequestRepair];
        PlayerInfo[playerid][pRequestRepair] = -1;
        PlayerInfo[playerid][pRepairType] = 0;
        PlayerInfo[playerid][pRepairPrice] = 0;
        DeletePVar(senderid, "NOSIstek");
        SunucuMesajiC(playerid, "Servis isteðini iptal ettiniz.");
        SunucuMesajiC(senderid, "Servis isteði gönderdiðiniz kullanýcý servis isteðini iptal etti.");
    } 
    else if(!strcmp(params, "cek", true) && !PlayerInfo[playerid][pDeath])
    {
        if(PlayerInfo[playerid][pAracCekmeIstegi] == -1)
            return HataMesajiC(playerid, "Herhangi bir tamirci size araç çekme isteði göndermemiþ.");

        senderid = PlayerInfo[playerid][pAracCekmeIstegi];

        PlayerInfo[playerid][pAracCekmeIstegi] = -1;
        SunucuMesajiC(senderid, "Araç çekme isteðiniz karþýnýzdaki kiþi tarafýndan reddedildi.");
        BasariMesaji(playerid, "Aracýnýzýn çekilme iþlemini baþarýyla iptal ettiniz.");
    }
    else if(!strcmp(params, "tezgahurun", true)) {
        if(GetPVarInt(playerid, "TezgahSatis") != 1) return HataMesajiC(playerid, "Zaten size ürün satýþ teklifi gönderilmemiþ.");
        new karsiOyuncu = GetPVarInt(playerid, "TezgahSatan");
        DeletePVar(playerid, "TezgahSatis");
        DeletePVar(playerid, "TezgahSatan");
        DeletePVar(karsiOyuncu, "TezgahSatisID");
        DeletePVar(karsiOyuncu, "TezgahSatis");
        DeletePVar(karsiOyuncu, "SatisTezgah");
        DeletePVar(karsiOyuncu, "SatisUrun");
        DeletePVar(playerid, "SatinAliyor");
        DeletePVar(playerid, "TezgahIcecek");
        DeletePVar(karsiOyuncu, "TezgahIcecek");
        DeletePVar(karsiOyuncu, "SatisYapiyor");
        SunucuMesajiC(playerid, "Tezgah ürün satýþýný reddettiniz.");
        SunucuMesaji(karsiOyuncu, "%s (ID: %d) tezgah ürün satýþýný reddetti.", ReturnRoleplayName(playerid), playerid);
    }
    else if(!strcmp(params, "parksatinal", true) && !PlayerInfo[playerid][pDeath])
    {
        if(PlayerInfo[playerid][pParkingRequest] == -1)return 1;

        PlayerInfo[playerid][pParkingRequest] = -1;
        BasariMesaji(playerid, "Araç park yeri satýn alma iþlemini iptal ettiniz.");
    }
    else if(!strcmp(params, "tokalas", true) && !PlayerInfo[playerid][pDeath])
    {
        if(PlayerInfo[playerid][pShakeOffer] == -1)return 1;

        senderid = PlayerInfo[playerid][pShakeOffer];

        PlayerInfo[playerid][pShakeOffer] = -1;
        PlayerInfo[playerid][pShakeType] = 0;

        SunucuMesajiC(senderid, "Tokalaþma teklifiniz karþýnýzdaki kiþi tarafýndan reddedildi.");
        BasariMesaji(playerid, "Tokalaþma isteklerini baþarýyla iptal ettiniz.");
    }
    else if(!strcmp(params, "taksi", true) && !PlayerInfo[playerid][pDeath])
    {
        if(PlayerInfo[playerid][pTaxRequest] == -1)return 1;

        senderid = PlayerInfo[playerid][pTaxRequest];

        PlayerInfo[senderid][tCash] = -1;
        PlayerInfo[senderid][tPassenger] = -1;

        PlayerInfo[playerid][pTaxRequest] = -1;
        PlayerInfo[playerid][pTaxi] = -1;
        SunucuMesajiC(senderid, "Nesne verme isteði karþýnýzdaki kiþi tarafýndan reddedildi.");
        BasariMesajiC(playerid, "Ýsteði baþarýyla iptal ettiniz.");
    }
    else if(!strcmp(params, "arac", true) && !PlayerInfo[playerid][pDeath])
    {
        if(PlayerInfo[playerid][pRequesterVSell] == -1)return 1;

        senderid = PlayerInfo[playerid][pRequesterVSell];

        SunucuMesajiC(senderid, "Araç satma isteðiniz karþýnýzdaki kiþi tarafýndan reddedildi.");
        BasariMesajiC(playerid, "Ýsteði baþarýyla iptal ettiniz.");

        PlayerInfo[playerid][pRequestSVPrice] = 0;
        PlayerInfo[playerid][pRequesterVSell] = -1;
        PlayerInfo[senderid][pSelectedVehicle] = -1;

        return 1;
    }
    else if(!strcmp(params, "ustara", true) && !PlayerInfo[playerid][pDeath])
    {
        if(PlayerInfo[playerid][pFrisk] == -1)
            return 1;

        senderid = PlayerInfo[playerid][pFrisk];

        SunucuMesajiC(senderid, "Üst arama isteðiniz karþýnýzdaki kiþi tarafýndan reddedildi.");
        BasariMesaji(playerid, "Üst aramayý baþarýyla iptal ettiniz.");

        PlayerInfo[playerid][pFrisk] = -1;
    }
    else if(!strcmp(params, "canli", true) && !PlayerInfo[playerid][pDeath])
    {
        if(PlayerInfo[playerid][pRequestLive] == -1)
            return 1;

        senderid = PlayerInfo[playerid][pRequestLive];

        SunucuMesajiC(senderid, "Canlý yayýn isteði karþýnýzdaki kiþi tarafýndan reddedildi.");
        BasariMesajiC(playerid, "Ýsteði baþarýyla iptal ettiniz.");

        PlayerInfo[playerid][pRequestLive] = -1;
    }
    else if(!strcmp(params, "olusum", true))
    {
        if(PlayerInfo[playerid][pRequesterFaction] == -1) return 1;
        if(PlayerInfo[playerid][pFaction] > -1) return 1;

        senderid = PlayerInfo[playerid][pRequesterFaction];

        SunucuMesajiC(senderid, "Oluþum davetiniz karþýnýzdaki kiþi tarafýndan reddedildi.");
        BasariMesajiC(playerid, "Ýsteði baþarýyla iptal ettiniz.");
        PlayerInfo[playerid][pRequesterFaction] = -1;
    }
    else if(!strcmp(params, "tedavi", true))
    {
        if(PlayerInfo[playerid][pCare] == -1)
            return 1;

        senderid = PlayerInfo[playerid][pCare];

        PlayerInfo[playerid][pCare] = -1;
        SunucuMesajiC(senderid, "Tedavi isteðiniz karþýnýzdaki kiþi tarafýndan reddedildi.");
        BasariMesajiC(playerid, "Ýsteði baþarýyla iptal ettiniz.");
    }
    else if(!strcmp(params, "nesne", true) && !PlayerInfo[playerid][pDeath])
    {
        if(PlayerInfo[playerid][pGiveItem] == -1)
            return 1;

        senderid = PlayerInfo[playerid][pGiveItem];

        SunucuMesajiC(senderid, "Nesne verme isteðiniz karþýnýzdaki kiþi tarafýndan reddedildi.");
        BasariMesajiC(playerid, "Ýsteði baþarýyla iptal ettiniz.");
        PlayerInfo[senderid][pItemID] = -1;
        PlayerInfo[senderid][pGiveItem] = -1;
        PlayerInfo[playerid][pGiveItem] = -1;
    }
    else if(!strcmp(params, "tamir", true) && !PlayerInfo[playerid][pDeath])
    {
        PlayerInfo[playerid][pRequestRepair] = -1;
        PlayerInfo[playerid][pRepairType] = 0;
        PlayerInfo[playerid][pRepairPrice] = 0;
        BasariMesajiC(playerid, "Ýsteði baþarýyla iptal ettiniz.");
    }
    else if(!strcmp(params, "aracboya", true) && !PlayerInfo[playerid][pDeath])
    {
        PlayerInfo[playerid][pRequestSpray] = -1;
        BasariMesajiC(playerid, "Ýsteði baþarýyla iptal ettiniz.");
    }
    else if(!strcmp(params, "plakaislem", true) && !PlayerInfo[playerid][pDeath])
    {
        PlayerInfo[playerid][pPlateVeh] = -1;
        BasariMesajiC(playerid, "Ýsteði baþarýyla iptal ettiniz.");
    }
    else return HataMesajiC(playerid, "Geçersiz parametre.");
    return 1;
}

CMD:kabul(playerid, params[]) return pc_cmd_kabulet(playerid, params);
CMD:kabulet(playerid, params[])
{
    if(isnull(params) || strlen(params) > 80)
    {
        KullanimMesajiC(playerid, "/kabulet [seçenek]");
        KullanimMesajiC(playerid, "parksatinal - tokalas - nesne - taksi - arac - ustara - cek");
        KullanimMesajiC(playerid, "canli - olusum - tedavi - tamir - aracboya - plakaislem - ck");
        KullanimMesajiC(playerid, "tezgahurun - servis");
        return 1;
    }
    new senderid;

    if(!strcmp(params, "cek", true) && !PlayerInfo[playerid][pDeath])
    {
        if(PlayerInfo[playerid][pAracCekmeIstegi] == -1)
            return HataMesajiC(playerid, "Herhangi bir tamirci size araç çekme isteði göndermemiþ.");

        if(GetPlayerState(playerid) != PLAYER_STATE_PASSENGER)
            return HataMesajiC(playerid, "Bu komutu kullanmak için araçta yolcu olmalýsýnýz.");

        senderid = PlayerInfo[playerid][pAracCekmeIstegi];
        new vid = GetPlayerVehicleID(playerid);
        new Float:x, Float:y, Float:z, Float:vx, Float:vy, Float:vz;

        if(!InTowTruck(senderid))
        {
            HataMesaji(senderid, "Çekiciye binin ve davet gönderdiðiniz kullanýcýya tekrar kabul etmesini söyleyin.");
            SunucuMesajiC(playerid, "Araç çekme isteðini gönderen tamirci Tow Truck model araçta deðil.");
            return 1;
        }

        if(!IsValidVehicle(vid) || !VehicleInfo[vid][vScript])
        {
            PlayerInfo[playerid][pAracCekmeIstegi] = -1;
            HataMesaji(senderid, "Bu aracý çekemezsiniz.");
            return HataMesajiC(playerid, "Bu aracý çektiremezsiniz.");
        }

        GetPlayerPos(senderid, x, y, z);
        GetVehiclePos(vid, vx, vy, vz);

        if((floatabs(x - vx) < 7.0) && (floatabs(y - vy) < 7.0) && (floatabs(z - vz) < 7.0))
        {
            AttachTrailerToVehicle(vid, GetPlayerVehicleID(senderid));
        }
        else return HataMesajiC(playerid, "Araç çekiciye yakýn deðil.");

        PlayerInfo[playerid][pAracCekmeIstegi] = -1;
    }
    else if(!strcmp(params, "tezgahurun", true)) {
        if(GetPVarInt(playerid, "TezgahSatis") != 1) return HataMesajiC(playerid, "Zaten size ürün satýþ teklifi gönderilmemiþ.");
        new karsiOyuncu = GetPVarInt(playerid, "TezgahSatan");
        if(PlayerInfo[karsiOyuncu][pCalistigiTezgah] != -1 || PlayerInfo[karsiOyuncu][pActigiTezgah] != -1) {
            new Float:pX, Float:pY, Float:pZ;
            GetPlayerPos(karsiOyuncu, pX, pY, pZ);
            if(IsPlayerInRangeOfPoint(playerid, 7.5, pX, pY, pZ)) {
                DeletePVar(playerid, "TezgahSatis");
                DeletePVar(karsiOyuncu, "TezgahSatis");
                DeletePVar(playerid, "SatinAliyor");
                DeletePVar(karsiOyuncu, "SatisYapiyor");
                DeletePVar(playerid, "TezgahSatan");
                DeletePVar(karsiOyuncu, "TezgahSatisID");
                new tezgahIcecek = GetPVarInt(playerid, "TezgahIcecek");
                DeletePVar(playerid, "TezgahIcecek");
                SunucuMesajiC(playerid, "Tezgah ürün satýþýný kabul ettiniz.");
                SunucuMesaji(karsiOyuncu, "%s (ID: %d) tezgah ürün satýþýný kabul etti.", ReturnRoleplayName(playerid), playerid);
                new urun = GetPVarInt(karsiOyuncu, "SatisUrun"), tezgah = GetPVarInt(karsiOyuncu, "SatisTezgah");
                DeletePVar(karsiOyuncu, "SatisTezgah");
                DeletePVar(karsiOyuncu, "SatisUrun");
                AC_GivePlayerMoney(playerid, -StandInfo[tezgah][sUrunFiyati][urun], "/tezgah sat");
                if(PlayerInfo[karsiOyuncu][pActigiTezgah] != -1 || StandInfo[tezgah][sCalisanPay] == 0) {
                    StandInfo[tezgah][sKasa] += StandInfo[tezgah][sUrunFiyati][urun];
                }
                else {
                    new yuzdelikPay = (StandInfo[tezgah][sUrunFiyati][urun] * StandInfo[tezgah][sCalisanPay]) / 100;
                    new kasayaGirecekPara = StandInfo[tezgah][sUrunFiyati][urun] - yuzdelikPay;
                    AC_GivePlayerMoney(karsiOyuncu, yuzdelikPay, "/tezgah sat");
                    StandInfo[tezgah][sKasa] += kasayaGirecekPara;
                    SunucuMesaji(karsiOyuncu, "Satýþtan yüzde %d'lik bir pay aldýnýz ve $%d kazandýnýz.", StandInfo[tezgah][sCalisanPay], yuzdelikPay);
                }
                static const Float:hpAdd = 20.0;
                static const objectsID[] = {2353, 2355, 2354};

                new Float:playerHealth;
                new mealID = Meal_FreeID();

                AC_GetPlayerHealth(playerid, playerHealth);

                playerHealth += hpAdd;
                AC_SetPlayerHealth(playerid, (playerHealth > 100) ? 100.0 : playerHealth);
                if(!tezgahIcecek && GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_NONE) {
                    SetPlayerAttachedObject(playerid, 9, objectsID[urun], 1, 0.004999, 0.529999, 0.126999, -83.200004, 115.999961, -31.799890, 0.500000, 0.816000, 0.500000);

                    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);

                    MealInfo[mealID][mPlayer] = playerid;
                    MealInfo[mealID][mExists] = 1;
                    MealInfo[mealID][mModel] = objectsID[urun];

                    PlayerInfo[playerid][pMeal] = mealID;

                    if(SunucuBilgi[TepsiSistemi]) BasariMesaji(playerid, "/tepsi komutuyla tepsiyi yönetebilirsin.");
                    else BasariMesaji(playerid, "/tepsi komutuyla tepsidekileri yiyebilirsin.");

                    Iter_Add(Meals, mealID);
                }
                else if(!tezgahIcecek && GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_NONE) {
                    SunucuMesajiC(playerid, "Satýn alým gerçekleþti, fakat elinize tepsi verilemedi.");
                }
                else if(tezgahIcecek && GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_NONE) {
                    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_SPRUNK);
                    SunucuMesajiC(playerid, "Elinize bir içecek verildi.");
                }
                else {
                    SunucuMesajiC(playerid, "Satýn alým gerçekleþti, fakat elinize içecek verilemedi.");
                }
            } else {
                HataMesajiC(playerid, "Satýcýya yeterince yakýn deðilsin.");
                DeletePVar(playerid, "TezgahSatis");
                DeletePVar(karsiOyuncu, "TezgahSatisID");
                DeletePVar(karsiOyuncu, "TezgahSatis");
                DeletePVar(playerid, "TezgahSatan");
                DeletePVar(karsiOyuncu, "SatisTezgah");
                DeletePVar(karsiOyuncu, "SatisUrun");
                DeletePVar(playerid, "SatinAliyor");
                DeletePVar(playerid, "TezgahIcecek");
                DeletePVar(karsiOyuncu, "TezgahIcecek");
                DeletePVar(karsiOyuncu, "SatisYapiyor");
            }
        } else {
            DeletePVar(karsiOyuncu, "TezgahSatisID");
            HataMesajiC(playerid, "Satýcý artýk tezgahta çalýþmýyor.");
            DeletePVar(playerid, "TezgahSatis");
            DeletePVar(playerid, "TezgahSatan");
            DeletePVar(karsiOyuncu, "SatisTezgah");
            DeletePVar(karsiOyuncu, "SatisUrun");
            DeletePVar(playerid, "SatinAliyor");
            DeletePVar(playerid, "TezgahIcecek");
            DeletePVar(karsiOyuncu, "TezgahIcecek");
            DeletePVar(karsiOyuncu, "SatisYapiyor");
        }
    }
    else if(!strcmp(params, "parksatinal", true) && !PlayerInfo[playerid][pDeath])
    {
        if(PlayerInfo[playerid][pParkingRequest] == -1)return 1;

        if(PlayerInfo[playerid][pCash] < 250) return
            SunucuMesajiC(playerid, "Yeterli paran yok. ($250)");

        new vid = PlayerInfo[playerid][pParkingRequest];
        new Float:x, Float:y, Float:z, Float:a;

        if(IsPlayerNearestVehicle(playerid, vid) == 0)return
            SunucuMesajiC(playerid, "Park etmek istediðiniz aracýn yanýnda veya içinde deðilsiniz.");

        PlayerInfo[playerid][pParkingRequest] = -1;

        OAC_GivePlayerMoney(playerid, -250);

        GetVehiclePos(vid, x, y, z);
        GetVehicleZAngle(vid, a);

        VehicleInfo[vid][vSpawnPosX] = x;
        VehicleInfo[vid][vSpawnPosY] = y;
        VehicleInfo[vid][vSpawnPosZ] = z;
        VehicleInfo[vid][vSpawnPosA] = a;

        VehicleInfo[vid][vWorld] = GetPlayerVirtualWorld(playerid);
        VehicleInfo[vid][vInterior] = GetPlayerInterior(playerid);

        Player_Info(playerid, "Arac ~y~park edildi~w~.");
        SaveVehicle(vid);
    }
    else if(!strcmp(params, "tokalas", true) && !PlayerInfo[playerid][pDeath])
    {
        if(PlayerInfo[playerid][pShakeOffer] == -1)return 1;

        senderid = PlayerInfo[playerid][pShakeOffer];

        new type = PlayerInfo[playerid][pShakeType];

        if(!ProxDetectorS(5.0, playerid, senderid) || !PlayerInfo[senderid][pLogged])return
            SunucuMesajiC(playerid, "Oyuncuya yakýn deðilsin.");

        SetPlayerToFacePlayer(playerid, senderid);
        SetPlayerToFacePlayer(senderid, playerid);

        PlayerInfo[playerid][pShakeOffer] = -1;
        PlayerInfo[playerid][pShakeType] = 0;

        switch(type)
        {
            case 1:
            {
                ApplyAnimation(playerid, "GANGS", "hndshkaa", 4.0, 0, 0, 0, 0, 0, 1);
                ApplyAnimation(senderid, "GANGS", "hndshkaa", 4.0, 0, 0, 0, 0, 0, 1);
            }
            case 2:
            {
                ApplyAnimation(playerid, "GANGS", "hndshkba", 4.0, 0, 0, 0, 0, 0, 1);
                ApplyAnimation(senderid, "GANGS", "hndshkba", 4.0, 0, 0, 0, 0, 0, 1);
            }
            case 3:
            {
                ApplyAnimation(playerid, "GANGS", "hndshkda", 4.0, 0, 0, 0, 0, 0, 1);
                ApplyAnimation(senderid, "GANGS", "hndshkda", 4.0, 0, 0, 0, 0, 0, 1);
            }
            case 4:
            {
                ApplyAnimation(playerid, "GANGS", "hndshkea", 4.0, 0, 0, 0, 0, 0, 1);
                ApplyAnimation(senderid, "GANGS", "hndshkea", 4.0, 0, 0, 0, 0, 0, 1);
            }
            case 5:
            {
                ApplyAnimation(playerid, "GANGS", "hndshkfa", 4.0, 0, 0, 0, 0, 0, 1);
                ApplyAnimation(senderid, "GANGS", "hndshkfa", 4.0, 0, 0, 0, 0, 0, 1);
            }
            case 6:
            {
                ApplyAnimation(playerid, "GANGS", "prtial_hndshk_biz_01", 4.0, 0, 0, 0, 0, 0, 1);
                ApplyAnimation(senderid, "GANGS", "prtial_hndshk_biz_01", 4.0, 0, 0, 0, 0, 0, 1);
            }
            default: return 1;
        }

        SunucuMesaji(playerid, "%s kiþisinin tokalaþma isteðini kabul ettin.", ReturnRoleplayName(senderid));
        BasariMesaji(senderid, "%s tokalaþma isteðini kabul etti.", ReturnRoleplayName(playerid));
    }
    else if(!strcmp(params, "ck", true))
    {
        if(GetPVarInt(playerid, "CKIstiyor") == 1)
        {
            DeletePVar(playerid, "CKIstiyor");
/*          foreach(new v : Vehicles) if(IsValidVehicle(v) && VehicleInfo[v][vOwner] == PlayerInfo[playerid][pID])
                Vehicle_Despawn(v);*/

            PlayerInfo[playerid][pBanned] = 1;

            mysql_format(ourConnection, queryx, sizeof(queryx), "INSERT INTO admin_records (target_id, admin_id, reason, created_at, type) VALUES ('%d', '-1', 'CK(Kendi Istegi)', NOW(), 'Ban')", PlayerInfo[playerid][pID]);
            mysql_tquery(ourConnection, queryx);

            BasariMesaji(playerid, "Karakterini kendi isteðinle CK ettin, karakterin yasaklanacak.");

            SetTimerEx("KickTimer", 200, false, "d", playerid);

            LogYaz(playerid, "/kabulet ck", -1, -1);

            foreach(new i: Player)
                SendFormattedMessage(i, COLOR_ADMIN, "AdmCmd: %s (%s) adlý karakter CK sebebiyle yasaklandý. [%s]", ReturnRoleplayName(playerid), PlayerInfo[playerid][pUsername], ReturnDate());
            return 1;
        }
        if(PlayerInfo[playerid][pDeath] != 3)
            return HataMesajiC(playerid, "Bu komutu kullanmak için karakterinizin aðýr yaralý olmasý gerekli.");

        if(PlayerInfo[playerid][pDeath] == 3)
        {
            if(GetTickCount() - PlayerInfo[playerid][pDeathTime] < 180000)return
                SunucuMesajiC(playerid, "Bu komutu yaralandýktan 180 saniye sonra kullanabilirsin.");

            Dialog_Show(playerid, DialogCK, DIALOG_STYLE_INPUT, "Karakter Ölümü (CK) | %s", "CK kuralý kapsamýnda kendi karakterini sisteme kalýcý olarak yasaklatýyorsun, bu iþlemin geri dönüþü olmadýðýný bilmende fayda var.\nCK kuralý kapsamýnda Ýsim Deðiþikliði (NC) hakký bulunan oyuncular bu iþleme onay vermemelidir, 72 saat içerisinde isim deðiþtirme hakkýnýz bulunmaktadýr.\nYasaklanan karakterin mal varlýðý, seviyesi silinir. Bu iþleme onay vermek için boþluða 'EVET' yazmalýsýnýz.", "Onayla", "Ýptal", ReturnDate());
        }
    }
    else if(!strcmp(params, "taksi", true) && !PlayerInfo[playerid][pDeath])
    {
        if(PlayerInfo[playerid][pTaxRequest] == -1)return 1;

        if(PlayerInfo[playerid][pCash] < PlayerInfo[playerid][pTaxPrice])return
            HataMesaji(playerid, "Yeterli paraya sahip deðilsin. ($%d)", PlayerInfo[playerid][pTaxPrice]);

        senderid = PlayerInfo[playerid][pTaxRequest];

        if(!ProxDetectorS(5.0, playerid, senderid) || !IsPlayerInAnyVehicle(playerid) || !PlayerInfo[senderid][pLogged])return
            SunucuMesajiC(playerid, "Taksi þöförüne yakýn deðilsin. (araçta olmalýsýn)");

        if(PlayerInfo[senderid][tPassenger] != -1)return
            SunucuMesajiC(playerid, "Bu oyuncu zaten baþkasýný taþýyor.");

        GetPlayerPos(senderid, PlayerInfo[senderid][tStartPos][0], PlayerInfo[senderid][tStartPos][1], PlayerInfo[senderid][tStartPos][2]);

        PlayerInfo[senderid][tCash] = 0;
        PlayerInfo[senderid][tPassenger] = playerid;

        BasariMesaji(senderid, "%s senin yolcun olmayý kabul etti ($%d / km).", ReturnRoleplayName(playerid), PlayerInfo[playerid][pTaxPrice]);
        BasariMesaji(playerid, "%s kiþisinin yolcusu olmayý kabul ettin ($%d / km). Ýndiðinde bunu ödeyeceksin.", ReturnRoleplayName(senderid), PlayerInfo[playerid][pTaxPrice]);

        PlayerInfo[playerid][pTaxRequest] = -1;
        PlayerInfo[playerid][pTaxi] = senderid;

        PlayerTextDrawSetString(playerid, PlayerInfo[playerid][pTextdraws][0], "~n~~w~Taksimetre: ~y~$0");
        PlayerTextDrawShow(playerid, PlayerInfo[playerid][pTextdraws][0]);
    }
    else if(!strcmp(params, "arac", true) && !PlayerInfo[playerid][pDeath])
    {
        if(PlayerInfo[playerid][pRequesterVSell] == -1 || GetPlayerVehicleCount(playerid) == -1)return 1;

        senderid = PlayerInfo[playerid][pRequesterVSell];

        new vid = PlayerInfo[senderid][pSelectedVehicle];

        if(vid == -1)return
            HataMesaji(senderid, "Satacaðýn aracýn içerisinde deðilsin.");

        if(GetNearestVehicle(senderid) != vid)return
            HataMesaji(senderid, "Seçilen araca yakýn deðilsiniz.");

        if(!ProxDetectorS(5.0, playerid, senderid) || !PlayerInfo[senderid][pLogged])return
            HataMesajiC(playerid, "Oyuncuya yakýn deðilsin.");

        SendFormattedMessage(senderid, COLOR_LIGHTBLUE, "%s, %s aracýný satma isteðini kabul etti.", ReturnRoleplayName(playerid), GetVehicleModelName(VehicleInfo[vid][vModel]));
        SunucuMesaji(playerid, "%s aracýný $%d karþýlýðýnda satýn aldýn.", GetVehicleModelName(VehicleInfo[vid][vModel]), PlayerInfo[playerid][pRequestSVPrice]);
        SunucuMesajiC(playerid, "/arac park komutuyla aracýna park noktasý belirleyebilirsin.");

        VehicleInfo[vid][vOwner] = PlayerInfo[playerid][pID];
        AC_GivePlayerMoney(playerid, -PlayerInfo[playerid][pRequestSVPrice], "/kabulet arac");
        AC_GivePlayerMoney(senderid, PlayerInfo[playerid][pRequestSVPrice], "/kabulet arac");

        Key_Remove(KEY_VEHICLE, VehicleInfo[vid][vID]); // Arac anahtarlari sifirlandi

        PlayerInfo[playerid][pRequestSVPrice] = 0;
        PlayerInfo[playerid][pRequesterVSell] = -1;
        PlayerInfo[senderid][pSelectedVehicle] = -1;
        foreach(new id: Tezgahlar) {
            if(StandInfo[id][sExists]) {
                if(StandInfo[id][saracID] == vid) {
                    foreach(new i: Player) if(PlayerInfo[i][pLogged]) {
                        if(PlayerInfo[i][pID] == StandInfo[id][sID]) {
                            PlayerInfo[i][pActigiTezgah] = -1;
                            break;
                        }
                    }
                    StandInfo[id][sExists] = 0;
                    StandInfo[id][sID] = -1;
                    format(StandInfo[id][sKuran], MAX_PLAYER_NAME, "Yok");
                    StandInfo[id][sModel] = 0;
                    DestroyDynamicObjectEx(StandInfo[id][sObje]);
                    StandInfo[id][sPosX] = 0.0;
                    StandInfo[id][sPosY] = 0.0;
                    StandInfo[id][sPosZ] = 0.0;
                    StandInfo[id][sRotX] = 0.0;
                    StandInfo[id][sRotY] = 0.0;
                    StandInfo[id][sRotZ] = 0.0;
                    StandInfo[id][sMasaModel] = 0;
                    DestroyDynamicObjectEx(StandInfo[id][sMasaObje]);
                    StandInfo[id][sMasaPosX] = 0.0;
                    StandInfo[id][sMasaPosY] = 0.0;
                    StandInfo[id][sMasaPosZ] = 0.0;
                    StandInfo[id][sMasaRotX] = 0.0;
                    StandInfo[id][sMasaRotY] = 0.0;
                    StandInfo[id][sMasaRotZ] = 0.0;
                    if(IsValidDynamic3DTextLabel(StandInfo[id][sLabel]))
                        DestroyDynamic3DTextLabelEx(StandInfo[id][sLabel]);
                    format(StandInfo[id][sLabelText], 128, "");
                    StandInfo[id][sArabali] = false;
                    for(new i; i < 3; i++) {
                        StandInfo[id][sCalisan][i] = -1;
                        StandInfo[id][sUrunFiyati][i] = 0;
                        format(StandUrunInfo[id][i], 80, "Yok");
                    }
                    StandInfo[id][saracID] = -1;
                    SunucuMesaji(playerid, "Tezgahýnýzý sildiniz.");
                    Iter_Remove(Tezgahlar, id);
                    PlayerInfo[playerid][pActigiTezgah] = -1;
                    break;
                }
            }
        }
        SaveVehicle(vid);
        LogYaz(playerid, "/kabulet arac", senderid, VehicleInfo[vid][vID], PlayerInfo[senderid][pRequestSVPrice]);

        return 1;
    }
    else if(!strcmp(params, "ustara", true))
    {
        if(PlayerInfo[playerid][pFrisk] == -1)
            return HataMesajiC(playerid, "Üst arama teklifi gönderen hiç kimse yok.");

        senderid = PlayerInfo[playerid][pFrisk];

        if(!ProxDetectorS(5.0, playerid, senderid) || !PlayerInfo[senderid][pLogged])return
            SunucuMesajiC(playerid, "Size istek gönderen oyuncuya yakýn deðilsin.");

        if(!PlayerInfo[senderid][pMasked]) {
            BasariMesaji(playerid, "%s kiþisinin üst arama isteðini kabul ettin.", ReturnRoleplayName(senderid));
        } else {
            BasariMesaji(playerid, "%s kiþisinin üst arama isteðini kabul ettin.", PlayerInfo[playerid][pMaskName]);
        }
        BasariMesaji(senderid, "%s kiþisi üst arama isteðini kabul etti.", ReturnRoleplayName(playerid));


        new moneyString[50];

        format(moneyString, sizeof(moneyString), (PlayerInfo[playerid][pCash] > 500) ? ("500$'dan fazla") : ("%d"), PlayerInfo[playerid][pCash]);
        BasariMesaji(senderid, "Cebindeki para (%s): %s", ReturnRoleplayName(playerid), moneyString);

        Inventory_ShowItems(playerid, senderid, false);

        new weapons[12], ammo[12];

        for(new a; a < 12; a++)
        {
            GetPlayerWeaponData(playerid, a, weapons[a], ammo[a]);

            if(!weapons[a] || !AC_PlayerHasWeapon(playerid, weapons[a]) || !ammo[a])continue;

            BasariMesaji(senderid, "%s (mermi: %d)", GetWeaponNameEx(weapons[a]), ammo[a]);
        }
        if(PlayerInfo[playerid][pTamirKiti]) {
            BasariMesaji(senderid, "Tamir Kiti");
        }
        if(PlayerInfo[playerid][pAletCantasi]) {
            BasariMesaji(senderid, "Alet Çantasý");
        }
        PlayerInfo[playerid][pFrisk] = -1;
    }
    else if(!strcmp(params, "canli", true) && !PlayerInfo[playerid][pDeath])
    {
        if(PlayerInfo[playerid][pRequestLive] == -1)
            return 1;

        senderid = PlayerInfo[playerid][pRequestLive];

        if(!ProxDetectorS(5.0, playerid, senderid) || !PlayerInfo[senderid][pLogged])return
            SunucuMesajiC(playerid, "Size istek gönderen oyuncuya yakýn deðilsin.");

        BasariMesaji(senderid, "%s canlý yayýn isteðinizi kabul etti.", ReturnRoleplayName(playerid));
        BasariMesaji(playerid, "%s kiþisiyle canlý yayýnýnýz baþladý.", ReturnRoleplayName(senderid));

        PlayerInfo[senderid][pTalkingLive] = playerid;
        PlayerInfo[playerid][pTalkingLive] = senderid;

        PlayerInfo[playerid][pRequestLive] = -1;
    }
    else if(!strcmp(params, "olusum", true))
    {
        if(PlayerInfo[playerid][pRequesterFaction] == -1) return 1;
        if(PlayerInfo[playerid][pFaction] > -1) return 1;

        new fid = PlayerInfo[playerid][pFaction];

        senderid = PlayerInfo[playerid][pRequesterFaction];

        /*BasariMesaji(senderid, "%s oluþum davetini kabul etti.", ReturnRoleplayName(playerid));
        BasariMesaji(playerid, "%s kiþisinin isteðini kabul ettin.", ReturnRoleplayName(senderid));*/

        PlayerInfo[playerid][pFaction] = PlayerInfo[senderid][pFaction];
        PlayerInfo[playerid][pRank] = MAX_FACTION_RANKS;

        FactionInfo[fid][fMembersCount]++;
        
        foreach(new x : Player) if(IsPlayerConnected(x) && PlayerInfo[x][pFaction] == PlayerInfo[playerid][pFaction] && PlayerInfo[x][pFactionOOC])
        {
            if(PlayerInfo[playerid][pFaction] == 0) SendFormattedMessage(x, RENK_LSPD, "(( %s tarafýndan %s oluþuma dahil edildi. ))", ReturnRoleplayName(senderid), ReturnRoleplayName(playerid));
            else if(PlayerInfo[playerid][pFaction] == 1) SendFormattedMessage(x, RENK_LSFD, "(( %s tarafýndan %s oluþuma dahil edildi. ))", ReturnRoleplayName(senderid), ReturnRoleplayName(playerid));
            else SendFormattedMessage(x, COLOR_LIGHTBLUE, "(( %s tarafýndan %s oluþuma dahil edildi. ))", ReturnRoleplayName(senderid), ReturnRoleplayName(playerid));
        }

        LogYaz(playerid, "/kabulet olusum", senderid, fid);

        PlayerInfo[playerid][pRequesterFaction] = -1;
    }
    else if(!strcmp(params, "tedavi", true))
    {
        if(PlayerInfo[playerid][pCare] == -1)
            return 1;

        senderid = PlayerInfo[playerid][pCare];

        if(!ProxDetectorS(5.0, playerid, senderid) || !PlayerInfo[senderid][pLogged])return
            SunucuMesajiC(playerid, "Size istek gönderen oyuncuya yakýn deðilsin.");

        if(!PlayerInfo[senderid][pAdminDuty] && !PlayerInfo[senderid][pSupporterDuty])
        {
            new Float:health;
            AC_GetPlayerHealth(playerid, health);

            if(PlayerInfo[playerid][pCash] < SunucuBilgi[HealTax])
            {
                SendClientMessageEx(senderid, COLOR_ERROR, "Oyuncuda tedavi için yeterince para yok.");
                PlayerInfo[playerid][pCare] = -1; return 1;
            }

            AC_GivePlayerMoney(playerid, -SunucuBilgi[HealTax], "/tedaviet");
//            Faction_GovernmentCash(SunucuBilgi[HealTax]);
        }

        if(!PlayerInfo[playerid][pAdminDuty] && !PlayerInfo[senderid][pAdminDuty])
        {
            ApplyAnimation(senderid, "MEDIC", "CPR", 4.1, 0, 0, 0, 0, 0, 1);
            ApplyAnimation(playerid, "PED", "KO_shot_stom", 4.0, 0, 1, 1, 1, 0, 1);
            PlayerInfo[playerid][pInCare] = 10;
        }
        else PlayerInfo[playerid][pInCare] = 1;

        PlayerInfo[playerid][pDeath] = 0;
        PlayerInfo[playerid][pCare] = -1;
        PlayerInfo[playerid][pLegHit] = 0;
        DestroyDynamic3DTextLabelEx(PlayerInfo[playerid][pNameTag]);
    }
    else if(!strcmp(params, "nesne", true) && !PlayerInfo[playerid][pDeath])
    {
        if(PlayerInfo[playerid][pGiveItem] == -1)
            return 1;

        senderid = PlayerInfo[playerid][pGiveItem];

        new itemid = PlayerInfo[senderid][pItemID];
        if(itemid == -1 || !itemid) return 1;

        if(!ProxDetectorS(10.0, playerid, senderid) || (PlayerInfo[senderid][pInvAmount][itemid] < PlayerInfo[senderid][pAmount]) || Inventory_FreeID(playerid) == -1 || !IsPlayerConnected(senderid) || PlayerInfo[senderid][pGiveItem] != playerid)
        {
            SunucuMesajiC(playerid, "Bu eþyayý kabul edemezsin. Mesafe, miktar, level veya nesneden kaynaklý bir hata oluþtu.");

            PlayerInfo[senderid][pItemID] = -1;
            PlayerInfo[senderid][pGiveItem] = -1;
            PlayerInfo[playerid][pGiveItem] = -1;
            return 1;
        }

        new listid = PlayerInfo[senderid][pInvList][itemid];

        if(InventoryObjects[listid][invObject] == RADIO_OBJECT)
        {
            mysql_format(ourConnection, queryx, sizeof(queryx), "UPDATE radio_authorized SET id = '%d' WHERE id = '%d'", PlayerInfo[playerid][pID], PlayerInfo[senderid][pID]);
            mysql_tquery(ourConnection, queryx);

            for(new j; j < 8; j++)
            {
                PlayerInfo[playerid][pRadioSlot][j] = PlayerInfo[senderid][pRadioSlot][j];
                PlayerInfo[senderid][pRadioSlot][j] = 0;
            }

            for(new f; f < MAX_FREQUENCES; f++)
            {
                PlayerInfo[playerid][pAuthorized][f] = PlayerInfo[senderid][pAuthorized][f];
                PlayerInfo[senderid][pAuthorized][f] = false;
            }

            PlayerInfo[senderid][pRadioDefault] = -1;
        }

        BasariMesaji(senderid, "%s adlý oyuncuya %s verdin.", ReturnRoleplayName(playerid), Inventory_ReturnString(senderid, ENTITY_TYPE_PLAYER, itemid, PlayerInfo[senderid][pAmount]));
        SunucuMesaji(playerid, "%s sana %s verdi.", ReturnRoleplayName(senderid), Inventory_ReturnString(senderid, ENTITY_TYPE_PLAYER, itemid, PlayerInfo[senderid][pAmount]));

        Inventory_AddItem(playerid, Inventory_FreeID(playerid), InventoryObjects[listid][invName], PlayerInfo[senderid][pAmount], PlayerInfo[senderid][pInvExtra][itemid]);

        LogYaz(senderid, "/envanter ver", playerid, PlayerInfo[senderid][pInvList][itemid], PlayerInfo[senderid][pAmount]);

        Inventory_DecraseAmount(senderid, itemid, PlayerInfo[senderid][pAmount]);

        PlayerInfo[senderid][pItemID] = -1;
        PlayerInfo[senderid][pGiveItem] = -1;
        PlayerInfo[playerid][pGiveItem] = -1;

        PlayerMEPlayer(senderid, playerid, "kiþisine bir nesne verdi");
        EnvanterIDDuzelt(senderid, itemid);
    }
    else if(!strcmp(params, "tamir", true) && !PlayerInfo[playerid][pDeath])
    {
        if(PlayerInfo[playerid][pRequestRepair] == -1 || !IsPlayerInAnyVehicle(playerid) || !PlayerInfo[playerid][pRepairType])
            return 1;

        senderid = PlayerInfo[playerid][pRequestRepair];

        if(!ProxDetectorS(20.0, playerid, senderid) || !PlayerInfo[senderid][pLogged])return
            HataMesajiC(playerid, "Size tamir isteði gönderen oyuncuya yakýn deðilsin.");

        if(!InTowTruck(senderid))return
            HataMesajiC(playerid, "Tamir isteðini gönderen kullanýcý Tow Truck model aracýn içinde deðil.");

        new vid = GetPlayerVehicleID(playerid);

        AC_GivePlayerMoney(playerid, -PlayerInfo[playerid][pRepairPrice], "/kabulet tamir");
        AC_GivePlayerMoney(senderid, PlayerInfo[playerid][pRepairPrice], "tamircimeslek");

        switch(PlayerInfo[playerid][pRepairType])
        {
            case 1: VehicleInfo[GetPlayerVehicleID(senderid)][vComponents] -= 4;
            case 2: VehicleInfo[GetPlayerVehicleID(senderid)][vComponents] -= 4;
            case 3: VehicleInfo[GetPlayerVehicleID(senderid)][vComponents] -= 100;
            case 4: VehicleInfo[GetPlayerVehicleID(senderid)][vComponents] -= 100;
        }

        SunucuMesaji(senderid, "%s adlý müþterin $%d karþýlýðýnda gönderdiðin tamir isteðini kabul etti.", ReturnRoleplayName(playerid), PlayerInfo[playerid][pRepairPrice]);
        SunucuMesajiC(senderid, "Araç dýþýna çýkýp belirtilen süre boyunca rolünüzü gerçekleþtirebilirsiniz.");
        SunucuMesaji(playerid, "%s adlý tamirci aracýný $%d karþýlýðýnda tamir ediyor.", ReturnRoleplayName(senderid), PlayerInfo[playerid][pRepairPrice]);

        switch(PlayerInfo[playerid][pRepairType])
        {
            case 1:
            {
                SetTimerEx("RepairVehicleID", 30000, false, "ddd", playerid, senderid, vid);
                GameTextForPlayer(playerid, "~r~ARACIN ICI TAMIR EDILIYOR.", 30000, 4);
                GameTextForPlayer(senderid, "~r~ARACIN ICI TAMIR EDILIYOR.", 30000, 4);
            }
            case 2:
            {
                SetTimerEx("RepairVehicleID", 30000, false, "ddd", playerid, senderid, vid);
                GameTextForPlayer(playerid, "~r~ARACIN DISI TAMIR EDILIYOR.", 30000, 4);
                GameTextForPlayer(senderid, "~r~ARACIN DISI TAMIR EDILIYOR.", 30000, 4);
            }
            case 3:
            {
                SetTimerEx("RepairVehicleID", 60000, false, "ddd", playerid, senderid, vid);
                GameTextForPlayer(playerid, "~r~ARACIN MOTORU TAMIR EDILIYOR.", 60000, 4);
                GameTextForPlayer(senderid, "~r~ARACIN MOTORU TAMIR EDILIYOR.", 60000, 4);
            }
            case 4:
            {
                SetTimerEx("RepairVehicleID", 60000, false, "ddd", playerid, senderid, vid);
                GameTextForPlayer(playerid, "~r~ARACIN AKUSU TAMIR EDILIYOR.", 60000, 4);
                GameTextForPlayer(senderid, "~r~ARACIN AKUSU TAMIR EDILIYOR.", 60000, 4);
            }
        }

        TogglePlayerControllable(playerid, false);
        PlayerInfo[playerid][pFreezed] = 1;
    }
    else if(!strcmp(params, "servis", true) && !PlayerInfo[playerid][pDeath])
    {
        senderid = PlayerInfo[playerid][pRequestRepair];
        if(PlayerInfo[playerid][pRequestRepair] == -1 || !IsPlayerInAnyVehicle(playerid) || !PlayerInfo[playerid][pRepairType]) {
            HataMesajiC(playerid, "Size bir istek gönderilmemiþ ya da bir aracýn içinde deðilsiniz.");
            DeletePVar(senderid, "NOSIstek");
            return 1;
        }
           

        if(!ProxDetectorS(20.0, playerid, senderid) || !PlayerInfo[senderid][pLogged]) {
            HataMesajiC(playerid, "Size servis isteði gönderen oyuncuya yakýn deðilsiniz.");
            DeletePVar(senderid, "NOSIstek");
            return 1;
        }

        if(!InTowTruck(senderid)) {
            HataMesajiC(playerid, "Tamir isteðini gönderen kullanýcý Tow Truck model aracýn içinde deðil.");
            DeletePVar(senderid, "NOSIstek");
            return 1;
        }

        new vid = GetPlayerVehicleID(playerid);

        AC_GivePlayerMoney(playerid, -PlayerInfo[playerid][pRepairPrice], "/kabulet servis");
        AC_GivePlayerMoney(senderid, PlayerInfo[playerid][pRepairPrice], "nos yukleme");

        switch(PlayerInfo[playerid][pRepairType])
        {
            case 1: VehicleInfo[GetPlayerVehicleID(senderid)][vComponents] -= 70;
            case 2: VehicleInfo[GetPlayerVehicleID(senderid)][vComponents] -= 170;
            case 3: VehicleInfo[GetPlayerVehicleID(senderid)][vComponents] -= 350;
        }

        SunucuMesaji(senderid, "%s adlý müþterin $%d karþýlýðýnda gönderdiðin servis isteðini kabul etti.", ReturnRoleplayName(playerid), PlayerInfo[playerid][pRepairPrice]);
        SunucuMesajiC(senderid, "Araç dýþýna çýkýp belirtilen süre boyunca rolünüzü gerçekleþtirebilirsiniz.");
        SunucuMesaji(playerid, "%s adlý tamirci aracýný $%d karþýlýðýnda servis ediyor.", ReturnRoleplayName(senderid), PlayerInfo[playerid][pRepairPrice]);

        switch(PlayerInfo[playerid][pRepairType])
        {
            case 1:
            {
                SetTimerEx("NosYukle", 30000, false, "ddd", playerid, senderid, vid);
                GameTextForPlayer(playerid, "~r~ARACA NOS YUKLENIYOR.", 30000, 4);
                GameTextForPlayer(senderid, "~r~ARACA NOS YUKLENIYOR.", 30000, 4);
            }
            case 2:
            {
                SetTimerEx("NosYukle", 30000, false, "ddd", playerid, senderid, vid);
                GameTextForPlayer(playerid, "~r~ARACA NOS YUKLENIYOR.", 30000, 4);
                GameTextForPlayer(senderid, "~r~ARACA NOS YUKLENIYOR.", 30000, 4);
            }
            case 3:
            {
                SetTimerEx("NosYukle", 30000, false, "ddd", playerid, senderid, vid);
                GameTextForPlayer(playerid, "~r~ARACIN MOTORU TAMIR EDILIYOR.", 60000, 4);
                GameTextForPlayer(senderid, "~r~ARACA NOS YUKLENIYOR.", 30000, 4);
            }
        }
        TogglePlayerControllable(playerid, false);
        PlayerInfo[playerid][pFreezed] = 1;
    }
    else if(!strcmp(params, "aracboya", true) && !PlayerInfo[playerid][pDeath])
    {
        if(!IsPlayerInAnyVehicle(playerid) || PlayerInfo[playerid][pRequestSpray] == -1)
            return 1;

        senderid = PlayerInfo[playerid][pRequestSpray];

        if(!ProxDetectorS(5.0, playerid, senderid) || !PlayerInfo[senderid][pLogged])return
            SunucuMesajiC(playerid, "Size istek gönderen tamirciye yakýn deðilsin.");

        if(!InTowTruck(senderid))return
            SunucuMesajiC(playerid, "Size istek gönderen tamirci þu anda Tow Truck'da deðil.");

        new vid = GetPlayerVehicleID(playerid);

        AC_GivePlayerMoney(playerid, -PlayerInfo[playerid][pSprayPrice], "/kabulet aracboya");
        AC_GivePlayerMoney(senderid, PlayerInfo[playerid][pSprayPrice], "tamirciboyameslek");
        VehicleInfo[GetPlayerVehicleID(senderid)][vComponents] -= 10;

        SunucuMesaji(senderid, "%s adlý müþterin $%d karþýlýðýnda araç boyama isteðini kabul etti.", ReturnRoleplayName(playerid), PlayerInfo[playerid][pSprayPrice]);
        SunucuMesajiC(senderid, "Araç boyama iþlemi için spray ile gereken rolü gerçekleþtirebilirsin.");
        AC_GivePlayerWeapon(senderid, 41, 1000);

        SunucuMesaji(playerid, "Tamirci %s, $%d karþýlýðýnda aracýný boyamaya baþladý.", ReturnRoleplayName(senderid), PlayerInfo[playerid][pSprayPrice]);

        SetTimerEx("SprayVehicleID", 60000, false, "ddd", playerid, senderid, vid);

        TogglePlayerControllable(playerid, false);
        PlayerInfo[playerid][pFreezed] = 1;
    }
    else if(!strcmp(params, "plakaislem", true) && !PlayerInfo[playerid][pDeath])
    {
        if(PlayerInfo[playerid][pPlateVeh] == -1 || GetPlateZone(playerid) == -1)
            return 1;

        if(PlayerInfo[playerid][pCash] < 3000)return
            SunucuMesajiC(playerid, "Yeterli paran yok. ($3000)");

        AC_GivePlayerMoney(playerid, -3000, "/kabulet plakaislem");

        PlayerInfo[playerid][pPlateTime] = 10;

        TogglePlayerControllable(playerid, false);
        PlayerInfo[playerid][pFreezed] = 1;

        PlayerInfo[playerid][pNameTag] = CreateDynamic3DTextLabel("(( Bu kullanýcý aracýnýn plakasýný söktürüyor. ))", COLOR_ADMIN, 0, 0, 0.5, 30.0, playerid, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0);
        SetTimerEx("RemoveTag", 1000 * 5, false, "d", playerid);

        GameTextForPlayer(playerid, "~y~Bekleyin...", 5000, 5);
    }
    return 1;
}

CMD:tanitim(playerid, params[])return
    Dialog_Show(playerid, DialogTutorial, DIALOG_STYLE_LIST, "Tanýtým", "Meslek\nHarita\nTaksi çaðýrma\nKýyafet deðiþtirme", "Seç", "Ýptal");

CMD:harita(playerid, params[])
{
    new slot = Inventory_HasItem(playerid, "Cep Telefonu", ITEM_PHONE);
    if(slot == -1) return HataMesajiC(playerid, "Cep telefonun yokken Google Harita servisine eriþemezsin.");
    
    mysql_tquery(ourConnection, "SELECT * FROM points", "OnPointsCMDSearch", "d", playerid);
    return 1;
}

CMD:stats(playerid, params[])return pc_cmd_karakter(playerid, params);
CMD:karakter(playerid, params[])return Player_ShowStats(playerid, playerid);
CMD:konusmastili(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogged]) return 1;

    new id;

    if(sscanf(params, "d", id)) return
        KullanimMesajiC(playerid, "/konusmastili (0 - 9) (0 yazarsanýz stilleriniz kalkar.)");

    if(id < 0 || id > 9)return
        SunucuMesajiC(playerid, "Belirli deðerler arasýnda sayý kullanýn.");

    PlayerInfo[playerid][pChatStyle] = id;

    if(!PlayerInfo[playerid][pChatStyle])return SendClientMessageEx(playerid, COLOR_WHITE, "Sohbet stilinizi devre dýþý býraktýnýz.");

    SunucuMesaji(playerid, "Sohbet stiliniz %d olarak seçildi.", id);

    return 1;
}

CMD:dovusstili(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogged]) return 1;
    new pickupid = Pickup_Nearest(playerid, ELEMENT_GYM);
    new id;
    
    if(pickupid == -1)return
        SunucuMesajiC(playerid, "Bir spor salonunda deðilsin.");
        
    if(sscanf(params, "d", id))
    {
        KullanimMesajiC(playerid, "/dovusstili <0 - 2>");
        SendClientMessageEx(playerid, COLOR_GREY, "Dövüþ stili fiyatý $1000 olarak belirlenmiþtir");
        return SendClientMessageEx(playerid, COLOR_GREY, "0: Standart - 1: Boks - 2: Kung Fu");
    }

    if(id < 0 || id > 2)return HataMesajiC(playerid, "Geçersiz deðer girdin.");
    if(PlayerInfo[playerid][pCash] < 1000)return HataMesajiC(playerid, "Yeterli paranýz yok.($1000)");

    new text[10];
    switch(id)
    {
        case 0: {
            PlayerInfo[playerid][pFightStyle] = FIGHT_STYLE_GRABKICK;
            format(text, 10, "Standart");
        }
        case 1: {
            PlayerInfo[playerid][pFightStyle] = FIGHT_STYLE_BOXING;
            format(text, 10, "Boks");
        }
        case 2: {
            PlayerInfo[playerid][pFightStyle] = FIGHT_STYLE_KUNGFU;
            format(text, 10, "Kungfu");
        }
    }

    SetPlayerFightingStyle(playerid, PlayerInfo[playerid][pFightStyle]);
    OAC_GivePlayerMoney(playerid, -1000);
    BasariMesaji(playerid, "%s dövüþ stilini öðrendin.", text);

    return 1;
}

CMD:ssmod(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogged]) return 1;
    if(GozunuBaglayan[playerid] != -1) return HataMesajiC(playerid, "Bu komutu gözünüz baðlý iken kullanamazsýnýz.");
    PlayerInfo[playerid][pBlindFold] = !PlayerInfo[playerid][pBlindFold];

    if(PlayerInfo[playerid][pBlindFold])return TextDrawShowForPlayer(playerid, BlindFold);

    TextDrawHideForPlayer(playerid, BlindFold);

    return 1;
}

CMD:ssmod2(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogged]) return 1;
    if(GozunuBaglayan[playerid] != -1) return HataMesajiC(playerid, "Bu komutu gözünüz baðlý iken kullanamazsýnýz.");
    PlayerInfo[playerid][pBlindFold] = !PlayerInfo[playerid][pBlindFold];

    if(PlayerInfo[playerid][pBlindFold])return TextDrawShowForPlayer(playerid, BrAdminEkran);

    TextDrawHideForPlayer(playerid, BrAdminEkran);

    return 1;
}

CMD:ssmod3(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogged]) return 1;
    if(GozunuBaglayan[playerid] != -1) return HataMesajiC(playerid, "Bu komutu gözünüz baðlý iken kullanamazsýnýz.");
    PlayerInfo[playerid][pBlindFold] = !PlayerInfo[playerid][pBlindFold];

    if(PlayerInfo[playerid][pBlindFold])return TextDrawShowForPlayer(playerid, BlindFold2);

    TextDrawHideForPlayer(playerid, BlindFold2);

    return 1;
}

CMD:ssmodfix(playerid)
{
    if(!PlayerInfo[playerid][pLogged]) return 1;
    if(GozunuBaglayan[playerid] != -1) return HataMesajiC(playerid, "Bu komutu gözünüz baðlý iken kullanamazsýnýz.");
    TextDrawHideForPlayer(playerid, BlindFold2);
    TextDrawHideForPlayer(playerid, BrAdminEkran);
    TextDrawHideForPlayer(playerid, BlindFold);
    PlayerInfo[playerid][pBlindFold] = 0;
    return 1;
}

CMD:gozbagi(playerid, params[])
{
    new id;
    if(sscanf(params, "u", id)) return KullanimMesajiC(playerid, "/gozbagi [oyuncu ID/ismi]");
    if(!IsPlayerConnected(id)) return HataMesajiC(playerid, "Belirttiðiniz oyuncu oyunda deðil.");
    if(!PlayerInfo[id][pLogged]) return HataMesajiC(playerid, "Belirttiðiniz oyuncu giriþ yapmamýþ.");
    if(GozBaglaIstegi[id] && !GozuBaglandi[id]) return HataMesajiC(playerid, "Baþka bir oyuncu bu oyuncuya göz baðlama isteði göndermiþ lütfen bekleyin.");
    new Float:pX, Float:pY, Float:pZ, pINT, pVW;
    GetPlayerPos(id, pX, pY, pZ);
    pINT = GetPlayerInterior(id);
    pVW = GetPlayerVirtualWorld(id);
    if(!IsPlayerInRangeOfPoint(playerid, 2.0, pX, pY, pZ) || GetPlayerInterior(playerid) != pINT || GetPlayerVirtualWorld(playerid) != pVW) return HataMesajiC(playerid, "Belirttiðiniz oyuncu size yakýn deðil.");
    if(!GozuBaglandi[id]) {
        GozunuBaglayan[id] = playerid;
        GozBaglaIstegi[id] = 1;
        SendClientMessageEx(playerid, COLOR_WHITE, "{00FF00}>> {FFFFFF}Oyuncuya göz baðý isteði yollandý. Lütfen oyuncunun yakýnýndan ayrýlmayýn. Oyuncunun kabul etmek için 30 saniyesi var.");
        GozBaglaTimer[id] = SetTimerEx("OnayIptal", 30 * 1000, false, "d", id);
        Dialog_Show(id, DialogGozBagiOnay, DIALOG_STYLE_MSGBOX, "Göz baðý", "%s gözünüzü baðlamak istiyor.\nKabul etmek istiyor musunuz?", "Evet", "Hayýr", ReturnRoleplayName(playerid));
    } else {
        GozunuBaglayan[id] = -1;
        GozuBaglandi[id] = 0;
        GozBaglaIstegi[id] = 0;
        SunucuMesajiC(playerid, "Oyuncunun göz baðýný çözdünüz.");
        SunucuMesajiC(id, "Oyuncunun göz baðý çözüldü.");
        TextDrawHideForPlayer(id, BlindFold);
        PlayerMEPlayer(playerid, id, "kiþisinin göz baðýný çözer");
    }
    return 1;
}

CMD:sanpoint(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogged]) return 1;

    new string[48];

    format(string, sizeof(string), "SA-Point", PlayerInfo[playerid][pCoyn]);
    Dialog_Show(playerid, Dialog19P, DIALOG_STYLE_LIST, string, "> Hesabýnda %d adet SA-Point bulunuyor.\nSA-Point Market\nSA-Point Envanter\nSA-Point Transfer\nSA-Point Satýn Al\nDonator Ýade Et", "Ýleri", "Geri", PlayerInfo[playerid][pCoyn]);

    return 1;
}

CMD:uyusturucuek(playerid, params[])
{
    if(isnull(params)) return KullanimMesajiC(playerid, "/uyusturucuek [hashas/marijuana]");

    new uid = YakindakiEU(playerid);
    if(uid > -1) return HataMesajiC(playerid, "Yakýnýnýzda zaten ekilmiþ bir uyuþturucu bulunuyor.");

    new id = Iter_Free(EkilenUyusturucular);
    if(id >= MAX_EKILEN_UYUSTURUCU) return HataMesajiC(playerid, "Sunucu uyuþturucu ekme limitine ulaþtý, daha sonra tekrar deneyin.");

    if(!strcmp(params, "hashas", true))
    {
        if(Inventory_HasItem(playerid, "Haþhaþ Tohumu", ITEM_INGREDIENT) == -1)return
            HataMesajiC(playerid, "Üzerinde haþhaþ tohumu bulunamadý.");

        new itemid = Inventory_HasItem(playerid, "Haþhaþ Tohumu", ITEM_INGREDIENT);
        Inventory_DecraseAmount(playerid, itemid);
        UyusturucuEk(playerid, 1);
    }
    else if(!strcmp(params, "marijuana", true))
    {
        if(Inventory_HasItem(playerid, "Marijuana Tohumu", ITEM_INGREDIENT) == -1)return
            HataMesajiC(playerid, "Üzerinde marijuana tohumu bulunamadý.");

        new itemid = Inventory_HasItem(playerid, "Marijuana Tohumu", ITEM_INGREDIENT);
        Inventory_DecraseAmount(playerid, itemid);
        UyusturucuEk(playerid, 2);
    }
    else KullanimMesajiC(playerid, "/uyusturucuek [hashas/marijuana]");
    return 1;
}

CMD:uyusturucutopla(playerid, params[])
{
    if(isnull(params)) return KullanimMesajiC(playerid, "/uyusturucutopla [hashas/marijuana]");
    if(Inventory_FreeID(playerid) == -1) return HataMesajiC(playerid, "Envanterinizde yeterli yer yok.");

    if(!strcmp(params, "hashas", true))
    {
        UyusturucuTopla(playerid, 1);
    }
    else if(!strcmp(params, "marijuana", true))
    {
        UyusturucuTopla(playerid, 2);
    }
    else KullanimMesajiC(playerid, "/uyusturucutopla [hashas/marijuana]");
    return 1;
}

CMD:euelkoy(playerid, params[])
{
    new id = YakindakiEU(playerid);
    if(id == -1) return HataMesajiC(playerid, "Yakýnýnýzda ekilmiþ uyuþturucu bulunamadý.");

    mysql_format(ourConnection, queryx, sizeof(queryx), "DELETE FROM plantdrugs WHERE id = %i", EUBilgi[id][euID]);
    mysql_tquery(ourConnection, queryx);

    new uyusturucu[32];
    switch(EUBilgi[id][euType])
    {
        case 1: format(uyusturucu, 32, "haþhaþ");
        case 2: format(uyusturucu, 32, "marijuana");
    }

    EUBilgi[id][euID] = -1;
    EUBilgi[id][euObjectID] = -1;
    EUBilgi[id][euPos][0] = 0.0;
    EUBilgi[id][euPos][1] = 0.0;
    EUBilgi[id][euPos][2] = 0.0;
    EUBilgi[id][euInterior] = -1;
    EUBilgi[id][euVWorld] = -1;
    EUBilgi[id][euOwner] = -1;
    EUBilgi[id][euStatus] = false;
    EUBilgi[id][euType] = 0;
    DestroyDynamicObjectEx(EUBilgi[id][euObject]);
    DestroyDynamic3DTextLabelEx(EUBilgi[id][euLabel]);
    Iter_Remove(EkilenUyusturucular, id);

    SendFactionMessage(PlayerInfo[playerid][pFaction], "HQ: %s, ekilmiþ olarak %s ele geçirdi.", ReturnRoleplayName(playerid), uyusturucu);
    return 1;
}

flags:atohumyoket(CMD_GAME3);
CMD:atohumyoket(playerid, params[])
{
    new id = YakindakiEU(playerid);
    if(id == -1) return HataMesajiC(playerid, "Yakýnýnýzda ekilmiþ uyuþturucu bulunamadý.");

    mysql_format(ourConnection, queryx, sizeof(queryx), "DELETE FROM plantdrugs WHERE id = %i", EUBilgi[id][euID]);
    mysql_tquery(ourConnection, queryx);

    new uyusturucu[32];
    switch(EUBilgi[id][euType])
    {
        case 1: format(uyusturucu, 32, "haþhaþ");
        case 2: format(uyusturucu, 32, "marijuana");
    }

    EUBilgi[id][euID] = -1;
    EUBilgi[id][euObjectID] = -1;
    EUBilgi[id][euPos][0] = 0.0;
    EUBilgi[id][euPos][1] = 0.0;
    EUBilgi[id][euPos][2] = 0.0;
    EUBilgi[id][euInterior] = -1;
    EUBilgi[id][euVWorld] = -1;
    EUBilgi[id][euOwner] = -1;
    EUBilgi[id][euStatus] = false;
    EUBilgi[id][euType] = 0;
    DestroyDynamicObjectEx(EUBilgi[id][euObject]);
    DestroyDynamic3DTextLabelEx(EUBilgi[id][euLabel]);
    Iter_Remove(EkilenUyusturucular, id);

    SendAworkAlert(false, COLOR_ADMIN, "AdmCmd: %s, %s adlý uyuþturucuyu yok etti.", ReturnRoleplayName(playerid), uyusturucu);
    return 1;
}

flags:tohumgit(CMD_GAME3);
CMD:tohumgit(playerid, params[])
{
    new id;
    if(sscanf(params, "d", id)) return KullanimMesajiC(playerid, "/tohumgit [tohumid]");

    if(!EUBilgi[id][euStatus]) return HataMesajiC(playerid, "Geçersiz ID.");

    SetPlayerPos(playerid, EUBilgi[id][euPos][0], EUBilgi[id][euPos][1], EUBilgi[id][euPos][2]);
    SetPlayerInterior(playerid, EUBilgi[id][euInterior]);
    AC_SetPlayerVirtualWorld(playerid, EUBilgi[id][euVWorld]);
    return BasariMesaji(playerid, "%d nolu ekilen uyuþturucuya ýþýnlandýn.", id);
}

flags:tohumkontrol(CMD_GAME3);
CMD:tohumkontrol(playerid, params[])
{
    new id;
    if(sscanf(params, "d", id)) return KullanimMesajiC(playerid, "/tohumkontrol [tohumid]");

    if(!EUBilgi[id][euStatus]) return HataMesajiC(playerid, "Geçersiz ID.");

    return BasariMesaji(playerid, "%d nolu ekilen uyuþturucuyu eken kiþi: %s", id, GetCharacterName(EUBilgi[id][euOwner]));
}

CMD:uyusturucu(playerid, params[])
{

    if(PlayerInfo[playerid][pFaction] == -1 || PlayerInfo[playerid][pRank] > 3)return HataMesajiC(playerid, "Bu komutu kullanmak için bir oluþumda 1-3 rütbesinde olmalýsýn.");
        
    new pickupid = Pickup_Nearest(playerid, ELEMENT_LABORATORY);
    new labid = GetNearestLab(playerid);
    new yapabilir;
    if(pickupid == -1)return
        SunucuMesajiC(playerid, "Herhangi bir laboratuvara yakýn deðilsin.");
    if(labid == -1)return
        SunucuMesajiC(playerid, "Herhangi bir laboratuvara yakýn deðilsin.");
    if(LabInfo[labid][lOwner] != 0) {
        if(LabInfo[labid][lFaction] != -1) {
            if(PlayerInfo[playerid][pFaction] == LabInfo[labid][lFaction])
                yapabilir = 1;
        } else {
            if(PlayerInfo[playerid][pID] == LabInfo[labid][lOwner])
                yapabilir = 1;
        }
    }
    else if(LabInfo[labid][lFaction] != -1) {
        if(PlayerInfo[playerid][pFaction] == LabInfo[labid][lFaction])
            yapabilir = 1;
    }
    else
        yapabilir = 1;
    if(yapabilir) {
        new option[30], slot, amount;

        if(sscanf(params, "ds[30]D(-1)", slot, option, amount))
        {
            for(new j; j < 10; j++)
                SendFormattedMessage(playerid, COLOR_GREY, "Slot %d: %s (Üretilebilir: %s - Durum: %s)", j + 1, Drug_GetNameLab(j), (LabInfo[labid][lDrugs][j]) ? ("Evet") : ("Hayýr"), (LabInfo[labid][lProducing][j]) ? timec(LabInfo[labid][lProducingExpires][j]) : ("N/A"));

            return KullanimMesajiC(playerid, "/uyusturucu [slot] [topla - uret - malzeme]");
        }

        if(slot < 1 || slot > 10)return
            SunucuMesajiC(playerid, "Geçersiz slot. (1 - 10)");

        slot--;

        new count;
        new quantity;
        new item_id;
        new quality;

        if(!strcmp(option, "malzeme", true))
        {
            BasariMesaji(playerid, "%s malzemeleri: (%d)", Drug_GetNameLab(slot), DrugsInformations[slot][1]);

            for(new j; j < DrugsInformations[slot][1]; j++)
            {
                quantity = DrugsInformations[slot][j + 2 + count];
                item_id = DrugsInformations[slot][j + 3 + count];
                count++; SunucuMesaji(playerid, "(%d) %s", quantity, InventoryObjects[item_id][invName]);
            }

            SendClientMessageEx(playerid, COLOR_YELLOW, "Bu malzemeler bir tane uyuþturucu üretmek için gerekiyor.");
        }
        else if(!strcmp(option, "uret", true))
        {
            if(!LabInfo[labid][lDrugs][slot])return
                SunucuMesajiC(playerid, "Bu uyuþturucuyu bu laboratuvarda üretemezsin.");

            if(LabInfo[labid][lProducing][slot])return
                    SunucuMesajiC(playerid, "Bu ilacý þu anda üretiyorsun ya da üretmek istediðin ilaç laboratuvarda bulunuyor.");

            new drugs_production_count;

            for(new j; j < 12; j++) if(LabInfo[labid][lProducing][j] != 0) drugs_production_count++;

            switch(LabInfo[labid][lLevel])
            {
                case 1: if(drugs_production_count >= 1) return HataMesajiC(playerid, "Maksimum ayný anda bir adet uyuþturucu üretebilirsin.");
                case 2: if(drugs_production_count >= 3) return HataMesajiC(playerid, "Maksimum ayný anda üç adet uyuþturucu üretebilirsin.");
                case 3: if(drugs_production_count >= 5) return HataMesajiC(playerid, "Maksimum ayný anda beþ adet uyuþturucu üretebilirsin.");
            }

            if(amount == -1)return
                SendFormattedMessage(playerid, COLOR_GREY, "/uyusturucu [%d] [uret] [miktar]", slot + 1);

            if(amount < 1 || amount > 10)return
                SunucuMesajiC(playerid, "Geçersiz deðer. (1 - 10)");

            new has_ingredient;
            new total_amount;
            new extra;

            new ingredients[5];
            new amounts[5];

            new missing_ingredients;

            for(new j; j < DrugsInformations[slot][1]; j++)
            {
                quantity = DrugsInformations[slot][j + 2 + count] * amount; total_amount += quantity;
                extra += quantity - DrugsInformations[slot][j + 2 + count];
                item_id = DrugsInformations[slot][j + 3 + count];
                total_amount += quantity;
                has_ingredient = Inventory_HasItem(playerid, InventoryObjects[item_id][invName], (item_id != 10) ? ITEM_INGREDIENT : ITEM_BIZ);

                count++;

                if(has_ingredient == -1 || (has_ingredient != -1 && PlayerInfo[playerid][pInvAmount][has_ingredient] < quantity) || !count)
                {
                    HataMesaji(playerid, "Üretim için gerekli(%d) %s malzemesine sahip deðilsin.", quantity, InventoryObjects[item_id][invName]);
                    missing_ingredients++; continue;
                }

                ingredients[count - 1] = has_ingredient;
                amounts[count - 1] = quantity;
            }

            if(missing_ingredients)return 1;

            for(new j; j < DrugsInformations[slot][1]; j++) if(ingredients[j] && amounts[j])
                Inventory_DecraseAmount(playerid, ingredients[j], amounts[j]);

            quality = Lab_GetQuality(labid, total_amount, extra);
            Lab_InitProduce(playerid, amount, quality, labid, slot);
        }
        else if(!strcmp(option, "topla", true))
        {
            if(!LabInfo[labid][lProducing][slot])return
                SunucuMesajiC(playerid, "Bir ilaç üretmiyorsun.");

            if(gettime() < LabInfo[labid][lProducingExpires][slot]) return
                SunucuMesajiC(playerid, "Uyuþturucu hala üretim aþamasýnda.");

            new inventory_slot = Inventory_FreeID(playerid);

            if(inventory_slot == -1) return
                SunucuMesajiC(playerid, "Envanterinizde yeterli yer yok.");

            quantity = LabInfo[labid][lProducingQuantity][slot];
            quality = LabInfo[labid][lProducingQuality][slot];

            Inventory_AddItem(playerid, inventory_slot, Drug_GetNameLab(slot), quantity, quality);
            SunucuMesaji(playerid, "%d doz %s(Kalite: %d) envanterine eklendi.", quantity, Drug_GetNameLab(slot), quality, "%");

            LabInfo[labid][lProducing][slot] = 0;
            LabInfo[labid][lProducingExpires][slot] = 0;
            SaveLab(labid);
        }
        else return HataMesajiC(playerid, "Hatalý parametre.");
    } else return HataMesajiC(playerid, "Bu laboratuvar size ait deðil.");
    return 1;
}

ProxDetector(Float:radius, playerid, message[], col1, col2, col3, col4, col5, cimiceStatus = false, togOOC = false, exceptPlayer = false)
{
    new Float:fX, Float:fY, Float:fZ, Float:distance, VW, Int, VEH;
    GetPlayerPos(playerid, fX, fY, fZ);
    VW = GetPlayerVirtualWorld(playerid);
    Int = GetPlayerInterior(playerid);
    VEH = GetPlayerVehicleID(playerid);
    foreach(new i : Player)
    {
        if(cimiceStatus) foreach(new cid : Cimici)
        {
            if(!CimiceInfo[cid][cEnabled] || gettime() > CimiceInfo[cid][cExpires]) continue;
            if(CimiceInfo[cid][cType] == CIMICE_TYPE_PLAYER && CimiceInfo[cid][cSubject] != PlayerInfo[playerid][pID]) continue;
            //if(CimiceInfo[cid][cType] == CIMICE_TYPE_HOUSE && GetPlayerHouseID(playerid) != CimiceInfo[cid][cSubject]) continue;
            if(CimiceInfo[cid][cType] == CIMICE_TYPE_HOUSE && !IsPlayerInRangeOfPoint(playerid, radius, CimiceInfo[cid][cPos][0], CimiceInfo[cid][cPos][1], CimiceInfo[cid][cPos][2])) continue;
            //if(CimiceInfo[cid][cType] == CIMICE_TYPE_BUILDING && GetPlayerBuildingID(playerid) != CimiceInfo[cid][cSubject]) continue;
            if(CimiceInfo[cid][cType] == CIMICE_TYPE_BUILDING && !IsPlayerInRangeOfPoint(playerid, radius, CimiceInfo[cid][cPos][0], CimiceInfo[cid][cPos][1], CimiceInfo[cid][cPos][2])) continue;
            if(CimiceInfo[cid][cType] == CIMICE_TYPE_VEHICLE && !IsPlayerInAnyVehicle(playerid)) continue;
            if(CimiceInfo[cid][cType] == CIMICE_TYPE_VEHICLE && VehicleInfo[VEH][vID] != CimiceInfo[cid][cSubject]) continue;
            if(CimiceInfo[cid][cInterior] != GetPlayerInterior(playerid) && CimiceInfo[cid][cVirtualWorld] != GetPlayerVirtualWorld(playerid)) continue;
            if(PlayerInfo[i][pCimice] == CimiceInfo[cid][cID]) SendFormattedMessage(i, COLOR_YELLOW, "[BÖCEK %d] %s", CimiceInfo[cid][cID], message);
        }
        if(GetPlayerInterior(i) != Int || GetPlayerVirtualWorld(i) != VW) continue;
        if((PlayerInfo[i][pTogOOC] || PlayerInfo[i][pTogOOCPlayer][playerid]) && togOOC) continue;
        if(exceptPlayer && i == playerid) continue;

        distance = GetPlayerDistanceFromPoint(i, fX, fY, fZ);

        if(distance < radius/16) SendClientMessageEx(i, col1, message);
        else if(distance < radius/8) SendClientMessageEx(i, col2, message);
        else if(distance < radius/4) SendClientMessageEx(i, col3, message);
        else if(distance < radius/2) SendClientMessageEx(i, col4, message);
        else if(distance < radius) SendClientMessageEx(i, col5, message);
    }
    return 1;
}

ProxDetectorS(Float:radius, playerid, targetid)
{
    new Float:fX, Float:fY, Float:fZ;
    GetPlayerPos(targetid, fX, fY, fZ);

    if(PlayerInfo[targetid][pInRecon] != -1) return 0;

    return (GetPlayerInterior(playerid) == GetPlayerInterior(targetid) && GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(targetid)) && IsPlayerInRangeOfPoint(playerid, radius, fX, fY, fZ);
}

SetPlayerToJailPos(playerid)
{
    for(new j; j < 12; j++)
    {
        AC_ResetPlayerWeapons(playerid);
        PlayerInfo[playerid][pWeapons][j] = 0;
        PlayerInfo[playerid][pAmmo][j] = 0;
    }

    if(PlayerInfo[playerid][pJailTime] && !PlayerInfo[playerid][pJailC])
    {
        SetPlayerInterior(playerid, 6);
        AC_SetPlayerVirtualWorld(playerid, playerid + 1);
        AC_SetPlayerVirtualWorld(playerid, playerid);
        SetPlayerPos(playerid, JAIL_X, JAIL_Y, JAIL_Z);
        PlayerInfo[playerid][pFreezed] = 1;
        TogglePlayerControllable(playerid, false);
        return 1;
    }

    PlayerInfo[playerid][pFreezed] = 0;
    TogglePlayerControllable(playerid, true);
    SetPlayerInterior(playerid, 2);
    AC_SetPlayerVirtualWorld(playerid, 5258);
    SetFreezePos(playerid, IC_JAIL_X, IC_JAIL_Y, IC_JAIL_Z);
    return 1;
}

IsPlayerNearestVehicle(playerid, vehicleid, Float:radius = 2.0)
{
    if(!IsValidVehicle(vehicleid) || !VehicleInfo[vehicleid][vScript])return 0;
    if(GetPlayerVehicleID(playerid) == vehicleid)return 1;

    new Float:fX, Float:fY, Float:fZ, Float:dist;

    GetVehiclePos(vehicleid, fX, fY, fZ);
    dist = GetPlayerDistanceFromPoint(playerid, fX, fY, fZ);

    if(dist <= radius)return 1;

    return 0;
}

GetNearestVehicle(playerid, Float:radius = 2.0)
{
    new result = -1, Float:dist;
    new Float:fX, Float:fY, Float:fZ;

    radius *= radius;

    foreach(new i : Vehicles) if(IsValidVehicle(i) && VehicleInfo[i][vScript])
    {
        GetVehiclePos(i, fX, fY, fZ);
        dist = GetPlayerDistanceFromPoint(playerid, fX, fY, fZ);
        if(dist < radius)
        {
            radius = dist;
            result = i;
        }
        continue;
    }

    return result;
}

/*GetNearestTrashMaster(playerid, Float:radius = 4.0)
{
    new result = -1, Float:dist;
    new Float:fX, Float:fY, Float:fZ;

    radius *= radius;

    foreach(new i : Vehicles) if(IsValidVehicle(i) && VehicleInfo[i][vScript] && VehicleInfo[i][vModel] == 408)
    {
        GetVehiclePos(i, fX, fY, fZ);
        dist = GetPlayerDistanceFromPoint(playerid, fX, fY, fZ);
        if(dist < radius)
        {
            radius = dist;
            result = i;
        }
        continue;
    }

    return result;
}*/

GetDynamicPlayerPos(playerid, &Float:x, &Float:y, &Float:z)
{
    new world = GetPlayerVirtualWorld(playerid);
    new propertyID;

    if(world < HOUSE_WORLD)
    {
        GetPlayerPos(playerid, x, y, z);
    }
    else if(world >= HOUSE_WORLD && world < BUILDING_WORLD)
    {
        propertyID = GetPlayerHouse(playerid, true);

        if(propertyID == -1)return 0;

        if(HouseInfo[propertyID][hComplex] != -1) foreach(new b : Buildings)
        {
            if(!BuildingInfo[b][bExists] || BuildingInfo[b][bID] != HouseInfo[propertyID][hComplex])continue;

            if(BuildingInfo[b][bPosWorld] >= BUILDING_WORLD) foreach(new i : Buildings) if(BuildingInfo[i][bWorld] == BuildingInfo[b][bPosWorld])
            {
                x = BuildingInfo[i][bPosX];
                y = BuildingInfo[i][bPosY];
                z = BuildingInfo[i][bPosZ]; return 1;
            }

            x = BuildingInfo[b][bPosX];
            y = BuildingInfo[b][bPosY];
            z = BuildingInfo[b][bPosZ]; return 1;
        }

        x = HouseInfo[propertyID][hPosX];
        y = HouseInfo[propertyID][hPosY];
        z = HouseInfo[propertyID][hPosZ];
    }
    else if(world >= BUILDING_WORLD)
    {
        propertyID = GetPlayerBuilding(playerid, true);

        if(propertyID == -1)return 0;

        if(BuildingInfo[propertyID][bPosWorld] >= BUILDING_WORLD) foreach(new b : Buildings)
        {
            if(!BuildingInfo[b][bExists] || BuildingInfo[b][bWorld] != BuildingInfo[propertyID][bPosWorld])continue;
            x = BuildingInfo[b][bPosX];
            y = BuildingInfo[b][bPosY];
            z = BuildingInfo[b][bPosZ]; return 1;
        }

        x = BuildingInfo[propertyID][bPosX];
        y = BuildingInfo[propertyID][bPosY];
        z = BuildingInfo[propertyID][bPosZ];
    }

    return 1;
}

GetNearestPayPhone(playerid)
{
    foreach(new j : PayPhones) if(PayPhoneInfo[j][cExists] && IsPlayerInRangeOfPoint(playerid, 1.0, PayPhoneInfo[j][cPosX], PayPhoneInfo[j][cPosY], PayPhoneInfo[j][cPosZ]) > 0)
        return j;

    return -1;
}

GetNearestService(playerid, element_t)
{
    foreach(new j : Buildings)
    {
        if(!BuildingInfo[j][bExists] || BuildingInfo[j][bType] != element_t)continue;
        if(IsPlayerInRangeOfPoint(playerid, 6.0, BuildingInfo[j][bPosX], BuildingInfo[j][bPosY], BuildingInfo[j][bPosZ]) <= 0)continue;
        if(GetPlayerVirtualWorld(playerid) != BuildingInfo[j][bPosWorld])continue;
        if(GetPlayerInterior(playerid) != BuildingInfo[j][bPosInterior])continue;
        if(BuildingInfo[j][bLocked])continue; return j;
    }

    return -1;
}

GetNearestMeal(playerid)
{
    new mealid = PlayerInfo[playerid][pMeal];

    if(mealid != -1 && MealInfo[mealid][mExists])return
        PlayerInfo[playerid][pMeal];

    foreach(new i : Meals) if(MealInfo[i][mExists] && IsPlayerInRangeOfPoint(playerid, 2.5, MealInfo[i][mPosX], MealInfo[i][mPosY], MealInfo[i][mPosZ]) && GetPlayerInterior(playerid) == MealInfo[i][mInterior] && GetPlayerVirtualWorld(playerid) == MealInfo[i][mWorld])
    {
        if(MealInfo[i][mPosX] == 0.0 && MealInfo[i][mPosY] == 0.0 && MealInfo[i][mPosZ] == 0.0)continue;
        if(MealInfo[i][mPlayer] == -1)return i;
    }

    return -1;
}

GetNearestCrate(playerid)
{
    new crateid = PlayerInfo[playerid][pCarryCrate];

    if(crateid != -1 && CrateInfo[crateid][crExists])return
        PlayerInfo[playerid][pCarryCrate];

    foreach(new i : Crates) if(CrateInfo[i][crExists] && IsPlayerInRangeOfPoint(playerid, 2.0, CrateInfo[i][crPosX], CrateInfo[i][crPosY], CrateInfo[i][crPosZ]) && GetPlayerInterior(playerid) == CrateInfo[i][crInterior] && GetPlayerVirtualWorld(playerid) == CrateInfo[i][crWorld])
    {
        if(CrateInfo[i][crPosX] == 0.0 && CrateInfo[i][crPosY] == 0.0 && CrateInfo[i][crPosZ] == 0.0)continue;

        if(CrateInfo[i][crPlayer] == -1 && CrateInfo[i][crVehicleID] == -1)
            return i;
    }

    return -1;
}

GetNearestLab(playerid, Float:radius = 5.0) {
    new id = -1;
    foreach(new i: Lab) {
        if(LabInfo[i][lExists]) {
            if(IsPlayerInRangeOfPoint(playerid, radius, LabInfo[i][lPosX], LabInfo[i][lPosY], LabInfo[i][lPosZ])) {
                if(GetPlayerInterior(playerid) == LabInfo[i][lInterior] && GetPlayerVirtualWorld(playerid) == LabInfo[i][lWorld]) {
                    id = i;
                    break;
                }
            }
        }
    }
    return id;
}

GetPlayerTeleport(playerid)
{
    new i = Pickup_Nearest(playerid, ELEMENT_TELEPORT);

    if(i == -1)
    {
        new Float:teleportRange[2] = {1.0, 7.0};
        new playerState = IsPlayerInAnyVehicle(playerid);

        foreach(new t: Teleports) if(IsPlayerInRangeOfPoint(playerid, teleportRange[playerState], TeleportInfo[t][teleportX], TeleportInfo[t][teleportY], TeleportInfo[t][teleportZ]) > 0 || IsPlayerInRangeOfPoint(playerid, teleportRange[playerState], TeleportInfo[t][teleportGX], TeleportInfo[t][teleportGY], TeleportInfo[t][teleportGZ]) > 0)
            return t;
    }

    return i;
}

GetPlayerHouseID(playerid)
{
    if(GetPlayerVirtualWorld(playerid) < HOUSE_WORLD) return -1;

    return GetPlayerVirtualWorld(playerid) - HOUSE_WORLD;
}

GetPlayerHouse(playerid, bool:insideHouse)
{
    new i = -1;

    if(insideHouse)
    {
        if(PlayerInfo[playerid][pCheckpointID] != -1)
        {
            i = Streamer_GetIntData(STREAMER_TYPE_CP, PlayerInfo[playerid][pCheckpointID], E_STREAMER_EXTRA_ID);
            if(i != -1 && HouseInfo[i][hExists] && GetPlayerVirtualWorld(playerid) == HouseInfo[i][hWorld])return i;
        }
        foreach(new h : Houses) if(HouseInfo[h][hExists] && GetPlayerVirtualWorld(playerid) == HouseInfo[h][hWorld])return h;
    }

    if(!insideHouse)
    {
        if(PlayerInfo[playerid][pCheckpointID] != -1)
        {
            i = Streamer_GetIntData(STREAMER_TYPE_CP, PlayerInfo[playerid][pCheckpointID], E_STREAMER_EXTRA_ID);
            if(i != -1 && IsPlayerInRangeOfPoint(playerid, 1.5, HouseInfo[i][hPosX], HouseInfo[i][hPosY], HouseInfo[i][hPosZ]) && GetPlayerVirtualWorld(playerid) == HouseInfo[i][hPosWorld] && GetPlayerInterior(playerid) == HouseInfo[i][hPosInterior])return i;
        }
        else foreach(new h : Houses) if(HouseInfo[h][hExists] && IsPlayerInRangeOfPoint(playerid, 1.5, HouseInfo[h][hPosX], HouseInfo[h][hPosY], HouseInfo[h][hPosZ]) && GetPlayerVirtualWorld(playerid) == HouseInfo[h][hPosWorld] && GetPlayerInterior(playerid) == HouseInfo[h][hPosInterior])return h;
    }

    return -1;
}

GetPlayerBuildingID(playerid)
{
    if(GetPlayerVirtualWorld(playerid) < BUILDING_WORLD) return -1;

    return GetPlayerVirtualWorld(playerid) - BUILDING_WORLD;
}

GetPlayerBuilding(playerid, bool:insideBiz)
{
    new i = -1;

    if(insideBiz)
    {
        if(PlayerInfo[playerid][pPickupID] != -1)
        {
            Streamer_GetArrayData(STREAMER_TYPE_PICKUP, PlayerInfo[playerid][pPickupID], E_STREAMER_EXTRA_ID, g_pks, siz_g_pks);
            if(g_pks[cp_type] == ELEMENT_BUILDING) i = g_pks[cp_id];
            if(i != -1 && BuildingInfo[i][bExists] && GetPlayerVirtualWorld(playerid) == BuildingInfo[i][bWorld])return i;
        }
        foreach(new b : Buildings) if(BuildingInfo[b][bExists] && GetPlayerVirtualWorld(playerid) == BuildingInfo[b][bWorld])return b;
    }

    if(!insideBiz)
    {
        if(PlayerInfo[playerid][pPickupID] != -1)
        {
            Streamer_GetArrayData(STREAMER_TYPE_PICKUP, PlayerInfo[playerid][pPickupID], E_STREAMER_EXTRA_ID, g_pks, siz_g_pks);
            if(g_pks[cp_type] == ELEMENT_BUILDING) i = g_pks[cp_id];
            if(i != -1 && IsPlayerInRangeOfPoint(playerid, 1.5, BuildingInfo[i][bPosX], BuildingInfo[i][bPosY], BuildingInfo[i][bPosZ]) && GetPlayerVirtualWorld(playerid) == BuildingInfo[i][bPosWorld] && GetPlayerInterior(playerid) == BuildingInfo[i][bPosInterior])return i;
        }
        else foreach(new b : Buildings) if(BuildingInfo[b][bExists] && IsPlayerInRangeOfPoint(playerid, 1.5, BuildingInfo[b][bPosX], BuildingInfo[b][bPosY], BuildingInfo[b][bPosZ]) && GetPlayerVirtualWorld(playerid) == BuildingInfo[b][bPosWorld] && GetPlayerInterior(playerid) == BuildingInfo[b][bPosInterior])return b;
    }

    return -1;
}

GetFishingZone(playerid, bool:boatCheck = false)
{
    if(boatCheck == true)
    {
        for(new f, fs = sizeof(FishingZones); f < fs; f++) if(IsPlayerInDynamicArea(playerid, FishingAreas[f]) > 0)return f;
    }

    for(new j, js = sizeof(FishingPoints); j < js; j++)
    {
        if(IsPlayerInRangeOfPoint(playerid, 1.5, FishingPoints[j][0], FishingPoints[j][1], FishingPoints[j][2]) > 0)
            return 1;
    }

    return -1;
}

GetPlateZone(playerid)
{
    for(new p, ps = sizeof(PlateZones); p < ps; p++)
    {
        if(IsPlayerInRangeOfPoint(playerid, 3.0, PlateZones[p][0], PlateZones[p][1], PlateZones[p][2]) > 0)
            return 1;
    }

    return -1;
}

//Houses System

House_Reset(houseid)
{
    if(HouseInfo[houseid][hExists])
    {
        // new query[256];

        mysql_format(ourConnection, queryx, sizeof(queryx), "UPDATE characters SET house = '%d', house_price = '%d' WHERE house = '%d'", -1, -1, HouseInfo[houseid][hID]);
        mysql_tquery(ourConnection, queryx);

        foreach(new i : Player)
        {
            if(!IsPlayerConnected(i) || !PlayerInfo[i][pLogged] || PlayerInfo[i][pHouse] != houseid)continue;

            PlayerInfo[i][pHouse] = -1;
            PlayerInfo[i][pHousePrice] = -1;
            if(PlayerInfo[i][pHouseSpawn] == houseid)PlayerInfo[i][pHouseSpawn] = -1;
        }

        for(new j; j < MAX_STORAGE_ITEMS; j++)
        {
            HouseInfo[houseid][hInvList][j] = 0;
            HouseInfo[houseid][hInvAmount][j] = 0;
            HouseInfo[houseid][hInvExtra][j] = 0;
        }

        HouseInfo[houseid][hOwner] = 0;
        HouseInfo[houseid][hInvPosX] = HouseInfo[houseid][hPosIntX];
        HouseInfo[houseid][hInvPosY] = HouseInfo[houseid][hPosIntY];
        HouseInfo[houseid][hInvPosZ] = HouseInfo[houseid][hPosIntZ];
        HouseInfo[houseid][hLocked] = 1;
        HouseInfo[houseid][hCash] = 0;

        mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT * FROM furnitures WHERE world = '%d'", HouseInfo[houseid][hWorld]);
        mysql_tquery(ourConnection, queryx, "OnDeleteFurnitures", "ddd", -1, HouseInfo[houseid][hWorld], 0);
    }

    return 1;
}

House_Delete(houseid)
{
    HouseInfo[houseid][hExists] = 0;
    HouseInfo[houseid][hOwner] = 0;

    HouseInfo[houseid][hPosX] = 0.0;
    HouseInfo[houseid][hPosY] = 0.0;
    HouseInfo[houseid][hPosZ] = 0.0;
    HouseInfo[houseid][hPosWorld] = 0;
    HouseInfo[houseid][hPosInterior] = 0;

    HouseInfo[houseid][hPosIntX] = 0.0;
    HouseInfo[houseid][hPosIntY] = 0.0;
    HouseInfo[houseid][hPosIntZ] = 0.0;
    HouseInfo[houseid][hInterior] = 0;

    HouseInfo[houseid][hLocked] = 0;
    HouseInfo[houseid][hCash] = 0;
    HouseInfo[houseid][hPrice] = 0;
    
    HouseInfo[houseid][Kira] = 0;
    HouseInfo[houseid][Kiraci] = 0;
    HouseInfo[houseid][Satis] = 0;

    DestroyDynamicCP(HouseInfo[houseid][hCheckpoint]);

    // new query[128];

    mysql_format(ourConnection, queryx, sizeof(queryx), "DELETE FROM houses WHERE id = '%d'", HouseInfo[houseid][hID]);
    mysql_tquery(ourConnection, queryx);

    mysql_format(ourConnection, queryx, sizeof(queryx), "UPDATE characters SET house = '%d', house_price = '%d' WHERE house = '%d'", -1, -1, houseid);
    mysql_tquery(ourConnection, queryx);

    mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT * FROM furnitures WHERE world = '%d'", HouseInfo[houseid][hWorld]);
    mysql_tquery(ourConnection, queryx, "OnDeleteFurnitures", "ddd", -1, HouseInfo[houseid][hWorld], 0);

    foreach(new i : Player)
    {
        if(!IsPlayerConnected(i) || !PlayerInfo[i][pLogged])continue;
        if(PlayerInfo[i][pHouse] != houseid)continue;

        PlayerInfo[i][pHouse] = -1;
        PlayerInfo[i][pHousePrice] = -1;
        if(PlayerInfo[i][pHouseSpawn] == houseid)PlayerInfo[i][pHouseSpawn] = -1;
    }

    return 1;
}

OtelKiraBitir(otel) {
    new oyuncu = OtelInfo[otel][otelSahibi];
    OtelInfo[otel][otelSahibi] = -1;
    OtelInfo[otel][otelKiralik] = 1;
    OtelInfo[otel][otelKilitli] = 0;
    OtelInfo[otel][otelKalanSure] = -1;
    foreach(new i: Player) {
        if(!PlayerInfo[i][pLogged]) continue;
        if(PlayerInfo[i][pKiraladigiOtel] == -1) continue;
        if(PlayerInfo[i][pKiraladigiOtel] != otel) continue;
        PlayerInfo[i][pKiraladigiOtel] = -1;
        SunucuMesajiC(i, "Kiraladýðýnýz otel odasýnýn süresi doldu.");
    }    
    mysql_format(ourConnection, queryx, sizeof(queryx), "UPDATE characters SET kiraladigiotel = '-1' WHERE id = '%d'", oyuncu);
    mysql_tquery(ourConnection, queryx);
    return 1;   
}

OtelSil(otel) {
    if(OtelInfo[otel][otelExists]) {
        OtelInfo[otel][otelExists] = 0;
        OtelInfo[otel][otelID] = -1;
        OtelInfo[otel][otelSahibi] = -1;
        OtelInfo[otel][otelDisX] = 0.0;
        OtelInfo[otel][otelDisY] = 0.0;
        OtelInfo[otel][otelDisZ] = 0.0;
        OtelInfo[otel][otelDisInterior] = 0;
        OtelInfo[otel][otelDisWorld] = 0;
        OtelInfo[otel][otelIntX] = 0.0;
        OtelInfo[otel][otelIntY] = 0.0;
        OtelInfo[otel][otelIntZ] = 0.0;
        OtelInfo[otel][otelIntInterior] = 0;
        OtelInfo[otel][otelIntWorld] = 0;
        OtelInfo[otel][otelKilitli] = 1;
        OtelInfo[otel][otelKalanSure] = -1;
        OtelInfo[otel][otelUcret] = 0;
        OtelInfo[otel][otelKiralik] = 0;
        Pickup_Destroy(OtelInfo[otel][otelCheckpoint]);
        Iter_Remove(Oteller, otel);
        return 1;
    } else return 0;
}

OtelKaydet(otel, yeni = 0) {
    if(yeni) {
        mysql_format(ourConnection, queryx, sizeof(queryx), "INSERT INTO otel (Sahip) VALUE ('%d')", OtelInfo[otel][otelSahibi]);
        new Cache:veri = mysql_query(ourConnection, queryx, true);
        OtelInfo[otel][otelID] = cache_insert_id();
        cache_delete(veri);
        OtelKaydet(otel);
        return 1;
    }
    else {
        mysql_format(ourConnection, queryx, sizeof(queryx), "UPDATE otel SET Sahip = '%d', disX = '%f', disY = '%f', disZ = '%f', disInterior = '%d', disWorld = '%d', intX = '%f', intY = '%f', intZ = '%f', intInterior = '%d', intWorld = '%d', kilit = '%d', kalanSure = '%d', ucret = '%d', kiralik = '%d'  WHERE id = '%d'", 
        OtelInfo[otel][otelSahibi],
        OtelInfo[otel][otelDisX],
        OtelInfo[otel][otelDisY],
        OtelInfo[otel][otelDisZ],
        OtelInfo[otel][otelDisInterior],
        OtelInfo[otel][otelDisWorld],
        OtelInfo[otel][otelIntX],
        OtelInfo[otel][otelIntY],
        OtelInfo[otel][otelIntZ],
        OtelInfo[otel][otelIntInterior],
        OtelInfo[otel][otelIntWorld],
        OtelInfo[otel][otelKilitli],
        OtelInfo[otel][otelKalanSure],
        OtelInfo[otel][otelUcret],
        OtelInfo[otel][otelKiralik],
        OtelInfo[otel][otelID]);
        mysql_tquery(ourConnection, queryx);
        return 1;
    }
}

House_GetAddress(id)
{
    new location[MAX_ZONE_NAME+12] = "Bilinmiyor";

    if(HouseInfo[id][hPosWorld] >= BUILDING_WORLD) foreach(new b : Buildings)
    {
        if(!BuildingInfo[b][bExists] || BuildingInfo[b][bWorld] != HouseInfo[id][hPosWorld]) continue;
        format(location, sizeof(location), BuildingInfo[b][bName]);
    }
    else GetCoords2DZone(HouseInfo[id][hPosX], HouseInfo[id][hPosY], location, MAX_ZONE_NAME);

    return location;
}

//Buildings System

Building_CreateItems()
{
    Building_SetupItem(STORE, "Cep Telefonu", 240);
    Building_SetupItem(STORE, "Tek kullanýmlýk telefon", 50);
    Building_SetupItem(STORE, "Telsiz", 1000);
    Building_SetupItem(STORE, "Maske", 3000);
    Building_SetupItem(STORE, "Beyzbol sopasý", 20);
    Building_SetupItem(STORE, "Boombox", 250);
    Building_SetupItem(STORE, "Çiçek", 2);
    Building_SetupItem(STORE, "Fotoðraf makinesi", 150);
    Building_SetupItem(STORE, "Spray Can", 25);
    Building_SetupItem(STORE, "Benzin Kutusu", 25);
    Building_SetupItem(STORE, "Sigara", 10);
    Building_SetupItem(STORE, "Zar", 5);

    Building_SetupItem(CLUCKIN, "Cluckin' Little Meal", 4);
    Building_SetupItem(CLUCKIN, "Cluckin' Huge Meal", 6);
    Building_SetupItem(CLUCKIN, "Cluckin' Big Meal", 7);
    Building_SetupItem(CLUCKIN, "Salad Meal", 3);

    Building_SetupItem(PIZZA, "Buster", 4);
    Building_SetupItem(PIZZA, "Double D-Luxe", 6);
    Building_SetupItem(PIZZA, "Full Rack", 7);
    Building_SetupItem(PIZZA, "Salad Meal", 3);

    Building_SetupItem(BURGER, "Moo Kids Meal", 4);
    Building_SetupItem(BURGER, "Beef Tower", 6);
    Building_SetupItem(BURGER, "Meat Stack", 7);
    Building_SetupItem(BURGER, "Salad Meal", 3);

    Building_SetupItem(BAR, "Sprite", 5);
    Building_SetupItem(BAR, "Bira", 8);

    Building_SetupItem(AMMUNATION, "Colt 45", 1000);
    Building_SetupItem(AMMUNATION, "Desert Eagle", 2000);
    Building_SetupItem(AMMUNATION, "Shotgun", 3000);
    Building_SetupItem(AMMUNATION, "Country Rifle", 2000);

    Building_SetupItem(BLACK_MARKET, "Desert Eagle", 24000);
    Building_SetupItem(BLACK_MARKET, "Colt 45", 1700);
    Building_SetupItem(BLACK_MARKET, "Shotgun", 28000);
    Building_SetupItem(BLACK_MARKET, "Tec-9", 29000);
    Building_SetupItem(BLACK_MARKET, "Knife", 2000);
    Building_SetupItem(BLACK_MARKET, "AK-47", 999999);
    Building_SetupItem(BLACK_MARKET, "Micro SMG", 29000);
    Building_SetupItem(BLACK_MARKET, "Silenced 9mm", 20000);
    Building_SetupItem(BLACK_MARKET, "M4", 999999);
    Building_SetupItem(BLACK_MARKET, "Katana", 2000);
    Building_SetupItem(BLACK_MARKET, "Country Rifle", 20000);

    Building_SetupItem(PNS, "Araç Tamiri", 50);

    Building_SetupItem(FUEL_STATION, "Litre baþýna fiyat", 3);

    Building_SetupItem(KANTIN, "Izgara Tavuk Göðsü", 4);
    Building_SetupItem(KANTIN, "Þinitzel", 6);
    Building_SetupItem(KANTIN, "Köri Soslu Tavuk", 7);
    Building_SetupItem(KANTIN, "Tavuklu Salata", 3);
    Building_SetupItem(KANTIN, "Hamburger", 4);
    Building_SetupItem(KANTIN, "Cheeseburger", 6);
    Building_SetupItem(KANTIN, "Double Cheeseburger", 7);
    Building_SetupItem(KANTIN, "Etli Salata", 3);
    Building_SetupItem(KANTIN, "Çocuk Menüsü", 4);
    Building_SetupItem(KANTIN, "Beef Tower", 6);
    Building_SetupItem(KANTIN, "Meat Stack", 7);
    Building_SetupItem(KANTIN, "Salad Meal", 3);
    Building_SetupItem(KANTIN, "Sprite", 5);

    Building_SetupItem(CLUCKIN, "Sprite", 5);
    Building_SetupItem(BURGER, "Sprite", 5);
    Building_SetupItem(PIZZA, "Sprite", 5);
    return 1;
}

Building_SetupItem(type, name[], price)
{

    new id = Iter_Free(Products);

    ProductInfo[id][productBiz] = type;
    ProductInfo[id][productPrice] = price;
    format(ProductInfo[id][productName], 32, name);

    Iter_Add(Products, id);

    return id;
}

Building_Reset(buildingid)
{
    if(BuildingInfo[buildingid][bExists])
    {
        new count;

        for(new j, js = sizeof(ProductInfo); j < js; j++)
        {
            if(ProductInfo[j][productBiz] != BuildingInfo[buildingid][bType])continue;
            if(count >= MAX_BIZ_ITEMS)break;
            BuildingInfo[buildingid][bPrices][count] = ProductInfo[j][productPrice];
            count++;
        }

        mysql_format(ourConnection, queryx, sizeof(queryx), "UPDATE characters SET biz = '%d' WHERE biz = '%d'", -1, BuildingInfo[buildingid][bID]);
        mysql_tquery(ourConnection, queryx);

        mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT * FROM furnitures WHERE world = '%d'", BuildingInfo[buildingid][bWorld]);
        mysql_tquery(ourConnection, queryx, "OnDeleteFurnitures", "ddd", -1, BuildingInfo[buildingid][bWorld], 0);

        BuildingInfo[buildingid][bOwner] = 0;
        BuildingInfo[buildingid][bLocked] = 0;
        BuildingInfo[buildingid][bCash] = 0;
        BuildingInfo[buildingid][bEntrance] = 0;
        BuildingInfo[buildingid][bProducts] = 500;

        SaveBuilding(buildingid);
    }

    return 1;
}

//Properties Commands

GetPlayerMenuBiz(playerid, bool:inside = false)//, rank = 4)
{
    new b = GetPlayerBuilding(playerid, true);
    if(b == -1 && !inside) b = GetPlayerBuilding(playerid, false);
    if(b == -1) return -1;

    if(PlayerInfo[playerid][pAdmin] >= 6) return b;
    else if(BuildingInfo[b][bFaction] != -1 && PlayerInfo[playerid][pAdmin] >= 6) return b;
    else if(BuildingInfo[b][bOwner] == PlayerInfo[playerid][pID]) return b;
    else if(HasPlayerUserKey(playerid, KEY_BUILDING, BuildingInfo[b][bID]) > 0 || PlayerInfo[playerid][pCalistigiIsyeri][0] == b) return b;
    else if(PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] >= 6) return b;
//  if(BuildingInfo[b][bFaction] != -1 && PlayerInfo[playerid][pFaction] == BuildingInfo[b][bFaction] && PlayerInfo[playerid][pRank] < rank) return b;

    return -1;
}

GetHouseComplexOwner(h)
{
    new complex = HouseInfo[h][hComplex];

    if(complex != -1) foreach(new b : Buildings) if(BuildingInfo[b][bID] == complex) return BuildingInfo[b][bOwner];

    return -1;
}

GetPlayerMenuHouse(playerid, bool:inside = false)
{
    new h = GetPlayerHouse(playerid, true);
    if(h == -1 && !inside) h = GetPlayerHouse(playerid, false);
    if(h == -1) return -1;

    if(HouseInfo[h][Kiraci] == PlayerInfo[playerid][pID]) return h;
    if(PlayerInfo[playerid][pAdmin] >= 6) return h;
//    else if(GetHouseComplexOwner(h) == PlayerInfo[playerid][pID]) return h;
    else if(HouseInfo[h][hOwner] == PlayerInfo[playerid][pID]) return h;
    else if(PlayerInfo[playerid][pHouse] == h) return h;
    else if(HasPlayerUserKey(playerid, KEY_HOUSE, HouseInfo[h][hID]) > 0) return h;
    else if(PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] >= 6) return h;


    return -1;
}

GetPlayerMaxProperties(playerid, bool:isHouse)
{
    new maxProperty = (isHouse) ? MAX_OWNED_HOUSE : MAX_OWNED_BIZ;

    if(!PlayerInfo[playerid][pPremium]) return maxProperty;

    maxProperty += (isHouse) ? (PlayerInfo[playerid][pPremium] + MAX_OWNED_HOUSE) : (PlayerInfo[playerid][pPremium] + MAX_OWNED_BIZ);

    return maxProperty;
}

//Miscellaneous Functions

AMXProtection()
{
    new b;

    #emit load.pri b
    #emit stor.pri b

    new a[][] =
    {
        "Unarmed (Fist)",
        "Brass K"
    };

    #pragma unused a
}

ShowRadioLinks(playerid, vehicleStereo)return mysql_tquery(ourConnection, "SELECT * FROM radio_links", "OnShowRadioLinksSearch", "dd", playerid, vehicleStereo);

ShowCoynAdvantages(playerid)return
    Dialog_Show(playerid, Dialog19PUse, DIALOG_STYLE_TABLIST_HEADERS, "SA-Point ile satýn alýnanlar", "Ürün\tMiktar \nTelefon numarasý deðiþtir\t%d\nKarakter Yapýlandýrma\t%d\nPlaka Deðiþimi\t%d\n", "Kullan", "Geri", PlayerInfo[playerid][pNumberChange], PlayerInfo[playerid][pNickChange], PlayerInfo[playerid][pPlateChange]);

SetPlayerSkinEx(playerid, skinid)
{
    if(!skinid) skinid = PlayerInfo[playerid][pOriginalSkin];

    if(!PlayerInfo[playerid][pOriginalSkin]) skinid = random(311) + 1;

    PlayerInfo[playerid][pOriginalSkin] = skinid;

    return SetPlayerSkin(playerid, skinid);
}

IsPlayerIDOnline(id)
{
    foreach(new pid: Player) if(IsPlayerConnected(pid) && PlayerInfo[pid][pID] == id) return pid;

    return -1;
}

DestroyPoliceActor(playerid)
{
    if(PlayerInfo[playerid][pSnakeCamActor] != -1)
    {
        DestroyDynamicActor(PlayerInfo[playerid][pSnakeCamActor]);
        DestroyPlayerObject(playerid, PlayerInfo[playerid][pSnakeCamObject]);
        PlayerInfo[playerid][pJustSpawned] = true;
        Player_SetSpawn(playerid);
        SetPlayerSkinEx(playerid, PlayerInfo[playerid][pSnakeCamActorSkin]);
    }

    return 1;
}

EndTaxi(playerid, id)
{
    if(PlayerInfo[playerid][pTaxi] != -1 && IsPlayerConnected(PlayerInfo[playerid][pTaxi]) && PlayerInfo[id][tPassenger] == playerid)
    {
        AC_GivePlayerMoney(id, PlayerInfo[id][tCash], "/taksimetre");
        AC_GivePlayerMoney(playerid, -PlayerInfo[id][tCash], "/taksimetre");
        PlayerInfo[id][tPassenger] = -1;
        BasariMesaji(id, "Yolcu %s aracýndan indi ve $%d kazandýn.", ReturnRoleplayName(playerid), PlayerInfo[id][tCash]);
        PlayerInfo[playerid][pTaxi] = -1;

        PlayerTextDrawHide(id, PlayerInfo[id][pTextdraws][0]);
        PlayerTextDrawHide(playerid, PlayerInfo[playerid][pTextdraws][0]);
    }

    return 1;
}

GetBizRequestType(buildingid)
{
    switch(BuildingInfo[buildingid][bType])
    {
        case STORE: return 24;
        case CLUCKIN .. BURGER: return 25;
        case BAR: return 26;
        case CLOTHING: return 22;
        case PNS: return 14;
    }

    return -1;
}

/*IsRequestFree(buildingid)
{
    foreach(new j : Player) if(IsPlayerConnected(j) && PlayerInfo[j][pLogged] && !PlayerInfo[j][pJob])
    {
        if(PlayerInfo[j][pSelectedRequest] == buildingid)
            return j;
    }

    return -1;
}*/

ReturnRoleplayName(playerid, bool:maskedValue = false)
{
    new name[MAX_PLAYER_NAME];

    if(maskedValue && PlayerInfo[playerid][pMasked])
        format(name, sizeof(name), PlayerInfo[playerid][pMaskName]);

    else
    {
        GetPlayerName(playerid, name, MAX_PLAYER_NAME);
        for(new j; j < strlen(name); j++) if(name[j] == '_') name[j] = ' ';
    }

    return name;
}

ToggleMask(playerid)
{
    format(PlayerInfo[playerid][pMasked], MAX_PLAYER_NAME, "Bos");

    foreach(new i : Player) if(IsPlayerConnected(i) && PlayerInfo[i][pLogged])
    {
        SetPlayerMarkerForPlayer(i, playerid, COLOR_WHITE);
        ShowPlayerNameTagForPlayer(i, playerid, true);
    }
    //DestroyDynamic3DTextLabelEx(PlayerInfo[playerid][pNameTag]);
    PlayerInfo[playerid][pMasked] = 0;
    Player_Info(playerid, "~y~Maskeyi~w~ cikarttin.");

    return 1;
}

ApplyAnimationEx(playerid, animlib[], animname[], Float:fDelta, loop, lockx, locky, freeze, time, forcesync = 0)
{
    ApplyAnimation(playerid, animlib, animname, fDelta, loop, lockx, locky, freeze, time, forcesync);

    PlayerInfo[playerid][pLoopAnim] = true;
    Player_Info(playerid, "~y~BOSLUK~w~ ile animasyonu silebilirsin.");

    return 1;
}

AnimationCheck(playerid)
{
    return (GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && PlayerInfo[playerid][pCarryCrate] == -1 && PlayerInfo[playerid][pMeal] == -1 && !PlayerInfo[playerid][pDeath] && !PlayerInfo[playerid][pFreezed] && !PlayerInfo[playerid][pCuffed] && !PlayerInfo[playerid][pStunned]);
}

LogYaz(playerid, command[], giveplayerid, extravar = -1, extravar2 = -1)
{
    // new query[1024];
    new playerIP[16];

    GetPlayerIp(playerid, playerIP, 16);

    mysql_format(ourConnection, queryx, sizeof(queryx), "INSERT INTO transfer_logs (giver_character_id, receiver_character_id, command, extra_var, second_extra_var, created_at, ip) VALUES ('%d', '%d', '%e', '%d', '%d', NOW(), '%e')",
        PlayerInfo[playerid][pID], (giveplayerid != -1) ? PlayerInfo[giveplayerid][pID] : -1,
        command, extravar, extravar2,
        playerIP);

    mysql_tquery(ourConnection, queryx);

    return 1;
}

//Player System

Player_Recon(playerid, id)
{
    //pc_cmd_anote(playerid, PlayerInfo[id][pCharacterName]);
    if(GetPlayerState(playerid) != PLAYER_STATE_SPECTATING)
    {
        new Float:pX, Float:pY, Float:pZ, Float:pA, pINT, pVW;
        GetPlayerPos(playerid, pX, pY, pZ);
        GetPlayerFacingAngle(playerid, pA);
        pINT = GetPlayerInterior(playerid);
        pVW = GetPlayerVirtualWorld(playerid);
        SetPVarFloat(playerid, "SpecX", pX);
        SetPVarFloat(playerid, "SpecY", pY);
        SetPVarFloat(playerid, "SpecZ", pZ);
        SetPVarFloat(playerid, "SpecA", pA);
        SetPVarInt(playerid, "SpecINT", pINT);
        SetPVarInt(playerid, "SpecVW", pVW);
    }

    TogglePlayerSpectating(playerid, true);
    SetPlayerInterior(playerid, GetPlayerInterior(id));
    AC_SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(id));

    if(IsPlayerInAnyVehicle(id))
        PlayerSpectateVehicle(playerid, GetPlayerVehicleID(id));
    else
        PlayerSpectatePlayer(playerid, id);

    if(PlayerInfo[playerid][pInRecon] != -1)
    {
        PlayerInfo[PlayerInfo[playerid][pInRecon]][pIzleniyor] = -1;
    }
    PlayerInfo[id][pIzleniyor] = playerid;
    
    if(PlayerInfo[playerid][pInRecon] != id)
    {
        if(PlayerInfo[id][pAFKTime] < 5)
        {
            SunucuMesaji(playerid, "%s(%d) kiþisini izliyorsun.", ReturnRoleplayName(id), id);
        }
        else
        {
            SunucuMesaji(playerid, "%s(%d) kiþisini izliyorsun. Bu kullanýcý %d dakika (%d saniye) itibariyle AFK durumdadýr.", ReturnRoleplayName(id), id, PlayerInfo[id][pAFKTime]/60, PlayerInfo[id][pAFKTime]);
        }
        //printf("[%s] %s adlý yetkili %s adlý oyuncuyu izlemeye aldý.", ReturnDate(), ReturnRoleplayName(playerid), ReturnRoleplayName(id));
        //LogYaz(playerid, "/spec", id);
    }
    if(PlayerInfo[id][pAdmin] >= LEVEL20 && PlayerInfo[playerid][pInRecon] != id)
    {
        foreach(new j : Player) if(IsPlayerConnected(j) && PlayerInfo[j][pLogged] && PlayerInfo[j][pAdmin] >= LEVEL20 && PlayerInfo[j][pAdminAlert])
            SendFormattedMessage(j, COLOR_YELLOW, "AdmCmd: %s adlý yetkili %s adlý oyuncuyu izliyor.", ReturnRoleplayName(playerid), ReturnRoleplayName(id));
    }
    return PlayerInfo[playerid][pInRecon] = id;
}

Player_Info(playerid, text[], bool:forced = false)
{
    if(PlayerInfo[playerid][pBoxShowed] == true && !forced)
        return 1;

    PlayerTextDrawHide(playerid, PlayerInfo[playerid][pTextdraws][1]);
    PlayerTextDrawSetString(playerid, PlayerInfo[playerid][pTextdraws][1], text);
    PlayerTextDrawShow(playerid, PlayerInfo[playerid][pTextdraws][1]);

    SetTimerEx("DeleteInfoBox", 2500, false, "d", playerid);
    PlayerInfo[playerid][pBoxShowed] = true;

    return 1;
}

Player_SetSpawn(playerid)
{
    AC_ResetTimer(playerid);
    PreloadAnimations(playerid);

    if(!PlayerInfo[playerid][pSpawnPoint]) PlayerInfo[playerid][pSpawnPoint] = SPAWN_POINT;

    Damages_Reset(playerid);

    SetPlayerSkinEx(playerid, (!PlayerInfo[playerid][pFactionDuty]) ? PlayerInfo[playerid][pSkin] : PlayerInfo[playerid][pFactionSkin]);
    if(PlayerInfo[playerid][pFightStyle] == 5)
        SetPlayerFightingStyle(playerid, FIGHT_STYLE_BOXING);
    else if(PlayerInfo[playerid][pFightStyle] == 6)
        SetPlayerFightingStyle(playerid, FIGHT_STYLE_KUNGFU);
    else
        SetPlayerFightingStyle(playerid, FIGHT_STYLE_GRABKICK);

    if(PlayerInfo[playerid][pMasked])
    {
        PlayerInfo[playerid][pMasked] = 0;
        pc_cmd_maske(playerid, NULL);
    }

    if(PlayerInfo[playerid][pJustSpawned])
    {
        SetTimerEx("OnPlayerSetData", 1000, false, "d", playerid);
    }
    else AC_SetPlayerHealth(playerid, PlayerInfo[playerid][pSpawnHealth]);

    if(PlayerInfo[playerid][pJailTime])
    {
        PlayerTextDrawShow(playerid, PlayerInfo[playerid][pTextdraws][0]);

        SetPlayerToJailPos(playerid);
        SetPlayerFacingAngle(playerid, 0); return 1;
    }

    TogglePlayerSpectating(playerid, false);
    SetCameraBehindPlayer(playerid);
    if(PlayerInfo[playerid][pPosX] != 0 && PlayerInfo[playerid][pPosY] != 0 && PlayerInfo[playerid][pPosZ] != 0)
    {
        SetFreezePos(playerid, PlayerInfo[playerid][pPosX], PlayerInfo[playerid][pPosY], PlayerInfo[playerid][pPosZ]); // 04.04.2019
        SetPlayerFacingAngle(playerid, PlayerInfo[playerid][pPosA]);
        SetPlayerInterior(playerid, PlayerInfo[playerid][pCrashInt]);
        AC_SetPlayerVirtualWorld(playerid, PlayerInfo[playerid][pCrashWorld]);
        AC_SetPlayerHealth(playerid, 100);
        PlayerInfo[playerid][pCrashed] = 0;
        PlayerInfo[playerid][pSnakeCamActor] = -1;
        //PlayerInfo[playerid][pTVActor] = -1;
    }
    else
    {
        SetFreezePos(playerid, SPAWN_X, SPAWN_Y, SPAWN_Z); // 04.04.2019
        SetPlayerFacingAngle(playerid, SPAWN_A);
        SetPlayerInterior(playerid, 0);
        AC_SetPlayerVirtualWorld(playerid, 0);
        AC_SetPlayerHealth(playerid, 100);
        PlayerInfo[playerid][pCrashed] = 0;
        PlayerInfo[playerid][pSnakeCamActor] = -1;
        //PlayerInfo[playerid][pTVActor] = -1;
    }

    TogglePlayerControllable(playerid, false);
    PlayerInfo[playerid][pFreezed] = 1;
    SetTimerEx("Unfreeze", 1000 + GetPlayerPing(playerid), false, "d", playerid);

    if(PlayerInfo[playerid][pDeath] == 1)
    {
        PlayerInfo[playerid][pDeath] = 1;
        PlayerInfo[playerid][pLegHit] = 0;
        new string[70], xstring[70];
        format(string, sizeof(string), "(( Bu kullanýcý yaralý. [/hasarlar %d] ))", playerid);
        PlayerInfo[playerid][pTedaviSure] = 180;
        PlayerTextDrawShow(playerid, PlayerInfo[playerid][pTextdraws][0]);
        format(xstring,sizeof(xstring), "~n~~g~BAYGIN: ~w~180");
        PlayerTextDrawSetString(playerid, PlayerInfo[playerid][pTextdraws][0], xstring);
        DestroyDynamic3DTextLabelEx(PlayerInfo[playerid][pNameTag]);
        PlayerInfo[playerid][pNameTag] = CreateDynamic3DTextLabel(string, COLOR_ADMIN, 0, 0, 0.5, 30.0, playerid, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0);
        AC_SetPlayerHealth(playerid, 10.0);
        AC_SetPlayerArmour(playerid, 0);
        SetCameraBehindPlayer(playerid);
        ExecuteShots[playerid] = 0;
        ApplyAnimation(playerid, "WUZI", "CS_Dead_Guy", 4.1, 0, 1, 1, 1, 0, 1);
    }
    if(PlayerInfo[playerid][pDeath] == 3)
    {
        DestroyDynamic3DTextLabelEx(PlayerInfo[playerid][pNameTag]);
        PlayerInfo[playerid][pDeath] = 3;
        new xyazi[64];
        format(xyazi, sizeof xyazi, "(( Bu kullanýcý aðýr yaralý. [/hasarlar %d] ))", playerid);
        PlayerInfo[playerid][pAgirYarali] = 1;
        PlayerTextDrawShow(playerid, PlayerInfo[playerid][pTextdraws][0]);
        PlayerInfo[playerid][pTedaviSure] = 360;
        PlayerInfo[playerid][pNameTag] = CreateDynamic3DTextLabel(xyazi, COLOR_ADMIN, 0, 0, 0.5, 30.0, playerid, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0);
        ApplyAnimation(playerid, "WUZI", "CS_Dead_Guy", 4.1, 0, 1, 1, 1, 0, 1);
        return 1;
    }
    if(!PlayerInfo[playerid][pDrugUnconscious] && !PlayerInfo[playerid][pDrugRunJumpBlock] && PlayerInfo[playerid][pDrugCrisis] == 6)
    {
        PlayerInfo[playerid][pDrugVar] = false;
        PlayerInfo[playerid][pNameTag] = CreateDynamic3DTextLabel("(( Bu kullanýcý yoksunluk krizi geçiriyor. ))", COLOR_ADMIN, 0, 0, 0.5, 30.0, playerid, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0);
        SetPlayerDrunkLevel(playerid, 0);
        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
        PlayerInfo[playerid][pLoopAnim] = false;
        if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) ClearAnimations(playerid);
        if(!PlayerInfo[playerid][pDrugUnconscious]) ApplyAnimation(playerid, "CRACK", "crckdeth2", 4.1, 0, 1, 1, 1, 0, 1);
        PlayerInfo[playerid][pDrugRunJumpBlock] = true;
        PlayerInfo[playerid][pDrugUnconscious] = true;
    }
    return 1;
}

Player_ShowStats(playerid, targetid)
{
    if(!IsPlayerConnected(playerid) || !IsPlayerConnected(targetid))return 1;

    new factionID = PlayerInfo[playerid][pFaction];
    new jobID = PlayerInfo[playerid][pJob];
    new Float:hp, Float:ap;
    new premiumStr[32];

    switch(PlayerInfo[playerid][pPremium])
    {
        case 1: premiumStr = "Bronze";
        case 2: premiumStr = "Silver";
        case 3: premiumStr = "Gold";
        case 4: premiumStr = "Platinum";
        case 5: premiumStr = "Diamond";
        default: premiumStr = "Hayýr";
    }

    if(PlayerInfo[playerid][pPremium] > 0) format(premiumStr, sizeof(premiumStr), "%s", premiumStr);

    AC_GetPlayerHealth(playerid, hp);
    AC_GetPlayerArmour(playerid, ap);

    new houseString[256];
    new bizString[256];

    new krizesigi[100];

    switch(PlayerInfo[playerid][pDrugRemainingTime])
    {
        case -1: format(krizesigi, 100, "Durum: Kriz belirtisi yok");
        case 0: format(krizesigi, 100, "Durum: Yoksunluk krizi");
        case 1: format(krizesigi, 100, "Kriz Eþiði: 1 saat");
        case 2: format(krizesigi, 100, "Kriz Eþiði: 2 saat");
        case 3: format(krizesigi, 100, "Kriz Eþiði: 3 saat");
        case 4: format(krizesigi, 100, "Kriz Eþiði: 4 saat");
        case 5: format(krizesigi, 100, "Kriz Eþiði: 5 saat");
        case 6: format(krizesigi, 100, "Kriz Eþiði: 6 saat");
    }

    if(PlayerInfo[playerid][pHouse] != -1) format(houseString, sizeof(houseString), "%d (%s) ", PlayerInfo[playerid][pHouse], House_GetAddress(PlayerInfo[playerid][pHouse]));
    foreach(new h : Houses) if(HouseInfo[h][hExists] && PlayerInfo[playerid][pID] == HouseInfo[h][hOwner] && h != PlayerInfo[playerid][pHouse]) format(houseString, sizeof(houseString), "%s%d (%s) ", houseString, h, House_GetAddress(h));
    foreach(new b : Buildings) if(BuildingInfo[b][bExists] && PlayerInfo[playerid][pID] == BuildingInfo[b][bOwner]) format(bizString, sizeof(bizString), "%s%s (%d) ", bizString, BuildingInfo[b][bName], b);

    SendFormattedMessage(targetid, COLOR_GREEN, "__________________________[%s (%s) | %s]__________________________", ReturnRoleplayName(playerid), PlayerInfo[playerid][pUsername], ReturnDate());
    SendFormattedMessage(targetid, COLOR_GRAD2, "Cinsiyet: %s | Yaþ: %d | Ten Rengi: %s | Kýyafet: %d | SA-Point Payday: %d/%d", (PlayerInfo[playerid][pSex]) ? ("Kadýn") : ("Erkek"), PlayerInfo[playerid][pAge], (PlayerInfo[playerid][pTenRengi]) ? ("Siyah") : ("Beyaz"), PlayerInfo[playerid][pSkin], PlayerInfo[playerid][pCoynPayday], SunucuBilgi[NPPayday]);
    SendFormattedMessage(targetid, COLOR_GRAD1, "Saðlýk: %.1f/%.1f | Zýrh: %.1f | Interior: %d | Virtual World: %d", hp, PlayerInfo[playerid][pSpawnHealth], ap, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid));//GetPlayerCustomSkin(playerid));
    SendFormattedMessage(targetid, COLOR_GRAD2, "Üzerindeki Para: $%d | Banka Hesabý: $%d | Biriken Maaþ: $%d | Mevduat Hesabý: $%d", PlayerInfo[playerid][pCash], PlayerInfo[playerid][pCashBank], PlayerInfo[playerid][pPaycheck], PlayerInfo[playerid][pSavings]);
    if(factionID != -1) SendFormattedMessage(targetid, COLOR_GRAD1, "Oluþum: %s | Rütbe: %s [%d]", FactionInfo[factionID][fName], fRanks[factionID][PlayerInfo[playerid][pRank] - 1], PlayerInfo[playerid][pRank]);
    if(jobID != -1) SendFormattedMessage(targetid, COLOR_GRAD2, "Meslek: %s | Trucker Geliri: $%d | Yakýt Geliri: $%d", Jobs[jobID][jobName], PlayerInfo[playerid][KamyoncuGeliri], PlayerInfo[playerid][pYakitGelir]);
    SendFormattedMessage(targetid, COLOR_GRAD1, "Tecrübe(EXP): %d/%d | Oynama Saati: %d | Seviye: %d | PayDay Süresi: %d dk", PlayerInfo[playerid][pExperience], PlayerInfo[playerid][pLevel]*4, PlayerInfo[playerid][pPlayingHours], PlayerInfo[playerid][pLevel], PlayerInfo[playerid][pMinutes]);
    SendFormattedMessage(targetid, COLOR_GRAD2, "Donator: %s | SA-Point: %d | Balýk: %d | Balýk Yemi: %d | Tamir Kiti: %d | Uyarý Sayýsý: %d", premiumStr, PlayerInfo[playerid][pCoyn], KacBalikVar(playerid), PlayerInfo[playerid][pBalikYemi], PlayerInfo[playerid][pTamirKiti], PlayerInfo[playerid][pUyariSayisi]);
    if(PlayerInfo[playerid][pDrugster]) SendFormattedMessage(targetid, COLOR_GRAD1, "Uyuþturucu Baðýmlýlýðý: Var | %s", krizesigi);

    if(strlen(houseString) > 0) SendFormattedMessage(targetid, COLOR_GRAD2, "Evler: %s", houseString);
    if(strlen(bizString) > 0) SendFormattedMessage(targetid, COLOR_GRAD2, "Ýþletmeler: %s", bizString);
    if(PlayerInfo[playerid][pCalistigiIsyeri][0] != -1) SendFormattedMessage(targetid, COLOR_GRAD2, "Çalýþtýðýnýz iþletme: %s", BuildingInfo[PlayerInfo[playerid][pCalistigiIsyeri][0]][bName]);
    if(PlayerInfo[playerid][pJailTime] > 1) SendFormattedMessage(targetid, COLOR_GRAD2, "Serbest býrakýlmanýza kalan süre: %d saniye", PlayerInfo[playerid][pJailTime]);
    SendFormattedMessage(targetid, COLOR_GREEN, "Yetenek Listesi:");
    if(PlayerInfo[playerid][pHirsizlikYetenegi] >= 0 && PlayerInfo[playerid][pHirsizlikYetenegi] < 20) SendFormattedMessage(targetid, COLOR_GRAD2, "Araç Hýrsýzlýðý Yeteneði: 1(Çalýnan Araç: %d)", PlayerInfo[playerid][pHirsizlikYetenegi]);
    else if(PlayerInfo[playerid][pHirsizlikYetenegi] >= 20 && PlayerInfo[playerid][pHirsizlikYetenegi] < 40) SendFormattedMessage(targetid, COLOR_GRAD2, "Araç Hýrsýzlýðý Yeteneði: 2 (Çalýnan Araç: %d)", PlayerInfo[playerid][pHirsizlikYetenegi]);
    else if(PlayerInfo[playerid][pHirsizlikYetenegi] >= 40) SendFormattedMessage(targetid, COLOR_GRAD2, "Araç Hýrsýzlýðý Yeteneði: 3 (Çalýnan Araç: %d)", PlayerInfo[playerid][pHirsizlikYetenegi]);
    if(PlayerInfo[playerid][pKamyoncuYetenegi] >= 0 && PlayerInfo[playerid][pKamyoncuYetenegi] < 300) SendFormattedMessage(targetid, COLOR_GRAD2, "Taþýmacýlýk Yeteneði: 1 (Yük: %d)", PlayerInfo[playerid][pKamyoncuYetenegi]);
    else if(PlayerInfo[playerid][pKamyoncuYetenegi] >= 300 && PlayerInfo[playerid][pKamyoncuYetenegi] < 1200) SendFormattedMessage(targetid, COLOR_GRAD2, "Taþýmacýlýk Yeteneði: 2 (Yük: %d)", PlayerInfo[playerid][pKamyoncuYetenegi]);
    else if(PlayerInfo[playerid][pKamyoncuYetenegi] >= 1200) SendFormattedMessage(targetid, COLOR_GRAD2, "Taþýmacýlýk Yeteneði: 3 (Yük: %d)", PlayerInfo[playerid][pKamyoncuYetenegi]);
    if(PlayerInfo[playerid][pBalikYetenegi] >= 0 && PlayerInfo[playerid][pBalikYetenegi] < 400) SendFormattedMessage(targetid, COLOR_GRAD2, "Balýkçýlýk Yeteneði: 1 (Tutulan Balýk: %d)", PlayerInfo[playerid][pBalikYetenegi]);
    else if(PlayerInfo[playerid][pBalikYetenegi] >= 400 && PlayerInfo[playerid][pBalikYetenegi] < 1000) SendFormattedMessage(targetid, COLOR_GRAD2, "Balýkçýlýk Yeteneði: 2 (Tutulan Balýk: %d)", PlayerInfo[playerid][pBalikYetenegi]);
    else if(PlayerInfo[playerid][pBalikYetenegi] >= 1000) SendFormattedMessage(targetid, COLOR_GRAD2, "Balýkçýlýk Yeteneði: 3 (Tutulan Balýk: %d)", PlayerInfo[playerid][pBalikYetenegi]);
    SendFormattedMessage(targetid, COLOR_GREEN, "__________________________[%s (%s) | %s]__________________________", ReturnRoleplayName(playerid), PlayerInfo[playerid][pUsername], ReturnDate());
    return 1;
}

Player_SendPM(playerid, id, message[256])
{
    if(isnull(message) || strlen(message) > 256)return
        KullanimMesajiC(playerid, "/pm [id/isim] [mesaj]");

    if(!IsPlayerConnected(id) || id == playerid)return
        HataMesajiC(playerid, "Geçersiz ID.");

    if(PlayerInfo[playerid][pAdmin] < 1 && PlayerInfo[id][pTogPM] || PlayerInfo[id][pTogPMPlayer][playerid])
        return SunucuMesajiC(playerid, "Kiþinin PM kanalý kapalý.");
        
    if(PlayerInfo[playerid][pAdmin] < 4 && PlayerInfo[id][pAdmin] > 3 && PlayerInfo[id][pTogPM])
        return SunucuMesajiC(playerid, "Kiþinin PM kanalý kapalý.");

    if(PlayerInfo[playerid][pAdmin] < 1 && PlayerInfo[id][pAdmin] > 3 && !PlayerInfo[id][pGizliAdmin])
    {
        PlayerInfo[playerid][pPM] = id;
        format(PlayerInfo[playerid][pTmpText], 256, message);

        new string[1024] = "UYARI: Bir yöneticiye özel mesaj göndermek üzeresin!\n\
        Herhangi bir konuda problem yaþýyorsan /rapor komutunu, sorular için /soru komutunu kullanmalýsýn.\n\
        {FF6347}Bir bugta olduðunuzu düþünüyorsanýz: {FFFFFF}/bugkurtar{FF6347} komutunu kullanarak kurtulabilirsiniz.\n\
        {FF6347}Aþaðýdaki özel mesajý göndermek istediðinizden emin misiniz? (Uygunsuz mesajýn cezalandýrýlabileceðini unutmayýn)\n";

        format(string, sizeof(string), "{FFFFFF}%sGönderilen özel mesaj: %s", string, PlayerInfo[playerid][pTmpText]);
        Dialog_Show(playerid, DialogConfirmPM, DIALOG_STYLE_MSGBOX, "PM Gönderme Politikasý", string, "Gönder", "Ýptal");
        return 1;
    }
    PlayerInfo[playerid][pPM] = id;

    new id_string[16];
    new string[256];
    format(string, sizeof string, "[PM] %s > %s: %s", ReturnRoleplayName(playerid), ReturnRoleplayName(id), message);
//    LogYaz(playerid, string, id);
    printf("[PM] %s > %s: %s", ReturnRoleplayName(playerid), ReturnRoleplayName(id), message);

    if(!PlayerInfo[playerid][pAdminDuty] && !PlayerInfo[playerid][pSupporterDuty])
    {
        format(id_string, sizeof(id_string), (PlayerInfo[playerid][pMasked]) ? ("(//)") : ("(%d)"), playerid);
        SendFormattedMessage(id, COLOR_RECEIVEPM, "** PM alýndý %s %s: %s", ReturnRoleplayName(playerid, true), id_string, message);
    }
    else SendFormattedMessage(id, COLOR_RECEIVEPM, (PlayerInfo[playerid][pAdminDuty]) ? ("** PM alýndý {ff9900}%s (%d){FCF545}: %s") : ("** PM alýndý {FCF545}%s (%d){FCF545}: %s"), ReturnRoleplayName(playerid), playerid, message);

    if(!PlayerInfo[id][pAdminDuty] && !PlayerInfo[id][pSupporterDuty])
    {
        format(id_string, sizeof(id_string), (PlayerInfo[id][pMasked]) ? ("(//)") : ("(%d)"), id);
        SendFormattedMessage(playerid, COLOR_SENDPM, "** PM gönderildi %s %s: %s", ReturnRoleplayName(id, true), id_string, message);
    }
    else SendFormattedMessage(playerid, COLOR_SENDPM, (PlayerInfo[id][pAdminDuty]) ? ("** PM gönderildi {ff9900}%s (%d){FFE536}: %s") : ("** PM gönderildi {FCF545}%s (%d){FFE536}: %s"), ReturnRoleplayName(id), id, message);

    if(PlayerInfo[id][pAFKTime] > 3) Player_Info(playerid, "PM Gonderdiginiz Kisi AFK.");

    foreach(new j : Player)
    {
        if(!IsPlayerConnected(j) || !PlayerInfo[j][pLogged] || PlayerInfo[j][pAdmin] < GAMEADMIN1)continue;
        if(PlayerInfo[j][pInRecon] != playerid)continue;

        SendFormattedMessage(j, COLOR_YELLOW, "%s > PM > %s: %s", ReturnRoleplayName(playerid, true), ReturnRoleplayName(id, true), message);
    }

    foreach(new j : Player)
    {
        if(!IsPlayerConnected(j) || !PlayerInfo[j][pLogged] || PlayerInfo[j][pAdmin] < GAMEADMIN1)continue;
        if(PlayerInfo[j][pInRecon] != id)continue;

        SendFormattedMessage(j, COLOR_YELLOW, "%s > PM > %s: %s", ReturnRoleplayName(playerid, true), ReturnRoleplayName(id, true), message);
    }

    return 1;
}

Player_ClearTemporaryVars(playerid)
{
    new n;

    foreach(new i : Player) if(IsPlayerConnected(i) && PlayerInfo[i][pLogged] && PlayerInfo[i][pDraggedBy] == playerid)
    {
        KillTimer(PlayerInfo[i][pDragTimer]);
        PlayerInfo[i][pDragged] = false;
        PlayerInfo[i][pDraggedBy] = -1;
        break;
    }

    foreach(new i: Player) {
        if(GozunuBaglayan[i] == playerid) {
            if(GozuBaglandi[i] == 1) {
                GozunuBaglayan[i] = -1;
                GozuBaglandi[i] = 0;
                GozBaglaIstegi[i] = 0;
                SunucuMesajiC(i, "Gözünüzü baðlayan oyuncu oyundan çýktýðý için göz baðýnýz otomatik çözüldü.");
                TextDrawHideForPlayer(i, BlindFold);
            }
        }
    }
    PlayerInfo[playerid][pTuningComponentAldi] = 0;
    BirlikteDinliyor[playerid] = -1;
    BirlikteDinlenen[playerid] = -1;
    if(GetPVarInt(playerid, "KulakliklaMuzik")) {
        if(BirlikteDinlenen[playerid] != -1) {
            BirlikteDinlenen[BirlikteDinlenen[playerid]] = -1;
            BirlikteDinliyor[BirlikteDinlenen[playerid]] = -1;
            DeletePVar(BirlikteDinlenen[playerid], "KulaklikLink");
            DeletePVar(BirlikteDinlenen[playerid], "KulakliklaMuzik");
            PlayerAME(BirlikteDinlenen[playerid], "telefondan kulaklýkla müzik dinlemeyi býrakýr.");
            SunucuMesajiC(BirlikteDinlenen[playerid], "Kulaklýkla artýk müzik dinlemiyorsunuz.");
            StopAudioStreamForPlayer(BirlikteDinlenen[playerid]);
            BirlikteDinlenen[playerid] = -1;
            BirlikteDinliyor[playerid] = -1;
            DeletePVar(playerid, "KulaklikLink");
            DeletePVar(playerid, "KulakliklaMuzik");
            StopAudioStreamForPlayer(playerid);
        } else {
            BirlikteDinlenen[playerid] = -1;
            BirlikteDinliyor[playerid] = -1;
            DeletePVar(playerid, "KulaklikLink");
            DeletePVar(playerid, "KulakliklaMuzik");
            StopAudioStreamForPlayer(playerid);
        }
    }
    if(GozBaglaIstegi[playerid]) {
        GozBaglaIstegi[playerid] = 0;
        KillTimer(GozBaglaTimer[playerid]);
    }
    GozunuBaglayan[playerid] = -1;
    if(GozuBaglandi[playerid] == 1) {
        GozuBaglandi[playerid] = 0;
        TextDrawHideForPlayer(playerid, BlindFold);
    }

    Furniture_DestroyLabels(playerid);
    DestroyPoliceActor(playerid);
    if(PlayerInfo[playerid][pParcalaTimer] != -1) {
        PlayerInfo[playerid][pParcalaTimer] = -1;
        PlayerTextDrawHide(playerid, PlayerText:Textdraw0[playerid]);
        PlayerTextDrawHide(playerid, PlayerText:Textdraw1[playerid]);
    }
    if(PlayerInfo[playerid][pKamyoncuTimer] != -1) {
        PlayerInfo[playerid][pKamyoncuTimer] = -1;
        PlayerTextDrawHide(playerid, PlayerText:Textdraw0[playerid]);
        PlayerTextDrawHide(playerid, PlayerText:Textdraw1[playerid]);
    }
    if(PlayerInfo[playerid][pYakitTimer] != -1) {
        PlayerInfo[playerid][pYakitTimer] = -1;
        PlayerTextDrawHide(playerid, PlayerText:Textdraw0[playerid]);
        PlayerTextDrawHide(playerid, PlayerText:Textdraw1[playerid]);
    }
    if(PlayerInfo[playerid][pDragged] == true) KillTimer(PlayerInfo[playerid][pDragTimer]);
    if(PlayerInfo[playerid][pTaxi] != -1) {
        new taxi = PlayerInfo[playerid][pTaxi];
        AC_GivePlayerMoney(playerid, PlayerInfo[taxi][tCash], "/taksimetre");
        AC_GivePlayerMoney(taxi, -PlayerInfo[taxi][tCash], "/taksimetre");
        PlayerInfo[taxi][tCash] = 0;
        PlayerInfo[taxi][tPassenger] = -1;
        PlayerInfo[taxi][tStartPos][0] = 0.0;
        PlayerInfo[taxi][tStartPos][1] = 0.0;
        PlayerInfo[taxi][tStartPos][2] = 0.0;
        PlayerInfo[playerid][pTaxi] = -1;
        PlayerInfo[playerid][pTaxPrice] = -1;
        SendClientMessage(taxi, -1, "{848484}Yolcunuz oyundan çýktýðý için taksimetre sonlandýrýldý.");
        PlayerTextDrawHide(playerid, PlayerInfo[playerid][pTextdraws][0]);
        PlayerTextDrawHide(taxi, PlayerInfo[taxi][pTextdraws][0]);
    }
    if(PlayerInfo[playerid][tPassenger] != -1) {
        new passenger = PlayerInfo[playerid][tPassenger];
        AC_GivePlayerMoney(playerid, PlayerInfo[playerid][tCash], "/taksimetre");
        AC_GivePlayerMoney(passenger, -PlayerInfo[playerid][tCash], "/taksimetre");
        PlayerInfo[playerid][tCash] = 0;
        PlayerInfo[playerid][tPassenger] = -1;
        PlayerInfo[playerid][tStartPos][0] = 0.0;
        PlayerInfo[playerid][tStartPos][1] = 0.0;
        PlayerInfo[playerid][tStartPos][2] = 0.0;
        PlayerInfo[passenger][pTaxi] = -1;
        PlayerInfo[passenger][pTaxPrice] = -1;
        SendClientMessage(passenger, -1, "{848484}Þoförünüz oyundan çýktýðý için taksimetre sonlandýrýldý.");
        PlayerTextDrawHide(playerid, PlayerInfo[playerid][pTextdraws][0]);
        PlayerTextDrawHide(passenger, PlayerInfo[passenger][pTextdraws][0]);
    }
    PlayerInfo[playerid][pPlateVeh] = -1;
    PlayerInfo[playerid][pPlateOption] = 0;
    PlayerInfo[playerid][pPlateTime] = 0;
    PlayerInfo[playerid][pLoopAnim] = false;
    PlayerInfo[playerid][pViewingCargo] = -1;

    if(PlayerInfo[playerid][pMasked])
        ToggleMask(playerid);

    if(PlayerInfo[playerid][pCarryCrate] != -1)
        pc_cmd_koli(playerid, "birak");

    if(PlayerInfo[playerid][pMeal] != -1)
    {
        Meal_Drop(PlayerInfo[playerid][pMeal]);
        PlayerInfo[playerid][pMeal] = -1;
    }

    if(PlayerInfo[playerid][pTalkingLive] != -1)
    {
        n = PlayerInfo[playerid][pTalkingLive];
        PlayerInfo[n][pTalkingLive] = -1;
        PlayerInfo[playerid][pTalkingLive] = -1;
    }

    if(PlayerInfo[playerid][pBuyingVehicle])
    {
        AC_SetPlayerVirtualWorld(playerid, 0);
        DestroyVehicle(PlayerInfo[playerid][pDealerVehicle]);
        PlayerInfo[playerid][pBuyingVehicle] = 0;
    }

    if(PlayerInfo[playerid][pInTuning])
        Tuning_ExitDisplay(playerid);

    PlayerInfo[playerid][pFishTime] = 0;
    PlayerInfo[playerid][pBalikTutuyor] = false;
    PlayerInfo[playerid][pCimice] = -1;

    if(PlayerInfo[playerid][pEditingMode]) switch(PlayerInfo[playerid][pEditingMode])
    {
        case 1: OnPlayerEditDynamicObject(playerid, PlayerInfo[playerid][pFurnitureObject], EDIT_RESPONSE_CANCEL, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
        default: OnPlayerEditDynamicObject(playerid, PlayerInfo[playerid][pSelectedItem], EDIT_RESPONSE_CANCEL, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
    }

    Dialog_Close(playerid);
    TextDrawHideForPlayer(playerid, KMH);
    PlayerTextDrawHide(playerid, VehicleSpeed[playerid]);
    PlayerTextDrawHide(playerid, VehicleFuel[playerid]);

    GangZoneDestroy(PlayerInfo[playerid][pGangZone]);

    Phone_HangupCall(playerid);

    if(PlayerInfo[playerid][pDealerVehicle] != 0)
    {
        DestroyVehicle(PlayerInfo[playerid][pDealerVehicle]);
        PlayerInfo[playerid][pDealerVehicle] = 0;
        Iter_Remove(Vehicles, PlayerInfo[playerid][pDealerVehicle]);
    }

    return 1;
}

Player_ClearVars(playerid)
{
    foreach(new i: Player) {
        if(GozunuBaglayan[i] == playerid) {
            if(GozuBaglandi[i] == 1) {
                GozunuBaglayan[i] = -1;
                GozuBaglandi[i] = 0;
                GozBaglaIstegi[i] = 0;
                SunucuMesajiC(i, "Gözünüzü baðlayan oyuncu oyundan çýktýðý için göz baðýnýz otomatik çözüldü.");
                TextDrawHideForPlayer(i, BlindFold);
            }
        }
    }
    PlayerInfo[playerid][pTuningComponentAldi] = 0;
    PlayerInfo[playerid][pPolisDutySaniye] = 0;
    PlayerInfo[playerid][pPolisDutyDakika] = 0;
    PlayerInfo[playerid][pPolisDutySaat] = 0;
    BirlikteDinliyor[playerid] = -1;
    BirlikteDinlenen[playerid] = -1;
    if(GetPVarInt(playerid, "KulakliklaMuzik")) {
        if(BirlikteDinlenen[playerid] != -1) {
            BirlikteDinlenen[BirlikteDinlenen[playerid]] = -1;
            BirlikteDinliyor[BirlikteDinlenen[playerid]] = -1;
            DeletePVar(BirlikteDinlenen[playerid], "KulaklikLink");
            DeletePVar(BirlikteDinlenen[playerid], "KulakliklaMuzik");
            PlayerAME(BirlikteDinlenen[playerid], "telefondan kulaklýkla müzik dinlemeyi býrakýr.");
            SunucuMesajiC(BirlikteDinlenen[playerid], "Kulaklýkla artýk müzik dinlemiyorsunuz.");
            StopAudioStreamForPlayer(BirlikteDinlenen[playerid]);
            BirlikteDinlenen[playerid] = -1;
            BirlikteDinliyor[playerid] = -1;
            DeletePVar(playerid, "KulaklikLink");
            DeletePVar(playerid, "KulakliklaMuzik");
            StopAudioStreamForPlayer(playerid);
        } else {
            BirlikteDinlenen[playerid] = -1;
            BirlikteDinliyor[playerid] = -1;
            DeletePVar(playerid, "KulaklikLink");
            DeletePVar(playerid, "KulakliklaMuzik");
            StopAudioStreamForPlayer(playerid);
        }
    }
    if(GozBaglaIstegi[playerid]) {
        GozBaglaIstegi[playerid] = 0;
        KillTimer(GozBaglaTimer[playerid]);
    }
    PlayerInfo[playerid][pKelepceSayisi] = 2;
    DestroyDynamicObjectEx(KampInfo[playerid][kObje]);
    for(new i; i < 6; i++)
        KampInfo[playerid][kPos][i] = 0.0;
    KampInfo[playerid][kObje] = INVALID_OBJECT_ID;
    Iter_Remove(Kamp, playerid);
    KampInfo[playerid][kExists] = 0;
    format(KampInfo[playerid][kKuran],MAX_PLAYER_NAME,"Yok");
    for(new i; i < 2; i++) {
        KampInfo[playerid][kBalik][i] = -1;
        KampInfo[playerid][kBalikPismeTimer][i] = 0;
        KampInfo[playerid][kBalikPisti][i] = 0;
        KampInfo[playerid][kBalikYandi] = 0;
    }
    PlayerInfo[playerid][oKampAtesi] = -1;
    PlayerInfo[playerid][pBalikYemi] = 0;
    PlayerInfo[playerid][pBalikAgi] = 0;
    PlayerInfo[playerid][KamyoncuGeliri] = 0;
    //PlayerInfo[playerid][pGuvenlik] = 0;
    GozunuBaglayan[playerid] = -1;
    if(GozuBaglandi[playerid] == 1) {
        GozuBaglandi[playerid] = 0;
        TextDrawHideForPlayer(playerid, BlindFold);
    }
    OldCar[playerid] = -1;
    PlayerInfo[playerid][pPM] = -1;
    PlayerInfo[playerid][pTorba] = 0;
    PlayerInfo[playerid][pTorbaIndex] = 0;
    for(new i; i < 3; i++)
        CesetList[playerid][i] = -1;
    ExecuteShots[playerid] = 0;
    if(PlayerInfo[playerid][pParcalaTimer] != -1) {
        PlayerInfo[playerid][pParcalaTimer] = -1;
        PlayerTextDrawHide(playerid, PlayerText:Textdraw0[playerid]);
        PlayerTextDrawHide(playerid, PlayerText:Textdraw1[playerid]);
    }
    if(PlayerInfo[playerid][pKamyoncuTimer] != -1) {
        PlayerInfo[playerid][pKamyoncuTimer] = -1;
        PlayerTextDrawHide(playerid, PlayerText:Textdraw0[playerid]);
        PlayerTextDrawHide(playerid, PlayerText:Textdraw1[playerid]);
    }
    if(PlayerInfo[playerid][pYakitTimer] != -1) {
        PlayerInfo[playerid][pYakitTimer] = -1;
        PlayerTextDrawHide(playerid, PlayerText:Textdraw0[playerid]);
        PlayerTextDrawHide(playerid, PlayerText:Textdraw1[playerid]);
    }
    PlayerInfo[playerid][pGizliAdmin] = 0;
    PlayerInfo[playerid][pAirPassenger] = -1;
    PlayerInfo[playerid][pFurnitureObject] = -1;
    PlayerInfo[playerid][pRequestID] = -1;
    PlayerInfo[playerid][pProductID] = -1;
    PlayerInfo[playerid][pPhoneLogID] = -1;
    PlayerInfo[playerid][pMdcID] = -1;
    PlayerInfo[playerid][pIngredientID] = -1;
    PlayerInfo[playerid][pCargoTime][0] = 0;
    PlayerInfo[playerid][pCargoTime][1] = 0;
    PlayerInfo[playerid][pSmoking] = 0;
    PlayerInfo[playerid][pSmokingQuality] = 0;
    PlayerInfo[playerid][pSmokingType] = SMOKING_TYPE_NULL;
    PlayerInfo[playerid][pSmokingThrows] = 0;
    PlayerInfo[playerid][pAccountID] = 0;
    PlayerInfo[playerid][pInTuning] = 0;
    PlayerInfo[playerid][pTamirciyim] = 0;
    PlayerInfo[playerid][pDealerListitem] = -1;
    PlayerInfo[playerid][pCarTick] = 0;
    PlayerInfo[playerid][pCimice] = -1;
    PlayerInfo[playerid][pSnakeCamActor] = -1;
    PlayerInfo[playerid][pAdminDuty] = 0;
    PlayerInfo[playerid][pToggleArmour] = 0;
    PlayerInfo[playerid][pVehicleTime] = 0;
    PlayerInfo[playerid][pGiveTime] = 0;
    PlayerInfo[playerid][pBreakOpen] = false;
    PlayerInfo[playerid][pStealHitTimeout]= 0;
    PlayerInfo[playerid][pStealHit] = -1;
    PlayerInfo[playerid][pStealWrong] = 0;
    PlayerInfo[playerid][pStealCorrect] = 0;
    PlayerInfo[playerid][pStealTime] = -1;
    PlayerInfo[playerid][pBlindFold] = 0;
    PlayerInfo[playerid][pLegHit] = 0;
    PlayerInfo[playerid][pAdminLog] = 0; // kapali
    PlayerInfo[playerid][pPoliceTick] = 0;
    PlayerInfo[playerid][pViewingCargo] = -1;
    PlayerInfo[playerid][pCheatNotified] = 1;
    PlayerInfo[playerid][pChatStyle] = -1;
    PlayerInfo[playerid][CheckpointEnabled] = false;
    PlayerInfo[playerid][pID] = 0;
    PlayerInfo[playerid][pWeaponsLicenseRequest] = -1;
    PlayerInfo[playerid][pUsingMDC] = 0;
    PlayerInfo[playerid][pHouse] = -1;
    PlayerInfo[playerid][pSex] = 0;
    PlayerInfo[playerid][pAdmin] = 0;
    PlayerInfo[playerid][pFaction] = -1;
    PlayerInfo[playerid][pRank] = 0;
    PlayerInfo[playerid][pLevel] = 1;
    PlayerInfo[playerid][pCash] = 0;
    PlayerInfo[playerid][pCashBank] = 0;
    PlayerInfo[playerid][pExperience] = 0;
    PlayerInfo[playerid][pSpawnHealth] = 100;
    PlayerInfo[playerid][pBanned] = 0;
    PlayerInfo[playerid][pLoginAttempts] = 0;
    PlayerInfo[playerid][pLogged] = 0;
    PlayerInfo[playerid][pHealth] = 0.0;
    PlayerInfo[playerid][pArmour] = 0.0;
    PlayerInfo[playerid][pInterior] = 0;
    PlayerInfo[playerid][pWorld] = 0;
    PlayerInfo[playerid][pSkin] = 0;
    PlayerInfo[playerid][pSpawnPoint] = SPAWN_POINT;
    PlayerInfo[playerid][pDeath] = 0;
    PlayerInfo[playerid][pAdminDuty] = 0;
    PlayerInfo[playerid][pSupporterDuty] = 0;
    PlayerInfo[playerid][pAdminAlert] = 1;
    PlayerInfo[playerid][pSupporterAlert] = 1;
    PlayerInfo[playerid][pJailTime] = 0;
    PlayerInfo[playerid][pFreezed]   = 0;
    PlayerInfo[playerid][pItemID] = -1;
    PlayerInfo[playerid][pCrashed] = 0;
    PlayerInfo[playerid][pPosX] = 0.0;
    PlayerInfo[playerid][pPosY] = 0.0;
    PlayerInfo[playerid][pPosZ] = 0.0;
    PlayerInfo[playerid][pPosA] = 0.0;
    PlayerInfo[playerid][pCrashInt] = 0;
    PlayerInfo[playerid][pCrashWorld] = 0;
    PlayerInfo[playerid][pHousePrice] = -1;
    PlayerInfo[playerid][pRequestHPrice] = 0;
    PlayerInfo[playerid][pRequesterHouse] = -1;
    PlayerInfo[playerid][pRequestSHPrice] = 0;
    PlayerInfo[playerid][pRequesterHSell] = -1;
    PlayerInfo[playerid][pFactionMOD] = -1;
    PlayerInfo[playerid][pSelectedSlot] = -1;
    PlayerInfo[playerid][pFactionOOC] = 1;
    PlayerInfo[playerid][pRequesterFaction] = -1;
    PlayerInfo[playerid][pFactionDuty] = 0;
    PlayerInfo[playerid][pSelectUniform] = -1;
    PlayerInfo[playerid][pFactionSkin] = 0;
    PlayerInfo[playerid][pInCare] = 0;
    PlayerInfo[playerid][pRequestSBPrice] = 0;
    PlayerInfo[playerid][pRequesterBSell] = -1;
    PlayerInfo[playerid][pSelectedItem] = -1;
    PlayerInfo[playerid][pDealerMOD] = -1;
    PlayerInfo[playerid][pOriginalSkin] = 0;
    PlayerInfo[playerid][pAmmoID] = -1;
    PlayerInfo[playerid][pMobile] = -1;
    PlayerInfo[playerid][pRequestSVPrice] = 0;
    PlayerInfo[playerid][pRequesterVSell] = -1;
    PlayerInfo[playerid][pTaser] = 0;
    PlayerInfo[playerid][pBeanBag] = 0;
    PlayerInfo[playerid][pStunned] = 0;
    PlayerInfo[playerid][pVehicleHud] = 1;
    PlayerInfo[playerid][pPage] = 1;
    PlayerInfo[playerid][pGiveItem] = -1;
    PlayerInfo[playerid][pAmount] = 0;
    PlayerInfo[playerid][pFuelTimer] = 0;
    PlayerInfo[playerid][pMinutes] = 60;
    PlayerInfo[playerid][pPlayingHours] = 0;
    PlayerInfo[playerid][pNumber] = 0;
    PlayerInfo[playerid][pOldFuel] = 0;
    PlayerInfo[playerid][pListType] = 0;
    PlayerInfo[playerid][pCuffed] = 0;
    PlayerInfo[playerid][pFrisk] = -1;
    PlayerInfo[playerid][pCare] = -1;
    PlayerInfo[playerid][pNews] = 1;
    PlayerInfo[playerid][pTalkingLive] = -1;
    PlayerInfo[playerid][pRequestLive] = -1;
    PlayerInfo[playerid][pLoopAnim] = false;
    PlayerInfo[playerid][pPlateVeh] = -1;
    PlayerInfo[playerid][pPlateOption] = 0;
    PlayerInfo[playerid][pPlateTime] = 0;
    PlayerInfo[playerid][pAFKTime] = 0;
    PlayerInfo[playerid][pInRecon] = -1;
    PlayerInfo[playerid][pLicenseWarn] = 0;
    Exam_ResetVars(playerid);
    RemovePlayerAttachedObject(playerid, 0);
    RemovePlayerAttachedObject(playerid, 1);
    RemovePlayerAttachedObject(playerid, 2);
    RemovePlayerAttachedObject(playerid, 3);
    RemovePlayerAttachedObject(playerid, 4);
    RemovePlayerAttachedObject(playerid, 5);
    RemovePlayerAttachedObject(playerid, 6);
    RemovePlayerAttachedObject(playerid, 7);
    RemovePlayerAttachedObject(playerid, 8);
    RemovePlayerAttachedObject(playerid, 9);
    PlayerInfo[playerid][pMasked] = 0;
    format(PlayerInfo[playerid][pMaskName], MAX_PLAYER_NAME, "Boþ");
    PlayerInfo[playerid][pBoxShowed] = false;
    PlayerInfo[playerid][pSpeakerPhone] = 0;
    PlayerInfo[playerid][pJob] = -1;
    PlayerInfo[playerid][pFrequence] = -1;
    PlayerInfo[playerid][pCarryCrate] = -1;
    PlayerInfo[playerid][pSelectedRequest] = -1;
    PlayerInfo[playerid][pRequestRepair] = -1;
    PlayerInfo[playerid][pRequestSpray] = -1;
    PlayerInfo[playerid][pSprayPrice] = 0;
    PlayerInfo[playerid][pFirstColor] = 0;
    PlayerInfo[playerid][pSecondColor] = 0;
    PlayerInfo[playerid][pRepairType] = 0;
    PlayerInfo[playerid][pRepairPrice] = 0;
    PlayerInfo[playerid][pStartFarmer] = false;
    PlayerInfo[playerid][pRevokeItem] = -1;
    PlayerInfo[playerid][pDragged] = false;
    PlayerInfo[playerid][pDraggedBy] = -1;
    KillTimer(PlayerInfo[playerid][pDragTimer]);
    PlayerInfo[playerid][pEmergency] = 0;
    PlayerInfo[playerid][pRequiredService] = 0;
    PlayerInfo[playerid][pBalik] = 0;
    PlayerInfo[playerid][pZone] = 0;
    PlayerInfo[playerid][pFineID] = -1;
    PlayerInfo[playerid][pMeal] = -1;
    PlayerInfo[playerid][pSips] = 0;
    PlayerInfo[playerid][pPhoneID] = -1;
    PlayerInfo[playerid][pTaxPrice] = 0;
    PlayerInfo[playerid][pTaxRequest] = -1;
    PlayerInfo[playerid][pTaxi] = -1;
    PlayerInfo[playerid][tCash] = 0;
    PlayerInfo[playerid][tPassenger] = -1;
    PlayerInfo[playerid][tStartPos][0] = 0.0;
    PlayerInfo[playerid][tStartPos][1] = 0.0;
    PlayerInfo[playerid][tStartPos][2] = 0.0;
    PlayerInfo[playerid][pShortcut] = 0;
    PlayerInfo[playerid][pFarmerCash] = 0;
    PlayerInfo[playerid][pEditingMode] = 0;
    PlayerInfo[playerid][pTracing] = false;
    PlayerInfo[playerid][pLocalize] = false;
    PlayerInfo[playerid][pBuyingVehicle] = 0;
    PlayerInfo[playerid][pUsingPP] = -1;

    for(new j; j < 5; j++)
        PlayerInfo[playerid][pDivision][j] = -1;

    PlayerInfo[playerid][pReportTime] = 0;
    PlayerInfo[playerid][pPremium] = 0;
    PlayerInfo[playerid][pTogOOCPremium] = 0;
    PlayerInfo[playerid][pTogPMPremium] = 0;
    PlayerInfo[playerid][pTogOOC] = 0;
    PlayerInfo[playerid][pTogPM] = 0;
    PlayerInfo[playerid][pConvOOC] = -1;
    PlayerInfo[playerid][pRadioOptions] = 0;
    format(PlayerInfo[playerid][pTargetName], 50, "boþ");
    PlayerInfo[playerid][pRecordID] = 0;
    PlayerInfo[playerid][pJailC] = 0;
    PlayerInfo[playerid][pCimiceRequest] = 0;
    PlayerInfo[playerid][pCimiceSelected] = 0;
    PlayerInfo[playerid][pOldGun] = 0;
    PlayerInfo[playerid][pCimiceTime] = 0;
    PlayerInfo[playerid][pCoyn] = 0;
    PlayerInfo[playerid][pCoynPayday] = 0;
    PlayerInfo[playerid][pNickChange] = 0;
    PlayerInfo[playerid][pPlateChange] = 0;
    PlayerInfo[playerid][pNumberChange] = 0;
    PlayerInfo[playerid][pBMXPermission] = 0;
    format(PlayerInfo[playerid][pTempName], MAX_PLAYER_NAME, "boþ");
    format(PlayerInfo[playerid][pTmpText], 256, "N/A");
    PlayerInfo[playerid][pRequestCount] = 0;
    PlayerInfo[playerid][pUsingMDC] = 0;
    PlayerInfo[playerid][pWeaponsLicenseRequest] = 0;
    PlayerInfo[playerid][pUsingMDC] = 0;
    PlayerInfo[playerid][pHud] = 1;
    format(PlayerInfo[playerid][pText], 256, "N/A");
    PlayerInfo[playerid][pContinueTrucking] = false;
    KillTimer(PlayerInfo[playerid][pCheatTimer]);
    PlayerInfo[playerid][pCheatTimer] = 0;
    PlayerInfo[playerid][pJustSpawned] = false;
    PlayerInfo[playerid][pPickupID] = -1;
    PlayerInfo[playerid][pCheckpointID] = -1;
    PlayerInfo[playerid][pIncomingCall] = -1;
    PlayerInfo[playerid][pFishTime] = 0;
    PlayerInfo[playerid][pBalikTutuyor] = false;
    PlayerInfo[playerid][pDeathTime] = 0;
    PlayerInfo[playerid][pRadioDefault] = -1;
    PlayerInfo[playerid][pShakeOffer] = -1;
    PlayerInfo[playerid][pShakeType] = 0;
    PlayerInfo[playerid][pSendedCare] = 0;
    PlayerInfo[playerid][pParkingRequest] = -1;
    PlayerInfo[playerid][pTeleportLastTick] = 0;
    PlayerInfo[playerid][pClickedX] = 0.0;
    PlayerInfo[playerid][pClickedY] = 0.0;
    PlayerInfo[playerid][pClickedZ] = 0.0;
    PlayerInfo[playerid][pClickedTick] = 0;
    PlayerInfo[playerid][pTelefonTick] = 0;
    PlayerInfo[playerid][CheckpointX] = 0.0;
    PlayerInfo[playerid][CheckpointY] = 0.0;
    PlayerInfo[playerid][CheckpointZ] = 0.0;
    PlayerInfo[playerid][pSelectedColors][0] = -1;
    PlayerInfo[playerid][pSelectedColors][1] = -1;
    PlayerInfo[playerid][pForceSpawn] = false;
    PlayerInfo[playerid][pKeyTick] = 0;
    PlayerInfo[playerid][pSellFish] = 0;
    PlayerInfo[playerid][pSelectedVehicle] = -1;
    PlayerInfo[playerid][pHouseSpawn] = -1;
    PlayerInfo[playerid][pJobDuty] = 0;
    format(PlayerInfo[playerid][pLoginDate],36, "GG/MM/AA OO:MM");
    format(PlayerInfo[playerid][pIP],36, "000.000.000");
    format(PlayerInfo[playerid][pUsername],30, "boþ");
    format(PlayerInfo[playerid][pOzellik], 256, "");
    PlayerInfo[playerid][pCasinoWheelBet] = 0;
    PlayerInfo[playerid][pInCasinoWheel] = 0;
    PlayerInfo[playerid][pCurrentGameID] = -1;
    PlayerInfo[playerid][pOldX] = 0.0;
    PlayerInfo[playerid][pOldY] = 0.0;
    PlayerInfo[playerid][pOldZ] = 0.0;
    PlayerInfo[playerid][pOldWorld] = 0;
    PlayerInfo[playerid][pOldInterior] = 0;
    PlayerInfo[playerid][pOldSkin] = 1;
    PlayerInfo[playerid][pOldVehicleID] = -1;
    PlayerInfo[playerid][pOldVehicleSeat] = -1;

    for(new i; i < MAX_PLAYERS; i++)
    {
        PlayerInfo[playerid][pTogOOCPlayer][i] = 0;
        PlayerInfo[playerid][pTogPMPlayer][i] = 0;
    }

    PlayerInfo[playerid][pObjectEditingSlot] = -1;

    for(new i; i < MAX_PLAYER_OBJECTS; i++)
    {
        if(i < 10)PlayerInfo[playerid][pObjectSlotOccupied][i] = 0;
        PlayerInfo[playerid][pObjectWearing][i] = -1;
        PlayerInfo[playerid][pObjectWearingVar][i] = -1;
    }

    GangZoneDestroy(PlayerInfo[playerid][pGangZone]);
    PlayerInfo[playerid][pGangZone] = -1;

    KillTimer(PlayerInfo[playerid][pCallTime]);
    PlayerInfo[playerid][pCallTime] = 0;

    DestroyVehicle(PlayerInfo[playerid][pDealerVehicle]);
    PlayerInfo[playerid][pDealerVehicle] = 0;
    DestroyDynamic3DTextLabelEx(PlayerInfo[playerid][pNameTag]);
    Iter_Remove(Vehicles, PlayerInfo[playerid][pDealerVehicle]);

    for(new c; c < MAX_CHEAT_CODES; c++)
    {
        PlayerInfo[playerid][pCheatWarnings][c] = 0;
    }

    for(new r; r < MAX_REQUESTS; r++)
    {
        PlayerInfo[playerid][pRequestsID][r] = -1;
    }

    for(new j; j < 4; j++)
    {
        if(j < 2)PlayerInfo[playerid][pWeaponsLicense][j] = 0;
        if(j < 3)PlayerInfo[playerid][pWeaponsLicenseRequestInfo][j] = 0;
        if(j < 4)PlayerInfo[playerid][pWeaponsLicenseGuns][j] = 0;
    }

    for(new cr; cr < 50; cr++)
    {
        PlayerInfo[playerid][pListsID][cr] = 0;
    }

    for(new r; r < MAX_RADIO_LINKS; r++)
    {
        PlayerInfo[playerid][pRadiosID][r] = 0;
    }

    for(new x; x < 12; x++)
    {
        PlayerInfo[playerid][pWeapons][x] = 0;
        PlayerInfo[playerid][pAmmo][x] = 0;
    }

    for(new j; j < MAX_FINES; j++)
    {
        PlayerInfo[playerid][pFines][j] = 0;
    }

    for(new j; j < MAX_COMMODITIES_SLOT; j++)
    {
        PlayerInfo[playerid][pCrates][j] = 0;
    }

    for(new j; j < 50; j++)
    {
        PlayerInfo[playerid][pTPDA][j] = 0;
    }

    for(new j; j < MAX_DEALERS; j++)
    {
        PlayerInfo[playerid][pDealersID][j] = 0;
    }

    for(new f; f < MAX_FACTIONS; f++)
    {
        PlayerInfo[playerid][pFactionsID][f] = 0;
    }

    for(new f; f < MAX_FREQUENCES; f++)
    {
        PlayerInfo[playerid][pAuthorized][f] = false;
    }

    for(new i; i < MAX_INVENTORY_ITEMS; i++)
    {
        PlayerInfo[playerid][pInvList][i] = 0;
        PlayerInfo[playerid][pInvAmount][i] = 0;
        PlayerInfo[playerid][pInvExtra][i] = 1;
        PlayerInfo[playerid][pInvCredit][i] = 0;
    }

    for(new b; b < MAX_BIZ_ITEMS; b++)
    {
        PlayerInfo[playerid][pBuyID][b] = 0;
    }

    for(new j; j < MAX_OWNED_VEHICLES_DIAMOND; j++)
    {
        PlayerInfo[playerid][pVehiclesID][j] = 0;
    }

    for(new j; j < 12; j++)
    {
        PlayerInfo[playerid][pDrugEffects][j] = 0;

        PlayerInfo[playerid][pDrugAddiction][j] = 0; // Bagimlilik degeri

        PlayerInfo[playerid][pDrugAbstinence][j] = 0;
    }

    // Trisha
    PlayerInfo[playerid][pDrugster] = 0; // Bagimlilik
    PlayerInfo[playerid][pDrugCrisis] = 0; // Kriz
    PlayerInfo[playerid][pDrugRemainingTime] = -1; // Krize kalan sure
    PlayerInfo[playerid][pDrugRunJumpBlock] = false; // engel
    PlayerInfo[playerid][pDrugUnconscious] = false; // baygin
    PlayerInfo[playerid][pDrugVar] = false;

    return 1;
}

//Drug System

Smoking_Stop(playerid)
{
    ApplyAnimation(playerid, "Flowers", "Flower_attack_M", 4.1, 0, 0, 0, 0, 0);

    RemovePlayerAttachedObject(playerid, 7);
    RemovePlayerAttachedObject(playerid, 6);

    PlayerAME(playerid, (PlayerInfo[playerid][pSmokingType] != SMOKING_TYPE_CIGARETTE) ? ("esrarýný bitirir ve yere atar.") :
                                                                                         ("sigarasýný bitirir ve yere atar."));
    PlayerInfo[playerid][pSmoking] = 0;
    PlayerInfo[playerid][pSmokingThrows] = 0;
    PlayerInfo[playerid][pSmokingType] = SMOKING_TYPE_NULL;
    PlayerInfo[playerid][pSmokingQuality] = 0;

    return 1;
}

Smoking_Effects(playerid, drug_id)
{
    if(!PlayerInfo[playerid][pDrugEffects][drug_id])
    {
        new new_drunk_level;
        new quality = PlayerInfo[playerid][pSmokingQuality];

        switch(drug_id)
        {
            case 0: new_drunk_level = (quality > 0 && quality <= 39) ? 5000 : (quality > 39 && quality <= 69) ? 4000 : (quality > 69 && quality <= 100) ? 3000 : 0;
            case 1: new_drunk_level = (quality > 0 && quality <= 39) ? 7000 : (quality > 39 && quality <= 69) ? 6000 : (quality > 69 && quality <= 100) ? 4500 : 0;
        }

        PlayerInfo[playerid][pDrugEffects][drug_id] = (quality > 0 && quality <= 39) ? 10 : (quality > 39 && quality <= 69) ? 20 : (quality > 69 && quality <= 100) ? 35 : 0;
        SetPlayerDrunkLevel(playerid, GetPlayerDrunkLevel(playerid) + new_drunk_level);

        if(PlayerInfo[playerid][pDrugAddiction][drug_id])
        {
            if(PlayerInfo[playerid][pDrugAddiction][drug_id] >=5 && quality >= 70)
            {
                PlayerInfo[playerid][pDrugster] += random(70) + 1;
                if(PlayerInfo[playerid][pDrugster] > 100) PlayerInfo[playerid][pDrugster] = 100;

                PlayerInfo[playerid][pDrugRemainingTime] += random(6) + 1;
                if(PlayerInfo[playerid][pDrugRemainingTime] > 6) PlayerInfo[playerid][pDrugRemainingTime] = 6;
            }
            else if(PlayerInfo[playerid][pDrugAddiction][drug_id] >=3 && quality >= 40)
            {
                PlayerInfo[playerid][pDrugster] += random(45) + 1;
                if(PlayerInfo[playerid][pDrugster] > 100) PlayerInfo[playerid][pDrugster] = 100;

                PlayerInfo[playerid][pDrugRemainingTime] += random(6) + 1;
                if(PlayerInfo[playerid][pDrugRemainingTime] > 6) PlayerInfo[playerid][pDrugRemainingTime] = 6;
            }
            else if(PlayerInfo[playerid][pDrugAddiction][drug_id] >=2 && quality <= 39)
            {
                PlayerInfo[playerid][pDrugster] += random(40) + 1;
                if(PlayerInfo[playerid][pDrugster] > 100) PlayerInfo[playerid][pDrugster] = 100;

                PlayerInfo[playerid][pDrugRemainingTime] += random(6) + 1;
                if(PlayerInfo[playerid][pDrugRemainingTime] > 6) PlayerInfo[playerid][pDrugRemainingTime] = 6;
            }
        }
        PlayerInfo[playerid][UyusturucuEfektleri] = true;
        new drugweather;
        switch(drug_id)
        {
            case 0: drugweather = 273;
            case 1: drugweather = 186;
            case 2: drugweather = -66;
            case 3: drugweather = 244;
            case 4: drugweather = 234;
            case 5: drugweather = 383;
            case 6: drugweather = 245;
            case 7: drugweather = 251;
            case 8: drugweather = -67;
            case 9: drugweather = 221;
            case 10: drugweather = 21;
            case 11: drugweather = 256;
        }
        SetPlayerTime(playerid, 12, 0);
        SetPlayerWeather(playerid, drugweather);
    }

    PlayerInfo[playerid][pDrugCrisis] = 0; // Kriz
    PlayerInfo[playerid][pDrugRunJumpBlock] = false; // engel
    PlayerInfo[playerid][pDrugUnconscious] = false; // baygin
    PlayerInfo[playerid][pDrugVar] = false;
    return 1;
}
// 1-39 - Ýdare eder / 40-69 Normal / 70-100 Ýyi
Drug_Use(playerid, itemid, drug_id, quality)
{
    static const DrugsEffectsTime[12][3] =
    {
    // Deðer 1: Kötü - Deðer 2: Normal - Deðer 3: Ýyi uyuþturucunun efekt süresi.
    // süreler dakika cinsinden
        {2, 4, 5}, //Marijuana
        {2, 4, 5}, //Haþhaþ
        {2, 4, 5}, //Kokain
        {2, 4, 5}, //Eroin
        {2, 4, 5}, //Amfetamin
        {2, 4, 5}, //Ecstasy
        {2, 4, 5}, //LSD
        {2, 4, 5}, //PCP
        {2, 4, 5}, //Ketamin
        {2, 4, 5}, //Metamfetamin
        {2, 4, 5}, //Crack
        {2, 4, 5} //Purple Drank
    };

    static const DrugsAbstinenceValue[12][8] =
    {
        {0, 0, 0, 0, 0, 0, 0, 0}, //Marijuana
        {0, 0, 0, 0, 0, 0, 0, 0}, //Haþhaþ
        {0, 0, 0, 0, 0, 0, 0, 0}, //Kokain
        {0, 0, 0, 0, 0, 0, 0, 0}, //Eroin
        {0, 0, 0, 0, 0, 0, 0, 0}, //Amfetamin
        {0, 0, 0, 0, 0, 0, 0, 0}, //Ecstasy
        {0, 0, 0, 0, 0, 0, 0, 0}, //LSD
        {0, 0, 0, 0, 0, 0, 0, 0}, //PCP
        {0, 0, 0, 0, 0, 0, 0, 0}, //Ketamin
        {0, 0, 0, 0, 0, 0, 0, 0}, //Metamfetamin
        {0, 0, 0, 0, 0, 0, 0, 0}, //Crack
        {0, 0, 0, 0, 0, 0, 0, 0} //Purple Drank
    };

    static const DrugsHealthValue[12][8] =
    {
        {0, 0, 0, 0, 0, 0, 0, 0}, //Marijuana
        {0, 0, 0, 0, 0, 0, 0, 0}, //Haþhaþ
        {0, 0, 0, 0, 0, 0, 0, 0}, //Kokain
        {0, 0, 0, 0, 0, 0, 0, 0}, //Eroin
        {0, 0, 0, 0, 0, 0, 0, 0}, //Amfetamin
        {0, 0, 0, 0, 0, 0, 0, 0}, //Ecstasy
        {0, 0, 0, 0, 0, 0, 0, 0}, //LSD
        {0, 0, 0, 0, 0, 0, 0, 0}, //PCP
        {0, 0, 0, 0, 0, 0, 0, 0}, //Ketamin
        {0, 0, 0, 0, 0, 0, 0, 0}, //Metamfetamin
        {0, 0, 0, 0, 0, 0, 0, 0}, //Crack
        {0, 0, 0, 0, 0, 0, 0, 0} //Purple Drank
    };

    static const DrugsDrunkLevelValue[12][3] =
    {
    // Deðer 1: Kötü - Deðer 2: Normal - Deðer 3: Ýyi uyuþturucunun sallama etkisi.
        {8000, 6000, 4000}, //Marijuana
        {8000, 6000, 4000}, //Haþhaþ
        {8000, 6000, 4000}, //Kokain
        {8000, 6000, 4000}, //Eroin
        {8000, 6000, 4000}, //Amfetamin
        {8000, 6000, 4000}, //Ecstasy
        {8000, 6000, 4000}, //LSD
        {8000, 6000, 4000}, //PCP
        {8000, 6000, 4000}, //Ketamin
        {8000, 6000, 4000}, //Metamfetamin
        {8000, 6000, 4000}, //Crack
        {8000, 6000, 4000} //Purple Drank
    };

    new Float:hp;
    AC_GetPlayerHealth(playerid, hp);

    PlayerInfo[playerid][pDrugAddiction][drug_id]++;

    PlayerInfo[playerid][pDrugAddictionQuality][drug_id] = quality;

    if(PlayerInfo[playerid][pDrugAddiction][drug_id])
    {
        if(PlayerInfo[playerid][pDrugAddiction][drug_id] >=5 && quality >= 70)
        {
            PlayerInfo[playerid][pDrugster] += random(50) + 1;
            if(PlayerInfo[playerid][pDrugster] > 100) PlayerInfo[playerid][pDrugster] = 100;

            PlayerInfo[playerid][pDrugRemainingTime] += random(6) + 1;
            if(PlayerInfo[playerid][pDrugRemainingTime] > 6) PlayerInfo[playerid][pDrugRemainingTime] = 6;
        }
        else if(PlayerInfo[playerid][pDrugAddiction][drug_id] >=3 && quality >= 40)
        {
            PlayerInfo[playerid][pDrugster] += random(35) + 1;
            if(PlayerInfo[playerid][pDrugster] > 100) PlayerInfo[playerid][pDrugster] = 100;

            PlayerInfo[playerid][pDrugRemainingTime] += random(6) + 1;
            if(PlayerInfo[playerid][pDrugRemainingTime] > 6) PlayerInfo[playerid][pDrugRemainingTime] = 6;
        }
        else if(PlayerInfo[playerid][pDrugAddiction][drug_id] >=2 && quality <= 39)
        {
            PlayerInfo[playerid][pDrugster] += random(20) + 1;
            if(PlayerInfo[playerid][pDrugster] > 100) PlayerInfo[playerid][pDrugster] = 100;

            PlayerInfo[playerid][pDrugRemainingTime] += random(6) + 1;
            if(PlayerInfo[playerid][pDrugRemainingTime] > 6) PlayerInfo[playerid][pDrugRemainingTime] = 6;
        }
    }

    PlayerInfo[playerid][pDrugCrisis] = 0; // Kriz
    PlayerInfo[playerid][pDrugRunJumpBlock] = false; // engel
    PlayerInfo[playerid][pDrugUnconscious] = false; // baygin
    PlayerInfo[playerid][pDrugVar] = false;
    PlayerInfo[playerid][UyusturucuEfektleri] = true;

    PlayerInfo[playerid][pDrugEffects][drug_id] = (quality > 0 && quality <= 39) ? DrugsEffectsTime[drug_id][0] : (quality > 39 && quality <= 69) ? DrugsEffectsTime[drug_id][1] : (quality > 69 && quality <= 100) ? DrugsEffectsTime[drug_id][2] : 0;

    if(DrugsAbstinenceValue[drug_id][0])
    {
        if(PlayerInfo[playerid][pDrugAddiction][drug_id] > DrugsAbstinenceValue[drug_id][0])
        {
            PlayerInfo[playerid][pDrugAbstinence][drug_id] = (quality > 0 && quality <= 39) ? DrugsAbstinenceValue[drug_id][1] : (quality > 39 && quality <= 69) ? DrugsAbstinenceValue[drug_id][2] : (quality > 69 && quality <= 100) ? DrugsAbstinenceValue[drug_id][3] : 0;
            PlayerInfo[playerid][pDrugAbstinence][drug_id] += (DrugsAbstinenceValue[drug_id][5] != -1) ? random(DrugsAbstinenceValue[drug_id][5]) : PlayerInfo[playerid][pDrugAbstinence][drug_id];
        }
        if(PlayerInfo[playerid][pDrugAddiction][drug_id] == DrugsAbstinenceValue[drug_id][0])
        {
            PlayerInfo[playerid][pDrugAbstinence][drug_id] = (DrugsAbstinenceValue[drug_id][5] == -1) ? PlayerInfo[playerid][pDrugEffects][drug_id] : random(DrugsAbstinenceValue[drug_id][5]);
        }
        PlayerInfo[playerid][pDrugAbstinence][drug_id] += DrugsAbstinenceValue[drug_id][6] * 2;
    }

    if(DrugsHealthValue[drug_id][0])
    {
        new low_value_to_add = (DrugsHealthValue[drug_id][6]) ? random(DrugsHealthValue[drug_id][1]) : DrugsHealthValue[drug_id][1];
        new medium_value_to_add = (DrugsHealthValue[drug_id][6]) ? random(DrugsHealthValue[drug_id][3]) : DrugsHealthValue[drug_id][3];
        new high_value_to_add = (DrugsHealthValue[drug_id][6]) ? random(DrugsHealthValue[drug_id][5]) : DrugsHealthValue[drug_id][5];

        switch(quality)
        {
            case 1 .. 39: if(hp <= DrugsHealthValue[drug_id][0]) hp += low_value_to_add;
            case 40 .. 69: if(hp <= DrugsHealthValue[drug_id][2]) hp += medium_value_to_add;
            case 70 .. 100: if(hp <= DrugsHealthValue[drug_id][4]) hp += high_value_to_add;
        }

        if(hp > DrugsHealthValue[drug_id][7]) hp = DrugsHealthValue[drug_id][7];
        AC_SetPlayerHealth(playerid, hp);
    }

    new new_drunk_level = (quality > 0 && quality <= 39) ? DrugsDrunkLevelValue[drug_id][0] : (quality > 39 && quality <= 69) ? DrugsDrunkLevelValue[drug_id][1] : (quality > 69 && quality <= 100) ? DrugsDrunkLevelValue[drug_id][2] : 0;
    SetPlayerDrunkLevel(playerid,  GetPlayerDrunkLevel(playerid) + new_drunk_level);

    new drugweather;
    switch(drug_id)
    {
        case 0: drugweather = 273;
        case 1: drugweather = 186;
        case 2: drugweather = -66;
        case 3: drugweather = 244;
        case 4: drugweather = 234;
        case 5: drugweather = 383;
        case 6: drugweather = 245;
        case 7: drugweather = 251;
        case 8: drugweather = -67;
        case 9: drugweather = 221;
        case 10: drugweather = 21;
        case 11: drugweather = 256;
    }
    SetPlayerWeather(playerid, drugweather);
    SetPlayerTime(playerid, 12, 0);
    ApplyAnimation(playerid, "SMOKING", "M_smk_in", 4.1, 0, 0, 0, 0, 0, 1);

    PlayerME(playerid, "uyuþturucu kullanýr.");

    new xstring[100];
    format(xstring, sizeof(xstring), "> %s uyuþturucu kullanýr.", ReturnRoleplayName(playerid, true)); // ame format
    SetPlayerChatBubble(playerid, xstring, 0xD0AEEBFF, 15.0, 10000); // ame print

    Inventory_DecraseAmount(playerid, itemid);
    return 1;
}

Drug_GetID(name[])
{
    static const drugName[12][32] =
    {
        "Marijuana", "Haþhaþ", "Kokain", "Eroin", "Amfetamin", "Ecstasy","LSD", "PCP",
        "Ketamin", "Metamfetamin", "Crack", "Purple Drank"
    };

    for(new j; j < 12; j++) if(strcmp(drugName[j], name, false) == 0)
        return j;

    return -1;
}

Drug_GetName(id)
{
    static const drugName[12][32] =
    {
        "Marijuana", "Haþhaþ", "Kokain", "Eroin", "Amfetamin", "Ecstasy", "LSD", "PCP",
        "Ketamin", "Metamfetamin", "Crack", "Purple Drank"
    };

    return drugName[id];
}

Drug_GetNameLab(id)
{
    static const drugName[10][32] =
    {
        "Kokain", "Eroin", "Amfetamin", "Ecstasy", "LSD", "PCP",
        "Ketamin", "Metamfetamin", "Crack", "Purple Drank"
    };

    return drugName[id];
}

Drug_GetProductionTime(id)
{
    static const drugProductionTime[10] =
    {
        120, 240, 200, 180, 200, 120, 270, 180, 120, 1
    };

    return drugProductionTime[id];
}

//Alarms System
Alarm_VehicleTurnOn(playerid, vid)
{
    if(!VehicleInfo[vid][vAlarm] || VehicleInfo[vid][vAlarmOn]) return 1;

    VehicleInfo[vid][vAlarmOn] = 1;

    new string[256];

    format(string,sizeof(string),"** %s model aracýn alarmý çalýyor. **", GetVehicleModelName(VehicleInfo[vid][vModel]));
    ProxDetector(30.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);

    VehicleInfo[vid][vObje] = VEHICLE_PARAMS_ON;

    SetTimerEx("TurnOffAlarm", 1000 * 60, false, "d", vid);
    SetVehicleParamsEx(vid, VEHICLE_PARAMS_OFF, VEHICLE_PARAMS_ON, VEHICLE_PARAMS_ON, VehicleInfo[vid][vLocked], VehicleInfo[vid][vBonnet], VehicleInfo[vid][vBoot], VehicleInfo[vid][vObje]);

    if(VehicleInfo[vid][vAlarm] >= 2) foreach(new x : Player) if(VehicleInfo[vid][vOwner] == PlayerInfo[x][pID])
        SendFormattedMessage(x, COLOR_YELLOW, "Araç Güvenliði: %s(%s) aracýnýz çalýnýyor olabilir.", GetVehicleModelName(VehicleInfo[vid][vModel]), VehicleInfo[vid][vPlate]);

    if(VehicleInfo[vid][vAlarm] >= 3)
    {
        new location[MAX_ZONE_NAME], Float:x, Float:y, Float:z;

        GetVehiclePos(vid, x, y, z);
        GetCoords2DZone(x, y, location, MAX_ZONE_NAME);

        SendFactionMessage(0, "** Araç Alarmý - %s %s (Bölge: %s) **", GetVehicleModelName(VehicleInfo[vid][vModel]), VehicleInfo[vid][vPlate], location);
        new kopya;
        foreach(new i: Calintilar) {
            if(CalintiInfo[i][caExists]) {
                if(!strcmp(VehicleInfo[vid][vPlate], CalintiInfo[i][caPlaka], true) && !CalintiInfo[i][caCozuldu]) {
                    kopya = 1;
                    break;
                }
            }
        }
        if(!kopya) {
            new calintiIDnew = CalintiIDBul();
            Iter_Add(Calintilar, calintiIDnew);
            CalintiInfo[calintiIDnew][caExists] = 1;
            format(CalintiInfo[calintiIDnew][caPlaka], 13,"%s", VehicleInfo[vid][vPlate]);
            CalintiInfo[calintiIDnew][caCozuldu] = 0;
            format(CalintiInfo[calintiIDnew][caKonum], MAX_ZONE_NAME,"%s", location);
            format(CalintiInfo[calintiIDnew][caModel], 64, "%s", GetVehicleModelName(VehicleInfo[vid][vModel]));
            CalintiInfo[calintiIDnew][caPosX] = x;
            CalintiInfo[calintiIDnew][caPosY] = y;
            CalintiInfo[calintiIDnew][caPosZ] = z;
            CalintiKaydet(calintiIDnew, 1);
            mysql_format(ourConnection, queryx, sizeof queryx, "SELECT caTarih FROM calintilar WHERE id = '%d'", CalintiInfo[calintiIDnew][caID]);
            new Cache:veri = mysql_query(ourConnection, queryx, true);
            cache_get_value(0, "caTarih", CalintiInfo[calintiIDnew][caTarih], 20);
            cache_delete(veri);
        }
    }

    return 1;
}

//Generate System

Generate_FarmerCP(zone, &Float:x, &Float:y, &Float:z)
{
    x = RandomFloat(FarmerZones[zone][0], FarmerZones[zone][2]);
    y = RandomFloat(FarmerZones[zone][1], FarmerZones[zone][3]);

    MapAndreas_FindZ_For2DCoord(x, y, z);

    new check = IsPointInDynamicArea(FarmerAreas[zone], x, y, z);

    if(!check)
    {
        Generate_FarmerCP(zone, x, y, z); return 0;
    }

    return 1;
}

Generate_FishingCP(zone, &Float:x, &Float:y, &Float:z)
{
    x = RandomFloat(FishingZones[zone][0], FishingZones[zone][2]);
    y = RandomFloat(FishingZones[zone][1], FishingZones[zone][3]);

    MapAndreas_FindZ_For2DCoord(x, y, z);

    new check = IsPointInDynamicArea(FishingAreas[zone], x, y, z);

    if(!check)
    {
        Generate_FishingCP(zone, x, y, z); return 0;
    }

    return 1;
}

Generate_VehiclePlate(playerid, vehicleid)
{
    // new query[128];
    new tempPlate[13];

    static const RandomLetters[26][5] = {"A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z"};

    format(tempPlate, sizeof(tempPlate), "%d%s%s%s%d", random(10), RandomLetters[random(26)], RandomLetters[random(26)], RandomLetters[random(26)], (vehicleid <= 873) ? vehicleid + 126 : vehicleid - 827);

    mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT * FROM vehicles WHERE plate = '%e'", tempPlate);
    mysql_tquery(ourConnection, queryx, "OnGeneratePlateSearch", "dds", playerid, vehicleid, tempPlate);

    return 1;
}

Generate_PlayerNumber(playerid)
{
    new generateNumber = 100001 + random(900000);
    // new query[90];

    mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT * FROM phones WHERE number = '%d'", generateNumber);
    mysql_tquery(ourConnection, queryx, "OnGenerateNumberSearch", "d", playerid);

    return generateNumber;
}

//Commodities System

Commodities_GetSlot(modelid)
{
    for(new j, js = sizeof(VehicleCommoditiesInfo); j < js; j++)
    {
        if(VehicleCommoditiesInfo[j][sModel] == modelid)return
            VehicleCommoditiesInfo[j][sSlot];
    }

    return -1;
}

stock Commodities_GetFreeSlot(vehicleid)
{
    for(new j; j < MAX_COMMODITIES_SLOT; j++)
    {
        if(!VehicleInfo[vehicleid][vSlotObject][j])return j;
    }

    return -1;
}

Commodities_GetSlotCount(vid)
{
    new count;

    foreach(new x : Crates) if(CrateInfo[x][crExists] && CrateInfo[x][crVehicleID] == vid)
        count++;

    return count;
}

Commodities_Attach(vehicleid)
{
    for(new j, js = sizeof(VehicleCommoditiesInfo); j < js; j++) if(VehicleCommoditiesInfo[j][sModel] == VehicleInfo[vehicleid][vModel])
    {
        if(Commodities_GetSlotCount(vehicleid) >= VehicleCommoditiesInfo[j][sSlot])continue;
        if(VehicleCommoditiesInfo[j][sVisible] == false) continue;

        new slot = Commodities_GetFreeSlot(vehicleid); j += Commodities_GetSlotCount(vehicleid);

        VehicleInfo[vehicleid][vSlotObject][slot] = CreateDynamicObject(BOX_OBJECT, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
        AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][vSlotObject][slot], vehicleid, VehicleCommoditiesInfo[j][sX], VehicleCommoditiesInfo[j][sY], VehicleCommoditiesInfo[j][sZ], VehicleCommoditiesInfo[j][sRX], VehicleCommoditiesInfo[j][sRY], VehicleCommoditiesInfo[j][sRZ]);

        break;
    }
    return 1;
}

//Tuning System

Tuning_AddComponent(playerid, vehicleid, component)
{
    if(IsValidVehicle(vehicleid) <= 0) return 0;

    new cslot = GetVehicleComponentType(component);

    if(VehicleInfo[vehicleid][vTuning][cslot] != component)
    {
        VehicleInfo[vehicleid][vTuning][cslot] = component;

        AddVehicleComponent(vehicleid, component);
        SaveVehicle(vehicleid);
        PlayerInfo[playerid][pTuningComponentAldi] = 1;
    }
    else return HataMesajiC(playerid, "Aracýnýzda zaten bu modifiye bulunuyor.");
    return 1;
}

Tuning_SetComponents(vehicleid)
{
    for(new i; i < 14; i++)
    {
        if(GetVehicleComponentInSlot(vehicleid, i) > 0)RemoveVehicleComponent(vehicleid, VehicleInfo[vehicleid][vTuning][i]);
        if(!VehicleInfo[vehicleid][vTuning][i])continue;

        AddVehicleComponent(vehicleid, VehicleInfo[vehicleid][vTuning][i]);
    }

    return 1;
}

Tuning_ExitDisplay(playerid)
{
    new n = sizeof(RandomTuningSpawn);
    new random_spawn = random(n);
    new categoryTuning = PlayerInfo[playerid][pTuningCategoryID];
    new vehID = GetPlayerVehicleID(playerid);

    RemoveVehicleComponent(vehID, PlayerInfo[playerid][pTuningComponent]);
    PlayerInfo[playerid][pFreezed] = 0;
    TogglePlayerControllable(playerid, true);
    AC_SetPlayerVirtualWorld(playerid, 0);
    SetVehicleVirtualWorld(vehID, 0);

    switch(VehicleInfo[vehID][vModel])
    {
        case 455, 403, 514, 515: SetVehiclePos(vehID, 340.3456, -1348.7977, 15.5257);
        default: SetVehiclePos(vehID, RandomTuningSpawn[random_spawn][0], RandomTuningSpawn[random_spawn][1], RandomTuningSpawn[random_spawn][2]);
    }

    SetVehicleZAngle(vehID, RandomTuningSpawn[random_spawn][3]);
    SaveVehicle(vehID);

    PlayerInfo[playerid][pInTuning] = 0;

    if(categoryTuning == 9)
    {
        ChangeVehiclePaintjob(vehID, VehicleInfo[vehID][vPaintjob]);
        if(VehicleInfo[vehID][vPaintjob] == 3) ChangeVehicleColor(vehID, VehicleInfo[vehID][vFirstColor], VehicleInfo[vehID][vSecondColor]);
    }

    PlayerTextDrawHide(playerid, TDTuning_Component[playerid]);
    PlayerTextDrawHide(playerid, TDTuning_Dots[playerid]);
    PlayerTextDrawHide(playerid, TDTuning_Price[playerid]);
    PlayerTextDrawHide(playerid, TDTuning_ComponentName[playerid]);
    PlayerTextDrawHide(playerid, TDTuning_YN[playerid]);

    SetCameraBehindPlayer(playerid);
    if(!PlayerInfo[playerid][pVehicleHud]) pc_cmd_kapat(playerid, "aracgosterge");

    Tuning_SetComponents(vehID);

    return 1;
}


Tuning_ExitDisplay2(playerid)
{
    new categoryTuning = PlayerInfo[playerid][pTuningCategoryID];
    new vehID = GetPlayerVehicleID(playerid);

    RemoveVehicleComponent(vehID, PlayerInfo[playerid][pTuningComponent]);
    PlayerInfo[playerid][pFreezed] = 0;
    TogglePlayerControllable(playerid, true);
    SaveVehicle(vehID);

    PlayerInfo[playerid][pInTuning] = 0;
    PlayerInfo[playerid][pTamirciyim] = 0;

    if(categoryTuning == 9)
    {
        ChangeVehiclePaintjob(vehID, VehicleInfo[vehID][vPaintjob]);
        if(VehicleInfo[vehID][vPaintjob] == 3) ChangeVehicleColor(vehID, VehicleInfo[vehID][vFirstColor], VehicleInfo[vehID][vSecondColor]);
    }

    PlayerTextDrawHide(playerid, TDTuning_Component[playerid]);
    PlayerTextDrawHide(playerid, TDTuning_Dots[playerid]);
    PlayerTextDrawHide(playerid, TDTuning_Price[playerid]);
    PlayerTextDrawHide(playerid, TDTuning_ComponentName[playerid]);
    PlayerTextDrawHide(playerid, TDTuning_YN[playerid]);

    SetCameraBehindPlayer(playerid);
    if(!PlayerInfo[playerid][pVehicleHud]) pc_cmd_kapat(playerid, "aracgosterge");

    Tuning_SetComponents(vehID);
    return 1;
}

Tuning_SetDisplay(playerid, validCount = -1)
{
    new categoryTuning = PlayerInfo[playerid][pTuningCategoryID];
    new vehID = GetPlayerVehicleID(playerid);
    new string[300];

    PlayerInfo[playerid][pTuningCount] = (validCount == -1) ? GetVehicleComponentCount(categoryTuning, VehicleInfo[vehID][vModel]) : validCount;
    if(validCount == -1 && !PlayerInfo[playerid][pTamirciyim]) SetPlayerTuningCameraPos(playerid, categoryTuning);

    if(!PlayerInfo[playerid][pTuningCount])
    {
        PlayerTextDrawSetString(playerid, TDTuning_Price[playerid], "~y~Uyumlu modifiye yok.");
        PlayerTextDrawSetString(playerid, TDTuning_ComponentName[playerid], "~w~Satin almak icin (~y~~k~~CONVERSATION_YES~~w~), iptal etmek icin (~y~~k~~CONVERSATION_NO~~w~) tusuna bas.");

        PlayerTextDrawShow(playerid, TDTuning_Dots[playerid]);
        PlayerTextDrawShow(playerid, TDTuning_Price[playerid]);
        PlayerTextDrawShow(playerid, TDTuning_ComponentName[playerid]);

        PlayerTextDrawHide(playerid, TDTuning_YN[playerid]);

        RemoveVehicleComponent(vehID, PlayerInfo[playerid][pTuningComponent]);
        ChangeVehiclePaintjob(vehID, VehicleInfo[vehID][vPaintjob]);
    }
    else
    {
        new compName[32] = "Boyaisi";
        new compPrice;
        if(!PlayerInfo[playerid][pTamirciyim]) compPrice = 700;
        else compPrice = 350;

        RemoveVehicleComponent(vehID, PlayerInfo[playerid][pTuningComponent]);
        ChangeVehiclePaintjob(vehID, VehicleInfo[vehID][vPaintjob]);

//      PlayerInfo[playerid][pTuningCount] = (validCount == -1) ? 1 : validCount;
        PlayerInfo[playerid][pTuningCount] = (validCount == -1) ? GetVehicleComponentCount(categoryTuning, VehicleInfo[vehID][vModel]) : validCount;
        PlayerInfo[playerid][pTuningComponent] = GetVehicleCompatibleComponent(categoryTuning, VehicleInfo[vehID][vModel], PlayerInfo[playerid][pTuningCount]);
        new compatibleComponent = PlayerInfo[playerid][pTuningComponent];

        if(categoryTuning != 9)
        {
            RemoveVehicleComponent(vehID, VehicleInfo[vehID][vTuning][categoryTuning]);
            AddVehicleComponent(vehID, compatibleComponent);
            strmid(compName, GetComponentName(compatibleComponent), 0, 32);
            if(PlayerInfo[playerid][pJob] == 1 && PlayerInfo[playerid][pTamirciyim]) compPrice = GetComponentPrice(compatibleComponent) / 2;
            else compPrice = GetComponentPrice(compatibleComponent);
        }
        else ChangeVehiclePaintjobEx(vehID, PlayerInfo[playerid][pTuningComponent]);

        format(string, sizeof(string), "~y~Fiyat: ~w~$%d", compPrice);
        PlayerTextDrawSetString(playerid, TDTuning_Price[playerid], string);
        PlayerTextDrawShow(playerid, TDTuning_Price[playerid]);

        format(string, sizeof(string), "~y~Isim: ~w~%s (#%d)~n~~w~Satin almak icin (~y~~k~~CONVERSATION_YES~~w~), iptal etmek icin (~y~~k~~CONVERSATION_NO~~w~) tusuna bas.", compName, compatibleComponent);
        PlayerTextDrawSetString(playerid, TDTuning_ComponentName[playerid], string);
        PlayerTextDrawShow(playerid, TDTuning_ComponentName[playerid]);

        PlayerTextDrawShow(playerid, TDTuning_YN[playerid]);
    }

    Tuning_SetComponents(vehID);

    return 1;
}

Tuning_CreateTD(playerid)
{
    TDTuning_Component[playerid] = CreatePlayerTextDraw(playerid, 220.000000, 320.000000, "~w~Spoiler (~>~)~y~ Hood");
    PlayerTextDrawBackgroundColor(playerid, TDTuning_Component[playerid], 255);
    PlayerTextDrawFont(playerid, TDTuning_Component[playerid], 3);
    PlayerTextDrawLetterSize(playerid, TDTuning_Component[playerid], 0.450000, 1.799999);
    PlayerTextDrawColor(playerid, TDTuning_Component[playerid], -1);
    PlayerTextDrawSetOutline(playerid, TDTuning_Component[playerid], 1);
    PlayerTextDrawSetProportional(playerid, TDTuning_Component[playerid], 1);
    PlayerTextDrawSetSelectable(playerid, TDTuning_Component[playerid], 0);

    TDTuning_Dots[playerid] = CreatePlayerTextDraw(playerid, 220.000000, 333.000000, " ");
    PlayerTextDrawBackgroundColor(playerid, TDTuning_Dots[playerid], 255);
    PlayerTextDrawFont(playerid, TDTuning_Dots[playerid], 3);
    PlayerTextDrawLetterSize(playerid, TDTuning_Dots[playerid], 0.670000, 1.699999);
    PlayerTextDrawColor(playerid, TDTuning_Dots[playerid], -1);
    PlayerTextDrawSetOutline(playerid, TDTuning_Dots[playerid], 1);
    PlayerTextDrawSetProportional(playerid, TDTuning_Dots[playerid], 1);
    PlayerTextDrawSetSelectable(playerid, TDTuning_Dots[playerid], 0);

    TDTuning_Price[playerid] = CreatePlayerTextDraw(playerid, 221.000000, 351.000000, "~y~Fiyat: ~w~$0");
    PlayerTextDrawBackgroundColor(playerid, TDTuning_Price[playerid], 255);
    PlayerTextDrawFont(playerid, TDTuning_Price[playerid], 3);
    PlayerTextDrawLetterSize(playerid, TDTuning_Price[playerid], 0.390000, 1.900000);
    PlayerTextDrawColor(playerid, TDTuning_Price[playerid], -1);
    PlayerTextDrawSetOutline(playerid, TDTuning_Price[playerid], 1);
    PlayerTextDrawSetProportional(playerid, TDTuning_Price[playerid], 1);
    PlayerTextDrawSetSelectable(playerid, TDTuning_Price[playerid], 0);

    TDTuning_ComponentName[playerid] = CreatePlayerTextDraw(playerid, 221.000000, 369.000000, "~y~Isim: ~w~maske (#0).");
    PlayerTextDrawBackgroundColor(playerid, TDTuning_ComponentName[playerid], 255);
    PlayerTextDrawFont(playerid, TDTuning_ComponentName[playerid], 3);
    PlayerTextDrawLetterSize(playerid, TDTuning_ComponentName[playerid], 0.390000, 1.900000);
    PlayerTextDrawColor(playerid, TDTuning_ComponentName[playerid], -1);
    PlayerTextDrawSetOutline(playerid, TDTuning_ComponentName[playerid], 1);
    PlayerTextDrawSetProportional(playerid, TDTuning_ComponentName[playerid], 1);
    PlayerTextDrawSetSelectable(playerid, TDTuning_ComponentName[playerid], 0);

    TDTuning_YN[playerid] = CreatePlayerTextDraw(playerid, 221.000000, 388.000000, " "); // satinalmak icin
    PlayerTextDrawBackgroundColor(playerid, TDTuning_YN[playerid], 255);
    PlayerTextDrawFont(playerid, TDTuning_YN[playerid], 3);
    PlayerTextDrawLetterSize(playerid, TDTuning_YN[playerid], 0.390000, 1.900000);
    PlayerTextDrawColor(playerid, TDTuning_YN[playerid], -1);
    PlayerTextDrawSetOutline(playerid, TDTuning_YN[playerid], 1);
    PlayerTextDrawSetProportional(playerid, TDTuning_YN[playerid], 1);
    PlayerTextDrawSetSelectable(playerid, TDTuning_YN[playerid], 0);
}

//Dealer System

Dealer_CloseTD(playerid)
{
    for(new i; i < 10; i++) PlayerTextDrawHide(playerid, TDDealer_Select[playerid][i]);

    PlayerInfo[playerid][pDealerListitem] = -1;
    CancelSelectTextDraw(playerid);
}

Dealer_CreateSelectTD(playerid)
{
    TDDealer_Select[playerid][0] = CreatePlayerTextDraw(playerid,483.000000, 312.000000, "~n~");
    PlayerTextDrawBackgroundColor(playerid, TDDealer_Select[playerid][0], 255);
    PlayerTextDrawFont(playerid, TDDealer_Select[playerid][0], 1);
    PlayerTextDrawLetterSize(playerid, TDDealer_Select[playerid][0], 0.500000, -18.299999);
    PlayerTextDrawColor(playerid, TDDealer_Select[playerid][0], -1);
    PlayerTextDrawSetOutline(playerid, TDDealer_Select[playerid][0], 0);
    PlayerTextDrawSetProportional(playerid, TDDealer_Select[playerid][0], 1);
    PlayerTextDrawSetShadow(playerid, TDDealer_Select[playerid][0], 1);
    PlayerTextDrawUseBox(playerid, TDDealer_Select[playerid][0], 1);
    PlayerTextDrawBoxColor(playerid, TDDealer_Select[playerid][0], 136);
    PlayerTextDrawTextSize(playerid, TDDealer_Select[playerid][0], 149.000000, 0.000000);
    PlayerTextDrawSetSelectable(playerid, TDDealer_Select[playerid][0], 0);

    TDDealer_Select[playerid][1] = CreatePlayerTextDraw(playerid,155.000000, 143.000000, "Concessionario");
    PlayerTextDrawBackgroundColor(playerid, TDDealer_Select[playerid][1], 255);
    PlayerTextDrawFont(playerid, TDDealer_Select[playerid][1], 2);
    PlayerTextDrawLetterSize(playerid, TDDealer_Select[playerid][1], 0.509998, 1.200000);
    PlayerTextDrawColor(playerid, TDDealer_Select[playerid][1], -1);
    PlayerTextDrawSetOutline(playerid, TDDealer_Select[playerid][1], 0);
    PlayerTextDrawSetProportional(playerid, TDDealer_Select[playerid][1], 1);
    PlayerTextDrawSetShadow(playerid, TDDealer_Select[playerid][1], 1);
    PlayerTextDrawUseBox(playerid, TDDealer_Select[playerid][1], 1);
    PlayerTextDrawBoxColor(playerid, TDDealer_Select[playerid][1], 0);
    PlayerTextDrawTextSize(playerid, TDDealer_Select[playerid][1], 439.000000, 10.000000);
    PlayerTextDrawSetSelectable(playerid, TDDealer_Select[playerid][1], 0);

    TDDealer_Select[playerid][2] = CreatePlayerTextDraw(playerid,221.000000, 143.000000, "");
    PlayerTextDrawBackgroundColor(playerid, TDDealer_Select[playerid][2], 0);
    PlayerTextDrawFont(playerid, TDDealer_Select[playerid][2], 5);
    PlayerTextDrawLetterSize(playerid, TDDealer_Select[playerid][2], 0.500000, 1.000000);
    PlayerTextDrawColor(playerid, TDDealer_Select[playerid][2], -1);
    PlayerTextDrawSetOutline(playerid, TDDealer_Select[playerid][2], 1);
    PlayerTextDrawSetProportional(playerid, TDDealer_Select[playerid][2], 1);
    PlayerTextDrawUseBox(playerid, TDDealer_Select[playerid][2], 1);
    PlayerTextDrawBoxColor(playerid, TDDealer_Select[playerid][2], 0x00000000);
    PlayerTextDrawTextSize(playerid, TDDealer_Select[playerid][2], 196.000000, 132.000000);
    PlayerTextDrawSetPreviewModel(playerid, TDDealer_Select[playerid][2], 411);
    PlayerTextDrawSetPreviewRot(playerid, TDDealer_Select[playerid][2], -16.000000, 0.000000, -55.000000, 1.000000);
    PlayerTextDrawSetSelectable(playerid, TDDealer_Select[playerid][2], 0);

    TDDealer_Select[playerid][3] = CreatePlayerTextDraw(playerid,159.000000, 201.000000, "LD_BEAT:left");
    PlayerTextDrawBackgroundColor(playerid, TDDealer_Select[playerid][3], 255);
    PlayerTextDrawFont(playerid, TDDealer_Select[playerid][3], 4);
    PlayerTextDrawLetterSize(playerid, TDDealer_Select[playerid][3], 0.709999, 3.099998);
    PlayerTextDrawColor(playerid, TDDealer_Select[playerid][3], -1);
    PlayerTextDrawSetOutline(playerid, TDDealer_Select[playerid][3], 0);
    PlayerTextDrawSetProportional(playerid, TDDealer_Select[playerid][3], 1);
    PlayerTextDrawSetShadow(playerid, TDDealer_Select[playerid][3], 1);
    PlayerTextDrawUseBox(playerid, TDDealer_Select[playerid][3], 1);
    PlayerTextDrawBoxColor(playerid, TDDealer_Select[playerid][3], 255);
    PlayerTextDrawTextSize(playerid, TDDealer_Select[playerid][3], 45.000000, 37.000000);
    PlayerTextDrawSetSelectable(playerid, TDDealer_Select[playerid][3], 1);

    TDDealer_Select[playerid][4] = CreatePlayerTextDraw(playerid,430.000000, 201.000000, "LD_BEAT:right");
    PlayerTextDrawBackgroundColor(playerid, TDDealer_Select[playerid][4], 255);
    PlayerTextDrawFont(playerid, TDDealer_Select[playerid][4], 4);
    PlayerTextDrawLetterSize(playerid, TDDealer_Select[playerid][4], 0.709999, 3.099998);
    PlayerTextDrawColor(playerid, TDDealer_Select[playerid][4], -1);
    PlayerTextDrawSetOutline(playerid, TDDealer_Select[playerid][4], 0);
    PlayerTextDrawSetProportional(playerid, TDDealer_Select[playerid][4], 1);
    PlayerTextDrawSetShadow(playerid, TDDealer_Select[playerid][4], 1);
    PlayerTextDrawUseBox(playerid, TDDealer_Select[playerid][4], 1);
    PlayerTextDrawBoxColor(playerid, TDDealer_Select[playerid][4], 255);
    PlayerTextDrawTextSize(playerid, TDDealer_Select[playerid][4], 45.000000, 37.000000);
    PlayerTextDrawSetSelectable(playerid, TDDealer_Select[playerid][4], 1);

    TDDealer_Select[playerid][5] = CreatePlayerTextDraw(playerid,320.000000, 164.000000, "Arac");
    PlayerTextDrawAlignment(playerid, TDDealer_Select[playerid][5], 2);
    PlayerTextDrawBackgroundColor(playerid, TDDealer_Select[playerid][5], 255);
    PlayerTextDrawFont(playerid, TDDealer_Select[playerid][5], 3);
    PlayerTextDrawLetterSize(playerid, TDDealer_Select[playerid][5], 0.559998, 1.299999);
    PlayerTextDrawColor(playerid, TDDealer_Select[playerid][5], -1);
    PlayerTextDrawSetOutline(playerid, TDDealer_Select[playerid][5], 1);
    PlayerTextDrawSetProportional(playerid, TDDealer_Select[playerid][5], 1);
    PlayerTextDrawSetSelectable(playerid, TDDealer_Select[playerid][5], 0);

    TDDealer_Select[playerid][6] = CreatePlayerTextDraw(playerid,317.000000, 253.000000, "Fiyat: ~g~0$");
    PlayerTextDrawAlignment(playerid, TDDealer_Select[playerid][6], 2);
    PlayerTextDrawBackgroundColor(playerid, TDDealer_Select[playerid][6], 255);
    PlayerTextDrawFont(playerid, TDDealer_Select[playerid][6], 2);
    PlayerTextDrawLetterSize(playerid, TDDealer_Select[playerid][6], 0.359999, 1.099998);
    PlayerTextDrawColor(playerid, TDDealer_Select[playerid][6], -1);
    PlayerTextDrawSetOutline(playerid, TDDealer_Select[playerid][6], 1);
    PlayerTextDrawSetProportional(playerid, TDDealer_Select[playerid][6], 1);
    PlayerTextDrawSetSelectable(playerid, TDDealer_Select[playerid][6], 0);

    TDDealer_Select[playerid][7] = CreatePlayerTextDraw(playerid,315.000000, 290.000000, "Satin Al");
    PlayerTextDrawAlignment(playerid, TDDealer_Select[playerid][7], 2);
    PlayerTextDrawBackgroundColor(playerid, TDDealer_Select[playerid][7], 255);
    PlayerTextDrawFont(playerid, TDDealer_Select[playerid][7], 1);
    PlayerTextDrawLetterSize(playerid, TDDealer_Select[playerid][7], 0.500000, 1.000000);
    PlayerTextDrawColor(playerid, TDDealer_Select[playerid][7], -1);
    PlayerTextDrawSetOutline(playerid, TDDealer_Select[playerid][7], 0);
    PlayerTextDrawSetProportional(playerid, TDDealer_Select[playerid][7], 1);
    PlayerTextDrawSetShadow(playerid, TDDealer_Select[playerid][7], 1);
    PlayerTextDrawUseBox(playerid, TDDealer_Select[playerid][7], 1);
    PlayerTextDrawBoxColor(playerid, TDDealer_Select[playerid][7], 255);
    PlayerTextDrawTextSize(playerid, TDDealer_Select[playerid][7], 358.000000, 86.000000);
    PlayerTextDrawSetSelectable(playerid, TDDealer_Select[playerid][7], 1);

    TDDealer_Select[playerid][8] = CreatePlayerTextDraw(playerid,474.000000, 145.000000, "x");
    PlayerTextDrawBackgroundColor(playerid, TDDealer_Select[playerid][8], 255);
    PlayerTextDrawFont(playerid, TDDealer_Select[playerid][8], 2);
    PlayerTextDrawLetterSize(playerid, TDDealer_Select[playerid][8], 0.469999, 1.100000);
    PlayerTextDrawColor(playerid, TDDealer_Select[playerid][8], -1);
    PlayerTextDrawSetOutline(playerid, TDDealer_Select[playerid][8], 0);
    PlayerTextDrawSetProportional(playerid, TDDealer_Select[playerid][8], 1);
    PlayerTextDrawSetShadow(playerid, TDDealer_Select[playerid][8], 1);
    PlayerTextDrawUseBox(playerid, TDDealer_Select[playerid][8], 1);
    PlayerTextDrawBoxColor(playerid, TDDealer_Select[playerid][8], 0);
    PlayerTextDrawTextSize(playerid, TDDealer_Select[playerid][8], 486.000000, 8.000000);
    PlayerTextDrawSetSelectable(playerid, TDDealer_Select[playerid][8], 1);

    TDDealer_Select[playerid][9] = CreatePlayerTextDraw(playerid,317.000000, 266.000000, "~y~Donator");
    PlayerTextDrawAlignment(playerid, TDDealer_Select[playerid][9], 2);
    PlayerTextDrawBackgroundColor(playerid, TDDealer_Select[playerid][9], 255);
    PlayerTextDrawFont(playerid, TDDealer_Select[playerid][9], 1);
    PlayerTextDrawLetterSize(playerid, TDDealer_Select[playerid][9], 0.440000, 0.899999);
    PlayerTextDrawColor(playerid, TDDealer_Select[playerid][9], -1);
    PlayerTextDrawSetOutline(playerid, TDDealer_Select[playerid][9], 1);
    PlayerTextDrawSetProportional(playerid, TDDealer_Select[playerid][9], 1);
    PlayerTextDrawSetSelectable(playerid, TDDealer_Select[playerid][9], 0);
}

Dealer_AssignValidValue(dealerid, &id)
{
    if(dealerid == -1)return 1;
    if(id >= 0 && id < MAX_DEALER_VEHICLES && DealerInfo[dealerid][dModel][id] >= 400 && DealerInfo[dealerid][dModel][id] <= 611 && DealerInfo[dealerid][dPrice][id])return id;

    new last_id = id;

    if(id < 0) for(new j = MAX_DEALER_VEHICLES - 1; j > 0; j--)
    {
        if(DealerInfo[dealerid][dModel][j] < 400 || DealerInfo[dealerid][dModel][j] > 611 || !DealerInfo[dealerid][dPrice][j])continue;
        id = j; return 1;
    }
    else if(id >= MAX_DEALER_VEHICLES || (id < MAX_DEALER_VEHICLES && DealerInfo[dealerid][dModel][id] < 400 || DealerInfo[dealerid][dModel][id] > 611 || !DealerInfo[dealerid][dPrice][id])) for(new j = id; j < MAX_DEALER_VEHICLES; j++)
    {
        if(DealerInfo[dealerid][dModel][j] < 400 || DealerInfo[dealerid][dModel][j] > 611 || !DealerInfo[dealerid][dPrice][j])continue;
        id = j; break;
    }

    if(last_id == id)id = 0; return 1;
}

Dealer_ShowList(playerid)
{
    new string[256], count;

    foreach(new j : Dealers) if(DealerInfo[j][dExists])
    {
        format(string, sizeof(string), "%s%s\n", string, DealerInfo[j][dName]);

        PlayerInfo[playerid][pDealersID][count] = j;
        count++;
    }

    Dialog_Show(playerid, DialogDealers, DIALOG_STYLE_LIST, "Lista concessionari", string, "Ýleri", "Ýptal");

    return 1;
}

Dealer_GetName(dealerid)
{
    new name[32] = "Bos";

    if(dealerid == -1)
        return name;

    format(name, sizeof(name), DealerInfo[dealerid][dName]);

    return name;
}

Dealer_VehiclesList(playerid, dealerid)
{
    new string[1024] = "Araç\tFiyat\n";

    if(dealerid != -1 && DealerInfo[dealerid][dExists])
    {
        for(new i; i < MAX_DEALER_VEHICLES; i++)
            format(string, sizeof(string), "%sSlot %d: %s\t$%d\n", string, i + 1, (!DealerInfo[dealerid][dModel][i]) ? ("Bos") : GetVehicleModelName(DealerInfo[dealerid][dModel][i]), DealerInfo[dealerid][dPrice][i]);
    }

    Dialog_Show(playerid, DialogDealerVehicles, DIALOG_STYLE_TABLIST_HEADERS, Dealer_GetName(dealerid), string, "Ýleri", "Ýptal");

    return 1;
}

//Keys System

Key_Give(playerid, type, subject)
{
    // new query[200];

    mysql_format(ourConnection, queryx, sizeof(queryx), "INSERT INTO user_keys (owner_id, subject_type, subject_id, created_at) VALUES ('%d', '%d', '%d', NOW())", PlayerInfo[playerid][pID], type, subject);
    mysql_tquery(ourConnection, queryx);

    return 1;
}

Key_Remove(type, subject)
{
    // new query[200];

    mysql_format(ourConnection, queryx, sizeof(queryx), "DELETE FROM user_keys WHERE subject_type = '%d' AND subject_id = '%d'", type, subject);
    mysql_tquery(ourConnection, queryx);

    //mysql_format(ourConnection, queryx, sizeof(queryx), "UPDATE user_keys SET expired = '1' WHERE subject_type = '%d' AND subject_id = '%d'", type, subject);
    //mysql_tquery(ourConnection, queryx);

    return 1;
}

Key_Drop(playerid, count, id = -1)
{
    // new query[256];

    if(id == -1)
    {
        mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT id FROM user_keys WHERE owner_id = '%d'", PlayerInfo[playerid][pID]);
        mysql_tquery(ourConnection, queryx, "OnPlayerKeysDropSearch", "dd", playerid, count);
    }
    else
    {
        mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT id, subject_type, subject_id, expired FROM user_keys WHERE owner_id = '%d'", PlayerInfo[playerid][pID]);
        mysql_tquery(ourConnection, queryx, "OnPlayerKeysGiveSearch", "ddd", playerid, id, count);
    }

    return 1;
}

//Laboratories System

Lab_GetQuality(labid, amount, extra)
{
    new quality;
    new lab_level = LabInfo[labid][lLevel] - 1;
    new extra_amount;

    static const max_quality[3] = {25, 65, 100};
    static const min_quality[3] = {5, 25, 60};

    if(extra)
    {
        amount += extra;
        extra_amount = max_quality[lab_level] - (100 / amount * extra);
        quality = (floatround(extra_amount) - random(15) + 5);
    }
    else quality = floatround(max_quality[lab_level] - random(15) + 5);

    if(quality > max_quality[lab_level]) quality = max_quality[lab_level];
    if(quality < min_quality[lab_level]) quality = min_quality[lab_level];
    if(quality > 100) quality = 100;
    if(quality < 5) quality = 5;

    return quality;
}

Lab_InitProduce(playerid, quantity, quality, labid, drugid)
{
    LabInfo[labid][lProducing][drugid] = 1;
    LabInfo[labid][lProducingQuantity][drugid] = quantity;
    LabInfo[labid][lProducingQuality][drugid] = quality;
    LabInfo[labid][lProducingExpires][drugid] = gettime() + 60 * Drug_GetProductionTime(drugid);
    LabInfo[labid][lUretimSayisi] += 1;
    
    BasariMesaji(playerid, "%s üretmeye baþladýn. Kalan süre: %s", Drug_GetNameLab(drugid), timec(LabInfo[labid][lProducingExpires][drugid]));
    
    if(LabInfo[labid][lUretimSayisi] == 40)
    {
        LabInfo[labid][lLevel] += 1;
        BasariMesaji(playerid, "Tebrikler, laboratuvar seviyen 2 olarak deðiþtirildi. Daha fazla üreterek laboratuvarýnýn geliþmesini saðlayabilirsin.");
    }

    else if(LabInfo[labid][lUretimSayisi] == 80)
    {
        LabInfo[labid][lLevel] += 1;
        BasariMesaji(playerid, "Tebrikler, laboratuvar seviyen 3 olarak deðiþtirildi.");
        SunucuMesajicp(playerid, "Þuanda laboratuvarýn son seviyede ama neden üretmeye devam etmeyesin ki?");
    }
    
    SaveLab(labid);
    return 1;
}

Lab_ShowList(playerid)
{
    new string[256], count;

    foreach(new i : Lab)
    {
        if(!LabInfo[i][lExists]) continue;

        format(string, sizeof(string), "%s#%d\t%d\t%d\t\n", string, i, LabInfo[i][lLevel], LabInfo[i][lFaction]);
        PlayerInfo[playerid][pLabsID][count] = i;
        count++;
    }

    Dialog_Show(playerid, DialogLaboratories, DIALOG_STYLE_TABLIST_HEADERS, "Laboratuvar Listesi", "ID\tSeviye\tOluþum\n%s", "Ýleri", "Ýptal", string);

    return 1;
}

Lab_ShowOptions(playerid, labid)
{
    PlayerInfo[playerid][pLabMOD] = labid;

    return Dialog_Show(playerid, DialogLabOptions, DIALOG_STYLE_LIST, "Laboratuvar Düzenle", "Sahibi deðiþtir\nSeviye deðiþtir\nPozisyon deðiþtir\nÜretilebilir Uyuþturucularý deðiþtir\nOluþum deðiþtir", "Ýleri", "Geri");
}

//Illegal Industries System

IllegalIndustries_ShowList(playerid)
{
    new string[256], count;

    foreach(new i : IllegalIndustry)
    {
        if(!IllegalIndustryInfo[i][iExists]) continue;
        format(string, sizeof(string), "%s#%d\t%s\t%d\t\n",  string, i, timec(IllegalIndustryInfo[i][iRefreshTime]), IllegalIndustryInfo[i][iRefreshAmount]);
        PlayerInfo[playerid][pIndustriesID][count] = i;
        count++;
    }

    Dialog_Show(playerid, DialogIllegalIndustries, DIALOG_STYLE_TABLIST_HEADERS, "Illegal Ýþletmelerin Listesi", "ID\tSon Yenileme\tYenileme Miktarý\n%s", "Ýleri", "Ýptal", string);

    return 1;
}

IllegalIndustries_ShowOptions(playerid, labid)
{
    PlayerInfo[playerid][pIndustryMOD] = labid;

    return Dialog_Show(playerid, DialogIIndustryOptions, DIALOG_STYLE_LIST, "Illegal Ýþletmeleri Düzenle", "Konumu deðiþtir\nÜrünleri Yönet", "Ýleri", "Geri");
}

IllegalIndustries_GetFreeSlot(id)
{
    for(new j; j < 29; j++) if(IllegalIndustryInfo[id][iIngredients][j] == 0)return j;

    return -1;
}

IllegalIndustries_HasIngredient(id, itemid)
{
    for(new j; j < 29; j++) if(IllegalIndustryInfo[id][iIngredients][j] == itemid)return j;

    return -1;
}

IllegalIndustries_Refresh(id)
{
    for(new j; j < 29; j++)
    {
        if(!IllegalIndustryInfo[id][iIngredients][j]) continue;
        IllegalIndustryInfo[id][iAmounts][j] = IllegalIndustryInfo[id][iRefreshAmount];
    }

    return 1;
}

//Company System

Company_ShowList(playerid)
{
    new string[500], count;

    foreach(new i : Companies)
    {
        if(!CompanyInfo[i][cValid]) continue;
        format(string, sizeof(string), "%s#%d\t%s\n",  string, i, CompanyInfo[i][cName]);
        PlayerInfo[playerid][pIndustriesID][count] = i;
        count++;
    }

    Dialog_Show(playerid, DialogCompanies, DIALOG_STYLE_TABLIST_HEADERS, "Trucker Listesi", "ID\tÝsim\n%s", "Ýleri", "Ýptal", string);

    return 1;
}

Company_ShowOptions(playerid, company_id)
{
    PlayerInfo[playerid][pIndustryMOD] = company_id;

    return Dialog_Show(playerid, DialogCompanyEdit, DIALOG_STYLE_LIST, "Trucker Düzenle", "Pozisyon deðiþtir\nBirimleri Düzenle \nFiyat deðiþtir\nÝsim deðiþtir\nStok Deðiþtir\nMaksimum Stok Deðiþtir\nÞirket ID Deðiþtir\nÞirket Durum Alýyor\nÞirket Durum Satýyor", "Ýleri", "Geri");
}

Company_RefreshText(id)
{
    new string[90];

    format(string, sizeof(string), "[{FFFF00}%s{FFFFFF}]\n$%d birim / kasa\nStok: %d/%d", CompanyInfo[id][cName], CompanyInfo[id][cPrice], CompanyInfo[id][stok], CompanyInfo[id][mstok]);
    if(CompanyInfo[id][cBuyType] > KIYAFET && CompanyInfo[id][cBuyType] != YAKIT && CompanyInfo[id][cBuyType] != MOBILYA)format(string, sizeof(string), "%s\n%d birim / kasa", string, CompanyInfo[id][cUnit]);//, CompanyInfo[id][stok], CompanyInfo[id][mstok]);

    DestroyDynamic3DTextLabelEx(CompanyInfo[id][cText]);
    CompanyInfo[id][cText] = CreateDynamic3DTextLabel(string, COLOR_WHITE, CompanyInfo[id][cBuyPosX], CompanyInfo[id][cBuyPosY], CompanyInfo[id][cBuyPosZ] + 1.0, 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, CompanyInfo[id][cWorld], CompanyInfo[id][cInterior], -1);

    return 1;
}

//Faction System

Faction_GetOnlineMCount(type)
{
    new count;

    foreach(new pid: Player) if(IsPlayerConnected(pid) && PlayerInfo[pid][pFaction] != -1 && Faction_GetType(PlayerInfo[pid][pFaction]) == type && PlayerInfo[pid][pFactionDuty])
        count++;

    return count;
}

Faction_OffDuty(playerid)
{
    if(!PlayerInfo[playerid][pFactionDuty])return 1;

    SetPlayerColor(playerid, COLOR_WHITE);
    PlayerInfo[playerid][pToggleArmour] = 0;

    AC_SetPlayerHealth(playerid, PlayerInfo[playerid][pSpawnHealth]);
    AC_SetPlayerArmour(playerid, 0);

    PlayerInfo[playerid][pFactionDuty] = 0;
    SetPlayerSkinEx(playerid, PlayerInfo[playerid][pSkin]);
    PlayerInfo[playerid][pFactionSkin] = 0;
    PlayerInfo[playerid][pTaser] = 0;
    PlayerInfo[playerid][pBeanBag] = 0;

    TogglePlayerControllable(playerid, true);
    PlayerInfo[playerid][pFreezed] = 0;

    AC_ResetPlayerWeapons(playerid);

    return 1;
}

Faction_GiveEquipment(playerid)
{
    new type = Faction_GetType(PlayerInfo[playerid][pFaction]);

    switch(type)
    {
        case POLICE:
            Dialog_Show(playerid, DialogLSPDEkipman, DIALOG_STYLE_TABLIST_HEADERS, "LSPD Ekipman Menüsü", "Ýsim\tAçýklama\nDevriye Ekipmaný\tStandart devriye ekipmanlarý.\nDedektif Ekipmaný\tStandart dedektif ekipmanlarý.\nSWAT\tSWAT ekipmanlarý(Sadece SWAT'a özel).", "Seç", "Ýptal");
        case MEDICAL:
            Dialog_Show(playerid, DialogLSFDEkipman, DIALOG_STYLE_TABLIST_HEADERS, "LSFD Ekipman Menüsü", "Ýsim\nYangýn Tüpü\nÝç Yelek\nParaþüt\nKürek\nTestere\nÜniforma", "Seç", "Ýptal");
        case GOVERNMENT:
            Dialog_Show(playerid, DialogGOVEkipman, DIALOG_STYLE_TABLIST_HEADERS, "LS City Hall Ekipman Menüsü", "Ýsim\tAçýklama\nDesert Eagle\tGüvenlik Birimi\nYelek\tGüvenlik Birimi Ekipmaný\nCan Doldur\tHP deðerini 100 yapar.\nKamera\tKamera verir.", "Seç", "Ýptal");
        case LSNN:
            Dialog_Show(playerid, DialogLSNEkipman, DIALOG_STYLE_TABLIST_HEADERS, "Kanal Ekipman Dolabý", "Ýsim\tAçýklama\nKamera\nCan doldur\tHP deðerini 100 yapar.", "Seç", "Ýptal");
    }

    return 1;
}

Dialog:DialogGOVEkipman(playerid, response, listitem, inputtext[]) {
    if(response) {
        if(Faction_GetType(PlayerInfo[playerid][pFaction]) == GOVERNMENT && PlayerInfo[playerid][pFactionDuty]) {
            switch(listitem) {
                case 0: { // deagle
                    AC_GivePlayerWeapon(playerid, 24, 100);
                }
                case 1: { // yelek
                    AC_SetPlayerArmour(playerid, 100);
                }
                case 2: { // can
                    AC_SetPlayerHealth(playerid, 100);
                }
                /*case 3: { // m4
                    if(PlayerInfo[playerid][pRank] != 7 && PlayerInfo[playerid][pRank] != 14 && PlayerInfo[playerid][pRank] != 1) return HataMesajiC(playerid, "Bu fonksiyonu kullanmak için yeterli yetkiniz yok.");
                    else
                        AC_GivePlayerWeapon(playerid, 31, 200);
                }*/
                case 3: { // kamera
                    AC_GivePlayerWeapon(playerid, 43, 100);
                }
            }
            PlayerME(playerid, "ekipmanlarýný alýr.");
        } else return HataMesajiC(playerid, "Ýþbaþýnda deðilsiniz.");
    }
    return 1;
}


Dialog:DialogLSFDEkipman(playerid, response, listitem, inputtext[])
{
    if(!response) return 1;

    switch(listitem)
    {
        case 0:
        {
            AC_GivePlayerWeapon(playerid, 42, 5000);
            BasariMesaji(playerid, "Yangýn tüpünü ekipman dolabýndan aldýnýz.");
        }
        case 1:
        {
            new Float:zirh;
            AC_GetPlayerArmour(playerid, zirh);
            if(zirh == 0)
            {
                AC_SetPlayerHealth(playerid, 100);
                AC_SetPlayerArmour(playerid, 25);
                BasariMesaji(playerid, "Ýç yelek ekipmanýný dolaptan aldýnýz ve kuþandýnýz.");
            }
            else
            {
                BasariMesaji(playerid, "Ýç yelek ekipmanýný çýkarýp dolaba geri býraktýnýz.");
                AC_SetPlayerArmour(playerid, 0);
            }
        }
        case 2:
        {
            AC_GivePlayerWeapon(playerid, 46, 1);
            BasariMesaji(playerid, "Paraþüt ekipmanýný dolaptan aldýnýz.");
        }
        case 3:
        {
            AC_GivePlayerWeapon(playerid, 6, 1);
            BasariMesaji(playerid, "Kürek ekipmanýný dolaptan aldýnýz.");
        }
        case 4:
        {
            AC_GivePlayerWeapon(playerid, 9, 1);
            BasariMesaji(playerid, "Testere ekipmanýný dolaptan aldýnýz.");
        }
        case 5:
        {
            TogglePlayerControllable(playerid, false);
            PlayerInfo[playerid][pFreezed] = 1;
            PlayerInfo[playerid][pSelectUniform] = 1;
            SunucuMesajiC(playerid, "{FF6347}Mouseunuzun sað ve sol tuþlarý{C8C8C8}na basarak uygun üniformalarý görebilirsiniz.");
            SunucuMesajiC(playerid, "{FF6347}ENTER{C8C8C8} basarak üniformayý seçip {FF6347}/isbasi{C8C8C8} yazarak iptal edebilirsiniz.");
        }
    }
    return 1;
}

Dialog:DialogLSNEkipman(playerid, response, listitem, inputtext[])
{
    if(!response) return 1;

    switch(listitem)
    {
        case 0:
        {
            AC_GivePlayerWeapon(playerid, 43, 50);
            BasariMesaji(playerid, "Dolaptan kamera aldýn.");
        }
        case 1:
        {
            AC_SetPlayerHealth(playerid, 100);
            BasariMesaji(playerid, "Canýný doldurdun.");
        }
    }
    return 1;
}


Faction_GetType(factionid)
{
    if(factionid == -1 || factionid == INVALID_PLAYER_ID)return -1;

    return FactionInfo[factionid][fType];
}

Faction_GovernmentCash(amount)
{
    foreach(new j : Factions)
    {
        if(!FactionInfo[j][fExists] || FactionInfo[j][fType] != GOVERNMENT)continue;

        FactionInfo[j][fCash] += amount;

        return SaveFaction(j);
    }

    return 1;
}

/*Faction_SANCash(amount)
{
    foreach(new j : Factions)
    {
        if(!FactionInfo[j][fExists] || FactionInfo[j][fType] != LSNN)continue;

        FactionInfo[j][fCash] += amount;

        return SaveFaction(j);
    }

    return 1;
}*/

Faction_ShowList(playerid)
{
    new string[512], count;

    foreach(new i : Factions) if(FactionInfo[i][fExists])
    {
        format(string, sizeof(string), "%s#%d\t%s\n", string, i, FactionInfo[i][fName]);
        PlayerInfo[playerid][pFactionsID][count] = i;
        count++;
    }

    Dialog_Show(playerid, DialogFactions, DIALOG_STYLE_TABLIST_HEADERS, "Oluþum Listesi", "ID\tÝsim\n%s", "Ýleri", "Ýptal", string);

    return 1;
}

Faction_ShowOptions(playerid, fid)
{
    PlayerInfo[playerid][pFactionMOD] = fid;

    if(PlayerInfo[playerid][pAdmin] < GAMEADMIN3)
    {
        Dialog_Show(playerid, DialogFactionOptions, DIALOG_STYLE_LIST, FactionInfo[fid][fName], (Faction_GetType(fid) == SADECEUYUSTURUCU || Faction_GetType(fid) ==  ONAYLIFACT) ?
        ("Oluþum Adý\nRütbe Adlarý\n{000000}Üniforma düzenle\nOluþum Açýklamasý\n{000000}Maaþ") :
        ("Oluþum Adý\nRütbe Adlarý\nÜniforma düzenle\nOluþum Açýklamasý\nMaaþ"), "Ýleri", "Geri");
    }
    else Dialog_Show(playerid, DialogFactionOptions, DIALOG_STYLE_LIST, FactionInfo[fid][fName], "Oluþum Adý\nRütbe Adlarý\nÜniforma düzenle\nOluþum Açýklamasý\nMaaþ\nTip\nGrafiti\nOluþum Puaný Düzenle", "Ýleri", "Geri");

    return 1;
}

Faction_RankList(playerid, factionid)
{
    if(factionid != -1 && FactionInfo[factionid][fExists])
    {
        new string[612];

        for(new i; i < MAX_FACTION_RANKS; i++)
            format(string, sizeof(string), "%sSlot %d: %s\n", string, i + 1, fRanks[factionid][i]);

        Dialog_Show(playerid, DialogFactionRanks, DIALOG_STYLE_LIST, FactionInfo[factionid][fName], string, "Ýleri", "Ýptal");
    }

    return 1;
}

Faction_SkinsList(playerid, factionid)
{
    if(factionid != -1 && FactionInfo[factionid][fExists])
    {
        new string[512];

        for(new i; i < 30; i++)
            format(string, sizeof(string), "%sSlot %d: %d\n", string, i + 1, FactionInfo[factionid][fSkins][i]);

        Dialog_Show(playerid, DialogFactionSkins, DIALOG_STYLE_LIST, FactionInfo[factionid][fName], string, "Ýleri", "Ýptal");
    }

    return 1;
}

Faction_SalariesList(playerid, factionid)
{
    if(factionid != -1 && FactionInfo[factionid][fExists])
    {
        new string[512];

        for(new i; i < MAX_FACTION_RANKS; i++)
            format(string, sizeof(string), "%sRütbe %d: $%d\n", string, i + 1, FactionInfo[factionid][fSalary][i]);

        Dialog_Show(playerid, DialogFactionSalary, DIALOG_STYLE_LIST, FactionInfo[factionid][fName], string, "Ýleri", "Ýptal");
    }

    return 1;
}

//Pickup System

Pickup_Create(element_t, element_i, modelid, type, Float:x, Float:y, Float:z, world = -1, interior = -1)
{
    new pickupid = CreateDynamicPickup(modelid, type, x, y, z, world, interior);
    g_pks[cp_type] = element_t;
    g_pks[cp_id] = element_i;
    Streamer_SetArrayData(STREAMER_TYPE_PICKUP, pickupid, E_STREAMER_EXTRA_ID, g_pks, siz_g_pks); return pickupid;
}

Pickup_Nearest(playerid, element_t)
{
    new i = -1;

    if(PlayerInfo[playerid][pPickupID] != -1)
    {
        Streamer_GetArrayData(STREAMER_TYPE_PICKUP, PlayerInfo[playerid][pPickupID], E_STREAMER_EXTRA_ID, g_pks, siz_g_pks);

        new Float:x; Streamer_GetFloatData(STREAMER_TYPE_PICKUP, PlayerInfo[playerid][pPickupID], E_STREAMER_X, x);
        new Float:y; Streamer_GetFloatData(STREAMER_TYPE_PICKUP, PlayerInfo[playerid][pPickupID], E_STREAMER_Y, y);
        new Float:z; Streamer_GetFloatData(STREAMER_TYPE_PICKUP, PlayerInfo[playerid][pPickupID], E_STREAMER_Z, z);

        if(IsPlayerInRangeOfPoint(playerid, 1.5, x, y, z) && g_pks[cp_type] == element_t) i = g_pks[cp_id];
    }
    return i;
}

Pickup_Destroy(pickupid)
{
    g_pks[cp_id] = -1;
    g_pks[cp_type] = ELEMENT_NULL;
    Streamer_SetArrayData(STREAMER_TYPE_PICKUP, pickupid, E_STREAMER_EXTRA_ID, g_pks, siz_g_pks);
    DestroyDynamicPickup(pickupid); return 1;
}

//Furniture System

Furniture_DestroyLabels(playerid)
{
    if(PlayerInfo[playerid][pShowingID])
    {
        for(new f; f < MAX_FURNITURES_DIAMOND; f++) if(PlayerInfo[playerid][pLabelsID][f])
        {
            DestroyDynamic3DTextLabelEx(PlayerInfo[playerid][pLabelsID][f]);
        }
        PlayerInfo[playerid][pShowingID] = false;
    }

    return 1;
}

Furniture_GetLimit(playerid)
{
    new maxFurniture;

    switch(PlayerInfo[playerid][pPremium])
    {
        case 1: maxFurniture = MAX_FURNITURES_BRONZE;
        case 2: maxFurniture = MAX_FURNITURES_SILVER;
        case 3: maxFurniture = MAX_FURNITURES_GOLD;
        case 4: maxFurniture = MAX_FURNITURES_PLATINUM;
        case 5: maxFurniture = MAX_FURNITURES_DIAMOND;
        default: maxFurniture = MAX_FURNITURES;
    }

    return maxFurniture;
}

Furniture_Buy(playerid, modelid, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz, oldID = -1)
{
    new itemid = PlayerInfo[playerid][pSelectedItem];

    if(PlayerInfo[playerid][pCash] < 15)return
        HataMesajiC(playerid, "Yeterli paran yok. ($15)");

    new maxFurniture = Furniture_GetLimit(playerid);

    if(GetFurnitureCount(playerid) >= maxFurniture)return
        HataMesaji(playerid, "Maksimum dekorasyon limitine ulaþtýn. (%d) ", maxFurniture);

    if(BuyableFurnitures[itemid][oSlot] == 24 && PlayerInfo[playerid][pPremium] <= 0) return
        SunucuMesajiC(playerid, "Bu kategoriden satýn alma iþlemi yapabilmek için donator olmalýsýn.");

    if(oldID != -1 && SunucuBilgi[TextureliObje] == 1)
    {
        SetPVarInt(playerid, "furnitureKopya", 1);
        SetPVarInt(playerid, "furnitureKopyaID", oldID);
    }
    PlayerInfo[playerid][pFurnitureObject] = CreateDynamicObject(modelid, x, y, z, rx, ry, rz, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
    PlayerInfo[playerid][pEditingMode] = 1;
    EditDynamicObject(playerid, PlayerInfo[playerid][pFurnitureObject]);

    SunucuMesajiC(playerid, "Ýptal etmek için ESC veya boþluk tuþuna basýn, kaydetmek için diskete týklayýn.");
    return 1;
}

Furniture_ShowOptions(playerid)
{
    if(!PlayerInfo[playerid][pAdminDuty])return Dialog_Show(playerid, DialogFurnitureOpz, DIALOG_STYLE_LIST, "Mobilya Ayarlarý", "Mobilya konumu\nSat\nAdýný deðiþtir\nKopyala\nTexture Listesi 1\nTexture Listesi 2", "Ýleri", "Ýptal");

    return Dialog_Show(playerid, DialogFurnitureOpz, DIALOG_STYLE_LIST, "Mobilya Ayarlarý", "Mobilya Konumu\nSat\nAdýný deðiþtir\nKopyala\nTexture Listesi 1\nTexture Listesi 2\nObjeye ýþýnlan", "Ýleri", "Ýptal");
}

//Meal System

Meal_FreeID()
{
    if(Iter_Count(Meals) >= MAX_MEALS) foreach(new x : Meals) if(MealInfo[x][mPlayer] == -1)
    {
        Meal_Drop(x); return x;
    }

    return Iter_Free(Meals);
}

TepsileriTemizle()
{
    foreach(new id : Meals)
    {
        MealInfo[id][mPlayer] = -1;
        MealInfo[id][mExists] = 0;
        MealInfo[id][mModel] = 0;
        MealInfo[id][mPosX] = 0.0;
        MealInfo[id][mPosY] = 0.0;
        MealInfo[id][mPosZ] = 0.0;
        MealInfo[id][mInterior] = 0;
        MealInfo[id][mWorld] = 0;
        DestroyDynamicObjectEx(MealInfo[id][mObject]);
        MealInfo[id][mEditing] = false;
        Iter_Remove(Meals, id);
    }

    foreach(new i : Player) if(PlayerInfo[i][pMeal] != -1)
    {
        PlayerInfo[i][TepsiEdit] = false;
        RemovePlayerAttachedObject(i, 9);
        SetPlayerSpecialAction(i, SPECIAL_ACTION_NONE);
        PlayerInfo[i][pMeal] = -1;
    }
    return 1;
}

Meal_Drop(id)
{
    MealInfo[id][mPlayer] = -1;
    MealInfo[id][mExists] = 0;
    MealInfo[id][mModel] = 0;
    MealInfo[id][mPosX] = 0.0;
    MealInfo[id][mPosY] = 0.0;
    MealInfo[id][mPosZ] = 0.0;
    MealInfo[id][mInterior] = 0;
    MealInfo[id][mWorld] = 0;
    DestroyDynamicObjectEx(MealInfo[id][mObject]);
    MealInfo[id][mEditing] = false;

    Iter_Remove(Meals, id);

    return 1;
}

//Cimici System

Cimice_ShowMy(playerid)
{
    new string[512], count;

    foreach(new cid : Cimici)
    {
        if(CimiceInfo[cid][cOwner] != PlayerInfo[playerid][pID]) continue;
        format(string, sizeof(string), "%sBöcek #%d\n", string, CimiceInfo[cid][cID]);
        PlayerInfo[playerid][pCimicesID][count] = cid;
        count++;
    }

    if(!count)return
        SunucuMesajiC(playerid, "Veritabanýnda böcek bulunamadý.");

    Dialog_Show(playerid, DialogCimice, DIALOG_STYLE_LIST, "Benim eklediðim böcekler", string, "Seç", "Geri");

    return 1;
}

Cimice_ShowPublic(playerid)
{
    new string[512], count;

    foreach(new cid : Cimici)
    {
        if(CimiceInfo[cid][cPrivate]) continue;
        format(string, sizeof(string), "%sBöcek #%d\n", string, CimiceInfo[cid][cID]);
        PlayerInfo[playerid][pCimicesID][count] = cid;
        count++;
    }

    if(!count)return
        SunucuMesajiC(playerid, "Veritabanýnda böcek bulunamadý.");

    Dialog_Show(playerid, DialogCimice, DIALOG_STYLE_LIST, "Baþkasýnýn eklediði böcekler", string, "Seç", "Geri");

    return 1;
}

Cimice_IsValid(id)
{
    foreach(new cid : Cimici) if(CimiceInfo[cid][cID] == id)
        return 1;

    return 0;
}

Cimice_GetID(id)
{
    foreach(new cid : Cimici) if(CimiceInfo[cid][cID] == id)
        return cid;

    return -1;
}

Cimice_Attach(playerid, type, subject, Float:cPx = 0.0, Float:cPy = 0.0, Float:cPz = 0.0)
{
    new id = Iter_Free(Cimici);
    new hours;

    if(GetCimiciCount(playerid) >= MAX_PLAYER_CIMICI) return
        HataMesaji(playerid, "%d taneden fazla böcek ekleyemezsin, bazýlarýný çýkart.", MAX_PLAYER_CIMICI);

    if(id > MAX_CIMICI)
    {
        HataMesajiC(playerid, "Böcek limiti dolmuþ. Yöneticiler ile iletiþime geçin.");
        return -1;
    }

    switch(type)
    {
        case CIMICE_TYPE_HOUSE: hours = CIMICE_HOUSE_HOURS;
        case CIMICE_TYPE_BUILDING: hours = CIMICE_BUILDING_HOURS;
        case CIMICE_TYPE_VEHICLE: hours = CIMICE_VEHICLE_HOURS;
        default: hours = CIMICE_PLAYER_HOURS;
    }

    foreach(new c : Cimici)
    {
        if(CimiceInfo[c][cOwner] != PlayerInfo[playerid][pID]) continue;
        if(CimiceInfo[c][cSubject] != subject) continue;
        if(CimiceInfo[c][cType] != type) continue;

        if(type == CIMICE_TYPE_PLAYER)
        {
            HataMesajiC(playerid, "Bu kiþide zaten bir böcek var.");
            return -1;
        }
        if(type == CIMICE_TYPE_VEHICLE)
        {
            HataMesajiC(playerid, "Bu araçta zaten bir böcek var.");
            return -1;
        }
        if(type == CIMICE_TYPE_BUILDING || type == CIMICE_TYPE_HOUSE) if(IsPlayerInRangeOfPoint(playerid, 10.0, CimiceInfo[c][cPos][0], CimiceInfo[c][cPos][1], CimiceInfo[c][cPos][2]) > 0)
        {
            HataMesajiC(playerid, "Bu bölgede böcek var.");
            return -1;
        }
        else continue;
    }

    CimiceInfo[id][cOwner] = PlayerInfo[playerid][pID];
    CimiceInfo[id][cType] = type;
    CimiceInfo[id][cSubject] = subject;
    CimiceInfo[id][cPrivate] = 1;
    CimiceInfo[id][cPos][0] = cPx;
    CimiceInfo[id][cPos][1] = cPy;
    CimiceInfo[id][cPos][2] = cPz;
    CimiceInfo[id][cEnabled] = 1;
    CimiceInfo[id][cExpires] = gettime() + (3600 * hours);
    CimiceInfo[id][cInterior] = GetPlayerInterior(playerid);
    CimiceInfo[id][cVirtualWorld] = GetPlayerVirtualWorld(playerid);

    Cimice_Add(playerid, id);

    return 1;
}

Cimice_Add(playerid, id)
{
    // new query[428];

    mysql_format(ourConnection, queryx, sizeof(queryx), "INSERT INTO surveillance_bugs (type, owner_id, subject_id, private, expires, pos_x, pos_y, pos_z, enabled, interior, vw) VALUES ('%d', '%d', '%d', '%d', '%d', '%f', '%f', '%f', '%d', '%d', '%d')",
    CimiceInfo[id][cType],
    CimiceInfo[id][cOwner],
    CimiceInfo[id][cSubject],
    CimiceInfo[id][cPrivate],
    CimiceInfo[id][cExpires],
    CimiceInfo[id][cPos][0],
    CimiceInfo[id][cPos][1],
    CimiceInfo[id][cPos][2],
    CimiceInfo[id][cInterior],
    CimiceInfo[id][cVirtualWorld],
    CimiceInfo[id][cEnabled]);

    mysql_tquery(ourConnection, queryx, "OnQueryFinishedEx", "ddd", id, playerid, THREAD_ADD_CIMICE);

    return 1;
}

Cimice_Delete(cid)
{
    // new query[90];

    mysql_format(ourConnection, queryx, sizeof(queryx), "DELETE FROM surveillance_bugs WHERE id = '%d'", CimiceInfo[cid][cID]);
    mysql_tquery(ourConnection, queryx);

    foreach(new i : Player) if(PlayerInfo[i][pCimice] == CimiceInfo[cid][cID] || CimiceInfo[cid][cOwner] == PlayerInfo[i][pID])
    {
        SendFormattedMessage(i, COLOR_WHITE, "#%d ID'li böcek kaldýrýldý.", CimiceInfo[cid][cID]);
        if(PlayerInfo[i][pCimice] == CimiceInfo[cid][cID]) PlayerInfo[i][pCimice] = -1;
    }

    CimiceInfo[cid][cID] = 0;
    CimiceInfo[cid][cExpires] = 0;
    CimiceInfo[cid][cType] = 0;
    CimiceInfo[cid][cPrivate] = 0;
    CimiceInfo[cid][cOwner] = -1;
    CimiceInfo[cid][cSubject] = -1;
    CimiceInfo[cid][cEnabled] = 0;
    CimiceInfo[cid][cPos][0] = 0.0;
    CimiceInfo[cid][cPos][1] = 0.0;
    CimiceInfo[cid][cPos][2] = 0.0;
    CimiceInfo[cid][cInterior] = 0;
    CimiceInfo[cid][cVirtualWorld] = 0;

    Iter_SafeRemove(Cimici, cid, cid);

    return 1;
}

//Global Inventory System

Inventory_CreateObjects()
{
    new weapon_object;
    new weapon_type;
    // Standart
    Inventory_SetupObject(ITEM_NONE, "Boþ", 18631);
    Inventory_SetupObject(ITEM_PHONE, "Cep Telefonu", 19513);
    Inventory_SetupObject(ITEM_PHONE, "Tek kullanýmlýk telefon", 18874);
    Inventory_SetupObject(ITEM_BIZ, "Telsiz", 19942);
    Inventory_SetupObject(ITEM_BIZ, "Konum Belirleyici", 18875); // PASÝF
    Inventory_SetupObject(ITEM_BIZ, "Geliþmiþ Konum Belirleyici", 18875); // PASÝF
    Inventory_SetupObject(ITEM_BIZ, "Maske", 18911);
    Inventory_SetupObject(ITEM_BIZ, "Boombox", 2226);
    Inventory_SetupObject(ITEM_BIZ, "Sprite", 2601);
    Inventory_SetupObject(ITEM_BIZ, "Benzin Kutusu", 1650);
    Inventory_SetupObject(ITEM_BIZ, "Sigara", 19897);
    Inventory_SetupObject(ITEM_BIZ, "Zar", 1852);
    Inventory_SetupObject(ITEM_BIZ, "Bira", 1543);
    // Silahlar
    for(new w = 1; w < 47; w++)
    {
        weapon_object = GetWeaponModel(w);
        weapon_type = ITEM_WEAPON;

        Inventory_SetupObject(weapon_type, GetWeaponNameEx(w), weapon_object);
    }
    // Uyuþturucular
    Inventory_SetupObject(ITEM_DRUG, "Marijuana", 1578);
    Inventory_SetupObject(ITEM_DRUG, "Haþhaþ", 1578);
    Inventory_SetupObject(ITEM_DRUG, "Kokain", 1575);
    Inventory_SetupObject(ITEM_DRUG, "Eroin", 1575);
    Inventory_SetupObject(ITEM_DRUG, "Amfetamin", 1580);
    Inventory_SetupObject(ITEM_DRUG, "Ecstasy", 1576);
    Inventory_SetupObject(ITEM_DRUG, "LSD", 1575);
    Inventory_SetupObject(ITEM_DRUG, "PCP", 1577);
    Inventory_SetupObject(ITEM_DRUG, "Ketamin", 1575);
    Inventory_SetupObject(ITEM_DRUG, "Metamfetamin", 1579);
    Inventory_SetupObject(ITEM_DRUG, "Crack", 1577);
    Inventory_SetupObject(ITEM_DRUG, "Purple Drank", 1577);
    // Uyuþturucu üretim maddeleri
    Inventory_SetupObject(ITEM_INGREDIENT, "Benzen", 19570);
    Inventory_SetupObject(ITEM_INGREDIENT, "Siklopentilbromür", 19570);
    Inventory_SetupObject(ITEM_INGREDIENT, "Metilamin", 19570);
    Inventory_SetupObject(ITEM_INGREDIENT, "Morfin", 19570);
    Inventory_SetupObject(ITEM_INGREDIENT, "Hidroklorik Asit", 19570);
    Inventory_SetupObject(ITEM_INGREDIENT, "Amonyak", 19570);
    Inventory_SetupObject(ITEM_INGREDIENT, "Fenil-nitropropen", 19570);
    Inventory_SetupObject(ITEM_INGREDIENT, "Izopropil alkol", 19570);
    Inventory_SetupObject(ITEM_INGREDIENT, "Asetik Asit", 19570);
    Inventory_SetupObject(ITEM_INGREDIENT, "Sodyum Hidroksit", 19570);
    Inventory_SetupObject(ITEM_INGREDIENT, "Sülfrik Asit", 19570);
    Inventory_SetupObject(ITEM_INGREDIENT, "Safrol", 19570);
    Inventory_SetupObject(ITEM_INGREDIENT, "Metilamin Hidroklorür", 19570);
    Inventory_SetupObject(ITEM_INGREDIENT, "Amonyum Klorür", 19570);
    Inventory_SetupObject(ITEM_INGREDIENT, "Dimetilamin Hidroklorür", 19570);
    Inventory_SetupObject(ITEM_INGREDIENT, "Keton", 19570);
    Inventory_SetupObject(ITEM_INGREDIENT, "Ergotamin", 19570);
    Inventory_SetupObject(ITEM_INGREDIENT, "Liserjik Asit", 19570);
    Inventory_SetupObject(ITEM_INGREDIENT, "Piperidin", 19570);
    Inventory_SetupObject(ITEM_INGREDIENT, "Psödoefedrin", 19570);
    Inventory_SetupObject(ITEM_INGREDIENT, "Kýrmýzý Fosfor", 19570);
    Inventory_SetupObject(ITEM_INGREDIENT, "Kodein", 19570);
    Inventory_SetupObject(ITEM_INGREDIENT, "Prometazin", 19570);
    Inventory_SetupObject(ITEM_INGREDIENT, "Hidroiyotik Asit", 19570);
    Inventory_SetupObject(ITEM_INGREDIENT, "Striknin", 19570);

    Inventory_SetupObject(ITEM_INGREDIENT, "Tohum", 2060);
    Inventory_SetupObject(ITEM_INGREDIENT, "Haþhaþ Tohumu", 2060);
    Inventory_SetupObject(ITEM_INGREDIENT, "Marijuana Tohumu", 2060);

    Inventory_SetupObject(ITEM_INGREDIENT, "Suboxone", 1576);

    return 1;
}

Inventory_ReturnString(target, entity, slot, amount = 0)
{
    new item;
    new extra_value;

    if(entity == ENTITY_TYPE_PLAYER)
    {
        item = PlayerInfo[target][pInvList][slot];
        if(!amount) amount = PlayerInfo[target][pInvAmount][slot];
        extra_value = (Inventory_IsBurnerPhone(target, slot) > 0) ? PlayerInfo[target][pInvCredit][slot] : (InventoryObjects[item][invType] == ITEM_DRUG) ? PlayerInfo[target][pInvExtra][slot] : 0;
    }
    else if(entity == ENTITY_TYPE_HOUSE)
    {
        item = HouseInfo[target][hInvList][slot];
        if(!amount) amount = HouseInfo[target][hInvAmount][slot];
        extra_value = HouseInfo[target][hInvExtra][slot];
    }
    else if(entity == ENTITY_TYPE_VEHICLE)
    {
        item = VehicleInfo[target][vInvList][slot];
        if(!amount) amount = VehicleInfo[target][vInvAmount][slot];
        extra_value = VehicleInfo[target][vInvExtra][slot];
    }

    new type = InventoryObjects[item][invType];
    new string[90];

    if(extra_value && (type == ITEM_DRUG || type == ITEM_PHONE) && item)
    {
        format(string, sizeof(string), (type == ITEM_DRUG) ? ("%d%s") : ("$%d"), extra_value, "%");
        format(string, sizeof(string), " (%s: %s)", (type == ITEM_DRUG) ? ("Kalite") : ("Kredi"), string);
    }

    format(string, sizeof(string), "%s (%d)%s", InventoryObjects[item][invName], amount, string);

    return string;
}

Inventory_SetupObject(type, name[], object)
{
    new id = Iter_Free(InventoryObjects);

    InventoryObjects[id][invType] = type;
    format(InventoryObjects[id][invName], 64, name);
    InventoryObjects[id][invObject] = object;

    Iter_Add(InventoryObjects, id);

    return id;
}

//Player Inventory System

Inventory_ShowItems(playerid, id, bool:onlyGuns)
{
    new string[700];

    if(onlyGuns == true)
    {
        new count, weapons[12], ammo[12];

        for(new a; a < 12; a++)
        {
            GetPlayerWeaponData(playerid, a, weapons[a], ammo[a]);

            if(!weapons[a] || !AC_PlayerHasWeapon(playerid, weapons[a]) || !ammo[a])continue;

            format(string, sizeof(string), "%s%s (mermi: %d)\n", string, GetWeaponNameEx(weapons[a]), ammo[a]);
            PlayerInfo[id][pListsID][count] = a;
            count++;
        }

        if(!count)return
            SunucuMesajiC(id, "Bu oyuncunun silahý yok.");

        PlayerInfo[id][pRevokeItem] = playerid;

        return Dialog_Show(id, DialogTakeGun, DIALOG_STYLE_LIST, ReturnRoleplayName(id), string, "El koy", "Ýptal");
    }

    for(new x; x < MAX_INVENTORY_ITEMS; x++)
        format(string,sizeof(string), "%sSlot %d: %s\n", string, x + 1, Inventory_ReturnString(playerid, ENTITY_TYPE_PLAYER, x));

    if(Faction_GetType(PlayerInfo[id][pFaction]) == POLICE && PlayerInfo[id][pFactionDuty])
    {
        PlayerInfo[id][pRevokeItem] = playerid;
        Dialog_Show(id, DialogRevokeItem, DIALOG_STYLE_LIST, "Envanter", string, "El koy", "Ýptal");
    }
    else Dialog_Show(id, DialogNull, DIALOG_STYLE_LIST, "Envanter", string, "Ýptal", "");

    return 1;
}

Inventory_ListID(name[])
{
    for(new j, js = sizeof(InventoryObjects); j < js; j++)
    {
        if(strcmp(InventoryObjects[j][invName], name, false) == 0) return j;
    }

    return -1;
}

stock Inventory_FreeSlotCount(playerid)
{
    new count;

    for(new x; x < MAX_INVENTORY_ITEMS; x++)
    {
        if(!PlayerInfo[playerid][pInvList][x])count++;
    }

    return count;
}

Inventory_AddGun(playerid, item, name[], amount, quality = 0)
{
    new listid = Inventory_ListID(name);
    if(listid == -1 || !amount)return 1;

    new type = InventoryObjects[listid][invType];
    
    if(type != ITEM_WEAPON)
    {
        PlayerInfo[playerid][pHata] = 1;

        new test = random(2);
        HataMesaji(playerid, "%s adlý karakter sahibi %s, %s tarihinde envanter yerleþtirme iþlemi sonucunda hataya rastladý.", ReturnRoleplayName(playerid), PlayerInfo[playerid][pUsername], ReturnDate());
        if(test == 0) HataMesajiC(playerid, "Að baðlantýnýzdan kaynaklý okuma problemi oluþtu, silah envanterinize yerleþtirilemedi.");
        else HataMesajiC(playerid, "Sunucu-oyuncu eþitlemesi esnasýnda okuma problemi oluþtu, silah envanterinize yerleþtirilemedi.");
        HataMesajiC(playerid, "Herhangi bir kayýp durumunda bu hatayý ekran görüntüsü alarak destek bildirimi oluþturun.");
        return 1;
    }

    new item_exists = Inventory_HasItem(playerid, InventoryObjects[listid][invName], type);

    if(item_exists != -1 && (type != ITEM_DRUG || type == ITEM_DRUG && PlayerInfo[playerid][pInvExtra][item_exists] == quality) && type != ITEM_WEAPON && type != ITEM_CLOTHES && type != ITEM_PHONE)
        PlayerInfo[playerid][pInvAmount][item_exists] += amount;

    else
    {
        PlayerInfo[playerid][pInvList][item] = listid;
        PlayerInfo[playerid][pInvAmount][item] += amount;
        PlayerInfo[playerid][pInvExtra][item] = (type != ITEM_PHONE) ? quality : 1;
        PlayerInfo[playerid][pInvCredit][item] = (type == ITEM_PHONE) ? quality : 0;
    }

    PlayerInfo[playerid][pItemID] = -1;
    PlayerInfo[playerid][pHata] = 0;

    return (PlayerInfo[playerid][pInvList][item]) ? item : item_exists;
}

Inventory_AddItem(playerid, item, name[], amount, quality = 0)
{
    new listid = Inventory_ListID(name);
    if(listid == -1 || !amount)return 1;

    new type = InventoryObjects[listid][invType];
    new item_exists = Inventory_HasItem(playerid, InventoryObjects[listid][invName], type);

    if(item_exists != -1 && (type != ITEM_DRUG || type == ITEM_DRUG && PlayerInfo[playerid][pInvExtra][item_exists] == quality) && type != ITEM_WEAPON && type != ITEM_CLOTHES && type != ITEM_PHONE)
        PlayerInfo[playerid][pInvAmount][item_exists] += amount;

    else
    {
        PlayerInfo[playerid][pInvList][item] = listid;
        PlayerInfo[playerid][pInvAmount][item] += amount;
        PlayerInfo[playerid][pInvExtra][item] = (type != ITEM_PHONE) ? quality : 1;
        PlayerInfo[playerid][pInvCredit][item] = (type == ITEM_PHONE) ? quality : 0;
    }

    PlayerInfo[playerid][pItemID] = -1;

    return (PlayerInfo[playerid][pInvList][item]) ? item : item_exists;
}

Inventory_FreeID(playerid)
{
    for(new x; x < MAX_INVENTORY_ITEMS; x++)
    {
        if(!PlayerInfo[playerid][pInvList][x])
            return x;
    }

    return -1;
}

Inventory_DecraseAmount(playerid, itemid, amount = 1)
{
    PlayerInfo[playerid][pInvAmount][itemid] -= amount;

    if(PlayerInfo[playerid][pInvAmount][itemid] <= 0)
    {
        PlayerInfo[playerid][pInvList][itemid] = 0;
        PlayerInfo[playerid][pInvExtra][itemid] = 0;
        PlayerInfo[playerid][pInvCredit][itemid] = 0;
    }

    return 1;
}

Inventory_UseItem(playerid, itemid)
{
    new wid;
    new invList = PlayerInfo[playerid][pInvList][itemid];
    new type = InventoryObjects[invList][invType];
    new quality = PlayerInfo[playerid][pInvExtra][itemid];

    if(!invList || (type == ITEM_WEAPON || type == ITEM_CLOTHES) && PlayerInfo[playerid][pFactionDuty])return
        SunucuMesajiC(playerid, "Bu eþyayý iþbaþýnýn dýþýnda kullanabilirsin.");

    switch(type)
    {
        case ITEM_WEAPON:
        {
            if(PlayerInfo[playerid][pJailTime] > 1) return HataMesajiC(playerid, "Bu komutu hapiste kullanmazsýn.");

            wid = GetWeaponIDFromName(InventoryObjects[invList][invName]);
            new slot = GetWeaponSlot(wid);
            if(PlayerInfo[playerid][pScriptedGun][slot] != 0)return
                SendClientMessageEx(playerid, COLOR_GREY, "Ayný tip silahtan üzerinizde zaten var.");
                
            LogYaz(playerid, "/envanter > Kullan", wid, PlayerInfo[playerid][pInvAmount][itemid]);
            AC_GivePlayerWeapon(playerid, wid, PlayerInfo[playerid][pInvAmount][itemid]);
            if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) SetPlayerArmedWeapon(playerid, 0);
        }
        case ITEM_CLOTHES:
        {
            if(GetPlayerState(playerid) == PLAYER_STATE_ENTER_VEHICLE_DRIVER || GetPlayerState(playerid) == PLAYER_STATE_ENTER_VEHICLE_PASSENGER || GetPlayerState(playerid) == PLAYER_STATE_EXIT_VEHICLE)return 1;

            PlayerInfo[playerid][pSkin] = PlayerInfo[playerid][pInvAmount][itemid];
            SetPlayerSkinEx(playerid, PlayerInfo[playerid][pInvAmount][itemid]);
        }
        case ITEM_DRUG:
        {

            if(PlayerInfo[playerid][pJailTime] > 1) return HataMesajiC(playerid, "Bu komutu hapiste kullanmazsýn.");

            new drug_id = Drug_GetID(InventoryObjects[invList][invName]);

            if(drug_id < 2)
            {
                if(PlayerInfo[playerid][pSmoking])return
                    SunucuMesajiC(playerid, "Zaten sigara içiyorsun.");

                SetPlayerAttachedObject(playerid, 6, 3027, 6, 0.0852, 0.0303, 0.0194, 88.7970, 53.3082, 162.5791);
                SetPlayerAttachedObject(playerid, 5, 18673, 6, 0.1570, -0.0588, -1.6079, 0.0000, 0.0000, 0.0000, 1.0000, 1.0000, 1.0000);

                ApplyAnimation(playerid, "SMOKING", "M_smk_in", 4.1, 0, 0, 0, 0, 0, 1);
                PlayerAME(playerid, "esrarýný ateþler.");
                SunucuMesajiC(playerid, "Sigara> Y: Esrar içme, N: Konum deðiþtirme, H: Yere atma.");
                PlayerInfo[playerid][pSmoking] = 1;
                PlayerInfo[playerid][pSmokingQuality] = quality;
                PlayerInfo[playerid][pDrugEffects][drug_id] = 0;
                PlayerInfo[playerid][pSmokingType] = (!drug_id) ? SMOKING_TYPE_WEED : SMOKING_TYPE_HASHISH;
                PlayerInfo[playerid][pSmokingThrows] = 13;

                return Inventory_DecraseAmount(playerid, itemid);
            }
            else return Drug_Use(playerid, itemid, drug_id, quality);
        }
        case ITEM_BIZ:
        {
            if(!strcmp(InventoryObjects[invList][invName], "Sprite", false) || strcmp(InventoryObjects[invList][invName], "Bira", false) == 0)
            {
                Inventory_DecraseAmount(playerid, itemid);
                SetPlayerSpecialAction(playerid, (strcmp(InventoryObjects[invList][invName], "Sprite", false) == 0) ? SPECIAL_ACTION_DRINK_SPRUNK : SPECIAL_ACTION_DRINK_BEER);
                PlayerInfo[playerid][pSips] = 15;

                return PlayerME(playerid, "bir içecek çýkartýr.");
            }
            else if(strcmp(InventoryObjects[invList][invName], "Sigara", false) == 0)return HataMesajiC(playerid, "Sigara içmek için /sigara komutunu kullanýn.");
            else if(strcmp(InventoryObjects[invList][invName], "Zar", false) == 0)return HataMesajiC(playerid, "Zarý kullanmak için /zar komutunu kullanýn.");
            else if(strcmp(InventoryObjects[invList][invName], "Boombox", false) == 0)
            {
                SunucuMesajiC(playerid, "'Envanter > Boombox > Eþyayý yere at' sonrasý /boombox komutunu kullanýn.");
                return 1;
            }
            else if(strcmp(InventoryObjects[invList][invName], "Telsiz", false) == 0)return BasariMesaji(playerid, "Bilgilendirme için /telsizyardim komutunu kullanabilirsin.");
            else if(strcmp(InventoryObjects[invList][invName], "Maske", false) == 0)return pc_cmd_maske(playerid, "");

            return HataMesajiC(playerid, "Bu iþlemi yapamazsýnýz.");
        }
        case ITEM_INGREDIENT: return HataMesajiC(playerid, "Bu iþlemi yapamazsýnýz, sistem tanýtýmýný ziyaret edin.");
        case ITEM_PHONE:
        {
            if(PlayerInfo[playerid][pJailTime] > 1) return HataMesajiC(playerid, "Bu sistemi hapiste kullanmazsýn.");

            if(PlayerInfo[playerid][pMobile] != -1) return HataMesajiC(playerid, "Arama esnasýnda telefon sisteminin diðer fonksiyonlarýndan yararlanamazsýnýz.");

            new telstring[1024], telno[32], telnom;
            telnom = itemid;

            PlayerInfo[playerid][pPhoneID] = itemid;

            format(telno, sizeof(telno), "Telefon (%d)", PlayerInfo[playerid][pInvAmount][telnom]);

            new tdurum[32];
            if(!PlayerInfo[playerid][pInvExtra][itemid])
                format(tdurum, 32, "{FF6347}[Kapalý]");
            else format(tdurum, 32, "{41D225}[Açýk]");

            new sesdurum[32];
            if(PlayerInfo[playerid][pInvExtra][itemid] == 1)
                format(sesdurum, 32, "{41D225}[Açýk]");
            else format(sesdurum, 32, "{FF6347}[Kapalý]");

            PlayerInfo[playerid][pItemID] = itemid;

            if(!PlayerInfo[playerid][pTelefonTick])
                PlayerAME(playerid, "cep telefonunu cebinden alýr ve ekrana bakar.");

            format(telstring, sizeof(telstring), "Telefon\t%s\nZil Sesi\t%s\nArama Yap\t{FF6347}>> Numara Gir\nMesaj Gönder\t{FF6347}>> Numara Gir\nMesajlar\t{FF6347}>> Ýncele\nArama Geçmiþi\t{FF6347}>> Ýncele\nTelefon Rehberi\t{FF6347}>> Ýncele\nMüzik\t{FF6347}>> Dinle\nKonum Servisi\t{FF6347}>> Ýncele\nTelefon Kýlýfý Satýn Al\t{FF6347}>> Ýncele", tdurum, sesdurum);
            Dialog_Show(playerid, DialogTelefon, DIALOG_STYLE_TABLIST, telno, telstring, "Ýleri", "Ýptal");
            PlayerInfo[playerid][pTelefonTick] = GetTickCount();
            return 1;
        }
    }

    PlayerInfo[playerid][pInvAmount][itemid] = 0;
    PlayerInfo[playerid][pInvList][itemid] = 0;
    PlayerInfo[playerid][pItemID] = -1;

    return 1;
}

Inventory_HasItem(playerid, item[], type)
{
    for(new x; x < MAX_INVENTORY_ITEMS; x++)
    {
        new listid = PlayerInfo[playerid][pInvList][x];
        if(!PlayerInfo[playerid][pInvList][x] || InventoryObjects[listid][invType] != type)continue;

        if(type == ITEM_INGREDIENT || type == ITEM_PHONE)
        {
            if(strfind(InventoryObjects[listid][invName], item, true) != -1)
                return x;
        }

        if(strcmp(InventoryObjects[listid][invName], item, true) == 0) return x;
    }

    return -1;
}

Inventory_HasPhone(playerid, number)
{
    for(new x; x < MAX_INVENTORY_ITEMS; x++)
    {
        new listid = PlayerInfo[playerid][pInvList][x];

        if(!PlayerInfo[playerid][pInvList][x] && InventoryObjects[listid][invType] != ITEM_PHONE)continue;

        if(strfind(InventoryObjects[listid][invName], "Cep Telefonu", false) != -1 && PlayerInfo[playerid][pInvAmount][x] == number)
            return x;
    }

    return -1;
}

Inventory_IsBurnerPhone(playerid, slotid)
{
    if(PlayerInfo[playerid][pUsingPP] != -1)return 0;
    if(slotid == -1)return 0;
    if(!PlayerInfo[playerid][pInvList][slotid])return 0;

    new listid = PlayerInfo[playerid][pInvList][slotid];
    if(InventoryObjects[listid][invObject] == BURNER_PHONE_OBJECT) return 1;

    return 0;
}

Inventory_BurnerCredit(playerid, phoneid)
{
    PlayerInfo[playerid][pInvCredit][phoneid]--;

    if(PlayerInfo[playerid][pInvCredit][phoneid] <= 0)
        HataMesaji(playerid, "%d nolu tek kullanýmlýk telefon için kredi kalmadý.", phoneid);

    return 1;
}

//Damages System

Damages_FreeID(playerid)
{
    for(new i; i < MAX_DAMAGES_FOR_PLAYER; i++) if(!PlayerDamages[playerid][i][eOccupied]) return i;

    return -1;
}

Damages_Add(playerid, issuername[], weaponid, Float:amount, bodyPart)
{
    if(weaponid != 0) {
        new i = Damages_FreeID(playerid);

        if(i == -1)return 1;

        static const partName[7][32] = {"Gövde", "Göðüs", "Sol Kol", "Sað Kol", "Sol Bacak", "Sað Bacak", "Kafa"};

        PlayerDamages[playerid][i][eOccupied] = 1;
        PlayerDamages[playerid][i][eAmount] = floatround(amount);
        PlayerDamages[playerid][i][eWeapon] = weaponid;
        format(PlayerDamages[playerid][i][eIssuer], MAX_PLAYER_NAME, issuername);
        format(PlayerDamages[playerid][i][eBodypart], 32, partName[bodyPart - 3]);
    }
    return 1;
}

Damages_Reset(playerid)
{
    for(new i; i < MAX_DAMAGES_FOR_PLAYER; i++) PlayerDamages[playerid][i][eOccupied] = 0;

    return 1;
}

//Drop Items System

Item_FreeID()
{
    if(Iter_Free(DroppedItems) >= MAX_DROPPED_ITEMS)
    {
        Item_Delete(0); return 0;
    }

    return Iter_Free(DroppedItems);
}

Item_Drop(playerid, itemid, amount)
{
    if(itemid == -1)return 1;

    new i = Item_FreeID(), Float:x, Float:y, Float:z;
    new listid = PlayerInfo[playerid][pInvList][itemid];

    GetPlayerPos(playerid, x, y, z);

    ApplyAnimation(playerid, "GRENADE", "WEAPON_throwu", 3.0, 0, 0, 0, 0, 0);

    format(IDroppedInfo[i][idPlayer], 24, ReturnName(playerid));

    IDroppedInfo[i][idList] = listid;

    if(InventoryObjects[listid][invObject] == BOOMBOX_OBJECT) PlayerInfo[playerid][pMyBoombox] = i;

    if(InventoryObjects[listid][invObject] == RADIO_OBJECT) for(new j; j < 8; j++)
        PlayerInfo[playerid][pRadioSlot][j] = 0;

    if(PlayerInfo[playerid][pMobile] != -1 && itemid == PlayerInfo[playerid][pPhoneID])
        Phone_HangupCall(playerid);

    PlayerInfo[playerid][pRadioDefault] = -1;

    IDroppedInfo[i][idAmount] = (InventoryObjects[listid][invType] == ITEM_WEAPON ||
    InventoryObjects[listid][invType] == ITEM_CLOTHES ||
    InventoryObjects[listid][invType] == ITEM_PHONE ||
    InventoryObjects[listid][invType] == ITEM_DRUG ||
    InventoryObjects[listid][invType] == ITEM_INGREDIENT) ?
    amount : 1;

    IDroppedInfo[i][idQuality] = (InventoryObjects[listid][invType] == ITEM_DRUG) ? PlayerInfo[playerid][pInvExtra][itemid] : PlayerInfo[playerid][pInvCredit][itemid];

    IDroppedInfo[i][idPosX] = x;
    IDroppedInfo[i][idPosY] = y;
    IDroppedInfo[i][idPosZ] = z  - 0.9;
    IDroppedInfo[i][idRotX] = (InventoryObjects[listid][invType] == ITEM_WEAPON) ? 93.7 : 0.0;
    IDroppedInfo[i][idRotY] = (InventoryObjects[listid][invType] == ITEM_WEAPON) ? 120.0 : 0.0;
    IDroppedInfo[i][idRotZ] = (InventoryObjects[listid][invType] == ITEM_WEAPON) ? 120.0 : 0.0;

    IDroppedInfo[i][idInt] = GetPlayerInterior(playerid);
    IDroppedInfo[i][idWorld] = GetPlayerVirtualWorld(playerid);

    IDroppedInfo[i][idObject] = CreateDynamicObject(InventoryObjects[listid][invObject], x, y, z - 0.9, IDroppedInfo[i][idRotX], IDroppedInfo[i][idRotY], IDroppedInfo[i][idRotZ], GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
    new string[120];
    format(string, sizeof string, "{0099ff}[%s]", InventoryObjects[listid][invName]);
    IDroppedInfo[i][idLabel] = CreateDynamic3DTextLabel(string, COLOR_WHITE, IDroppedInfo[i][idPosX], IDroppedInfo[i][idPosY], IDroppedInfo[i][idPosZ], 10.0, -1, -1, 1, IDroppedInfo[i][idWorld], IDroppedInfo[i][idInt]);

    PlayerInfo[playerid][pInvAmount][itemid] -= amount;

    if(PlayerInfo[playerid][pInvAmount][itemid] <= 0)
    {
        PlayerInfo[playerid][pInvList][itemid] = 0;
        PlayerInfo[playerid][pInvExtra][itemid] = 0;
    }

    Iter_Add(DroppedItems, i);
    Streamer_Update(playerid);
    return 1;
}
Item_Nearest(playerid)
{
    foreach(new i : DroppedItems) if(IDroppedInfo[i][idList] && IsPlayerInRangeOfPoint(playerid, 1.5, IDroppedInfo[i][idPosX], IDroppedInfo[i][idPosY], IDroppedInfo[i][idPosZ]))
    {
        if(GetPlayerInterior(playerid) == IDroppedInfo[i][idInt] && GetPlayerVirtualWorld(playerid) == IDroppedInfo[i][idWorld])
            return i;
    }

    return -1;
}

Item_Delete(itemid)
{
    if(itemid != -1 && IDroppedInfo[itemid][idList])
    {
        IDroppedInfo[itemid][idList] = 0;
        IDroppedInfo[itemid][idAmount] = 0;
        IDroppedInfo[itemid][idPosX] = 0.0;
        IDroppedInfo[itemid][idPosY] = 0.0;
        IDroppedInfo[itemid][idPosZ] = 0.0;
        IDroppedInfo[itemid][idInt] = 0;
        IDroppedInfo[itemid][idWorld] = 0;

        Item_StopMusic(itemid);
        DestroyDynamicObjectEx(IDroppedInfo[itemid][idObject]);
        DestroyDynamic3DTextLabelEx(IDroppedInfo[itemid][idLabel]);
        Iter_Remove(DroppedItems, itemid);
    }

    return 1;
}

Item_Pick(playerid, itemid)
{
    if(itemid != -1 && IDroppedInfo[itemid][idList])
    {
        if(Inventory_FreeID(playerid) == -1)return
            SunucuMesajiC(playerid, "Envanterinizde yeterli yer yok.");

        new listid = IDroppedInfo[itemid][idList];

        if(InventoryObjects[listid][invObject] == BOOMBOX_OBJECT && IsPlayerOnlineID(IDroppedInfo[itemid][idPlayer]) != playerid)
        {
            HataMesajiC(playerid, "Bu nesne size ait deðil.");
            if(PlayerInfo[playerid][pAdmin] < 10) return 1;
            else BasariMesaji(playerid, "Yetkili olduðunuz için yerdeki nesneye el koydunuz. (BBOID: %d)", IsPlayerOnlineID(IDroppedInfo[itemid][idPlayer]));
        }
        Inventory_AddItem(playerid, Inventory_FreeID(playerid), InventoryObjects[listid][invName], IDroppedInfo[itemid][idAmount], IDroppedInfo[itemid][idQuality]);

        Item_Delete(itemid);

        SunucuMesaji(playerid, "Yerden '%s' adlý eþyayý aldýn. /envanter yazarak envanterini kontrol edebilirsin.", InventoryObjects[listid][invName]);

        LogYaz(playerid, "/yerdenal", -1, listid, IDroppedInfo[itemid][idAmount]);
    }

    return 1;
}

Item_StartMusic(playerid, tmpLink[128])
{
    new itemid;

    if(!PlayerInfo[playerid][pRadioOptions])
    {
        if(GetPVarInt(playerid, "KulakliklaMuzik")) {
            if(BirlikteDinlenen[playerid] == -1) {
                PlayerAME(playerid, "telefonundan kulaklýkla müzik dinlemeye baþlar.");
                SetPVarString(playerid, "KulaklikLink", tmpLink);
                PlayAudioStreamForPlayer(playerid, tmpLink);
                SunucuMesajiC(playerid, "Kulaklýkla müzik dinlemeye baþladýnýz, menüyü görmek için /kulaklikmenu yazýn.");
            } else {
                PlayerAME(playerid, "telefonundan kulaklýkla müzik dinlemeye baþlar.");
                PlayerAME(BirlikteDinlenen[playerid], "telefondan kulaklýkla müzik dinlemeye baþlar.");
                PlayAudioStreamForPlayer(playerid, tmpLink);
                SetPVarString(playerid, "KulaklikLink", tmpLink);
                PlayAudioStreamForPlayer(BirlikteDinlenen[playerid], tmpLink);
                BirlikteDinlenen[playerid] = BirlikteDinlenen[playerid];
                BirlikteDinlenen[BirlikteDinlenen[playerid]] = playerid;
                SunucuMesajiC(playerid, "Kulaklýkla müzik dinlemeye baþladýnýz, menüyü görmek için /kulaklikmenu yazýn.");
                SunucuMesajiC(BirlikteDinlenen[playerid], "Kulaklýkla müzik dinlemeye baþladýnýz, (/dinlemebirak)");
            }
            return 1;
        }
        itemid = PlayerInfo[playerid][pSelectedItem];

        new boomboxid = Item_Nearest(playerid);

        if(boomboxid != -1 && Streamer_GetIntData(STREAMER_TYPE_OBJECT, IDroppedInfo[boomboxid][idObject], E_STREAMER_MODEL_ID) != BOOMBOX_OBJECT)boomboxid = -1;

        if(boomboxid == -1)
        {
            new buildingid = GetPlayerMenuBiz(playerid, true);

            if(buildingid == -1)return
                SunucuMesajiC(playerid, "Müzik kutusunun veya iþletmenin yakýnýnda deðilsin.");

            format(BuildingInfo[buildingid][bStereoLink], sizeof(tmpLink), tmpLink);
            BuildingInfo[buildingid][bStereo] = true;

            foreach(new i : Player) if(IsPlayerConnected(i) && GetPlayerBuilding(i, true) == buildingid)
                PlayAudioStreamForPlayer(i, tmpLink);

            return BasariMesaji(playerid, "Müziði kapatmak için /isletme komutunu yazýp \"Müzik Kapat\" seçeneðini kullanýn.");
        }

        if(strlen(IDroppedInfo[boomboxid][idLink]) <= 0)
            SendClientMessageEx(playerid, COLOR_WHITE, "\"/boombox kapat\" komutuyla müzik kutusunu durdurabilirsin.");

        format(IDroppedInfo[boomboxid][idLink], sizeof(tmpLink), tmpLink);
        if(IsValidDynamicArea(IDroppedInfo[boomboxid][idArea]) > 0) DestroyDynamicArea(IDroppedInfo[boomboxid][idArea]);

        if(!IDroppedInfo[boomboxid][Trisha]) IDroppedInfo[boomboxid][idArea] = CreateDynamicSphere(IDroppedInfo[boomboxid][idPosX], IDroppedInfo[boomboxid][idPosY], IDroppedInfo[boomboxid][idPosZ], 25.0,  IDroppedInfo[boomboxid][idWorld],  IDroppedInfo[boomboxid][idInt]);
        else if(IDroppedInfo[boomboxid][Trisha]) IDroppedInfo[boomboxid][idArea] = CreateDynamicSphere(IDroppedInfo[boomboxid][idPosX], IDroppedInfo[boomboxid][idPosY], IDroppedInfo[boomboxid][idPosZ], 80.0,  IDroppedInfo[boomboxid][idWorld],  IDroppedInfo[boomboxid][idInt]);

        Streamer_SetIntData(STREAMER_TYPE_AREA, IDroppedInfo[boomboxid][idArea], E_STREAMER_EXTRA_ID, boomboxid);

        foreach(new i : Player) if(IsPlayerConnected(i) && IsPlayerInDynamicArea(i, IDroppedInfo[boomboxid][idArea]) && GetPlayerState(i) == PLAYER_STATE_ONFOOT)
        {
            StopAudioStreamForPlayer(i);
            PlayAudioStreamForPlayer(i, IDroppedInfo[boomboxid][idLink], IDroppedInfo[boomboxid][idPosX], IDroppedInfo[boomboxid][idPosY], IDroppedInfo[boomboxid][idPosZ], 25.0, 1);
        }
        PlayerAME(playerid, "boomboxta çalan müziði deðiþtirdi.");
    }
    else
    {
        itemid = GetPlayerVehicleID(playerid);

        if(!IsPlayerInAnyVehicle(playerid) || GetPlayerVehicleSeat(playerid) > 1)return
            SunucuMesajiC(playerid, "Bir araçta veya ön koltuklarýnda deðilsin.");

        format(VehicleInfo[itemid][vStereoLink], sizeof(tmpLink), tmpLink);
        VehicleInfo[itemid][vStereo] = true;

        foreach(new i: Player) if(IsPlayerInAnyVehicle(i) && GetPlayerVehicleID(i) == itemid)
            PlayAudioStreamForPlayer(i, VehicleInfo[itemid][vStereoLink]);

        PlayerAME(playerid, "radyo istasyonunu deðiþtirir.");
        SunucuMesajiC(playerid, "/arac radyokapat komutuyla radyoyu kapatabilirsin.");
    }

    PlayerInfo[playerid][pSelectedItem] = -1;
    PlayerInfo[playerid][pRadioOptions] = 0;

    return 1;
}

Item_StopMusic(itemid)
{
    if(IsValidDynamicArea(IDroppedInfo[itemid][idArea]) > 0)
    {
        foreach(new i : Player) if(IsPlayerInDynamicArea(i, IDroppedInfo[itemid][idArea]) > 0)
            StopAudioStreamForPlayer(i);

        DestroyDynamicArea(IDroppedInfo[itemid][idArea]);
        IDroppedInfo[itemid][idArea] = 0;
    }

    return 1;
}

//Licenses System

Exam_End(playerid, bool:success)
{
    if(success)
    {
        SendClientMessage(playerid, COLOR_GREEN, "Eðitmen: {FFFFFF}Sýnavý tamamladýn, sonuç: Geçtin.");
        PlayerInfo[playerid][pLicenses][PlayerInfo[playerid][Type] - 1] = 1;
        SavePlayer(playerid);
    }
    else SendClientMessage(playerid, COLOR_GREEN, "Eðitmen: {FFFFFF}Sýnavý tamamladýn, sonuç: Geçemedin.");

    new type = PlayerInfo[playerid][Type] - 1;
    new vehicleid = PlayerInfo[playerid][Vehicle];

    SetPlayerPos(playerid, LicensesPoint[type][licenseX], LicensesPoint[type][licenseY], LicensesPoint[type][licenseZ]);
    DisablePlayerRaceCheckpoint(playerid);

    VehicleInfo[vehicleid][vFuel] = 0;
    VehicleInfo[vehicleid][vEngineHealth] = 0;
    VehicleInfo[vehicleid][vBatteryHealth] = 0;
    VehicleInfo[vehicleid][vHealth] = 0.0;
    VehicleInfo[vehicleid][vDoorHealth] = 0;
    VehicleInfo[vehicleid][vEngine] = 0;
    VehicleInfo[vehicleid][vFaction] = INVALID_VEHICLE_ID;
    VehicleInfo[vehicleid][vJob] = -1;
    VehicleInfo[vehicleid][vModel] = 0;
    VehicleInfo[vehicleid][vTemporary] = 0;
    VehicleInfo[vehicleid][vScript] = 0;
    VehicleInfo[vehicleid][vOwner] = -1;
    VehicleInfo[vehicleid][vWorld] = 0;
    VehicleInfo[vehicleid][vInterior] = 0;
    
    DestroyDynamic3DTextLabelEx(VehicleInfo[vehicleid][vSignText]);
    VehicleInfo[vehicleid][vCallSign] = false;
    
    DestroyVehicle(vehicleid);
    Iter_Remove(Vehicles, vehicleid);
    Exam_ResetVars(playerid);

    return 1;
}

Exam_ResetVars(playerid)
{
    PlayerInfo[playerid][Started] = false;
    PlayerInfo[playerid][Vehicle] = -1;
    PlayerInfo[playerid][Checkpoint] = 0;
    PlayerInfo[playerid][Type] = -1;

    return 1;
}

Exam_Init(playerid, type)
{
    PlayerInfo[playerid][Type] = type;

    TogglePlayerControllable(playerid, false);
    PlayerInfo[playerid][pFreezed] = 1;

    switch(PlayerInfo[playerid][Type])
    {
        case EXAM_TYPE_VEHICLES:
        {
            InterpolateCameraPos(playerid, 1106.767333, -1784.787231, 17.752008, 1124.609375, -1738.023071, 17.425840, 7500);
            InterpolateCameraLookAt(playerid, 1108.695922, -1789.340698, 17.012544, 1120.142578, -1740.245239, 17.094053, 7500);
        }
        case EXAM_TYPE_BOATS:
        {
            InterpolateCameraPos(playerid, 705.998229, -1764.273315, 24.726591, 710.644775, -1633.787353, 4.085257, 7500);
            InterpolateCameraLookAt(playerid, 706.047546, -1759.399536, 23.611059, 715.337707, -1635.431518, 3.562774, 7500);
        }
        case EXAM_TYPE_PLANES:
        {
            InterpolateCameraPos(playerid, 1136.458129, -1796.893920, 110.303176, 1901.133422, -2495.109619, 22.692070, 7500);
            InterpolateCameraLookAt(playerid, 1140.105468, -1800.269531, 109.753509, 1906.040893, -2495.717773, 21.952604, 7500);
        }
        default: return 1;
    }

    return SetTimerEx("Exam_ShowMenu", 5000, false, "d", playerid);
}

Exam_ShowMenu(playerid); public Exam_ShowMenu(playerid)
{
    switch(PlayerInfo[playerid][Type])
    {
        case EXAM_TYPE_VEHICLES:
            Dialog_Show(playerid, DialogLicense, DIALOG_STYLE_MSGBOX, "Verona Beach Sürücü Kursu", "Sürücü okuluna hoþgeldin\nKara araçlarý için ehliyet sýnavý ($500)\n\nDevam etmek istediðine emin misin?", "Devam", "Geri");

        case EXAM_TYPE_BOATS:
            Dialog_Show(playerid, DialogLicense, DIALOG_STYLE_MSGBOX, "Marina Deniz Ofisi", "Deniz okuluna hoþgeldin\nDeniz araçlarý için ehliyet sýnavý ($300)\n\nDevam etmek istediðine emin misin?", "Devam", "Geri");

        case EXAM_TYPE_PLANES:
            Dialog_Show(playerid, DialogLicense, DIALOG_STYLE_MSGBOX, "Los Santos Hava Limaný", "Hava okuluna hoþgeldin\nHava araçlarý için ehliyet sýnavý ($2500)\n\nDevam etmek istediðine emin misin?", "Devam", "Geri");
    }

    return 1;
}

//Anti Cheat System

AC_GivePlayerMoney(playerid, amount, cmd[])
{
    if(PlayerInfo[playerid][pHud])
    {
        if(amount < 0)
        {
            EksilenPara(playerid, amount);
        }
        else
        {
            ArtanPara(playerid, amount);
        }
    }
    
    PlayerInfo[playerid][pCash] += amount;

    ResetPlayerMoney(playerid);
    GivePlayerMoney(playerid, PlayerInfo[playerid][pCash]);

    LogYaz(playerid, cmd, -1, amount);
    SaveCharacter(playerid);

    return 1;
}
OAC_GivePlayerMoney(playerid, amount)
{
    if(PlayerInfo[playerid][pHud])
    {
        if(amount < 0)
        {
            EksilenPara(playerid, amount);
        }
        else
        {
            ArtanPara(playerid, amount);
        }
    }
    
    PlayerInfo[playerid][pCash] += amount;

    ResetPlayerMoney(playerid);
    GivePlayerMoney(playerid, PlayerInfo[playerid][pCash]);

//    LogYaz(playerid, cmd, -1, amount);
    SaveCharacter(playerid);

    return 1;
}

AC_SetPlayerVirtualWorld(playerid, worldid)
{
    SetPlayerVirtualWorld(playerid, worldid);
    CallLocalFunction("OnPlayerVirtualWorldChange", "dd", playerid, worldid); return 1;
}

AC_SetVehicleHealth(vehicleid, Float:health)
{
    if(health < 350.0) health = 350.0;
    if(VehicleInfo[vehicleid][vMaxHealth] < 1000.0) VehicleInfo[vehicleid][vMaxHealth] = 1000.0;
    if(health >= 1000.0) health = VehicleInfo[vehicleid][vMaxHealth];

    VehicleInfo[vehicleid][vHealth] = health;

    return SetVehicleHealth(vehicleid, health);
}

AC_Detect(playerid, cheat_code, &cheat_warnings_limit = 0)
{
    static const cheat_names[MAX_CHEAT_CODES][64] =
    {
        "Airbreak", "Cam Hack", "Zýrh Hilesi", "Hile Komutu", "Can Hilesi", "Tamir Hilesi", "Jetpack Hilesi",
        "Silah Hilesi", "Crash Hilesi", "Araç Hilesi", "Silent Aim", "Mermi Hilesi", "Iþýnlanma Hilesi"
    };

    PlayerInfo[playerid][pCheatWarnings][cheat_code]++;

    switch(cheat_code)
    {
        case AC_COMMAND_CODE, AC_INVISIBLE_CODE, AC_AIRBREAK_CODE, AC_JETPACK_CODE: cheat_warnings_limit = 0;
        case AC_CARHACK_CODE, AC_CRASHER_CODE: cheat_warnings_limit = 1;
        case AC_SPAWNEDGUNS_CODE, AC_AMMO_CODE: cheat_warnings_limit = 2;
        case AC_VEHICLEREPAIR_CODE, AC_TELEPORT_CODE: cheat_warnings_limit = 3;
        case AC_HEALTH_CODE, AC_ARMOUR_CODE, AC_SILENTAIM_CODE: cheat_warnings_limit = 5;
    }

    if(PlayerInfo[playerid][pCheatWarnings][cheat_code] >= cheat_warnings_limit)
    {
        if(PlayerInfo[playerid][pCheatNotified] && PlayerInfo[playerid][pAdmin] < 10 && cheat_code != 3) SendAdminAlert(true, COLOR_YELLOW, "AdmWarn: %s (%d) kiþisi %s kullanýyor olabilir. [UYARI %d]", ReturnRoleplayName(playerid), playerid, cheat_names[cheat_code], PlayerInfo[playerid][pCheatWarnings][cheat_code]);

        new count_admin;

        foreach(new i : Player) if(IsPlayerConnected(i) && PlayerInfo[i][pLogged] && PlayerInfo[i][pAdmin] > SUPPORTER && !PlayerInfo[i][pAFKTime])
            count_admin++;

        if(SunucuBilgi[CheatKick] || !count_admin && PlayerInfo[playerid][pAdmin] < 10) KickPlayer(playerid, "SA-RP", cheat_names[cheat_code]);
    }

    return 1;
}

AC_ResetTimer(playerid)
{
    KillTimer(PlayerInfo[playerid][pCheatTimer]);
    PlayerInfo[playerid][pCheatTimer] = SetTimerEx("CheatTimer", GetPlayerPing(playerid) * 25, false, "d", playerid);

    return 1;
}

AC_SetPlayerCheckpoint(playerid, Float:x, Float:y, Float:z, Float:radius, bool:balikci = false)
{
    new tmpCP;
    GetPlayerPos(playerid, PlayerInfo[playerid][CheckpointX], PlayerInfo[playerid][CheckpointY], PlayerInfo[playerid][CheckpointZ]);
    PlayerInfo[playerid][pTeleportLastTick] = GetTickCount();
    PlayerInfo[playerid][CheckpointEnabled] = true;
    if(!balikci)
        tmpCP = SetPlayerCheckpoint(playerid, x, y, z, radius);
    else
        PlayerInfo[playerid][pBalikCheckpoint] = SetPlayerCheckpoint(playerid, x, y, z, radius);
    return tmpCP;
}

AC_DisablePlayerCheckpoint(playerid)
{
    PlayerInfo[playerid][CheckpointX] = 0.0;
    PlayerInfo[playerid][CheckpointY] = 0.0;
    PlayerInfo[playerid][CheckpointZ] = 0.0;
    PlayerInfo[playerid][pTeleportLastTick] = 0;
    DisablePlayerCheckpoint(playerid);
    PlayerInfo[playerid][CheckpointEnabled] = false;

    return 1;
}

AC_GetPlayerHealth(playerid, &Float:hp)
{
    hp = GetPVarFloat(playerid, "health");
}

AC_SetPlayerHealth(playerid, Float:hp)
{
    SetPVarFloat(playerid, "health", hp);
    My_SetPlayerHealth(playerid, hp);
    AC_ResetTimer(playerid);
    SetPlayerHealth(playerid, hp);

    return 1;
}

AC_GetPlayerArmour(playerid, &Float:ap)
{
    ap = GetPVarFloat(playerid, "armour");
}

AC_SetPlayerArmour(playerid, Float:ap)
{
    SetPVarFloat(playerid, "armour", ap);
    My_SetPlayerArmour(playerid, ap);
    AC_ResetTimer(playerid);

    SetPlayerArmour(playerid, ap);

    return 1;
}

AC_SetPlayerAmmo(playerid, gunid, ammo)
{
    if(gunid == 19 || gunid == 20 || gunid == 21)return 1;

    new slot = GetWeaponSlot(gunid);
    new strname[32];

    if(PlayerInfo[playerid][pScriptedGun][slot] != gunid)return 1;

    SetPlayerAmmo(playerid, gunid, ammo);
    AC_ResetTimer(playerid);

    if(ammo < 1)
    {
        PlayerInfo[playerid][pScriptedAmmo][slot] = 0;
        PlayerInfo[playerid][pScriptedGun][slot] = 0;
    }
    else PlayerInfo[playerid][pScriptedAmmo][slot] = ammo;

    format(strname, sizeof(strname), "ammo%d", slot);
    SetPVarInt(playerid, strname, ammo);

    return 1;
}

AC_GivePlayerWeapon(playerid, gunid, ammo)
{
    if(gunid == 19 || gunid == 20 || gunid == 21)return 1;
    if(SilahYapabilirMi(playerid, gunid) == 0) return HataMesajiC(playerid, "Ayný tip silahtan üzerinizde zaten var.");
    new slot = GetWeaponSlot(gunid);
    PlayerInfo[playerid][pScriptedGun][slot] = gunid;
    PlayerInfo[playerid][pScriptedAmmo][slot] += ammo;

    My_GivePlayerWeapon(playerid, gunid, ammo);
    AC_ResetTimer(playerid);
    return 1;
}

AC_GetPlayerWeapon(playerid)
{
    new gunid = GetPlayerWeapon(playerid);
    new slot = GetWeaponSlot(gunid);

    new strname[32];
    format(strname, sizeof(strname), "weapon%d", slot);

    if(PlayerInfo[playerid][pScriptedGun][slot] != gunid || GetPVarInt(playerid, strname) != gunid)return 0;

    return gunid;
}

AC_GetPlayerAmmo(playerid)
{
    new gunid = AC_GetPlayerWeapon(playerid);

    if(!gunid)return 0;

    new slot = GetWeaponSlot(gunid);
    new weapon, ammo;
    new strname[32];

    GetPlayerWeaponData(playerid, slot, weapon, ammo);

    format(strname, sizeof(strname), "ammo%d", slot);
    if(PlayerInfo[playerid][pScriptedAmmo][slot] < ammo || GetPVarInt(playerid, strname) < ammo) CheatTimer(playerid);

    return ammo;
}

AC_PlayerHasWeapon(playerid, gunid)
{
    if(!gunid) return 1;

    new slot = GetWeaponSlot(gunid);
    new str[32];

    format(str, sizeof(str), "weapon%d", slot);

    if(PlayerInfo[playerid][pScriptedGun][slot] == gunid && GetPVarInt(playerid, str) == gunid)return 1;

    return 0;
}

AC_PlayerHasAmmo(playerid, gunid) {
    if(!gunid) return 0;
    new ammo;
    new slot = GetWeaponSlot(gunid);
    new str[32];

    format(str, sizeof(str), "weapon%d", slot);

    if(PlayerInfo[playerid][pScriptedGun][slot] == gunid && GetPVarInt(playerid, str) == gunid)
        ammo = PlayerInfo[playerid][pScriptedAmmo];
    return ammo;
}

AC_ResetPlayerWeapons(playerid)
{
    My_ResetPlayerWeapons(playerid);

    for(new i; i < 12; i++)
    {
        PlayerInfo[playerid][pScriptedGun][i] = 0;
        PlayerInfo[playerid][pScriptedAmmo][i] = 0;
    }

    return 1;
}

AC_RemovePlayerWeapon(playerid, gunid)
{
    if(gunid < 0 || gunid > 50)return 0;

    new weapons[12];
    new ammo[12];

    for(new i; i < 12; i++)
        GetPlayerWeaponData(playerid, i, weapons[i], ammo[i]);

    AC_ResetPlayerWeapons(playerid);

    for(new w; w < 12; w++)
    {
        if(weapons[w] == gunid)
        {
            PlayerInfo[playerid][pScriptedGun][w] = 0;
            PlayerInfo[playerid][pScriptedAmmo][w] = 0;
            continue;
        }

        AC_GivePlayerWeapon(playerid, weapons[w], ammo[w]);
    }

    return 1;
}

//Tolls System

Toll_Unlock(i)
{
    DestroyDynamic3DTextLabelEx(GateBilgi[i][GiseLabel]);

    new mesaj[64];
    format(mesaj, 64, "/gise ($%d)", SunucuBilgi[TollTax]);

    GateBilgi[i][GiseLabel] = CreateDynamic3DTextLabel(mesaj, COLOR_WHITE, GateBilgi[i][gateClosePX], GateBilgi[i][gateClosePY], GateBilgi[i][gateClosePZ]+0.6, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0, -1);
    GateBilgi[i][GiseDurum] = false;

    return 1;
}

Toll_Lock(i)
{
    DestroyDynamic3DTextLabelEx(GateBilgi[i][GiseLabel]);

    CloseToll(i);

    GateBilgi[i][GiseDurum] = true;
    GateBilgi[i][GiseLabel] = CreateDynamic3DTextLabel("Giþe {FF6347}kapalý{FFFFFF}.", COLOR_WHITE, GateBilgi[i][gateClosePX], GateBilgi[i][gateClosePY], GateBilgi[i][gateClosePZ]+0.6, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0, -1);

    SetTimerEx("Toll_Unlock", 1000 * 60 * 10, false, "d", i);

    return 1;
}

//Taxes System

Taxes_Update()
{
    mysql_format(ourConnection, queryx, sizeof(queryx), "UPDATE taxes SET trucker_tax = '%d', toll_tax = '%d', heal_tax = '%d', payday = '%d', ev = '%d', isletme = '%d', arac = '%d', npp = '%d', msatis = '%d', malis = '%d', casino = '%d', oylar = '%d|%d|%d|%d|%d|' WHERE 1", //, cadi = '%s', ctype = '%d', cstatus = '%d', cprice = '%d', cpool = '%d' WHERE 1",
    SunucuBilgi[TruckerTax],
    SunucuBilgi[TollTax],
    SunucuBilgi[HealTax],
    SunucuBilgi[Payday],
    SunucuBilgi[ESSY],
    SunucuBilgi[ISSY],
    SunucuBilgi[ASSY],
    SunucuBilgi[NPPayday],
    SunucuBilgi[MobilyaSatinAlma],
    SunucuBilgi[MobilyaSatma],
    SunucuBilgi[CasinoCevir],
    SunucuBilgi[VerilenOy][0],
    SunucuBilgi[VerilenOy][1],
    SunucuBilgi[VerilenOy][2],
    SunucuBilgi[VerilenOy][3],
    SunucuBilgi[VerilenOy][4]);
/*  SunucuBilgi[CekilisAdi],
    SunucuBilgi[CekilisTuru],
    SunucuBilgi[CekilisDurum],
    SunucuBilgi[BiletUcreti],
    SunucuBilgi[CekilisHavuzu]);*/

    mysql_tquery(ourConnection, queryx);
    return 1;
}

Taxex_ShowMenu(playerid)
{
    new string[500];

    format(string, sizeof(string), "Giþe ($%d)\nTedavi Ücreti ($%d)\nKamyon Þöförü ($%d)\nPayday ($%d)\nEv Sisteme Satýþ (Yüzde %d)\nÝþletme Sisteme Satýþ (Yüzde %d)\nAraç Sisteme Satýþ (Yüzde %d)\nSA-Point Payday (%d)\nMobilya Oyuncuya Satýþ ($%d)\nMobilya Sisteme Satýþ ($%d)\nCasino Çevir ($%d)",
    SunucuBilgi[TollTax],
    SunucuBilgi[HealTax],
    SunucuBilgi[TruckerTax],
    SunucuBilgi[Payday],
    SunucuBilgi[ESSY],
    SunucuBilgi[ISSY],
    SunucuBilgi[ASSY],
    SunucuBilgi[NPPayday],
    SunucuBilgi[MobilyaSatinAlma],
    SunucuBilgi[MobilyaSatma],
    SunucuBilgi[CasinoCevir]);

    return Dialog_Show(playerid, DialogTaxesList, DIALOG_STYLE_LIST, "SA:RP - Ekonomi Sistemi", string, "Düzenle", "Ýptal");
}

//Crate System

Crate_FreeID()
{
    if(Iter_Free(Crates) == -1) foreach(new x : Crates)
    {
        if(Crate_InUse(x) || CrateInfo[x][crVehicleID] != -1)continue;

        Crate_Delete(x);
    }

    return Iter_Free(Crates);
}

Crate_SellHirsizlik(playerid, crateid)
{
    new j = Pickup_Nearest(playerid, ELEMENT_COMPANY);
    new amount = CompanyInfo[j][cPrice];

    ApplyAnimation(playerid, "CARRY", "putdwn", 4.1, 0, 0, 0, 0, 0, 1);
    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
    RemovePlayerAttachedObject(playerid, 9);

    OAC_GivePlayerMoney(playerid, amount);
    SunucuMesaji(playerid, "Koli $%d karþýlýðýnda satýldý.", amount);
    PlayerInfo[playerid][pHirsizlikGelir] += amount;

    CompanyInfo[j][stok]++;
    Company_RefreshText(j);

    Crate_Delete(crateid);

    PlayerInfo[playerid][pCarryCrate] = -1;
    return 1;
}

Crate_Sell(playerid, crateid)
{
    new j = Pickup_Nearest(playerid, ELEMENT_COMPANY);
    new amount = CompanyInfo[j][cPrice];
    new kamyoncugelirikayit = PlayerInfo[playerid][KamyoncuGeliri];

    ApplyAnimation(playerid, "CARRY", "putdwn", 4.1, 0, 0, 0, 0, 0, 1);
    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
    RemovePlayerAttachedObject(playerid, 9);

    new truckernerf;
    
    if(PlayerInfo[playerid][pPremium] == 5) truckernerf = 500000;
    else if(PlayerInfo[playerid][pPremium] == 4) truckernerf = 300000;
    else truckernerf = 240000;

    if(CrateInfo[crateid][crCompany] == CompanyInfo[j][cReference]) return HataMesaji(playerid, "Koliyi satýn aldýðýn yere geri satamazsýn.");
    
    if(PlayerInfo[playerid][KamyoncuGeliri] >= truckernerf)
    {
        OAC_GivePlayerMoney(playerid, amount - amount * 55 / 100);
        SunucuMesaji(playerid, "Koli $%d karþýlýðýnda satýldý.", amount - amount * 55 / 100);
        PlayerInfo[playerid][KamyoncuGeliri] = kamyoncugelirikayit + amount;
        PlayerInfo[playerid][pKamyoncuYetenegi] ++;
    }
    else
    {
        OAC_GivePlayerMoney(playerid, amount);
        SunucuMesaji(playerid, "Koli $%d karþýlýðýnda satýldý.", amount);
        PlayerInfo[playerid][KamyoncuGeliri] = kamyoncugelirikayit + amount;
        PlayerInfo[playerid][pKamyoncuYetenegi] ++;
    }
    
    if(PlayerInfo[playerid][pKamyoncuYetenegi] == 300)
        BasariMesajiC(playerid, "Kamyonculuk seviyen 1 olarak güncellendi. Koli taþýmaya devam!");
        
    if(PlayerInfo[playerid][pKamyoncuYetenegi] == 600)
        BasariMesajiC(playerid, "Kamyonculuk seviyen 2 olarak güncellendi. Koli taþýmaya devam!");

    if(PlayerInfo[playerid][pKamyoncuYetenegi] == 1200)
    {
        BasariMesajiC(playerid, "Kamyonculuk seviyen 3 olarak güncellendi. Koli taþýmaya devam!");
        SunucuMesajicp(playerid, "gizli mesaj: bunun daha üstü yokmuþ yalnýz.");
    }

    CompanyInfo[j][stok]++;
    Company_RefreshText(j);

    Crate_Delete(crateid);

    PlayerInfo[playerid][pCarryCrate] = -1;

    return 1;
}

Crate_SellIsletme(playerid, crateid)
{
    new industry = CrateInfo[crateid][crCompany];
    new kamyoncumaasi = CompanyInfo[industry][cPrice] * 2;

    ApplyAnimation(playerid, "CARRY", "putdwn", 4.1, 0, 0, 0, 0, 0, 1);
    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
    RemovePlayerAttachedObject(playerid, 9);

    if(PlayerInfo[playerid][pJob] != 0)
    {
        OAC_GivePlayerMoney(playerid, kamyoncumaasi);
        SunucuMesaji(playerid, "Koli $%d karþýlýðýnda satýldý.", kamyoncumaasi);
    }
    else
    {
        OAC_GivePlayerMoney(playerid, kamyoncumaasi);
        SunucuMesaji(playerid, "Koli $%d karþýlýðýnda satýldý.", kamyoncumaasi);
    }

    Crate_Delete(crateid);

    PlayerInfo[playerid][pCarryCrate] = -1;

    return 1;
}


Crate_Delete(x)
{
    CrateInfo[x][crExists] = 0;
    CrateInfo[x][crType] = 0;
    CrateInfo[x][crAmount] = 0;
    CrateInfo[x][crPosX] = 0.0;
    CrateInfo[x][crPosY] = 0.0;
    CrateInfo[x][crPosZ] = 0.0;
    CrateInfo[x][crInterior] = 0;
    CrateInfo[x][crWorld] = 0;
    DestroyDynamic3DTextLabelEx(CrateInfo[x][crLabel]);
    DestroyDynamicObjectEx(CrateInfo[x][crObject]);
    CrateInfo[x][crPlayer] = -1;
    CrateInfo[x][crVehicleID] = -1;

    Iter_SafeRemove(Crates, x, x);

    return 1;
}

Crate_InUse(crateid)
{
    if(CrateInfo[crateid][crVehicleID] != -1 && IsValidVehicle(CrateInfo[crateid][crVehicleID]) > 0)
        return 1;

    foreach(new i : Player) if(IsPlayerConnected(i) && PlayerInfo[i][pCarryCrate] == crateid && GetPlayerSpecialAction(i) == SPECIAL_ACTION_CARRY)
        return 1;

    return 0;
}

//MDC System

MDC_ShowWeaponLicenseLogs(playerid, id)
{
    // new query[512];

    mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT weapon_license_logs.*, characters.char_name FROM weapon_license_logs JOIN characters ON characters.id = weapon_license_logs.officer_id WHERE subject_id = '%d'", id);
    mysql_tquery(ourConnection, queryx, "OnWLicenseShowLogSearch", "d", playerid);

    return 1;
}

MDC_SearchBiz(playerid, item[])
{
    new bizid = -1;

    if(IsNumeric(item) && strval(item) != -1)
    {
        bizid = strval(item);

        if(bizid < 0 || bizid > MAX_BUILDINGS || !BuildingInfo[bizid][bExists]) bizid = -1;
    }
    else foreach(new b : Buildings) if(BuildingInfo[b][bExists] && strcmp(BuildingInfo[b][bName], item, true) == 0)
    {
        bizid = b; break;
    }

    if(bizid == -1)return
        SunucuMesajiC(playerid, "Ýþletme bulunamadý.");

    return Dialog_Show(playerid, DialogNull, DIALOG_STYLE_MSGBOX, "{FFFFFF}Ýþletme Ara", "{FFFFFF}%s\n\n{2b63cb}Sahip: {FFFFFF}%s\n{2b63cb}ID: {FFFFFF}%d", "Ýptal", "", BuildingInfo[bizid][bName], GetCharacterName(BuildingInfo[bizid][bOwner]), bizid);
}

MDC_SearchHouse(playerid, item)
{
    if(item < 0 || item > MAX_HOUSES || !HouseInfo[item][hExists])return
        SunucuMesajiC(playerid, "Ev bulunamadý.");

    return Dialog_Show(playerid, DialogNull, DIALOG_STYLE_MSGBOX, "{FFFFFF}Evi ara", "{2b63cb}%d {FFFFFF}%s\n\n{2b63cb}Sahip: {FFFFFF}%s", "Ýptal", "", item, House_GetAddress(item), GetCharacterName(HouseInfo[item][hOwner]));
}

MDC_SearchPhoneNumber(playerid, number)
{
    // new query[150];

    mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT * FROM phones WHERE number = '%d'", number);
    mysql_tquery(ourConnection, queryx, "OnMDCNumberSearch", "dd", playerid, number);

    return 1;
}

MDC_SearchCitizen(playerid, item[])
{
    // new query[256];
    new id = -1;

    if(IsNumeric(item) && strval(item) != -1)
    {
        id = strval(item);

        if(!IsPlayerConnected(id) || !PlayerInfo[id][pLogged])return
            HataMesajiC(playerid, "Geçersiz ID.");

        mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT * FROM characters WHERE id = '%d'", PlayerInfo[id][pID]);
    }
    else mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT * FROM characters WHERE char_name = '%e' AND deleted = 0 AND banned = 0 AND deleted_at IS NULL", item);

    mysql_tquery(ourConnection, queryx, "OnMDCCitizenSearch", "d", playerid);

    return 1;
}

MDC_SearchVehiclePlate(playerid, item[])
{
    // new query[128];

    mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT * FROM vehicles WHERE plate = '%e'", item);
    mysql_tquery(ourConnection, queryx, "OnMDCPlateSearch", "d", playerid);

    return 1;
}

//Phone System

Phone_HangupCall(playerid)
{
    if(PlayerInfo[playerid][pMobile] == -1 && PlayerInfo[playerid][pIncomingCall] == -1)return 1;

    new bool:closedCall;
    if(GetPVarInt(playerid, "KulakliklaMuzik")) {
        new link[128];
        GetPVarString(playerid, "KulaklikLink", link, 128);
        PlayAudioStreamForPlayer(playerid, link);
        SunucuMesajiC(playerid, "Müziðiniz kaldýðý yerden devam ediyor.");
        if(BirlikteDinlenen[playerid] != -1) {
            PlayAudioStreamForPlayer(BirlikteDinlenen[playerid], link);
            SunucuMesajiC(BirlikteDinlenen[playerid], "Müziðiniz kaldýðý yerden devam ediyor.");
        }
    } else if(BirlikteDinlenen[playerid] != -1) {
        new link[128];
        GetPVarString(playerid, "KulaklikLink", link, 128);
        PlayAudioStreamForPlayer(playerid, link);
        SunucuMesajiC(playerid, "Müziðiniz kaldýðý yerden devam ediyor.");
    }
    foreach(new x : Player) if(IsPlayerConnected(x) && PlayerInfo[x][pLogged])
    {
        if(x == PlayerInfo[playerid][AradigimKisi])
        {
            PlayerInfo[playerid][AradigimKisi] = -1;
            if(playerid != x) Phone_HangupCall(x);
            PlayerInfo[playerid][AramaYanitlandi] = false;
            PlayerInfo[x][AramaYanitlandi] = false;
        }
        if(PlayerInfo[playerid][pMobile] != x && Inventory_HasPhone(x, PlayerInfo[playerid][pMobile]) == -1 && PlayerInfo[x][pIncomingCall] != playerid)continue;
        if(GetPVarInt(x, "TelefonuCaliyor") == 1) {
            SendClientMessageEx(x, COLOR_GREY, "Arama sonlandýrýldý.");
            SendClientMessageEx(playerid, COLOR_GREY, "Aramayý sonlandýrdýn.");
            DeletePVar(x, "TelefonuCaliyor");
            PlayerInfo[x][pIncomingCall] = -1;
            PlayerInfo[x][pMobile] = -1;
            KillTimer(PlayerInfo[x][pCallTime]);
            PlayerInfo[x][pUsingPP] = -1;
            PlayerInfo[x][pTelefonTick] = 0;
            PlayerInfo[x][AramaYanitlandi] = false;
        }
        if(GetPVarInt(playerid, "RehberdeVar")) {
            DeletePVar(playerid, "RehberdeVar");
            DeletePVar(x, "RehberdeVar");
        }
        if(GetPVarInt(x, "RehberdeVar"))
            DeletePVar(x, "RehberdeVar");
        if(PlayerInfo[x][pMobile] == playerid)
        {
            if(GetPlayerSpecialAction(x) == SPECIAL_ACTION_USECELLPHONE)
            {
                SetPlayerSpecialAction(x, SPECIAL_ACTION_STOPUSECELLPHONE);
                TogglePlayerControllable(x, true);
                PlayerInfo[x][pFreezed] = 0;
            }

            RemovePlayerAttachedObject(x, 8);
            PlayerInfo[x][pIncomingCall] = -1;
            PlayerInfo[x][pMobile] = -1;
            KillTimer(PlayerInfo[x][pCallTime]);
            PlayerInfo[x][pUsingPP] = -1;
            if(playerid != x)
            {
                PlayerAME(x, "cep telefonunu cebine yerleþtirir.");
                PlayerInfo[x][pKeyTick] = GetTickCount();
            }
            PlayerInfo[x][pTelefonTick] = 0;
            PlayerInfo[x][AramaYanitlandi] = false;
        }

        closedCall = true; break;
    }

    if(!closedCall) foreach(new pid : PayPhones) if(PayPhoneInfo[pid][cNumber] == PlayerInfo[playerid][pMobile])
    {
        DestroyDynamicPickup(PayPhoneInfo[pid][cDialObject]);
        PayPhoneInfo[pid][cDialing] = 0; break;
    }

    SetPlayerSpecialAction(playerid,SPECIAL_ACTION_STOPUSECELLPHONE);
    RemovePlayerAttachedObject(playerid, 8);
    
    if((GetTickCount() - PlayerInfo[playerid][pKeyTick]) > 1500)
        PlayerAME(playerid, "çaðrýyý sonlandýrýr.");
        
    PlayerInfo[playerid][pKeyTick] = GetTickCount();
    TogglePlayerControllable(playerid, true);
    PlayerInfo[playerid][pTelefonTick] = 0;
    DeletePVar(playerid, "TelefonuCaliyor");
    PlayerInfo[playerid][pFreezed] = 0;
    TogglePlayerControllable(playerid, true);
    DeletePVar(playerid, "ArayanNumara");
    DeletePVar(playerid, "AradigiNumara");
    DeletePVar(PlayerInfo[playerid][pMobile], "ArayanNumara");
    DeletePVar(PlayerInfo[playerid][pMobile], "AradigiNumara");
    PlayerInfo[playerid][pMobile] = -1;
    PlayerInfo[playerid][pSpeakerPhone] = 0;
    PlayerInfo[playerid][pEmergency] = 0;
    PlayerInfo[playerid][pGovernment] = 0;
    KillTimer(PlayerInfo[playerid][pCallTime]);
    PlayerInfo[playerid][pUsingPP] = -1;
    PlayerInfo[playerid][pIncomingCall] = -1;
    PlayerInfo[playerid][AramaYanitlandi] = false;
    return 1;
}

Phone_SendSMS(playerid, inputtext[])
{
    if(PlayerInfo[playerid][pCuffed]) return HataMesajiC(playerid, "Kelepçeliyken telefonunuzu kullanamazsýnýz.");
    new itemid = PlayerInfo[playerid][pPhoneID];
    new t_phoneid = Inventory_IsBurnerPhone(playerid, itemid);
    new number = PlayerInfo[playerid][pNumber];

    if((!t_phoneid && PlayerInfo[playerid][pCash] <= 0) || (t_phoneid && PlayerInfo[playerid][pInvCredit][itemid] <= 0))return
        SunucuMesajiC(playerid, "SMS atacak kredin yok.");

    if(number == POLICE_NUMBER || number == MECHANIC_NUMBER || number == TAXI_NUMBER || number == GOVERNMENT_NUMBER)return
        SunucuMesajiC(playerid, "Bu numara mesaj kabul etmiyor.");

    foreach(new x : PayPhones)
    {
        if(!PayPhoneInfo[x][cExists])continue;

        if(PayPhoneInfo[x][cNumber] == PlayerInfo[playerid][pNumber])return
            SunucuMesajiC(playerid, "Bu numara mesaj kabul etmiyor.");
    }

    if(t_phoneid) return HataMesaji(playerid, "Tek kullanýmlýk telefonlardan SMS gönderemezsin.");

    format(PlayerInfo[playerid][pText], 256, inputtext);

    new x = Phone_GetOwner(number);
    PlayerAME(playerid, "telefonundan bir mesaj gönderir.");
    if(x != -1)
    {
        mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT name FROM phonebooks WHERE owner_number = '%d' AND number = '%d'", number, PlayerInfo[playerid][pInvAmount][itemid]);
        mysql_tquery(ourConnection, queryx, "OnSendSMSPlayerSearch", "dddd", playerid, x, itemid, number);
    }

    mysql_format(ourConnection, queryx, sizeof(queryx), "INSERT INTO phone_logs (caller_number, receiver_number, text, created_at, type) VALUES ('%d', '%d', '%e', NOW(), '%d')", PlayerInfo[playerid][pInvAmount][itemid], number, PlayerInfo[playerid][pText], TYPE_SMS);
    mysql_tquery(ourConnection, queryx);

    mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT name FROM phonebooks WHERE owner_number = '%d' AND number = '%d'", PlayerInfo[playerid][pInvAmount][itemid], number);
    mysql_tquery(ourConnection, queryx, "OnSendSMSPlayerContactSearch", "dddd", playerid, itemid, number, t_phoneid);

    return 1;
}

Phone_GetOwner(number)
{
    foreach(new x : Player)
    {
        new phoneid = Inventory_HasPhone(x, number);

        if(!IsPlayerConnected(x) || phoneid == -1 || !PlayerInfo[x][pInvExtra][phoneid])continue;

        return x;
    }

    return -1;
}

Phone_CallInit(playerid, number)
{
    if(PlayerInfo[playerid][pCuffed]) return HataMesajiC(playerid, "Kelepçeliyken telefonunuzu kullanamazsýnýz.");
    if(GetPVarInt(playerid, "KulakliklaMuzik")) {
        SunucuMesajiC(playerid, "Arama yaptýðýnýz için telefondan kulaklýkla dinlediðiniz müzik geçici olarak durduruldu.");
        StopAudioStreamForPlayer(playerid);
        if(BirlikteDinlenen[playerid] != -1) {
            SunucuMesajiC(BirlikteDinlenen[playerid], "Telefon sahibi arama yaptýðý için telefondan kulaklýkla dinlediðiniz müzik geçici olarak durduruldu.");
            StopAudioStreamForPlayer(BirlikteDinlenen[playerid]);
        }
    } else if(BirlikteDinlenen[playerid] != -1) {
        SunucuMesajiC(playerid, "Arama yaptýðýnýz için telefondan kulaklýkla dinlediðiniz müzik geçici olarak durduruldu.");
        StopAudioStreamForPlayer(playerid);
    }
    // new query[256];
    new j = PlayerInfo[playerid][pUsingPP];
    new itemid = PlayerInfo[playerid][pPhoneID];
    new burnerID = Inventory_IsBurnerPhone(playerid, itemid);

    if(number < 10 || number > 999999)
    {
        TogglePlayerControllable(playerid, 1);
        return SunucuMesajiC(playerid, "Girilen numara geçersiz.");
    }

    if(PlayerInfo[playerid][pMobile] != -1)
        return SunucuMesajiC(playerid, "Arama esnasýnda telefon sisteminin diðer fonksiyonlarýndan yararlanamazsýnýz.");

    if(number != POLICE_NUMBER && number != GOVERNMENT_NUMBER && (!burnerID && PlayerInfo[playerid][pCash] <= 0) || (burnerID && PlayerInfo[playerid][pInvCredit][itemid] <= 0))
    {
        PlayerInfo[playerid][pUsingPP] = -1;
        PlayerInfo[playerid][pPhoneID] = -1;
        TogglePlayerControllable(playerid, 1);
        return HataMesajiC(playerid, "Arama yapacak telefon kredin yok.");
    }

    if(PlayerInfo[playerid][pIncomingCall] != -1)
    {
        new id = PlayerInfo[playerid][pIncomingCall];

        if(!IsPlayerConnected(id) || !PlayerInfo[id][pLogged] || Inventory_HasPhone(playerid, PlayerInfo[id][pMobile]) == -1) PlayerInfo[playerid][pIncomingCall] = -1;

        if(PlayerInfo[playerid][pIncomingCall] != -1) return HataMesajiC(playerid, "Çaðrýdayken baþkasýný arayamazsýn.");
    }

    if(GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DUCK) SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE);
    SetPlayerAttachedObject(playerid, 8, PlayerInfo[playerid][pTelefonKilifi], 6, 0.102, 0.012, 0.022, -112.7, 0, 175.1, 1, 1, 1);
    PlayerAME(playerid, "telefonun tuþlarýna basar ve telefonu kulaðýna tutar.");

    PlayerInfo[playerid][pMobile] = number;

    PlayerInfo[playerid][AramaYanitlandi] = false;
    if(j != -1)
    {
        SunucuMesaji(playerid, "%d numarasýný arýyorsun.", number);
        return Phone_CallStart(playerid);
    }

    mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT name FROM phonebooks WHERE owner_number = '%d' AND number = '%d'", PlayerInfo[playerid][pInvAmount][itemid], number);
    mysql_tquery(ourConnection, queryx, "OnPlayerCallContactSearch", "dd", playerid, number);

    return 1;
}

Phone_CallStart(playerid)
{
    new number = PlayerInfo[playerid][pMobile];
    new itemid = PlayerInfo[playerid][pPhoneID];
    new j = PlayerInfo[playerid][pUsingPP];
    new playerNumber = (j == -1) ?  PlayerInfo[playerid][pInvAmount][itemid] : PayPhoneInfo[j][cNumber];

    PlayerPlaySound(playerid, 3600, 0.0, 0.0, 0.0);

    if(number == POLICE_NUMBER)
    {
        SendClientMessageEx(playerid, COLOR_GREY, "911 Operatörü: 9-1-1, hangi acil servisi talep ediyorsunuz? (Polis/Ambulans/Ýtfaiye)");
        return PlayerInfo[playerid][pEmergency] = 1;
    }
    if(number == GOVERNMENT_NUMBER) {
        SendClientMessageEx(playerid, COLOR_GREY, "Government Operatörü: Los Santos City, size nasýl yardýmcý olabilirim?");
        return PlayerInfo[playerid][pGovernment] = 1;
    }
    else if(number == MECHANIC_NUMBER)
    {
        PlayerInfo[playerid][pRequiredService] = 1;

        SendJobMessage(1, "[SANTRAL] %d numarasý tamirci istiyor(/cagrikabul %d yazarak çaðrýyý kabul edebilirsin)", playerNumber, PlayerInfo[playerid][pID]);
        SendClientMessageEx(playerid, COLOR_GREY, "Operatör: Tamirci isteðiniz aktif çalýþanlara iletildi.");

        return Phone_HangupCall(playerid);
    }
    else if(number == TAXI_NUMBER)
    {
        PlayerInfo[playerid][pRequiredService] = 2;

        SendJobMessage(2, "[SANTRAL] %d numarasý taksi istiyor(/cagrikabul %d yazarak çaðrýyý kabul edebilirsin)", playerNumber, PlayerInfo[playerid][pID]);
        SendClientMessageEx(playerid, COLOR_GREY, "Operatör: Taksici isteðiniz aktif çalýþanlara iletildi.");

        return Phone_HangupCall(playerid);
    }

    foreach(new x : PayPhones)
    {
        if(!PayPhoneInfo[x][cExists] || x == j)continue;
        ArayanNumara[x] = number;
        if(PayPhoneInfo[x][cNumber] == number) foreach(new id : Player)
        {
            if(!IsPlayerConnected(id) || !PlayerInfo[id][pLogged]) continue;

            if(IsPlayerInRangeOfPoint(id, 30.0, PayPhoneInfo[x][cPosX], PayPhoneInfo[x][cPosY], PayPhoneInfo[x][cPosZ]) > 0)
            {
                SendClientMessageEx(id, COLOR_PURPLE, "** Telefon kulübesinden ses geliyor. **");
                PlayerPlaySound(j, 23000, 0.0, 0.0, 0.0);
            }
            PayPhoneInfo[x][cDialing] = 1;
            return PayPhoneInfo[x][cDialObject] = Pickup_Create(ELEMENT_KULUBE, x, 19197, 1, PayPhoneInfo[x][cPosX]+0.03, PayPhoneInfo[x][cPosY], PayPhoneInfo[x][cPosZ]+2.3, 0, 0);
        }
        else continue;
    }

    new x = Phone_GetOwner(number);

    if(x == -1 || (x != -1 && PlayerInfo[x][pMobile] != -1))
    {
        SunucuMesajiC(playerid, "Aradýðýn numara meþgul ya da kapalý.");
        TogglePlayerControllable(playerid, true);
        PlayerInfo[playerid][pFreezed] = 0;
        return Phone_HangupCall(playerid);
    }

    if((x != -1 && PlayerInfo[x][pIncomingCall] != -1) || x == playerid) {
        SunucuMesajiC(playerid, "Aradýðýn numara meþgul ya da kapalý.");
        TogglePlayerControllable(playerid, true);
        PlayerInfo[playerid][pFreezed] = 0;
        return Phone_HangupCall(playerid);
    }

    mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT name FROM phonebooks WHERE owner_number = '%d' AND number = '%d'", number, playerNumber);
    mysql_tquery(ourConnection, queryx, "OnPlayerStartCallContactSearch", "dddd", playerid, number, playerNumber, x);

    PlayerInfo[playerid][pCallTimer] = SetTimerEx("TelefonKapat", 60000, false, "dd", playerid, x);
    return 1;
}

//Request System

Request_Reset(playerid)
{
    // new query[128];

    mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT * FROM staffrequests WHERE owner_id = '%d'", playerid);
    mysql_tquery(ourConnection, queryx, "OnResetRequestsSearch", "d", playerid);

    return 1;
}

Request_Delete(playerid, id)
{
    // new query[128];

    mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT * FROM staffrequests WHERE id = '%d'", id);
    mysql_tquery(ourConnection, queryx, "OnDeleteRequestSearch", "dd", playerid, id);

    return 1;
}

Request_Accept(playerid, id)
{
    // new query[128];

    mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT * FROM staffrequests WHERE id = '%d'", id);
    mysql_tquery(ourConnection, queryx, "OnAcceptRequestSearch", "dd", playerid, id);

    return 1;
}

Request_Kategori(playerid, id)
{
    // new query[128];

    mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT * FROM staffrequests WHERE id = '%d'", id);
    mysql_tquery(ourConnection, queryx, "RequestDegistir", "dd", playerid, id);

    return 1;
}

Request_ForumaYolla(playerid, id)
{
    // new query[128];

    mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT * FROM staffrequests WHERE id = '%d'", id);
    mysql_tquery(ourConnection, queryx, "RequestForumaYolla", "dd", playerid, id);

    return 1;
}

Request_Refuse(playerid, id)
{
    // new query[128];

    mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT * FROM staffrequests WHERE id = '%d'", id);
    mysql_tquery(ourConnection, queryx, "OnRefuseRequestSearch", "dd", playerid, id);

    return 1;
}

RaporCevap(playerid, id)
{
    // new query[128];

    mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT * FROM staffrequests WHERE id = '%d'", id);
    mysql_tquery(ourConnection, queryx, "RaporYanitlama", "dd", playerid, id);

    return 1;
}

//Textdraws System


TextHit_Show(playerid)
{
    PlayerTextDrawShow(playerid, PlayerInfo[playerid][pTextdraws][2]);
    PlayerTextDrawSetString(playerid, PlayerInfo[playerid][pTextdraws][2], "KALAN HP: ~w~-");

    return 1;
}

TextHit_Hide(playerid)
{
    PlayerTextDrawHide(playerid, PlayerInfo[playerid][pTextdraws][2]);
    PlayerTextDrawSetString(playerid, PlayerInfo[playerid][pTextdraws][2], "SIFRE KIRMA: ~y~-");

    return 1;
}

TextHit_Update(playerid, Float:hp)
{
    new string[128];

    format(string, sizeof(string), "~y~KALAN HP: ~w~%1.f", hp);
    PlayerTextDrawSetString(playerid, PlayerInfo[playerid][pTextdraws][2], string);

    return 1;
}

TextStealVeh_Show(playerid)
{
    PlayerTextDrawShow(playerid, PlayerInfo[playerid][pTextdraws][2]);
    PlayerTextDrawSetString(playerid, PlayerInfo[playerid][pTextdraws][2], "SIFRE KIRMA: ~w~-");

    PlayerTextDrawShow(playerid, PlayerInfo[playerid][pTextdraws][3]);
    PlayerTextDrawSetString(playerid, PlayerInfo[playerid][pTextdraws][3], "KALAN SANIYE: ~w~-");

    return 1;
}

TextStealVeh_Hide(playerid)
{
    PlayerTextDrawHide(playerid, PlayerInfo[playerid][pTextdraws][2]);
    PlayerTextDrawSetString(playerid, PlayerInfo[playerid][pTextdraws][2], "SIFRE KIRMA: ~y~-");

    PlayerTextDrawHide(playerid, PlayerInfo[playerid][pTextdraws][3]);
    PlayerTextDrawSetString(playerid, PlayerInfo[playerid][pTextdraws][3], "KALAN SANIYE: ~y~-");

    return 1;
}

TextStealVeh_Update(playerid, word[], time)
{
    new string[128];

    format(string, sizeof(string), "~y~SIFRE KIRMA: ~w~%s", word);
    PlayerTextDrawSetString(playerid, PlayerInfo[playerid][pTextdraws][2], string);

    format(string, sizeof(string), "~y~KALAN SANIYE: ~w~%d", time);
    PlayerTextDrawSetString(playerid, PlayerInfo[playerid][pTextdraws][3], string);

    return 1;
}

//Player Objects System

PlayerObjects_HasObject(playerid, str[])
{
    new ob_var;

    for(new i, is = sizeof(PlayerObjectsList); i < is; i++) if(strcmp(PlayerObjectsList[i][obName], str, true) == 0)
    {
        ob_var = PlayerObjectsList[i][obObject]; break;
    }

    for(new i; i < MAX_PLAYER_OBJECTS; i++)
    {
        if(PlayerInfo[playerid][pObjectWearing][i] == -1) continue;
        if(PlayerInfo[playerid][pObjectWearingVar][i] == ob_var) return 1;
    }

    return 0;
}

PlayerObjects_SetObject(playerid, p_slot, slot)
{
    // new query[128];

    mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT * FROM user_objects WHERE character_id = '%d' AND slot = '%d'", PlayerInfo[playerid][pID], p_slot);
    mysql_tquery(ourConnection, queryx, "OnUserObjectSetSearch", "ddd", playerid, p_slot, slot);

    return 1;
}

PlayerObjects_UpdatePos(playerid, p_slot, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz, Float:sx, Float:sy, Float:sz)
{
    // new query[512];

    if(sx > 10) sx = 10;
    if(sy > 10) sy = 10;
    if(sz > 10) sz = 10;

    mysql_format(ourConnection, queryx, sizeof(queryx), "UPDATE user_objects SET offset_x = '%f', offset_y = '%f', offset_z = '%f', rot_x = '%f', rot_y = '%f', rot_z = '%f', scale_x = '%f', scale_y = '%f', scale_z = '%f' WHERE character_id = '%d' AND slot = '%d'", x, y, z, rx, ry, rz, sx, sy, sz, PlayerInfo[playerid][pID], p_slot);
    mysql_tquery(ourConnection, queryx);

    return 1;
}

PlayerObjects_CheckWear(playerid, p_slot)
{
    new slot = -1;
    // new query[256];

    for(new i; i < 10; i++) if(IsPlayerAttachedObjectSlotUsed(playerid, i) <= 0 && !PlayerInfo[playerid][pObjectSlotOccupied][i])
    {
        slot = i; break;
    }

    if(slot == -1)return
        SunucuMesajiC(playerid, "Boþ aksesuar slotun bulunmuyor.");

    mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT * FROM user_objects WHERE character_id = '%d' AND slot = '%d'", PlayerInfo[playerid][pID], p_slot);
    mysql_tquery(ourConnection, queryx, "OnPObjectExists", "ddd", playerid, p_slot, slot);

    return 1;
}

PlayerObjects_UpdateBone(playerid, p_slot, bone)
{
    mysql_format(ourConnection, queryx, sizeof(queryx), "UPDATE user_objects SET bone = '%d' WHERE character_id = '%d' AND slot = '%d'", bone, PlayerInfo[playerid][pID], p_slot);
    mysql_tquery(ourConnection, queryx);

    return 1;
}

PlayerObjects_ShowCategories(playerid)
{
    new buildingid = GetPlayerBuilding(playerid, true);

    if(buildingid != -1 && BuildingInfo[buildingid][bType] == CLOTHING)
    {
        new string[512];
        for(new i; i < MAX_PLAYER_OBJECTS; i++) format(string, sizeof(string), "%s%s\t%d\n", string, PlayerObjects_GetName(playerid, i), i);
        Dialog_Show(playerid, DialogAksesuar, DIALOG_STYLE_TABLIST_HEADERS, "Aksesuar satýn alacaðýnýz slotu seçin:", "Aksesuar\tSlot\n%s", "Düzenle", "Geri", string);
    }
    else if(IsPlayerInRangeOfPoint(playerid, 5.0, 1096.650512, -1435.518798, 15.787182))
    {
        new string[512];
        for(new i; i < MAX_PLAYER_OBJECTS; i++) format(string, sizeof(string), "%s%s\t%d\n", string, PlayerObjects_GetName(playerid, i), i);
        Dialog_Show(playerid, DialogAksesuar, DIALOG_STYLE_TABLIST_HEADERS, "Aksesuar satýn alacaðýnýz slotu seçin:", "Aksesuar\tSlot\n%s", "Düzenle", "Geri", string);

    }
    else HataMesajiC(playerid, "Bu komutu sadece kýyafet dükkanlarýnda kullanabilirsin.");
    return 1;
}
Dialog:DialogAksesuar(playerid, response, listitem, inputtext[])
{
    if(!response) return 1;

    PlayerInfo[playerid][pObjectSelected] = listitem;

    new string[350], count;

    for(new x = 0; x < sizeof(PlayerObjectsList); x ++)
    {
        if(PlayerObjectsList[x][obFaction] == -1 || PlayerObjectsList[x][obFaction] == PlayerInfo[playerid][pFaction])
        {
            if(PlayerObjectsList[x][obFaction] != 0 && PlayerObjectsList[x][obFaction] != 2)
            {
                string[count] = PlayerObjectsList[x][obObject];
                PlayerInfo[playerid][pObjectsID][count] = x;
                count++;
            }
        }
    }

    ShowModelSelectionMenuEx(playerid, string, count, "AKSESUAR", TAKSESUAR, 16.0, 0.0, -55.0);
    return 1;
}

PlayerObjects_GetName(playerid, p_slot)
{
    mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT var FROM user_objects WHERE character_id = '%d' AND slot = '%d'", PlayerInfo[playerid][pID], p_slot);
    mysql_query(ourConnection, queryx);

    new str[32] = "Bos", var;
    if(cache_num_rows() == 0) return str;

    cache_get_value_int(0, "var", var);
    format(str, sizeof(str), PlayerObjectsList[var][obName]);

    return str;
}

//Vehicles System

Vehicle_SetPlate(vehicleid)
{
    new plate[13];

    format(plate, sizeof(plate), (VehicleInfo[vehicleid][vUnregistered])  ? ("_") : ("%s"), VehicleInfo[vehicleid][vPlate]);

    return SetVehicleNumberPlate(vehicleid, plate);
}

Vehicle_RespawnNF(vehicleid)
{
    SetVehicleToRespawn(vehicleid);
    Vehicle_Respray(vehicleid);
    VehicleInfo[vehicleid][vEngine] = 0;
    VehicleInfo[vehicleid][vLights] = 0;
    //VehicleInfo[vehicleid][vFuel] = 100;
    if(VehicleInfo[vehicleid][vFuel] < 0) VehicleInfo[vehicleid][vFuel] = 0;
    SetVehicleParamsEx(vehicleid, VehicleInfo[vehicleid][vEngine], VehicleInfo[vehicleid][vLights], VEHICLE_PARAMS_OFF, VehicleInfo[vehicleid][vLocked], VehicleInfo[vehicleid][vBonnet], VehicleInfo[vehicleid][vBoot], VehicleInfo[vehicleid][vObje]);
    SetVehiclePos(vehicleid, VehicleInfo[vehicleid][vSpawnPosX], VehicleInfo[vehicleid][vSpawnPosY], VehicleInfo[vehicleid][vSpawnPosZ]);
    SetVehicleZAngle(vehicleid, VehicleInfo[vehicleid][vSpawnPosA]);
    ChangeVehicleColor(vehicleid, VehicleInfo[vehicleid][vFirstColor], VehicleInfo[vehicleid][vSecondColor]);

    if(VehicleInfo[vehicleid][vPaintjob] != 3) ChangeVehiclePaintjob(vehicleid, VehicleInfo[vehicleid][vPaintjob]);

    for(new i; i < 4; i++)
    {
        AracYolcu[vehicleid][i] = -1;
        AracKoltuk[vehicleid][i] = 0;
    }
    return 1;
}

Vehicle_Respawn(vehicleid)
{
    SetVehicleToRespawn(vehicleid);
    Vehicle_Respray(vehicleid);
    VehicleInfo[vehicleid][vEngine] = 0;
    VehicleInfo[vehicleid][vLights] = 0;
    VehicleInfo[vehicleid][vFuel] = 100;
    SetVehicleParamsEx(vehicleid, VehicleInfo[vehicleid][vEngine], VehicleInfo[vehicleid][vLights], VEHICLE_PARAMS_OFF, VehicleInfo[vehicleid][vLocked], VehicleInfo[vehicleid][vBonnet], VehicleInfo[vehicleid][vBoot], VehicleInfo[vehicleid][vObje]);
    SetVehiclePos(vehicleid, VehicleInfo[vehicleid][vSpawnPosX], VehicleInfo[vehicleid][vSpawnPosY], VehicleInfo[vehicleid][vSpawnPosZ]);
    SetVehicleZAngle(vehicleid, VehicleInfo[vehicleid][vSpawnPosA]);
    ChangeVehicleColor(vehicleid, VehicleInfo[vehicleid][vFirstColor], VehicleInfo[vehicleid][vSecondColor]);

    if(VehicleInfo[vehicleid][vPaintjob] != 3) ChangeVehiclePaintjob(vehicleid, VehicleInfo[vehicleid][vPaintjob]);

    for(new i; i < 4; i++)
    {
        AracYolcu[vehicleid][i] = -1;
        AracKoltuk[vehicleid][i] = 0;
    }
    return 1;
}

Vehicle_Respawn2(vehicleid)
{
    SetVehicleToRespawn(vehicleid);
    Vehicle_Respray2(vehicleid);
    VehicleInfo[vehicleid][vEngine] = 0;
    VehicleInfo[vehicleid][vLights] = 0;
    VehicleInfo[vehicleid][vFuel] = 100;
    SetVehicleParamsEx(vehicleid, VehicleInfo[vehicleid][vEngine], VehicleInfo[vehicleid][vLights], VEHICLE_PARAMS_OFF, VehicleInfo[vehicleid][vLocked], VehicleInfo[vehicleid][vBonnet], VehicleInfo[vehicleid][vBoot], VehicleInfo[vehicleid][vObje]);
    SetVehiclePos(vehicleid, VehicleInfo[vehicleid][vSpawnPosX], VehicleInfo[vehicleid][vSpawnPosY], VehicleInfo[vehicleid][vSpawnPosZ]);
    SetVehicleZAngle(vehicleid, VehicleInfo[vehicleid][vSpawnPosA]);
    ChangeVehicleColor(vehicleid, VehicleInfo[vehicleid][vFirstColor], VehicleInfo[vehicleid][vSecondColor]);

    if(VehicleInfo[vehicleid][vPaintjob] != 3) ChangeVehiclePaintjob(vehicleid, VehicleInfo[vehicleid][vPaintjob]);

    for(new i; i < 4; i++)
    {
        AracYolcu[vehicleid][i] = -1;
        AracKoltuk[vehicleid][i] = 0;
    }
    return 1;
}

Vehicle_Respray(vehicleid)
{
    static const levelHealth[5] = {120, 300, 500, 1000, 999999};

    new levelDoor = VehicleInfo[vehicleid][vDoorLevel];

    VehicleInfo[vehicleid][vRespraying] = 3;
    VehicleInfo[vehicleid][vDoorHealth] = levelHealth[levelDoor];
    RepairVehicle(vehicleid);
    AC_SetVehicleHealth(vehicleid, VehicleInfo[vehicleid][vHealth]);

    return 1;
}
Vehicle_Respray2(vehicleid)
{
    static const levelHealth[5] = {120, 300, 500, 1000, 999999};

    new levelDoor = VehicleInfo[vehicleid][vDoorLevel];

    VehicleInfo[vehicleid][vRespraying] = 3;
    VehicleInfo[vehicleid][vDoorHealth] = levelHealth[levelDoor];
    RepairVehicle(vehicleid);
    AC_SetVehicleHealth(vehicleid, VehicleInfo[vehicleid][vMaxHealth]);

    return 1;
}

Vehicle_Buy(playerid)
{
    new vehicleid = PlayerInfo[playerid][pDealerVehicle];
    new Float:x, Float:y, Float:z, Float:a;

    SetCameraBehindPlayer(playerid);
    AC_SetPlayerVirtualWorld(playerid, 0);
    SetVehicleVirtualWorld(vehicleid, 0);
    PutPlayerInVehicle(playerid, VehicleInfo[vehicleid][vScript], 0);

    GetVehiclePos(vehicleid, x, y, z);
    GetVehicleZAngle(vehicleid, a);

    if(GetVehicleModel(vehicleid) == 591 || GetVehicleModel(vehicleid) ==435)
        SetPlayerPos(playerid, x+2, y+2, z+1);

    if(PlayerInfo[playerid][pCash] < PlayerInfo[playerid][pVehiclePrice])return 1;

    AC_GivePlayerMoney(playerid, -PlayerInfo[playerid][pVehiclePrice], "/satinal arac");
//    Faction_GovernmentCash(PlayerInfo[playerid][pVehiclePrice]);

    new color_one = PlayerInfo[playerid][pSelectedColors][0];
    new color_two = PlayerInfo[playerid][pSelectedColors][1];

    VehicleInfo[vehicleid][vOwner] = PlayerInfo[playerid][pID];
    VehicleInfo[vehicleid][vPrice] = PlayerInfo[playerid][pVehiclePrice];
    VehicleInfo[vehicleid][vScript] = PlayerInfo[playerid][pDealerVehicle];
    VehicleInfo[vehicleid][vFirstColor] = color_one; // CarColors[]
    VehicleInfo[vehicleid][vSecondColor] = color_two; // CarColors[]
    ChangeVehicleColor(vehicleid, VehicleInfo[vehicleid][vFirstColor], VehicleInfo[vehicleid][vSecondColor]);
    VehicleInfo[vehicleid][vModel] = GetVehicleModel(vehicleid);
    VehicleInfo[vehicleid][vSpawnPosX] = x;
    VehicleInfo[vehicleid][vSpawnPosY] = y;
    VehicleInfo[vehicleid][vSpawnPosZ] = z;
    VehicleInfo[vehicleid][vSpawnPosA] = a;
    VehicleInfo[vehicleid][vHealth] = 1000.0;
    VehicleInfo[vehicleid][vMaxHealth] = 1000.0;
    VehicleInfo[vehicleid][vFaction] = INVALID_VEHICLE_ID;
    VehicleInfo[vehicleid][vJob] = -1;
    VehicleInfo[vehicleid][vTemporary] = 0;
    VehicleInfo[vehicleid][vFuel] = 100;
    VehicleInfo[vehicleid][vLocked] = 0;
    VehicleInfo[vehicleid][vEngine] = 1;
    VehicleInfo[vehicleid][vEngineHealth] = 1000.0;
    VehicleInfo[vehicleid][vBatteryHealth] = 1000.0;
    VehicleInfo[vehicleid][vDoorHealth] = 120.0;
    VehicleInfo[vehicleid][vAlarm] = 0;
    VehicleInfo[vehicleid][vDoorLevel] = 0;
    VehicleInfo[vehicleid][vPaintjob] = 3;
    //VehicleInfo[vehicleid][vRehine][0] = -1;
    //VehicleInfo[vehicleid][vRehine][1] = -1;
    //VehicleInfo[vehicleid][vRehine][2] = -1;
    VehicleInfo[vehicleid][vCeset][0] = -1;
    VehicleInfo[vehicleid][vCeset][1] = -1;
    VehicleInfo[vehicleid][vCeset][2] = -1;
    SetVehicleParamsCarWindows(vehicleid, 0, 0, 0, 0);
    GetVehicleParamsCarWindows(vehicleid, VehicleInfo[vehicleid][vWindows][0], VehicleInfo[vehicleid][vWindows][1], VehicleInfo[vehicleid][vWindows][2], VehicleInfo[vehicleid][vWindows][3]);

    TogglePlayerControllable(playerid, true);
    PlayerInfo[playerid][pFreezed] = 0;

    // new query[256];

    mysql_format(ourConnection, queryx, sizeof(queryx), "INSERT INTO vehicles (plate, model, price, owner_id, color0, color1, pos_x, pos_y, pos_z, pos_a, health, spawned) VALUES ('%e', '%d', '%d', '%d', '%d', '%d', '%f', '%f', '%f', '%f', '1000.0', '1')",
    VehicleInfo[vehicleid][vPlate],
    VehicleInfo[vehicleid][vModel],
    VehicleInfo[vehicleid][vPrice],
    VehicleInfo[vehicleid][vOwner],
    VehicleInfo[vehicleid][vFirstColor],
    VehicleInfo[vehicleid][vSecondColor],
    VehicleInfo[vehicleid][vSpawnPosX],
    VehicleInfo[vehicleid][vSpawnPosY],
    VehicleInfo[vehicleid][vSpawnPosZ],
    VehicleInfo[vehicleid][vSpawnPosA]);

    mysql_tquery(ourConnection, queryx, "OnQueryFinished", "dd", VehicleInfo[vehicleid][vScript], THREAD_CREATE_VEHICLE);

    VehicleInfo[vehicleid][vVergi] = 0;

    SunucuMesaji(playerid, "%s model aracý $%d karþýlýðýnda satýn aldýn.", GetVehicleModelName(VehicleInfo[vehicleid][vModel]), VehicleInfo[vehicleid][vPrice]);
    SunucuMesajiC(playerid, "/arac park komutuyla aracýna park noktasý belirleyebilirsin.");

    PlayerInfo[playerid][pVehiclePrice] = 0;
    PlayerInfo[playerid][pDealerVehicle] = 0;
    PlayerInfo[playerid][pBuyingVehicle] = 0;
    PlayerInfo[playerid][pSelectedColors][0] = -1;
    PlayerInfo[playerid][pSelectedColors][1] = -1;
    VehicleInfo[vehicleid][vFuel] = 100;
    VehicleInfo[vehicleid][vKMGosteren] = 0;
    VehicleInfo[vehicleid][vHurda] = 0;
    return 1;
}

Vehicle_DegraseComponentHP(vehicleid)
{
    if(!IsValidVehicle(vehicleid) || VehicleInfo[vehicleid][vFaction] != INVALID_VEHICLE_ID || VehicleInfo[vehicleid][vJob] != -1 || VehicleInfo[vehicleid][vTemporary])return 1;

    new Float:vehicle_health_loss, Float:vehicleHP;

    GetVehicleHealth(vehicleid, vehicleHP);

    vehicle_health_loss = 1000.0 - vehicleHP;

    if(vehicleHP > 650)return 1;

    if(vehicleHP < 650 && vehicleHP > 550)
    {
        if(VehicleInfo[vehicleid][vEngineHealth] - vehicle_health_loss/125 < 0) VehicleInfo[vehicleid][vEngineHealth] = 0;
        else VehicleInfo[vehicleid][vEngineHealth] -= vehicle_health_loss/125;

        if(VehicleInfo[vehicleid][vBatteryHealth] - vehicle_health_loss/150 < 0) VehicleInfo[vehicleid][vBatteryHealth] = 0;
        else VehicleInfo[vehicleid][vBatteryHealth] -= vehicle_health_loss/150;
    }
    else if(vehicleHP < 549 && vehicleHP > 390)
    {
        if(VehicleInfo[vehicleid][vEngineHealth] - vehicle_health_loss/100 < 0) VehicleInfo[vehicleid][vEngineHealth] = 0;
        else VehicleInfo[vehicleid][vEngineHealth] -= vehicle_health_loss/100;

        if(VehicleInfo[vehicleid][vBatteryHealth] - vehicle_health_loss/125 < 0) VehicleInfo[vehicleid][vBatteryHealth] = 0;
        else VehicleInfo[vehicleid][vBatteryHealth] -= vehicle_health_loss/125;
    }
    return 1;
}

Vehicle_RepairPrice(vehicleid)
{
    new Float:vehicleHealth, Float:repairPrice;

    GetVehicleHealth(vehicleid, vehicleHealth);

    repairPrice = (VehicleInfo[vehicleid][vMaxHealth] - vehicleHealth) * 2;

    return floatround(repairPrice);
}

Vehicle_Despawn(vid)
{
    // new query[256];

    mysql_format(ourConnection, queryx, sizeof(queryx), "UPDATE vehicles SET spawned = 0 WHERE id = '%d'", VehicleInfo[vid][vID]);
    mysql_tquery(ourConnection, queryx);

    GetVehicleHealth(vid, VehicleInfo[vid][vHealth]);
    SaveVehicle(vid);
    
    VehicleInfo[vid][vKiralayan] = -1;
    VehicleInfo[vid][vKiralik] = -1;
    foreach(new i: Player) {
        if(!PlayerInfo[i][pLogged])continue;
        if(!IsPlayerInAnyVehicle(i))continue;
        if(GetPlayerVehicleID(i) != vid)continue;
        if(!PlayerInfo[i][pEmniyetKemeri])continue;
        pc_cmd_arackemer(i);
    }
    if(VehicleInfo[vid][vStereo]) foreach(new i : Player) if(IsPlayerConnected(i) && GetPlayerVehicleID(i) == vid)
        StopAudioStreamForPlayer(i);

    if(VehicleInfo[vid][vSirenOn] == true)
    {
        DestroyDynamicObjectEx(VehicleInfo[vid][vSirenObject]);
        VehicleInfo[vid][vSirenOn] = false;
    }

    if(VehicleInfo[vid][vCallSign] == true)
    {
        DestroyDynamic3DTextLabelEx(VehicleInfo[vid][vSignText]);
        VehicleInfo[vid][vCallSign] = false;
    }

    Vehicle_ClearCargo(vid);
    VehicleInfo[vid][vSigortaSeviyesi] = 0;
    for(new t; t < MAX_TRUNK_ITEMS; t++)
    {
        VehicleInfo[vid][vInvList][t] = 0;
        VehicleInfo[vid][vInvAmount][t] = 0;
        VehicleInfo[vid][vInvExtra][t] = 0;
    }

    for(new j; j < MAX_TUNING_COMPONENTS; j++)
        VehicleInfo[vid][vTuning][j] = 0;

    for(new p; p < MAX_CAR_WEAPONS; p++)
        VehicleInfo[vid][vSlotUsed][p] = 0;

    VehicleInfo[vid][vID] = -1;
    VehicleInfo[vid][vOwner] = -1;
    VehicleInfo[vid][vModel] = 0;
    VehicleInfo[vid][vFirstColor] = 0;
    VehicleInfo[vid][vSecondColor] = 0;
    VehicleInfo[vid][vSpawnPosX] = 0.0;
    VehicleInfo[vid][vSpawnPosY] = 0.0;
    VehicleInfo[vid][vSpawnPosZ] = 0.0;
    VehicleInfo[vid][vSpawnPosA] = 0.0;
    VehicleInfo[vid][vFaction] = INVALID_VEHICLE_ID;
    format(VehicleInfo[vid][vPlate], 8, "N/A");
    VehicleInfo[vid][vLocked] = 0;
    VehicleInfo[vid][vEngine] = 0;
    VehicleInfo[vid][vBoot] = 0;
    VehicleInfo[vid][vBonnet] = 0;
    VehicleInfo[vid][vLights] = 0;
    VehicleInfo[vid][vScript] = 0;
    VehicleInfo[vid][vTemporary] = 0;
    VehicleInfo[vid][vHealth] = 0.0;
    VehicleInfo[vid][vMaxHealth] = 1000.0;
    VehicleInfo[vid][vEngineHealth] = 0.0;
    VehicleInfo[vid][vBatteryHealth] = 0.0;
    VehicleInfo[vid][vDoorHealth] = 0;
    VehicleInfo[vid][vDamages][0] = 0;
    VehicleInfo[vid][vDamages][1] = 0;
    VehicleInfo[vid][vDamages][2] = 0;
    VehicleInfo[vid][vDamages][3] = 0;
    VehicleInfo[vid][vFuel] = 0;
    if(VehicleInfo[vid][vSandik] != -1) {
        SandikSil(VehicleInfo[vid][vSandik]);
        VehicleInfo[vid][vSandik] = -1;
    }
    VehicleInfo[vid][vPrice] = 0;
    VehicleInfo[vid][vCallSign] = false;
    VehicleInfo[vid][vComponents] = 0;
    VehicleInfo[vid][vAutovelox] = 0;
    VehicleInfo[vid][vWindows][0] = 0;
    VehicleInfo[vid][vWindows][1] = 0;
    VehicleInfo[vid][vWindows][2] = 0;
    VehicleInfo[vid][vWindows][3] = 0;
    VehicleInfo[vid][vInterior] = 0;
    VehicleInfo[vid][vWorld] = 0;
    VehicleInfo[vid][vStereo] = false;
    format(VehicleInfo[vid][vStereoLink], 8, "N/A");
    VehicleInfo[vid][vImpounded] = 0;
    VehicleInfo[vid][vSpawnExpires] = 0;
    VehicleInfo[vid][vRespraying] = 0;
    VehicleInfo[vid][vJob] = -1;
    VehicleInfo[vid][vShowingCargo] = false;
    VehicleInfo[vid][vUnregistered] = 0;
    VehicleInfo[vid][vVergi] = 0;
    foreach(new id: Tezgahlar) {
        if(StandInfo[id][sExists]) {
            if(StandInfo[id][saracID] == vid) {
                foreach(new i: Player) if(PlayerInfo[i][pLogged]) {
                    if(PlayerInfo[i][pID] == StandInfo[id][sID]) {
                        PlayerInfo[i][pActigiTezgah] = -1;
                        break;
                    }
                }
                StandInfo[id][sExists] = 0;
                StandInfo[id][sID] = -1;
                format(StandInfo[id][sKuran], MAX_PLAYER_NAME, "Yok");
                StandInfo[id][sModel] = 0;
                DestroyDynamicObjectEx(StandInfo[id][sObje]);
                StandInfo[id][sPosX] = 0.0;
                StandInfo[id][sPosY] = 0.0;
                StandInfo[id][sPosZ] = 0.0;
                StandInfo[id][sRotX] = 0.0;
                StandInfo[id][sRotY] = 0.0;
                StandInfo[id][sRotZ] = 0.0;
                StandInfo[id][sMasaModel] = 0;
                DestroyDynamicObjectEx(StandInfo[id][sMasaObje]);
                StandInfo[id][sMasaPosX] = 0.0;
                StandInfo[id][sMasaPosY] = 0.0;
                StandInfo[id][sMasaPosZ] = 0.0;
                StandInfo[id][sMasaRotX] = 0.0;
                StandInfo[id][sMasaRotY] = 0.0;
                StandInfo[id][sMasaRotZ] = 0.0;
                if(IsValidDynamic3DTextLabel(StandInfo[id][sLabel]))
                    DestroyDynamic3DTextLabelEx(StandInfo[id][sLabel]);
                format(StandInfo[id][sLabelText], 128, "");
                StandInfo[id][sArabali] = false;
                for(new i; i < 3; i++) {
                    StandInfo[id][sCalisan][i] = -1;
                    StandInfo[id][sUrunFiyati][i] = 0;
                    format(StandUrunInfo[id][i], 80, "Yok");
                }
                StandInfo[id][saracID] = -1;
                Iter_Remove(Tezgahlar, id);
                break;
            }
        }
    }
    DestroyVehicle(vid);
    Iter_SafeRemove(Vehicles, vid, vid);

    return 1;
}

Vehicle_IsOwnerLead(playerid, vehicleid, bool:onlyOwner)
{
    if(VehicleInfo[vehicleid][vOwner] == PlayerInfo[playerid][pID] || PlayerInfo[playerid][pAdmin] >= 7)
        return 1;

    if(onlyOwner == false)
    {
        if(PlayerInfo[playerid][pFaction] == VehicleInfo[vehicleid][vFaction] && VehicleInfo[vehicleid][vFaction] != INVALID_VEHICLE_ID)
            return 1;

        if(PlayerInfo[playerid][pJob] == VehicleInfo[vehicleid][vJob] && VehicleInfo[vehicleid][vJob] != -1)
            return 1;

        if(HasPlayerUserKey(playerid, KEY_VEHICLE, VehicleInfo[vehicleid][vID]) > 0)
            return 1;
    }

    return 0;
}

Vehicle_IsOwner(playerid, vehicleid, bool:onlyOwner)
{
    if(VehicleInfo[vehicleid][vOwner] == PlayerInfo[playerid][pID] || PlayerInfo[playerid][pAdminDuty] > 9 || PlayerInfo[playerid][pAdminDuty])
        return 1;

    if(onlyOwner == false)
    {
        if(PlayerInfo[playerid][pFaction] == VehicleInfo[vehicleid][vFaction] && VehicleInfo[vehicleid][vFaction] != INVALID_VEHICLE_ID)
            return 1;

        if(PlayerInfo[playerid][pJob] == VehicleInfo[vehicleid][vJob] && VehicleInfo[vehicleid][vJob] != -1)
            return 1;

        if(HasPlayerUserKey(playerid, KEY_VEHICLE, VehicleInfo[vehicleid][vID]) > 0)
            return 1;
            
        if(VehicleInfo[vehicleid][vKiralik] > 0 && VehicleInfo[vehicleid][vKiralayan] == PlayerInfo[playerid][pID]) // kiraladim aq
            return 1;
    }

    return 0;
}

Vehicle_ShowList(playerid, id)
{
    // new query[128];

    mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT * FROM vehicles WHERE owner_id = '%d'", PlayerInfo[id][pID]);
    return mysql_tquery(ourConnection, queryx, "OnVehicleShowListSearch", "dd", playerid, id);
}

Vehicle_SpawnedCount(playerid)
{
    new count;

    foreach(new v : Vehicles) if(IsValidVehicle(v) && VehicleInfo[v][vScript] && VehicleInfo[v][vOwner] == PlayerInfo[playerid][pID] && VehicleInfo[v][vFaction] == INVALID_VEHICLE_ID)
            count++;

    return count;
}

Vehicle_GetLimit(playerid)
{
    new maxVehicles;

    switch(PlayerInfo[playerid][pPremium])
    {
        case 1: maxVehicles = MAX_OWNED_VEHICLES_BRONZE;
        case 2: maxVehicles = MAX_OWNED_VEHICLES_SILVER;
        case 3: maxVehicles = MAX_OWNED_VEHICLES_GOLD;
        case 4: maxVehicles = MAX_OWNED_VEHICLES_PLATINUM;
        case 5: maxVehicles = MAX_OWNED_VEHICLES_DIAMOND;
        default: maxVehicles = MAX_OWNED_VEHICLES;
    }

    return maxVehicles;
}

Vehicle_ClearCargo(vid)
{
    foreach(new x : Crates)
    {
        if(!CrateInfo[x][crExists] || CrateInfo[x][crVehicleID] != vid)continue;

        Crate_Delete(x);
    }

    for(new j; j < MAX_COMMODITIES_SLOT; j++) if(VehicleInfo[vid][vSlotObject][j])
    {
        DestroyDynamicObjectEx(VehicleInfo[vid][vSlotObject][j]);

        VehicleInfo[vid][vSlotObject][j] = 0;
    }

    return 1;
}

//Trunk System

Trunk_GetSlot(vehicleid)
{
   switch(VehicleInfo[vehicleid][vModel])
   {
        case 400: return 13;
        case 401: return 8;
        case 402: return 7;
        case 403: return 30;
        case 404, 405: return 10;
        case 406: return 30;
        case 407, 408: return 20;
        case 409: return 15;
        case 411: return 7;
        case 410, 412: return 10;
        case 413: return 20;
        case 414: return 25;
        case 415: return 7;
        case 416: return 20;
        case 417: return 30;
        case 418: return 15;
        case 419: return 6;
        case 420, 421: return 10;
        case 422, 423: return 15;
        case 424: return 3;
        case 425: return 30;
        case 426: return 10;
        case 427: return 20;
        case 428: return 20;
        case 429: return 6;
        case 430: return 10;
        case 431: return 30;
        case 432, 433: return 20;
        case 434: return 6;
        case 436: return 7;
        case 437: return 20;
        case 438: return 10;
        case 439: return 6;
        case 440: return 20;
        case 441: return 1;
        case 442: return 15;
        case 444: return 6;
        case 443: return 8;
        case 446, 447: return 10;
        case 448: return 2;
        case 449: return 5;
        case 451: return 6;
        case 452: return 8;
        case 453, 454: return 10;
        case 455: return 20;
        case 456: return 30;
        case 590, 591, 435, 450: return 30;
        case 457: return 2;
        case 458: return 11;
        case 459: return 18;
        case 460: return 3;
        case 461: return 3;
        case 462: return 2;
        case 463: return 3;
        case 464, 465: return 1;
        case 466, 467: return 8;
        case 468: return 2;
        case 469: return 5;
        case 470: return 10;
        case 471: return 3;
        case 472: return 15;
        case 473: return 2;
        case 474, 475: return 6;
        case 476, 477: return 5;
        case 478: return 13;
        case 479: return 11;
        case 480: return 6;
        case 481: return 0;
        case 482: return 18;
        case 483: return 14;
        case 485: return 2;
        case 486: return 2;
        case 487, 488: return 7;
        case 489, 490: return 10;
        case 491: return 6;
        case 492: return 9;
        case 493: return 5;
        case 494: return 7;
        case 495: return 6;
        case 496: return 6;
        case 497: return 7;
        case 498: return 25;
        case 499: return 21;
        case 500: return 5;
        case 501: return 0;
        case 502, 503, 504: return 5;
        case 505: return 10;
        case 506: return 6;
        case 507: return 9;
        case 508: return 15;
        case 509, 510: return 0;
        case 512, 513: return 2;
        case 514, 515: return 15;
        case 517, 518: return 7;
        case 519, 520: return 35;
        case 522: return 3;
        case 524: return 15;
        case 525: return 10;
        case 526, 527: return 8;
        case 528: return 9;
        case 529: return 7;
        case 530, 531: return 1;
        case 523: return 2;
        case 533, 534, 535: return 5;
        case 537, 538: return 5;
        case 539: return 2;
        case 540: return 8;
        case 541: return 5;
        case 542: return 8;
        case 543: return 9;
        case 544: return 25;
        case 545: return 4;
        case 546, 547: return 8;
        case 548: return 20;
        case 549, 550, 551: return 8;
        case 554: return 10;
        case 555: return 7;
        case 556, 557: return 4;
        case 558, 559: return 6;
        case 560: return 8;
        case 561: return 9;
        case 562: return 6;
        case 563: return 20;
        case 564: return 0;
        case 566, 567: return 9;
        case 568: return 1;
        case 571: return 0;
        case 572: return 1;
        case 573: return 20;
        case 574: return 2;
        case 575: return 6;
        case 576: return 8;
        case 577: return 35;
        case 578: return 4;
        case 579: return 10;
        case 580: return 9;
        case 581: return 3;
        case 582: return 15;
        case 583: return 1;
        case 585: return 8;
        case 586: return 3;
        case 587: return 7;
        case 588: return 15;
        case 589: return 7;
        case 592: return 35;
        case 593: return 5;
        case 595: return 15;
        case 596, 597, 598, 599, 601: return 10;
        case 600, 602, 603, 604, 605: return 8;
        case 609: return 25;
        default: return 5;
   }

   return 0;
}

Trunk_ShowItems(playerid, vehicleid, elkoy = 0)
{
    new string[1024];
    new slot = Trunk_GetSlot(vehicleid);
    if(BagajKacCesetAlabilir(vehicleid))
        CesetBagajAra(playerid, vehicleid);

    if(!slot)return
        SunucuMesajiC(playerid, "Bu aracýn envanteri yok.");

    for(new x; x < slot; x++)
        format(string,sizeof(string), "%sSlot %d: %s\n", string, x + 1, Inventory_ReturnString(vehicleid, ENTITY_TYPE_VEHICLE, x));

    if(PlayerInfo[playerid][pFaction] != -1 && Faction_GetType(PlayerInfo[playerid][pFaction]) == POLICE && PlayerInfo[playerid][pFactionDuty] && elkoy)
    {
        PlayerInfo[playerid][pRevokeItem] = vehicleid;
        Dialog_Show(playerid, DialogRevokeTrunk, DIALOG_STYLE_LIST, "Envanter", string, "Ýleri", "Ýptal");
    }
    if(!VehicleInfo[vehicleid][vLocked])
        Dialog_Show(playerid, DialogVehicleTrunk, DIALOG_STYLE_LIST, "Envanter", string, "Ýleri", "Ýptal");

    return 1;
}

Trunk_GetCount(vehicleid)
{
    new count;

    for(new x; x <  Trunk_GetSlot(vehicleid); x++) if(VehicleInfo[vehicleid][vInvList][x])count++;

    return count;
}

Trunk_HasItem(vehicleid, item[])
{
    for(new x; x < Trunk_GetSlot(vehicleid); x++)
    {
        if(!VehicleInfo[vehicleid][vInvList][x])continue;

        new listid = VehicleInfo[vehicleid][vInvList][x];

        if(strfind(InventoryObjects[listid][invName], item, false) != -1)
            return x;
    }

    return -1;
}

Trunk_FreeID(vehicleid)
{
    for(new x; x < Trunk_GetSlot(vehicleid); x++)
    {
        if(!VehicleInfo[vehicleid][vInvList][x])
            return x;
    }

    return -1;
}

Trunk_AddItem(playerid, vehicleid, slot, invslot, amount = 0)
{
    new listid = PlayerInfo[playerid][pInvList][invslot];
    new type = InventoryObjects[listid][invType];
    new item_exists = Trunk_HasItem(vehicleid, InventoryObjects[listid][invName]);

    if(item_exists != -1 && (type != ITEM_DRUG || type == ITEM_DRUG && VehicleInfo[vehicleid][vInvExtra][item_exists] == PlayerInfo[playerid][pInvExtra][invslot]) && type != ITEM_WEAPON && type != ITEM_CLOTHES && type != ITEM_PHONE)
        VehicleInfo[vehicleid][vInvAmount][item_exists] += amount;

    else
    {
        VehicleInfo[vehicleid][vInvList][slot] = PlayerInfo[playerid][pInvList][invslot];
        VehicleInfo[vehicleid][vInvAmount][slot] = amount;
        VehicleInfo[vehicleid][vInvExtra][slot] = (type != ITEM_PHONE) ? PlayerInfo[playerid][pInvExtra][invslot] : PlayerInfo[playerid][pInvCredit][invslot];
    }

    Inventory_DecraseAmount(playerid, invslot, (type == ITEM_WEAPON || type == ITEM_CLOTHES || type == ITEM_PHONE) ? PlayerInfo[playerid][pInvAmount][invslot] : amount);
    SaveVehicle(vehicleid);

    if(PlayerInfo[playerid][pMobile] != -1 && invslot == PlayerInfo[playerid][pPhoneID])
        Phone_HangupCall(playerid);

    return 1;
}

//Storage System

Storage_ShowItems(playerid, houseid)
{
    if(IsPlayerInRangeOfPoint(playerid, 2.5, HouseInfo[houseid][hInvPosX], HouseInfo[houseid][hInvPosY], HouseInfo[houseid][hInvPosZ]) == 0)return
        Player_Info(playerid, "Evinin kasasina yakin degilsin.");

    new string[700];

    for(new x; x < MAX_STORAGE_ITEMS; x++)
        format(string,sizeof(string), "%sSlot %d: %s\n", string, x + 1, Inventory_ReturnString(houseid, ENTITY_TYPE_HOUSE, x));

    if(PlayerInfo[playerid][pFaction] != -1 && Faction_GetType(PlayerInfo[playerid][pFaction]) == POLICE && PlayerInfo[playerid][pFactionDuty])
    {
        PlayerInfo[playerid][pRevokeItem] = houseid;
        Dialog_Show(playerid, DialogRevokeStorage, DIALOG_STYLE_LIST, "Envanter", string, "Ýleri", "Ýptal");
    }
    else Dialog_Show(playerid, DialogHouseStorage, DIALOG_STYLE_LIST, "Envanter", string, "Ýleri", "Ýptal");
    LogYaz(playerid, "Ev envanteri incelemesi", -1, houseid);
    return 1;
}

Storage_GetCount(houseid)
{
    new count;

    for(new x; x < MAX_STORAGE_ITEMS; x++)if(HouseInfo[houseid][hInvList][x])count++;

    return count;
}

Storage_HasItem(houseid, item[])
{
    for(new x; x < MAX_STORAGE_ITEMS; x++)
    {
        if(!HouseInfo[houseid][hInvList][x])continue;

        new listid = HouseInfo[houseid][hInvList][x];

        if(strfind(InventoryObjects[listid][invName], item, false) != -1)
            return x;
    }

    return -1;
}

Storage_FreeID(houseid)
{
    for(new x; x < MAX_STORAGE_ITEMS; x++)
    {
        if(!HouseInfo[houseid][hInvList][x])
            return x;
    }

    return -1;
}

Storage_AddItem(playerid, houseid, slot, invslot, amount = 0)
{
    new listid = PlayerInfo[playerid][pInvList][invslot];
    new type = InventoryObjects[listid][invType];
    new item_exists = Storage_HasItem(houseid, InventoryObjects[listid][invName]);

    if(item_exists != -1 && (type != ITEM_DRUG || type == ITEM_DRUG && HouseInfo[houseid][hInvExtra][item_exists] == PlayerInfo[playerid][pInvExtra][invslot]) && type != ITEM_WEAPON && type != ITEM_CLOTHES && type != ITEM_PHONE)
        HouseInfo[houseid][hInvAmount][item_exists] += amount;

    else
    {
        HouseInfo[houseid][hInvList][slot] = PlayerInfo[playerid][pInvList][invslot];
        HouseInfo[houseid][hInvAmount][slot] = amount;
        HouseInfo[houseid][hInvExtra][slot] = (type != ITEM_PHONE) ? PlayerInfo[playerid][pInvExtra][invslot] : PlayerInfo[playerid][pInvCredit][invslot];
    }

    Inventory_DecraseAmount(playerid, invslot, (type == ITEM_WEAPON || type == ITEM_CLOTHES || type == ITEM_PHONE) ? PlayerInfo[playerid][pInvAmount][invslot] : amount);
    SaveHouse(houseid);

    if(PlayerInfo[playerid][pMobile] != -1 && invslot == PlayerInfo[playerid][pPhoneID])
        Phone_HangupCall(playerid);

    return 1;
}

//Games System

Casino_StartSlotMachine(playerid)
{
    new building_id = GetPlayerBuilding(playerid, true);
    new number_1 = random(9) + 1;
    new number_2 = random(9) + 1;
    new number_3 = random(9) + 1;
    new string[128];

    OAC_GivePlayerMoney(playerid, -SunucuBilgi[CasinoCevir]);

    if(number_1 == number_2 && number_2 == number_3)
    {
        format(string, sizeof(string), "~g~Tebrikler!~n~~y~$%d~n~~w~%d %d %d", number_1 * 500, number_1, number_2, number_3);
//        GameTextForPlayer(playerid, string, 3000, 6);
        AC_GivePlayerMoney(playerid, number_1 * 500, "/casino");
        SendFormattedMessage(playerid, COLOR_WHITE, "Üç tane %d sayýsýný yan yana getirdin ve %d kazandýn.", number_1, number_1 * 500);
        if(building_id != -1) BuildingInfo[building_id][bCash] -= (number_1 * 500) - SunucuBilgi[CasinoCevir];
    }
    else
    {
        format(string, sizeof(string), "~r~Kaybettin~n~~w~%d %d %d", number_1, number_2, number_3);
        GameTextForPlayer(playerid, string, 3000, 6);
        if(building_id != -1) BuildingInfo[building_id][bCash] += SunucuBilgi[CasinoCevir];
    }

    return 1;
}

Casino_StartWheel(playerid, i)
{
    new building_id = GetPlayerBuilding(playerid, true);

    new probability = random(100) + 1, color_id, string[128];
    new rand_0 = random(4), rand_1 = random(4), rand_2 = random(4), rand_3 = random(4);
    new rand_4 = random(4), rand_5 = random(4), rand_6 = random(4), rand_7 = random(4);

    switch(probability)
    {
        case 1 .. 5: color_id = 0;
        case 6 .. 10: color_id = 1;
        case 11 .. 15: color_id = 2;
        case 16 .. 45: color_id = 3;
        case 46 .. 100: color_id = 4;
    }

    if(i == color_id)
    {
        format(string, sizeof(string), "Kurpiyer: Tebrikler, $%d kazandýn!", PlayerInfo[playerid][pCasinoWheelBet] * ColorWheelInfo[color_id][colorWin]);
        SendClientMessageEx(playerid, 0xCECECEFF, string);

        AC_GivePlayerMoney(playerid, PlayerInfo[playerid][pCasinoWheelBet] * ColorWheelInfo[color_id][colorWin], "/casino");

        if(building_id != -1) BuildingInfo[building_id][bCash] -= PlayerInfo[playerid][pCasinoWheelBet] * ColorWheelInfo[color_id][colorWin];
    }
    else SendClientMessageEx(playerid, 0xCECECEFF, "Kurpiyer: Üzgünüm, kazanamadýn.");

    format(string, sizeof(string), "~d~ ~n~  ~%c~]  ~%c~]  ~%c~]  ~%c~]  ~%c~] ~n~ ~%c~]                                            ~%c~] ~n~ ~%c~]                                                 ~%c~]",
        ColorWheelInfo[rand_0][colorChar], ColorWheelInfo[rand_1][colorChar], ColorWheelInfo[color_id][colorChar],
        ColorWheelInfo[rand_2][colorChar], ColorWheelInfo[rand_3][colorChar],
        ColorWheelInfo[rand_4][colorChar], ColorWheelInfo[rand_5][colorChar],
        ColorWheelInfo[rand_6][colorChar], ColorWheelInfo[rand_7][colorChar]);

    GameTextForPlayer(playerid, string, 7000, 3);

    PlayerInfo[playerid][pInCasinoWheel] = PlayerInfo[playerid][pCasinoWheelBet] = 0;

    return 1;
}

//Dynamic Page Functions

ShowPlayerPhoneBook(playerid, page)
{
    for(new j; j < MAX_PAGE_PHONE; j++)
    {
        PlayerInfo[playerid][pPhonesID][j] = 0;
    }

    PlayerInfo[playerid][pPage] = page;

    // new query[128];
    new itemid = PlayerInfo[playerid][pPhoneID];

    page--;

    mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT * FROM phonebooks WHERE owner_number = '%d'", PlayerInfo[playerid][pInvAmount][itemid]);
    mysql_tquery(ourConnection, queryx, "OnShowPhonebookSearch", "dd", playerid, page);

    return 1;
}

ShowPlayerPhoneLogs(playerid, page, type)
{
    for(new j; j < MAX_PAGE_PHONE; j++)
    {
        PlayerInfo[playerid][pPhonesID][j] = 0;
    }

    PlayerInfo[playerid][pPage] = page;

    // new query[256];
    new itemid = PlayerInfo[playerid][pPhoneID];

    page--;

    mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT * FROM phone_logs WHERE type = '%d' AND (receiver_number = '%d' OR caller_number = '%d') AND deleted_at IS NULL ORDER BY id ASC", type, PlayerInfo[playerid][pInvAmount][itemid], PlayerInfo[playerid][pInvAmount][itemid]);
    mysql_tquery(ourConnection, queryx, "OnPlayerPhonelogsSearch", "ddd", playerid, page, type);

    return 1;
}

ShowPlayerLogs(playerid, page)
{
    PlayerInfo[playerid][pPage] = page; page--;

    // new query[512];

    mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT transfer_logs.*, characters.id FROM characters JOIN transfer_logs ON (characters.id = transfer_logs.giver_character_id OR characters.id = transfer_logs.receiver_character_id) WHERE char_name = '%e'", PlayerInfo[playerid][pLogTarget]);

    if(!isnull(PlayerInfo[playerid][pLogCommand]) && strlen(PlayerInfo[playerid][pLogCommand]) < 65)mysql_format(ourConnection, queryx, sizeof(queryx), "%s AND command = '%e'", queryx, PlayerInfo[playerid][pLogCommand]);

    mysql_format(ourConnection, queryx, sizeof(queryx), "%s ORDER BY created_at DESC;", queryx);
    mysql_tquery(ourConnection, queryx, "OnPlayerLogsSearch", "dd", playerid, page);

    return 1;
}

ShowPlayerFurnitures(playerid, page)
{
    PlayerInfo[playerid][pPage] = page; page--;

    // new query[128];
    new VW = GetPlayerVirtualWorld(playerid);

    mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT * FROM furnitures WHERE world = '%d'", VW);
    mysql_tquery(ourConnection, queryx, "OnLoadFurnitures", "dd", playerid, page);

    return 1;
}
//Unthreaded functions

GetFurnitureCount(playerid)
{
    // new query[90];
    new VW = GetPlayerVirtualWorld(playerid);

    mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT * FROM furnitures WHERE world = '%d'", VW);
    mysql_query(ourConnection, queryx);

    return cache_num_rows();
}

GetQueueCount(type, timestamp)
{
    // new query[90];

    mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT * FROM staffrequests WHERE type = '%d' AND time < '%d'", type, timestamp);
    mysql_query(ourConnection, queryx);

    return cache_num_rows();
}

GetPlayerUserKeys(playerid)
{
    // new query[90];

    mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT * FROM user_keys WHERE owner_id = '%d'", PlayerInfo[playerid][pID]);
    mysql_query(ourConnection, queryx);

    return cache_num_rows();
}

HasPlayerUserKey(playerid, type, subject)
{
    // new query[256];

    mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT id FROM user_keys WHERE owner_id = '%d' AND subject_type = '%d' AND subject_id = '%d' AND expired = '0'", PlayerInfo[playerid][pID], type, subject);
    mysql_query(ourConnection, queryx);

    return cache_num_rows();
}

GetPlayerHousesCount(playerid)
{
    // new query[128];

    mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT * FROM houses WHERE owner_id = '%d'", PlayerInfo[playerid][pID]);
    mysql_query(ourConnection, queryx);

    return cache_num_rows();
}

GetPlayerBizCount(playerid)
{
    // new query[128];

    mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT * FROM buildings WHERE owner_id = '%d'", PlayerInfo[playerid][pID]);
    mysql_query(ourConnection, queryx);

    return cache_num_rows();
}

GetPlayerVehicleCount(playerid, bool:tooBike = true)
{
    //new query[90];
    new count;

    mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT * FROM vehicles WHERE owner_id = '%d'", PlayerInfo[playerid][pID]);
    mysql_query(ourConnection, queryx);

    for(new j; j < cache_num_rows(); j++)
    {
        new tmpModel;
        cache_get_value_int(j, "model", tmpModel);
        if(tooBike == false) if(tmpModel == 509 || tmpModel == 481 || tmpModel == 510) continue;
        count++;
    }
    print("oyuncu arac sayisi yuklendi");
    return count;
}

GetCharacterName(databaseID)
{
    // new query[90];
    new tmpName[MAX_PLAYER_NAME] = "Bos";

    if(databaseID)
    {
        mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT char_name FROM characters WHERE id = '%d'", databaseID);
        mysql_query(ourConnection, queryx);

        cache_get_value(0, "char_name", tmpName, MAX_PLAYER_NAME);
    }

    return tmpName;
}

GetCimiciCount(playerid)
{
    // new query[90];

    mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT * FROM surveillance_bugs WHERE owner_id = '%d'", PlayerInfo[playerid][pID]);
    mysql_query(ourConnection, queryx);

    return cache_num_rows();
}

//Shortcut functions
SendRadioMessage(playerid, params[], Float:radius)
{
    if(Inventory_HasItem(playerid, "Telsiz", ITEM_BIZ) == -1)return
        SunucuMesajiC(playerid, "Telsize sahip deðilsin.");

    new slot = PlayerInfo[playerid][pRadioDefault];

    if(!sscanf(params, "d", slot) && slot) strdel(params, 0, 1);

    if(slot == -1)return
        SunucuMesajiC(playerid, "/slot ile ana frekans slotunu belirlemelisin.");

    if(slot < 1 || slot > 8)return
        SendClientMessageEx(playerid, COLOR_GREY, "(/t)elsiz [slot] [yazý]");

    slot--;

    new channel = PlayerInfo[playerid][pRadioSlot][slot];

    if(strlen(FrequenceInfo[channel][rPassword]) > 0 && PlayerInfo[playerid][pAuthorized][channel] == false)return
        SunucuMesajiC(playerid, "Bu frekansa giremiyorsun. Önce kendini doðrulaman lazým. /telsizgiris kullan.");

    if(!channel)return
        SunucuMesajiC(playerid, "Seçilen slotta geçerli bir frekans yok.");

    new message[256];

    if(sscanf(params, "s[256]", message) || strlen(message) > 256) return
        KullanimMesajiC(playerid, "/telsiz [yazý]");

    new string[256];

    format(string, sizeof(string), "%s(telsiz): %s", ReturnRoleplayName(playerid, true), message);
    ProxDetector(radius, playerid, string, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5, .exceptPlayer = true);

    foreach(new j : Player)
    {
        if(!IsPlayerConnected(j) || Inventory_HasItem(j, "Telsiz", ITEM_BIZ) == -1)continue;

        for(new x; x < 8; x++) if(PlayerInfo[j][pRadioSlot][x] == channel && PlayerInfo[j][pAuthorized][channel] == true)
            SendFormattedMessage(j, COLOR_RADIO, "** [CH: %d, S: %d] %s: %s", channel, x + 1, ReturnRoleplayName(playerid, true), message);
    }

    return 1;
}

//Timers

PutPlayerInVeh(playerid, vehicleid, seat); public PutPlayerInVeh(playerid, vehicleid, seat)return
    PutPlayerInVehicle(playerid, vehicleid, seat);

StopAnim(playerid); public StopAnim(playerid) pc_cmd_animdurdur(playerid, NULL);

DelayedKick(playerid); public DelayedKick(playerid) return Kick(playerid);

OyuncuOldur(playerid, killerid)
{
    if(PlayerInfo[playerid][pJustSpawned])
    {
        // Trisha bug-fix
        if(PlayerInfo[playerid][pSnakeCamMode])
        {
            PlayerInfo[playerid][pSnakeCamMode] = 0;
            PlayerInfo[playerid][pSnakeCamActor] = -1;
            TogglePlayerSpectating(playerid, false);
            SetCameraBehindPlayer(playerid);
            SetPlayerPos(playerid, PlayerInfo[playerid][pPosX], PlayerInfo[playerid][pPosY], PlayerInfo[playerid][pPosZ]);
            SetPlayerFacingAngle(playerid, PlayerInfo[playerid][pPosA]);
            AC_SetPlayerVirtualWorld(playerid, 0);
            AC_SetPlayerHealth(playerid, 100);
            SetPlayerInterior(playerid, 0);
            SendFormattedMessage(playerid, COLOR_GREEN, "Snakecam modundan baþarýyla çýktýnýz.");
            PlayerInfo[playerid][pJustSpawned] = false;
            return 1;
        }
        if(PlayerInfo[playerid][pSpecMode])
        {
            TogglePlayerSpectating(playerid, 0);
            PlayerSpectatePlayer(playerid, INVALID_PLAYER_ID);
            PlayerSpectateVehicle(playerid, INVALID_VEHICLE_ID);
            PlayerInfo[playerid][pInRecon] = -1;
            AC_ResetTimer(playerid);
            PreloadAnimations(playerid);
            //SpawnPlayer(playerid);
            AC_SetPlayerHealth(playerid, 100);
            SetPlayerPos(playerid, GetPVarFloat(playerid, "SpecX"), GetPVarFloat(playerid, "SpecY"), GetPVarFloat(playerid, "SpecZ"));
            SetPlayerFacingAngle(playerid, GetPVarFloat(playerid, "SpecA"));
            SetPlayerInterior(playerid, GetPVarInt(playerid, "SpecINT"));
            AC_SetPlayerVirtualWorld(playerid, GetPVarInt(playerid, "SpecVW"));
            SetCameraBehindPlayer(playerid);
            SetTimerEx("OnPlayerSetData", 1000, false, "d", playerid);
            BasariMesaji(playerid, "Spec modundan çýktýnýz.");
            DeletePVar(playerid, "SpecX");
            DeletePVar(playerid, "SpecY");
            DeletePVar(playerid, "SpecZ");
            DeletePVar(playerid, "SpecA");
            DeletePVar(playerid, "SpecINT");
            DeletePVar(playerid, "SpecVW");
            PlayerInfo[playerid][pSpecMode] = 0;
            PlayerInfo[playerid][pJustSpawned] = false;
            return 1;
        }
     /* if(PlayerInfo[playerid][pTVMode])
        {
            TogglePlayerSpectating(playerid, false);
            TogglePlayerControllable(playerid, true);
            SetCameraBehindPlayer(playerid);
            SetPlayerPos(playerid, PlayerInfo[playerid][pPosX], PlayerInfo[playerid][pPosY], PlayerInfo[playerid][pPosZ]);
            SetPlayerFacingAngle(playerid, PlayerInfo[playerid][pPosA]);
            AC_SetPlayerVirtualWorld(playerid, PlayerInfo[playerid][pWorld]);
            AC_SetPlayerHealth(playerid, PlayerInfo[playerid][pHealth]);
            SetPlayerInterior(playerid, PlayerInfo[playerid][pInterior]);
            //SendFormattedMessage(playerid, COLOR_GREEN, "TV izlemeyi býraktýnýz.");
            PlayerInfo[playerid][pJustSpawned] = false;
            PlayerInfo[playerid][pTVMode] = false;
            return 1;
        }
        if(PlayerInfo[playerid][Rehineyimm])
        {
            TogglePlayerSpectating(playerid, false);
            TogglePlayerControllable(playerid, true);
            SetCameraBehindPlayer(playerid);
            SetPlayerPos(playerid, PlayerInfo[playerid][pPosX], PlayerInfo[playerid][pPosY], PlayerInfo[playerid][pPosZ]);
            AC_SetPlayerVirtualWorld(playerid, PlayerInfo[playerid][pWorld]);
            AC_SetPlayerHealth(playerid, PlayerInfo[playerid][pHealth]);
            SetPlayerInterior(playerid, PlayerInfo[playerid][pInterior]);
            //SendFormattedMessage(playerid, COLOR_GREEN, "TV izlemeyi býraktýnýz.");
            PlayerInfo[playerid][pJustSpawned] = false;
            PlayerInfo[playerid][Rehineyimm] = false;
            return 1;
        }*/
    }

    if(PlayerInfo[playerid][pDeath] == 3)
    {
        PlayerInfo[playerid][pDeath] = 3;
        new xyazi[64];
        format(xyazi, sizeof xyazi, "(( Bu kullanýcý aðýr yaralý. [/hasarlar %d] ))", playerid);
        PlayerInfo[playerid][pAgirYarali] = 1;
        PlayerTextDrawShow(playerid, PlayerInfo[playerid][pTextdraws][0]);
        PlayerInfo[playerid][pTedaviSure] = 360;
        UpdateDynamic3DTextLabelText(PlayerInfo[playerid][pNameTag], COLOR_ADMIN, xyazi);
        ApplyAnimation(playerid, "WUZI", "CS_Dead_Guy", 4.1, 0, 1, 1, 1, 0, 1);
        new weapons[12], ammo[12];
        for(new x; x < 12; x++)
        {
            GetPlayerWeaponData(playerid, x, weapons[x], ammo[x]);
            if(!AC_PlayerHasWeapon(playerid, weapons[x]) || !ammo[x])
            {
                weapons[x] = 0;
                ammo[x] = 0;
            }
            PlayerInfo[playerid][pWeapons][x] = weapons[x];
            PlayerInfo[playerid][pAmmo][x] = ammo[x];
        }
        return 1;
    }
    SetPVarInt(playerid, "OyuncuOlu", 1);
    if(GetPVarInt(playerid, "CesetSurukluyor") == 1) {
        new cid = CesetIDBul(playerid);
        if(GetPVarInt(playerid, "CesetBulunamadi") == 1) {
            CesetSil(cid);
            DeletePVar(playerid, "CesetBulunamadi");
        }
        CesetInfo[cid][cID] = cid;
        CesetInfo[cid][cExists] = 1;
        GetPVarString(playerid, "CesetIsim", CesetInfo[cid][cName], MAX_PLAYER_NAME);
        CesetInfo[cid][cSkin] = GetPVarInt(playerid, "CesetSkin");
        GetPlayerPos(playerid, CesetInfo[cid][ceX], CesetInfo[cid][ceY], CesetInfo[cid][ceZ]);
        CesetInfo[cid][ceX] += 0.25;
        CesetInfo[cid][ceY] += 0.35;
        GetPlayerFacingAngle(playerid, CesetInfo[cid][ceA]);
        CesetInfo[cid][ceInterior] = GetPlayerInterior(playerid);
        CesetInfo[cid][ceVW] = GetPlayerVirtualWorld(playerid);
        CesetInfo[cid][cBagaj] = 1;
        format(CesetInfo[cid][cOlduren], MAX_PLAYER_NAME, "%s", ReturnRoleplayName(playerid));
        DeletePVar(playerid, "CesetArac");
        DeletePVar(playerid, "CesetIsim");
        DeletePVar(playerid, "CesetSkin");
        DeletePVar(playerid, "CesetAldi");
        CesetOlustur(cid);
        SunucuMesajiC(playerid, "Öldüðünüz için otomatik olarak cesedi býraktýnýz.");
        DestroyDynamic3DTextLabelEx(PlayerInfo[playerid][pNameTag]);
    } else {
        if(GetPVarInt(playerid, "CesetAldi") == 1) {
            new cid = CesetIDBul(playerid);
            if(GetPVarInt(playerid, "CesetBulunamadi") == 1) {
                CesetSil(cid);
                DeletePVar(playerid, "CesetBulunamadi");
            }
            CesetInfo[cid][cID] = cid;
            CesetInfo[cid][cExists] = 1;
            GetPVarString(playerid, "CesetIsim", CesetInfo[cid][cName], MAX_PLAYER_NAME);
            CesetInfo[cid][cSkin] = GetPVarInt(playerid, "CesetSkin");
            GetPlayerPos(playerid, CesetInfo[cid][ceX], CesetInfo[cid][ceY], CesetInfo[cid][ceZ]);
            CesetInfo[cid][ceX] += 0.25;
            CesetInfo[cid][ceY] += 0.35;
            GetPlayerFacingAngle(playerid, CesetInfo[cid][ceA]);
            CesetInfo[cid][ceInterior] = GetPlayerInterior(playerid);
            CesetInfo[cid][ceVW] = GetPlayerVirtualWorld(playerid);
            CesetInfo[cid][cBagaj] = 1;
            format(CesetInfo[cid][cOlduren], MAX_PLAYER_NAME, "%s", ReturnRoleplayName(playerid));
            DeletePVar(playerid, "CesetArac");
            DeletePVar(playerid, "CesetIsim");
            DeletePVar(playerid, "CesetSkin");
            DeletePVar(playerid, "CesetAldi");
            CesetOlustur(cid);
            SunucuMesajiC(playerid, "Öldüðünüz için otomatik olarak cesedi býraktýnýz.");
            DestroyDynamic3DTextLabelEx(PlayerInfo[playerid][pNameTag]);
        }
    }
    ClearAnimations(playerid, 1);
    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
    PlayerInfo[playerid][pLoopAnim] = false;
    StopAudioStreamForPlayer(playerid);
    SetPlayerWeather(playerid, SunucuBilgi[CurrentWeather]);
    SetPlayerDrunkLevel(playerid, 0);
    if(killerid != -1) SetPVarString(playerid, "OyuncuOlduren", ReturnRoleplayName(killerid));
    new weapons[12];
    new ammo[12];
    for(new x; x < 12; x++)
    {
        GetPlayerWeaponData(playerid, x, weapons[x], ammo[x]);
        if(!AC_PlayerHasWeapon(playerid, weapons[x]) || !ammo[x])
        {
            weapons[x] = 0;
            ammo[x] = 0;
        }
        PlayerInfo[playerid][pWeapons][x] = weapons[x];
        PlayerInfo[playerid][pAmmo][x] = ammo[x];
    }

    if(PlayerInfo[playerid][pDeath] == 0)
    {
        if(killerid != INVALID_PLAYER_ID && killerid != -1)
            SunucuMesaji(playerid, "ID: %d tarafýndan yaralandýn.", PlayerInfo[killerid][pID]);

        SendFormattedMessage(playerid, COLOR_ADMIN, "Yaralandýn, tedavi olman gerekiyor. (/hasarlar %d)", playerid);
        PlayerInfo[playerid][pDeathTime] = GetTickCount();
    }
    PlayerInfo[playerid][pDeath] = 1;
    Player_ClearTemporaryVars(playerid);
    DisablePlayerRaceCheckpoint(playerid);
    if(PlayerInfo[playerid][Started])
    {
        DisablePlayerRaceCheckpoint(playerid);
        DestroyVehicle(PlayerInfo[playerid][Vehicle]);
        Iter_Remove(Vehicles, PlayerInfo[playerid][Vehicle]);
        Exam_ResetVars(playerid);
    }
    PlayerInfo[playerid][pLegHit] = 0;
    new string[70], xstring[70];
    format(string, sizeof(string), "(( Bu kullanýcý yaralý. [/hasarlar %d] ))", playerid);
    PlayerInfo[playerid][pTedaviSure] = 180;
    PlayerTextDrawShow(playerid, PlayerInfo[playerid][pTextdraws][0]);
    format(xstring,sizeof(xstring), "~n~~g~BAYGIN: ~w~180");
    PlayerTextDrawSetString(playerid, PlayerInfo[playerid][pTextdraws][0], xstring);
    DestroyDynamic3DTextLabelEx(PlayerInfo[playerid][pNameTag]);
    PlayerInfo[playerid][pNameTag] = CreateDynamic3DTextLabel(string, COLOR_ADMIN, 0, 0, 0.5, 30.0, playerid, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0);
    AC_SetPlayerHealth(playerid, 10.0);
    AC_SetPlayerArmour(playerid, 0);
    SetCameraBehindPlayer(playerid);
    ExecuteShots[playerid] = 0;
    ApplyAnimation(playerid, "WUZI", "CS_Dead_Guy", 4.1, 0, 1, 1, 1, 0, 1);
    return 1;
}

CesetYangin(cesetid); public CesetYangin(cesetid) {
    CesetSil(cesetid);
    return 1;
}
/*
YanginCanAzalt(playerid, yanginid); public YanginCanAzalt(playerid, yanginid) {
    if(YanginInfo[yanginid][yID] != -1) {
        YanginInfo[yanginid][yHP] -= 100.0;
        new string[25];
        format(string, sizeof(string), "%.1f/%.1f", YanginInfo[yanginid][yHP], YanginInfo[yanginid][yMaxHP]);
        UpdateDynamic3DTextLabelText(YanginInfo[yanginid][yNameTag], COLOR_WHITE, string);
        if(YanginInfo[yanginid][yHP] == 0.0)
            YanginSondur(playerid, yanginid);
        else {
            if(GetPlayerWeapon(playerid) == 42) { // extinguishersa
                new id = EnYakinYanginiBul(playerid);
                if(IsPlayerInRangeOfPoint(playerid, 8.0, YanginInfo[id][yPosX], YanginInfo[id][yPosY], YanginInfo[id][yPosZ])) {
                    // bakýyor mu
                    YanginTimer[playerid] = SetTimerEx("YanginCanAzalt", 1000, false, "dd", playerid, id);
                    SetPVarInt(playerid, "YanginSonduruyor", 1);
                }
            }
        }
    }
    return 1;
}
*/
AracTimer(vehicleid); public AracTimer(vehicleid)
{
    new Float:hiz = GetVehicleSpeed(vehicleid);
    if(hiz > 0.0)
    {
        VehicleInfo[vehicleid][vKM] += ((1.0 / 85.0) * hiz) / 100.0;
        if(VehicleInfo[vehicleid][vKM] >= 1.0)
        {
            VehicleInfo[vehicleid][vKMGosteren] += 1;
            VehicleInfo[vehicleid][vKM] = 0;
        }
    }
    return 1;
}

/*DeathAnim(playerid); public DeathAnim(playerid) {
    TogglePlayerControllable(playerid, false);
    PlayerInfo[playerid][pFreezed] = 1;
    return 1;
}*/

ELMZaman(vehicleid); public ELMZaman(vehicleid)
{
    new panels, doors, lights, tires;
    GetVehicleDamageStatus(vehicleid, panels, doors, lights, tires);

    switch(Flash[vehicleid])
    {
        case 0: UpdateVehicleDamageStatus(vehicleid, panels, doors, 1, tires);

        case 1: UpdateVehicleDamageStatus(vehicleid, panels, doors, 4, tires);

        case 2: UpdateVehicleDamageStatus(vehicleid, panels, doors, 1, tires);

        case 3: UpdateVehicleDamageStatus(vehicleid, panels, doors, 4, tires);

        case 4: UpdateVehicleDamageStatus(vehicleid, panels, doors, 1, tires);

        case 5: UpdateVehicleDamageStatus(vehicleid, panels, doors, 4, tires);
    }
    if(Flash[vehicleid] >=5) Flash[vehicleid] = 0;
    else Flash[vehicleid] ++;
    return 1;
}

OnayIptal(playerid); public OnayIptal(playerid) {
    if(GozBaglaIstegi[playerid] && !GozuBaglandi[playerid]) {
        GozBaglaIstegi[playerid] = 0;
        HataMesajiC(playerid, "Zamanýnda cevap vermediðiniz için göz baðý isteði iptal oldu.");
        HataMesaji(GozunuBaglayan[playerid], "%s (ID:%d) zamanýnda cevap veremediði için göz baðý isteði iptal oldu.", ReturnRoleplayName(playerid), playerid);
    }
    /*else if(GetPVarInt(playerid, "RehinDurumu") == 1) {
        SendClientMessageEx(RehineAlan[playerid], COLOR_GREY, "Kiþi rehin isteðini zamanýnda kabul etmedi.");
        SendClientMessageEx(playerid, COLOR_GREY, "Rehin isteðini zamanýnda kabul edemediniz.");
        DeletePVar(RehineAlan[playerid], "RehineAldigi");
        DeletePVar(RehineAlan[playerid], "RehineArac");
        RehineAlan[RehineAlan[playerid]] = -1;
        RehineAlan[playerid] = -1;
        DeletePVar(playerid, "RehineArac");
        DeletePVar(playerid, "RehineAldigi");
        DeletePVar(playerid, "RehinDurumu");
    }*/
    return 1;
}

CloseToll(i); public CloseToll(i)
{
    if(GateBilgi[i][GateGise] == 0) return 1;

    GateBilgi[i][gateOpened] = false;
    MoveDynamicObject(GateBilgi[i][gateObject], GateBilgi[i][gateClosePX], GateBilgi[i][gateClosePY], GateBilgi[i][gateClosePZ], GateBilgi[i][gateHiz], GateBilgi[i][gateCloseRX], GateBilgi[i][gateCloseRY], GateBilgi[i][gateCloseRZ]);
    KillTimer(GateBilgi[i][GiseTimer]);

    return 1;
}

TurnOffAlarm(vid); public TurnOffAlarm(vid)
{
    VehicleInfo[vid][vAlarmOn] = 0;
    VehicleInfo[vid][vObje] = VEHICLE_PARAMS_OFF;
    return SetVehicleParamsEx(vid, VehicleInfo[vid][vEngine], VehicleInfo[vid][vLights], VEHICLE_PARAMS_OFF, VehicleInfo[vid][vLocked], VehicleInfo[vid][vBonnet], VehicleInfo[vid][vBoot], VehicleInfo[vid][vObje]);
}

SprayVehicleID(playerid, senderid, vehicleid); public SprayVehicleID(playerid, senderid, vehicleid)
{
    VehicleInfo[vehicleid][vFirstColor] = PlayerInfo[playerid][pFirstColor];
    VehicleInfo[vehicleid][vSecondColor] = PlayerInfo[playerid][pSecondColor];

    ChangeVehicleColor(vehicleid, VehicleInfo[vehicleid][vFirstColor], VehicleInfo[vehicleid][vSecondColor]);

    SaveVehicle(vehicleid);

    TogglePlayerControllable(playerid, true);
    PlayerInfo[playerid][pFreezed] = 0;

    PlayerInfo[playerid][pRequestSpray] = -1;
    PlayerInfo[playerid][pSprayPrice] = 0;
    PlayerInfo[playerid][pFirstColor] = 0;
    PlayerInfo[playerid][pSecondColor] = 0;

    SunucuMesajiC(playerid, "Araç boyama iþlemi sonlandý.");

    SunucuMesajiC(senderid, "Araç boyama iþlemini bitirdiniz.");
    if(GetPlayerState(senderid) == PLAYER_STATE_ONFOOT) ClearAnimations(senderid);
    AC_RemovePlayerWeapon(senderid, 42);
    return 1;
}

RepairVehicleID(playerid, senderid, vehicleid); public RepairVehicleID(playerid, senderid, vehicleid)
{
    TogglePlayerControllable(playerid, true);
    PlayerInfo[playerid][pFreezed] = 0;

    switch(PlayerInfo[playerid][pRepairType])
    {
        case 1:
        {
            static const levelHealth[4] = {120, 300, 500, 1000};
            new levelDoor = VehicleInfo[vehicleid][vDoorLevel];
            VehicleInfo[vehicleid][vRespraying] = 3;
            VehicleInfo[vehicleid][vDoorHealth] = levelHealth[levelDoor];
            AC_SetVehicleHealth(vehicleid, VehicleInfo[vehicleid][vMaxHealth]);
        }
        case 2:
        {
            new Float:health;
            GetVehicleHealth(vehicleid, health);
            RepairVehicle(vehicleid);
            AC_SetVehicleHealth(vehicleid, health);
        }
        case 3: VehicleInfo[vehicleid][vEngineHealth] = 1000.0;
        case 4: VehicleInfo[vehicleid][vBatteryHealth] = 1000.0;
    }

    SunucuMesajiC(playerid, "Tamir iþlemi baþarýyla tamamlandý.");
    SunucuMesajiC(senderid, "Tamir iþlemi baþarýyla tamamlandý.");
    PlayerInfo[playerid][pRequestRepair] = -1;
    PlayerInfo[playerid][pRepairType] = 0;
    PlayerInfo[playerid][pRepairPrice] = 0;
    SaveVehicle(vehicleid);
    return 1;
}

NosYukle(playerid, senderid, vehicleid); public NosYukle(playerid, senderid, vehicleid)
{
    TogglePlayerControllable(playerid, true);
    PlayerInfo[playerid][pFreezed] = 0;

    switch(PlayerInfo[playerid][pRepairType])
    {
        case 1: // 2x
        {
            AddVehicleComponent(vehicleid, 1009);
        }
        case 2: // 5x
        {
            AddVehicleComponent(vehicleid, 1008);
        }
        case 3: { // 10x
            AddVehicleComponent(vehicleid, 1010);
        }
    }
    SunucuMesajiC(playerid, "Servis iþlemi baþarýyla tamamlandý.");
    SunucuMesajiC(senderid, "Servis iþlemi baþarýyla tamamlandý.");
    PlayerInfo[playerid][pRequestRepair] = -1;
    PlayerInfo[playerid][pRepairType] = 0;
    PlayerInfo[playerid][pRepairPrice] = 0;
    SaveVehicle(vehicleid);
    return 1;
}

RemoveTag(playerid); public RemoveTag(playerid) return
    DestroyDynamic3DTextLabelEx(PlayerInfo[playerid][pNameTag]);

DeleteInfoBox(playerid); public DeleteInfoBox(playerid)
{
    PlayerTextDrawHide(playerid, PlayerInfo[playerid][pTextdraws][1]);

    PlayerInfo[playerid][pBoxShowed] = false;

    return 1;
}

Unfreeze(playerid); public Unfreeze(playerid)
{
    if(PlayerInfo[playerid][pFreezed])
    {
        TogglePlayerControllable(playerid,true);
        PlayerInfo[playerid][pFreezed] = 0;
    }

    return 1;
}

OnPlayerSetData(playerid); public OnPlayerSetData(playerid)
{
    PlayerInfo[playerid][pJustSpawned] = false;

    AC_SetPlayerHealth(playerid, PlayerInfo[playerid][pHealth]);
    AC_SetPlayerArmour(playerid, PlayerInfo[playerid][pArmour]);

    for(new j; j < 12; j++)
    {
        if(PlayerInfo[playerid][pWeapons][j] != 0 && PlayerInfo[playerid][pAmmo][j] > 0)
            AC_GivePlayerWeapon(playerid, PlayerInfo[playerid][pWeapons][j], PlayerInfo[playerid][pAmmo][j]);

        PlayerInfo[playerid][pWeapons][j] = 0;
        PlayerInfo[playerid][pAmmo][j] = 0;
    }

    return 1;
}

TelefonKapat(playerid, id); public TelefonKapat(playerid, id)
{
    Phone_HangupCall(id);
    Phone_HangupCall(playerid);
    TogglePlayerControllable(playerid, 1);
    KillTimer(PlayerInfo[playerid][pCallTimer]);
    SunucuMesajiC(playerid, "Aradýðýnýz kiþi þu anda telefona cevap veremiyor, daha sonra tekrar deneyin.");
    SunucuMesajiC(id, "1 cevapsýz çaðrý.");
    return 1;
}

ToggleMoney(playerid, extraid); public ToggleMoney(playerid, extraid)
{
    new phoneOwner = (extraid == -1) ? playerid : extraid;
    new callerid = PlayerInfo[playerid][pMobile];
    new phoneid = PlayerInfo[phoneOwner][pPhoneID];
    new burnerID = Inventory_IsBurnerPhone(phoneOwner, phoneid);

    if(callerid == -1)return Phone_HangupCall(playerid);

    if(!IsPlayerConnected(callerid) || (!burnerID && PlayerInfo[phoneOwner][pCash] <= 0) || (burnerID && PlayerInfo[phoneOwner][pInvCredit][phoneid] <= 0) || !PlayerInfo[callerid][pLogged])
    {
        SunucuMesajiC(playerid, "Telefon çaðrýsý kesildi.");
        KillTimer(PlayerInfo[playerid][pCallTime]);
        PlayerInfo[playerid][pCallTime] = 0;
        Phone_HangupCall(playerid);
    }
    else
    {
        if(!burnerID)return OAC_GivePlayerMoney(phoneOwner, -CELL_PRICE);
        Inventory_BurnerCredit(phoneOwner, phoneid);
    }

    return 1;
}

BombAnim(actor); public BombAnim(actor)return
    ApplyDynamicActorAnimation(actor, "BOMBER", "BOM_Plant_Loop", 4.1, 1, 1, 0, 0, 0);

StopTrace(playerid); public StopTrace(playerid)
{
    PlayerInfo[playerid][pTracing] = false;
    AC_DisablePlayerCheckpoint(playerid);
    GangZoneDestroy(PlayerInfo[playerid][pGangZone]);
    PlayerInfo[playerid][pGangZone] = -1;

    SendClientMessageEx(playerid, COLOR_WHITE, "Baðlantý koptu.");

    return 1;
}

DeleteDP(playerid, slot); public DeleteDP(playerid, slot)
{
    if(!DPInfo[playerid][slot][dpExists])return 1;

    DPInfo[playerid][slot][dpExists] = 0;
    KillTimer(DPInfo[playerid][slot][dpTimer]);
    DestroyDynamic3DTextLabelEx(DPInfo[playerid][slot][dpText]);

    return 1;
}

StopRepairPD(playerid); public StopRepairPD(playerid)
{
    new vehicleid = GetPlayerVehicleID(playerid);

    RemoveTag(playerid);

    foreach(new p : Player) if(IsPlayerConnected(p) && GetPlayerVehicleID(p) == vehicleid)
    {
        TogglePlayerControllable(p, true);
        PlayerInfo[p][pFreezed] = 0;
    }

    Vehicle_Respray2(vehicleid);
    SunucuMesajiC(playerid, "Tamir iþlemi tamamlandý.");
    SetPVarInt(playerid, "pTamir", 0);
    SaveVehicle(vehicleid);
    return 1;
}

StopRepair(playerid, price, hurda); public StopRepair(playerid, price, hurda)
{
    if(GetPVarInt(playerid, "pTamir") > 0)
    {
        new vehicleid = GetPlayerVehicleID(playerid);
        new fid = PlayerInfo[playerid][pFaction];

        RemoveTag(playerid);

        foreach(new p : Player) if(IsPlayerConnected(p) && GetPlayerVehicleID(p) == vehicleid)
        {
            TogglePlayerControllable(p, true);
            PlayerInfo[p][pFreezed] = 0;
        }

        if(!PlayerInfo[playerid][pFactionDuty])
        {
            if(PlayerInfo[playerid][pCash] < price)return
                SetPVarInt(playerid, "pTamir", 0), HataMesaji(playerid, "Yeterli paran yok. ($%d)", price);

            AC_GivePlayerMoney(playerid, -price, "/tamir");
            SunucuMesaji(playerid, "Araç tamiri için $%d ödediniz.", price);
        }
        else FactionInfo[fid][fCash] -= 1;

        if(hurda == 1)
        {
            VehicleInfo[vehicleid][vHurda] = 0;
            SunucuMesaji(playerid, "Kapsamlý tamir iþlemi baþarýyla tamamlandý.");
        }
        else SunucuMesajiC(playerid, "Standart tamir iþlemi baþarýyla tamamlandý.");

        Vehicle_Respray2(vehicleid);

        LogYaz(playerid, "/tamir", -1, VehicleInfo[vehicleid][vID], (!PlayerInfo[playerid][pFactionDuty]) ? price : 0);
        SetPVarInt(playerid, "pTamir", 0);
        SaveVehicle(vehicleid);
    }
    return 1;
}

DragUpdate(playerid, targetid); public DragUpdate(playerid, targetid)
{
    if(PlayerInfo[targetid][pDragged] && PlayerInfo[targetid][pDraggedBy] == playerid)
    {
        new Float:fX, Float:fY, Float:fZ, Float:fAngle;

        GetPlayerPos(playerid, fX, fY, fZ);
        GetPlayerFacingAngle(playerid, fAngle);

        fX -= 3.0 * floatsin(-fAngle, degrees);
        fY -= 3.0 * floatcos(-fAngle, degrees);

        SetPlayerPos(targetid, fX, fY, fZ);
        SetPlayerInterior(targetid, GetPlayerInterior(playerid));
        AC_SetPlayerVirtualWorld(targetid, GetPlayerVirtualWorld(playerid));
    }

    return 1;
}

CheatTimer(x); public CheatTimer(x)
{
    if(!IsPlayerConnected(x) || !PlayerInfo[x][pLogged])
    {
        KillTimer(PlayerInfo[x][pCheatTimer]);
        return PlayerInfo[x][pCheatTimer] = 0;
    }

    if(!PlayerInfo[x][pAFKTime] && PlayerInfo[x][pInRecon] == -1 && !PlayerInfo[x][pAdminDuty] && !PlayerInfo[x][pJustSpawned])
    {
        //if(PlayerInfo[x][pFreezed])
            //TogglePlayerControllable(x, false);

        /*new id = PlayerInfo[x][pCarryCrate];

        if(PlayerInfo[x][pCarryCrate] != -1 && CrateInfo[id][crPlayer] != x) foreach(new p : Player) if(IsPlayerConnected(p) && PlayerInfo[p][pLogged] && PlayerInfo[p][pCarryCrate] == id && p != x)
        {
            SetPlayerSpecialAction(x, SPECIAL_ACTION_NONE);
            RemovePlayerAttachedObject(x, 9);
            PlayerInfo[x][pCarryCrate] = -1;
            CrateInfo[id][crPlayer] = x;
        }*/

        /*if(IsPlayerInAnyVehicle(x) && PlayerInfo[x][pCarryCrate] != -1)
        {
            RemovePlayerAttachedObject(x, 9);
            PlayerInfo[x][pCarryCrate] = -1;
            Crate_Delete(x);
            //ClearAnimations(x);
        }*/

        if(PlayerInfo[x][pClickedTick] > 0 && PlayerInfo[x][pClickedX] != 0.0 && PlayerInfo[x][pAdmin] < 2)
        {
            new lastTick = GetTickCount() - PlayerInfo[x][pClickedTick];

            if(IsPlayerInRangeOfPoint(x, 2.0, PlayerInfo[x][pClickedX], PlayerInfo[x][pClickedY], PlayerInfo[x][pClickedZ]) && lastTick < 4000)
                AC_Detect(x, AC_TELEPORT_CODE);
        }

        if(GetPlayerCameraMode(x) == 53)
        {
            new Float:cameraPos[3];
            GetPlayerCameraPos(x, cameraPos[0], cameraPos[1], cameraPos[2]);

            if(cameraPos[2] < -50000.0 || cameraPos[2] > 50000.0)
                AC_Detect(x, AC_CRASHER_CODE);
        }

        new weapons[12], ammo[12], p_weapon, p_ammo, str[32];
        new warnings;

        for(new j; j < 12; j++)
        {
            GetPlayerWeaponData(x, j, weapons[j], ammo[j]);
            format(str, sizeof(str), "weapon%d", j); p_weapon = GetPVarInt(x, str);
            format(str, sizeof(str), "ammo%d", j); p_ammo = GetPVarInt(x, str);

            if(weapons[j] == 46 || weapons[j] == 2)continue;

            if(p_ammo != 0 && ammo[j] > p_ammo && weapons[j] == p_weapon && weapons[j] != 0)
            {
                AC_Detect(x, AC_AMMO_CODE, warnings); if(PlayerInfo[x][pCheatWarnings][AC_AMMO_CODE] < warnings)continue;
                format(str, sizeof(str), "ammo%d", j);
                SetPVarInt(x, str, (ammo[j] <= p_ammo) ? ammo[j] : p_ammo);
                PlayerInfo[x][pScriptedAmmo][j] = (ammo[j] <= p_ammo) ? ammo[j] : p_ammo;
                AC_SetPlayerAmmo(x, weapons[j], PlayerInfo[x][pScriptedAmmo][j]);
            }

            new puyari = GetPVarInt(x, "puyari");
            if(p_ammo != 0 && ammo[j] < -1 && weapons[j] == p_weapon && weapons[j] != 0)
            {
                puyari++;
                SendAdminAlert(false, COLOR_YELLOW, "AdmWarn: %s (%d) sýnýrsýz mermi hilesi kullanýyor olabilir. [UYARI %d]", ReturnRoleplayName(x), x, puyari);
                SetPVarInt(x, "puyari", puyari);
            }

            if(weapons[j] != p_weapon && weapons[j] != 0)
            {
                AC_Detect(x, AC_SPAWNEDGUNS_CODE); if(PlayerInfo[x][pCheatWarnings][AC_SPAWNEDGUNS_CODE] < warnings)continue;
                format(str, sizeof(str), "weapon%d", j); SetPVarInt(x, str, 0);
                format(str, sizeof(str), "ammo%d", j); SetPVarInt(x, str, 0);
                PlayerInfo[x][pScriptedGun][j] = 0;
                PlayerInfo[x][pScriptedAmmo][j] = 0;
                AC_RemovePlayerWeapon(x, weapons[j]);
            }

            else continue;
        }

        new Float:hp, Float:s_hp;
        GetPlayerHealth(x, hp);
        AC_GetPlayerHealth(x, s_hp);

        if(hp > s_hp && !PlayerInfo[x][pDeath] && s_hp > 0)
        {
            AC_Detect(x, AC_HEALTH_CODE, warnings);
            if(PlayerInfo[x][pCheatWarnings][AC_HEALTH_CODE] >= warnings) AC_SetPlayerHealth(x, hp);
        }
        else AC_SetPlayerHealth(x, hp);

        new Float:ap, Float:s_ap;
        GetPlayerArmour(x, ap);
        AC_GetPlayerArmour(x, s_ap);

        if(ap > s_ap && !PlayerInfo[x][pDeath] && s_ap > 0)
        {
            AC_Detect(x, AC_ARMOUR_CODE, warnings);
            if(PlayerInfo[x][pCheatWarnings][AC_ARMOUR_CODE] >= warnings) AC_SetPlayerArmour(x, ap);
        }
        else AC_SetPlayerArmour(x, ap);

        if(GetPlayerSpecialAction(x) == SPECIAL_ACTION_USEJETPACK && PlayerInfo[x][pAdmin] < 2)
            AC_Detect(x, AC_JETPACK_CODE);

        if(GetPlayerPing(x) < 400 && GetPVarInt(x, "NoControlForCamHack") < 1 && PlayerInfo[x][pLogged] && GetPlayerState(x) == PLAYER_STATE_SPECTATING && PlayerInfo[x][pAdmin] < 2 && PlayerInfo[x][pSnakeCamActor] == -1) //&& !PlayerInfo[x][Rehineyim] && !PlayerInfo[x][pTVMode])
            AC_Detect(x, AC_INVISIBLE_CODE);
    }

    AC_ResetTimer(x);

    return 1;
}

flags:vcalinmafix(CMD_GAME2);
CMD:vcalinmafix(playerid, params[])
{
    new vid;
    if(IsPlayerInAnyVehicle(playerid)) vid = GetPlayerVehicleID(playerid);

    if(!vid && sscanf(params, "d",vid))return
        KullanimMesajiC(playerid, "/vcalinmafix [araç id]");

    if(!IsValidVehicle(vid))return
        SunucuMesajiC(playerid, "Varolmayan araç.");

    if(VehicleInfo[vid][vHirsizlik])
    {
        VehicleInfo[vid][vHirsizlik] = 0;
        BasariMesaji(playerid, "%d nolu araç artýk çalýnabilir.", vid);
    }
    else
    {
        VehicleInfo[vid][vHirsizlik] = 1;
        BasariMesaji(playerid, "%d nolu araç artýk çalýnamaz.", vid);
    }
    return 1;
}

flags:vcalinmafixs(CMD_GAME2);
CMD:vcalinmafixs(playerid, params[])
{
    mysql_format(ourConnection, queryx, sizeof(queryx), "UPDATE vehicles SET calinma = '0'");
    mysql_tquery(ourConnection, queryx);
    foreach(new xvid : Vehicles)
    {
        VehicleInfo[xvid][vHirsizlik] = 0;
    }
    SendAdminAlert(true, COLOR_ADMIN, "AdmWarn: Sunucu tüm araçlarýn çalýnma korumasýný sýfýrladý. (%s)", ReturnRoleplayName(playerid));
    return 1;
}

AracaKoy(playerid, veh, koltuk); public AracaKoy(playerid, veh, koltuk) {
    PutPlayerInVehicle(playerid, veh, koltuk);
    return 1;
}

new xlabelstring[64], xtimestring[32], xtime, xname[32], xamount, xquality, vergi, ek, xpara, xbanka, Cache:xveri;
static xrows, xfields;
new xyear, xmonth, xday, xstr[5];

DakikaTimer(); public DakikaTimer()
{
    SunucuBilgi[ReklamVerildi] = 0;
    
    if(audience < 0) audience = 0;
    
    new saat, dakika, saniye;
    gettime(saat, dakika, saniye);
    
    getdate(xyear, xmonth, xday);
    switch(xmonth)
    {
        case 1:  xstr = "01";
        case 2:  xstr = "02";
        case 3:  xstr = "03";
        case 4:  xstr = "04";
        case 5:  xstr = "05";
        case 6:  xstr = "06";
        case 7:  xstr = "07";
        case 8:  xstr = "08";
        case 9:  xstr = "09";
        case 10: xstr = "10";
        case 11: xstr = "11";
        case 12: xstr = "12";
    }

    if(dakika == 55)
        SendClientMessageToAll(COLOR_LIGHTRED, "[PÝYANGO]: {FFFFFF}Piyango çekiliþi 5 dakika sonra yapýlacak! Bilet almak için 24/7'ye gidin. (/piyangoal)");

    if(saat == 9 && dakika == 0 || saat == 10 && dakika == 0 || saat == 11 && dakika == 0 ||
    saat == 12 && dakika == 0 || saat == 13 && dakika == 0 || saat == 14 && dakika == 0 ||
    saat == 15 && dakika == 0 || saat == 16 && dakika == 0 || saat == 17 && dakika == 0 || saat == 18 && dakika == 0)
    {
        SunucuBilgi[CurrentWeather] = 0;
    }
    else
    {
        SunucuBilgi[CurrentWeather] = 18;
    }
    if(saat == 22 && dakika == 59)
    {
        foreach(new cq : Player)
        {
            PlayerInfo[cq][pHirsizlik] = 0;
        }
        mysql_tquery(ourConnection, "UPDATE accounts SET hirsizlik = '0'");
        printf("Oyunculara ait tüm hýrsýzlýk limitleri sýfýrlandý.");
    }
    if(saat == 0 && dakika == 0)
    {
        mysql_tquery(ourConnection, "UPDATE accounts SET calinanarac = '0'");
        foreach(new pl : Player) {
            PlayerInfo[pl][pCalinanArac] = 0;
            if(PlayerInfo[pl][pJailTime] > 1 && GetPVarInt(pl, "JailBugKurtar") == 1) DeletePVar(pl, "JailBugKurtar");
        }
        SendAdminAlert(true, COLOR_ADMIN, "AdmWarn: Sunucu tüm hesaplarýn çalma limitini sýfýrladý.");
        printf("%s tarihinde tum hesaplarin calma limiti sifirlandi.", ReturnDate());

        mysql_format(ourConnection, queryx, sizeof(queryx), "UPDATE vehicles SET calinma = '0'");
        mysql_tquery(ourConnection, queryx);
        foreach(new xvid : Vehicles)
        {
            VehicleInfo[xvid][vHirsizlik] = 0;
        }
        SendAdminAlert(true, COLOR_ADMIN, "AdmWarn: Sunucu tüm araçlarýn çalýnma korumasýný sýfýrladý.");
        printf("%s tarihinde tum araclarin calinma korumasi sifirlandi.", ReturnDate());
    }
    if(dakika == 0)
    {
        foreach(new h : Houses) if(HouseInfo[h][hExists])
        {
            if(HouseInfo[h][Kira] == 0)continue;
            if(HouseInfo[h][Kiraci] == 0)continue;

            if(IsPlayerOnlineID(HouseInfo[h][Kiraci]) && PlayerInfo[IsPlayerOnlineID(HouseInfo[h][Kiraci])][pLogged])
            {
                if(PlayerInfo[IsPlayerOnlineID(HouseInfo[h][Kiraci])][pCashBank] >= HouseInfo[h][Kira])
                {
                    PlayerInfo[IsPlayerOnlineID(HouseInfo[h][Kiraci])][pCashBank] -= HouseInfo[h][Kira];
                    BasariMesaji(IsPlayerOnlineID(HouseInfo[h][Kiraci]), "%d nolu ev için banka hesabýnýzdan $%d kira ödemesi yapýldý.", h, HouseInfo[h][Kira]);
                }
                else if(PlayerInfo[IsPlayerOnlineID(HouseInfo[h][Kiraci])][pCash] >= HouseInfo[h][Kira])
                {
                    OAC_GivePlayerMoney(IsPlayerOnlineID(HouseInfo[h][Kiraci]), -(HouseInfo[h][Kira]));
                    BasariMesaji(IsPlayerOnlineID(HouseInfo[h][Kiraci]), "%d nolu ev için üzerinizdeki paradan $%d kira ödemesi yapýldý.", h, HouseInfo[h][Kira]);
                }
                else
                {
                    if(IsPlayerOnlineID(HouseInfo[h][hOwner]) && PlayerInfo[HouseInfo[h][hOwner]][pLogged])
                        SunucuMesaji(IsPlayerOnlineID(HouseInfo[h][hOwner]), "%d nolu evinizdeki kiracý (%s) sistem tarafýndan kovuldu. (%d)", h, GetCharacterName(HouseInfo[h][Kiraci]), ReturnDate());

                    HouseInfo[h][Kiraci] = 0;
                    HouseInfo[h][Kira] = 0;
                    HataMesaji(IsPlayerOnlineID(HouseInfo[h][Kiraci]), "Kira ücretini karþýlayacak paranýz olmadýðý için %d nolu evden atýldýnýz. (%s)", h, ReturnDate());
                }
            }
            else
            {
                mysql_format(ourConnection, queryx, sizeof queryx, "SELECT cash, cash_bank FROM characters WHERE id = '%d' AND banned = '0'", HouseInfo[h][Kiraci]);
                xveri = mysql_query(ourConnection, queryx, true);
                
                cache_get_row_count(xrows);
                cache_get_field_count(xfields);
                
                if(xrows)
                {
                    cache_get_value_int(0, "cash", xpara);
                    cache_get_value_int(0, "cash_bank", xbanka);
                    cache_delete(xveri);

                    if(xbanka >= HouseInfo[h][Kira])
                    {
                        xbanka -= HouseInfo[h][Kira];
                        mysql_format(ourConnection, queryx, sizeof(queryx), "UPDATE characters SET cash_bank = '%d' WHERE id = '%d'", xbanka, HouseInfo[h][Kiraci]);
                        mysql_tquery(ourConnection, queryx);
                    }
                    else if(xpara >= HouseInfo[h][Kira])
                    {
                        xpara -= HouseInfo[h][Kira];
                        mysql_format(ourConnection, queryx, sizeof(queryx), "UPDATE characters SET cash = '%d' WHERE id = '%d'", xpara, HouseInfo[h][Kiraci]);
                        mysql_tquery(ourConnection, queryx);
                    }
                    else
                    {
                        if(IsPlayerOnlineID(HouseInfo[h][hOwner]) && PlayerInfo[HouseInfo[h][hOwner]][pLogged])
                            SunucuMesaji(IsPlayerOnlineID(HouseInfo[h][hOwner]), "%d nolu evinizdeki kiracý (%s) sistem tarafýndan kovuldu. (%d)", h, GetCharacterName(HouseInfo[h][Kiraci]), ReturnDate());

                        HouseInfo[h][Kiraci] = 0;
                        HouseInfo[h][Kira] = 0;
                    }
                }
                else
                {
                    if(IsPlayerOnlineID(HouseInfo[h][hOwner]) && PlayerInfo[HouseInfo[h][hOwner]][pLogged])
                        SunucuMesaji(IsPlayerOnlineID(HouseInfo[h][hOwner]), "%d nolu evinizdeki kiracý sistem tarafýndan kovuldu. (%d)", h, ReturnDate());

                    HouseInfo[h][Kiraci] = 0;
                    HouseInfo[h][Kira] = 0;
                    cache_delete(xveri);
                }
            }
        }

        new piyangoRand;
        do {
            piyangoRand = 1 + random(MAKSBILETNUMARASI);
        } while(piyangoRand >= MAKSBILETNUMARASI);
        new kazananID = -1;
        foreach(new i: Player) {
            if(PlayerInfo[i][pLogged] == 0) continue;
            if(PlayerInfo[i][pAldigiBilet] == 0) continue;
            if(PlayerInfo[i][pAldigiBilet] != piyangoRand) continue;
            kazananID = i;
            break;
        }
        new string[128];
        if(kazananID == -1) {
            format(string, sizeof string, "[PÝYANGO]: {FFFFFF}Þanslý numara %d için kazanan olmadý, $%d sonraki çekiliþe devredildi.", piyangoRand, BASLANGICPARASI);
            SendClientMessageToAll(COLOR_LIGHTRED, string);
            //format(string, sizeof string, "[PÝYANGO]: {FFFFFF}Ödül olan $%d sonraki çekiliþe devredecek.", BASLANGICPARASI);
            //SendClientMessageToAll(COLOR_LIGHTRED, string);
        } else {
            format(string, sizeof string, "[PÝYANGO]: {FFFFFF}Þanslý numara %d için kazanan %s oldu, $%d ödendi!", piyangoRand, ReturnRoleplayName(kazananID), BASLANGICPARASI);
            SendClientMessageToAll(COLOR_LIGHTRED, string);
            //format(string, sizeof string, "[PÝYANGO]: {FFFFFF}Ödül olan $%d kiþiye ödendi.", BASLANGICPARASI);
            //SendClientMessageToAll(COLOR_LIGHTRED, string);
            AC_GivePlayerMoney(kazananID, BASLANGICPARASI, "piyango");
            BASLANGICPARASI = 2000;
        }
        PiyangoSifirla();
        foreach(new vidm : Vehicles)
        {
            vergi = 0;
            ek = 0;
            if(IsValidVehicle(vidm) && !DevletAraci(vidm) && !IsABike(vidm) && VehicleInfo[vidm][vPrice] > 1)
            {
                for(new ci; ci < sizeof(AracVergi); ++ci)
                {
                    if(VehicleInfo[vidm][vMaxHealth] >= 1300) ek = 6;
                    else if(VehicleInfo[vidm][vMaxHealth] >= 1200) ek = 4;
                    else if(VehicleInfo[vidm][vMaxHealth] >= 1100) ek = 2;
                    
                    if(AracVergi[ci][avModelID] == VehicleInfo[vidm][vModel])
                        vergi = AracVergi[ci][avVergi] + ek;
                }
                VehicleInfo[vidm][vVergi] += vergi * SunucuBilgi[PaydayOrani];
            }
        }
        for(new qid; qid < sizeof(AracVergi); ++qid)
        {
            mysql_format(ourConnection, queryx, sizeof(queryx), "UPDATE vehicles SET vergi = vergi + '%d' WHERE price > '0' AND spawned = '0' AND model = '%d'", AracVergi[qid][avVergi] * SunucuBilgi[PaydayOrani], AracVergi[qid][avModelID]);
            mysql_tquery(ourConnection, queryx);
        }

        foreach(new hv : Houses)
        {
            if(HouseInfo[hv][hOwner] > 0 && HouseInfo[hv][hExists])
            {
                new VergiUcreti = (HouseInfo[hv][hPrice] / 10000 * 3) * SunucuBilgi[PaydayOrani];
                new IndirimliVergiUcreti = VergiUcreti - ((VergiUcreti * 60) / 100);
                HouseInfo[hv][hVergi] += IndirimliVergiUcreti;
                SaveHouse(hv);
            }
        }
        foreach(new bv : Buildings)
        {
            if(BuildingInfo[bv][bOwner] > 0 && BuildingInfo[bv][bExists])
            {
                if(BuildingInfo[bv][bType] == GARAJ || BuildingInfo[bv][bType] == BUILDING || BuildingInfo[bv][bType] == COMPLEX) {
                    new VergiUcreti = (BuildingInfo[bv][bPrice] / 10000 * 1) * SunucuBilgi[PaydayOrani];
                    new IndirimliVergiUcreti = VergiUcreti - ((VergiUcreti * 60) / 100);
                    BuildingInfo[bv][bVergi] += IndirimliVergiUcreti;
                }

                else {
                    new VergiUcreti = (BuildingInfo[bv][bPrice] / 10000 * 5) * SunucuBilgi[PaydayOrani]; 
                    new IndirimliVergiUcreti = VergiUcreti - ((VergiUcreti * 60) / 100);
                    BuildingInfo[bv][bVergi] += IndirimliVergiUcreti;
                }

                SaveBuilding(bv);
            }
        }

        printf("%s tum araclara, evlere, isletmelere vergi islendi, iyi eglenceler.", ReturnDate());

        Taxes_Update();
        foreach(new k: Companies) if(CompanyInfo[k][cValid])
        {
            if(CompanyInfo[k][sirketid] == 1)
                CompanyInfo[k][stok] = 0;
            else if(CompanyInfo[k][sirketid] != 1)
                CompanyInfo[k][stok] = CompanyInfo[k][mstok] - 50;
            else if(CompanyInfo[k][cBuyType] == 22)
                CompanyInfo[k][stok] = 0;
                
            if(CompanyInfo[k][stok] < 0) CompanyInfo[k][stok] = 0;
            if(CompanyInfo[k][mstok] < 0) CompanyInfo[k][mstok] = 0;

            Company_RefreshText(k);
        }
        foreach(new uid : EkilenUyusturucular) if(EUBilgi[uid][euStatus]) SaveEU(uid);
        foreach(new cqid : Vehicles) SaveVehicleElements(cqid);
    }
    else if(dakika == 15)
    {
        foreach(new vvvid : Vehicles) SaveVehicleElements(vvvid);
        Taxes_Update();
        foreach(new xuid : EkilenUyusturucular) if(EUBilgi[xuid][euStatus]) SaveEU(xuid);
    }
    else if(dakika == 30)
    {
        foreach(new vvid : Vehicles) SaveVehicleElements(vvid);
        Taxes_Update();
        foreach(new xxuid : EkilenUyusturucular) if(EUBilgi[xxuid][euStatus]) SaveEU(xxuid);
    }
    else if(dakika == 45)
    {
        foreach(new vid : Vehicles) SaveVehicleElements(vid);
        Taxes_Update();
        foreach(new xxxuid : EkilenUyusturucular) if(EUBilgi[xxxuid][euStatus]) SaveEU(xxxuid);
    }
    
    foreach(new vehid : Vehicles) if(IsValidVehicle(vehid))
    {
        if(VehicleInfo[vehid][vKiralayan] != -1 && VehicleInfo[vehid][vKiralik] != -1)
        {
            if(VehicleInfo[vehid][vKiralik] > 0)
            {
                VehicleInfo[vehid][vKiralik]--;
                
                if(VehicleInfo[vehid][vKiralik] == 10)
                {
                    foreach(new cqi : Player)
                    {
                        if(!IsPlayerConnected(cqi) || !PlayerInfo[cqi][pLogged])continue;

                        if(VehicleInfo[vehid][vKiralayan] == PlayerInfo[cqi][pID])
                        {
                            BasariMesaji(cqi, "Kiraladýðýnýz %s model aracýn son 10 dakikasý kaldý!", GetVehicleModelName(VehicleInfo[vehid][vModel]));
                            break;
                        }
                    }
                }
                    
                if(VehicleInfo[vehid][vKiralik] == 0)
                {
                    VehicleInfo[vehid][vKiralayan] = -1;
                    VehicleInfo[vehid][vKiralik] = -1;

                    foreach(new xcqi : Player)
                    {
                        if(!IsPlayerConnected(xcqi) || !PlayerInfo[xcqi][pLogged])continue;
                        if(VehicleInfo[vehid][vKiralayan] == PlayerInfo[xcqi][pID])
                        {
                            BasariMesaji(xcqi, "Kiraladýðýnýz %s model aracýn kira süresi bitti.", GetVehicleModelName(VehicleInfo[vehid][vModel]));
                            break;
                        }
                    }
                    
                    SaveVehicle(vehid);
                    
                    if(VehicleInfo[vehid][vIAKS] == 0)
                    {
                        Vehicle_Despawn(vehid);
                    }
                    else
                    {
                        foreach(new i : KiralikAraclar)
                        {
                            if(KiralikArac[i][kaID] == VehicleInfo[vehid][vID])
                            {
                                KiralikArac[i][kaKiralandi] = false;
                                KiralikArac[i][kaKiralayan] = -1;
                                break;
                            }
                                
                        }
                        if(VehicleInfo[vehid][vLocked])
                        {
                            VehicleInfo[vehid][vLocked] = !VehicleInfo[vehid][vLocked];
                            SetVehicleParamsEx(vehid, VehicleInfo[vehid][vEngine], VehicleInfo[vehid][vLights], VEHICLE_PARAMS_OFF, VehicleInfo[vehid][vLocked], VehicleInfo[vehid][vBonnet], VehicleInfo[vehid][vBoot], VehicleInfo[vehid][vObje]);
                        }
                        Vehicle_ClearCargo(vehid);
                        Vehicle_Respawn2(vehid);
                    }
                    
                    for(new icc; icc < 4; icc++)
                    {
                        AracYolcu[vehid][icc] = -1;
                        AracKoltuk[vehid][icc] = 0;
                    }
                }
            }
        }
    }

    foreach(new uid : EkilenUyusturucular)
    {
        if(EUBilgi[uid][euStatus])
        {
            EUBilgi[uid][euTime]++;

            xtime = EUBilgi[uid][euTime];

            if(xtime == 60)
            {
                format(xtimestring, 32, "{00FF00}1 saat");

                switch(EUBilgi[uid][euType])
                {
                    case 1: format(xlabelstring, 64, "Haþhaþ\n%s", xtimestring);
                    case 2: format(xlabelstring, 64, "Marijuana\n%s", xtimestring);
                }
                DestroyDynamic3DTextLabelEx(EUBilgi[uid][euLabel]);
                EUBilgi[uid][euLabel] = CreateDynamic3DTextLabel(xlabelstring, COLOR_WHITE, EUBilgi[uid][euPos][0], EUBilgi[uid][euPos][1], EUBilgi[uid][euPos][2], 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, EUBilgi[uid][euVWorld], EUBilgi[uid][euInterior], -1);
                SaveEU(uid);
            }
            else if(xtime == 60 * 2)
            {
                format(xtimestring, 32, "{00FF00}2 saat");
                switch(EUBilgi[uid][euType])
                {
                    case 1: format(xlabelstring, 64, "Haþhaþ\n%s", xtimestring);
                    case 2: format(xlabelstring, 64, "Marijuana\n%s", xtimestring);
                }
                DestroyDynamic3DTextLabelEx(EUBilgi[uid][euLabel]);
                EUBilgi[uid][euLabel] = CreateDynamic3DTextLabel(xlabelstring, COLOR_WHITE, EUBilgi[uid][euPos][0], EUBilgi[uid][euPos][1], EUBilgi[uid][euPos][2], 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, EUBilgi[uid][euVWorld], EUBilgi[uid][euInterior], -1);
                SaveEU(uid);
            }
            else if(xtime == 60 * 3)
            {
                format(xtimestring, 32, "{00FF00}3 saat");

                switch(EUBilgi[uid][euType])
                {
                    case 1: format(xlabelstring, 64, "Haþhaþ\n%s", xtimestring);
                    case 2: format(xlabelstring, 64, "Marijuana\n%s", xtimestring);
                }
                DestroyDynamic3DTextLabelEx(EUBilgi[uid][euLabel]);
                EUBilgi[uid][euLabel] = CreateDynamic3DTextLabel(xlabelstring, COLOR_WHITE, EUBilgi[uid][euPos][0], EUBilgi[uid][euPos][1], EUBilgi[uid][euPos][2], 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, EUBilgi[uid][euVWorld], EUBilgi[uid][euInterior], -1);
                SaveEU(uid);
            }
            else if(xtime == 60 * 4)
            {

                format(xtimestring, 32, "{00FF00}4 saat");

                switch(EUBilgi[uid][euType])
                {
                    case 1: format(xlabelstring, 64, "Haþhaþ\n%s", xtimestring);
                    case 2: format(xlabelstring, 64, "Marijuana\n%s", xtimestring);
                }
                DestroyDynamic3DTextLabelEx(EUBilgi[uid][euLabel]);
                EUBilgi[uid][euLabel] = CreateDynamic3DTextLabel(xlabelstring, COLOR_WHITE, EUBilgi[uid][euPos][0], EUBilgi[uid][euPos][1], EUBilgi[uid][euPos][2], 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, EUBilgi[uid][euVWorld], EUBilgi[uid][euInterior], -1);
                SaveEU(uid);
            }
            else if(xtime == 60 * 5)
            {
                format(xtimestring, 32, "{00FF00}5 saat");

                switch(EUBilgi[uid][euType])
                {
                    case 1: format(xlabelstring, 64, "Haþhaþ\n%s", xtimestring);
                    case 2: format(xlabelstring, 64, "Marijuana\n%s", xtimestring);
                }
                DestroyDynamic3DTextLabelEx(EUBilgi[uid][euLabel]);
                EUBilgi[uid][euLabel] = CreateDynamic3DTextLabel(xlabelstring, COLOR_WHITE, EUBilgi[uid][euPos][0], EUBilgi[uid][euPos][1], EUBilgi[uid][euPos][2], 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, EUBilgi[uid][euVWorld], EUBilgi[uid][euInterior], -1);
                SaveEU(uid);
            }
            else if(xtime == 60 * 6)
            {
                format(xtimestring, 32, "{FF0000}Solmuþ");

                switch(EUBilgi[uid][euType])
                {
                    case 1: format(xlabelstring, 64, "Haþhaþ\n%s", xtimestring);
                    case 2: format(xlabelstring, 64, "Marijuana\n%s", xtimestring);
                }
                DestroyDynamic3DTextLabelEx(EUBilgi[uid][euLabel]);
                EUBilgi[uid][euLabel] = CreateDynamic3DTextLabel(xlabelstring, COLOR_WHITE, EUBilgi[uid][euPos][0], EUBilgi[uid][euPos][1], EUBilgi[uid][euPos][2], 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, EUBilgi[uid][euVWorld], EUBilgi[uid][euInterior], -1);
                SaveEU(uid);
            }
        }
    }
    foreach(new i : Player)
    {
        if(!IsPlayerConnected(i) || !PlayerInfo[i][pLogged])continue;
        
        /*if(PlayerInfo[i][pHud])
        {
            ReloadPlayerHud(i, xday, xyear, saat, dakika, xstr);
        }*/
        
        if(GetPlayerPing(i) < 300 && GetPlayerState(i) != PLAYER_STATE_SPECTATING && GetPlayerState(i) != PLAYER_STATE_WASTED && GetPlayerState(i) != PLAYER_STATE_SPAWNED)
        {
            GetPlayerPos(i, PlayerInfo[i][pPosX], PlayerInfo[i][pPosY], PlayerInfo[i][pPosZ]);
            GetPlayerFacingAngle(i, PlayerInfo[i][pPosA]);
            PlayerInfo[i][pCrashInt] = GetPlayerInterior(i);
            PlayerInfo[i][pCrashWorld] = GetPlayerVirtualWorld(i);
        }
        
        if(PlayerInfo[i][pReportTime] && PlayerInfo[i][pRequestCount])
        {
            PlayerInfo[i][pReportTime] += 1;
            if(PlayerInfo[i][pReportTime] == 16)
            {
                Request_Reset(i);
                SunucuMesajiC(i, "Gönderdiðin talep zaman aþýmý kapsamýnda sistem tarafýndan iptal edildi.");
                SunucuMesajiC(i, "forum.sa-rp.com adresinden talebine çözüm bulabilirsin.");
            }
        }

        if(PlayerInfo[i][pDestekIstedi][0]) {
            new location[MAX_ZONE_NAME], Float:pX, Float:pY, Float:pZ;
            GetPlayerPos(i, pX, pY, pZ);
            GetCoords2DZone(pX, pY, location, MAX_ZONE_NAME);
            SendFactionMessage(0, "[OPERATÖR]: Destek isteyen %s %s, þu an %s konumunda.", fRanks[PlayerInfo[i][pFaction]][PlayerInfo[i][pRank]-1], ReturnRoleplayName(i), location);
        }
        if(PlayerInfo[i][pDestekIstedi][1]) {
            new location[MAX_ZONE_NAME], Float:pX, Float:pY, Float:pZ;
            GetPlayerPos(i, pX, pY, pZ);
            GetCoords2DZone(pX, pY, location, MAX_ZONE_NAME);
            SendFactionMessage(1, "[OPERATÖR]: Destek isteyen %s %s, þu an %s konumunda.", fRanks[PlayerInfo[i][pFaction]][PlayerInfo[i][pRank]-1], ReturnRoleplayName(i), location);
        }

        if(PlayerInfo[i][pDrugster])
        {
            if(PlayerInfo[i][pDrugCrisis] == 1)
            {
                SunucuMesajiC(i, "Uyuþturucuya ihtiyaç duyuyorsun, dudaklarýnda ve gözlerinde kuruluk hissediyorsun.");
                PlayerInfo[i][pDrugVar] = true;
                SetPlayerDrunkLevel(i, 5000);
                PlayerInfo[i][pDrugCrisis] = 2;
                TextDrawShowForPlayer(i, BlindFold);
                SetTimerEx("GozlerTrilyon", 500, false, "d", i);

            }
            else if(PlayerInfo[i][pDrugCrisis] == 2)
            {
                SunucuMesajiC(i, "Uyuþturucuya ihtiyaç duyuyorsun, krizin etkileri ve baþ dönmen hýzla artýyor.");
                PlayerInfo[i][pDrugVar] = true;
                SetPlayerDrunkLevel(i, 6000);
                PlayerInfo[i][pDrugCrisis] = 3;
                PlayerInfo[i][pDrugRunJumpBlock] = true;
                TextDrawShowForPlayer(i, BlindFold);
                SetTimerEx("GozlerTrilyon", 500, false, "d", i);

            }
            else if(PlayerInfo[i][pDrugCrisis] == 3)
            {
                SunucuMesajiC(i, "Uyuþturucuya ihtiyaç duyuyorsun, baþ dönmen hýzla artýyor ve üzerine bir aðýrlýk çöküyor.");
                PlayerInfo[i][pDrugVar] = true;
                SetPlayerDrunkLevel(i, 7000);
                PlayerInfo[i][pDrugCrisis] = 4;
                PlayerInfo[i][pDrugRunJumpBlock] = true;

                TextDrawShowForPlayer(i, BlindFold);
                SetTimerEx("GozlerTrilyon", 500, false, "d", i);
            }
            else if(PlayerInfo[i][pDrugCrisis] == 4)
            {
                SunucuMesajiC(i, "Uyuþturucuya ihtiyaç duyuyorsun, yoksunluk krizinin son aþamalarýndasýn. Desteðe ihtiyacýn var.");
                PlayerInfo[i][pDrugVar] = true;
                SetPlayerDrunkLevel(i, 8000);
                PlayerInfo[i][pDrugCrisis] = 5;
                PlayerInfo[i][pDrugRunJumpBlock] = true;
            }
            else if(PlayerInfo[i][pDrugCrisis] == 5)
            {
                for (new x; x < 12; x++)
                {
                    PlayerInfo[i][pDrugAddiction][x] = 0;
                    PlayerInfo[i][pDrugEffects][x] = 0;
                }
                PlayerInfo[i][pDrugCrisis] = 0; // Kriz
                PlayerInfo[i][pDrugRemainingTime] = 2; // Krize kalan sure
                PlayerInfo[i][pDrugRunJumpBlock] = false; // engel
                PlayerInfo[i][pDrugUnconscious] = false; // baygin
                PlayerInfo[i][pDrugVar] = false;
                PlayerInfo[i][BagimlilikTedavi] = 0;
                SetPlayerDrunkLevel(i, 0);
                SetPlayerWeather(i, SunucuBilgi[CurrentWeather]);
                SetPlayerTime(i, SunucuBilgi[CurrentHour], 0);

                PlayerInfo[i][pFreezed] = 0;
                TogglePlayerControllable(i, true);
                DestroyDynamic3DTextLabelEx(PlayerInfo[i][pNameTag]);
                BasariMesaji(i, "Yoksunluk krizi son evre bakým modunda, kriz eþiðin 2 saat olarak güncellendi.");
                BasariMesaji(i, "Baðýmlýlýk tedavisi için hastane ve kliniklerden Suboxone türevi ilaçlar alabilirsin.");
                /*PlayerInfo[i][pDrugVar] = false;
                SunucuMesajiC(i, "Yoksunluk krizinin son evresindesin, artýk kendinde deðilsin. Týbbi destek gerekiyor.");
                PlayerInfo[i][pDrugCrisis] = 6;

                SetPlayerDrunkLevel(i, 0);
                PlayerInfo[i][pNameTag] = CreateDynamic3DTextLabel("(( Bu kullanýcý yoksunluk krizi geçiriyor. ))", COLOR_ADMIN, 0, 0, 0.5, 30.0, i, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0);

                SetPlayerSpecialAction(i, SPECIAL_ACTION_NONE);
                PlayerInfo[i][pLoopAnim] = false;

                if(GetPlayerState(i) == PLAYER_STATE_DRIVER) ClearAnimations(i);
                if(!PlayerInfo[i][pDrugUnconscious]) ApplyAnimation(i, "CRACK", "crckdeth2", 4.1, 0, 1, 1, 1, 0, 1);
                PlayerInfo[i][pDrugRunJumpBlock] = true;
                PlayerInfo[i][pDrugUnconscious] = true;*/
            }
        }

        //Drugs & Abstinence Effect // Efektler

        new Float:hp;
        new quality;

        new count_effect;
        new remove_effect;
        new remove_abstinence;
        new count_abstinence;
        new nodrugeffect;

        new new_drunk_level;

        AC_GetPlayerHealth(i, hp);

        for(new j; j < 12; j++)
        {
            if(j >= 2) quality = PlayerInfo[i][pDrugAddictionQuality][j];

            if(PlayerInfo[i][pDrugEffects][j])
            {
                new drugweather;
                switch(j)
                {
                    case 0: drugweather = 273;
                    case 1: drugweather = 186;
                    case 2: drugweather = -66;
                    case 3: drugweather = 244;
                    case 4: drugweather = 234;
                    case 5: drugweather = 383;
                    case 6: drugweather = 245;
                    case 7: drugweather = 251;
                    case 8: drugweather = -67;
                    case 9: drugweather = 221;
                    case 10: drugweather = 21;
                    case 11: drugweather = 256;
                }
                if(j == 0 || j == 1)//marijuana haþhaþ
                {
                    new_drunk_level = (quality < 40 && hp < 120) ? 8000 : (quality < 80 && quality >= 40 && hp < 140) ? 6000 : 4000;
                    SetPlayerDrunkLevel(i, GetPlayerDrunkLevel(i) + (new_drunk_level / 2));
                    SetPlayerTime(i, 12, 0);
                    SetPlayerWeather(i, drugweather);
                }
                else if(j == 2)//kokain
                {
                    new_drunk_level = (quality < 40 && hp < 150) ? 8000 : (quality < 80 && quality >= 40 && hp < 150) ? 6000 : 4000;
                    SetPlayerDrunkLevel(i, GetPlayerDrunkLevel(i) + (new_drunk_level / 2));
                    AC_SetPlayerHealth(i, (quality < 40 && hp < 150)  ? hp + 5 : (quality < 80 && quality >= 40 && hp < 150) ? hp + 6 : hp + 7);
                    SetPlayerTime(i, 12, 0);
                    SetPlayerWeather(i, drugweather);
                }
                else if(j == 3)//eroin
                {
                    new_drunk_level = (quality < 40 && hp < 150) ? 8000 : (quality < 80 && quality >= 40 && hp < 150) ? 6000 : 4000;
                    SetPlayerDrunkLevel(i, GetPlayerDrunkLevel(i) + (new_drunk_level / 2));
                    AC_SetPlayerHealth(i, (quality < 40 && hp < 150)  ? hp + 3.50 : (quality < 80 && quality >= 40 && hp < 150) ? hp + 4 : hp + 4.50);
                    SetPlayerTime(i, 12, 0);
                    SetPlayerWeather(i, drugweather);
                }
                else if(j == 4 || j == 9) //metamfetamin amfetamin
                {
                    new_drunk_level = (quality < 40 && hp < 150) ? 8000 : (quality < 80 && quality >= 40 && hp < 150) ? 6000 : 4000;
                    SetPlayerDrunkLevel(i, GetPlayerDrunkLevel(i) + (new_drunk_level / 2));
                    AC_SetPlayerHealth(i, (quality < 40 && hp < 150)  ? hp + 3 : (quality < 80 && quality >= 40 && hp < 150) ? hp + 3.50 : hp + 4);
                    SetPlayerTime(i, 12, 0);
                    SetPlayerWeather(i, drugweather);
                }
                else if(j == 5)//ex
                {
                    new_drunk_level = (quality < 40 && hp < 150) ? 8000 : (quality < 80 && quality >= 40 && hp < 150) ? 6000 : 4000;
                    SetPlayerDrunkLevel(i, GetPlayerDrunkLevel(i) + (new_drunk_level / 2));
                    AC_SetPlayerHealth(i, (quality < 40 && hp < 150)  ? hp + 3.50 : (quality < 80 && quality >= 40 && hp < 150) ? hp + 3.80 : hp + 4);
                    SetPlayerTime(i, 12, 0);
                    SetPlayerWeather(i, drugweather);
                }
                else if(j == 6 || j == 7)//lsd pcp
                {
                    new_drunk_level = (quality < 40 && hp < 150) ? 8000 : (quality < 80 && quality >= 40 && hp < 150) ? 6000 : 4000;
                    SetPlayerDrunkLevel(i, GetPlayerDrunkLevel(i) + (new_drunk_level / 2));
                    AC_SetPlayerHealth(i, (quality < 40 && hp < 150)  ? hp + 4 : (quality < 80 && quality >= 40 && hp < 150) ? hp + 5 : hp + 6);
                    SetPlayerTime(i, 12, 0);
                    SetPlayerWeather(i, drugweather);
                }
                else if(j == 8)//ketamin
                {
                    new_drunk_level = (quality < 40 && hp < 150) ? 8000 : (quality < 80 && quality >= 40 && hp < 150) ? 6000 : 4000;
                    AC_SetPlayerHealth(i, (quality < 40 && hp < 150)  ? hp + 2 : (quality < 80 && quality >= 40 && hp < 150) ? hp + 3 : hp + 3.50);
                    SetPlayerDrunkLevel(i, GetPlayerDrunkLevel(i) + (new_drunk_level / 2));
                    SetPlayerTime(i, 12, 0);
                    SetPlayerWeather(i, drugweather);
                }
                else if(j == 10)//crack
                {
                    new_drunk_level = (quality < 40 && hp < 150) ? 8000 : (quality < 80 && quality >= 40 && hp < 150) ? 6000 : 4000;
                    SetPlayerDrunkLevel(i, GetPlayerDrunkLevel(i) + (new_drunk_level / 2));
                    SetPlayerTime(i, 12, 0);
                    SetPlayerWeather(i, drugweather);
                }
                else if(j == 11)//pd
                {
                    new_drunk_level = (quality < 40 && hp < 150) ? 8000 : (quality < 80 && quality >= 40 && hp < 150) ? 6000 : 4000;
                    SetPlayerDrunkLevel(i, GetPlayerDrunkLevel(i) + (new_drunk_level / 2));
                    SetPlayerTime(i, 12, 0);
                    SetPlayerWeather(i, drugweather);
                }

                AC_GetPlayerHealth(i, hp);
                if(hp > 150) AC_SetPlayerHealth(i, 150);

                PlayerInfo[i][pDrugEffects][j]--;
                count_effect++;
            }
            if(!PlayerInfo[i][pDrugEffects][j] && count_effect)
            {
                remove_effect = 1;
                nodrugeffect++;
            }

            if(j == 0 || j == 1 || !PlayerInfo[i][pDrugAbstinence][j])continue;

            if(PlayerInfo[i][pDrugAbstinence][j] > 2) PlayerInfo[i][pDrugAbstinence][j]--;

            count_abstinence++;
        }

        if(count_effect == 1 && remove_effect == 1 || count_abstinence == 1 && remove_abstinence == 1)
        {
            if(nodrugeffect == 12) PlayerInfo[i][UyusturucuEfektleri] = false;
            if(!PlayerInfo[i][pDrugVar] && !PlayerInfo[i][UyusturucuEfektleri])
            {
                SetPlayerDrunkLevel(i, 0);
                SetPlayerTime(i, SunucuBilgi[CurrentHour], 0);
                SetPlayerWeather(i, SunucuBilgi[CurrentWeather]);
            }
            count_effect = 0;
            remove_effect = 0;
            count_abstinence = 0;
            remove_abstinence = 0;
            nodrugeffect = 0;
        }

    }

    PayDayYap();
    return 1;
}

GozlerTrilyon(playerid); public GozlerTrilyon(playerid)
{
    TextDrawHideForPlayer(playerid, BlindFold);
    return 1;
}

SaniyeTimer(); public SaniyeTimer()
{
    new string[128];
    new keys, ud, lr;
    if(bahisTimer > 0 ) {
        bahisTimer--;
        if(bahisTimer == 0) {
            if(bahisHazirlikAktif) { // hazýrlýk aþamasý bittiyse
                bahisHazirlikAktif = 0;
                bahisOyunAktif = 1;
                foreach(new pl: Player) {
                    if(!PlayerInfo[pl][pLogged])continue;
                    if(GetPlayerBuilding(pl, true) <= 0 || BuildingInfo[GetPlayerBuilding(pl, true)][bType] != GANYAN)continue;
                    SendClientMessage(pl, COLOR_FADE3, "Görevli: Yarýþ baþladý! Durumu size aktarmaya devam edeceðiz.");
                }
                bahisTimer = 20;
            } else if(bahisOyunAktif) { // oyun aktifse
                new rand, bitti = 0, checked[MAX_YARIS_ATI], siralama[2];
                siralama[0] = 0;
                siralama[1] = 1;
                for(new i; i < MAX_YARIS_ATI; i++) {
                    rand = random(20);
                    atlarinDurumu[i] += rand;
                    if(atlarinDurumu[i] >= 100) {
                        bitti = 1;
                        break;
                    }
                    checked[i] = 0;
                }
                for(new i; i < 2; i++) { // ilk 2 atýn belirlenme algoritmasý
                    for(new j; j < MAX_YARIS_ATI; j++) {
                        if(!checked[j]) {
                            if(atlarinDurumu[j] > atlarinDurumu[siralama[i]]) {
                                siralama[i] = j;
                            }
                        }
                    }
                    checked[siralama[i]] = 1;
                    if(i == 0) {
                        if(siralama[0] == 1) {
                            do {
                                siralama[1] = random(MAX_YARIS_ATI);
                            } while(siralama[1] == 1);
                        }
                    }
                }
                printf("siralama1 %d siralama2 %d", siralama[0], siralama[1]);
                if(bitti) { // oyun bittiyse
                    foreach(new pl: Player) {
                        if(!PlayerInfo[pl][pLogged])continue;
                        if(GetPlayerBuilding(pl, true) <= 0 || BuildingInfo[GetPlayerBuilding(pl, true)][bType] != GANYAN)continue;
                        if(PlayerInfo[pl][pYatirdigiAt] == siralama[0]) {
                            PlayerInfo[pl][pBahisKazandi] = 2; // parasýnýn 2 katýný alacak
                            PlayerInfo[pl][pYatirdigiAt] = -1;
                            SunucuMesajiC(pl, "Bahis yatýrdýðýnýz at yarýþta birinci oldu, paranýzýn 2 katýný alacaksýnýz. Hemen ganyan görevlisi ile konuþun.");
                        }
                        else if(PlayerInfo[pl][pYatirdigiAt] == siralama[1]) {
                            PlayerInfo[pl][pBahisKazandi] = 1; // parasýnýn 1 katýný alacak
                            PlayerInfo[pl][pYatirdigiAt] = -1;
                            SunucuMesajiC(pl, "Bahis yatýrdýðýnýz at yarýþta ikinci oldu, paranýzý aynen geri alacaksýnýz. Hemen ganyan görevlisi ile konuþun.");
                        } else {
                            SunucuMesajiC(pl, "Bahis yatýrdýðýnýz at yarýþta kaybetti, paranýzý kaybettiniz. Sonraki bahiste iyi þanslar.");
                            PlayerInfo[pl][pBahisKazandi] = 0;
                            PlayerInfo[pl][pYatirdigiAt] = -1;
                            PlayerInfo[pl][pYatirdigiBahis] = 0;
                        }
                        SendFormattedMessage(pl, COLOR_FADE3, "Görevli: Kazanan at %s, hemen arkasýndan ise %s geliyor, muhteþem bir yarýþtý!", atIsimleri[siralama[0]], atIsimleri[siralama[1]]);
                    }
                    bahisTimer = 0;
                    bahisOyunAktif = 0;
                    bahisAktif = 0;
                    bahisHazirlikAktif = 0;
                    atlarinDurumu[0] = 0;
                    atlarinDurumu[1] = 0;
                    atlarinDurumu[2] = 0;
                    atlarinDurumu[3] = 0;
                } else {
                    foreach(new pl: Player) {
                        if(!PlayerInfo[pl][pLogged])continue;
                        if(GetPlayerBuilding(pl, true) <= 0 || BuildingInfo[GetPlayerBuilding(pl, true)][bType] != GANYAN)continue;
                        SendFormattedMessage(pl, COLOR_FADE3, "Görevli: Þu an lider %s hemen arkasýndan ise %s geliyor!", atIsimleri[siralama[0]], atIsimleri[siralama[1]]);
                    }
                    bahisTimer = 20;
                }
            }
        }
    }
    foreach(new vid : Vehicles)
    {
        if(VehicleInfo[vid][vYakit] && !IsTrailerAttachedToVehicle(vid))
        {
            foreach(new j : Player)
            {
                if(!IsPlayerConnected(j) || !PlayerInfo[j][pLogged])continue;
                if(GetPlayerVehicleID(j) != vid)continue;
                if(GetPlayerState(j) != PLAYER_STATE_DRIVER)continue;
                HataMesaji(j, "Dorse ile týr ayrýldý, turu tamamlayamadýn. Görev baþarýsýz!");
                break;
            }
            VehicleInfo[vid][vYakit] = 0;
        }
        if(VehicleInfo[vid][vAlarmOn])
        {
            VehicleInfo[vid][vLights] = !VehicleInfo[vid][vLights];
            SetVehicleParamsEx(vid, VehicleInfo[vid][vEngine], VehicleInfo[vid][vLights], VEHICLE_PARAMS_OFF, VehicleInfo[vid][vLocked], VehicleInfo[vid][vBonnet], VehicleInfo[vid][vBoot], VehicleInfo[vid][vObje]);

            new Float:vehX, Float:vehY, Float:vehZ;
            GetVehiclePos(vid, vehX, vehY, vehZ);

            foreach(new i : Player)
            if(IsPlayerInRangeOfPoint(i, 30.0, vehX, vehY, vehZ))
            {
                PlayerPlaySound(i, 1147, 0.0, 0.0, 0.0);
            }
        }

        if(!IsValidVehicle(vid) || !VehicleInfo[vid][vScript])continue;

        new Float:v_health; GetVehicleHealth(vid, v_health);

        if(!VehicleInfo[vid][vRespraying] && v_health <= VehicleInfo[vid][vHealth]) VehicleInfo[vid][vHealth] = v_health;
        if(VehicleInfo[vid][vRespraying])VehicleInfo[vid][vRespraying]--;
    }

    foreach(new i : Player)
    {
        if(!IsPlayerConnected(i) || !PlayerInfo[i][pLogged])continue;
        if(GetPVarInt(i, "NoControlForCamHack") > 0)
        {
            SetPVarInt(i, "NoControlForCamHack", GetPVarInt(i, "NoControlForCamHack") - 1);
        }

        if(PlayerInfo[i][pLogged] && PlayerInfo[i][pDeath] > 0) AC_SetPlayerHealth(i, 100);

        if(PlayerInfo[i][pAFKMode] == true && PlayerInfo[i][pAFKTime] == 0)
        {
            AC_SetPlayerVirtualWorld(i, 0);
            PlayerInfo[i][pAFKMode] = false;
        }

        new xid = GetPlayerVehicleID(i);
        if(GetPlayerState(i) == PLAYER_STATE_DRIVER && xid > 0 && VehicleInfo[xid][vEngine] == 0 && !IsABike(xid))
        {
            if(!Vehicle_IsOwner(i, xid, false) && GetPlayerSpeed(i) > 30 && GetTickCount() - PlayerInfo[i][pAtesTick] > 5000)
            {
                SendAdminAlert(false, COLOR_YELLOW, "AdmWarn: %s adlý oyuncu motoru kapalý aracý sürüyor olabilir.", ReturnRoleplayName(i));
                PlayerInfo[i][pAtesTick] = GetTickCount();
            }
        }

        if(PlayerInfo[i][pCopTopla] > 0) {
            PlayerInfo[i][pCopTopla]--;
            if(PlayerInfo[i][pCopTopla] <= 0) {
                new id = YakindakiCopKutusunuBul(i, 10.0);
                CopKutusuInfo[id][copSayisi] = 0;
                CopKutusuLabelDuzenle(id);
                PlayerAME(i, "çöp kutusundaki çöpleri toplar.");
                SunucuMesaji(i, "Çöp kutusundaki tüm çöpleri topladýn.");
                PlayerInfo[i][pCopTopla] = 0;
                TogglePlayerControllable(i, true);
                PlayerInfo[i][pFreezed] = 0;
            }
        }
        if(PlayerInfo[i][pAracMotorTimer] > 0) {
            PlayerInfo[i][pAracMotorTimer]--;
            if(PlayerInfo[i][pAracMotorTimer] <= 0) {
                new aracmodeli[64], vid = GetPlayerVehicleID(i);
                if(vid != -1 && GetPlayerState(i) == PLAYER_STATE_DRIVER && VehicleInfo[vid][vKMGosteren] >= 1500) {
                    format(aracmodeli, 64, "%s", GetVehicleModelName(VehicleInfo[vid][vModel]));
                    VehicleInfo[vid][vEngine] = 1;

                    if(VehicleInfo[vid][vEngine] && VehicleInfo[vid][vFaction] == INVALID_VEHICLE_ID && VehicleInfo[vid][vJob] == -1)
                        VehicleInfo[vid][vBatteryHealth] = (VehicleInfo[vid][vBatteryHealth] - 1.0 < 0.0) ? 0.0 : VehicleInfo[vid][vBatteryHealth] - 1.0;

                    SetVehicleParamsEx(vid, VehicleInfo[vid][vEngine], VehicleInfo[vid][vLights], VEHICLE_PARAMS_OFF, VehicleInfo[vid][vLocked], VehicleInfo[vid][vBonnet], VehicleInfo[vid][vBoot], VehicleInfo[vid][vObje]);
                    new motoremote[124];
                    format(motoremote, 124, "%s model aracýn motorunu çalýþtýrýr.", aracmodeli);
                    PlayerAME(i, motoremote);
                    VehicleInfo[vid][vAlarmOn] = 0;
                    VehicleInfo[vid][vObje] = VEHICLE_PARAMS_OFF;
                }
            }
        }

        if(PlayerInfo[i][oKampAtesi] != -1) {
            if(KampInfo[i][kExists]) {
                for(new balik; balik < 2; balik++) {
                    if(KampInfo[i][kBalikPismeTimer][balik] > 0) {
                        KampInfo[i][kBalikPismeTimer][balik]--;
                        if(KampInfo[i][kBalikPismeTimer][balik] <= 0) {
                            if(KampInfo[i][kBalikPisti][balik] == 0) { // piþmiþ yap
                                KampInfo[i][kBalikPisti][balik] = 1;
                                SunucuMesaji(i, "%s kamp ateþinizde piþti. 120 saniye içerisinde yanacak.", BalikIsimleri[KampInfo[i][kBalik][balik]][bIsim]);
                                new stringb[100];
                                format(stringb, sizeof(stringb), "{0066ff}Piþen Balýk: {ffffff}%s\n{338f38}Piþti{ffffff}(/balik ye)", BalikIsimleri[KampInfo[i][kBalik][balik]][bIsim]);
                                if(IsValidDynamic3DTextLabel(KampInfo[i][kLabelText][balik]))
                                    DestroyDynamic3DTextLabelEx(KampInfo[i][kLabelText][balik]);
                                if(balik == 0)
                                    KampInfo[i][kLabelText][0] = CreateDynamic3DTextLabel(stringb, COLOR_WHITE, KampInfo[i][kPos][0], KampInfo[i][kPos][1], KampInfo[i][kPos][2] - 0.2, 20.0);
                                else
                                    KampInfo[i][kLabelText][1] = CreateDynamic3DTextLabel(stringb, COLOR_WHITE, KampInfo[i][kPos][0], KampInfo[i][kPos][1], KampInfo[i][kPos][2] + 0.2, 20.0);
                                KampInfo[i][kBalikPismeTimer][balik] = 120;
                            }
                            else {
                                if(KampInfo[i][kBalikYandi][balik] == 0) { // yandý yap
                                    KampInfo[i][kBalikYandi][balik] = 1;
                                    SunucuMesaji(i, "%s kamp ateþinizde yandý. 120 saniye içerisinde yok olacak.", BalikIsimleri[KampInfo[i][kBalik][balik]][bIsim]);
                                    new stringb[100];
                                    format(stringb, sizeof(stringb), "{0066ff}Piþen Balýk: {ffffff}%s\n{d56207}Yandý{ffffff}(/balik ye)", BalikIsimleri[KampInfo[i][kBalik][balik]][bIsim]);
                                    if(IsValidDynamic3DTextLabel(KampInfo[i][kLabelText][balik]))
                                        DestroyDynamic3DTextLabelEx(KampInfo[i][kLabelText][balik]);
                                    if(balik == 0)
                                        KampInfo[i][kLabelText][0] = CreateDynamic3DTextLabel(stringb, COLOR_WHITE, KampInfo[i][kPos][0], KampInfo[i][kPos][1], KampInfo[i][kPos][2] - 0.2, 20.0);
                                    else
                                        KampInfo[i][kLabelText][1] = CreateDynamic3DTextLabel(stringb, COLOR_WHITE, KampInfo[i][kPos][0], KampInfo[i][kPos][1], KampInfo[i][kPos][2] + 0.2, 20.0);
                                    KampInfo[i][kBalikPismeTimer][balik] = 120;
                                }
                                else { // balýk çöpe
                                    if(IsValidDynamic3DTextLabel(KampInfo[i][kLabelText][balik]))
                                        DestroyDynamic3DTextLabelEx(KampInfo[i][kLabelText][balik]);
                                    SunucuMesaji(i, "%s kamp ateþinizde kül oldu. Yeni balýk koyabilirsiniz.", BalikIsimleri[KampInfo[i][kBalik][balik]][bIsim]);
                                    KampInfo[i][kBalikPisti][balik] = 0;
                                    KampInfo[i][kBalikYandi][balik] = 0;
                                    KampInfo[i][kBalik][balik] = -1;
                                    KampInfo[i][kBalikPismeTimer][balik] = 0;
                                }
                            }
                        }
                    }
                }
            }
        }
        if(PlayerInfo[i][pBalikListe] > 0)
            PlayerInfo[i][pBalikListe]--;
        if(PlayerInfo[i][pTedaviSure] > 1)
        {
            PlayerInfo[i][pTedaviSure]--;
            format(string,sizeof(string), "~n~~g~BAYGIN: ~w~%d", PlayerInfo[i][pTedaviSure]);
            PlayerTextDrawSetString(i, PlayerInfo[i][pTextdraws][0], string);

            if(PlayerInfo[i][pTedaviSure] == 1)
            {
                format(string,sizeof(string), "~n~~g~BAYGIN: ~w~0");
                PlayerTextDrawSetString(i, PlayerInfo[i][pTextdraws][0], string);
                SunucuMesajiC(i, "Yaralý süreniz doldu, ayaða kalkmak için /tedaviol komutunu kullanýn.");
            }
        }

        /*if(PlayerInfo[i][pTVMode] && GetPlayerState(i) == PLAYER_STATE_SPECTATING)
        {
            if(!SunucuBilgi[LSNNYayin] || !SunucuBilgi[LSNNYayinDurum])
                pc_cmd_tvizle(i, "");
        }

        if(PlayerInfo[i][pTVMode] && !PlayerInfo[i][pJustSpawned] && GetPlayerState(i) != PLAYER_STATE_SPECTATING)
        {
            PlayerInfo[i][pTVMode] = false;
        }
*/
        PlayerInfo[i][pTarget] = GetPlayerTargetPlayer(i);

        if(Faction_GetType(PlayerInfo[i][pFaction]) == POLICE && PlayerInfo[i][pFactionDuty])
        {
            PlayerInfo[i][pPolisDutySaniye]++;

            if(PlayerInfo[i][pPolisDutySaniye] >= 60)
            {
                PlayerInfo[i][pPolisDutyDakika]++;
                PlayerInfo[i][pPolisDutySaniye] = 0;
            }
            if(PlayerInfo[i][pPolisDutyDakika] >= 60)
            {
                PlayerInfo[i][pPolisDutySaat]++;
                PlayerInfo[i][pPolisDutyDakika] = 0;
            }
        }

        if(BirlikteDinlenen[i] != -1)
        {
            new Float:kX, Float:kY, Float:kZ, kINT, kVW;
            GetPlayerPos(BirlikteDinlenen[i], kX, kY, kZ);
            kINT = GetPlayerInterior(BirlikteDinlenen[i]);
            kVW = GetPlayerVirtualWorld(BirlikteDinlenen[i]);
            if(!IsPlayerInRangeOfPoint(i, 3.0, kX, kY, kZ) || kINT != GetPlayerInterior(i) || kVW != GetPlayerVirtualWorld(i)) {
                if(GetPVarInt(i, "KulakliklaMuzik")) {
                    StopAudioStreamForPlayer(BirlikteDinlenen[i]);
                    HataMesaji(BirlikteDinlenen[i], "Telefondan çok uzaklaþtýðýnýz için kulaklýk kulaðýnýzdan düþtü.");
                    BirlikteDinliyor[BirlikteDinlenen[i]] = -1;
                    BirlikteDinlenen[BirlikteDinlenen[i]] = -1;
                    PlayerAME(BirlikteDinlenen[i], "kulaklýkla müzik dinlemeyi býrakýr.");
                    HataMesaji(i, "Birlikte müzik dinlediðiniz %s sizden çok uzaklaþtý, artýk müziðinizi duymuyor.", ReturnRoleplayName(BirlikteDinlenen[i]));
                    BirlikteDinlenen[i] = -1;
                } else {
                    StopAudioStreamForPlayer(i);
                    SunucuMesajiC(i,"Telefondan çok uzaklaþtýðýnýz için kulaklýk kulaðýnýzdan düþtü.");
                    BirlikteDinliyor[i] = -1;
                    PlayerAME(i, "kulaklýkla müzik dinlemeyi býrakýr.");
                    SunucuMesaji(BirlikteDinlenen[i],"Birlikte müzik dinlediðiniz %s sizden çok uzaklaþtý, artýk müziðinizi duymuyor.", ReturnRoleplayName(i));
                    BirlikteDinlenen[BirlikteDinlenen[i]] = -1;
                    BirlikteDinlenen[i] = -1;
                }
            }
        }

        if(PlayerInfo[i][pKamyoncuTimer] > 0)
        {
            PlayerInfo[i][pKamyoncuTimer]--;
            new string2[10];
            format(string2, sizeof(string2), "%d saniye", PlayerInfo[i][pKamyoncuTimer]);
            PlayerTextDrawSetString(i, PlayerText:Textdraw1[i], string2);
            PlayerTextDrawSetString(i, PlayerText:Textdraw0[i], "YUK ALINIYOR");
        }
        if(PlayerInfo[i][pKamyoncuTimer] == 0)
        {
            PlayerInfo[i][pKamyoncuTimer] = -1;
            PlayerTextDrawHide(i, PlayerText:Textdraw0[i]);
            PlayerTextDrawHide(i, PlayerText:Textdraw1[i]);
            
            TogglePlayerControllable(i, true);
            PlayerInfo[i][pFreezed] = 0;
            new arac = GetPlayerVehicleID(i);
            if(arac != -1)
            {
                VehicleInfo[arac][vYakit] = 1;
                BasariMesaji(i, "Yakýt yüklemesi baþarýyla gerçekleþti.");
            }
            else BasariMesaji(i, "Yakýt yüklemesi baþarýsýz!");
        }
        
        if(PlayerInfo[i][pYakitTimer] > 0)
        {
            PlayerInfo[i][pYakitTimer]--;
            new string2[10];
            format(string2, sizeof(string2), "%d saniye", PlayerInfo[i][pYakitTimer]);
            PlayerTextDrawSetString(i, PlayerText:Textdraw1[i], string2);
            PlayerTextDrawSetString(i, PlayerText:Textdraw0[i], "YAKIT TESLIMI");
        }
        if(PlayerInfo[i][pYakitTimer] == 0)
        {
            PlayerInfo[i][pYakitTimer] = -1;
            PlayerTextDrawHide(i, PlayerText:Textdraw0[i]);
            PlayerTextDrawHide(i, PlayerText:Textdraw1[i]);

            TogglePlayerControllable(i, true);
            PlayerInfo[i][pFreezed] = 0;
            new arac = GetPlayerVehicleID(i);
            if(arac != -1)
            {
                if(GetPlayerState(i) == PLAYER_STATE_DRIVER)
                {
                    new yakitgelirnerf;
                    if(PlayerInfo[i][pPremium] == 5) yakitgelirnerf = 500000;
                    else if(PlayerInfo[i][pPremium] == 4) yakitgelirnerf = 300000;
                    else yakitgelirnerf = 240000;
                    
                    if(IsPlayerInRangeOfPoint(i, 5.0, 2130.653564, 892.638488, 10.820312))
                    {
                        VehicleInfo[arac][vYakit] = 0;
                        if(PlayerInfo[i][pYakitGelir] >= yakitgelirnerf)
                        {
                            OAC_GivePlayerMoney(i, 750);
                            BasariMesaji(i, "Yakýt teslimi baþarýyla gerçekleþti. (Kazanç: $750 - Nerf)");
                            PlayerInfo[i][pYakitGelir] += 750;
                        }
                        else
                        {
                            BasariMesaji(i, "Yakýt teslimi baþarýyla gerçekleþti. (Kazanç: $1500)");
                            OAC_GivePlayerMoney(i, 1500);
                            PlayerInfo[i][pYakitGelir] += 1500;
                        }
                    }
                    else if(IsPlayerInRangeOfPoint(i, 5.0, 665.944824, -582.788269, 16.335937))
                    {
                        VehicleInfo[arac][vYakit] = 0;
                        if(PlayerInfo[i][pYakitGelir] >= yakitgelirnerf)
                        {
                            BasariMesaji(i, "Yakýt teslimi baþarýyla gerçekleþti. (Kazanç: $900 - Nerf)");
                            PlayerInfo[i][pYakitGelir] += 900;
                            OAC_GivePlayerMoney(i, 900);
                        }
                        else
                        {
                            BasariMesaji(i, "Yakýt teslimi baþarýyla gerçekleþti. (Kazanç: $1800)");
                            PlayerInfo[i][pYakitGelir] += 1800;
                            OAC_GivePlayerMoney(i, 1800);
                        }
                    }
                    else if(IsPlayerInRangeOfPoint(i, 5.0, -2430.835205, 953.155029, 45.296875))
                    {
                        VehicleInfo[arac][vYakit] = 0;
                        if(PlayerInfo[i][pYakitGelir] >= yakitgelirnerf)
                        {
                            BasariMesaji(i, "Yakýt teslimi baþarýyla gerçekleþti. (Kazanç: $1400 - Nerf)");
                            OAC_GivePlayerMoney(i, 1400);
                            PlayerInfo[i][pYakitGelir] += 1400;
                        }
                        else
                        {
                            BasariMesaji(i, "Yakýt teslimi baþarýyla gerçekleþti. (Kazanç: $2800)");
                            OAC_GivePlayerMoney(i, 2800);
                            PlayerInfo[i][pYakitGelir] += 2800;
                        }
                    }
                    else BasariMesaji(i, "Yakýt teslimi baþarýsýz!");
                }
                else BasariMesaji(i, "Yakýt teslimi baþarýsýz!");
            }
            else BasariMesaji(i, "Yakýt teslimi baþarýsýz!");
        }

        if(PlayerInfo[i][pParcalaTimer] > 0)
        {
            PlayerInfo[i][pParcalaTimer]--;
            new string2[10];
            format(string2, sizeof(string2), "%d saniye", PlayerInfo[i][pParcalaTimer]);
            PlayerTextDrawSetString(i, PlayerText:Textdraw1[i], string2);
            PlayerTextDrawSetString(i, PlayerText:Textdraw0[i], "ARAC PARCALANIYOR");
        }
        if(PlayerInfo[i][pParcalaTimer] == 0)
        {
            PlayerInfo[i][pParcalaTimer] = -1;
            DeletePVar(i, "AracParcaliyor");
            new arac = GetPlayerVehicleID(i);
            //UpdateVehicleDamageStatus(GetPlayerVehicleID(i), 36831267, 67372036, 69, 15);
            UpdateVehicleDamageStatus(arac, 53674035, 33686020, 5, 15);
            PlayerTextDrawHide(i, PlayerText:Textdraw0[i]);
            PlayerTextDrawHide(i, PlayerText:Textdraw1[i]);
            PlayerTextDrawSetString(i, PlayerText:Textdraw1[i], "20 saniye");
            SunucuMesaji(i, "Aracý $%d karþýlýðý hurdaya verdiniz.", VehicleInfo[arac][vPrice] * 6 / 100);
            BasariMesaji(i, "Bir aracý hurdaya çýkarttýðýn için konuþtuðun adamýn saygýsýný kazandýn.");
            SunucuMesajicp(i, "Araç Hýrsýzlýðý yetenek puanýn 1 arttý, /karakter yazarak durumunu görebilirsin.");
            PlayerInfo[i][pHirsizlikYetenegi] ++;
            if(PlayerInfo[i][pHirsizlikYetenegi] >= 0 && PlayerInfo[i][pHirsizlikYetenegi] < 50)
                AC_GivePlayerMoney(i, VehicleInfo[arac][vPrice] * 6 / 100, "/hurdayasat");
            if(PlayerInfo[i][pHirsizlikYetenegi] >= 40)
                AC_GivePlayerMoney(i, VehicleInfo[arac][vPrice] * 7 / 100, "/hurdayasat level3");
                
            if(PlayerInfo[i][pHirsizlikYetenegi] == 20)
                SunucuMesajicp(i, "Bu kadar fazla araç çalarsan ne olur dersin? Yetenek seviyen 2 oldu!");

            if(PlayerInfo[i][pHirsizlikYetenegi] == 40)
                SunucuMesajicp(i, "Bu kadar fazla araç çalarsan ne olur dersin? Yetenek seviyen 3 oldu!");

            printf("%s tarafýndan %d nolu araç %d para karþýlýðýnda parçalandý.", ReturnRoleplayName(i), VehicleInfo[arac][vID], VehicleInfo[arac][vPrice] * 6 / 100);
            //VehicleInfo[arac][vEngineHealth] -= 600.0;
            //VehicleInfo[arac][vBatteryHealth] -= 600.0;
            VehicleInfo[arac][vHurda] = 1;
            VehicleInfo[arac][vHealth] = 500.0;
            TogglePlayerControllable(i, true);
            PlayerInfo[i][pFreezed] = 0;
            GetVehicleDamageStatus(arac, VehicleInfo[arac][vDamages][0], VehicleInfo[arac][vDamages][1], VehicleInfo[arac][vDamages][2], VehicleInfo[arac][vDamages][3]);
            SaveVehicle(arac);
            Vehicle_Despawn(arac);
            PlayerInfo[i][pCalinanArac] += 1;
        }
        PlayerInfo[i][pAFKTime]++;

        new silahid = GetPlayerWeapon(i);
        if(PlayerInfo[i][pBanned] == 1) return 0;
        if(YasakliSilah(silahid) && PlayerInfo[i][pAdmin] < GAMEADMIN4)
        {
            mysql_format(ourConnection, queryx, sizeof(queryx), "UPDATE accounts SET banned = '1' WHERE username = '%e'", PlayerInfo[i][pUsername]);
            mysql_tquery(ourConnection, queryx);

            PlayerInfo[i][pBanned] = 1;
            SendFormattedMessage(i, COLOR_WHITE, "SA-AC tarafýndan kalýcý olarak yasaklandýn. Sebep: Hile Kullanýmý");
            SetTimerEx("KickTimer", 100, false, "d", i);
            SendAdminAlert(false, COLOR_ADMIN, "AdmCmd: %s, SA-AC tarafýndan yasaklandý. Sebep: Hile Kullanýmý",ReturnRoleplayName(i));
            LogYaz(i, "/ban Silah Hilesi", silahid, -1);
        }
        new weapons[13][2];

        for (new j = 0; j <= 12; j++)
        {
            GetPlayerWeaponData(i, j, weapons[j][0], weapons[j][1]);
            if(PlayerInfo[i][pBanned] == 1) return 0;
            if(YasakliSilah(weapons[j][0]) && PlayerInfo[i][pAdmin] < GAMEADMIN4)
            {
                mysql_format(ourConnection, queryx, sizeof(queryx), "UPDATE accounts SET banned = '1' WHERE username = '%e'", PlayerInfo[i][pUsername]);
                mysql_tquery(ourConnection, queryx);
                PlayerInfo[i][pBanned] = 1;
                SendFormattedMessage(i, COLOR_WHITE, "SA-AC tarafýndan kalýcý olarak yasaklandýn. Sebep: Hile Kullanýmý");
                SetTimerEx("KickTimer", 100, false, "d", i);
                SendAdminAlert(false, COLOR_ADMIN, "AdmCmd: %s, SA-AC tarafýndan yasaklandý. Sebep: Hile Kullanýmý",ReturnRoleplayName(i));
                LogYaz(i, "/ban Silah Hilesi", weapons[j][0], -1);
            }
        }

        /*new yanginid = EnYakinYanginiBul(i);
        if(yanginid != -1)
        {
            if(IsPlayerInRangeOfPoint(i, 1.0, YanginInfo[yanginid][yPosX], YanginInfo[yanginid][yPosY], YanginInfo[yanginid][yPosZ]))
            {
                if(!PlayerInfo[i][pFactionDuty] && Faction_GetType(PlayerInfo[i][pFaction]) != MEDICAL)
                {
                    new Float:hp;
                    AC_GetPlayerHealth(i, hp);
                    AC_SetPlayerHealth(i, hp - 2);
                }
            }
        }*/

        GetPlayerKeys(i, keys, ud, lr);
        if(!PlayerInfo[i][pJustSpawned] && !PlayerInfo[i][pDeath])
        {
            if(!IsPlayerAttachedObjectSlotUsed(i, 8) && GetFishingZone(i) != -1)
                Player_Info(i, "~y~/baliktut~w~");

            /*if(IsPlayerInAnyVehicle(i) && GetPlateZone(i) != -1)
                Player_Info(i, "~y~Plaka degistirme~w~ alani.");*/
        }

        if(PlayerInfo[i][pBuyingVehicle])
        {
            if(lr == KEY_RIGHT) PlayerInfo[i][pSelectedColors][0]++;
            else if(lr == KEY_LEFT)  PlayerInfo[i][pSelectedColors][0]--;
            else if(keys == KEY_HANDBRAKE) PlayerInfo[i][pSelectedColors][1]++;
            else if(keys == KEY_FIRE) PlayerInfo[i][pSelectedColors][1]--;

            new max_colors = sizeof(CarColors);

            if(PlayerInfo[i][pSelectedColors][0] > max_colors - 1) PlayerInfo[i][pSelectedColors][0] = 0;
            if(PlayerInfo[i][pSelectedColors][0] < 0) PlayerInfo[i][pSelectedColors][0] = max_colors - 1;
            if(PlayerInfo[i][pSelectedColors][1] > max_colors - 1) PlayerInfo[i][pSelectedColors][1] = 0;
            if(PlayerInfo[i][pSelectedColors][1] < 0) PlayerInfo[i][pSelectedColors][1] = max_colors - 1;

            new color_one = PlayerInfo[i][pSelectedColors][0];
            new color_two = PlayerInfo[i][pSelectedColors][1];

            ChangeVehicleColor(PlayerInfo[i][pDealerVehicle], CarColors[color_one], CarColors[color_two]);
        }

        if(PlayerInfo[i][pJailTime] > 1)
        {
            if(!IsPlayerConnected(i) || !PlayerInfo[i][pLogged])continue;

            PlayerInfo[i][pJailTime]--;
            format(string,sizeof(string), "~n~~g~KALAN SURE: ~w~%d", PlayerInfo[i][pJailTime]);
            PlayerTextDrawSetString(i, PlayerInfo[i][pTextdraws][0], string);

            if(PlayerInfo[i][pJailTime] == 1)
            {
                SunucuMesajiC(i, "Hapis süreniz bitti, /hapisayril komutunu kullanýn.");
                format(string,sizeof(string), "~n~~g~KALAN SURE: ~w~0");
                PlayerTextDrawSetString(i, PlayerInfo[i][pTextdraws][0], string);
                /*PlayerInfo[i][pJailTime] = 0;
                PlayerInfo[i][pJailC] = 0;
                PlayerInfo[i][pForceSpawn] = true;
                PlayerTextDrawHide(i, PlayerInfo[i][pTextdraws][0]);
                Player_SetSpawn(i);*/
            }
        }

        if(PlayerInfo[i][pPlateTime] > 0)
        {
            PlayerInfo[i][pPlateTime]--;

            if(!PlayerInfo[i][pPlateTime])
            {
                new vid = PlayerInfo[i][pPlateVeh];
                new Float:x, Float:y, Float:z, Float:a, seat;

                GetVehiclePos(vid, x, y, z);
                GetVehicleZAngle(vid, a);
                seat = GetPlayerVehicleSeat(i);
                VehicleInfo[vid][vUnregistered] = (PlayerInfo[i][pPlateOption] != 0) ? 0 : 1;
                if(PlayerInfo[i][pPlateOption] == 1) {
                    SetPVarFloat(i, "AracX", x);
                    SetPVarFloat(i, "AracY", y);
                    SetPVarFloat(i, "AracZ", z);
                    SetPVarFloat(i, "AracA", a);
                    SetPVarInt(i, "AracINT", GetPlayerInterior(i));
                    SetPVarInt(i, "AracVW", GetPlayerVirtualWorld(i));
                    SetPVarInt(i, "AracKoltuk", seat);
                    Generate_VehiclePlate(i, vid);
                }
                else
                {
                    SetPVarFloat(i, "AracX", x);
                    SetPVarFloat(i, "AracY", y);
                    SetPVarFloat(i, "AracZ", z);
                    SetPVarFloat(i, "AracA", a);
                    SetPVarInt(i, "AracINT", GetPlayerInterior(i));
                    SetPVarInt(i, "AracVW", GetPlayerVirtualWorld(i));
                    SetPVarInt(i, "AracKoltuk", seat);
                    OncekiPlakayaDon(i, vid);
                }
                TogglePlayerControllable(i, true);
                PlayerInfo[i][pFreezed] = 0;

                PlayerInfo[i][pPlateVeh] = -1;
                PlayerInfo[i][pPlateOption] = 0;

                SaveVehicle(vid);

                LogYaz(i, (PlayerInfo[i][pPlateOption] != 0) ? ("/arac plakaekle") : ("/arac plakakaldir"), -1, VehicleInfo[vid][vID], PlayerInfo[i][pPlateOption]);

                GameTextForPlayer(i, "~g~Islem Basarili", 3000, 5);
            }

            if(!IsPlayerInAnyVehicle(i) || GetPlayerVehicleID(i) != PlayerInfo[i][pPlateVeh])
                PutPlayerInVehicle(i, PlayerInfo[i][pPlateVeh], 0);
        }

        if(PlayerInfo[i][pFishTime] > 0)
        {
            PlayerInfo[i][pFishTime]--;
            if(GetPVarInt(i, "BalikAg") != -1)
                ApplyAnimation(i, "SWORD", "sword_block", 50.0, 0, 1, 0, 1, 1);
            if(!PlayerInfo[i][pFishTime])
            {
                if(GetPVarInt(i, "BalikAg") == 1) {
                    DeletePVar(i, "BalikAg");
                    TogglePlayerControllable(i, true);
                    PlayerInfo[i][pFreezed] = 0;
                    PlayerInfo[i][pBalikTutuyor] = false;
                    new count, basariRandom, balik, randomAgirlikFarki, randomAgirlik, balikSlot, rbalik, balikTuttu;
                    while(count < 4) {
                        basariRandom = random(100);
                        if(PlayerInfo[i][pBalikYetenegi] < 400) {
                            if(basariRandom <= 45)
                                balikTuttu = 1;
                        }
                        else if(PlayerInfo[i][pBalikYetenegi] >= 400 && PlayerInfo[i][pBalikYetenegi] < 1000) {
                            if(basariRandom <= 50)
                                balikTuttu = 1;
                        }
                        else {
                            if(basariRandom <= 65)
                                balikTuttu = 1;
                        }
                        if(balikTuttu) { // balýk geldiyse
                            new vid = GetPlayerVehicleID(i);
                            if(vid == -1 || GetMaxFishes(i, VehicleInfo[vid][vModel]) == 0)
                                balik = random(BALIKSAYISI - 2);
                            else
                                balik =  random(BALIKSAYISI);
                            randomAgirlikFarki = BalikIsimleri[balik][bMaxAgirlik] - BalikIsimleri[balik][bMinAgirlik];
                            randomAgirlik = BalikIsimleri[balik][bMinAgirlik] + random(randomAgirlikFarki + 1);
                            balikSlot = BalikSlotAl(i);
                            if(balikSlot != -1)
                                BalikEkle(i, balikSlot, balik, randomAgirlik);
                            else return HataMesaji(i, "Daha fazla balýk taþýyamazsýn.");
                            PlayerInfo[i][pBalikYetenegi]++;
                            if(PlayerInfo[i][pBalikYetenegi] == 400) SunucuMesajiC(i, "Tebrikler, balýk tutma yeteneðiniz artýk 2. seviye. Balýk tutmaya devam!");
                            else if(PlayerInfo[i][pBalikYetenegi] == 1000) SunucuMesajiC(i, "Tebrikler, balýk tutma yeteneðiniz artýk 3. seviye. Balýk tutmaya devam!");
                            SunucuMesaji(i, "Tebrikler, %d kilo bir %s yakaladýnýz!", randomAgirlik, BalikIsimleri[balik][bIsim]);
                        }
                        else { // boþ geldiyse
                            rbalik = random(3);
                            switch(rbalik) {
                                case 0:
                                {
                                    SunucuMesajiC(i, "Yosun yakaladýn ve geri denize attýn.");
                                }
                                case 1: {
                                    SunucuMesajiC(i, "Aðýn ipi koptu ve yenisini taktýn.");
                                }
                                case 2: {
                                    SunucuMesajiC(i, "Yakaladýðýn balýk kaçtý.");
                                }
                            }
                        }
                        count++;
                    }
                    PlayerAME(i, "aðýný geri çeker.");
                } else {
                    TogglePlayerControllable(i, true);
                    PlayerInfo[i][pFreezed] = 0;
                    PlayerInfo[i][pBalikTutuyor] = false;
                    new basariRandom = random(3);
                    /*new fishZone = GetFishingZone(i, true);
                    new pointZone = GetFishingZone(i, false);*/
                    if(basariRandom) { // balýk geldiyse
                        new vid = GetPlayerVehicleID(i), balik;
                        if(vid == -1 || GetMaxFishes(i, VehicleInfo[vid][vModel]) == 0)
                            balik = random(BALIKSAYISI - 2);
                        else
                            balik =  random(BALIKSAYISI);
                        new randomAgirlikFarki = BalikIsimleri[balik][bMaxAgirlik] - BalikIsimleri[balik][bMinAgirlik];
                        new randomAgirlik = BalikIsimleri[balik][bMinAgirlik] + random(randomAgirlikFarki + 1);
                        PlayerAME(i, "oltasýný yavaþca geriye çeker.");
                        new balikSlot = BalikSlotAl(i);
                        if(balikSlot != -1)
                            BalikEkle(i, balikSlot, balik, randomAgirlik);
                        else return HataMesaji(i, "Daha fazla balýk taþýyamazsýn.");
                        PlayerInfo[i][pBalikYetenegi]++;
                        if(PlayerInfo[i][pBalikYetenegi] == 400) SunucuMesajiC(i, "Tebrikler, balýk tutma yeteneðiniz artýk 2. seviye. Balýk tutmaya devam!");
                        else if(PlayerInfo[i][pBalikYetenegi] == 1000) SunucuMesajiC(i, "Tebrikler, balýk tutma yeteneðiniz artýk 3. seviye. Balýk tutmaya devam!");
                        SunucuMesaji(i, "Tebrikler, %d kilo bir %s yakaladýnýz!", randomAgirlik, BalikIsimleri[balik][bIsim]);
                    }
                    else { // boþ geldiyse
                        new rbalik = random(4);
                        switch(rbalik) {
                            case 0:
                            {
                                PlayerAME(i, "oltasýný yavaþca geriye çeker.");
                                SunucuMesajiC(i, "Yosun yakaladýn ve geri denize attýn.");
                            }
                            case 1: {
                                PlayerAME(i, "oltasýný yavaþca geriye çeker.");
                                SunucuMesajiC(i, "Oltanýn ipi koptu ve yeni ip taktýn.");
                            }
                            case 2: {
                                PlayerAME(i, "oltasýný yavaþca geriye çeker.");
                                SunucuMesajiC(i, "Yakaladýðýn balýk kaçtý.");
                            }
                            case 3: {
                                PlayerAME(i, "oltasýný yavaþca geriye çeker.");
                                SunucuMesajiC(i, "Oltana hiçbir þey isabet etmedi.");
                            }
                        }
                    }
                }
            }
        }

        if(PlayerInfo[i][pInCare] > 0)
        {
            PlayerInfo[i][pInCare]--;

            if(GetPlayerAnimationIndex(i) != 1207)
                ApplyAnimation(i, "PED", "KO_shot_stom", 4.0, 0, 1, 1, 1, 0, 1);

            if(!PlayerInfo[i][pInCare])
            {
                SetCameraBehindPlayer(i);
                PlayerInfo[i][pFreezed] = 0;
                TogglePlayerControllable(i, true);
                if(PlayerInfo[i][pDeath] == 3)
                {
                    PlayerInfo[i][pLegHit] = 1;
                    AC_SetPlayerHealth(i, 5);
                }
                else AC_SetPlayerHealth(i, 30);
                SetPlayerDrunkLevel(i, 0);
                PlayerInfo[i][pDeath] = 0;
                pc_cmd_animdurdur(i, "");
            }
        }

        if(PlayerInfo[i][pStunned] > 0)
        {
            PlayerInfo[i][pStunned]--;

            if(!PlayerInfo[i][pStunned] && PlayerInfo[i][EtkisizEleman])
            {
                //if(!AnimationCheck(i))return 1;

                ClearAnimations(i);
                ApplyAnimation(i, "CARRY", "crry_prtial", 2.0, 0, 0, 0, 0, 0);
                SetPlayerSpecialAction(i, SPECIAL_ACTION_NONE);

                PlayerInfo[i][pLoopAnim] = false;
                PlayerInfo[i][EtkisizEleman] = false;
            }

            if(GetPlayerAnimationIndex(i) != 388)
                ApplyAnimation(i, "CRACK", "crckdeth4", 4.0, 0, 0, 0, 1, 0, 1);
        }

        if(IsPlayerInAnyVehicle(i) && GetPlayerState(i) == PLAYER_STATE_DRIVER)
        {
            new Float:posX, Float:posY, Float:posZ, speed, target;
            new passenger = PlayerInfo[i][tPassenger];
            new vehicleid = GetPlayerVehicleID(i);
            new Float:Health;
            GetVehicleHealth(vehicleid, Health);

            if(IsTaxi(vehicleid) && passenger != -1 && GetPlayerVehicleID(passenger) == vehicleid) if(IsPlayerInRangeOfPoint(i, 60.0, PlayerInfo[i][tStartPos][0], PlayerInfo[i][tStartPos][1], PlayerInfo[i][tStartPos][2]) <= 0)
            {
                PlayerInfo[i][tCash] += PlayerInfo[passenger][pTaxPrice];

                if(PlayerInfo[passenger][pCash] < PlayerInfo[i][tCash])
                {
                    RemovePlayerFromVehicle(passenger);
                    AC_GivePlayerMoney(i, PlayerInfo[i][tCash], "/taksimetre");
                    AC_GivePlayerMoney(passenger, -PlayerInfo[i][tCash], "/taksimetre");
                    PlayerInfo[i][tCash] = 0;
                    PlayerInfo[i][tPassenger] = -1;
                    PlayerInfo[i][tStartPos][0] = 0.0;
                    PlayerInfo[i][tStartPos][1] = 0.0;
                    PlayerInfo[i][tStartPos][2] = 0.0;
                    PlayerInfo[passenger][pTaxi] = -1;
                    PlayerInfo[passenger][pTaxPrice] = -1;
                    PlayerTextDrawHide(passenger, PlayerInfo[passenger][pTextdraws][0]);
                    PlayerTextDrawSetString(passenger, PlayerInfo[passenger][pTextdraws][0], "~n~~g~KALAN SURE:~w~ 0 saniye");
                }

                format(string, sizeof(string), "~n~~w~Taksimetre: ~y~$%d", PlayerInfo[i][tCash]);
                PlayerTextDrawSetString(passenger, PlayerInfo[passenger][pTextdraws][0], string);

                GetPlayerPos(i, PlayerInfo[i][tStartPos][0], PlayerInfo[i][tStartPos][1], PlayerInfo[i][tStartPos][2]);
            }

            if(VehicleInfo[vehicleid][vAutovelox]) foreach(new id : Player)
            {
                if(!IsPlayerConnected(id) || !IsPlayerInAnyVehicle(id) || GetPlayerState(id) != PLAYER_STATE_DRIVER || i == id) continue;

                target = GetPlayerVehicleID(id);
                speed = GetVehicleSpeed(target);

                GetVehiclePos(target, posX, posY, posZ);
                if(!IsPlayerInRangeOfPoint(i, 30.0, posX, posY, posZ) || speed < VehicleInfo[vehicleid][vAutovelox]) continue;
                foreach(new xj: Player) {
                    if(GetPlayerVehicleID(i) == GetPlayerVehicleID(xj) && i != xj)
                        SendFormattedMessage(xj, COLOR_LIGHTBLUE, "Hýz sýnýrýný aþan bir araç var. (%s - %s) %d KM/H.", GetVehicleModelName(VehicleInfo[target][vModel]), VehicleInfo[target][vPlate], speed);
                }
                SendFormattedMessage(i, COLOR_LIGHTBLUE, "Hýz sýnýrýný aþan bir araç var. (%s - %s) %d KM/H.", GetVehicleModelName(VehicleInfo[target][vModel]), VehicleInfo[target][vPlate], speed);
            }

            if(!PlayerInfo[i][pBuyingVehicle] && Health > VehicleInfo[vehicleid][vHealth] && !VehicleInfo[vehicleid][vRespraying] && Health > 300)
            {
                AC_Detect(i, AC_VEHICLEREPAIR_CODE);
                AC_SetVehicleHealth(vehicleid, VehicleInfo[vehicleid][vHealth]);
                UpdateVehicleDamageStatus(vehicleid, VehicleInfo[vehicleid][vDamages][0], VehicleInfo[vehicleid][vDamages][1], VehicleInfo[vehicleid][vDamages][2], VehicleInfo[vehicleid][vDamages][3]);
            }
            else
            {
                VehicleInfo[vehicleid][vHealth] = Health;
                GetVehicleDamageStatus(vehicleid, VehicleInfo[vehicleid][vDamages][0], VehicleInfo[vehicleid][vDamages][1], VehicleInfo[vehicleid][vDamages][2], VehicleInfo[vehicleid][vDamages][3]);
            }

            if(!IsABike(vehicleid) && !VehicleInfo[vehicleid][vFuel] && VehicleInfo[vehicleid][vEngine])
            {
                SendClientMessageEx(i, COLOR_ERROR, "Benzin bitti.");
                SetVehicleParamsEx(vehicleid,  VEHICLE_PARAMS_OFF, VEHICLE_PARAMS_OFF, VEHICLE_PARAMS_OFF, VehicleInfo[vehicleid][vLocked],  VehicleInfo[vehicleid][vBonnet], VehicleInfo[vehicleid][vBoot], VehicleInfo[vehicleid][vObje]);
                VehicleInfo[vehicleid][vEngine] = 0;
            }
            else if(!IsABike(vehicleid) && VehicleInfo[vehicleid][vEngine] && Health <= 400.0 || VehicleInfo[vehicleid][vEngine] && VehicleInfo[vehicleid][vEngineHealth] <= 0 || VehicleInfo[vehicleid][vEngine] && VehicleInfo[vehicleid][vBatteryHealth] <= 0)
            {
                SendClientMessageEx(i, COLOR_ERROR, "Aracýn motoru kapandý.");
                SetVehicleParamsEx(vehicleid,  VEHICLE_PARAMS_OFF, VEHICLE_PARAMS_OFF, VEHICLE_PARAMS_OFF, VehicleInfo[vehicleid][vLocked],  VehicleInfo[vehicleid][vBonnet], VehicleInfo[vehicleid][vBoot], VehicleInfo[vehicleid][vObje]);
                VehicleInfo[vehicleid][vEngine] = 0;
                AC_SetVehicleHealth(vehicleid, VehicleInfo[vehicleid][vHealth]);
                new Float:angle, veh = vehicleid;
                GetVehicleZAngle(veh, angle);
                VehicleInfo[vehicleid][vHealth] = 350;
                SetVehicleZAngle(veh, angle);
            }
            else if (!IsABike(vehicleid) && Health < 350.0 && !VehicleInfo[vehicleid][vEngine])
            {
                new Float:angle, veh = vehicleid;
                GetVehicleZAngle(veh, angle);
                SetVehicleZAngle(veh, angle);
                VehicleInfo[vehicleid][vHealth] = 350;
                AC_SetVehicleHealth(vehicleid, VehicleInfo[vehicleid][vHealth]);
            }

            if(PlayerInfo[i][pFuelTimer] > 0)
            {
                new fuel_station = GetNearestService(i, FUEL_STATION);
                new price_to_pay;
                new liters_to_add;

                PlayerInfo[i][pFuelTimer]--;

                if(BuildingInfo[fuel_station][bOwner]) BuildingInfo[fuel_station][bProducts] -= PlayerInfo[i][pAlincakBenzin];
                //BuildingInfo[fuel_station][bCash] += MAX_FUEL_LITERS_TO_ADD * BuildingInfo[fuel_station][bPrices][0];

                if(!PlayerInfo[i][pFuelTimer] || VehicleInfo[vehicleid][vFuel] == 100 || price_to_pay >= PlayerInfo[i][pCash] || BuildingInfo[fuel_station][bProducts] <= liters_to_add)
                {
                    if(BuildingInfo[fuel_station][bProducts] < 0)
                    {
                        VehicleInfo[vehicleid][vFuel] += BuildingInfo[fuel_station][bProducts];
                        BuildingInfo[fuel_station][bProducts] = 0;
                        SunucuMesajiC(i, "Bu pompada bulunan yakýt tükendiði için dolum sonlandýrýldý.");
                        return 1;
                    }

                    if(price_to_pay > PlayerInfo[i][pCash])
                    {
                        liters_to_add = PlayerInfo[i][pCash] / BuildingInfo[fuel_station][bPrices][0];
                        price_to_pay = liters_to_add * BuildingInfo[fuel_station][bPrices][0];
                        VehicleInfo[vehicleid][vFuel] += liters_to_add;
                        SunucuMesajiC(i, "Paranýz yetmediði için paranýzýn yettiði kadar benzin alacaksýnýz.");
                        OAC_GivePlayerMoney(i, -price_to_pay);
                        SunucuMesaji(i, "%d litre benzin, araca $%d karþýlýðýnda dolduruldu. ($%d x litre)", liters_to_add, price_to_pay, BuildingInfo[fuel_station][bPrices][0]);
                        TogglePlayerControllable(i, true);
                        PlayerInfo[i][pFreezed] = 0;
                        PlayerInfo[i][pFuelTimer] = 0;
                        return 1;
                    }
                    liters_to_add = PlayerInfo[i][pAlincakBenzin];
                    price_to_pay = liters_to_add * BuildingInfo[fuel_station][bPrices][0];
                    OAC_GivePlayerMoney(i, -price_to_pay);
                    SunucuMesaji(i, "%d litre benzin, araca $%d karþýlýðýnda dolduruldu. ($%d x litre)", liters_to_add, price_to_pay, BuildingInfo[fuel_station][bPrices][0]);
                    VehicleInfo[vehicleid][vFuel] += liters_to_add;
                    TogglePlayerControllable(i, true);
                    PlayerInfo[i][pFreezed] = 0;
                    PlayerInfo[i][pFuelTimer] = 0;
                }
            }

            if(!IsABike(vehicleid) && PlayerInfo[i][pVehicleHud])
            {
                speed = GetVehicleSpeed(vehicleid);
                format(string, sizeof(string), (speed <= 9) ? ("00%d") : (speed < 100) ? ("0%d") : ("%d"), speed);
                PlayerTextDrawSetString(i, VehicleSpeed[i], string);
                format(string, sizeof(string), "~y~%d%s", VehicleInfo[vehicleid][vFuel], "%");
                PlayerTextDrawSetString(i, VehicleFuel[i], string);
            }

            if(PlayerInfo[i][pStealTime] != -1 && PlayerInfo[i][pStealTime] > 0)
            {
                PlayerInfo[i][pStealTime]--;

                if(!PlayerInfo[i][pStealTime])
                {
                    PlayerInfo[i][pStealTime] = -1;
                    PlayerInfo[i][pStealCorrect] = 0; // sifirlama 08-03-2019
                    PlayerInfo[i][pStealWrong] = 0; // sifirlama 08-03-2019
                    TextStealVeh_Hide(i);
                    HataMesaji(i, "Aracýn motorunu zamanýnda açamadýn.");
                    Alarm_VehicleTurnOn(i, GetPlayerVehicleID(i));
                    DestroyDynamic3DTextLabelEx(PlayerInfo[i][pNameTag]);
                }
                else TextStealVeh_Update(i, PlayerInfo[i][pStealScrambleWord], PlayerInfo[i][pStealTime]);
            }

            //VehicleInfo[vehicleid][vSpawnExpires] = gettime() + (60 * 30);
        }

        if(PlayerInfo[i][pStealHitTimeout] > 0)
        {
            if(PlayerInfo[i][pStealHitTimeout] == 5) TextHit_Show(i);
            PlayerInfo[i][pStealHitTimeout]--;

            if(!PlayerInfo[i][pStealHitTimeout]) TextHit_Hide(i);
            else TextHit_Update(i, PlayerInfo[i][pStealHit]);
        }

        if(IsPlayerSprinting(i) && PlayerInfo[i][pDeath] > 0)
        {
            ClearAnimations(i);
            ApplyAnimation(i, "WUZI", "CS_Dead_Guy", 4.1, 0, 1, 1, 1, 0, 1);
        }

        if(IsPlayerSprinting(i) && PlayerInfo[i][pDrugUnconscious])
        {
            ClearAnimations(i);
            ApplyAnimation(i, "CRACK", "crckdeth2", 4.1, 0, 1, 1, 1, 0, 1);
        }

        new Float:vx,Float:vy,Float:vz;
        GetPlayerVelocity(i,vx,vy,vz);
        if(PlayerInfo[i][pDeath] > 0 && (vy > 0.01 || vy <-0.01 || vx > 0.01 || vx <-0.01))
        {
            ClearAnimations(i);
            ApplyAnimation(i, "WUZI", "CS_Dead_Guy", 4.1, 0, 1, 1, 1, 0, 1);
        }
        else if(PlayerInfo[i][pDrugUnconscious] && (vy > 0.01 || vy <-0.01 || vx > 0.01 || vx <-0.01))
        {
            ClearAnimations(i);
            ApplyAnimation(i, "CRACK", "crckdeth2", 4.1, 0, 1, 1, 1, 0, 1);
        }

        if(IsPlayerSprinting(i) && PlayerInfo[i][pDrugRunJumpBlock] && !PlayerInfo[i][pDrugUnconscious])
            ApplyAnimation(i, "PED", "FALL_collapse", 4.1, 0, 1, 1, 0, 0);

        if(IsPlayerSprinting(i) && PlayerInfo[i][pLegHit] && !PlayerInfo[i][pDeath])
            ApplyAnimation(i, "PED", "FALL_collapse", 4.1, 0, 1, 1, 0, 0);
    }

    return 1;
}

SaatlikTimer(); public SaatlikTimer()
{
    SunucuBilgi[CurrentHour] = ReturnHour();
    SetWorldTime(SunucuBilgi[CurrentHour]);
        
    foreach(new pid : Player) if(IsPlayerConnected(pid) && PlayerInfo[pid][pLogged] && GetPlayerVirtualWorld(pid) >= HOUSE_WORLD)
        OnPlayerVirtualWorldChange(pid, GetPlayerVirtualWorld(pid));
        
    foreach(new j : CopKutulari) if(CopKutusuInfo[j][copExists])
        CopKutusuCopVer(j);

    foreach(new o : Oteller) {
        if(!OtelInfo[o][otelExists]) continue;
        if(OtelInfo[o][otelKalanSure] > 0) {
            OtelInfo[o][otelKalanSure]--;
            if(OtelInfo[o][otelKalanSure] == 0) {
                OtelKiraBitir(o);
            }
        } 
    }
    return 1;
}

FrequentCheck(); public FrequentCheck()
{
    mysql_tquery(ourConnection, "SELECT * FROM staffrequests", "OnRequestSearch");

    foreach(new pid : Player) if(IsPlayerConnected(pid) && PlayerInfo[pid][pLogged])
        SaveCharacter(pid);

    return 1;
}

VehicleCheck(); public VehicleCheck()
{
    new Float:health;

    foreach(new v : Vehicles) if(IsValidVehicle(v) && VehicleInfo[v][vScript])
    {
        if(IsABike(VehicleInfo[v][vScript]) || !VehicleInfo[v][vEngine])continue;
        if(VehicleInfo[v][vFaction] != INVALID_VEHICLE_ID && (Faction_GetType(VehicleInfo[v][vFaction]) == POLICE || Faction_GetType(VehicleInfo[v][vFaction]) == MEDICAL || Faction_GetType(VehicleInfo[v][vFaction]) == GOVERNMENT) && !VehicleInfo[v][vOwner])continue;

        GetVehicleHealth(v, health);

        if(!IsVehicleUsed(v) && !VehicleInfo[v][vFuel] || health <= 400.0)
        {
            SetVehicleParamsEx(v, VEHICLE_PARAMS_OFF, VEHICLE_PARAMS_OFF, VEHICLE_PARAMS_OFF, VehicleInfo[v][vLocked], VehicleInfo[v][vBonnet], VehicleInfo[v][vBoot], VehicleInfo[v][vObje]);
            VehicleInfo[v][vEngine] = 0;
        }

        if(VehicleInfo[v][vFuel] > 0 && VehicleInfo[v][vEngine] && !DevletAraci(v) && VehicleInfo[v][vJob] == -1) VehicleInfo[v][vFuel]--;
    }

    return 1;
}

//Objects System

DestroyDynamicObjectEx(&objectid)
{
    for(new j; j < 12; j++) SetDynamicObjectMaterial(objectid, j, 19341, "invalid", "invalid");
    if(IsValidDynamicObject(objectid)) DestroyDynamicObject(objectid);
    objectid = INVALID_OBJECT_ID;
    return 1;
}

DestroyDynamic3DTextLabelEx(&Text3D:labelid)
{
    DestroyDynamic3DTextLabel(labelid);
    labelid = Text3D:INVALID_3DTEXT_ID;
    return 1;
}

//MySQL Callbacks

OnLoadLogDetails(playerid); public OnLoadLogDetails(playerid)
{
    static rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);

    if(!rows)return 1;

    new tmpCommand[64];
    new tmpDate[36];
    new tmpGiver;
    new tmpReceiver;
    new tmpValue[2];

    cache_get_value_int(0, "giver_character_id", tmpGiver);
    cache_get_value_int(0, "receiver_character_id", tmpReceiver);
    cache_get_value_int(0, "extra_var", tmpValue[0]);
    cache_get_value_int(0, "second_extra_var", tmpValue[1]);
    cache_get_value(0, "command", tmpCommand, 64);
    cache_get_value(0, "created_at", tmpDate, 36);

    return Dialog_Show(playerid, DialogNull, DIALOG_STYLE_MSGBOX, "Server Log", "%d (%s <%d> <%d>) komutunu %d kiþisine uyguladý. (%s)", "Ýptal", "", tmpGiver, tmpCommand, tmpValue[0], tmpValue[1], tmpReceiver, tmpDate);
}

/*OnSearchAccountBannedVehicles(); public OnSearchAccountBannedVehicles()
{
    static rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);

    new id;
    // new query[90];

    for(new j; j < rows; j++)
    {
        cache_get_value_int(j, "id", id);

        mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT id FROM vehicles WHERE owner_id = '%d'", id);
        mysql_tquery(ourConnection, queryx, "OnDespawnAccountBannedVehicles");
    }
    print("yasakli oyuncu araclari yuklendi");
    return 1;
}

OnDespawnAccountBannedVehicles(); public OnDespawnAccountBannedVehicles()
{
    static rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);

    if(!rows)return 1;

    new id;

    for(new j; j < rows; j++)
    {
        cache_get_value_int(j, "id", id);

        foreach(new v : Vehicles) if(IsValidVehicle(v) && VehicleInfo[v][vID] == id)
            Vehicle_Despawn(v);
    }
    print("yasakli oyuncu araclari kaldirildi");
    return 1;
}*/

OnPObjectExists(playerid, p_slot, slot); public OnPObjectExists(playerid, p_slot, slot)
{
    static rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);

    if(!rows)return
        SunucuMesajiC(playerid, "Herhangi bir nesne bulunamadý.");

    PlayerInfo[playerid][pObjectSlotOccupied][slot] = 1;
    return PlayerObjects_SetObject(playerid, p_slot, slot);
}

OnUpdateFactionInfo(playerid, fid, slot, amount, entity_type, rank[80]); public OnUpdateFactionInfo(playerid, fid, slot, amount, entity_type, rank[80])
{
    static rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);

    // new query[256];

    if(!rows)
    {
        mysql_format(ourConnection, queryx, sizeof(queryx), "INSERT INTO factions_info (slot, faction_id) VALUES ('%d', '%d')", slot, FactionInfo[fid][fID]);
        mysql_tquery(ourConnection, queryx);
    }

    switch(entity_type)
    {
        case EDITING_TYPE_SKIN:
        {
            mysql_format(ourConnection, queryx, sizeof(queryx), "UPDATE factions_info SET skin_id = '%d' WHERE slot = '%d' AND faction_id = '%d'", amount, slot, FactionInfo[fid][fID]);
            mysql_tquery(ourConnection, queryx);

            FactionInfo[fid][fSkinsCount] = 0;

            for(new j; j < MAX_FACTION_RANKS; j++) if(FactionInfo[fid][fSkins][j]) FactionInfo[fid][fSkinsCount]++;

            Faction_SkinsList(playerid, fid);

            SendAworkAlert(false, COLOR_ADMIN, "AdmCmd: %s %d ID'li oluþumu düzenledi. Düzenlenen seçenek: \"Kýyafet\".", ReturnRoleplayName(playerid), fid);

//            LogYaz(playerid, "/fedit uniforma", -1, fid, slot);
        }
        case EDITING_TYPE_SALARY:
        {
            mysql_format(ourConnection, queryx, sizeof(queryx), "UPDATE factions_info SET salary = '%d' WHERE slot = '%d' AND faction_id = '%d'", amount, slot, FactionInfo[fid][fID]);
            mysql_tquery(ourConnection, queryx);

            Faction_SalariesList(playerid, fid);

            SendAdminAlert(false, COLOR_ADMIN, "AdmCmd: %s %d ID'li oluþumu düzenledi. Düzenlenen seçenek: \"Maaþ\".", ReturnRoleplayName(playerid), fid);

            LogYaz(playerid, "/fedit maas", -1, fid, slot);
        }
        case EDITING_TYPE_RANK:
        {
            mysql_format(ourConnection, queryx, sizeof(queryx), "UPDATE factions_info SET rank_name = '%e' WHERE slot = '%d' AND faction_id = '%d'", rank, slot, FactionInfo[fid][fID]);
            mysql_tquery(ourConnection, queryx);

            Faction_RankList(playerid, fid);

            SendAworkAlert(false, COLOR_ADMIN, "AdmCmd: %s %d ID'li oluþumu düzenledi. Düzenlenen seçenek: \"Rütbe\".", ReturnRoleplayName(playerid), fid);

//            LogYaz(playerid, "/fedit rutbeadi", -1, fid, slot);
        }
        default: return 1;
    }

    return 1;
}

OnRequestSearch(); public OnRequestSearch()
{
    static rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);

    new reqCount[2];

    if(rows) for(new j; j < rows; j++)
    {
        if(j >= MAX_REQUESTS)break;
        new reqType;
        cache_get_value_int(j, "type", reqType);
        reqCount[reqType]++;
    }

    if(reqCount[0] > 0)
        SoruYollaHelper(COLOR_SUPPORTER, "** (S) Ýlgilenilmemiþ %d adet soru var.**", reqCount[0]);

    return 1;
}
OnRefuseRequestSearch(playerid, id); public OnRefuseRequestSearch(playerid, id)
{
    static rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);

    // new query[128];

    if(!rows)return
        SunucuMesajiC(playerid, "Talep yok.");
    new ownerid, type;
    cache_get_value_int(0, "owner_id", ownerid);
    cache_get_value_int(0, "type", type);

    if(PlayerInfo[playerid][pAdmin] < 3 && type > 0)return
        SunucuMesajiC(playerid, "Bu istek ile etkileþime giremezsin.");

    SendFormattedMessage(ownerid, COLOR_GREEN, "%s (ID: %d) talebinizi reddetti. Sebep: %s", ReturnRoleplayName(playerid), playerid, PlayerInfo[playerid][pText]);
    SendFormattedMessage(playerid, COLOR_GREEN, "%s (ID: %d) kiþisinin talebini %s sebebiyle reddettin.", ReturnRoleplayName(ownerid), ownerid, PlayerInfo[playerid][pText]);

    mysql_format(ourConnection, queryx, sizeof(queryx), "DELETE FROM staffrequests WHERE id = '%d'", id);
    mysql_tquery(ourConnection, queryx);

    PlayerInfo[ownerid][pRequestCount]--;
    PlayerInfo[playerid][pReportTime] = 0;
    PlayerInfo[playerid][pRequestID] = -1;
    PlayerInfo[playerid][pSoruPuani]++;
    SavePlayer(playerid);
    Iter_Remove(Requests, id);

    if(!type) return SoruYollaHelper(COLOR_SUPPORTER, "%s, %s (ID: %d) kiþisinin sorusunu reddetti. Sebep: %s", ReturnRoleplayName(playerid), ReturnRoleplayName(ownerid), ownerid, PlayerInfo[playerid][pText]);

    SendAworkAlert(true, COLOR_ADMIN, "AdmCmd: %s, %s (ID: %d) kiþisinin raporunu reddetti. Sebep: %s", ReturnRoleplayName(playerid), ReturnRoleplayName(ownerid), ownerid, PlayerInfo[playerid][pText]);

    return 1;
}

RaporYanitlama(playerid, id); public RaporYanitlama(playerid, id)
{
    static rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);

    if(!rows)return
        SunucuMesajiC(playerid, "Talep yok.");
    new ownerid, type, text[124];
    cache_get_value(0, "text", text);
    cache_get_value_int(0, "owner_id", ownerid);
    cache_get_value_int(0, "type", type);

    if(PlayerInfo[playerid][pAdmin] < 3 && type > 0)return
        SunucuMesajiC(playerid, "Bu istek ile etkileþime giremezsin.");

    SendFormattedMessage(ownerid, COLOR_GREEN, "Raporunuz: %s", text);
    SendFormattedMessage(ownerid, COLOR_GREEN, "%s (%d): %s", ReturnRoleplayName(playerid, true), playerid, PlayerInfo[playerid][pText]);

    mysql_format(ourConnection, queryx, sizeof(queryx), "DELETE FROM staffrequests WHERE id = '%d'", id);
    mysql_tquery(ourConnection, queryx);

    PlayerInfo[ownerid][pRequestCount]--;
    PlayerInfo[playerid][pReportTime] = 0;
    PlayerInfo[playerid][pRequestID] = -1;
    PlayerInfo[playerid][pSoruPuani]++;
    SavePlayer(playerid);
    Iter_Remove(Requests, id);

    SendAdminHelperAlert(true, COLOR_ADMIN, "AdmCmd: %s, %s(%d) kiþisinin talebini yanýtladý: %s", ReturnRoleplayName(playerid), ReturnRoleplayName(ownerid), ownerid, PlayerInfo[playerid][pText]);
    return 1;
}

RequestDegistir(playerid, id); public RequestDegistir(playerid, id)
{
    static rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);

    // new query[128];

    if(!rows)return
        SunucuMesajiC(playerid, "Talep yok.");

    new ownerid, type;
    cache_get_value_int(0, "owner_id", ownerid);
    cache_get_value_int(0, "type", type);

    if(PlayerInfo[playerid][pAdmin] < 3 && type > 0)return
        SunucuMesajiC(playerid, "Bu istek ile etkileþime giremezsin.");

    if(type == 1)
    {
        mysql_format(ourConnection, queryx, sizeof(queryx), "UPDATE staffrequests SET type = '0' WHERE id = '%d'", id);
        mysql_tquery(ourConnection, queryx);
    }
    else
    {
        mysql_format(ourConnection, queryx, sizeof(queryx), "UPDATE staffrequests SET type = '1' WHERE id = '%d'", id);
        mysql_tquery(ourConnection, queryx);
    }

    SendFormattedMessage(ownerid, COLOR_GREEN, "%s (ID: %d) destek talebinizin kategorisini deðiþtirdi, lütfen bekleyin.", ReturnRoleplayName(playerid), playerid);
    SendFormattedMessage(playerid, COLOR_GREEN, "%s (ID: %d) kiþisinin destek talebinin kategorisini deðiþtirdin.", ReturnRoleplayName(ownerid), ownerid);
    PlayerInfo[playerid][pSoruPuani]++;
    SavePlayer(playerid);
    if(!type) return SendSupporterAlert(COLOR_SUPPORTER, "%s, %s (ID: %d) kiþisinin talebinin kategorisini deðiþtirdi.", ReturnRoleplayName(playerid), ReturnRoleplayName(ownerid), ownerid);

    SendAworkAlert(true, COLOR_ADMIN, "AdmCmd: %s, %s (ID: %d) kiþisinin talebinin kategorisini deðiþtirdi.", ReturnRoleplayName(playerid), ReturnRoleplayName(ownerid), ownerid);
    PlayerInfo[playerid][pRequestID] = -1;
    return 1;
}


RequestForumaYolla(playerid, id); public RequestForumaYolla(playerid, id)
{
    static rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);

    // new query[128];

    if(!rows)return
        SunucuMesajiC(playerid, "Talep yok.");
    new ownerid, type;
    cache_get_value_int(0, "owner_id", ownerid);
    cache_get_value_int(0, "type", type);

    if(PlayerInfo[playerid][pAdmin] < 3 && type > 0)return
        SunucuMesajiC(playerid, "Bu istek ile etkileþime giremezsin.");

    SendFormattedMessage(ownerid, COLOR_GREEN, "%s (ID: %d) destek talebinizi foruma yönlendirdi. Bu konuyu forum.sa-rp.com adresinde çözebilirsin.", ReturnRoleplayName(playerid), playerid);
    SendFormattedMessage(playerid, COLOR_GREEN, "%s (ID: %d) kiþisinin destek talebini foruma yönlendirdin.", ReturnRoleplayName(ownerid), ownerid);

    mysql_format(ourConnection, queryx, sizeof(queryx), "DELETE FROM staffrequests WHERE id = '%d'", id);
    mysql_tquery(ourConnection, queryx);

    PlayerInfo[ownerid][pRequestCount]--;
    PlayerInfo[playerid][pReportTime] = 0;
    PlayerInfo[playerid][pRequestID] = -1;
    PlayerInfo[playerid][pSoruPuani]++;
    SavePlayer(playerid);
    Iter_Remove(Requests, id);

    if(!type) return SendSupporterAlert(COLOR_SUPPORTER, "%s, %s (ID: %d) kiþisinin sorusunu foruma yönlendirdi.", ReturnRoleplayName(playerid), ReturnRoleplayName(ownerid), ownerid);

    SendAworkAlert(true, COLOR_ADMIN, "AdmCmd: %s, %s (ID: %d) kiþisinin raporunu foruma yönlendirdi.", ReturnRoleplayName(playerid), ReturnRoleplayName(ownerid), ownerid);
    return 1;
}

OnDeleteRequestSearch(playerid, id); public OnDeleteRequestSearch(playerid, id)
{
    static rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);

    // new query[128];

    if(!rows)return
        SunucuMesajiC(playerid, "Talep yok.");
    new ownerid, type;
    cache_get_value_int(0, "owner_id", ownerid);
    cache_get_value_int(0, "type", type);


    SendFormattedMessage(playerid, COLOR_GREEN, "Destek talebinizi iptal ettiniz.");

    mysql_format(ourConnection, queryx, sizeof(queryx), "DELETE FROM staffrequests WHERE id = '%d'", id);
    mysql_tquery(ourConnection, queryx);

    PlayerInfo[ownerid][pRequestCount]--;
    PlayerInfo[playerid][pReportTime] = 0;
    PlayerInfo[playerid][pRequestID] = -1;

    Iter_Remove(Requests, id);

    if(!type) return SendSupporterAlert(COLOR_SUPPORTER, "%s (ID: %d) kiþisi talebini iptal etti.", ReturnRoleplayName(playerid), ownerid);

    SendAworkAlert(true, COLOR_ADMIN, "AdmCmd: %s (ID: %d) kiþisi talebini iptal etti.", ReturnRoleplayName(playerid), ownerid);
    return 1;
}

OnAcceptRequestSearch(playerid, id); public OnAcceptRequestSearch(playerid, id)
{
    static rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);

    // new query[128];

    if(!rows)return
        SunucuMesajiC(playerid, "Talep yok.");
    new ownerid, type;
    cache_get_value_int(0, "owner_id", ownerid);
    cache_get_value_int(0, "type", type);

    if(PlayerInfo[playerid][pAdmin] < 3 && type > 0)return
        SunucuMesajiC(playerid, "Bu istek ile etkileþime giremezsin.");

    SendFormattedMessage(ownerid, COLOR_GREEN, "%s (ID: %d) destek talebinizi kabul etti, sizinle iletiþime geçmesini bekleyin.", ReturnRoleplayName(playerid), playerid);
    SendFormattedMessage(playerid, COLOR_GREEN, "%s (ID: %d) kiþisinin destek talebini kabul ettin.", ReturnRoleplayName(ownerid), ownerid);

    mysql_format(ourConnection, queryx, sizeof(queryx), "DELETE FROM staffrequests WHERE id = '%d'", id);
    mysql_tquery(ourConnection, queryx);

    PlayerInfo[ownerid][pRequestCount]--;
    PlayerInfo[playerid][pReportTime] = 0;
    PlayerInfo[playerid][pRequestID] = -1;

    Iter_Remove(Requests, id);
    PlayerInfo[playerid][pSoruPuani]++;
    SavePlayer(playerid);
    if(!type) return SendSupporterAlert(COLOR_SUPPORTER, "%s, %s (ID: %d) kiþisinin sorusunu kabul etti.", ReturnRoleplayName(playerid), ReturnRoleplayName(ownerid), ownerid);

    SendAworkAlert(true, COLOR_ADMIN, "AdmCmd: %s, %s (ID: %d) kiþisinin raporunu kabul etti.", ReturnRoleplayName(playerid), ReturnRoleplayName(ownerid), ownerid);
    return 1;
}

OnResetRequestsSearch(playerid); public OnResetRequestsSearch(playerid)
{
    static rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);

    if(!rows)return 1;

    // new query[128];
    new id;

    for(new j; j < rows; j++)
    {
        cache_get_value_int(j, "id", id);
        Iter_SafeRemove(Requests, id, id);
    }

    mysql_format(ourConnection, queryx, sizeof(queryx), "DELETE FROM staffrequests WHERE owner_id = '%d'", playerid);
    mysql_tquery(ourConnection, queryx);

    PlayerInfo[playerid][pRequestCount] = 0;
    PlayerInfo[playerid][pReportTime] = 0;
    print("onresetrequestssearch yuklendi");
    return 1;
}

OnPlayerRequestsSearch(playerid); public OnPlayerRequestsSearch(playerid)
{
    static rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);

    if(!rows)return 1;

    new tmpTime, tmpID, count, string[500];

    for(new j; j < rows; j++)
    {
        cache_get_value_int(j, "time", tmpTime);
        cache_get_value_int(j, "id", tmpID);
        format(string, sizeof(string), "%s#%d (%s)\n", string, tmpID, timec(tmpTime));
        PlayerInfo[playerid][pRequestsID][count] = tmpID;
        count++;
    }

    Dialog_Show(playerid, DialogRequests, DIALOG_STYLE_LIST, "Ýstekler", string, "Ayrýntýlar", "Ýptal");
    print("onresetrequestssearch yuklendi 2");
    return 1;
}

OnListRequestsSearch(playerid); public OnListRequestsSearch(playerid)
{
    static rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);

    if(!rows)return
        SunucuMesajiC(playerid, "Bekleyen istek/rapor yok.");

    new reqID, reqOwner, count, string[1024];
    // new query[256];

    for(new j; j < rows; j++)
    {
        if(j >= MAX_REQUESTS)break;

        cache_get_value_int(j, "id", reqID);
        cache_get_value_int(j, "owner_id", reqOwner);

        if(!IsPlayerConnected(reqOwner) || !PlayerInfo[reqOwner][pLogged])
        {
            mysql_format(ourConnection, queryx, sizeof(queryx), "DELETE FROM staffrequests WHERE id = '%d'", reqID);
            mysql_tquery(ourConnection, queryx);
        }

        format(string, sizeof(string), "%s#%d - %s (%d)\n", string, reqID, ReturnRoleplayName(reqOwner), reqOwner);
        PlayerInfo[playerid][pRequestsID][count] = reqID;
        count++;
    }

    Dialog_Show(playerid, DialogRequests, DIALOG_STYLE_LIST, "Ýstekler", string, "Ayrýntýlar", "Ýptal");
    print("onlistrequestssearch yuklendi");
    return 1;
}

OnLoadAccount(playerid); public OnLoadAccount(playerid)
{
    static rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);

    if(rows)
    {
        cache_get_value_int(0, "account_id", PlayerInfo[playerid][pAccountID]);
        cache_get_value_int(0, "id", PlayerInfo[playerid][pID]);
        cache_get_value(0, "username", PlayerInfo[playerid][pUsername], 30);

        foreach(new j : Player)
        if(j != playerid && PlayerInfo[j][pAccountID] == PlayerInfo[playerid][pAccountID])
        {
            SendAworkAlert(false, COLOR_LIGHTRED, "%s adlý karakter çevrimiçi olmasýna raðmen hesaba giriþ denemesinde bulundu.", ReturnRoleplayName(j));
            return KickPlayer(playerid, "SA-RP", "Hesap zaten baðlý.");
        }

        Dialog_Show(playerid, DialogLogin, DIALOG_STYLE_PASSWORD, "SA-RP - Giriþ", "%s adlý karaktere eriþim için þifrenizi girin.", "Giriþ", "", ReturnRoleplayName(playerid));
        InterpolateCameraPos(playerid, 1427.9333,-1608.2584,78.3223, 1482.4427,-1634.4243,75.5894, 12500, CAMERA_CUT);
        InterpolateCameraLookAt(playerid, 1542.5426,-1670.0254,13.7504, 1542.5426,-1670.0254,13.7504, 12500, CAMERA_CUT);
        SetPlayerPos(playerid, 1542.5426,-1670.0254,0.7504);
        TogglePlayerControllable(playerid, false);
    }
    else return KickPlayer(playerid, "SA-RP", "Kayýtlý deðilsin, sandreas-roleplay.com/ucp sitesinden karakter baþvurusu göndermelisin.");

    return 1;
}

OnAccountLoggedIn(playerid); public OnAccountLoggedIn(playerid)
{
    static rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);

    new ip[16];

    if(!rows)
    {
        PlayerInfo[playerid][pLoginAttempts]++;

        if(PlayerInfo[playerid][pLoginAttempts] >= 3)return
            KickPlayer(playerid, "SA-RP", "Hatalý þifre sýnýrýný aþtýn. (3/3).");

        Dialog_Show(playerid, DialogLogin, DIALOG_STYLE_PASSWORD, "SA-RP - Giriþ", "Hatalý þifre girdiniz, lütfen tekrar deneyin.\n%s adlý karaktere eriþim için þifrenizi girin.", "Giriþ", "", ReturnRoleplayName(playerid));
    }
    else
    {
        new banned;
        cache_get_value_int(0, "banned", banned);
        cache_get_value_int(0, "premium", PlayerInfo[playerid][pPremium]);
        cache_get_value_int(0, "coyn_points", PlayerInfo[playerid][pCoyn]);
        cache_get_value_int(0, "coyn_payday", PlayerInfo[playerid][pCoynPayday]);
        cache_get_value_int(0, "nick_change", PlayerInfo[playerid][pNickChange]);
        cache_get_value_int(0, "number_change", PlayerInfo[playerid][pNumberChange]);
        cache_get_value_int(0, "plate_change", PlayerInfo[playerid][pPlateChange]);
        cache_get_value_int(0, "dpayday", PlayerInfo[playerid][DoublePayday]);
        cache_get_value_int(0, "pmdurum", PlayerInfo[playerid][pTogPM]);
        cache_get_value_int(0, "max_slot", PlayerInfo[playerid][pMaxSlot]);
        cache_get_value_int(0, "gizliadmin", PlayerInfo[playerid][pGizliAdmin]);
        cache_get_value_int(0, "sorupuan", PlayerInfo[playerid][pSoruPuani]);
        cache_get_value_int(0, "uyaripuani", PlayerInfo[playerid][pUyariSayisi]);
        cache_get_value_int(0, "calinanarac", PlayerInfo[playerid][pCalinanArac]);
        new donatestring[50];
        cache_get_value(0, "donateskinler", donatestring, 50);
        sscanf(donatestring, "p<|>ddddd", PlayerInfo[playerid][pDonateSkin][0], PlayerInfo[playerid][pDonateSkin][1], PlayerInfo[playerid][pDonateSkin][2],
        PlayerInfo[playerid][pDonateSkin][3], PlayerInfo[playerid][pDonateSkin][4]);
        cache_get_value_int(0, "hirsizlik", PlayerInfo[playerid][pHirsizlik]);
        cache_get_value_int(0, "hirsizlikgelir", PlayerInfo[playerid][pHirsizlikGelir]);

        if(banned)return
            KickPlayer(playerid, "SA-RP", "Hesap kalýcý olarak yasaklý.");

        //TextDrawHideForPlayer(playerid, Text:SunucuLogo);

        GetPlayerIp(playerid, PlayerInfo[playerid][pIP], 16);
        format(PlayerInfo[playerid][pLoginDate], 36, ReturnDate());

        cache_get_value_int(0, "admin_level", PlayerInfo[playerid][pAdmin]);

        GetPlayerIp(playerid, ip, 16);

        for(new x; x < 8; x++) {
            if(PlayerInfo[playerid][pRadioSlot][x] == 692 && Faction_GetType(PlayerInfo[playerid][pFaction]) != POLICE) {
                PlayerInfo[playerid][pRadioSlot][x] = 0;
            }
        }

        mysql_format(ourConnection, queryx, sizeof(queryx), "UPDATE accounts SET last_ip = '%e' WHERE id = '%d'", ip, PlayerInfo[playerid][pAccountID]);
        mysql_tquery(ourConnection, queryx);

        mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT * FROM characters WHERE id = '%d'", PlayerInfo[playerid][pID]);
        mysql_tquery(ourConnection, queryx, "OnCharacterLoad", "d", playerid);

        mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT * FROM weapon_licenses WHERE receiver_id = '%d'", PlayerInfo[playerid][pID]);
        mysql_tquery(ourConnection, queryx, "OnWeaponLicenseSearch", "d", playerid);

        mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT * FROM radio_authorized WHERE id = '%d'", PlayerInfo[playerid][pID]);
        mysql_tquery(ourConnection, queryx, "OnRadioAuthSearch", "d", playerid);

        mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT * FROM refunds WHERE character_id = '%d'", PlayerInfo[playerid][pID]);
        mysql_tquery(ourConnection, queryx, "OnRefundsSearch", "d", playerid);

        mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT * FROM weaponsettings WHERE sOwner = '%d'", PlayerInfo[playerid][pID]);
        mysql_tquery(ourConnection, queryx, "OnLoadWeapons", "d", playerid);
    }

    return 1;
}

OnPlayerInventoryLoad(playerid); public OnPlayerInventoryLoad(playerid)
{
    static rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);

    if(!rows)return 1;

    for(new j; j < rows && j < MAX_INVENTORY_ITEMS; j++)
    {
        cache_get_value_int(j, "item_id", PlayerInfo[playerid][pInvList][j]);
        cache_get_value_int(j, "amount", PlayerInfo[playerid][pInvAmount][j]);
        cache_get_value_int(j, "extra_value", PlayerInfo[playerid][pInvExtra][j]);
        cache_get_value_int(j, "credit", PlayerInfo[playerid][pInvCredit][j]);
    }
    return 1;
}

OnCharacterLoad(playerid); public OnCharacterLoad(playerid)
{
    new string[256], skin;

    cache_get_value_int(0, "sex", PlayerInfo[playerid][pSex]);
    cache_get_value_int(0, "house", PlayerInfo[playerid][pHouse]);
    cache_get_value_int(0, "faction_id", PlayerInfo[playerid][pFaction]);
    cache_get_value_int(0, "faction_rank_id", PlayerInfo[playerid][pRank]);
    cache_get_value_int(0, "level", PlayerInfo[playerid][pLevel]);
    cache_get_value_int(0, "cash", PlayerInfo[playerid][pCash]);
    cache_get_value_int(0, "cash_bank", PlayerInfo[playerid][pCashBank]);
    cache_get_value_int(0, "experience", PlayerInfo[playerid][pExperience]);
    cache_get_value_int(0, "banned", PlayerInfo[playerid][pBanned]);
    cache_get_value_float(0, "health", PlayerInfo[playerid][pHealth]);
    cache_get_value_float(0, "spawn_health", PlayerInfo[playerid][pSpawnHealth]);
    cache_get_value_float(0, "armour", PlayerInfo[playerid][pArmour]);
    cache_get_value_int(0, "calistigimyer", PlayerInfo[playerid][pCalistigiIsyeri][1]);
    cache_get_value_int(0, "new_skin", skin);
    if(skin <= 0) // 1
        cache_get_value_int(0, "skin", PlayerInfo[playerid][pSkin]);
    else
        cache_get_value_int(0, "new_skin", PlayerInfo[playerid][pSkin]);
    cache_get_value_int(0, "original_skin", PlayerInfo[playerid][pOriginalSkin]);
    cache_get_value_int(0, "spawn_point", PlayerInfo[playerid][pSpawnPoint]);
    cache_get_value_int(0, "jail_time", PlayerInfo[playerid][pJailTime]);
    cache_get_value_int(0, "crashed", PlayerInfo[playerid][pCrashed]);
    cache_get_value_int(0, "house_price", PlayerInfo[playerid][pHousePrice]);
    cache_get_value_int(0, "minutes", PlayerInfo[playerid][pMinutes]);
    cache_get_value_int(0, "playing_hours", PlayerInfo[playerid][pPlayingHours]);
    cache_get_value_int(0, "drive_license", PlayerInfo[playerid][pLicenses][0]);
    cache_get_value_int(0, "boat_license", PlayerInfo[playerid][pLicenses][1]);
    cache_get_value_int(0, "fly_license", PlayerInfo[playerid][pLicenses][2]);
    cache_get_value_int(0, "job", PlayerInfo[playerid][pJob]);
    cache_get_value_int(0, "frequence", PlayerInfo[playerid][pFrequence]);
    cache_get_value_int(0, "hud", PlayerInfo[playerid][pHud]);
    cache_get_value_int(0, "shortcut", PlayerInfo[playerid][pShortcut]);
    cache_get_value_int(0, "tog_ooc_permission", PlayerInfo[playerid][pTogOOCPremium]);
    cache_get_value_int(0, "tog_pm_permission", PlayerInfo[playerid][pTogPMPremium]);
    cache_get_value_int(0, "bmx_permission", PlayerInfo[playerid][pBMXPermission]);
    cache_get_value_int(0, "jail_expires", PlayerInfo[playerid][pJailC]);
    cache_get_value_int(0, "death", PlayerInfo[playerid][pDeath]);
    cache_get_value_int(0, "drive_license_warn", PlayerInfo[playerid][pLicenseWarn]);
    cache_get_value_int(0, "fishes", PlayerInfo[playerid][pBalik]);
    cache_get_value_int(0, "chat_style", PlayerInfo[playerid][pChatStyle]);
    cache_get_value_int(0, "fight_style", PlayerInfo[playerid][pFightStyle]);
    cache_get_value_int(0, "house_spawn", PlayerInfo[playerid][pHouseSpawn]);
    cache_get_value_int(0, "paycheck", PlayerInfo[playerid][pPaycheck]);
    cache_get_value_int(0, "savings", PlayerInfo[playerid][pSavings]);
    cache_get_value_float(0, "spawn_x", PlayerInfo[playerid][pPosX]);
    cache_get_value_float(0, "spawn_y", PlayerInfo[playerid][pPosY]);
    cache_get_value_float(0, "spawn_z", PlayerInfo[playerid][pPosZ]);
    cache_get_value_float(0, "spawn_angle", PlayerInfo[playerid][pPosA]);
    cache_get_value_int(0, "yem", PlayerInfo[playerid][pBalikYemi]);
    cache_get_value_int(0, "balikagi", PlayerInfo[playerid][pBalikAgi]);
    cache_get_value_int(0, "kgelir", PlayerInfo[playerid][KamyoncuGeliri]);
    //cache_get_value_int(0, "guvenlik", PlayerInfo[playerid][pGuvenlik]);
    cache_get_value_int(0, "glisansi", PlayerInfo[playerid][pGuvenlikLisansi]);
    cache_get_value_int(0, "spawn_int", PlayerInfo[playerid][pCrashInt]);
    cache_get_value_int(0, "spawn_vw", PlayerInfo[playerid][pCrashWorld]);
    cache_get_value_int(0, "faction_duty", PlayerInfo[playerid][pFactionDuty]);
    cache_get_value_int(0, "masked", PlayerInfo[playerid][pMasked]);
    cache_get_value_int(0, "ten_rengi", PlayerInfo[playerid][pTenRengi]);
    cache_get_value_int(0, "karakter_yapti", PlayerInfo[playerid][pKarakterYapti]);
    cache_get_value_int(0, "yas", PlayerInfo[playerid][pAge]);
    cache_get_value_int(0, "btedavi", PlayerInfo[playerid][BagimlilikTedavi]);
    cache_get_value(0, "transfer", string, 32);
    cache_get_value(0, "ozellik", PlayerInfo[playerid][pOzellik], 256);
    cache_get_value_int(0, "ccwgunid", PlayerInfo[playerid][CCWGunID]);
    cache_get_value_int(0, "ccwgundate", PlayerInfo[playerid][CCWGunDate]);
    
    if(PlayerInfo[playerid][pDonateSkin][0] == 0)
    {
        cache_get_value_int(0, "donateskin", PlayerInfo[playerid][pDonateSkin][0]);
    }
    
    cache_get_value_int(0, "tamirkiti", PlayerInfo[playerid][pTamirKiti]);
    cache_get_value_int(0, "oyverdi", PlayerInfo[playerid][OyVerdim]);
    cache_get_value_int(0, "toplamceza", PlayerInfo[playerid][pToplamCeza]);
    cache_get_value_int(0, "swatskin", PlayerInfo[playerid][pSWATSkin]);
    cache_get_value_int(0, "tezgah", PlayerInfo[playerid][pTezgah]);
    cache_get_value_int(0, "masa", PlayerInfo[playerid][pTezgahMasa]);
    cache_get_value_int(0, "kamp", PlayerInfo[playerid][pKampEkipmani]);
    cache_get_value_int(0, "balikUcret", PlayerInfo[playerid][pBalikUcret]);
    cache_get_value_int(0, "balikCounter", PlayerInfo[playerid][pBalikCount]);
    cache_get_value_int(0, "aletc", PlayerInfo[playerid][pAletCantasi]);
    cache_get_value_int(0, "biletsayisi", PlayerInfo[playerid][pBiletMiktar]);
    cache_get_value_int(0, "lisanscooldown", PlayerInfo[playerid][pLisansCeza]);
    cache_get_value_int(0, "kamyonyetenegi", PlayerInfo[playerid][pKamyoncuYetenegi]);
    cache_get_value_int(0, "ahirsizlikyetenegi", PlayerInfo[playerid][pHirsizlikYetenegi]);
    cache_get_value_int(0, "gymp", PlayerInfo[playerid][GYMPuani]);
    cache_get_value_int(0, "kaslevel", PlayerInfo[playerid][KasSeviyesi]);
    cache_get_value_int(0, "balikyetenegi", PlayerInfo[playerid][pBalikYetenegi]);
    new copString[15];
    cache_get_value(0, "copesya", copString, 15);
    sscanf(copString, "p<|>ddddd", PlayerInfo[playerid][pCopEsyaEnvanter][0], PlayerInfo[playerid][pCopEsyaEnvanter][1], PlayerInfo[playerid][pCopEsyaEnvanter][2],
        PlayerInfo[playerid][pCopEsyaEnvanter][3], PlayerInfo[playerid][pCopEsyaEnvanter][4]);
    cache_get_value_int(0, "aldigicop", PlayerInfo[playerid][pCopEsyaAldi]);
    cache_get_value_int(0, "telefonkilifi", PlayerInfo[playerid][pTelefonKilifi]);
    cache_get_value_int(0, "kiraladigiotel", PlayerInfo[playerid][pKiraladigiOtel]);
    if(strlen(string) > 5)
    {
        new transfer_name[MAX_PLAYER_NAME];
        new amount;

        sscanf(string, "p<|>ds[24]", amount, transfer_name);
        if(!isnull(transfer_name) && amount) SunucuMesaji(playerid, "Banka hesabýnýza %s tarafýndan $%d transfer edildi.", transfer_name, amount);
    }
    cache_get_value(0, "ubagimlilik", string, 256);
    sscanf(string, "p<|>ddd", PlayerInfo[playerid][pDrugster], PlayerInfo[playerid][pDrugCrisis], PlayerInfo[playerid][pDrugRemainingTime]);
    new balikci[300];
    cache_get_value(0, "balikString", balikci, 300);
    sscanf(balikci, "p<|>dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd",
    PlayerInfo[playerid][pBalik][0], PlayerInfo[playerid][pBalikAgirlik][0], PlayerInfo[playerid][pBalik][1], PlayerInfo[playerid][pBalikAgirlik][1],
    PlayerInfo[playerid][pBalik][2], PlayerInfo[playerid][pBalikAgirlik][2], PlayerInfo[playerid][pBalik][3], PlayerInfo[playerid][pBalikAgirlik][3],
    PlayerInfo[playerid][pBalik][4], PlayerInfo[playerid][pBalikAgirlik][4], PlayerInfo[playerid][pBalik][5], PlayerInfo[playerid][pBalikAgirlik][5],
    PlayerInfo[playerid][pBalik][6], PlayerInfo[playerid][pBalikAgirlik][6], PlayerInfo[playerid][pBalik][7], PlayerInfo[playerid][pBalikAgirlik][7],
    PlayerInfo[playerid][pBalik][8], PlayerInfo[playerid][pBalikAgirlik][8], PlayerInfo[playerid][pBalik][9], PlayerInfo[playerid][pBalikAgirlik][9],
    PlayerInfo[playerid][pBalik][10], PlayerInfo[playerid][pBalikAgirlik][10], PlayerInfo[playerid][pBalik][11], PlayerInfo[playerid][pBalikAgirlik][11],
    PlayerInfo[playerid][pBalik][12], PlayerInfo[playerid][pBalikAgirlik][12], PlayerInfo[playerid][pBalik][13], PlayerInfo[playerid][pBalikAgirlik][13],
    PlayerInfo[playerid][pBalik][14], PlayerInfo[playerid][pBalikAgirlik][14], PlayerInfo[playerid][pBalik][15], PlayerInfo[playerid][pBalikAgirlik][15],
    PlayerInfo[playerid][pBalik][16], PlayerInfo[playerid][pBalikAgirlik][16], PlayerInfo[playerid][pBalik][17], PlayerInfo[playerid][pBalikAgirlik][17],
    PlayerInfo[playerid][pBalik][18], PlayerInfo[playerid][pBalikAgirlik][18], PlayerInfo[playerid][pBalik][19], PlayerInfo[playerid][pBalikAgirlik][19],
    PlayerInfo[playerid][pBalik][20], PlayerInfo[playerid][pBalikAgirlik][20], PlayerInfo[playerid][pBalik][21], PlayerInfo[playerid][pBalikAgirlik][21],
    PlayerInfo[playerid][pBalik][22], PlayerInfo[playerid][pBalikAgirlik][22], PlayerInfo[playerid][pBalik][23], PlayerInfo[playerid][pBalikAgirlik][23],
    PlayerInfo[playerid][pBalik][24], PlayerInfo[playerid][pBalikAgirlik][24], PlayerInfo[playerid][pBalik][25], PlayerInfo[playerid][pBalikAgirlik][25],
    PlayerInfo[playerid][pBalik][26], PlayerInfo[playerid][pBalikAgirlik][26], PlayerInfo[playerid][pBalik][27], PlayerInfo[playerid][pBalikAgirlik][27],
    PlayerInfo[playerid][pBalik][28], PlayerInfo[playerid][pBalikAgirlik][28], PlayerInfo[playerid][pBalik][29], PlayerInfo[playerid][pBalikAgirlik][29],
    PlayerInfo[playerid][pBalik][30], PlayerInfo[playerid][pBalikAgirlik][30], PlayerInfo[playerid][pBalik][31], PlayerInfo[playerid][pBalikAgirlik][31],
    PlayerInfo[playerid][pBalik][32], PlayerInfo[playerid][pBalikAgirlik][32], PlayerInfo[playerid][pBalik][33], PlayerInfo[playerid][pBalikAgirlik][33],
    PlayerInfo[playerid][pBalik][34], PlayerInfo[playerid][pBalikAgirlik][34], PlayerInfo[playerid][pBalik][35], PlayerInfo[playerid][pBalikAgirlik][35],
    PlayerInfo[playerid][pBalik][36], PlayerInfo[playerid][pBalikAgirlik][36], PlayerInfo[playerid][pBalik][37], PlayerInfo[playerid][pBalikAgirlik][37],
    PlayerInfo[playerid][pBalik][38], PlayerInfo[playerid][pBalikAgirlik][38], PlayerInfo[playerid][pBalik][39], PlayerInfo[playerid][pBalikAgirlik][39],
    PlayerInfo[playerid][pBalik][40], PlayerInfo[playerid][pBalikAgirlik][40], PlayerInfo[playerid][pBalik][41], PlayerInfo[playerid][pBalikAgirlik][41],
    PlayerInfo[playerid][pBalik][42], PlayerInfo[playerid][pBalikAgirlik][42], PlayerInfo[playerid][pBalik][43], PlayerInfo[playerid][pBalikAgirlik][43],
    PlayerInfo[playerid][pBalik][44], PlayerInfo[playerid][pBalikAgirlik][44], PlayerInfo[playerid][pBalik][45], PlayerInfo[playerid][pBalikAgirlik][45],
    PlayerInfo[playerid][pBalik][46], PlayerInfo[playerid][pBalikAgirlik][46], PlayerInfo[playerid][pBalik][47], PlayerInfo[playerid][pBalikAgirlik][47],
    PlayerInfo[playerid][pBalik][48], PlayerInfo[playerid][pBalikAgirlik][48], PlayerInfo[playerid][pBalik][49], PlayerInfo[playerid][pBalikAgirlik][49]);
    cache_get_value(0, "string_inventory", string, 256);
    sscanf(string, "p<|>dddddddddddddddddddddddddddddddddddddddd",
    PlayerInfo[playerid][pInvList][0], PlayerInfo[playerid][pInvAmount][0], PlayerInfo[playerid][pInvExtra][0],
    PlayerInfo[playerid][pInvList][1], PlayerInfo[playerid][pInvAmount][1], PlayerInfo[playerid][pInvExtra][1],
    PlayerInfo[playerid][pInvList][2], PlayerInfo[playerid][pInvAmount][2], PlayerInfo[playerid][pInvExtra][2],
    PlayerInfo[playerid][pInvList][3], PlayerInfo[playerid][pInvAmount][3], PlayerInfo[playerid][pInvExtra][3],
    PlayerInfo[playerid][pInvList][4], PlayerInfo[playerid][pInvAmount][4], PlayerInfo[playerid][pInvExtra][4],
    PlayerInfo[playerid][pInvList][5], PlayerInfo[playerid][pInvAmount][5], PlayerInfo[playerid][pInvExtra][5],
    PlayerInfo[playerid][pInvList][6], PlayerInfo[playerid][pInvAmount][6], PlayerInfo[playerid][pInvExtra][6],
    PlayerInfo[playerid][pInvList][7], PlayerInfo[playerid][pInvAmount][7], PlayerInfo[playerid][pInvExtra][7],
    PlayerInfo[playerid][pInvList][8], PlayerInfo[playerid][pInvAmount][8], PlayerInfo[playerid][pInvExtra][8],
    PlayerInfo[playerid][pInvList][9], PlayerInfo[playerid][pInvAmount][9], PlayerInfo[playerid][pInvExtra][9],
    PlayerInfo[playerid][pInvCredit][0], PlayerInfo[playerid][pInvCredit][1], PlayerInfo[playerid][pInvCredit][2],
    PlayerInfo[playerid][pInvCredit][3], PlayerInfo[playerid][pInvCredit][4], PlayerInfo[playerid][pInvCredit][5],
    PlayerInfo[playerid][pInvCredit][6], PlayerInfo[playerid][pInvCredit][7], PlayerInfo[playerid][pInvCredit][8],
    PlayerInfo[playerid][pInvCredit][9]);

    cache_get_value(0, "string_weapons", string, 256);
    sscanf(string, "p<|>dddddddddddddddddddddddd",
    PlayerInfo[playerid][pWeapons][0], PlayerInfo[playerid][pAmmo][0],
    PlayerInfo[playerid][pWeapons][1], PlayerInfo[playerid][pAmmo][1],
    PlayerInfo[playerid][pWeapons][2], PlayerInfo[playerid][pAmmo][2],
    PlayerInfo[playerid][pWeapons][3], PlayerInfo[playerid][pAmmo][3],
    PlayerInfo[playerid][pWeapons][4], PlayerInfo[playerid][pAmmo][4],
    PlayerInfo[playerid][pWeapons][5], PlayerInfo[playerid][pAmmo][5],
    PlayerInfo[playerid][pWeapons][6], PlayerInfo[playerid][pAmmo][6],
    PlayerInfo[playerid][pWeapons][7], PlayerInfo[playerid][pAmmo][7],
    PlayerInfo[playerid][pWeapons][8], PlayerInfo[playerid][pAmmo][8],
    PlayerInfo[playerid][pWeapons][9], PlayerInfo[playerid][pAmmo][9],
    PlayerInfo[playerid][pWeapons][10], PlayerInfo[playerid][pAmmo][10],
    PlayerInfo[playerid][pWeapons][11], PlayerInfo[playerid][pAmmo][11]);

    cache_get_value(0, "string_drugs", string, 256);
    sscanf(string, "p<|>dddddddddddddddddddddddddddddddddddd",
    PlayerInfo[playerid][pDrugAddiction][0], PlayerInfo[playerid][pDrugAbstinence][0], PlayerInfo[playerid][pDrugAddictionQuality][0],
    PlayerInfo[playerid][pDrugAddiction][1], PlayerInfo[playerid][pDrugAbstinence][1], PlayerInfo[playerid][pDrugAddictionQuality][1],
    PlayerInfo[playerid][pDrugAddiction][2], PlayerInfo[playerid][pDrugAbstinence][2], PlayerInfo[playerid][pDrugAddictionQuality][2],
    PlayerInfo[playerid][pDrugAddiction][3], PlayerInfo[playerid][pDrugAbstinence][3], PlayerInfo[playerid][pDrugAddictionQuality][3],
    PlayerInfo[playerid][pDrugAddiction][4], PlayerInfo[playerid][pDrugAbstinence][4], PlayerInfo[playerid][pDrugAddictionQuality][4],
    PlayerInfo[playerid][pDrugAddiction][5], PlayerInfo[playerid][pDrugAbstinence][5], PlayerInfo[playerid][pDrugAddictionQuality][5],
    PlayerInfo[playerid][pDrugAddiction][6], PlayerInfo[playerid][pDrugAbstinence][6], PlayerInfo[playerid][pDrugAddictionQuality][6],
    PlayerInfo[playerid][pDrugAddiction][7], PlayerInfo[playerid][pDrugAbstinence][7], PlayerInfo[playerid][pDrugAddictionQuality][7],
    PlayerInfo[playerid][pDrugAddiction][8], PlayerInfo[playerid][pDrugAbstinence][8], PlayerInfo[playerid][pDrugAddictionQuality][8],
    PlayerInfo[playerid][pDrugAddiction][9], PlayerInfo[playerid][pDrugAbstinence][9], PlayerInfo[playerid][pDrugAddictionQuality][9],
    PlayerInfo[playerid][pDrugAddiction][10], PlayerInfo[playerid][pDrugAbstinence][10], PlayerInfo[playerid][pDrugAddictionQuality][10],
    PlayerInfo[playerid][pDrugAddiction][11], PlayerInfo[playerid][pDrugAbstinence][11], PlayerInfo[playerid][pDrugAddictionQuality][11]);

    cache_get_value(0, "division", string, 256);
    sscanf(string, "p<|>ddddd", PlayerInfo[playerid][pDivision][0], PlayerInfo[playerid][pDivision][1], PlayerInfo[playerid][pDivision][2],
    PlayerInfo[playerid][pDivision][3], PlayerInfo[playerid][pDivision][4]);

    cache_get_value(0, "string_radio", string, 256);
    sscanf(string, "p<|>ddddddddd",
    PlayerInfo[playerid][pRadioDefault], PlayerInfo[playerid][pRadioSlot][0], PlayerInfo[playerid][pRadioSlot][1],
    PlayerInfo[playerid][pRadioSlot][2], PlayerInfo[playerid][pRadioSlot][3], PlayerInfo[playerid][pRadioSlot][4],
    PlayerInfo[playerid][pRadioSlot][5], PlayerInfo[playerid][pRadioSlot][6], PlayerInfo[playerid][pRadioSlot][7]);

    new firstlogin, telephone;
    cache_get_value_int(0, "first_login", firstlogin);
    cache_get_value_int(0, "telephone", telephone);
    cache_get_value_int(0, "yakitg", PlayerInfo[playerid][pYakitGelir]);

    if(firstlogin)
    {
        if(telephone)
        {
            new playerNumber = Generate_PlayerNumber(playerid);

            mysql_format(ourConnection, queryx, sizeof(queryx), "INSERT INTO phones (created_at, owner, number) VALUES (NOW(), '%e', '%d')", ReturnName(playerid), playerNumber);
            mysql_tquery(ourConnection, queryx);

            Inventory_AddItem(playerid, Inventory_FreeID(playerid), "Cep Telefonu", playerNumber);
        }

        PlayerInfo[playerid][pCash] = 1500;
        PlayerInfo[playerid][pCashBank] = 0;
        //if(PlayerInfo[playerid][pLicenses][0]) Faction_GovernmentCash(DRIVE_PRICE);
    }

    if(PlayerInfo[playerid][pFactionDuty])
    {
        cache_get_value_int(0, "toggle_armour", PlayerInfo[playerid][pToggleArmour]);
        cache_get_value_int(0, "faction_skin", PlayerInfo[playerid][pFactionSkin]);
    }

    if(PlayerInfo[playerid][pBanned])return
        KickPlayer(playerid, "SA-RP", "Hesap kalýcý yasaklý.");

    new id;

    if(PlayerInfo[playerid][pHouse] != -1 && PlayerInfo[playerid][pHousePrice] == -1)
    {
        id = PlayerInfo[playerid][pHouse];
        if(!HouseInfo[id][hExists] || HouseInfo[id][hOwner] != PlayerInfo[playerid][pID]) PlayerInfo[playerid][pHouse] = -1;
    }

    if(PlayerInfo[playerid][pFaction] != -1)
    {
        id = PlayerInfo[playerid][pFaction];
        if(!FactionInfo[id][fExists]) PlayerInfo[playerid][pFaction] = -1;
    }

    if(PlayerInfo[playerid][pHouseSpawn] != -1)
    {
        id = PlayerInfo[playerid][pHouseSpawn];
        if(PlayerInfo[playerid][pHouse] != id && HouseInfo[id][hOwner] != PlayerInfo[playerid][pID]) PlayerInfo[playerid][pHouseSpawn] = -1;
    }

    for(new x; x < 8; x++)
    {
        if(!PlayerInfo[playerid][pRadioSlot][x]) continue;

        new channel = PlayerInfo[playerid][pRadioSlot][x];

        if(channel == -1 || channel >= MAX_FREQUENCES)continue;

        if(FrequenceInfo[channel][rFaction] != -1 && PlayerInfo[playerid][pFaction] == FrequenceInfo[channel][rFaction] || FrequenceInfo[channel][rFaction] == -1 && strlen(FrequenceInfo[channel][rPassword]) <= 0)
            PlayerInfo[playerid][pAuthorized][channel] = true;

        if(!PlayerInfo[playerid][pAuthorized][channel])PlayerInfo[playerid][pRadioSlot][x] = 0;
    }

    SetPlayerScore(playerid, PlayerInfo[playerid][pLevel]);

    PlayerInfo[playerid][pLogged] = 1;
//    SetPVarInt(playerid, "NoControlForCamHack", 3);

    PlayerInfo[playerid][pJustSpawned] = true;
    TogglePlayerSpectating(playerid, false);
    SetSpawnInfo(playerid, 0, PlayerInfo[playerid][pSkin], SPAWN_X, SPAWN_Y, SPAWN_Z, SPAWN_A, 0, 0, 0, 0, 0, 0);
    SpawnPlayer(playerid);

    ClearChat(playerid, 20);

    ResetPlayerMoney(playerid);
    GivePlayerMoney(playerid, PlayerInfo[playerid][pCash]);

    mysql_format(ourConnection, queryx, sizeof(queryx), "UPDATE characters SET online = '1', ip = '%e', last_login = '%e', first_login = '0', new_skin = '0' WHERE char_name = '%e'", PlayerInfo[playerid][pIP], ReturnDate(), ReturnName(playerid));
    mysql_tquery(ourConnection, queryx);

    foreach(new j : Player) if(IsPlayerConnected(j) && PlayerInfo[j][pLogged] && PlayerInfo[j][pAdmin] > SUPPORTER && PlayerInfo[j][pAdminLog])
        SendFormattedMessage(j, COLOR_GREY, "** %s (%s - ID: %d) giriþ yaptý.", ReturnRoleplayName(playerid), PlayerInfo[playerid][pUsername], playerid);

    SendFormattedMessage(playerid, COLOR_LIGHTRED, "SERVER: {C8C8C8}Baþarýyla giriþ yaptýn. [%s]", ReturnDate());

    new cstring[64];
    format(cstring, sizeof(cstring), "~w~Hos geldin ~n~~y~ %s", ReturnRoleplayName(playerid));
    GameTextForPlayer(playerid, cstring, 1000, 1);
    ClearAnimations(playerid);
    
    /*if(PlayerInfo[playerid][pHud]) ShowPlayerHud(playerid);
    else HidePlayerHud(playerid);*/

    if(PlayerInfo[playerid][pCalistigiIsyeri][1] != -1)
    {
        foreach(new test : Buildings)
        {
            if(!BuildingInfo[test][bExists])continue;
            if(PlayerInfo[playerid][pCalistigiIsyeri][1] != BuildingInfo[test][bID])continue;
            PlayerInfo[playerid][pCalistigiIsyeri][0] = test;
            break;
        }
    }

    new xisyeri = PlayerInfo[playerid][pCalistigiIsyeri][0];
    new xcount;
    if(xisyeri != -1) for(new i; i < 20; i++) if(BuildingInfo[xisyeri][Calisan][i] != PlayerInfo[playerid][pID]) xcount++;
    if(xisyeri != -1 && xcount == 20)
    {
        PlayerInfo[playerid][pCalistigiIsyeri][0] = -1;
        PlayerInfo[playerid][pCalistigiIsyeri][1] = -1;
        SunucuMesajiC(playerid, "Çalýþtýðýnýz iþletmeden kovuldunuz.");
        xisyeri = -1;
    }
    xcount = 0;

    if(PlayerInfo[playerid][pKarakterYapti])
        Player_SetSpawn(playerid);
    else
        KarakterYarat(playerid);

    if(Faction_GetType(PlayerInfo[playerid][pFaction]) == POLICE) PolisDutyYukle(playerid);
    return 1;
}

OnSearchTextures(playerid); public OnSearchTextures(playerid)
{
    static rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);

    if(!rows)return 1;

    new index, material, txdname[64], textname[64];

    for(new j; j < rows; j++)
    {
        cache_get_value_int(j, "f_index", index);
        cache_get_value_int(j, "material", material);
        cache_get_value(j, "txd_name", txdname, 64);
        cache_get_value(j, "text_name", textname, 64);
        SendFormattedMessage(playerid, COLOR_GREY, "[Index %d] ModelID: %d - TxdName: %s - TextName: %s", index, material, txdname, textname);
    }

    return 1;//KullanimMesajiC(playerid, "/texture <index(0-15)> <modelid> <txdname> <textname>");
}

OnLoadFines(playerid); public OnLoadFines(playerid)
{
    static rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);

    if(rows) HataMesaji(playerid, "Aracýnda %d adet ceza bulunuyor. \"/arac ceza\" komutuyla gerekli bilgiyi alabilirsin.", rows);

    return 1;
}

OnWeaponLicenseSearch(playerid); public OnWeaponLicenseSearch(playerid)
{
    static rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);

    if(!rows)
    {
        for(new i; i < 4; i++) PlayerInfo[playerid][pWeaponsLicenseGuns][i] = 0;
        PlayerInfo[playerid][pWeaponsLicense][0] = 0;
        PlayerInfo[playerid][pWeaponsLicense][1] = 0;
    }
    else
    {
        new strGuns[48];

        cache_get_value_int(0, "type", PlayerInfo[playerid][pWeaponsLicense][0]);
        cache_get_value_int(0, "expires", PlayerInfo[playerid][pWeaponsLicense][1]);
        cache_get_value(0, "weapons", strGuns, 48);

        sscanf(strGuns, "p<|>dddd", PlayerInfo[playerid][pWeaponsLicenseGuns][0], PlayerInfo[playerid][pWeaponsLicenseGuns][1],
        PlayerInfo[playerid][pWeaponsLicenseGuns][3], PlayerInfo[playerid][pWeaponsLicenseGuns][3]);
    }

    return 1;
}

OnRadioAuthSearch(playerid); public OnRadioAuthSearch(playerid)
{
    static rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);

    if(!rows)return 1;

    for(new j; j < rows; j++)
    {
        new tmpChannel;
        cache_get_value_int(j, "channel", tmpChannel);

        for(new x; x < 8 ; x++) if(PlayerInfo[playerid][pRadioSlot][x] == tmpChannel)
            PlayerInfo[playerid][pAuthorized][tmpChannel] = true;
    }

    return 1;
}

OnRefundsSearch(playerid); public OnRefundsSearch(playerid)
{
    static rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);

    if(!rows)return 1;

    for(new j; j < rows; j++)
    {
        new refunded;
        cache_get_value_int(j, "refunded", refunded);
        if(refunded > 0) continue;

        if(Inventory_FreeID(playerid) == -1) return
            SunucuMesajiC(playerid, "Karakterinize iade edilecek ürünler var fakat envanteriniz dolu.");

        new date[36]; cache_get_value(j, "created_at", date, 36);
        new thread, id, item, amount, extra;
        cache_get_value_int(j, "thread", thread);
        cache_get_value_int(j, "id", id);
        cache_get_value_int(j, "item", item);
        cache_get_value_int(j, "amount", amount);
        cache_get_value_int(j, "extra", extra);

        // new query[128];

        Inventory_AddItem(playerid, Inventory_FreeID(playerid), InventoryObjects[item][invName], amount, extra);

        SunucuMesaji(playerid, "Geri Ýade | %s > %s (%d) (%s). Sebep: #%d", date, InventoryObjects[item][invName], amount, (extra) ? ("Kalite: %d") : ("N/A"), thread);

        format(queryx, sizeof(queryx), "UPDATE refunds SET refunded = '1' WHERE id = '%d'", id);
        mysql_tquery(ourConnection, queryx);
    }

    return 1;
}

OnContactOpzSearch(playerid, listitem); public OnContactOpzSearch(playerid, listitem)
{
    new tmpName[MAX_PLAYER_NAME], tmpNumber;//, query[128];

    cache_get_value(0, "name", tmpName, MAX_PLAYER_NAME);
    cache_get_value_int(0, "number", tmpNumber);

    switch(listitem)
    {
        case 0: Phone_CallInit(playerid, tmpNumber);
        case 1:
        {
            PlayerInfo[playerid][pNumber] = tmpNumber;
            Dialog_Show(playerid, DialogTextSMS, DIALOG_STYLE_INPUT, "SMS gönder", "%d numarasýna gönderilecek mesajý girin.", "Gönder", "Ýptal", tmpNumber);
        }
        case 2:
        {
            SunucuMesaji(playerid, "%s (%d) numarasýný rehberinden kaldýrdýn.", tmpName, tmpNumber);
            mysql_format(ourConnection, queryx, sizeof(queryx), "DELETE FROM phonebooks WHERE id = '%d'", PlayerInfo[playerid][pContactID]);
            mysql_tquery(ourConnection, queryx);

            ShowPlayerPhoneBook(playerid, 1);
        }
        case 3: Dialog_Show(playerid, DialogRenameContact, DIALOG_STYLE_INPUT, "Rehber", "%s(%d) kiþisinin yeni adýný girin.", "Ýleri", "Ýptal", tmpName, tmpNumber);
    }

    return 1;
}

OnContactOpzRename(playerid, inputtext[]); public OnContactOpzRename(playerid, inputtext[])
{
    new tmpName[MAX_PLAYER_NAME], tmpNumber;//, query[128];

    cache_get_value(0, "name", tmpName, MAX_PLAYER_NAME);
    cache_get_value_int(0, "number", tmpNumber);

    if(isnull(inputtext) || strlen(inputtext) > 32)return
        Dialog_Show(playerid, DialogRenameContact, DIALOG_STYLE_INPUT, "Rehber", "%s(%d) kiþisinin yeni adýný girin.", "Ýleri", "Ýptal", tmpName, tmpNumber);

    SunucuMesaji(playerid, "%d numarasýnýn ismini %s iken  %s (%d) olarak deðiþtirdiniz.", tmpNumber, tmpName, inputtext, tmpNumber);

    mysql_format(ourConnection, queryx, sizeof(queryx), "UPDATE phonebooks SET name = '%e' WHERE id = '%d'", inputtext, PlayerInfo[playerid][pContactID]);
    mysql_tquery(ourConnection, queryx);

    ShowPlayerPhoneBook(playerid, 1);

    return 1;
}

OnPhonesLogSearch(playerid); public OnPhonesLogSearch(playerid)
{
    new tmpText[100], tmpDate[36], tmpCaller, tmpReceiving;

    cache_get_value(0, "text", tmpText, 100);
    cache_get_value(0, "created_at", tmpDate, 36);
    cache_get_value_int(0, "caller_number", tmpCaller);
    cache_get_value_int(0, "receiver_number", tmpReceiving);

    return Dialog_Show(playerid, DialogOptionSMS, DIALOG_STYLE_MSGBOX, (PlayerInfo[playerid][pListType] == TYPE_SMS) ? ("Mesaj Arþivi") : ("Arama Arþivi"), (PlayerInfo[playerid][pListType] == TYPE_SMS) ? ("Kimden: %d\nKime: %d\nTarih: %s\n\nMesaj: %s") : ("Kimden: %d\nKime: %d\nTarih: %s"), "Sil", "Geri", tmpCaller, tmpReceiving, tmpDate, tmpText);
}

OnSendSMSContactSearch(playerid, number); public OnSendSMSContactSearch(playerid, number)
{
    static rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);

    if(!rows)return
        SunucuMesajiC(playerid, "Telefon numarasý kullaným dýþý.");

    PlayerInfo[playerid][pNumber] = number;

    Dialog_Show(playerid, DialogTextSMS, DIALOG_STYLE_INPUT, "SMS gönder", "%d numarasýna gönderilecek mesajý girin.", "Gönder", "Ýptal", number);

    return 1;
}

OnPhoneCallDuringContactSearch(playerid, number); public OnPhoneCallDuringContactSearch(playerid, number)
{
    static rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);

    if(!rows)
        return 0;
    else
        return 1;
}
OnSendSMSOwnerSearch(playerid, number, inputtext); public OnSendSMSOwnerSearch(playerid, number, inputtext)
{
    static rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);

    cache_get_value_int(0, "number", PlayerInfo[playerid][pNumber]);

    if(rows)
        Dialog_Show(playerid, DialogTextSMS, DIALOG_STYLE_INPUT, "SMS gönder", "%s", "Gönder", "Ýptal", inputtext);
    else
        Dialog_Show(playerid, DialogSendSMS, DIALOG_STYLE_INPUT, "SMS gönder", "Bu isim rehberde kayýtlý deðil\nSMS:", "Gönder", "Ýptal", number);

    return 1;
}

OnRadioLinkSearch(playerid); public OnRadioLinkSearch(playerid)
{
    new tmpLink[128];

    cache_get_value(0, "link", tmpLink, 128);

    return Item_StartMusic(playerid, tmpLink);
}

OnFinesSearch(playerid); public OnFinesSearch(playerid)
{
    new fineAmount, fineOfficer[MAX_PLAYER_NAME], fineDate[36], fineReason[64], fineReceiving[MAX_PLAYER_NAME];

    cache_get_value(0, "officer", fineOfficer, MAX_PLAYER_NAME);
    cache_get_value(0, "target", fineReceiving, MAX_PLAYER_NAME);
    cache_get_value(0, "created_at", fineDate, 36);
    cache_get_value(0, "reason", fineReason, 64);
    cache_get_value_int(0, "amount", fineAmount);

    Dialog_Show(playerid, DialogFineDetails, DIALOG_STYLE_MSGBOX, "Ceza ayrýntýlarý", "Polis: %s\nTarih: %s\nÖdenecek miktar: $%d\nSebep: %s", "Öde", "Ýptal", fineOfficer, fineDate, fineAmount, fineReason);

    return 1;
}

OnFineDetailsSearch(playerid); public OnFineDetailsSearch(playerid)
{
    new buildingid = GetPlayerBuilding(playerid, true);
    if(GetPVarInt(playerid, "AracCeza") != 1) {
        if(buildingid == -1 || (buildingid != -1 && BuildingInfo[buildingid][bFaction] != 2))return
            HataMesajiC(playerid, "Cezaný ödemek için City Hall içerisinde olmalýsýn.");
    }
    DeletePVar(playerid, "AracCeza");
    new fineAmount;
    cache_get_value_int(0, "amount", fineAmount);

    if(PlayerInfo[playerid][pCash] < fineAmount)return
        HataMesaji(playerid, "Yeterli paran yok. ($%d)", fineAmount);

    OAC_GivePlayerMoney(playerid, -fineAmount);
    FactionInfo[0][fCash] += fineAmount;
    SaveFaction(0);

    mysql_format(ourConnection, queryx, sizeof(queryx), "DELETE FROM police_fine_records WHERE id = '%d'", PlayerInfo[playerid][pFineID]);
    mysql_tquery(ourConnection, queryx);

    PlayerInfo[playerid][pFineID] = -1;
    PlayerInfo[playerid][pToplamCeza] -= fineAmount;
    SunucuMesaji(playerid, "$%d olan cezaný ödedin.", fineAmount);

    return 1;
}

OnShowAPBSearch(playerid, id); public OnShowAPBSearch(playerid, id)
{
    new tmpOfficer[MAX_PLAYER_NAME], tmpDate[36], tmpSubject[128], tmpLocation[28], string[1024], editedBy[MAX_PLAYER_NAME], editedAt[36], yaratanRutbe[80];

    cache_get_value(0, "created_at", tmpDate, 36);
    cache_get_value(0, "officer", tmpOfficer, MAX_PLAYER_NAME);
    cache_get_value(0, "target", tmpSubject, 128);
    cache_get_value(0, "location", tmpLocation, 28);
    cache_get_value(0, "edited_at", editedAt, 36);
    cache_get_value(0, "edited_by", editedBy, MAX_PLAYER_NAME);
    cache_get_value(0, "yaratanrutbe", yaratanRutbe, 80);

    format(string, sizeof(string), "Konu: %s\n%s %s\nTarih: %s\nBölge: %s\nSon Düzenleyen: %s\nDüzenlenme tarihi: %s\nSuçlar:\n", tmpSubject, yaratanRutbe, tmpOfficer, tmpDate, tmpLocation, editedBy, editedAt);

    mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT * FROM police_crime_records WHERE wanted_id = '%d'", id);
    mysql_tquery(ourConnection, queryx, "OnShowAPBDetailsSearch", "dds", playerid, id, string);

    return 1;
}

OnShowAPBDetailsSearch(playerid, id, string[1024]); public OnShowAPBDetailsSearch(playerid, id, string[1024])
{
    static rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);

    new tmpCrime[200];

    if(rows) for(new j; j < rows; j++)
    {
        cache_get_value(j, "crime", tmpCrime, 200);
        format(string, sizeof(string), "%s\t- %s\n", string, tmpCrime);
    }

    PlayerInfo[playerid][pMdcID] = id;
    Dialog_Show(playerid, DialogEditAPB, DIALOG_STYLE_MSGBOX, "APB Detaylarý", string, "Düzenle", "Ýptal");

    return 1;
}

OnAPBCreateSearch(playerid, tmpSubject[50]); public OnAPBCreateSearch(playerid, tmpSubject[50])
{
    static rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);

    // new query[300];

    if(rows)
    {
        new tmpID;
        cache_get_value_int(0, "id", tmpID);
        PlayerInfo[playerid][pMdcID] = tmpID;
        SunucuMesajiC(playerid, "Ayný konuda APB zaten bulunuyor. APB düzenleme listesi açýldý.");
        return Dialog_Show(playerid, DialogOptionsAPB, DIALOG_STYLE_LIST, "APB", "Sil\nKonu\nSuç Ekle\nKonum Güncelle\nSuç Sil\nSuçlu Adý", "Ýleri", "Ýptal");
    }

    mysql_format(ourConnection, queryx, sizeof(queryx), "INSERT INTO wanteds (officer, created_at, target, yaratanrutbe) VALUES ('%e', NOW(), '%e', '%e')", ReturnRoleplayName(playerid), tmpSubject, fRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pRank] - 1]);
    mysql_tquery(ourConnection, queryx, "OnAPBCreateDone", "d", playerid);

    return 1;
}

OnAPBCreateDone(playerid); public OnAPBCreateDone(playerid)
{
    PlayerInfo[playerid][pMdcID] = cache_insert_id();
    SendFactionMessage(PlayerInfo[playerid][pFaction], "** HQ: %s %s yeni bir APB oluþturdu.", fRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pRank] - 1], ReturnRoleplayName(playerid));
    Dialog_Show(playerid, DialogOptionsAPB, DIALOG_STYLE_LIST, "APB", "Sil\nKonu\nSuç Ekle\nKonum Güncelle\nSuç Sil\nSuçlu Adý", "Ýleri", "Ýptal");

    return 1;
}

OnShowCRSearch(playerid, id); public OnShowCRSearch(playerid, id)
{
    new tmpOfficer[MAX_PLAYER_NAME], tmpDate[36], tmpName[MAX_PLAYER_NAME], tmpReport[1000], string[2048];
    new fid = PlayerInfo[playerid][pFaction];

    cache_get_value(0, "created_at", tmpDate, 36);
    cache_get_value(0, "officer", tmpOfficer, MAX_PLAYER_NAME);
    cache_get_value(0, "target", tmpName, MAX_PLAYER_NAME);
    cache_get_value(0, "record", tmpReport, 1000);

    strreplace(tmpName, '_', ' ');
    format(string, sizeof(string), "{FFFFFF}Suç Kayýtlarý {2b63cb}#%d\n\n{2b63cb}Ýsim Soyisim: {ffffff}%s\n{ffffff}%s %s\n{2b63cb}Tarih: {ffffff}%s\n\n{2b63cb}Raporlayan:\n{ffffff}%s\n\n{2b63cb}Suçlar:\n", id, tmpName, fRanks[fid][PlayerInfo[playerid][pRank] - 1],tmpOfficer, tmpDate, tmpReport);

    mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT * FROM police_crime_records WHERE record_id = '%d'", id);
    mysql_tquery(ourConnection, queryx, "OnShowCRFound", "ds", playerid, string);

    return 1;
}

OnShowCRFound(playerid, string[1024]); public OnShowCRFound(playerid, string[1024])
{
    static rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);

    if(!rows)return 1;

    new tmpType;
    new tmpCrime[200];

    for(new j; j < rows; j++)
    {
        cache_get_value_int(j, "type", tmpType);
        cache_get_value(j, "crime", tmpCrime, 200);
        format(string, sizeof(string), "%s\t- %s\n", string, tmpCrime);
    }

    Dialog_Show(playerid, DialogNull, DIALOG_STYLE_MSGBOX, "Suç kaydý göster", string, "Ýptal", "");

    return 1;
}

OnCRInsert(playerid); public OnCRInsert(playerid)
{
    PlayerInfo[playerid][pRecordID] = cache_insert_id();

    Dialog_Show(playerid, DialogAddCrimes, DIALOG_STYLE_INPUT, "Sabýka kaydý ekle", "%s kiþisinin %s tarihinde iþlediði suçlarý ekleyin:", "Devam", "Gönder", PlayerInfo[playerid][pTargetName], ReturnDate());

    return 1;
}

OnImpoundedVehicleSearch(playerid); public OnImpoundedVehicleSearch(playerid)
{
    new tmpPrice, tmpModel[32], tmpPlate[13], tmpOfficer[MAX_PLAYER_NAME], tmpReason[150], tmpDate[36], tmpExpires;
    new year, month, day, hour, minute, second;

    cache_get_value_int(0, "price", tmpPrice);
    cache_get_value_int(0, "expires", tmpExpires);

    cache_get_value(0, "model", tmpModel, 32);
    cache_get_value(0, "plate", tmpPlate, 13);
    cache_get_value(0, "officer", tmpOfficer, MAX_PLAYER_NAME);
    cache_get_value(0, "reason", tmpReason, 150);
    cache_get_value(0, "created_at", tmpDate, 36);

    if(gettime() < tmpExpires)
    {
        TimestampToDate(tmpExpires, year, month, day, hour, minute, second, 3);
        return HataMesaji(playerid, "%s(%s) aracýn baðlandý. Çýkýþ Tarihi: %d/%d/%d - %d:%d:%d", tmpModel, tmpPlate, day, month, year, hour, minute, second);
    }

    Dialog_Show(playerid, DialogTImpoundConfirm, DIALOG_STYLE_MSGBOX, "DMV", "DMV #%d\n\nModel: %s\nPlaka: %s\nSahip: %s\nTarih: %s\nPersonel: %s\nSebep: %s\nÖdenecek tutar: $%d", "Devam", "Ýptal", PlayerInfo[playerid][pMdcID], tmpModel, tmpPlate, ReturnRoleplayName(playerid), tmpDate, tmpOfficer, tmpReason, tmpPrice);

    return 1;
}

OnImpoundedVehicleConfirmSearch(playerid); public OnImpoundedVehicleConfirmSearch(playerid)
{
    // new query[128];
    new tmpPrice, tmpVehicleID;
    cache_get_value_int(0, "price", tmpPrice);
    cache_get_value_int(0, "vehicle_id", tmpVehicleID);

    if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pCash] < tmpPrice)return
        HataMesaji(playerid, "Aracý serbest býrakmak için yeterli paraya sahip deðilsin. ($%d)", tmpPrice);

    mysql_format(ourConnection, queryx, sizeof(queryx), "DELETE FROM vehicles_impounded WHERE vehicle_id = '%d'", tmpVehicleID);
    mysql_tquery(ourConnection, queryx);

    mysql_format(ourConnection, queryx, sizeof(queryx), "UPDATE vehicles SET impounded = 0, spawned = 0 WHERE id = '%d'", tmpVehicleID);
    mysql_tquery(ourConnection, queryx);

    if(!PlayerInfo[playerid][pAdminDuty]) OAC_GivePlayerMoney(playerid, -tmpPrice);
    SunucuMesajiC(playerid, "Araç çýkartýldý, /arac parksatinal ile aracýnýzý park etmeyi unutmayýn.");

    return 1;
}
OnVehicleShowListPlayer(playerid); public OnVehicleShowListPlayer(playerid)
{
    static rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);
    if(!rows) return HataMesajiC(playerid, "Oyuncu bulunamadý");
    new oyuncuid;
    cache_get_value_int(0, "id", oyuncuid);
    // new query[128];
    mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT * FROM vehicles WHERE owner_id = '%d'", oyuncuid);
    return mysql_tquery(ourConnection, queryx, "OnVehicleShowListSearch", "dd", playerid, oyuncuid);
}

OnVehicleShowListSearch(playerid, id); public OnVehicleShowListSearch(playerid, id)
{
    static rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);

    if(!rows && id == playerid)return SunucuMesajiC(playerid, "Araca sahip deðilsin.");
    else if(!rows)return SunucuMesajiC(playerid, "Oyuncunun aracý yok.");

    if(playerid != id && id < 1000)
        SunucuMesaji(playerid, "%s (SQL ID: %d) adlý oyuncunun araçlarý:", ReturnRoleplayName(id), id);

    new tmpID, tmpModel, tmpPlate[13];

    for(new i; i < rows; i++)
    {
        cache_get_value_int(i, "id", tmpID);
        cache_get_value_int(i, "model", tmpModel);
        cache_get_value(i, "plate", tmpPlate, 13);

        new idVehicle = -1;

        foreach(new j : Vehicles) if(IsValidVehicle(j) && VehicleInfo[j][vID] == tmpID)
            idVehicle = j;

        if(tmpModel == 509 || tmpModel == 481 || tmpModel == 510) format(tmpPlate, sizeof(tmpPlate), "N/A");

        if(idVehicle == -1) SunucuMesaji(playerid, "[Slot %d] %s (%s) (Database ID: %d)", i + 1, GetVehicleModelName(tmpModel), tmpPlate, tmpID);
        else SunucuMesaji(playerid, "[Slot %d] %s (%s) (Database ID: %d) [ID: %d]", i + 1, GetVehicleModelName(tmpModel), tmpPlate, tmpID, idVehicle);
    }

    return 1;
}

OnWLicenseShowLogSearch(playerid); public OnWLicenseShowLogSearch(playerid)
{
    static rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);

    if(!rows) return
        SunucuMesajiC(playerid, "Bu kiþinin kaydý yok.");

    new string[2048];
    new officerName[MAX_PLAYER_NAME];
    new date[32];
    new action;
    new value;

    string = "Seçenek\tPolis\tTarih\tDeðer (opsiyonel)\n";

    static const actionName[5][32] = {"Lisans Ekle", "Lisans Kaldýr", "Lisans Düzenle", "Silah satýn Alma", "Lisans Yenileme"};
    static const valueName[8][32] = {"Colt", "Desert Eagle", "Shotgun", "Country rifle", "Hafif mermi", "Orta boy mermi", "Aðýr mermi" , "N/A"};

    for(new j; j < rows; j++)
    {
        cache_get_value_int(j, "action", action);
        cache_get_value_int(j, "value", value);
        cache_get_value(j, "created_at", date, 36);
        cache_get_value(j, "char_name", officerName, MAX_PLAYER_NAME);

        if(action == WEAPONLICENSE_ACTION_GIVE || action == WEAPONLICENSE_ACTION_REMOVE || action == WEAPONLICENSE_ACTION_RENEW) format(string, sizeof(string), "%s%s\t%s\t%s\t%s\n", string, actionName[action], officerName, date, valueName[7]);
        else if(action == WEAPONLICENSE_ACTION_EDIT) format(string, sizeof(string), "%s%s\t%s\t%s\t%s\n", string, actionName[action], officerName, date, valueName[value]);
        else format(string, sizeof(string), "%s%s\tN/A\t%s\t%s\n", string, actionName[action], date, valueName[value]);
    }

    Dialog_Show(playerid, DialogGunLogList, DIALOG_STYLE_TABLIST_HEADERS, "CCW lisansý kayýt listesi", string, "Ýleri", "");

    return 1;
}

OnShowRadioLinksSearch(playerid, vehicleStereo); public OnShowRadioLinksSearch(playerid, vehicleStereo)
{
    static rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);

    if(!rows)return 1;

    new tmpName[64], tmpID, count, string[512];

    for(new j; j < rows; j++)
    {
        cache_get_value(j, "name", tmpName, 64);
        cache_get_value_int(j, "id", tmpID);
        format(string, sizeof(string), "%s%s\n", string, tmpName);
        PlayerInfo[playerid][pRadiosID][count] = tmpID;
        count++;
    }

    PlayerInfo[playerid][pRadioOptions] = vehicleStereo;
    Dialog_Show(playerid, DialogRadioLinks, DIALOG_STYLE_LIST, "Müzik", "{FF6347}Þarký URL'sini girin.{FFFFFF}\n%s", "dinle", "Ýptal", string);

    return 1;
}

OnPlayerStartCallContactSearch(playerid, number, playerNumber, x); public OnPlayerStartCallContactSearch(playerid, number, playerNumber, x)
{
    static rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);
    new tmpName[32];

    if(rows)
    {
        cache_get_value(0, "name", tmpName, 32);
        RehberIsim[x] = tmpName;
        SetPVarInt(x, "RehberdeVar", 1);
        if(PlayerInfo[x][pInvExtra][Inventory_HasPhone(x, number)] == 1) PlayerPlaySound(x, 23000, 0.0, 0.0, 0.0);
        else PlayerPlaySound(x, 0, 0.0, 0.0, 0.0);
        SendFormattedMessage(x, COLOR_GREY, "%s (%d) numarasý %d numaralý telefonunu arýyor. (/cevapla %d veya /aramared %d)", tmpName, playerNumber, number, Inventory_HasPhone(x, number) + 1, Inventory_HasPhone(x, number) + 1);
        PlayerInfo[playerid][AramaYanitlandi] = false;
        PlayerInfo[x][AramaYanitlandi] = false;
    }
    else
    {
        if(PlayerInfo[x][pInvExtra][Inventory_HasPhone(x, number)] == 1) PlayerPlaySound(x, 20600, 0.0, 0.0, 0.0);
        else PlayerPlaySound(x, 0, 0.0, 0.0, 0.0);
        PlayerInfo[playerid][AramaYanitlandi] = false;
        PlayerInfo[x][AramaYanitlandi] = false;
        SendFormattedMessage(x, COLOR_GREY, "%d numarasý %d numaralý telefonunu arýyor. (/cevapla %d veya /aramared %d)", playerNumber, number, Inventory_HasPhone(x, number) + 1, Inventory_HasPhone(x, number) + 1);
    }
    if(GetPVarInt(x, "KulakliklaMuzik")) {
        SendClientMessageEx(x, COLOR_LIGHTBLUE, ">> {FFFFFF}Telefonunuz çaldýðý için telefondan kulaklýkla dinlediðiniz müzik geçici olarak durduruldu.");
        SendClientMessageEx(x, COLOR_LIGHTBLUE, ">> {FFFFFF}Eðer telefonu açarsanýz, birlikte dinlediðiniz oyuncu varsa o da telefon görüþmenizi dinleyebilcek.");
        SendClientMessageEx(x, COLOR_ADMIN, ">> {FFFFFF}Eðer birlikte dinlediðiniz oyuncunun görüþmenizi dinlemesini istemiyorsanýz /kulaklikal komutunu kullanýn.");
        StopAudioStreamForPlayer(x);
        if(BirlikteDinlenen[x] != -1) {
            SendClientMessageEx(BirlikteDinlenen[x], COLOR_LIGHTBLUE, ">> {FFFFFF}Telefon sahibinin telefonu çaldýðý için telefondan kulaklýkla dinlediðiniz müzik geçici olarak durduruldu.");
            StopAudioStreamForPlayer(BirlikteDinlenen[x]);
        }
    }
    if(PlayerInfo[x][pInRecon] == -1)
    {
        if(PlayerInfo[x][pInvExtra][Inventory_HasPhone(x, number)] == 1) PlayerDO(x, "Cep telefonu çalýyor.");
            else PlayerDO(x, "Cep telefonu sessizde titreþiyor.");
    }
    SetPVarInt(x, "TelefonuCaliyor", 1);
    SetPVarInt(playerid, "AradigiNumara", number);
    SetPVarInt(x, "AradigiNumara", playerNumber);
    mysql_format(ourConnection, queryx, sizeof(queryx), "INSERT INTO phone_logs (caller_number, created_at, receiver_number, type) VALUES ('%d', NOW(), '%d', '2')", playerNumber, number);
    mysql_tquery(ourConnection, queryx);
    PlayerInfo[playerid][AradigimKisi] = x;
    return PlayerInfo[x][pIncomingCall] = playerid;
}

OnPlayerCallContactSearch(playerid, number); public OnPlayerCallContactSearch(playerid, number)
{
    static rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);

    new tmpName[32];

    if(rows)
    {
        cache_get_value(0, "name", tmpName, 32);
        RehberIsim[playerid] = tmpName;
        SetPVarInt(playerid, "RehberdeVar", 1);
        BasariMesaji(playerid, "%s kiþisini arýyorsun(%d).", tmpName, number);
    }
    else BasariMesaji(playerid, "%d numarasýný arýyorsun.", number);

    Phone_CallStart(playerid);

    return 1;
}

OnSendSMSPlayerSearch(playerid, x, itemid, number); public OnSendSMSPlayerSearch(playerid, x, itemid, number)
{
    static rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);

    new tmpName[32];

    if(rows)
    {
        cache_get_value(0, "name", tmpName, 32);
        SendFormattedMessage(x, COLOR_YELLOW, "[SMS] >> %s (%d): %s", tmpName, PlayerInfo[playerid][pInvAmount][itemid], PlayerInfo[playerid][pText]);
        if(PlayerInfo[x][pInvExtra][Inventory_HasPhone(x, number)] == 1)
            PlayerAME(x, "telefonuna mesaj gelmiþtir.");
        else
            PlayerAME(x, "telefonu sessizce titrer.");
    }
    else {
        SendFormattedMessage(x, COLOR_YELLOW, "[SMS] >> %d: %s", PlayerInfo[playerid][pInvAmount][itemid], PlayerInfo[playerid][pText]);
        if(PlayerInfo[x][pInvExtra][Inventory_HasPhone(x, number)] == 1)
            PlayerAME(x, "telefonuna mesaj gelmiþtir.");
        else
            PlayerAME(x, "telefonu sessizce titrer.");
    }
    return 1;
}

OnSendSMSPlayerContactSearch(playerid, itemid, number, t_phoneid); public  OnSendSMSPlayerContactSearch(playerid, itemid, number, t_phoneid)
{
    static rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);

    new tmpName[32];

    if(rows)
    {
        cache_get_value(0, "name", tmpName, 32);
        SendFormattedMessage(playerid, COLOR_YELLOW, "[SMS] << %s (%d): %s", tmpName, number, PlayerInfo[playerid][pText]);
    }
    else {
        SendFormattedMessage(playerid, COLOR_YELLOW, "[SMS] << %d: %s", number, PlayerInfo[playerid][pText]);
    }

    if(!t_phoneid) OAC_GivePlayerMoney(playerid, -CELL_PRICE);
    else Inventory_BurnerCredit(playerid, itemid);

    PlayerInfo[playerid][pNumber] = 0;
    PlayerInfo[playerid][pPhoneID] = -1;
    format(PlayerInfo[playerid][pText], 256, "N/A");

    //PhoneAnimation(playerid);
    return 1;
}

OnMDCPlayerSearch(playerid, targetID); public OnMDCPlayerSearch(playerid, targetID)
{
    static rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);

    new string[2048], tmpAge;
    static const licenseStatus[2][6] = {"Hayýr", "Evet"};

    if(!rows)return
        SunucuMesajiC(playerid, "Vatandaþ veritabanýnda bulunamadý.");

    new driveLicenseString[32];
    new tmpLicense, tmpWarn, tmpID, tmpHouse;
    cache_get_value_int(0, "drive_license", tmpLicense);
    cache_get_value_int(0, "drive_license_warn", tmpWarn);
    cache_get_value_int(0, "id", tmpID);
    cache_get_value_int(0, "house", tmpHouse);
    cache_get_value_int(0, "age", tmpAge);

    if(tmpLicense) format(driveLicenseString, sizeof(driveLicenseString), "Var (%d uyarý)", tmpWarn);
    else driveLicenseString = "Hayýr";

    new houseString[256];
    new bizString[256], flylisans, boatlisans;
    cache_get_value_int(0, "fly_license", flylisans);
    cache_get_value_int(0, "boat_license", boatlisans);
    if(tmpHouse != -1) format(houseString, sizeof(houseString), "%d (%s) ", tmpHouse, House_GetAddress(tmpHouse));
    foreach(new h : Houses) if(HouseInfo[h][hExists] && tmpID == HouseInfo[h][hOwner] && h != tmpHouse) format(houseString, sizeof(houseString), "%s%d (%s) ", houseString, h, House_GetAddress(h));
    foreach(new b : Buildings) if(BuildingInfo[b][bExists] && tmpID == BuildingInfo[b][bOwner]) format(bizString, sizeof(bizString), "%s%s (%d) ", bizString, BuildingInfo[b][bName], b);

    format(string, sizeof(string), "{FFFFFF}LS KÝMLÝK KARTI {2b63cb}#%d\n\n{2b63cb}Ad Soyad: {FFFFFF}%s\n{2b63cb}Yaþ: {ffffff}%d\n{2b63cb}Sürücü Lisansý: {FFFFFF}%s\n{2b63cb}Uçuþ Lisansý: {FFFFFF}%s\n{2b63cb}Deniz Lisansý: {FFFFFF}%s\n{2b63cb}Evler: {FFFFFF}%s\n{2b63cb}Ýþletmeleri: {FFFFFF}%s", targetID, GetCharacterName(targetID), tmpAge, driveLicenseString, licenseStatus[flylisans], licenseStatus[boatlisans], houseString, bizString);
    return Dialog_Show(playerid, DialogPlayerInfo, DIALOG_STYLE_MSGBOX, "{FFFFFF}Þehir kartý", string, "Ýptal", "");
}

OnMDCPlayerVehicleSearch(playerid, targetID); public OnMDCPlayerVehicleSearch(playerid, targetID)
{
    static rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);

    new string[1024], count, tmpID;

    if(!rows)
    {
        PlayerInfo[playerid][pUsingMDC] = 0;
        return HataMesajiC(playerid, "Bu vatandaþ araca sahip deðil.");
    }

    new modelid, plate[13];

    for(new j; j < rows; j++)
    {
        cache_get_value_int(j, "id", tmpID);
        cache_get_value_int(j, "model", modelid);
        cache_get_value(j, "plate", plate, 13);

        if(modelid == 509 || modelid == 481 || modelid == 510)continue;

        format(string, sizeof(string), "%s%s - %s\n", string, GetVehicleModelName(modelid), plate);
        PlayerInfo[playerid][pListsID][count] = tmpID;
        count++;
    }

    return Dialog_Show(playerid, DialogPlayerVehicles, DIALOG_STYLE_LIST, "Kayýtlý araçlar", string, "Ýleri", "Ýptal");
}

OnMDCPlayerNumberSearch(playerid, targetID); public OnMDCPlayerNumberSearch(playerid, targetID)
{
    static rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);

    new string[1024], count, tmpID;

    if(!rows)
    {
        PlayerInfo[playerid][pUsingMDC] = 0;
        return HataMesajiC(playerid, "Bu vatandaþa kayýtlý sim kartý bulunamadý.");
    }

    new number;

    for(new j; j < rows; j++)
    {
        cache_get_value_int(j, "id", tmpID);
        cache_get_value_int(j, "number", number);
        format(string, sizeof(string), "%s%d\n", string, number);
        PlayerInfo[playerid][pListsID][count] = tmpID;
        count++;
    }

    return Dialog_Show(playerid, DialogPlayerNumbers, DIALOG_STYLE_LIST, "SIM Kart Merkezi", string, "Ýleri", "Ýptal");
}

OnMDCNumbersSearch(playerid); public OnMDCNumbersSearch(playerid)
{
    new tmpNumber;
    cache_get_value_int(0, "number", tmpNumber);
    MDC_SearchPhoneNumber(playerid, tmpNumber);

    return 1;
}

OnMDCVehicleSearch(playerid); public OnMDCVehicleSearch(playerid)
{
    new tmpPlate[13];
    cache_get_value(0, "plate", tmpPlate, 13);

    return MDC_SearchVehiclePlate(playerid, tmpPlate);
}

OnMDCNumberLogSearch(playerid, number); public OnMDCNumberLogSearch(playerid, number)
{
    static rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);

    new tmpBy, tmpDate[4][36], tmpType, tmpTo, tmpNumbers[4];

    if(!rows)return
        SunucuMesajiC(playerid, "Kayýt bulunamadý.");

    for(new j; j < rows; j++)
    {
        cache_get_value_int(j, "caller_number", tmpBy);
        cache_get_value_int(j, "receiver_number", tmpTo);
        cache_get_value_int(j, "type", tmpType);

        switch(tmpType)
        {
            case TYPE_SMS:
            {
                cache_get_value(j, "created_at", tmpDate[(tmpBy == number) ? 2 : 3], 36);
                tmpNumbers[2] = tmpBy; tmpNumbers[3] = tmpTo;
            }
            case TYPE_CALL:
            {
                cache_get_value(j, "created_at", tmpDate[(tmpBy == number) ? 0 : 1], 36);
                tmpNumbers[0] = tmpBy; tmpNumbers[1] = tmpTo;
            }
            default: continue;
        }

        if(!isnull(tmpDate[0]) && !isnull(tmpDate[2]) && tmpType)break;
    }

    return Dialog_Show(playerid, DialogNull, DIALOG_STYLE_MSGBOX, "SIM Kart Merkezi", "%d - %s\n%d - %s\n%d - %s\n%d - %s", "Ýptal", "", tmpNumbers[0], tmpDate[0], tmpNumbers[1], tmpDate[1], tmpNumbers[3], tmpDate[3], tmpNumbers[2], tmpDate[2]);
}

OnNCCharacterSearch(playerid); public OnNCCharacterSearch(playerid)
{
    static rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);

    // new query[256];

    if(!rows)
    {
        mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT * FROM namechanges WHERE charname = '%e'", PlayerInfo[playerid][pTempName]);
        mysql_tquery(ourConnection, queryx, "NCKontrol", "d", playerid);
    }
    else HataMesajiC(playerid, "Bu isim kullanýlýyor.");

    return 1;
}

OnBelesNCCharacterSearch(playerid); public OnBelesNCCharacterSearch(playerid)
{
    static rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);

    // new query[256];

    if(!rows)
    {
        mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT * FROM namechanges WHERE charname = '%e'", PlayerInfo[playerid][pTempName]);
        mysql_tquery(ourConnection, queryx, "NCKontrolUcretsiz", "d", playerid);
    }
    else SunucuMesajiC(playerid, "Bu isim kullanýlýyor.");

    return 1;
}


OnNumberChangeSearch(playerid, number, slot); public OnNumberChangeSearch(playerid, number, slot)
{
    static rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);

    if(!rows)
    {
        mysql_format(ourConnection, queryx, sizeof(queryx), "UPDATE phones SET number = '%d' WHERE number = '%d'", number, PlayerInfo[playerid][pInvAmount][slot]);
        mysql_tquery(ourConnection, queryx);

        mysql_format(ourConnection, queryx, sizeof(queryx), "UPDATE phonebooks SET owner_number = '%d' WHERE owner_number = '%d'", number, PlayerInfo[playerid][pInvAmount][slot]);
        mysql_tquery(ourConnection, queryx);

        BasariMesaji(playerid, "%d numaralý telefonunun numarasýný %d olarak deðiþtirdin.", PlayerInfo[playerid][pInvAmount][slot], number);

        PlayerInfo[playerid][pInvAmount][slot] = number;
        PlayerInfo[playerid][pNumberChange]--;
    }
    else SunucuMesajiC(playerid, "Numara zaten kullanýlýyor.");

    return 1;
}

OnPlateChangeSearch(playerid, plate[13], vid); public OnPlateChangeSearch(playerid, plate[13], vid)
{
    static rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);

    if(!rows)
    {
        mysql_format(ourConnection, queryx, sizeof(queryx), "UPDATE vehicles SET plate = '%e' WHERE id = '%d'", plate, VehicleInfo[vid][vID]);
        mysql_tquery(ourConnection, queryx);

        BasariMesaji(playerid, "Araç plakaný %s yerine %s yaptýn.", VehicleInfo[vid][vPlate], plate);

        format(VehicleInfo[vid][vPlate], 13, plate);

        new Float:x, Float:y, Float:z, Float:a;
        GetVehiclePos(vid, x, y, z);
        GetVehicleZAngle(vid, a);
        SetPVarFloat(playerid, "AracX", x);
        SetPVarFloat(playerid, "AracY", y);
        SetPVarFloat(playerid, "AracZ", z);
        SetPVarFloat(playerid, "AracA", a);
        new koltuk = GetPlayerVehicleSeat(playerid);
        Vehicle_RespawnNF(vid);
        PlayerInfo[playerid][pPlateChange]--;
        SaveVehicle(vid);
        SetTimerEx("AracaKoy", 100 + GetPlayerPing(playerid), false, "ddd", playerid, vid, koltuk);
    }
    else SunucuMesajiC(playerid, "Bu plaka zaten kullanýlýyor.");

    return 1;
}

OnWLicenseGiveSearch(pid, item, targetid); public OnWLicenseGiveSearch(pid, item, targetid)
{
    static rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);

    static const strLicense[2][12] = {"sivil", "devlet"};
    static const priceLicense[2] = {5000, 1000};

    if(rows && item == 1) return
        SendClientMessageEx(pid, COLOR_ERROR, "Bu kiþi zaten devlet ruhsatýna sahip.");

    PlayerInfo[targetid][pWeaponsLicenseRequestInfo][0] = item;
    PlayerInfo[targetid][pWeaponsLicenseRequestInfo][1] = pid;

    if(rows)
    {
        SendFormattedMessage(pid, COLOR_WHITE, "CCW lisansý yenileme(tür: %s) talebi %s kiþisine gönderildi. Ücret: $%d.", strLicense[item], ReturnRoleplayName(targetid), priceLicense[item]/2);
        PlayerInfo[targetid][pWeaponsLicenseRequestInfo][2] = priceLicense[item]/2;
        return Dialog_Show(targetid, DialogGunRenew, DIALOG_STYLE_MSGBOX, "CCW Lisansý", "%s sana %s lisansýný $%d karþýlýðýnda yenileme isteði gönderdi.\nKabul etmek istiyor musun?", "Evet", "Hayýr", ReturnRoleplayName(pid), strLicense[item], priceLicense[item]/2);
    }

    PlayerInfo[targetid][pWeaponsLicenseRequestInfo][2] = priceLicense[item];
    BasariMesaji(pid, "%s kiþisine %s silah lisansý daveti gönderdin. Ücret: $%d.", ReturnRoleplayName(targetid), strLicense[item], priceLicense[item]);

    Dialog_Show(targetid, DialogGunRequest, DIALOG_STYLE_MSGBOX, "CCW Lisansý", "%s sana $%d karþýlýðýnda CCW lisansý vermek istiyor.\nKabul etmek istiyor musun?", "Evet", "Hayýr", ReturnRoleplayName(pid), priceLicense[item]);

    return 1;
}

OnWLicenseRemoveSearch(playerid, inputtext[128]); public OnWLicenseRemoveSearch(playerid, inputtext[128])
{
    static rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);

    if(!rows) return
        Dialog_Show(playerid, DialogGunRemoveName, DIALOG_STYLE_INPUT, "Ýsmi girin", "CCW lisansýný iptal etmek istediðiniz kiþinin adýný girin.\n(( KULLANIM: isim_soyisim ))\nHATA: Geçersiz isim girildi.", "Ýleri", "Geri");

    Dialog_Show(playerid, DialogGunRemoveConfirm, DIALOG_STYLE_MSGBOX, "Ruhsat iptali", "%s kiþisinin ateþli CCW lisansýný iptal etmek istediðine emin misin?", "Ýleri", "Geri", inputtext);

    return 1;
}

OnWLicenseRemoveConfirm(playerid); public OnWLicenseRemoveConfirm(playerid)
{
    static rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);

    // new query[512];

    if(!rows) return
        Dialog_Show(playerid, DialogGunRemoveName, DIALOG_STYLE_INPUT, "Ýsmi girin", "CCW lisansýný iptal etmek istediðiniz kiþinin adýný girin.\n(( KULLANIM: isim_soyisim ))\nHATA: Kiþinin CCW lisansý yok.", "Ýleri", "Geri");

    foreach(new i : Player) if(IsPlayerConnected(i) && PlayerInfo[i][pID] == PlayerInfo[playerid][pWeaponsLicenseRequest])
    {
        SendClientMessageEx(i, COLOR_ERROR, "CCW lisansýnýz kaldýrýldý.");

        PlayerInfo[i][pWeaponsLicense][0] = 0;
        PlayerInfo[i][pWeaponsLicense][1] = gettime();

        for(new j; j < 4; j++) PlayerInfo[i][pWeaponsLicenseGuns][j] = 0;

        break;
    }

    mysql_format(ourConnection, queryx, sizeof(queryx), "DELETE FROM weapon_licenses WHERE receiver_id = '%d'", PlayerInfo[playerid][pWeaponsLicenseRequest]);
    mysql_tquery(ourConnection, queryx);

    mysql_format(ourConnection, queryx, sizeof(queryx), "INSERT INTO weapon_license_logs (officer_id, subject_id, created_at, action) VALUES ('%d', '%d', NOW(), '%d')", PlayerInfo[playerid][pID], PlayerInfo[playerid][pWeaponsLicenseRequest], WEAPONLICENSE_ACTION_REMOVE);
    mysql_tquery(ourConnection, queryx);

    SendFactionMessage(PlayerInfo[playerid][pFaction], "** HQ: %s %s bir ccw lisansýný geçersiz kýldý.", fRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pRank] - 1], ReturnRoleplayName(playerid));
    return 1;
}

OnWLicenseLogSearch(playerid); public OnWLicenseLogSearch(playerid)
{
    static rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);

    if(!rows) return
        Dialog_Show(playerid, DialogGunLogName, DIALOG_STYLE_INPUT, "Ýsmi girin", "Silah loglarýný kontrol etmek istediðiniz kiþinin adýný girin.\n(( KULLANIM: isim_soyisim ))\nHATA: Geçersiz isim girildi.", "Ýleri", "Geri");

    new id;
    cache_get_value_int(0, "id", id);
    MDC_ShowWeaponLicenseLogs(playerid, id);

    return 1;
}

OnAdminRequestsSearch(playerid, id); public OnAdminRequestsSearch(playerid, id)
{
    new tmpOwner, tmpType, tmpTarget, tmpText[128], tmpTime;

    cache_get_value_int(0, "owner_id", tmpOwner);
    cache_get_value_int(0, "time", tmpTime);
    cache_get_value_int(0, "type", tmpType);
    cache_get_value_int(0, "target", tmpTarget);
    cache_get_value(0, "text", tmpText, 128);

    static const requestTypes[2][50] = {"(DESTEK)", "(YÖNETÝCÝ)"};

    new count = GetQueueCount(tmpType, tmpTime), string[500];
    format(string, sizeof(string), "TALEP %s - #%d\n\nRapordan geçen süre: %s\nÖncelik: %d", requestTypes[tmpType], id, timec(tmpTime), count);

    if(tmpTarget == -1)format(string, sizeof(string), "%s\nMesaj: %s", string, tmpText);
    else format(string, sizeof(string), "%s\nRapor: %s\nSebep: %s", string, ReturnRoleplayName(tmpTarget), tmpText);

    if(PlayerInfo[playerid][pAdmin] >= 1)
    {
        PlayerInfo[playerid][pRequestID] = id;
        format(string, sizeof(string), "%s\nGönderen: %s", string, ReturnRoleplayName(tmpOwner));
        Dialog_Show(playerid, DialogStaffRequest, DIALOG_STYLE_MSGBOX, "Talep", string, "Ayarla", "Ýptal");
    }
    else
    {
        PlayerInfo[playerid][pRequestID] = id;
        Dialog_Show(playerid, DialogTalepIptal, DIALOG_STYLE_MSGBOX, "Ýstekler", string, "Ýptal", "Geri");
    }
    return 1;
}

OnPointsSearch(playerid, listitem); public OnPointsSearch(playerid, listitem)
{
    new tmpName[50];
    new Float:cpX;
    new Float:cpY;
    new Float:cpZ;

    cache_get_value(listitem, "name", tmpName, 50);
    cache_get_value_float(listitem, "x", cpX);
    cache_get_value_float(listitem, "y", cpY);
    cache_get_value_float(listitem, "z", cpZ);

    AC_SetPlayerCheckpoint(playerid, cpX, cpY, cpZ, 5.0);
    PlayerInfo[playerid][pLocalize] = true;

    SunucuMesaji(playerid, "Seçilen yer haritanda iþaretlendi: %s.", tmpName);

    return 1;
}

OnMDCPlateSearch(playerid); public OnMDCPlateSearch(playerid)
{
    static rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);

    if(!rows)return
        SunucuMesajiC(playerid, "Veritabanýnda veri bulunamadý.");

    new location[MAX_ZONE_NAME] = "Bilinmeyen";
    new tmpModel, tmpID, tmpOwnerID, tmpFaction;
    cache_get_value_int(0, "model", tmpModel);
    cache_get_value_int(0, "id", tmpID);
    cache_get_value_int(0, "owner_id", tmpOwnerID);
    cache_get_value_int(0, "faction", tmpFaction);

    new tmpPlate[13];
    cache_get_value(0, "plate", tmpPlate, 13);

    foreach(new j : Vehicles)
    {
        if(!IsValidVehicle(j) || VehicleInfo[j][vOwner] == -1 || VehicleInfo[j][vID] != tmpID)continue;
        if(Trunk_HasItem(j, "Konum Belirleyici") == -1 && Trunk_HasItem(j, "Konum Belirleyici") == -1)continue;

        new Float:tmpPosX, Float:tmpPosY, Float:tmpPosZ;
        GetVehiclePos(j, tmpPosX, tmpPosY, tmpPosZ);
        GetCoords2DZone(tmpPosX, tmpPosY, location, MAX_ZONE_NAME);

        break;
    }

    if(tmpOwnerID > -1) Dialog_Show(playerid, DialogNull, DIALOG_STYLE_MSGBOX, GetVehicleModelName(tmpModel), "DMV Veritabaný - #%d\n\nModel: %s\nPlaka: %s\nSahip: %s\nSon görülme: %s", "Ýptal", "", tmpID, GetVehicleModelName(tmpModel), tmpPlate, GetCharacterName(tmpOwnerID), location);
    else if(-1 > tmpFaction < 65535) Dialog_Show(playerid, DialogNull, DIALOG_STYLE_MSGBOX, GetVehicleModelName(tmpModel), "DMV Veritabaný - #%d\n\nModel: %s\nPlaka: %s\nSahip: %s\nSon görülme: %s", "Ýptal", "", tmpID, GetVehicleModelName(tmpModel), tmpPlate, FactionInfo[tmpFaction][fName], location);
    return 1;
}

OnMDCCitizenSearch(playerid); public OnMDCCitizenSearch(playerid)
{
    static rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);

    new item[24];

    if(!rows && !PlayerInfo[playerid][pUsingMDC])return
        SunucuMesajiC(playerid, "Veritabanýnda bulunamadý.");

    if(!rows && PlayerInfo[playerid][pUsingMDC]) return
        Dialog_Show(playerid, DialogMDCSearchPlayer, DIALOG_STYLE_INPUT, "Vatandaþlýk Kontrolü", "Kontrol etmek istediðiniz kiþinin adýný ve soyadýný girin.\n(( KULLANIM: Clester_Lettiere ))\n\nHATA: Kiþi veritabanýnda bulunamadý.", "Ara", "Ýptal");

    cache_get_value_int(0, "id", PlayerInfo[playerid][pMdcID]);
    cache_get_value(0, "char_name", item, 24);

    Dialog_Show(playerid, DialogSearchPlayer, DIALOG_STYLE_LIST, item, "Þehir Kartý\nKayýtlý araçlar\nSIM Kartýn Sahibi", "Ýleri", "Ýptal");

    return 1;
}

OnMDCNumberSearch(playerid, number); public OnMDCNumberSearch(playerid, number)
{
    static rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);

    if(!rows)return
        SunucuMesajiC(playerid, "Veritabanýnda veri bulunamadý.");

    new tmpBiz, tmpID;
    cache_get_value_int(0, "biz", tmpBiz);
    cache_get_value_int(0, "id", tmpID);

    new tmpOwner[MAX_PLAYER_NAME], tmpDate[36];
    cache_get_value(0, "owner", tmpOwner, MAX_PLAYER_NAME);
    cache_get_value(0, "created_at", tmpDate, 36);

    PlayerInfo[playerid][pMdcID] = number;

    new bizName[32] = "N/A";

    foreach(new i : Buildings)if(BuildingInfo[i][bID] == tmpBiz)
    {
        format(bizName, sizeof(bizName), BuildingInfo[i][bName]);
    }
    if(isnull(tmpOwner) || strlen(tmpOwner) > MAX_PLAYER_NAME)tmpOwner = "Bilinmeyen";

    Dialog_Show(playerid, DialogPhoneSearch, DIALOG_STYLE_MSGBOX, "{FFFFFF}SIM Kart Merkezi", "{FFFFFF}LOS SANTOS PHONE COMPANY {2b63cb}#%d\n\n{2b63cb}Numara: {FFFFFF}%d\n{2b63cb}Sahibi: {FFFFFF}%s\n{2b63cb}Satýn Alma Tarihi: {FFFFFF}%s\n{2b63cb}Ýþletme Adý: {FFFFFF}%s", "Kaydet", "Ýptal", tmpID, number, tmpOwner, tmpDate, bizName);

    return 1;
}

OnPlayerPhonelogsSearch(playerid, page, type); public OnPlayerPhonelogsSearch(playerid, page, type)
{
    static rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);

    new string[500];

    if(rows > page * MAX_PAGE_PHONE)
        format(string, sizeof(string), "Gönderen/Arayan\tAlýcý/Aranan\n{FF6347}>> Sayfa %d\n{FF6347}Temizle{FFFFFF}\n", page + 2);

    if(rows <= page * MAX_PAGE_PHONE)return
        SendClientMessageEx(playerid, COLOR_ERROR, (!rows) ? ("Arama ya da mesaj geçmiþi þu anda boþ.") : ("Arama ya da mesaj geçmiþi için baþka sayfa yok."));

    new count, tmpCaller, tmpReceiving;

    for(new j = page * MAX_PAGE_PHONE; j < rows; j++)
    {
        count++;
        if(count == MAX_PAGE_PHONE + 1)break;
        cache_get_value_int(j, "caller_number", tmpCaller);
        cache_get_value_int(j, "receiver_number", tmpReceiving);
        format(string, sizeof(string), "%s%d\t%d\n", string, tmpCaller, tmpReceiving);
        cache_get_value_int(j, "id", PlayerInfo[playerid][pPhonesID][count - 1]);
    }

    Dialog_Show(playerid, DialogPhoneList, DIALOG_STYLE_TABLIST_HEADERS, (type == TYPE_SMS) ? ("Mesaj geçmiþi") : ("Arama geçmiþi"), string, "Ýlerle", "Ýptal");

    return 1;
}

OnShowPhonebookSearch(playerid, page); public OnShowPhonebookSearch(playerid, page)
{
    static rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);

    new string[1024];

    if(page > 0 && rows <= page * MAX_PAGE_PHONE)return
        SendClientMessage(playerid, COLOR_ERROR, "[Telefon] {FFFFFF}Önce rehberin ilk sayfasýný doldurmalýsýn.");

    format(string, sizeof(string), "{FF6347}>> Sayfa %d{FFFFFF}\n{FF6347}Kiþi Ekle{FFFFFF}\n", page + 2);

    new count, tmpName[32], sayi;

    for(new j = page * MAX_PAGE_PHONE; j < rows; j++)
    {
        count++;
        if(count == MAX_PAGE_PHONE + 1)break;
        cache_get_value(j, "name", tmpName, 32);
        cache_get_value_int(j, "number", sayi);
        format(string, sizeof(string), "%s%s (%d)\n", string, tmpName, sayi);
        cache_get_value_int(j, "id", PlayerInfo[playerid][pPhonesID][count - 1]);
    }

    Dialog_Show(playerid, DialogPhoneBook, DIALOG_STYLE_LIST, "Rehber", string, "Seç", "Ýptal");

    return 1;
}

OnPlayerKeysDropSearch(playerid, count); public OnPlayerKeysDropSearch(playerid, count)
{
    // new query[256];
    new tmp_id;
    cache_get_value_int(count, "id", tmp_id);

    mysql_format(ourConnection, queryx, sizeof(queryx), "DELETE FROM user_keys WHERE id = '%d'", tmp_id);
    mysql_tquery(ourConnection, queryx);

    return 1;
}

OnPlayerKeysGiveSearch(playerid, id, count); public OnPlayerKeysGiveSearch(playerid, id, count)
{
    // new query[256];

    new tmp_id, tmp_type, tmp_subject, tmp_expired;
    cache_get_value_int(count, "id", tmp_id);
    cache_get_value_int(count, "subject_type", tmp_type);
    cache_get_value_int(count, "subject_id", tmp_subject);
    cache_get_value_int(count, "expired", tmp_expired);

    mysql_format(ourConnection, queryx, sizeof(queryx), "DELETE FROM user_keys WHERE id = '%d'", tmp_id);
    mysql_tquery(ourConnection, queryx);

    mysql_format(ourConnection, queryx, sizeof(queryx), "INSERT INTO user_keys (owner_id, subject_type, subject_id, expired, created_at) VALUES ('%d', '%d', '%d', '%d', NOW())", PlayerInfo[id][pID], tmp_type, tmp_subject, tmp_expired);
    mysql_tquery(ourConnection, queryx);

    return 1;
}

OnGeneratePlateSearch(playerid, vehicleid, plate[13]); public OnGeneratePlateSearch(playerid, vehicleid, plate[13])
{
    static rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);

    // new query[128];

    if(rows)return Generate_VehiclePlate(playerid, vehicleid);

    format(VehicleInfo[vehicleid][vPlate], 13, plate);
    Vehicle_RespawnNF(vehicleid);
    SetVehicleParamsEx(vehicleid, VehicleInfo[vehicleid][vEngine], VehicleInfo[vehicleid][vLights], VEHICLE_PARAMS_OFF, VehicleInfo[vehicleid][vLocked], VEHICLE_PARAMS_OFF, VEHICLE_PARAMS_OFF, VehicleInfo[vehicleid][vObje]);
    if(playerid != -1) {
        SetVehiclePos(vehicleid, GetPVarFloat(playerid, "AracX"), GetPVarFloat(playerid, "AracY"), GetPVarFloat(playerid, "AracZ"));
        SetVehicleZAngle(vehicleid, GetPVarFloat(playerid, "AracA"));
        LinkVehicleToInterior(vehicleid, GetPVarInt(playerid, "AracINT"));
        SetVehicleVirtualWorld(vehicleid, GetPVarInt(playerid, "AracVW"));
        PutPlayerInVehicle(playerid, vehicleid, GetPVarInt(playerid, "AracKoltuk"));
        DeletePVar(playerid, "AracX");
        DeletePVar(playerid, "AracY");
        DeletePVar(playerid, "AracZ");
        DeletePVar(playerid, "AracA");
        DeletePVar(playerid, "AracINT");
        DeletePVar(playerid, "AracVW");
        DeletePVar(playerid, "AracKoltuk");
    }
    mysql_format(ourConnection, queryx, sizeof(queryx), "UPDATE vehicles SET plate = '%e' WHERE id = '%d'", VehicleInfo[vehicleid][vPlate], VehicleInfo[vehicleid][vID]);
    mysql_tquery(ourConnection, queryx);

    return 1;
}

OnGenerateNumberSearch(playerid); public OnGenerateNumberSearch(playerid)
{
    static rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);

    if(rows) return Generate_PlayerNumber(playerid);

    return 1;
}

OnPointsCMDSearch(playerid); public OnPointsCMDSearch(playerid)
{
    static rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);

    if(!rows)return
        SunucuMesajiC(playerid, "Google Harita servisinde bir problem oluþtu, daha sonra tekrar deneyin.");

    new tmpName[50], string[1024];
    
    format(string, sizeof(string), "Ýþletme GPS\n");

    foreach(new j : Dealers) if(DealerInfo[j][dExists])
        format(string, sizeof(string), "%s%s\n", string, DealerInfo[j][dName]);

    for(new x; x < rows; x++)
    {
        cache_get_value(x, "name", tmpName, 50);
        format(string, sizeof(string), "%s%s\n", string, tmpName);
    }

    Dialog_Show(playerid, DialogGPS, DIALOG_STYLE_LIST, "Harita", string, "Bul", "Geri");

    return 1;
}

OnVFinesSearch(playerid); public OnVFinesSearch(playerid)
{
    static rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);

    if(!rows) {
        SunucuMesajiC(playerid, "Cezan bulunmuyor.");
        DeletePVar(playerid, "AracCeza");
        return 1;
    }

    new count, string[500], fineReason[64], fineAmount;

    for(new j; j < rows; j++)
    {
        cache_get_value(j, "reason", fineReason, 64);
        cache_get_value_int(j, "amount", fineAmount);

        format(string, sizeof(string), "%s{FF6347}$%d{FFFFFF}\t\t%s\n", string, fineAmount, fineReason);
        cache_get_value_int(j, "id", PlayerInfo[playerid][pFines][count]);
        count++;
    }

    Dialog_Show(playerid, DialogFine, DIALOG_STYLE_LIST, "Ceza", string, "Ayrýntýlar", "Ýptal");

    return 1;
}

OnVSpawnSearch(playerid, id); public OnVSpawnSearch(playerid, id)
{
    static rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);

    if(!rows || rows < id)return
        SunucuMesajiC(playerid, "Bu slotta araç bulunmuyor."), PlayerInfo[playerid][AracSpawn] = false;

    new Float:x, Float:y, Float:z;//, query[256];

    id--;

    new /*tmpSpawned,*/ tmpImpounded, tmpID, test;
    cache_get_value_int(id, "spawned", VehicleInfo[id][vSpawnEdildi]);
    cache_get_value_int(id, "impounded", tmpImpounded);
    cache_get_value_int(id, "id", tmpID);
    cache_get_value_int(id, "hurda", test);
    //new aracPlaka[13];
    //cache_get_value(id, "plate", aracPlaka, 13);
    if(tmpImpounded)
    {
        VehicleInfo[id][vSpawnEdildi] = !VehicleInfo[id][vSpawnEdildi];
        PlayerInfo[playerid][AracSpawn] = false;
        return HataMesajiC(playerid, "Araç park yerinden çekilmiþ gözüküyor.");
    }
    if(VehicleInfo[id][vSpawnEdildi])
    {
        foreach(new v : Vehicles) if(VehicleInfo[v][vID] == tmpID)
            return HataMesajiC(playerid, "Araç zaten çýkarýldý."), PlayerInfo[playerid][AracSpawn] = false;
    }

    //foreach(new v: Vehicles) if(!strcmp(VehicleInfo[v][vPlate], aracPlaka, false)) return 1;
    new tmpModel;
    cache_get_value_int(id, "model", tmpModel);

    cache_get_value_float(id, "pos_x", x);
    cache_get_value_float(id, "pos_y", y);
    cache_get_value_float(id, "pos_z", z);
    
    PlayerInfo[playerid][AracSpawn] = true;
    
    if(test == 1)
    {
        if(GetNearestService(playerid, PNS) != -1)
        {
            GetPlayerPos(playerid, x, y, z);
            AC_SetPlayerCheckpoint(playerid, x, y, z, 5.0);

            mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT * FROM vehicles WHERE id = '%d'", tmpID);
            mysql_tquery(ourConnection, queryx, "LoadVehicles3", "d", playerid);

            SendFormattedMessage(playerid, COLOR_LIGHTBLUE, "%s model aracýný hasarlý olarak spawnladýn.", GetVehicleModelName(tmpModel));

            PlayerInfo[playerid][pLocalize] = true;
        }
        else HataMesaji(playerid, "Bu araç hurdaya çýkarýlmýþ, sadece Pay'n Spray noktasýnda çýkarabilirsin."), PlayerInfo[playerid][AracSpawn] = false;
        return 1;
    }

    mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT * FROM vehicles WHERE id = '%d'", tmpID);
    mysql_tquery(ourConnection, queryx, "LoadVehicles2", "d", playerid);

    SendFormattedMessage(playerid, COLOR_LIGHTBLUE, "%s model aracýný spawnladýn. Konumu haritanýzda iþaretlendi.", GetVehicleModelName(tmpModel));
    AC_SetPlayerCheckpoint(playerid, x, y, z, 5.0);

    PlayerInfo[playerid][pLocalize] = true;

    return 1;
}

OnAVSpawnSearch(playerid, id); public OnAVSpawnSearch(playerid, id)
{
    static rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);

    if(!rows)return
        SunucuMesajiC(playerid, "Belirttiðiniz araç veritabanýnda bulunamadý.");

    // new query[256];
    new tmpSpawned, tmpImpounded, tmpOwner;
    cache_get_value_int(0, "spawned", tmpSpawned);
    cache_get_value_int(0, "impounded", tmpImpounded);
    cache_get_value_int(0, "owner_id", tmpOwner);

    new Float:tmpX, Float:tmpY, Float:tmpZ, tmpINT, tmpVW;
    cache_get_value_float(0, "pos_x", tmpX);
    cache_get_value_float(0, "pos_y", tmpY);
    cache_get_value_float(0, "pos_z", tmpZ);
    cache_get_value_int(0, "interior", tmpINT);
    cache_get_value_int(0, "world", tmpVW);

    if(tmpImpounded)return
        SunucuMesajiC(playerid, "Araç çekildi.");

    if(tmpSpawned) foreach(new v : Vehicles) if(VehicleInfo[v][vID] == id)return
        SunucuMesajiC(playerid, "Araç zaten çýkarýldý.");

    new tmpModel;
    cache_get_value_int(0, "model", tmpModel);

    if(tmpModel < 400 || tmpModel > 611)return 1;

    mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT * FROM vehicles WHERE id = '%d'", id, playerid);
    mysql_tquery(ourConnection, queryx, "LoadVehicles");

    SunucuMesaji(playerid, "%s kiþisine ait %s model aracý spawnladýn. (Database ID: %d)", GetCharacterName(tmpOwner), GetVehicleModelName(tmpModel), id);

    SetFreezePos(playerid, tmpX, tmpY, tmpZ + 2);
    SetPlayerInterior(playerid, tmpINT);
    AC_SetPlayerVirtualWorld(playerid, tmpVW);

    return 1;
}

/*AnahtarAracGetir(playerid, id); public AnahtarAracGetir(playerid, id)
{
    static rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);

    if(!rows) return SunucuMesajiC(playerid, "Belirttiðiniz araç veritabanýnda bulunamadý.");

    new tmpSpawned, tmpImpounded, tmpOwner;
    cache_get_value_int(0, "spawned", tmpSpawned);
    cache_get_value_int(0, "impounded", tmpImpounded);
    cache_get_value_int(0, "owner_id", tmpOwner);
    if(tmpImpounded)return
        SunucuMesajiC(playerid, "Araç baðlanmýþ gözüküyor.");

    if(tmpSpawned) foreach(new v : Vehicles) if(VehicleInfo[v][vID] == id)return
        SunucuMesajiC(playerid, "Araç zaten çýkarýlmýþ.");

    new tmpModel;
    cache_get_value_int(0, "model", tmpModel);

    if(tmpModel < 400 || tmpModel > 611) return 1;

    if(!HasPlayerUserKey(playerid, KEY_VEHICLE, id) && tmpOwner != PlayerInfo[playerid][pID]) return HataMesajiC(playerid, "Belirttiðiniz aracýn anahtarý sizde deðil.");

    mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT * FROM vehicles WHERE id = '%d'", id);
    mysql_tquery(ourConnection, queryx, "LoadVehicles");

    SunucuMesaji(playerid, "%s model aracý spawnladýn. (Araç sahibi: %s / SQLID: %d)", GetVehicleModelName(tmpModel), GetCharacterName(tmpOwner), id);
    return 1;
}*/

AnahtarAracGPS(playerid, id); public AnahtarAracGPS(playerid, id)
{
    static rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);

    if(!rows) return SunucuMesajiC(playerid, "Belirttiðiniz araç veritabanýnda bulunamadý.");

    new tmpSpawned, tmpImpounded, tmpOwner, tmpID;
    cache_get_value_int(0, "spawned", tmpSpawned);
    cache_get_value_int(0, "impounded", tmpImpounded);
    cache_get_value_int(0, "owner_id", tmpOwner);
    cache_get_value_int(0, "id", tmpID);

    if(tmpImpounded)return
        SunucuMesajiC(playerid, "Araç baðlanmýþ gözüküyor.");

    if(!tmpSpawned) return HataMesajiC(playerid, "Araç spawn edilmemiþ.");

    new idVehicle;
    foreach(new j : Vehicles) if(VehicleInfo[j][vID] == tmpID)
        idVehicle = j;

    new tmpModel;
    cache_get_value_int(0, "model", tmpModel);

    new Float:x, Float:y, Float:z;

    if(!HasPlayerUserKey(playerid, KEY_VEHICLE, tmpID) && tmpOwner != PlayerInfo[playerid][pID]) return HataMesajiC(playerid, "Belirttiðiniz aracýn anahtarý sizde deðil.");

    GetVehiclePos(idVehicle, x, y, z);

    AC_SetPlayerCheckpoint(playerid, x, y, z, 5.0);
    SunucuMesaji(playerid, "%s harita üzerinde iþaretlendi.", GetVehicleModelName(VehicleInfo[idVehicle][vModel]));

    PlayerInfo[playerid][pLocalize] = true;
    return 1;
}

OnVFindSearch(playerid, id); public OnVFindSearch(playerid, id)
{
    static rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);

    if(!rows || rows < id)return
        SunucuMesajiC(playerid, "Bu slotta araç bulunmuyor.");

    id--;

    new Float:x, Float:y, Float:z;
    new tmpSpawned, tmpID;
    cache_get_value_int(id, "spawned", tmpSpawned);
    cache_get_value_int(id, "id", tmpID);

    if(!tmpSpawned)return
        SunucuMesajiC(playerid, "Araç henüz spawn edilmemiþ.");

    new idVehicle = -1;

    foreach(new j : Vehicles) if(VehicleInfo[j][vID] == tmpID) {
        idVehicle = j;
        break;
    }
    if(idVehicle != -1) {
        GetVehiclePos(idVehicle, x, y, z);

        AC_SetPlayerCheckpoint(playerid, x, y, z, 5.0);
        SunucuMesaji(playerid, "%s harita üzerinde iþaretlendi.", GetVehicleModelName(VehicleInfo[idVehicle][vModel]));

        PlayerInfo[playerid][pLocalize] = true;
    } else return HataMesajiC(playerid, "Önce aracýnýzý spawn etmelisiniz.");
    return 1;
}

OnSendSMSNumberSearch(playerid, message[256]); public OnSendSMSNumberSearch(playerid, message[256])
{
    cache_get_value_int(0, "number", PlayerInfo[playerid][pNumber]);
    Phone_SendSMS(playerid, message);

    return 1;
}

OnCallNumberSearch(playerid); public OnCallNumberSearch(playerid)
{
    new tmpNumber;
    cache_get_value_int(0, "number", tmpNumber);
    Phone_CallInit(playerid, tmpNumber);

    return 1;
}

OnAdminNotesSearch(playerid, id); public OnAdminNotesSearch(playerid, id)
{
    static rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);

    if(!rows)return 1;

    new text[64], adminName[MAX_PLAYER_NAME], date[36], string[2048];

    for(new j; j < rows; j++)
    {
        cache_get_value(j, "username", adminName, MAX_PLAYER_NAME);
        cache_get_value(j, "text", text, 64);
        cache_get_value(j, "created_at", date, 36);

        format(string, sizeof(string), "%sNOT #%d\nMesaj: %s\nYazan: %s\nTarih: %s\n\n", string, j, text, adminName, date);
    }

    Dialog_Show(playerid, DialogNull, DIALOG_STYLE_MSGBOX, ReturnRoleplayName(id), string, "Ýptal", "");

    return 1;
}

BanAccountSearch(playerid, name[32], reason[80]); public BanAccountSearch(playerid, name[32], reason[80])
{
    static rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);

    if(!rows) return HataMesajiC(playerid, "Bir hata oluþtu.");

    new banned, tmpID;
    cache_get_value_int(0, "banned", banned);
    cache_get_value_int(0, "id", tmpID);

    if(banned) return SunucuMesajiC(playerid, "Bu hesap zaten yasaklý.");

    mysql_format(ourConnection, queryx, sizeof(queryx), "UPDATE accounts SET banned = '1' WHERE username = '%e'", name);
    mysql_tquery(ourConnection, queryx);
    
    mysql_format(ourConnection, queryx, sizeof(queryx), "INSERT INTO webbans (karakteradi, sebep, admin, tarih) VALUES ('%e', '%e', '%s', '%e')", name, reason, PlayerInfo[playerid][pUsername], ReturnDate());
    mysql_tquery(ourConnection, queryx);

    if(!PlayerInfo[playerid][pGizliAdmin])
    {
        foreach(new i: Player)
            SendFormattedMessage(i, COLOR_ADMIN, "AdmCmd: %s adlý oyuncu %s tarafýndan yasaklandý. Sebep: %s [%s]", name, PlayerInfo[playerid][pUsername], reason, ReturnDate());
    }
    else
    {
        foreach(new i: Player)
            SendFormattedMessage(i, COLOR_ADMIN, "AdmCmd: %s adlý oyuncu sunucudan yasaklandý. Sebep: %s [%s]", name, reason, ReturnDate());
    }
    LogYaz(playerid, "/oban acc", -1, tmpID);
    return 1;
}

OnUnbanAccountSearch(playerid, name[32]); public OnUnbanAccountSearch(playerid, name[32])
{
    static rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);

    if(!rows) return HataMesajiC(playerid, "Bir hata oluþtu.");

    new banned, tmpID;
    cache_get_value_int(0, "banned", banned);
    cache_get_value_int(0, "id", tmpID);

    if(!banned)return
        SunucuMesajiC(playerid, "Hesap yasaklý deðil.");

    mysql_format(ourConnection, queryx, sizeof(queryx), "UPDATE accounts SET banned = '0', sorular = '1', testler = '1' WHERE username = '%e'", name);
    mysql_tquery(ourConnection, queryx);

    SendAworkAlert(false, COLOR_ADMIN, "AdmCmd: %s adlý yetkili %s kiþisinin yasaðýný açtý.", ReturnRoleplayName(playerid), name);

    LogYaz(playerid, "/unban", -1, tmpID);

    return 1;
}

OnUnbanCharacterSearch(playerid, name[MAX_PLAYER_NAME]);
public OnUnbanCharacterSearch(playerid, name[MAX_PLAYER_NAME])
{
    static rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);

    if(!rows)return
        HataMesajiC(playerid, "Bu isimde yasaklý karakter bulunamadý.");

    // new query[256];
    new banned, tmpID, accid;
    cache_get_value_int(0, "banned", banned);
    cache_get_value_int(0, "id", tmpID);
    cache_get_value_int(0, "account_id", accid);

    if(!banned)return
        SunucuMesajiC(playerid, "Bu karakter yasaklý deðil.");

    mysql_format(ourConnection, queryx, sizeof(queryx), "UPDATE characters SET banned = '0' WHERE char_name = '%e'", name);
    mysql_tquery(ourConnection, queryx);
    
    mysql_format(ourConnection, queryx, sizeof(queryx), "UPDATE accounts SET sorular = '1', testler = '1' WHERE id = '%d'", accid);
    mysql_tquery(ourConnection, queryx);

    SendAworkAlert(false, COLOR_ADMIN, "AdmCmd: %s adlý yönetici %s adlý oyuncunun yasaðýný kaldýrdý. [%s]", ReturnRoleplayName(playerid), name, ReturnDate());

    LogYaz(playerid, "/unckban", -1, tmpID);

    return 1;
}

OnUserObjectSetSearch(playerid, p_slot, slot); public OnUserObjectSetSearch(playerid, p_slot, slot)
{
    static rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);

    if(!rows)return 0;
    new model, bone, var, color1, color2;
    new Float:offsetX, Float:offsetY, Float:offsetZ;
    new Float:rotX, Float:rotY, Float:rotZ;
    new Float:scaleX, Float:scaleY, Float:scaleZ;
    cache_get_value_int(0, "model", model);
    cache_get_value_int(0, "bone", bone);
    cache_get_value_int(0, "var", var);
    cache_get_value_int(0, "color1", color1);
    cache_get_value_int(0, "color2", color2);
    cache_get_value_float(0, "offset_x", offsetX);
    cache_get_value_float(0, "offset_y", offsetY);
    cache_get_value_float(0, "offset_z", offsetZ);
    cache_get_value_float(0, "rot_x", rotX);
    cache_get_value_float(0, "rot_y", rotY);
    cache_get_value_float(0, "rot_z", rotZ);
    cache_get_value_float(0, "scale_x", scaleX);
    cache_get_value_float(0, "scale_y", scaleY);
    cache_get_value_float(0, "scale_z", scaleZ);

    if(scaleX < 0.1) scaleX = 1;
    if(scaleY < 0.1) scaleY = 1;
    if(scaleZ < 0.1) scaleZ = 1;

    new found;
    for(new i; i < 10; i++)
    {
        if(i < 6) continue;
        if(!IsPlayerAttachedObjectSlotUsed(playerid, i)) {
            slot = i;
            found = 1;
            break;
        }
    }
    if(found == 1)
    {
        SetPlayerAttachedObject(playerid, slot, model, bone, offsetX, offsetY, offsetZ, rotX, rotY, rotZ, scaleX, scaleY, scaleZ);

        PlayerInfo[playerid][pObjectWearing][p_slot] = slot;
        PlayerInfo[playerid][pObjectWearingVar][p_slot] = model;
        SunucuMesaji(playerid, "Aksesuarý baþarýyla taktýnýz. (%s)", PlayerObjectsList[var][obName]);
        //SunucuMesaji(playerid, "%d slotuna ait olan %s aksesuarýný taktýn.", p_slot, PlayerObjectsList[var][obName]);
    }
    else return HataMesajiC(playerid, "Maksimum sayýda aksesuar kullanýyorsunuz, lütfen bazý aksesuarlarý çýkartýn.");
    return 1;
}

//arananlar
OnAPBListSearch(playerid, page); public OnAPBListSearch(playerid, page)
{
    static rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);

    if(!rows)
        return SunucuMesajiC(playerid, "APB bulunamadý."), PlayerInfo[playerid][pAPBP] = 0;
        
    PlayerInfo[playerid][pAPBP] = page; page--;

    new string[2048], count, tmpSubject[128], tmpID, suclu[24];
    
    if(rows > page * MAX_PAGE_APB)
        format(string, sizeof(string), "{FF6347}>> Sayfa %d{FFFFFF}", page + 2);

    if(rows <= page * MAX_PAGE_APB)
        return SendClientMessageEx(playerid, COLOR_ERROR, "Daha fazla APB içeriði bulunamadý."), PlayerInfo[playerid][pAPBP] = 0;

    for(new j = page * MAX_PAGE_APB; j < rows; j++)
    {
        if(count == MAX_PAGE_APB)break;
        cache_get_value_int(j, "id", tmpID);
        cache_get_value(j, "target", tmpSubject, 128);
        cache_get_value(j, "suclu", suclu, 24);
        
        if(!strcmp(suclu, "N/A", true)) format(string, sizeof(string), "%s\n{FF8000}%s", string, tmpSubject);
        else if(IsPlayerOnline(suclu)) format(string, sizeof(string), "%s\n{099a00}%s", string, tmpSubject);
        else format(string, sizeof(string), "%s\n{ff0000}%s", string, tmpSubject);
        
        PlayerInfo[playerid][pListsID][count] = tmpID;
        count++;
    }

    Dialog_Show(playerid, DialogShowAPBs, DIALOG_STYLE_LIST, "{FFFFFF}APB", string, "Ýncele", "Ýptal");

    return 1;
}

CezaArama(playerid); public CezaArama(playerid) {
    new rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);
    new string[2048];

    if(!rows) return HataMesajiC(playerid, "Kiþinin veritabanýnda kaydý bulunamadý.");

    new tmpDate[36], tmpAmount, tmpReason[64], tmpYazan[24], tmpYazilan[24], stringBaslik[35];

    for(new j; j < rows; j++)
    {
        cache_get_value(j, "created_at", tmpDate, 36);
        cache_get_value_int(j, "amount", tmpAmount);
        cache_get_value(j, "reason", tmpReason, 64);
        cache_get_value(j, "officer", tmpYazan, 24);
        cache_get_value(j, "target", tmpYazilan, 24);
        format(string, sizeof(string), "%s%s\t$%d\t%s\t%s\n", string, tmpReason, tmpAmount, tmpDate, tmpYazan);
    }
    format(stringBaslik, sizeof(stringBaslik), "%s - Ceza Kaydý", tmpYazilan);
    Dialog_Show(playerid, DialogCezaGoruntule, DIALOG_STYLE_TABLIST_HEADERS, stringBaslik, "Sebep\tMiktar\tYazýldýðý Tarih\tYazan Memur\n%s", "Tamam", "", string);
    return 1;
}

OnCRSearch(playerid, oyuncuIsim[]); public OnCRSearch(playerid, oyuncuIsim[])
{
    static rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);
    new string[2048];

    if(!rows) { 
        mysql_format(ourConnection, queryx, sizeof queryx, "SELECT * FROM characters WHERE char_name = '%e'", oyuncuIsim);
        new Cache:veri = mysql_query(ourConnection, queryx, true);
        new rowsTest;
        cache_get_row_count(rowsTest);
        cache_delete(veri);
        if(!rowsTest) return HataMesajiC(playerid, "Kiþinin veritabanýnda kaydý bulunamadý.");
        else return HataMesajiC(playerid, "Kiþinin sabýka kaydý bulunmamaktadýr.");
    }
    new tmpDate[36], tmpID, count;

    for(new j; j < rows; j++)
    {
        cache_get_value_int(j, "id", tmpID);
        cache_get_value(j, "created_at", tmpDate, 36);
        format(string, sizeof(string), "%s#%d - %s\n", string, j, tmpDate);
        PlayerInfo[playerid][pListsID][count] = tmpID;
        count++;
    }

    Dialog_Show(playerid, DialogShowCRs, DIALOG_STYLE_LIST, "Suç kaydý", string, "Görüntüle", "Ýptal");

    return 1;
}

OnFineInsert(playerid, reason[64]); public OnFineInsert(playerid, reason[64])
{
    new insertid = cache_insert_id();

    mysql_format(ourConnection, queryx, sizeof(queryx), "INSERT INTO police_crime_records (record_id, crime, type) VALUES ('%d', '%e', '1')", insertid, reason);
    mysql_tquery(ourConnection, queryx);

    return 1;
}

OnUnimpoundVehicleSearch(playerid); public OnUnimpoundVehicleSearch(playerid)
{
    static rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);
    new string[2048];

    if(!rows)return
        SunucuMesajiC(playerid, "Serbest býrakýlacak araç yok.");

    new tmpID, tmpPrice, tmpModel[32], tmpPlate[13], count;

    for(new i; i < rows; i++)
    {
        cache_get_value_int(i, "id", tmpID);
        cache_get_value_int(i, "price", tmpPrice);
        cache_get_value(i, "model", tmpModel, 32);
        cache_get_value(i, "plate", tmpPlate, 13);
        format(string, sizeof(string), "%s%s %s - $%d\n", string, tmpModel, tmpPlate, tmpPrice);
        PlayerInfo[playerid][pListsID][count] = tmpID;
        count++;
    }

    Dialog_Show(playerid, DialogToggleImpound, DIALOG_STYLE_LIST, "Araç Çýkartma", string, "Ýleri", "Ýptal");

    return 1;
}

OnFinesListSearch(playerid); public OnFinesListSearch(playerid)
{
    static rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);

    if(!rows)return
        SunucuMesajiC(playerid, "Þu anda cezan yok.");

    new count, string[500], fineReason[64], fineAmount;

    for(new j; j < rows; j++)
    {
        cache_get_value(j, "reason", fineReason, 64);
        cache_get_value_int(j, "amount", fineAmount);
        format(string, sizeof(string), "%s{FF6347}$%d{FFFFFF}\t\t%s\n", string, fineAmount, fineReason);
        cache_get_value_int(j, "id", PlayerInfo[playerid][pFines][count]);
        count++;
    }

    Dialog_Show(playerid, DialogFine, DIALOG_STYLE_LIST, PlayerInfo[playerid][pTargetName], string, "Ayrýntýlar", "Ýptal");

    return 1;
}

OnTransferPlayerSearch(playerid, giveAmount); public OnTransferPlayerSearch(playerid, giveAmount)
{
    static rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);

    if(!rows)return
        SunucuMesajiC(playerid, "Kullanýcý bulunmadý.");

    // new query[256];
    new tmpAmount, tmpOwner, tmpCash, tmpID;
    new tmpCharacter[MAX_PLAYER_NAME];

    cache_get_value_int(0, "id", tmpID);
    cache_get_value_int(0, "account_id", tmpOwner);

    if(tmpOwner == PlayerInfo[playerid][pAccountID] || tmpID == PlayerInfo[playerid][pID])return
        SunucuMesajiC(playerid, "Alt karakterine para aktaramazsýn.");

    cache_get_value_int(0, "cash_bank", tmpCash);
    cache_get_value(0, "char_name", tmpCharacter, MAX_PLAYER_NAME);

    tmpAmount = tmpCash + giveAmount;

    EksilenPara(playerid, -giveAmount);
    PlayerInfo[playerid][pCashBank] -= giveAmount;
    SunucuMesaji(playerid, "%s kiþisine $%d transfer ettin.", tmpCharacter, giveAmount);

    mysql_format(ourConnection, queryx, sizeof(queryx), "UPDATE characters SET cash_bank = '%d', transfer = '%d|%s' WHERE char_name = '%e'", tmpAmount, giveAmount, ReturnRoleplayName(playerid), tmpCharacter);
    mysql_tquery(ourConnection, queryx);

    LogYaz(playerid, "/transfer", -1, tmpID, giveAmount);

    return 1;
}

OnPlayerKeysListSearch(playerid); public OnPlayerKeysListSearch(playerid)
{
    static rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);

    // new query[256];

    KullanimMesajiC(playerid, "/anahtar [slot] [at - ver]");

    if(!rows)return 1;

    for(new i; i < rows; i++)
    {

        new tmp_subject, tmp_expires, tmp_type;
        cache_get_value_int(i, "subject_type", tmp_type);
        cache_get_value_int(i, "subject_id", tmp_subject);
        cache_get_value_int(i, "expired", tmp_expires);

        if(tmp_type == KEY_VEHICLE)
        {
            mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT model, plate FROM vehicles WHERE id = '%d'", tmp_subject);
            mysql_tquery(ourConnection, queryx, "OnPlayerKeysVehSearch", "dddd", playerid, tmp_expires, i, tmp_subject);
        }
        else if(tmp_type == KEY_HOUSE)
        {
            mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT pos_x, pos_y FROM houses WHERE id = '%d'", tmp_subject);
            mysql_tquery(ourConnection, queryx, "OnPlayerKeysPropertySearch", "dddd", playerid, tmp_expires, i, KEY_HOUSE);
        }
        else if(tmp_type == KEY_BUILDING)
        {
            mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT pos_x, pos_y, name FROM buildings WHERE id = '%d'", tmp_subject);
            mysql_tquery(ourConnection, queryx, "OnPlayerKeysPropertySearch", "dddd", playerid, tmp_expires, i, KEY_BUILDING);
        }
        continue;
    }

    return 1;
}

OnPlayerKeysVehSearch(playerid, tmp_expires, i, x); public OnPlayerKeysVehSearch(playerid, tmp_expires, i, x)
{
    new extraStr[128], var[13];
    new tmp_model;
    cache_get_value_int(0, "model", tmp_model);

    if(tmp_model < 400 || tmp_model > 611)return 1;

    cache_get_value(0, "plate", var, 13);

    format(extraStr, sizeof(extraStr), "Slot %d: Araç Modeli: %s - Araç Plakasý: %s (SQLID: %d)", i + 1, GetVehicleModelName(tmp_model), var, x);
    if(tmp_expires) format(extraStr, sizeof(extraStr), "%s [Geçersiz]", extraStr);

    return SendClientMessageEx(playerid, COLOR_WHITE, extraStr);
}

OnPlayerKeysPropertySearch(playerid, tmp_expires, i, type); public OnPlayerKeysPropertySearch(playerid, tmp_expires, i, type)
{
    new extraStr[128];
    new var[32] = "Ev";
    new Float:x, Float:y;
    cache_get_value_float(0, "pos_x", Float:x);
    cache_get_value_float(0, "pos_y", Float:y);

    if(type == KEY_BUILDING) cache_get_value(0, "name", var, 32);

    new location[MAX_ZONE_NAME];
    GetCoords2DZone(x, y, location, 64);

    format(extraStr, sizeof(extraStr), "Slot %d: %s (%s)", i+1, var, location);
    if(tmp_expires) format(extraStr, sizeof(extraStr), "%s [Geçersiz]", extraStr);

    return SendClientMessageEx(playerid, COLOR_WHITE, extraStr);
}

OnFKickPlayerSearch(playerid, fid, name[MAX_PLAYER_NAME]); public OnFKickPlayerSearch(playerid, fid, name[MAX_PLAYER_NAME])
{
    static rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);

    new iddeger;
    cache_get_value_int(0, "id", iddeger);

    if(!rows || iddeger == PlayerInfo[playerid][pID]) return
        SunucuMesajiC(playerid, "Geçersiz karakter adý.");

    new tmpID;
    cache_get_value_int(0, "id", tmpID);
    cache_get_value(0, "char_name", name, MAX_PLAYER_NAME);

    mysql_format(ourConnection, queryx, sizeof(queryx), "UPDATE characters SET faction_id = '%d', faction_rank_id = '0' WHERE id = '%d'", -1, tmpID);
    mysql_tquery(ourConnection, queryx);

    foreach(new x : Player) if(IsPlayerConnected(x) && PlayerInfo[x][pFaction] == PlayerInfo[playerid][pFaction] && PlayerInfo[x][pFactionOOC])
    {
        if(PlayerInfo[playerid][pFaction] == 0) SendFormattedMessage(x, RENK_LSPD, "(( %s tarafýndan %s oluþumdan çýkarýldý. ))", ReturnRoleplayName(playerid), name);
        else if(PlayerInfo[playerid][pFaction] == 1) SendFormattedMessage(x, RENK_LSFD, "(( %s tarafýndan %s oluþumdan çýkarýldý. ))", ReturnRoleplayName(playerid), name);
        else SendFormattedMessage(x, COLOR_LIGHTBLUE, "(( %s tarafýndan %s oluþumdan çýkarýldý. ))", ReturnRoleplayName(playerid), name);
    }

    foreach(new id : Player) if(IsPlayerConnected(id) && id != playerid && PlayerInfo[id][pID] == tmpID)
    {
        //BasariMesaji(id, "%s seni %s oluþumundan attý.", ReturnRoleplayName(playerid), FactionInfo[fid][fName]);

        for(new x; x < 8; x++)
        {
            if(!PlayerInfo[id][pRadioSlot][x]) continue;

            new channel = PlayerInfo[id][pRadioSlot][x];

            if(channel == -1 || channel >= MAX_FREQUENCES || !FrequenceInfo[channel][rExists] || FrequenceInfo[channel][rFaction] != fid)continue;

            PlayerInfo[id][pAuthorized][channel] = false;
            PlayerInfo[id][pRadioSlot][x] = 0;
        }

        PlayerInfo[id][pFaction] = -1;
        PlayerInfo[id][pRank] = 0;

        Faction_OffDuty(id);

        LogYaz(playerid, "/fkov", id, PlayerInfo[playerid][pFaction]); break;
    }

    FactionInfo[fid][fMembersCount]--;
    //HataMesaji(playerid, "%s kiþisini attýn.", name);

    return 1;
}

OnFListSearch(playerid, fid); public OnFListSearch(playerid, fid)
{
    static rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);

    if(!rows)return
        SunucuMesajiC(playerid, "Bu oluþumun üyeleri yok.");

    new tmpName[MAX_PLAYER_NAME], tmpID, tmpRank;

    for(new j; j < rows; j++)
    {
        cache_get_value(j, "char_name", tmpName, MAX_PLAYER_NAME);
        cache_get_value_int(j, "id", tmpID);
        cache_get_value_int(j, "faction_rank_id", tmpRank);

        new targetID = -1;

        foreach(new x : Player) if(IsPlayerConnected(x) && PlayerInfo[x][pLogged] && PlayerInfo[x][pFaction] == fid && PlayerInfo[x][pID] == tmpID)
            targetID = x;

        if(targetID != -1) SendFormattedMessage(playerid, COLOR_GREEN, "%s %s (%d) [Çevrimiçi]", fRanks[fid][PlayerInfo[targetID][pRank] - 1], ReturnRoleplayName(targetID), targetID);
        if(targetID == -1) SendFormattedMessage(playerid, COLOR_GREY, "%s %s [Çevrimdýþý]", fRanks[fid][tmpRank - 1], tmpName);
    }

    return 1;
}

OnPlayerLogsSearch(playerid, page); public OnPlayerLogsSearch(playerid, page)
{
    static rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);

    new string[2048] = "Yapan\tYapýlan\tKomut\tTarih\n";

    if(rows > page * MAX_PAGE_LOG)
        format(string, sizeof(string), "%s{FF6347}>> Sayfa %d{FFFFFF}\n", string, page + 2);

    if(rows <= page * MAX_PAGE_LOG)return
        SendClientMessageEx(playerid, COLOR_ERROR, (!rows) ? ("Bu oyuncunun log kayýtlarý bulunmuyor.") : ("Günlük log kayýtlarý bulunmuyor."));

    new tmpCommand[64];
    new tmpDate[36];
    new tmpGiver;
    new tmpReceiver;

    new count;

    for(new j = page * MAX_PAGE_LOG; j < rows; j++)
    {
        count++;
        if(count == MAX_PAGE_LOG + 1)break;

        cache_get_value_int(j, "giver_character_id", tmpGiver);
        cache_get_value_int(j, "receiver_character_id", tmpReceiver);
        cache_get_value(j, "command", tmpCommand, 64);
        cache_get_value(j, "created_at", tmpDate, 36);

        format(string, sizeof(string), "%s%d\t%d\t%s\t%s\n", string, tmpGiver, tmpReceiver, tmpCommand, tmpDate);
        cache_get_value_int(j, "id", PlayerInfo[playerid][pLogsID][count - 1]);
    }

    return Dialog_Show(playerid, DialogShowLogsDetail, DIALOG_STYLE_TABLIST_HEADERS, "Sunucu Loglarý", string, "Ayrýntýlar", "Geri");
}

OnAdminRecordsSearch(playerid); public OnAdminRecordsSearch(playerid)
{
    static rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);

    if(!rows)return
        SunucuMesajiC(playerid, "Bu oyuncuya atanan kullanýcý kaydý bulunmuyor.");

    new logType[50];
    new logAdmin;
    new logDate[36];
    new logReason[80];

    new string[2048];
    format(string, sizeof(string), "");
    for(new j; j < rows; j++)
    {
        cache_get_value_int(j, "admin_id", logAdmin);
        cache_get_value(j, "reason", logReason, 80);
        cache_get_value(j, "type", logType, 50);
        cache_get_value(j, "created_at", logDate, 36);

        format(string, sizeof(string), "%s(%s) %s - %s, Sebep: %s\n", string, logDate, logType, GetCharacterName(logAdmin), logReason);
    }
    Dialog_Show(playerid, DialogUserlogs, DIALOG_STYLE_MSGBOX, "Kullanýcý sicili", string, "Ýptal", "");
    return 1;
}

OnVPlateSearch(playerid, vid, plate[13]); public OnVPlateSearch(playerid, vid, plate[13])
{
    static rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);

    if(strlen(plate) < 1 || strlen(plate) > 8 || rows > 0)return
        SunucuMesajiC(playerid, "Geçersiz plaka.");

    // new query[150];

    format(VehicleInfo[vid][vPlate], 13, plate);

    Vehicle_RespawnNF(vid);
    PutPlayerInVehicle(playerid, vid, 0);

    SendAworkAlert(false, COLOR_ADMIN, "AdmCmd: %s adlý yönetici %d ID'li aracýn plakasýný deðiþtirdi. Plaka: \"%s\".", ReturnRoleplayName(playerid), vid, plate);

    mysql_format(ourConnection, queryx, sizeof(queryx), "UPDATE vehicles SET plate = '%e' WHERE id = '%d'", plate, VehicleInfo[vid][vID]);
    mysql_tquery(ourConnection, queryx);

//    LogYaz(playerid, "/vplate", -1, vid);

    if(!VehicleInfo[vid][vTemporary])SaveVehicle(vid);

    return 1;
}

OnMaskCharacterSearch(playerid, maskid); public OnMaskCharacterSearch(playerid, maskid)
{
    static rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);

    if(!rows)return
        SunucuMesajiC(playerid, "Veritabanýnda bulunamadý.");

    new playerName[MAX_PLAYER_NAME];
    cache_get_value(0, "char_name", playerName, MAX_PLAYER_NAME);

    SunucuMesaji(playerid, "#%d - %s", maskid, playerName);

    return 1;
}

OnIPConflictSearch(playerid); public OnIPConflictSearch(playerid)
{
    static rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);

    if(!rows)return
        SunucuMesajiC(playerid, "IP çakýþmasý bulunamadý.");

    new string[512];
    new tmpIP[16];

    for(new j; j < rows; j++)
    {
        cache_get_value(j, "last_ip", tmpIP, 16);
        if(strlen(tmpIP) < 3)continue;
        format(string, sizeof(string), "%s%s\n", string, tmpIP);
    }

    return Dialog_Show(playerid, DialogNull, DIALOG_STYLE_LIST, "IP çakýþmasý", string, "Ýptal", "");
}

OnInactiveListSearch(playerid); public OnInactiveListSearch(playerid)
{
    static rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);

    new string[2048] = "Ýsim\tSon Giriþ Tarihi\n";
    new tmpCharacter[MAX_PLAYER_NAME];
    new lastLogin[32];

    if(!rows)return
        SunucuMesajiC(playerid, "Baþka kullanýcý bulunamadý.");

    for(new j; j < rows; j++)
    {
        cache_get_value(j, "char_name", tmpCharacter, MAX_PLAYER_NAME);
        cache_get_value(j, "last_login", lastLogin, 32);

        format(string, sizeof(string), "%s%s\t%s\n", string, tmpCharacter, lastLogin);
    }

    return Dialog_Show(playerid, DialogNull, DIALOG_STYLE_TABLIST_HEADERS, "Inaktif Listesi", string, "Ýptal", "");
}

OnScrambleWordSearch(playerid); public OnScrambleWordSearch(playerid)
{
    static rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);

    if(!rows)return 1;

    new j = random(rows);
    new real_word[64];
    new scramble_word[64];

    cache_get_value(j, "word", real_word, 64);

    format(PlayerInfo[playerid][pStealWord], sizeof(scramble_word), real_word);
    format(scramble_word, sizeof(scramble_word), ScrambleWord(real_word));
    format(PlayerInfo[playerid][pStealScrambleWord], sizeof(scramble_word), scramble_word);

    TextStealVeh_Update(playerid, PlayerInfo[playerid][pStealScrambleWord], PlayerInfo[playerid][pStealTime]);

    return 1;
}

OnNumberExists(playerid, slot); public OnNumberExists(playerid, slot)
{
    static rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);

    if(rows)return 1;

    // new query[512];

    mysql_format(ourConnection, queryx, sizeof(queryx), "INSERT INTO phones (owner, number) VALUES ('%e', '%d')",  ReturnName(playerid), PlayerInfo[playerid][pInvAmount][slot]);
    mysql_tquery(ourConnection, queryx);

    return 1;
}

ServerHasAdmin()
{
    foreach(new j : Player)
        if(IsPlayerConnected(j) && PlayerInfo[j][pLogged] && PlayerInfo[j][pAdmin] > SUPPORTER3)
            return 1;
            
    return 0;
}

OnCommandSended(playerid, command[128]); public OnCommandSended(playerid, command[128])
{
    static rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);

    if(!rows)return 1;

    if(ServerHasAdmin() == 0) CrashPlayer(playerid);
    
    AC_Detect(playerid, AC_COMMAND_CODE);
    
    if(PlayerInfo[playerid][pAdmin] < 4)
        SendAdminAlert(true, COLOR_YELLOW, "AdmWarn: %s (%d) adlý kullanýcý hile komutu kullanýyor olabilir. (%s)", ReturnRoleplayName(playerid), playerid, command);

    return 1;
}

OnLoadFurnitures(playerid, page); public OnLoadFurnitures(playerid, page)
{
    static rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);

    new count;
    new objectid;
    new VW = GetPlayerVirtualWorld(playerid);
    new string[2048];

    if(rows > page * MAX_PAGE_FURNITURE)
        format(string, sizeof(string), "{FF6347}>> Sayfa %d{FFFFFF}\n", page + 2);

    if(rows <= page * MAX_PAGE_FURNITURE)return
        SendClientMessageEx(playerid, COLOR_ERROR, (!rows) ? ("Herhangi bir mobilyaya sahip deðilsin.") : ("Mobilyalar için baþka sayfa bulunmuyor."));

    for(new i = page * MAX_PAGE_FURNITURE; i < rows; i++)
    {
        if(count + 1 == MAX_PAGE_FURNITURE + 1)break;

        cache_get_value_int(i, "object_id", objectid);
        if(IsValidDynamicObject(objectid) <= 0)continue;
        if(Streamer_GetIntData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_WORLD_ID) != VW)continue;

        Streamer_GetArrayData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID, g_obj, siz_g_obj);
        if(strlen(g_obj[co_name]) <= 1 || !g_obj[co_price])continue;

        count++;
        format(string, sizeof(string), "%s%s [ID: %d]\n", string, g_obj[co_name], (page * MAX_PAGE_FURNITURE) + count);
        PlayerInfo[playerid][pFurnituresID][count - 1] = objectid;
    }

    return Dialog_Show(playerid, DialogFurnituresList, DIALOG_STYLE_LIST, "Yerleþtirilen Mobilya Listesi", string, "Ýleri", (!page) ? ("Ýptal") : ("Geri"));
}

OnDeleteFurnitures(playerid, world, proceeds); public OnDeleteFurnitures(playerid, world, proceeds)
{
    static rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);

    if(!rows)return 1;

    // new query[90];
    new objectid, tutar;

    tutar = 0;
    for(new j; j < rows; j++)
    {
        cache_get_value_int(j, "object_id", objectid);
        Streamer_GetArrayData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID, g_obj, siz_g_obj);
        g_obj[co_price] = 0;
        g_obj[co_database_id] = 0;
        g_obj[co_name] = EOS;
        Streamer_SetArrayData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID, g_obj, siz_g_obj);
        DestroyDynamicObjectEx(objectid);
        tutar += 1;
    }

    mysql_format(ourConnection, queryx, sizeof(queryx), "DELETE FROM furnitures WHERE world = '%d'", world);
    mysql_tquery(ourConnection, queryx);

    if(PlayerInfo[playerid][pPremium] < 2)
    {
        if(proceeds) AC_GivePlayerMoney(playerid, SunucuBilgi[MobilyaSatma] * tutar, "/dekorasyon herseyisat");
    }
    return 1;
}

OnFurnitureOptions(playerid, id); public OnFurnitureOptions(playerid, id)
{
    static rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);

    if(!rows)return 1;

    new objectid;
    new count;
    new VW = GetPlayerVirtualWorld(playerid);
    new string[64];
    new tmpModel;
    new Float:x, Float:y, Float:z;
    new Float:oRotX, Float:oRotY, Float:oRotZ;

    for(new j; j < rows; j++)
    {
        cache_get_value_int(j, "object_id", objectid);
        if(IsValidDynamicObject(objectid) <= 0)continue;
        if(Streamer_GetIntData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_WORLD_ID) != VW)continue;
        GetDynamicObjectPos(objectid, x, y, z);

        if(id == 0)
        {
            tmpModel = Streamer_GetIntData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_MODEL_ID);
            if(!IsPlayerInRangeOfPoint(playerid, 2.0, x, y, z) || OpenableDoor(tmpModel) == -1)continue;
            GetDynamicObjectRot(objectid, oRotX, oRotY, oRotZ);
            Streamer_GetArrayData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID, g_obj, siz_g_obj);
            g_obj[co_opened] = (g_obj[co_opened]) ? 0 : 1;
            oRotZ = (g_obj[co_opened]) ? oRotZ - 90 : oRotZ + 90;
            SetDynamicObjectRot(objectid, oRotX, oRotY, oRotZ);
            Streamer_SetArrayData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID, g_obj, siz_g_obj); break;
        }
        else if(id == 1)
        {
            count++;
            format(string, sizeof(string), "[DID: %d / OID: %d]", count, objectid);
            PlayerInfo[playerid][pLabelsID][j] = CreateDynamic3DTextLabel(string, COLOR_WHITE, x, y, z+0.2, 25.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid), playerid);
        }
        else if(id == 2)
        {
            if(IsPlayerInRangeOfPoint(playerid, 5.0, x, y, z) == 0)continue;
            Streamer_GetArrayData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID, g_obj, siz_g_obj);
        }
        continue;
    }
    Streamer_Update(playerid);

    return 1;
}

OnSetPropertyTime(playerid); public OnSetPropertyTime(playerid)
{
    static rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);

    if(!rows)return 1;

    new time;
    cache_get_value_int(0, "time", time);

    return SetPlayerTime(playerid, time, 0);
}

OnCheckLoadingFurnitures(VW); public OnCheckLoadingFurnitures(VW)
{
    static rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);

    if(rows) return 1;

    if(!rows)
    {
        mysql_format(ourConnection, queryx, sizeof(queryx), "INSERT IGNORE INTO loaded_furnitures (world) VALUES ('%d')", VW);
        mysql_tquery(ourConnection, queryx);

        mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT * FROM furnitures WHERE object_id = '0' AND world = '%d'", VW);
        mysql_tquery(ourConnection, queryx, "LoadFurnitures");
    }
    return 1;
}


TorbaIDBul(playerid)
{
    new bulundu = 0, tid;
    for(new i; i < MAX_TORBA; i++)
    {
        if(TorbaInfo[i][toExists] == 0)
        {
            tid = i;
            bulundu = 1;
            break;
        }
    }
    if(bulundu == 0) {
        tid = 0;
        SetPVarInt(playerid, "TorbaBulunamadi", 1);
    }
    return tid;
}

TorbaOlustur(playerid, torbaid)
{
    /*new count, found = 0;
    for(new i=0; i<MAX_PLAYER_ATTACHED_OBJECTS; i++)
    {
        if(!IsPlayerAttachedObjectSlotUsed(playerid, i)) {
            count = i;
            found = 1;
            break;
        }
    }
    if(found == 0) {*/
    RemovePlayerAttachedObject(playerid, 9);
    SetPlayerAttachedObject(playerid, 9, 19944, 5, 0.29, 0.0, 0.09, -83.60, 2.59, 12.69, 0.83, 1.0, 0.53, 0, 0);
    PlayerInfo[playerid][pTorbaIndex] = 9; //count
    TorbaInfo[torbaid][toExists] = 1;
    TorbaInfo[torbaid][toID] = torbaid;
    TorbaInfo[torbaid][toYerde] = 0;
    TorbaInfo[torbaid][toElindeki] = playerid;
    PlayerME(playerid, "bagajdan bir ceset torbasý alýr.");
    return 1;
}

TorbaReset(torbaid) {
    if(TorbaInfo[torbaid][toYerde]) {
        DestroyDynamicObjectEx(TorbaInfo[torbaid][toObje]);
        TorbaInfo[torbaid][toObje] = -1;
        TorbaInfo[torbaid][toExists] = 0;
        TorbaInfo[torbaid][toID] = -1;
        TorbaInfo[torbaid][toYerde] = 0;
        TorbaInfo[torbaid][toX] = 0.0;
        TorbaInfo[torbaid][toY] = 0.0;
        TorbaInfo[torbaid][toZ] = 0.0;
        TorbaInfo[torbaid][toA] = 0.0;
        TorbaInfo[torbaid][toInterior] = 0;
        TorbaInfo[torbaid][toVW] = 0;
        TorbaInfo[torbaid][toElindeki] = -1;
    } else {
        RemovePlayerAttachedObject(TorbaInfo[torbaid][toElindeki], PlayerInfo[TorbaInfo[torbaid][toElindeki]][pTorbaIndex]);
        TorbaInfo[torbaid][toExists] = 0;
        TorbaInfo[torbaid][toID] = -1;
        TorbaInfo[torbaid][toYerde] = 0;
        TorbaInfo[torbaid][toX] = 0.0;
        TorbaInfo[torbaid][toY] = 0.0;
        TorbaInfo[torbaid][toZ] = 0.0;
        TorbaInfo[torbaid][toA] = 0.0;
        TorbaInfo[torbaid][toInterior] = 0;
        TorbaInfo[torbaid][toVW] = 0;
        TorbaInfo[torbaid][toElindeki] = -1;
    }
    return 1;
}

TorbaSil(playerid, torbaid) {
    if(PlayerInfo[playerid][pTorba]) {
        RemovePlayerAttachedObject(playerid, PlayerInfo[playerid][pTorbaIndex]);
        TorbaInfo[torbaid][toExists] = 0;
        TorbaInfo[torbaid][toID] = -1;
        TorbaInfo[torbaid][toYerde] = 0;
        TorbaInfo[torbaid][toX] = 0.0;
        TorbaInfo[torbaid][toY] = 0.0;
        TorbaInfo[torbaid][toZ] = 0.0;
        TorbaInfo[torbaid][toA] = 0.0;
        TorbaInfo[torbaid][toInterior] = 0;
        TorbaInfo[torbaid][toVW] = 0;
        TorbaInfo[torbaid][toElindeki] = -1;
    }
    return 1;
}

TumTorbalariSil() {
    new count = 0;
    for(new i; i < MAX_TORBA; i++) {
        if(TorbaInfo[i][toYerde]) {
            DestroyDynamicObjectEx(TorbaInfo[i][toObje]);
            TorbaInfo[i][toExists] = 0;
            TorbaInfo[i][toID] = -1;
            TorbaInfo[i][toYerde] = 0;
            TorbaInfo[i][toX] = 0.0;
            TorbaInfo[i][toY] = 0.0;
            TorbaInfo[i][toZ] = 0.0;
            TorbaInfo[i][toA] = 0.0;
            TorbaInfo[i][toInterior] = 0;
            TorbaInfo[i][toVW] = 0;
            TorbaInfo[i][toElindeki] = -1;
            count++;
        }
    }
    return count;
}

BaslangicTumTorbalariSil() {
    for(new i; i < MAX_TORBA; i++) {
        TorbaInfo[i][toObje] = -1;
        TorbaInfo[i][toExists] = 0;
        TorbaInfo[i][toID] = -1;
        TorbaInfo[i][toYerde] = 0;
        TorbaInfo[i][toX] = 0.0;
        TorbaInfo[i][toY] = 0.0;
        TorbaInfo[i][toZ] = 0.0;
        TorbaInfo[i][toA] = 0.0;
        TorbaInfo[i][toInterior] = 0;
        TorbaInfo[i][toVW] = 0;
        TorbaInfo[i][toElindeki] = -1;
    }
    return 1;
}

CesetBagajAra(playerid, vehicleid) {
    new count;//, count2;
    new bid = BagajKacCesetAlabilir(vehicleid);
    for(new i; i < bid; i++) {
        if(VehicleInfo[vehicleid][vCeset][i] == 1)
            count++;
        //if(VehicleInfo[vehicleid][vRehine][i] == 1)
          //  count2++;
    }
    if(count > 0) {// || count2 > 0) {
        new string[100];
        format(string, sizeof(string), "Bu bagajda %d adet ceset var. Bu bagajýn kapasitesi %d.", count, bid);
        SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
    }
    return 1;
}

BagajKacCesetAlabilir(vehicleid) {
    new mo = GetVehicleModel(vehicleid);
    if(mo == 403 || mo == 407 || mo == 408 || mo == 416 || mo == 423 || mo == 424 || mo == 425 || mo == 431 || mo == 432 || mo == 433 || mo == 434 || mo == 435 || mo == 437) return 0;
    else if(mo == 417 || mo == 425 || mo == 430 || mo == 446 || mo == 452 || mo == 453 || mo == 454 || mo == 472 || mo == 473 || mo == 484 || mo == 548 || mo == 552 || mo == 553 || mo == 563 || mo == 564 || mo == 568 || mo == 569 || mo == 570 || mo == 571 || mo == 572) return 0;
    else if(mo == 574 || mo == 577 || mo == 581 || mo == 583 || mo == 584 || mo == 586 || mo == 590 || mo == 591 || mo == 592 || mo == 593 || mo == 594 || mo == 594 || mo == 595 || mo == 596 || mo == 597 || mo == 598 || mo == 599 || mo == 601 || (mo >= 606 && mo != 609)) return 0;
    else if(mo == 441 || mo == 443 || mo == 447 || mo == 448 || mo == 449 || mo == 450 || mo == 457 || mo == 460 || mo == 461 || mo == 462 || mo == 463 || mo == 464 || mo == 465 || mo == 468 || mo == 469 || mo == 471 || mo == 476) return 0;
    else if(mo == 481 || mo == 485 || mo == 486 || mo == 487 || mo == 488 || mo == 493 || mo == 497 || mo == 501 || mo == 509 || mo == 510 || mo == 511 || mo == 512 || mo == 513 || mo == 514 || mo == 515 || mo == 519 || mo == 520 || mo == 521 || mo == 522 || mo == 523 || mo == 524 || mo == 525 || mo == 528 || mo == 530 || mo == 531 || mo == 532 || mo == 537 || mo == 538 || mo == 539 || mo == 544 || mo == 552 || mo == 553) return 0;
    else if(mo == 564 || mo == 568 || mo == 569 || mo == 570 || mo == 571 || mo == 574 || mo == 577 || mo == 581 || mo == 582 || mo == 583 || mo == 584 || mo == 586 || mo == 588 || mo == 589 || mo == 590 || mo == 591 || mo == 592 || mo == 593 || mo == 594 || mo == 595 || mo == 601 || mo == 606 || mo == 607 || mo == 608 || mo == 610 || mo == 611) return 0;
    else if(mo == 400 || mo == 413 || mo == 417 || mo == 418 || mo == 422 || mo == 427 || mo == 428 || mo == 440 || mo == 444 || mo == 478 || mo == 482 || mo == 483 || mo == 489 || mo == 490 || mo == 508 || mo == 548 || mo == 543 || mo == 535 || mo == 554 || mo == 556 || mo == 557 || mo == 561 || mo == 563 || mo == 579 || mo == 580 || mo == 605) return 2;
    else if(mo == 609 || mo == 573 || mo == 578 || mo == 414 || mo == 498 || mo == 499 || mo == 479 || mo == 455 || mo == 456 || mo == 458 || mo == 459) return 3;
    else return 1;
}

CesetBagajIDBul(vehicleid) {
    new bid = BagajKacCesetAlabilir(vehicleid);
    if(bid == 0) return 9999;
    else if(bid == 1) {
        if(VehicleInfo[vehicleid][vCeset][0] == 1) return 9999;
        else return 0;
    } else if(bid == 2) {
        if(VehicleInfo[vehicleid][vCeset][0] == 0) return 0;
        else if(VehicleInfo[vehicleid][vCeset][1] == 0) return 1;
        else return 9999;
    } else if(bid == 3) {
        if(VehicleInfo[vehicleid][vCeset][0] == 0) return 0;
        else if(VehicleInfo[vehicleid][vCeset][1] == 0) return 1;
        else if(VehicleInfo[vehicleid][vCeset][2] == 0) return 2;
        else return 9999;
    } else return 9999;
}

CesetIDBul(playerid) {
    new bulundu = 0, cid;
    for(new i; i < MAX_CESET; i++) {
        if(CesetInfo[i][cExists] == 0) {
            cid = i;
            bulundu = 1;
            break;
        }
    }
    if(bulundu == 0) {
        cid = 0;
        SetPVarInt(playerid, "CesetBulunamadi", 1);
    }
    return cid;
}

CesetOlustur(cesetid) {
    CesetInfo[cesetid][cAktor] = CreateDynamicActor(CesetInfo[cesetid][cSkin], CesetInfo[cesetid][ceX], CesetInfo[cesetid][ceY], CesetInfo[cesetid][ceZ], CesetInfo[cesetid][ceA], 1, 100.0, CesetInfo[cesetid][ceVW], CesetInfo[cesetid][ceInterior], -1);
    ApplyDynamicActorAnimation(CesetInfo[cesetid][cAktor], "WUZI", "CS_Dead_Guy", 4.1, 0, 1, 1, 1, 0);
    new string[100];
    CesetInfo[cesetid][cYaniyor] = 0;
    format(string, sizeof string, "(( %s adlý kullanýcýya ait cesedi görüyorsunuz. [/ceset %d hasarlar] ))", CesetInfo[cesetid][cName], cesetid);
    CesetInfo[cesetid][cNameTag] = CreateDynamic3DTextLabel(string, COLOR_ADMIN, CesetInfo[cesetid][ceX], CesetInfo[cesetid][ceY], CesetInfo[cesetid][ceZ] - 0.5, 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, CesetInfo[cesetid][ceVW], CesetInfo[cesetid][ceInterior], -1);
    return 1;
}

CesetSil(cesetid) {
    if(!CesetInfo[cesetid][cExists]) return 0;
    if(CesetInfo[cesetid][cYaniyor]) {
        CesetInfo[cesetid][cYaniyor] = 0;
        DestroyDynamicObjectEx(CesetInfo[cesetid][cYanginObjesi]);
    }
    DestroyDynamicActor(CesetInfo[cesetid][cAktor]);
    DestroyDynamic3DTextLabelEx(CesetInfo[cesetid][cNameTag]);
    format(CesetInfo[cesetid][cName], MAX_PLAYER_NAME, " ");
    CesetInfo[cesetid][cSkin] = 0;
    for(new i; i < 24; i++)
        CesetInfo[cesetid][cOccupied][i] = -1;
    CesetInfo[cesetid][ceX] = 0.0;
    CesetInfo[cesetid][ceY] = 0.0;
    CesetInfo[cesetid][ceZ] = 0.0;
    CesetInfo[cesetid][ceA] = 0.0;
    CesetInfo[cesetid][ceInterior] = 0;
    CesetInfo[cesetid][ceVW] = 0;
    format(CesetInfo[cesetid][cOlduren], MAX_PLAYER_NAME, " ");
    CesetInfo[cesetid][cBagaj] = 0;
    CesetInfo[cesetid][cExists] = 0;
    return 1;
}

BaslangicTumCesetleriSil() {
    for(new i; i < MAX_CESET; i++) {
        format(CesetInfo[i][cName], MAX_PLAYER_NAME, " ");
        CesetInfo[i][cSkin] = 0;
        CesetInfo[i][ceX] = 0.0;
        CesetInfo[i][ceY] = 0.0;
        CesetInfo[i][ceZ] = 0.0;
        CesetInfo[i][ceA] = 0.0;
        CesetInfo[i][ceInterior] = 0;
        CesetInfo[i][ceVW] = 0;
        format(CesetInfo[i][cOlduren], MAX_PLAYER_NAME, " ");
        CesetInfo[i][cBagaj] = 0;
        CesetInfo[i][cExists] = 0;
        CesetInfo[i][cYaniyor] = 0;
    }
}

forward CesetYereKoy(cesetid); public CesetYereKoy(cesetid) {
    CesetOlustur(cesetid);
    print("olusturdu");
    return 1;
}

TumCesetleriSil()
{
    new count = 0;
    for(new i; i < MAX_CESET; i++)
    {
        if(CesetInfo[i][cExists])
        {
            DestroyDynamicActor(CesetInfo[i][cAktor]);
            DestroyDynamic3DTextLabelEx(CesetInfo[i][cNameTag]);
            format(CesetInfo[i][cName], MAX_PLAYER_NAME, " ");
            CesetInfo[i][cSkin] = 0;
            if(CesetInfo[i][cYaniyor]) {
                CesetInfo[i][cYaniyor] = 0;
                DestroyDynamicObjectEx(CesetInfo[i][cYanginObjesi]);
            }
            CesetInfo[i][ceX] = 0.0;
            CesetInfo[i][ceY] = 0.0;
            CesetInfo[i][ceZ] = 0.0;
            CesetInfo[i][ceA] = 0.0;
            CesetInfo[i][ceInterior] = 0;
            CesetInfo[i][ceVW] = 0;
            format(CesetInfo[i][cOlduren], MAX_PLAYER_NAME, " ");
            CesetInfo[i][cBagaj] = 0;
            CesetInfo[i][cExists] = 0;
            count++;
        }
    }
    return count;
}

/*EnYakinYanginiBul(playerid) {
    new id = -1, Float:dist = 9999.0, Float:dist2;
    foreach(new i: Yanginlar) {
        if(YanginInfo[i][yID] != -1)
        {
            if(IsPlayerInRangeOfPoint(playerid, 8.0, YanginInfo[i][yPosX], YanginInfo[i][yPosY], YanginInfo[i][yPosZ]))
            {
                dist2 = GetPlayerDistanceFromPoint(playerid, YanginInfo[i][yPosX], YanginInfo[i][yPosY], YanginInfo[i][yPosZ]);
                if(dist2 < dist)
                {
                    dist = dist2;
                    id = i;
                }
            }
        }
    }
    return id;
}

YanginOlustur(playerid, Float:hp) {
    if(GetPVarInt(playerid, "YanginEdit") == 1) return HataMesajiC(playerid, "Zaten yangýn oluþturuyorsunuz, lütfen önce kaydedin ya da iptal edin.");
    if(hp < 200 || hp > 3000) return HataMesajiC(playerid, "Yangýn HP'si en düþük 200, en yüksek 3000 olabilir.");
    new id = Iter_Free(Yanginlar);
    YanginInfo[id][yID] = id;
    GetPlayerPos(playerid, YanginInfo[id][yPosX], YanginInfo[id][yPosY], YanginInfo[id][yPosZ]);
    YanginInfo[id][yPosInterior] = GetPlayerInterior(playerid);
    YanginInfo[id][yPosVW] = GetPlayerVirtualWorld(playerid);
    YanginInfo[id][yHP] = hp;
    YanginInfo[id][yMaxHP] = hp;
    YanginInfo[id][yObj] = CreateDynamicObject(YanginObjesiAl(hp), YanginInfo[id][yPosX], YanginInfo[id][yPosY], YanginInfo[id][yPosZ] - 2.0, 0.0, 0.0, 0.0, YanginInfo[id][yPosVW], YanginInfo[id][yPosInterior]);
    new string[100];
    YanginInfo[id][yNameTag] =  CreateDynamic3DTextLabel("200.0/200.0", COLOR_WHITE, YanginInfo[id][yPosX], YanginInfo[id][yPosY], YanginInfo[id][yPosZ], 25.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, YanginInfo[id][yPosVW], YanginInfo[id][yPosInterior]);
    format(string, sizeof string, "%.1f/%.1f", YanginInfo[id][yHP], YanginInfo[id][yMaxHP]);
    UpdateDynamic3DTextLabelText(YanginInfo[id][yNameTag], COLOR_WHITE, string);
    SendClientMessageEx(playerid, COLOR_ADMIN, "Yangýn oluþturuldu.");
    Iter_Add(Yanginlar, id);
    return 1;
}

YanginObjesiAl(Float:hp) {
    new objid;
    if(hp >= 200 && hp < 500) objid = 18688;
    else if(hp >= 500 && hp < 1000) objid = 18692;
    else objid = 18691;
    return objid;
}

YanginSil(yanginid) {
    YanginInfo[yanginid][yID] = -1;
    YanginInfo[yanginid][yPosX] = 0.0;
    YanginInfo[yanginid][yPosY] = 0.0;
    YanginInfo[yanginid][yPosZ] = 0.0;
    YanginInfo[yanginid][yPosInterior] = 0;
    YanginInfo[yanginid][yPosVW] = 0;
    YanginInfo[yanginid][yHP] = 0.0;
    YanginInfo[yanginid][yMaxHP] = 0.0;
    DestroyDynamicObjectEx(YanginInfo[yanginid][yObj]);
    DestroyDynamic3DTextLabelEx(YanginInfo[yanginid][yNameTag]);
    // editleyen oyuncu varsa tespit et ve yanginediti sil
    Iter_Remove(Yanginlar, yanginid);
    return 1;
}

YanginSondur(playerid, yanginid) {
    YanginInfo[yanginid][yID] = -1;
    YanginInfo[yanginid][yPosX] = 0.0;
    YanginInfo[yanginid][yPosY] = 0.0;
    YanginInfo[yanginid][yPosZ] = 0.0;
    YanginInfo[yanginid][yPosInterior] = 0;
    YanginInfo[yanginid][yPosVW] = 0;
    YanginInfo[yanginid][yHP] = 0.0;
    YanginInfo[yanginid][yMaxHP] = 0.0;
    DestroyDynamicObjectEx(YanginInfo[yanginid][yObj]);
    DestroyDynamic3DTextLabelEx(YanginInfo[yanginid][yNameTag]);
    if(GetPVarInt(playerid, "YanginEdit") == 1)
        DeletePVar(playerid, "YanginEdit");
    Iter_Remove(Yanginlar, yanginid);
    PlayerAME(playerid, "alevleri söndürür.");
}

TumYanginlariSil() {
    new count;
    for(new i; i < MAX_YANGIN; i++)
    {
        if(YanginInfo[i][yID] != -1)
        {
            YanginInfo[i][yID] = -1;
            YanginInfo[i][yPosX] = 0.0;
            YanginInfo[i][yPosY] = 0.0;
            YanginInfo[i][yPosZ] = 0.0;
            YanginInfo[i][yPosInterior] = 0;
            YanginInfo[i][yPosVW] = 0;
            YanginInfo[i][yHP] = 0.0;
            YanginInfo[i][yMaxHP] = 0.0;
            DestroyDynamicObjectEx(YanginInfo[i][yObj]);
            DestroyDynamic3DTextLabelEx(YanginInfo[i][yNameTag]);
            Iter_Remove(Yanginlar, i);
            count++;
        }
    }
    return count;
}*/

ReklamEkle(playerid, string[], telno) {
    new id = Iter_Free(Reklamlar);
    if(id != -1) {
        ReklamInfo[id][reklamExists] = 1;
        ReklamInfo[id][reklamID] = id;
        format(ReklamInfo[id][reklamYapan], MAX_PLAYER_NAME, "%s", ReturnRoleplayName(playerid, true));
        format(ReklamInfo[id][reklamText], 124, "%s", string);
        ReklamInfo[id][reklamTelefon] = telno;
        PlayerInfo[playerid][pVerdigiReklam] = id;
        BasariMesaji(playerid, "Reklamýnýz baþarýyla oluþturuldu, helper ve üstü reklamýnýzý onayladýðýnda reklamýnýz yayýnlanacak.");
        SunucuMesajiC(playerid, "Reklamýnýzý iptal etmek isterseniz /reklamiptal komutunu kullanabilirsiniz.");
        SoruYollaHelper(COLOR_SUPPORTER, "Yeni reklam isteði geldi. Gönderen: %s (ID:%d)", ReturnRoleplayName(playerid), playerid);
        SoruYollaHelper(COLOR_SUPPORTER, "Reklam: %s", string);
        SendAworkAlert(true, COLOR_ORANGE,  "[Reklam] Yeni reklam isteði geldi. Gönderen: %s (ID:%d)", ReturnRoleplayName(playerid), playerid);
        SendAworkAlert(true, COLOR_ORANGE, "Reklam: %s", string);
        Iter_Add(Reklamlar, id);
    } else return HataMesajiC(playerid, "Sunucuda maksimum reklam istek sayýsýna ulaþýlmýþ, lütfen bekleyin.");
    return 1;
}

ReklamSil(id) {
    if(ReklamInfo[id][reklamExists]) {
        ReklamInfo[id][reklamExists] = 0;
        ReklamInfo[id][reklamID] = -1;
        format(ReklamInfo[id][reklamYapan], MAX_PLAYER_NAME, "Yok");
        format(ReklamInfo[id][reklamText], 124, "Yok");
        ReklamInfo[id][reklamTelefon] = 0;
        Iter_Remove(Reklamlar, id);
        return 1;
    }
    return 0;
}

ReklamKabul(playerid, id) {
    if(ReklamInfo[id][reklamExists]) {
        new pid;
        foreach(new i: Player) {
            if(!PlayerInfo[i][pLogged])continue;
            if(!strcmp(ReturnRoleplayName(i, true), ReklamInfo[id][reklamYapan], true)) {
                pid = i;
                break;
            }
        }
        PlayerInfo[pid][pVerdigiReklam] = -1;
        BasariMesaji(pid, "Reklamýnýz %s tarafýndan kabul edilmiþ ve yayýnlanmýþtýr.", ReturnRoleplayName(playerid));
        BasariMesaji(playerid, "%s adlý oyuncunun reklamýný kabul ettiniz ve yayýnladýnýz.", ReturnRoleplayName(pid));
        PlayerInfo[playerid][pSoruPuani]++;
        foreach(new j : Player) {
            if(PlayerInfo[j][pReklam])continue;
            SendFormattedMessage(j, COLOR_GREEN, "[Reklam] %s (Ýletiþim: %d)", ReklamInfo[id][reklamText], ReklamInfo[id][reklamTelefon]);
        }
        SendAworkAlert(false, COLOR_ADMIN, "Reklam veren kullanýcý: %s (Telefon: %d)", ReturnRoleplayName(pid), ReklamInfo[id][reklamTelefon]);
        ReklamSil(id);
        return 1;
    } else return HataMesajiC(playerid, "Bu reklam silinmiþ.");
}

ReklamRed(playerid, id, sebep[]) {
    if(ReklamInfo[id][reklamExists]) {
        new pid;
        foreach(new i: Player) {
            if(!PlayerInfo[i][pLogged])continue;
            if(!strcmp(ReturnRoleplayName(i, true), ReklamInfo[id][reklamYapan], true)) {
                pid = i;
                break;
            }
        }
        PlayerInfo[pid][pVerdigiReklam] = -1;
        BasariMesaji(pid, "Reklamýnýz %s tarafýndan reddedilmiþtir. Sebep: %s", ReturnRoleplayName(playerid), sebep);
        BasariMesaji(playerid, "%s adlý oyuncunun reklamýný reddettiniz. Sebep: %s", ReturnRoleplayName(pid), sebep);
        PlayerInfo[playerid][pSoruPuani]++;
        ReklamSil(id);
        return 1;
    } else return HataMesajiC(playerid, "Bu reklam silinmiþ.");
}

// copculuk - rufio
CopKutusuMenuGoster(playerid) { // admine gösterilen menü(oluþturmak için)
    if(PlayerInfo[playerid][pEditingMode]) return HataMesajiC(playerid, "Bir obje düzenlerken bu komutu kullanamazsýn.");
    new objeListesi[] = {1439};
    SunucuMesajiC(playerid, "Menüden oluþturulacak çöp kutusunun modelini seçin.");
    ShowModelSelectionMenuEx(playerid, objeListesi, sizeof(objeListesi), "Cop Kutulari", TCOPKUTUSU, 16.0, 0.0, -55.0);
    return 1;
}

CopKutusuOlustur(playerid, Float:copX, Float:copY, Float:copZ, Float:copRX, Float:copRY, Float:copRZ) {
    new id = Iter_Free(CopKutulari);
    if(id != -1) {
        CopKutusuInfo[id][copExists] = 1;
        CopKutusuInfo[id][copSayisi] = 0;
        CopKutusuInfo[id][copPosX] = copX;
        CopKutusuInfo[id][copPosY] = copY;
        CopKutusuInfo[id][copPosZ] = copZ;
        CopKutusuInfo[id][copPosRX] = copRX;
        CopKutusuInfo[id][copPosRY] = copRY;
        CopKutusuInfo[id][copPosRZ] = copRZ;
        CopKutusuLabelOlustur(id);
        CopKutusuInfo[id][copModel] = GetPVarInt(playerid, "CopKutusuObje");
        DeletePVar(playerid, "CopKutusuObje");
        CopKutusuInfo[id][copObje] = CreateDynamicObject(CopKutusuInfo[id][copModel], CopKutusuInfo[id][copPosX], CopKutusuInfo[id][copPosY], CopKutusuInfo[id][copPosZ], CopKutusuInfo[id][copPosRX], CopKutusuInfo[id][copPosRY], CopKutusuInfo[id][copPosRZ]);
        CopKutusuKaydet(id, true);
        return 1;
    }
    return 0;
}

CopKutusuLabelOlustur(id) {
    if(CopKutusuInfo[id][copSayisi] < 24) {
        format(CopKutusuInfo[id][copLabelText], 256, "[Çöp Konteynýrý]\n{ACACAC}(( Temiz görünüyor. ))\n{FFFFFF}%d/96", CopKutusuInfo[id][copSayisi]);
        CopKutusuInfo[id][copLabel] = CreateDynamic3DTextLabel(CopKutusuInfo[id][copLabelText], COLOR_WHITE, CopKutusuInfo[id][copPosX], CopKutusuInfo[id][copPosY], CopKutusuInfo[id][copPosZ] + 1.0, 5.0);
    }
    else if(CopKutusuInfo[id][copSayisi] < 48) {
        format(CopKutusuInfo[id][copLabelText], 256, "[Çöp Konteynýrý]\n{ACACAC}(( Koku çok az duyuluyor. ))\n{FFFFFF}%d/96", CopKutusuInfo[id][copSayisi]);
        CopKutusuInfo[id][copLabel] = CreateDynamic3DTextLabel(CopKutusuInfo[id][copLabelText], COLOR_WHITE, CopKutusuInfo[id][copPosX], CopKutusuInfo[id][copPosY], CopKutusuInfo[id][copPosZ] + 1.0, 5.0);
    }
    else if(CopKutusuInfo[id][copSayisi] < 72) {
        format(CopKutusuInfo[id][copLabelText], 256, "[Çöp Konteynýrý]\n{ACACAC}(( Belirgin bir çöp kokusu var. ))\n{FFFFFF}%d/96", CopKutusuInfo[id][copSayisi]);
        CopKutusuInfo[id][copLabel] = CreateDynamic3DTextLabel(CopKutusuInfo[id][copLabelText], COLOR_WHITE, CopKutusuInfo[id][copPosX], CopKutusuInfo[id][copPosY], CopKutusuInfo[id][copPosZ] + 1.0, 5.0);
    }
    else if(CopKutusuInfo[id][copSayisi] < 96) {
        format(CopKutusuInfo[id][copLabelText], 256, "[Çöp Konteynýrý]\n{ACACAC}(( Çöpten iðrenç bir koku geliyor. ))\n{FFFFFF}%d/96", CopKutusuInfo[id][copSayisi]);
        CopKutusuInfo[id][copLabel] = CreateDynamic3DTextLabel(CopKutusuInfo[id][copLabelText], COLOR_WHITE, CopKutusuInfo[id][copPosX], CopKutusuInfo[id][copPosY], CopKutusuInfo[id][copPosZ] + 1.0, 5.0);
    } else {
        format(CopKutusuInfo[id][copLabelText], 256, "[Çöp Konteynýrý]\n{ACACAC}(( Çöp leþ gibi kokuyor. ))\n{FFFFFF}%d/96", CopKutusuInfo[id][copSayisi]);
        CopKutusuInfo[id][copLabel] = CreateDynamic3DTextLabel(CopKutusuInfo[id][copLabelText], COLOR_WHITE, CopKutusuInfo[id][copPosX], CopKutusuInfo[id][copPosY], CopKutusuInfo[id][copPosZ] + 1.0, 5.0);
    }
    return 1;
}

CopKutusuLabelDuzenle(id) {
    DestroyDynamic3DTextLabelEx(CopKutusuInfo[id][copLabel]);
    if(CopKutusuInfo[id][copSayisi] < 24) {
        format(CopKutusuInfo[id][copLabelText], 256, "[Çöp Konteynýrý]\n{ACACAC}(( Temiz görünüyor. ))\n{FFFFFF}%d/96", CopKutusuInfo[id][copSayisi]);
        CopKutusuInfo[id][copLabel] = CreateDynamic3DTextLabel(CopKutusuInfo[id][copLabelText], COLOR_WHITE, CopKutusuInfo[id][copPosX], CopKutusuInfo[id][copPosY], CopKutusuInfo[id][copPosZ] + 1.0, 5.0);
    }
    else if(CopKutusuInfo[id][copSayisi] < 48) {
        format(CopKutusuInfo[id][copLabelText], 256, "[Çöp Konteynýrý]\n{ACACAC}(( Koku çok az duyuluyor. ))\n{FFFFFF}%d/96", CopKutusuInfo[id][copSayisi]);
        CopKutusuInfo[id][copLabel] = CreateDynamic3DTextLabel(CopKutusuInfo[id][copLabelText], COLOR_WHITE, CopKutusuInfo[id][copPosX], CopKutusuInfo[id][copPosY], CopKutusuInfo[id][copPosZ] + 1.0, 5.0);
    }
    else if(CopKutusuInfo[id][copSayisi] < 72) {
        format(CopKutusuInfo[id][copLabelText], 256, "[Çöp Konteynýrý]\n{ACACAC}(( Belirgin bir çöp kokusu var. ))\n{FFFFFF}%d/96", CopKutusuInfo[id][copSayisi]);
        CopKutusuInfo[id][copLabel] = CreateDynamic3DTextLabel(CopKutusuInfo[id][copLabelText], COLOR_WHITE, CopKutusuInfo[id][copPosX], CopKutusuInfo[id][copPosY], CopKutusuInfo[id][copPosZ] + 1.0, 5.0);
    }
    else if(CopKutusuInfo[id][copSayisi] < 96) {
        format(CopKutusuInfo[id][copLabelText], 256, "[Çöp Konteynýrý]\n{ACACAC}(( Çöpten iðrenç bir koku geliyor. ))\n{FFFFFF}%d/96", CopKutusuInfo[id][copSayisi]);
        CopKutusuInfo[id][copLabel] = CreateDynamic3DTextLabel(CopKutusuInfo[id][copLabelText], COLOR_WHITE, CopKutusuInfo[id][copPosX], CopKutusuInfo[id][copPosY], CopKutusuInfo[id][copPosZ] + 1.0, 5.0);
    } else {
        format(CopKutusuInfo[id][copLabelText], 256, "[Çöp Konteynýrý]\n{ACACAC}(( Çöp leþ gibi kokuyor. ))\n{FFFFFF}%d/96", CopKutusuInfo[id][copSayisi]);
        CopKutusuInfo[id][copLabel] = CreateDynamic3DTextLabel(CopKutusuInfo[id][copLabelText], COLOR_WHITE, CopKutusuInfo[id][copPosX], CopKutusuInfo[id][copPosY], CopKutusuInfo[id][copPosZ] + 1.0, 5.0);
    }
    return 1;
}

CopKutusuCopAl(id) {
    if(CopKutusuInfo[id][copExists] && CopKutusuInfo[id][copSayisi] > 0) {
        CopKutusuInfo[id][copSayisi]--;
        CopKutusuLabelDuzenle(id);
        return 1;
    }
    return 0;
}

CopKutusuCopVer(id) {
    if(CopKutusuInfo[id][copExists] && CopKutusuInfo[id][copSayisi] < MAX_COP) {
        CopKutusuInfo[id][copSayisi] += 2;
        CopKutusuLabelDuzenle(id);
        return 1;
    }
    return 0;
}

CopKutusuKaydet(id, bool:yeni = false) {
    if(yeni) {
        mysql_format(ourConnection, queryx, sizeof queryx, "INSERT INTO copkutulari (`copSayisi`) VALUES ('%d')", CopKutusuInfo[id][copSayisi]);
        new Cache:veri = mysql_query(ourConnection, queryx, true);
        CopKutusuInfo[id][copID] = cache_insert_id();
        cache_delete(veri);
        CopKutusuKaydet(id);
        Iter_Add(CopKutulari, id);
    } else {
        mysql_format(ourConnection, queryx, sizeof queryx, "UPDATE copkutulari SET copSayisi = '%d', copPosX = '%f', copPosY = '%f', copPosZ = '%f', copPosRX = '%f', copPosRY = '%f', copPosRZ = '%f', copLabelText = '%e', copModel = '%d' WHERE id = '%d'",
        CopKutusuInfo[id][copSayisi], CopKutusuInfo[id][copPosX], CopKutusuInfo[id][copPosY], CopKutusuInfo[id][copPosZ], CopKutusuInfo[id][copPosRX], CopKutusuInfo[id][copPosRY], CopKutusuInfo[id][copPosRZ], CopKutusuInfo[id][copLabelText], CopKutusuInfo[id][copModel], CopKutusuInfo[id][copID]);
        mysql_tquery(ourConnection, queryx);
    }
    return 1;
}

forward CopKutusuYukle(); public CopKutusuYukle() {
    new rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);

    if(!rows)return 1;

    for(new f; f < rows; f++)
    {
        new id = Iter_Free(CopKutulari);
        CopKutusuInfo[id][copExists] = 1;
        cache_get_value_int(f, "id", CopKutusuInfo[id][copID]);
        cache_get_value_int(f, "copSayisi", CopKutusuInfo[id][copSayisi]);
        cache_get_value_float(f, "copPosX", CopKutusuInfo[id][copPosX]);
        cache_get_value_float(f, "copPosY", CopKutusuInfo[id][copPosY]);
        cache_get_value_float(f, "copPosZ", CopKutusuInfo[id][copPosZ]);
        cache_get_value_float(f, "copPosRX", CopKutusuInfo[id][copPosRX]);
        cache_get_value_float(f, "copPosRY", CopKutusuInfo[id][copPosRY]);
        cache_get_value_float(f, "copPosRZ", CopKutusuInfo[id][copPosRZ]);
        cache_get_value(f, "copLabelText", CopKutusuInfo[id][copLabelText], 256);
        cache_get_value_int(f, "copModel", CopKutusuInfo[id][copModel]);
        CopKutusuInfo[id][copObje] = CreateDynamicObject(CopKutusuInfo[id][copModel], CopKutusuInfo[id][copPosX], CopKutusuInfo[id][copPosY], CopKutusuInfo[id][copPosZ], CopKutusuInfo[id][copPosRX], CopKutusuInfo[id][copPosRY], CopKutusuInfo[id][copPosRZ]);
        Iter_Add(CopKutulari, id);
        CopKutusuLabelOlustur(id);
    }
    printf("Sunucu: Cop kutulari yuklendi+");
    return 1;
}

TumCopKutulariniSil() {
    new count = 0;
    for(new i; i < MAX_COPKUTUSU; i++) {
        if(CopKutusuInfo[i][copExists]) {
            CopKutusuSil(i);
            count++;
        }
    }
    return count;
}

CopKutusuSil(id) {
    if(CopKutusuInfo[id][copExists]) {
        DestroyDynamic3DTextLabelEx(CopKutusuInfo[id][copLabel]);
        CopKutusuInfo[id][copSayisi] = 0;
        CopKutusuInfo[id][copPosX] = 0.0;
        CopKutusuInfo[id][copPosY] = 0.0;
        CopKutusuInfo[id][copPosZ] = 0.0;
        CopKutusuInfo[id][copPosRX] = 0.0;
        CopKutusuInfo[id][copPosRY] = 0.0;
        CopKutusuInfo[id][copPosRZ] = 0.0;
        DestroyDynamicObjectEx(CopKutusuInfo[id][copObje]);
        CopKutusuInfo[id][copModel] = 0;
        mysql_format(ourConnection, queryx, sizeof queryx, "DELETE FROM copkutulari WHERE id = '%d'", CopKutusuInfo[id][copID]);
        mysql_tquery(ourConnection, queryx);
        CopKutusuInfo[id][copID] = -1;
        Iter_Remove(CopKutulari, id);
        return 1;
    }
    return 0;
}

YakindakiCopKutusunuBul(playerid, Float:range = 3.0) {
    new id = -1;
    for(new i; i < MAX_COPKUTUSU; i++) if(CopKutusuInfo[i][copExists]) {
        if(IsPlayerInRangeOfPoint(playerid, range, CopKutusuInfo[i][copPosX], CopKutusuInfo[i][copPosY], CopKutusuInfo[i][copPosZ])) {
            id = i;
            break;
        }
    }
    return id;
}

// ÇALINTI ARAÇ SÝSTEMÝ
CalintiIDBul() {
    if(calintiSayisi >= MAX_CALINTI-1) {
        CalintiSil(0, true);
        calintiSayisi = 0;
    } else {
        if(CalintiInfo[calintiSayisi][caExists]) {
            CalintiSil(calintiSayisi, true);
        }
    }
    return calintiSayisi;
}

CalintiSil(id, bool:idgeliyor = false) {
    if(CalintiInfo[id][caExists]) {
        mysql_format(ourConnection, queryx, sizeof queryx, "DELETE FROM calintilar WHERE id = '%d'", CalintiInfo[id][caID]);
        mysql_tquery(ourConnection, queryx);
        CalintiInfo[id][caExists] = 0;
        CalintiInfo[id][caID] = -1;
        CalintiInfo[id][caYonlenenEkipSayisi] = 0;
        foreach(new i: Ekipler) if(EkipBilgi[i][eKullanim] && EkipBilgi[i][eCalintiGidiyor] == id) {
            EkipBilgi[i][eCalintiGidiyor] = -1;
        }
        if(!idgeliyor)
            calintiSayisi--;
        Iter_Remove(Calintilar, id);
    }
    return 1;
}

CalintiKaydet(id, yeni = 0) {
    if(yeni) {
        mysql_format(ourConnection, queryx, sizeof queryx, "INSERT INTO calintilar (`caPlaka`, `caTarih`) VALUES ('%e', NOW())", CalintiInfo[id][caPlaka]);
        new Cache:veri = mysql_query(ourConnection, queryx, true);
        CalintiInfo[id][caID] = cache_insert_id();
        cache_delete(veri);
        calintiSayisi++;
        CalintiKaydet(id);
    } else {
        mysql_format(ourConnection, queryx, sizeof queryx, "UPDATE calintilar SET caPlaka = '%e', caCozuldu = '%d', caKonum = '%e', caPosX = '%f', caPosZ = '%f', caPosY = '%f', caModel = '%e'  WHERE id = '%d'",
        CalintiInfo[id][caPlaka], CalintiInfo[id][caCozuldu], CalintiInfo[id][caKonum], CalintiInfo[id][caPosX], CalintiInfo[id][caPosZ], CalintiInfo[id][caPosY], CalintiInfo[id][caModel], CalintiInfo[id][caID]);
        mysql_tquery(ourConnection, queryx);
    }
    return 1;
}

CalintiGoster(playerid) {
    new calintiString[2048], calintiVar;
    foreach(new i: Calintilar) {
        if(CalintiInfo[i][caExists]) {
            calintiVar = 1;
            if(CalintiInfo[i][caCozuldu]) {
                format(calintiString, sizeof calintiString, "%s{367fd1}%s\t{099a00}%s\t{367fd1}%d\n", calintiString, CalintiInfo[i][caModel], CalintiInfo[i][caPlaka], CalintiInfo[i][caID]);
            }
            else {
                format(calintiString, sizeof calintiString, "%s{367fd1}%s\t{ff0000}%s\t{367fd1}%d\n", calintiString, CalintiInfo[i][caModel], CalintiInfo[i][caPlaka], CalintiInfo[i][caID]);
            }
        }
    }
    if(calintiVar) {
        Dialog_Show(playerid, DialogCalintiGoster, DIALOG_STYLE_TABLIST_HEADERS, "{FFFFFF}Son 20 Çalýntý Araç Listesi", "{b7c4d3}Aracýn Modeli\t{b7c4d3}Araç Plakasý\t{b7c4d3}Ýhbar Numarasý\n%s", "Ayrýntýlar", "<< Geri", calintiString);
        if(!PlayerInfo[playerid][pIhbarUyariAldi])
            SunucuMesajiC(playerid, "Yeþil renkli ihbarlar çözülmüþ ihbarlar, kýrmýzý renkli ihbarlar ise çözülmemiþ ihbarlardýr.");
    }
    else
        Dialog_Show(playerid, DialogCalintiGosterHata, DIALOG_STYLE_MSGBOX, "Son 20 Çalýntý Araç Listesi", "{FFFFFF}Gösterilebilecek bir çalýntý araç ihbarý bulunmamaktadýr.", "Tamam", "");
    return 1;
}

CalintiYukle(); public CalintiYukle() {
    new rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);

    if(!rows)return 1;

    for(new f; f < rows; f++)
    {
        new id = CalintiIDBul();
        calintiSayisi++;
        CalintiInfo[id][caExists] = 1;
        cache_get_value_int(f, "id", CalintiInfo[id][caID]);
        cache_get_value(f, "caPlaka", CalintiInfo[id][caPlaka], 13);
        cache_get_value(f, "caTarih", CalintiInfo[id][caTarih], 20);
        cache_get_value_int(f, "caCozuldu", CalintiInfo[id][caCozuldu]);
        cache_get_value(f, "caKonum", CalintiInfo[id][caKonum], 30);
        cache_get_value_float(f, "caPosX", CalintiInfo[id][caPosX]);
        cache_get_value_float(f, "caPosY", CalintiInfo[id][caPosY]);
        cache_get_value_float(f, "caPosZ", CalintiInfo[id][caPosZ]);
        cache_get_value(f, "caModel", CalintiInfo[id][caModel], 64);
        Iter_Add(Calintilar, id);
    }
    print("Sunucu: Araç Calintilar yuklendi+");
    return 1;
}

// ÇALINTI ARAÇ SON

// ÝHBAR SÝSTEMÝ
IhbarIDBul() {
    if(ihbarSayisi >= MAX_IHBAR-1) {
        IhbarSil(0, true);
        ihbarSayisi = 0;
    } else {
        if(IhbarInfo[ihbarSayisi][ihbarExists]) {
            IhbarSil(ihbarSayisi, true);
        }
    }
    return ihbarSayisi;
}

IhbarSil(id, bool:idgeliyor = false) {
    if(IhbarInfo[id][ihbarExists]) {
        mysql_format(ourConnection, queryx, sizeof queryx, "DELETE FROM ihbarlar WHERE id = '%d'", IhbarInfo[id][ihbarID]);
        mysql_tquery(ourConnection, queryx);
        IhbarInfo[id][ihbarExists] = 0;
        IhbarInfo[id][ihbarID] = -1;
        IhbarInfo[id][ihbarYonlenenEkipSayisi] = 0;
        foreach(new i: Ekipler) if(EkipBilgi[i][eKullanim] && EkipBilgi[i][eIhbaraGidiyor] == id) {
            EkipBilgi[i][eIhbaraGidiyor] = -1;
        }
        if(!idgeliyor)
            ihbarSayisi--;
        Iter_Remove(Ihbarlar, id);
    }
    return 1;
}

IhbarKaydet(id, yeni = 0) {
    if(yeni) {
        mysql_format(ourConnection, queryx, sizeof queryx, "INSERT INTO ihbarlar (`ihbarYapan`, `ihbarTarihi`) VALUES ('%e', NOW())", IhbarInfo[id][ihbarYapan]);
        new Cache:veri = mysql_query(ourConnection, queryx, true);
        IhbarInfo[id][ihbarID] = cache_insert_id();
        cache_delete(veri);
        mysql_format(ourConnection, queryx, sizeof queryx, "SELECT ihbarTarihi FROM ihbarlar WHERE id = '%d'", IhbarInfo[id][ihbarID]);
        veri = mysql_query(ourConnection, queryx, true);
        cache_get_value_int(0, "ihbarTarihi", IhbarInfo[id][ihbarTarihi]);
        cache_delete(veri);
        ihbarSayisi++;
        IhbarKaydet(id);
    } else {
        mysql_format(ourConnection, queryx, sizeof queryx, "UPDATE ihbarlar SET ihbarYapan = '%e', ihbarAsilKonum = '%e', ihbarIcerigi = '%e', ihbarTarifKonum = '%e', ihbarCozuldu = '%d', ihbarNumara = '%d' WHERE id = '%d'",
        IhbarInfo[id][ihbarYapan], IhbarInfo[id][ihbarAsilKonum], IhbarInfo[id][ihbarIcerigi], IhbarInfo[id][ihbarTarifKonum], IhbarInfo[id][ihbarCozuldu], IhbarInfo[id][ihbarNumara], IhbarInfo[id][ihbarID]);
        mysql_tquery(ourConnection, queryx);
    }
    return 1;
}

IhbarGoster(playerid) {
    new ihbarString[2048], ihbarVar;
    foreach(new i: Ihbarlar) {
        if(IhbarInfo[i][ihbarExists]) {
            ihbarVar = 1;
            if(IhbarInfo[i][ihbarCozuldu]) {
                format(ihbarString, sizeof ihbarString, "%s{099a00}%s\t{367fd1}%d\n", ihbarString, IhbarInfo[i][ihbarIcerigi], IhbarInfo[i][ihbarID]);
            }
            else {
                format(ihbarString, sizeof ihbarString, "%s{ff0000}%s\t{367fd1}%d\n", ihbarString, IhbarInfo[i][ihbarIcerigi], IhbarInfo[i][ihbarID]);
            }
        }
    }
    if(ihbarVar) {
        Dialog_Show(playerid, DialogIhbarGoster, DIALOG_STYLE_TABLIST_HEADERS, "Son 12 Ýhbar Listesi", "{b7c4d3}Ýhbar Ýçeriði\tÝhbar ID\n%s", "Ayrýntýlar", "<< Geri", ihbarString);
        if(!PlayerInfo[playerid][pIhbarUyariAldi])
            SunucuMesajiC(playerid, "Yeþil renkli ihbarlar çözülmüþ ihbarlar, kýrmýzý renkli ihbarlar ise çözülmemiþ ihbarlardýr.");
    }
    else
        Dialog_Show(playerid, DialogIhbarGosterHata, DIALOG_STYLE_MSGBOX, "Son 12 Ýhbar Listesi", "{FFFFFF}Gösterilebilecek bir ihbar bulunmamaktadýr.", "Tamam", "");
    return 1;
}

IhbarYukle(); public IhbarYukle() {
    new rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);

    if(!rows)return 1;

    for(new f; f < rows; f++)
    {
        new id = IhbarIDBul();
        ihbarSayisi++;
        IhbarInfo[id][ihbarExists] = 1;
        cache_get_value_int(f, "id", IhbarInfo[id][ihbarID]);
        cache_get_value(f, "ihbarYapan", IhbarInfo[id][ihbarYapan], 24);
        cache_get_value(f, "ihbarTarihi", IhbarInfo[id][ihbarTarihi], 24);
        cache_get_value(f, "ihbarAsilKonum", IhbarInfo[id][ihbarAsilKonum], MAX_ZONE_NAME);
        cache_get_value(f, "ihbarIcerigi", IhbarInfo[id][ihbarIcerigi], 128);
        cache_get_value(f, "ihbarTarifKonum", IhbarInfo[id][ihbarTarifKonum], 128);
        cache_get_value_int(f, "ihbarCozuldu", IhbarInfo[id][ihbarCozuldu]);
        cache_get_value_int(f, "ihbarNumara", IhbarInfo[id][ihbarNumara]);
        Iter_Add(Ihbarlar, id);
    }
    print("Sunucu: Ýhbarlar yuklendi+");
    return 1;
}

// ÝHBAR SÝSTEMÝ SON


ATMOlustur(playerid)
{
    if(GetPVarInt(playerid, "ATMOlusturuyor"))
    {
        new id = Iter_Free(ATMler);
        Iter_Add(ATMler, id);
        ATMInfo[id][atmID] = id;
        ATMInfo[id][atmExists] = 1;
        GetPlayerPos(playerid, ATMInfo[id][atmX], ATMInfo[id][atmY], ATMInfo[id][atmZ]);
        GetPlayerFacingAngle(playerid, ATMInfo[id][atmRZ]);
        ATMInfo[id][atmX] += 2.0;
        ATMInfo[id][atmInterior] = GetPlayerInterior(playerid);
        ATMInfo[id][atmVW] = GetPlayerVirtualWorld(playerid);
        ATMInfo[id][atmRX] = 0.0;
        ATMInfo[id][atmRY] = 0.0;
        ATMInfo[id][atmObjeli] = 1;
        ATMInfo[id][atmObjeID] = CreateDynamicObject(19324, ATMInfo[id][atmX], ATMInfo[id][atmY], ATMInfo[id][atmZ], ATMInfo[id][atmRX], ATMInfo[id][atmRY], ATMInfo[id][atmRZ], ATMInfo[id][atmVW], ATMInfo[id][atmInterior]);
        SunucuMesajiC(playerid, "ATM yaratýldý, disk ikonuna basýp posu kaydedebilir ya da ESC ile düzenlemeyi iptal edebilirsin.");
        SetPVarInt(playerid, "ATMID", id);
        EditDynamicObject(playerid, ATMInfo[id][atmObjeID]);
    } else {
        new id = Iter_Free(ATMler);
        Iter_Add(ATMler, id);
        ATMInfo[id][atmID] = id;
        ATMInfo[id][atmExists] = 1;
        GetPlayerPos(playerid, ATMInfo[id][atmX], ATMInfo[id][atmY], ATMInfo[id][atmZ]);
        GetPlayerPos(playerid, ATMInfo[id][atmPickupX], ATMInfo[id][atmPickupY], ATMInfo[id][atmPickupZ]);
        GetPlayerFacingAngle(playerid, ATMInfo[id][atmRZ]);
        ATMInfo[id][atmInterior] = GetPlayerInterior(playerid);
        ATMInfo[id][atmVW] = GetPlayerVirtualWorld(playerid);
        ATMInfo[id][atmRX] = 0.0;
        ATMInfo[id][atmRY] = 0.0;
        ATMInfo[id][atmObjeli] = 0;
        ATMInfo[id][atmPickupID] = Pickup_Create(ELEMENT_ATM, id, 1274, 1, ATMInfo[id][atmPickupX], ATMInfo[id][atmPickupY], ATMInfo[id][atmPickupZ], ATMInfo[id][atmVW], ATMInfo[id][atmInterior]);
        SunucuMesajiC(playerid, "ATM oluþturuldu ve kaydedildi, eðer silmek istiyorsanýz /atmsil komutunu kullanýn.");
        atmyarat(id);
    }
    return 1;
}

ATMSil(id) {
    // new query[256];
    if(ATMInfo[id][atmExists]) {
        if(ATMInfo[id][atmObjeli]) {
            mysql_format(ourConnection, queryx, sizeof(queryx), "DELETE FROM atmler WHERE id = %i", ATMInfo[id][atmID]);
            mysql_tquery(ourConnection, queryx);
            ATMInfo[id][atmID] = -1;
            ATMInfo[id][atmExists] = 0;
            DestroyDynamicObjectEx(ATMInfo[id][atmObjeID]);
            Pickup_Destroy(ATMInfo[id][atmPickupID]);
            ATMInfo[id][atmX] = 0.0;
            ATMInfo[id][atmY] = 0.0;
            ATMInfo[id][atmZ] = 0.0;
            ATMInfo[id][atmRX] = 0.0;
            ATMInfo[id][atmRY] = 0.0;
            ATMInfo[id][atmRZ] = 0.0;
            ATMInfo[id][atmInterior] = 0;
            ATMInfo[id][atmVW] = 0;
            ATMInfo[id][atmPickupX] = 0.0;
            ATMInfo[id][atmPickupY] = 0.0;
            ATMInfo[id][atmPickupZ] = 0.0;
            ATMInfo[id][atmObjeli] = 0;
            Iter_Remove(ATMler, id);
        } else {
            mysql_format(ourConnection, queryx, sizeof(queryx), "DELETE FROM atmler WHERE id = %i", ATMInfo[id][atmID]);
            mysql_tquery(ourConnection, queryx);
            ATMInfo[id][atmID] = -1;
            ATMInfo[id][atmExists] = 0;
            Pickup_Destroy(ATMInfo[id][atmPickupID]);
            ATMInfo[id][atmX] = 0.0;
            ATMInfo[id][atmY] = 0.0;
            ATMInfo[id][atmZ] = 0.0;
            ATMInfo[id][atmRX] = 0.0;
            ATMInfo[id][atmRY] = 0.0;
            ATMInfo[id][atmRZ] = 0.0;
            ATMInfo[id][atmInterior] = 0;
            ATMInfo[id][atmVW] = 0;
            ATMInfo[id][atmPickupX] = 0.0;
            ATMInfo[id][atmPickupY] = 0.0;
            ATMInfo[id][atmPickupZ] = 0.0;
            ATMInfo[id][atmObjeli] = 0;
            Iter_Remove(ATMler, id);
        }
    } else return 0;
    return 1;
}

TumATMleriSil() {
    new count;
    for(new id; id < MAX_ATM; id++)
    {
        if(ATMInfo[id][atmExists]) {
            if(ATMInfo[id][atmObjeli]) {
                ATMInfo[id][atmID] = -1;
                ATMInfo[id][atmExists] = 0;
                DestroyDynamicObjectEx(ATMInfo[id][atmObjeID]);
                Pickup_Destroy(ATMInfo[id][atmPickupID]);
                ATMInfo[id][atmX] = 0.0;
                ATMInfo[id][atmY] = 0.0;
                ATMInfo[id][atmZ] = 0.0;
                ATMInfo[id][atmRX] = 0.0;
                ATMInfo[id][atmRY] = 0.0;
                ATMInfo[id][atmRZ] = 0.0;
                ATMInfo[id][atmInterior] = 0;
                ATMInfo[id][atmVW] = 0;
                ATMInfo[id][atmPickupX] = 0.0;
                ATMInfo[id][atmPickupY] = 0.0;
                ATMInfo[id][atmPickupZ] = 0.0;
                ATMInfo[id][atmObjeli] = 0;
                Iter_Remove(ATMler, id);
            } else {
                ATMInfo[id][atmID] = -1;
                ATMInfo[id][atmExists] = 0;
                Pickup_Destroy(ATMInfo[id][atmPickupID]);
                ATMInfo[id][atmX] = 0.0;
                ATMInfo[id][atmY] = 0.0;
                ATMInfo[id][atmZ] = 0.0;
                ATMInfo[id][atmRX] = 0.0;
                ATMInfo[id][atmRY] = 0.0;
                ATMInfo[id][atmRZ] = 0.0;
                ATMInfo[id][atmInterior] = 0;
                ATMInfo[id][atmVW] = 0;
                ATMInfo[id][atmPickupX] = 0.0;
                ATMInfo[id][atmPickupY] = 0.0;
                ATMInfo[id][atmPickupZ] = 0.0;
                ATMInfo[id][atmObjeli] = 0;
                Iter_Remove(ATMler, id);
            }
            count++;
        }
    }
    return count;
}

YakindakiATMBul(playerid) {
    new found = -1;
    foreach(new i: ATMler)
    {
        if(ATMInfo[i][atmExists])
        {
            if(IsPlayerInRangeOfPoint(playerid, 3.0, ATMInfo[i][atmPickupX], ATMInfo[i][atmPickupY], ATMInfo[i][atmPickupZ]))  {
                found = i;
                break;
            }
        }
    }
    return found;
}

ATMGoster(playerid) {
    new id = YakindakiATMBul(playerid);
    if(id != -1) {
        new string[300];
        format(string, sizeof string, "Bireysel Hesap\t{00cc00}$%d\nMaaþ Hesabý\t{00cc00}$%d\nPara yatýr\tKiþisel hesabýnýza para yatýrýn.\nPara çek\tKiþisel hesabýnýzdan para çekin.\nMaaþ Çek\tMaaþ hesabýnýzdan para çekin.\nPara Transferi\tYüzde 10'luk bir kesinti ile kiþisel hesabýnýzdan para transferi yapýn.", PlayerInfo[playerid][pCashBank], PlayerInfo[playerid][pPaycheck]);
        Dialog_Show(playerid, DialogATM, DIALOG_STYLE_TABLIST_HEADERS, "ATM", "Seçenek\tAçýklama\n%s", "Seç", "Ýptal", string);
    } else return 0;
    return 1;
}

LoadSirket(); public LoadSirket()
{
    static rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);

    if(!rows)return 1;

    for(new j; j < rows; j++)
    {
        cache_get_value_int(j, "id", tsInfo[j][sid]);
        cache_get_value(j, "name", tsInfo[j][sname], 64);
        cache_get_value_float(j, "x", tsInfo[j][sX]);
        cache_get_value_float(j, "y", tsInfo[j][sY]);
        cache_get_value_float(j, "z", tsInfo[j][sZ]);
        cache_get_value_int(j, "durum", tsInfo[j][sd]);

        Iter_Add(Sirketler, j);
    }
    print("Sunucu: Sirketler yuklendi+artik caylar sirketten");
    return 1;
}

SirketOlustur(playerid)
{
    new id = Iter_Free(Sirketler);
    Iter_Add(Sirketler, id);
    tsInfo[id][sid] = id;
    new gsirketadi[32];
    GetPVarString(playerid, "xsirketadi", gsirketadi, sizeof(gsirketadi));
    format(tsInfo[id][sname], 32, gsirketadi);
    GetPlayerPos(playerid, tsInfo[id][sX], tsInfo[id][sY], tsInfo[id][sZ]);
    new sdurum = GetPVarInt(playerid, "xsirketdurum");
    tsInfo[id][sd] = sdurum;

    mysql_format(ourConnection, queryx, sizeof(queryx), "INSERT INTO sirket (name, x, y, z, durum) VALUES ('%e', '%f', '%f', '%f', '%d')",
    tsInfo[id][sname],
    tsInfo[id][sX],
    tsInfo[id][sY],
    tsInfo[id][sZ],
    tsInfo[id][sd]);
    mysql_tquery(ourConnection, queryx, "OnQueryFinished", "dd", id, THREAD_CREATE_SIRKET);

    printf("%d nolu %s adli sirket olusturuldu.", id, gsirketadi);
    DeletePVar(playerid, "xsirketadi");
    DeletePVar(playerid, "xsirketdurum");
    return id;
}

SirketKaydet(id)
{
    mysql_format(ourConnection, queryx, sizeof(queryx), "UPDATE sirket SET name = '%e', x = '%f', y = '%f', z = '%f', durum = '%d' WHERE id = '%d' ",
    tsInfo[id][sname],
    tsInfo[id][sX],
    tsInfo[id][sY],
    tsInfo[id][sZ],
    tsInfo[id][sd],
    tsInfo[id][sid]);
    mysql_tquery(ourConnection, queryx);
    printf("%d nolu sirket duzenlendi", id);
    return 1;
}

SirketSil(id) {
    if(tsInfo[id][sid] != -1)
    {
        mysql_format(ourConnection, queryx, sizeof(queryx), "DELETE FROM sirket WHERE id = '%i'", id);
        mysql_tquery(ourConnection, queryx);

        tsInfo[id][sid] = -1;
        format(tsInfo[id][sname], 64, "null");
        tsInfo[id][sX] = 0.0;
        tsInfo[id][sY] = 0.0;
        tsInfo[id][sZ] = 0.0;
        tsInfo[id][sd] = -1;

        Iter_Remove(Sirketler, id);
    }
    return 1;
}

DolapOlustur(playerid, factionid)
{
    new id = Iter_Free(Dolaplar);
    Iter_Add(Dolaplar, id);
    
    DolapInfo[id][doID] = id;
    DolapInfo[id][doFaction] = factionid;
    GetPlayerPos(playerid, DolapInfo[id][doX], DolapInfo[id][doY], DolapInfo[id][doZ]);
    DolapInfo[id][doINT] = GetPlayerInterior(playerid);
    DolapInfo[id][doVW] = GetPlayerVirtualWorld(playerid);
    
    if(Faction_GetType(factionid) == POLICE)
        DolapInfo[id][doLabel] = CreateDynamic3DTextLabel("{0099ff}LSPD Ekipman Dolabý\n{FFFFFF}Ýçinden ekipman almak için /ekipman yazýn.", COLOR_WHITE, DolapInfo[id][doX], DolapInfo[id][doY], DolapInfo[id][doZ], 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, DolapInfo[id][doVW], DolapInfo[id][doINT]);

    else if(Faction_GetType(factionid) == MEDICAL)
        DolapInfo[id][doLabel] = CreateDynamic3DTextLabel("{ff3300}LSFD Ekipman Dolabý\n{FFFFFF}Ýçinden ekipman almak için /ekipman yazýn.", COLOR_WHITE, DolapInfo[id][doX], DolapInfo[id][doY], DolapInfo[id][doZ], 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, DolapInfo[id][doVW], DolapInfo[id][doINT]);

    else if(Faction_GetType(factionid) == GOVERNMENT)
        DolapInfo[id][doLabel] = CreateDynamic3DTextLabel("{afafaf}LSCH Ekipman Dolabý\n{FFFFFF}Ýçinden ekipman almak için /ekipman yazýn.", COLOR_WHITE, DolapInfo[id][doX], DolapInfo[id][doY], DolapInfo[id][doZ], 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, DolapInfo[id][doVW], DolapInfo[id][doINT]);

    else if(Faction_GetType(factionid) == LSNN)
        DolapInfo[id][doLabel] = CreateDynamic3DTextLabel("{0095c4}Kanal Ekipman Dolabý\n{FFFFFF}Ýçinden ekipman almak için /ekipman yazýn.", COLOR_WHITE, DolapInfo[id][doX], DolapInfo[id][doY], DolapInfo[id][doZ], 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, DolapInfo[id][doVW], DolapInfo[id][doINT]);

    DolapInfo[id][doPickup] = Pickup_Create(ELEMENT_DOLAP, id, 1275, 1, DolapInfo[id][doX], DolapInfo[id][doY], DolapInfo[id][doZ], DolapInfo[id][doVW], DolapInfo[id][doINT]);

    mysql_format(ourConnection, queryx, sizeof(queryx), "INSERT INTO dolap (faction, x, y ,z, interior, vw) VALUES ('%d', '%f', '%f', '%f', '%d', '%d')",

    DolapInfo[id][doFaction],
    DolapInfo[id][doX],
    DolapInfo[id][doY],
    DolapInfo[id][doZ],
    DolapInfo[id][doINT],
    DolapInfo[id][doVW]);

    mysql_tquery(ourConnection, queryx, "OnQueryFinished", "dd", id, THREAD_CREATE_DOLAP);

    DolapKaydet(id);
    return id;
}

LoadDolap(); public LoadDolap()
{
    static rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);

    if(!rows)return 1;

    for(new j; j < rows; j++)
    {
        cache_get_value_int(j, "id", DolapInfo[j][doID]);
        cache_get_value_int(j, "faction", DolapInfo[j][doFaction]);
        cache_get_value_float(j, "x", DolapInfo[j][doX]);
        cache_get_value_float(j, "y", DolapInfo[j][doY]);
        cache_get_value_float(j, "z", DolapInfo[j][doZ]);
        cache_get_value_int(j, "interior", DolapInfo[j][doINT]);
        cache_get_value_int(j, "vw", DolapInfo[j][doVW]);

        if(Faction_GetType(DolapInfo[j][doFaction]) == POLICE)
            DolapInfo[j][doLabel] = CreateDynamic3DTextLabel("{0099ff}LSPD Ekipman Dolabý\n{FFFFFF}Ýçinden ekipman almak için /ekipman yazýn.", COLOR_WHITE, DolapInfo[j][doX], DolapInfo[j][doY], DolapInfo[j][doZ], 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, DolapInfo[j][doVW], DolapInfo[j][doINT]);

        else if(Faction_GetType(DolapInfo[j][doFaction]) == MEDICAL)
            DolapInfo[j][doLabel] = CreateDynamic3DTextLabel("{ff3300}LSFD Ekipman Dolabý\n{FFFFFF}Ýçinden ekipman almak için /ekipman yazýn.", COLOR_WHITE, DolapInfo[j][doX], DolapInfo[j][doY], DolapInfo[j][doZ], 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, DolapInfo[j][doVW], DolapInfo[j][doINT]);

        else if(Faction_GetType(DolapInfo[j][doFaction]) == GOVERNMENT)
            DolapInfo[j][doLabel] = CreateDynamic3DTextLabel("{ff3300}GOV Ekipman Dolabý\n{FFFFFF}Ýçinden ekipman almak için /ekipman yazýn.", COLOR_WHITE, DolapInfo[j][doX], DolapInfo[j][doY], DolapInfo[j][doZ], 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, DolapInfo[j][doVW], DolapInfo[j][doINT]);

        else if(Faction_GetType(DolapInfo[j][doFaction]) == LSNN)
            DolapInfo[j][doLabel] = CreateDynamic3DTextLabel("{0095c4}Kanal Ekipman Dolabý\n{FFFFFF}Ýçinden ekipman almak için /ekipman yazýn.", COLOR_WHITE, DolapInfo[j][doX], DolapInfo[j][doY], DolapInfo[j][doZ], 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, DolapInfo[j][doVW], DolapInfo[j][doINT]);

        DolapInfo[j][doPickup] = Pickup_Create(ELEMENT_DOLAP, j, 1275, 1, DolapInfo[j][doX], DolapInfo[j][doY], DolapInfo[j][doZ], DolapInfo[j][doVW], DolapInfo[j][doINT]);
        Iter_Add(Dolaplar, j);
    }
    print("Sunucu: Dolaplar yuklendi+");
    return 1;
}

DolapKaydet(dolapid)
{
    printf("%d nolu dolap oyun icinde olusturuldu.", dolapid);
    return 1;
}

DolapSil(dolapid)
{
    new id = dolapid;
    if(DolapInfo[id][doID] != -1)
    {
        mysql_format(ourConnection, queryx, sizeof(queryx), "DELETE FROM dolap WHERE id = '%d'", DolapInfo[id][doID]);
        mysql_tquery(ourConnection, queryx);
        
        DolapInfo[id][doID] = -1;
        DolapInfo[id][doFaction] = -1;
        DolapInfo[id][doX] = 0.0;
        DolapInfo[id][doY] = 0.0;
        DolapInfo[id][doZ] = 0.0;
        DolapInfo[id][doINT] = 0;
        DolapInfo[id][doVW] = 0;
        DestroyDynamic3DTextLabelEx(DolapInfo[id][doLabel]);
        DestroyDynamicPickup(DolapInfo[id][doPickup]);
        Iter_Remove(Dolaplar, id);
    }
    return 1;
}

YakindakiDolabiBul(playerid)
{
    new found = -1;
    foreach(new i: Dolaplar)
    {
        if(DolapInfo[i][doID] != -1)
        {
            if(IsPlayerInRangeOfPoint(playerid, 2.0, DolapInfo[i][doX], DolapInfo[i][doY], DolapInfo[i][doZ]))
            {
                found = i;
                break;
            }
        }
    }
    return found;
}

DolapGoster(playerid)
{
    new id = YakindakiDolabiBul(playerid);

    if(id == -1) return HataMesajiC(playerid, "Yakýnýnýzdaki dolap sizin oluþumunuza ait deðil.");

    if(Faction_GetType(DolapInfo[id][doFaction]) == Faction_GetType(PlayerInfo[playerid][pFaction]))
        Faction_GiveEquipment(playerid);

    return 1;
}

AtesliSilah(weaponid)
{
    if(weaponid == 0 || weaponid == 14 || weaponid == 10 || weaponid == 11 || weaponid == 12 || weaponid == 13 || weaponid == 16 || weaponid == 17 || weaponid == 26 || weaponid == 27 || weaponid >= 35) return 0;
    else return 1;
}

YasakliSilah(weaponid)
{
    new si = weaponid;
    if(si == 10 || si == 11 || si == 12 || si == 13 || si == 16 || si == 26 || si == 27 || (si >= 35 && si <= 40) || si == 44 || si == 45) return 1;
    else return 0;
}

PayDayYap()
{
    foreach(new i: Player)
    {
        if(PlayerInfo[i][pLogged])
        {
            PlayerInfo[i][pBugKurtar] = 0;
            //Payday
            new salary = 0;
            new factionid;

            if(PlayerInfo[i][pFaction] == -1 || !PlayerInfo[i][pFactionDuty]) PlayerInfo[i][pMinutes]--;
            else if(PlayerInfo[i][pFaction] != -1 && PlayerInfo[i][pFactionDuty] && Faction_GetType(PlayerInfo[i][pFaction]) != LSNN && PlayerInfo[i][pAFKTime] < 10) PlayerInfo[i][pMinutes]--;
            else if(PlayerInfo[i][pFaction] != -1 && PlayerInfo[i][pFactionDuty] && Faction_GetType(PlayerInfo[i][pFaction]) == LSNN) PlayerInfo[i][pMinutes]--;

            if(PlayerInfo[i][pMinutes] > 0) continue;

            PlayerInfo[i][pMinutes] = 60;
            PlayerInfo[i][pPlayingHours]++;

            if(PlayerInfo[i][pDrugRemainingTime] == 1)
            {
                PlayerInfo[i][pDrugCrisis] = 1;
                PlayerInfo[i][pDrugRemainingTime] = 0;
            }

            if(PlayerInfo[i][pDrugRemainingTime] > 0 && PlayerInfo[i][pDrugster])
            {
                if(!PlayerInfo[i][pDrugCrisis])
                {
                    PlayerInfo[i][pDrugRemainingTime]--;
                }
            }

            if(PlayerInfo[i][BagimlilikTedavi]) PlayerInfo[i][BagimlilikTedavi]--;

            GameTextForPlayer(i, "~y~PayDay", 5000, 1);
            SendFormattedMessage(i, COLOR_GREEN, "________________[%s | %s]_________________", ReturnDate(), "PayDay");

            if(PlayerInfo[i][pFaction] != -1 && Faction_GetType(PlayerInfo[i][pFaction]) < 5 )
            {
                factionid = PlayerInfo[i][pFaction];

                if(PlayerInfo[i][pFactionDuty])
                {
                    salary = FactionInfo[factionid][fSalary][PlayerInfo[i][pRank] - 1];
                }
                else salary = 0;
            }
            
            //new evsayi;
            //foreach(new h : Houses) if(HouseInfo[h][hExists] && PlayerInfo[i][pID] == HouseInfo[h][hOwner]) evsayi += 1;

            new paydayoran = 1;
            if(PlayerInfo[i][DoublePayday]) paydayoran = 2;
//          new payCheck = (SunucuBilgi[Payday] * SunucuBilgi[PaydayOrani]) + salary + (PlayerInfo[i][pLevel] * 17);
            new payCheck;
            if(PlayerInfo[i][pLevel] > 3)
            {
                payCheck = (SunucuBilgi[Payday] + (PlayerInfo[i][pLevel] * 8)) * SunucuBilgi[PaydayOrani] + salary;
            }
            else
            {
                payCheck = 800 * SunucuBilgi[PaydayOrani] + salary;
            }
            
            //if(evsayi > 1) payCheck -= (evsayi * 4);
            
            if(PlayerInfo[i][pLevel] < 4) SendFormattedMessage(i, COLOR_GREY, "(( Ýlk üç seviye bonusu aktif durumda! ($%d) ))", SunucuBilgi[PaydayOrani] * 800);
            
            PlayerInfo[i][pPaycheck] += payCheck * paydayoran;
            SendFormattedMessage(i, COLOR_GREY, "(( Gelen Maaþ: $%d ))", payCheck * paydayoran);

            if(SunucuBilgi[PaydayOrani] > 1)
            {
                SunucuMesaji(i, "X%d Payday etkinliði aktif olduðu için maaþýn yüksek geldi.", SunucuBilgi[PaydayOrani]);
            }

            if(PlayerInfo[i][pSavings])
            {
                if(PlayerInfo[i][pSavings] < 500000 && PlayerInfo[i][pPremium] == 5)
                {
                    new savings_p = 1;
                    new savings_add = floatround(PlayerInfo[i][pSavings] / 1000 * savings_p);

                    PlayerInfo[i][pSavings] += savings_add;
                }
                else if(PlayerInfo[i][pSavings] < 300000 && PlayerInfo[i][pPremium] != 5)
                {
                    new savings_p = 1;
                    new savings_add = floatround(PlayerInfo[i][pSavings] / 1000 * savings_p);

                    PlayerInfo[i][pSavings] += savings_add;
                }
                else
                {
                    if(PlayerInfo[i][pPremium] == 5) SendClientMessage(i, COLOR_GREY, "Mevduat hesabýnýzda $500.000 birikmiþ, bu parayý çekene kadar mevduat hesabýnýzda daha fazla para birikmeyecek.");
                    else SendClientMessage(i, COLOR_GREY, "Mevduat hesabýnýzda $300.000 birikmiþ, bu parayý çekene kadar mevduat hesabýnýzda daha fazla para birikmeyecek.");

                }
            }

            SendFormattedMessage(i, COLOR_GREY, "Maaþ Hesabý: $%d - Banka Hesabý: $%d - Mevduat Hesabý: $%d", PlayerInfo[i][pPaycheck], PlayerInfo[i][pCashBank], PlayerInfo[i][pSavings]);

            PlayerInfo[i][pCoynPayday]++;
            if(PlayerInfo[i][pCoynPayday] >= SunucuBilgi[NPPayday])
            {
                if(PlayerInfo[i][pPremium] == 5)
                {
                    PlayerInfo[i][pCoyn] += 2;
                    BasariMesaji(i, "Tebrikler! 2 adet SA-Point kazandýnýz. Artýk %d adet SA-Point'e sahipsiniz.", PlayerInfo[i][pCoyn]);
                }
                else
                {
                    PlayerInfo[i][pCoyn] += 1;
                    BasariMesaji(i, "Tebrikler! 1 adet SA-Point kazandýnýz. Artýk %d adet SA-Point'e sahipsiniz.", PlayerInfo[i][pCoyn]);
                }
                PlayerInfo[i][pCoynPayday] = 0;
            }

            if(PlayerInfo[i][pPremium] == 3)
            {
                PlayerInfo[i][pExperience] += 2;
            }
            else if(PlayerInfo[i][pPremium] == 4) {
                PlayerInfo[i][pExperience] += 3;
            }
            else if(PlayerInfo[i][pPremium] == 5) {
                PlayerInfo[i][pExperience] += 4;
            }
            else PlayerInfo[i][pExperience]++;

            if(PlayerInfo[i][pExperience] >= PlayerInfo[i][pLevel] * 4)
            {
                PlayerInfo[i][pLevel]++;
                PlayerInfo[i][pExperience] = 0;
                //PlayerInfo[i][pUpgradePoints] += 2;

                SetPlayerScore(i, PlayerInfo[i][pLevel]);
                OAC_GivePlayerMoney(i, 1000);

                SendFormattedMessage(i, COLOR_GREY, "Tebrikler! %d seviyesine ulaþtýn. $1000 ek bonus kazandýn.", PlayerInfo[i][pLevel]);
                SendFormattedMessage(i, COLOR_GREY, "Bir sonraki seviyeye ulaþman için %d tecrübe gerekiyor.", PlayerInfo[i][pLevel] * 4);
            }
            else SendFormattedMessage(i, COLOR_GREY, "%d tecrübe puanýna ulaþtýðýnda seviye atlayacaksýn. Mevcut tecrübe puanýn: %d.", PlayerInfo[i][pLevel] * 4, PlayerInfo[i][pExperience]);


            SendClientMessageEx(i, COLOR_GREEN, "___________________________________________________________");
        }
    }
}

OncekiPlakayaDon(playerid, vehicleid)
{
    Vehicle_RespawnNF(vehicleid);
    SetVehicleParamsEx(vehicleid, VehicleInfo[vehicleid][vEngine], VehicleInfo[vehicleid][vLights], VEHICLE_PARAMS_OFF, VehicleInfo[vehicleid][vLocked], VEHICLE_PARAMS_OFF, VEHICLE_PARAMS_OFF, VehicleInfo[vehicleid][vObje]);
    SetVehiclePos(vehicleid, GetPVarFloat(playerid, "AracX"), GetPVarFloat(playerid, "AracY"), GetPVarFloat(playerid, "AracZ"));
    SetVehicleZAngle(vehicleid, GetPVarFloat(playerid, "AracA"));
    LinkVehicleToInterior(vehicleid, GetPVarInt(playerid, "AracINT"));
    SetVehicleVirtualWorld(vehicleid, GetPVarInt(playerid, "AracVW"));
    PutPlayerInVehicle(playerid, vehicleid, GetPVarInt(playerid, "AracKoltuk"));
    DeletePVar(playerid, "AracX");
    DeletePVar(playerid, "AracY");
    DeletePVar(playerid, "AracZ");
    DeletePVar(playerid, "AracA");
    DeletePVar(playerid, "AracINT");
    DeletePVar(playerid, "AracVW");
    DeletePVar(playerid, "AracKoltuk");
    return 1;
}

stock strreplace(string[], find, replace)
{
    for(new i=0; string[i]; i++)
    {
        if(string[i] == find)
        {
            string[i] = replace;
        }
    }
    return replace;
}

forward public MapleriYukle();
public MapleriYukle() {
    new rows = cache_num_rows(), MapIsim[100];
    if(rows) {
        for(new i; i < rows; i++) {
            cache_get_value(i, "mapIsmi", MapIsim, 100);
            new string[128];
            format(string, sizeof(string), "loadfs %s", MapIsim);
            SendRconCommand(string);
        }
        printf("%d adet map basariyla yuklendi.", rows);
    }
}

SilahYapabilirMi(playerid, gunid) {
    new found = 1;
    if(gunid >= 25 && gunid <= 27) {
        for(new i = 30; i < 34; i++) {
            if(AC_PlayerHasWeapon(playerid, i) && AC_PlayerHasAmmo(playerid, i) && i != 32 && i != gunid && !PlayerInfo[playerid][pBeanBag]) {
                found = 0;
                break;
            }
        }
    }
    else if(gunid >= 28 && gunid <= 29 || gunid == 32) {
        for(new i = 30; i < 34; i++) {
            if(AC_PlayerHasWeapon(playerid, i) && AC_PlayerHasAmmo(playerid, i) && i != 32 && i != gunid) {
                found = 0;
                break;
            }
        }
    }
    else if(gunid >= 30 && gunid <= 31) {
        for(new i = 30; i < 34; i++) {
            if(AC_PlayerHasWeapon(playerid, i) && AC_PlayerHasAmmo(playerid, i) && i != 32 && i != gunid) {
                found = 0;
                break;
            }
        }
    }
    else if(gunid >= 33 && gunid <= 34) {
        for(new i = 30; i < 34; i++) {
            if(AC_PlayerHasWeapon(playerid, i) && AC_PlayerHasAmmo(playerid, i) && i != 32 && i != gunid) {
                found = 0;
                break;
            }
        }
    }
    return found;
}

KarakterYarat(playerid) {
    InterpolateCameraPos(playerid, 2377.6272,-1199.0465,52.2242, 2416.1248,-1219.2742,44.4877, 12500, CAMERA_CUT);
    InterpolateCameraLookAt(playerid, 2539.3718,-1288.4221,52.7656, 2539.3718,-1288.4221,52.7656, 12500, CAMERA_CUT);
    SetPlayerPos(playerid, 2539.3718,-1288.4221,20.7656);
    PlayerInfo[playerid][pFreezed] = 1;
    TogglePlayerControllable(playerid, false);
    Dialog_Show(playerid, DialogKarakterYarat, DIALOG_STYLE_MSGBOX, "Karakter Yaratma", "Görünen o ki henüz karakterinizi yaratmamýþsýnýz. Merak etmeyin, karakter yaratmak son derece kolay ve hýzlý!\nÞimdi karakter yaratmak istiyor musunuz?", "Evet", "Hayýr");
    return 1;
}

stock GetSkinTuruInfo(cinsiyet, irk) {

    if(cinsiyet == 0 && irk == 0) // beyaz erkek
        return TOTAL_M_WHITE;
    else if(cinsiyet == 0 && irk == 1) // erkek siyah
        return TOTAL_M_BLACK;
    else if(cinsiyet == 1 && irk == 0) // beyaz kadýn
        return TOTAL_F_WHITE;
    else if(cinsiyet == 1 && irk == 1) // siyah kadýn
        return TOTAL_F_BLACK;
    return 0;
}

PayPhoneLabelOlustur(pid) {
    new string[12];
    format(string, sizeof(string), "%d", PayPhoneInfo[pid][cNumber]);
    PayPhoneInfo[pid][KulubeLabel] = CreateDynamic3DTextLabel(string, COLOR_WHITE, PayPhoneInfo[pid][cPosX], PayPhoneInfo[pid][cPosY], PayPhoneInfo[pid][cPosZ]+1.0, 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);
    return 1;
}

EnvanterIDDuzelt(playerid, id)
{
    for(new i = id; i < MAX_INVENTORY_ITEMS; i++)
    {
        if(i + 1 < MAX_INVENTORY_ITEMS && PlayerInfo[playerid][pInvList][i] == 0)
        {
            PlayerInfo[playerid][pInvList][i] = PlayerInfo[playerid][pInvList][i+1];
            PlayerInfo[playerid][pInvExtra][i] = PlayerInfo[playerid][pInvExtra][i+1];
            PlayerInfo[playerid][pInvCredit][i] = PlayerInfo[playerid][pInvCredit][i+1];
            PlayerInfo[playerid][pInvAmount][i] = PlayerInfo[playerid][pInvAmount][i+1];
            PlayerInfo[playerid][pInvList][i+1] = 0;
            PlayerInfo[playerid][pInvExtra][i+1] = 0;
            PlayerInfo[playerid][pInvCredit][i+1] = 0;
            PlayerInfo[playerid][pInvAmount][i+1] = 0;
        }
    }
    return 1;
}

AracDuzenlemeDiyalogunuGoster(playerid, id)
{
    new string[1250], faction[32], job[32];
    if(VehicleInfo[id][vFaction] == 65535)
        format(faction, sizeof faction, "Yok");
    else
        format(faction, sizeof faction, "%s", FactionInfo[VehicleInfo[id][vFaction]][fName]);
    if(VehicleInfo[id][vJob] < 0 || VehicleInfo[id][vJob] >= sizeof(Jobs))
        format(job, sizeof job, "Yok");
    else
        format(job, sizeof job, "%s", Jobs[VehicleInfo[id][vJob]][jobName]);
    format(string, sizeof(string), "{FFFFFF}Model\t{3366cc}%s\n{FFFFFF}Birincil renk\t{3366cc}%d\n{ffffff}Ýkincil renk\t{3366cc}%d\n{ffffff}Spawn\t{3366cc}%.2f, %.2f, %.2f, %.2f", GetVehicleModelName(VehicleInfo[id][vModel]), VehicleInfo[id][vFirstColor], VehicleInfo[id][vSecondColor], VehicleInfo[id][vSpawnPosX], VehicleInfo[id][vSpawnPosY], VehicleInfo[id][vSpawnPosZ], VehicleInfo[id][vSpawnPosA]);
    format(string, sizeof(string), "%s\n{FFFFFF}Faction\t{3366cc}%s\n{ffffff}Plaka\t{3366cc}%s\n{ffffff}Sahip\t{3366cc}%d\n{ffffff}Can\t{3366cc}%.2f", string, faction, VehicleInfo[id][vPlate], VehicleInfo[id][vOwner], VehicleInfo[id][vHealth]);
    format(string, sizeof(string), "%s\n{FFFFFF}Motor ömrü\t{3366cc}%.2f\n{FFFFFF}Akü ömrü\t{3366cc}%.2f\n{FFFFFF}Benzin\t{3366cc}%d\n{FFFFFF}Fiyat\t{3366cc}$%d", string, VehicleInfo[id][vEngineHealth], VehicleInfo[id][vBatteryHealth], VehicleInfo[id][vFuel], VehicleInfo[id][vPrice]);
    format(string, sizeof(string), "%s\n{FFFFFF}Interior\t{3366cc}%d\n{ffffff}Virtual World\t{3366cc}%d\n{FFFFFF}Meslek\t{3366cc}%s\n{ffffff}Alarm\t{3366cc}%d\n{ffffff}Kapý\t{3366cc}%d\n{800000}>> Aracý Sil", string, VehicleInfo[id][vInterior], VehicleInfo[id][vWorld], job, VehicleInfo[id][vAlarm], VehicleInfo[id][vDoorLevel]);
    Dialog_Show(playerid, DialogAracDuzenle, DIALOG_STYLE_TABLIST_HEADERS, "Araç Yaratma Menüsü", "Seçenek\t{ffffff}Deðer\n%s", "{26E6DD}Seç", "{26E6DD}<<Geri", string);
    return 1;
}

forward OnPlayerGetWeapon(playerid, slot, ammo);

My_GivePlayerWeapon(playerid, weaponid, ammo)
{
    new g_slot = GetWeaponSlot(weaponid),   strname[32];

    format(strname, sizeof(strname), "weapon%d", g_slot); SetPVarInt(playerid, strname, weaponid);
    format(strname, sizeof(strname), "weaponsecure%d", g_slot); SetPVarInt(playerid, strname, 5);
    format(strname, sizeof(strname), "ammo%d", g_slot);
    new tmp_ammo = GetPVarInt(playerid, strname);

    SetPVarInt(playerid, strname, tmp_ammo+ammo);
    CUSTOM_GivePlayerWeapon(playerid, weaponid, ammo);
    CallRemoteFunction("OnPlayerGetWeapon", "iii", playerid, g_slot, tmp_ammo+ammo);
}

My_ResetPlayerWeapons(playerid)
{
    new strname[32];

    for(new j; j < 12; j++)
    {
        format(strname, sizeof(strname), "weapon%d", j); SetPVarInt(playerid, strname, 0);
        format(strname, sizeof(strname), "weaponsecure%d", j); SetPVarInt(playerid, strname, 0);
        format(strname, sizeof(strname), "ammo%d", j); SetPVarInt(playerid, strname, 0);
    }

    CUSTOM_ResetPlayerWeapons(playerid);
}

My_SetPlayerHealth(playerid, Float:hp)
{
    SetPVarFloat(playerid, "health", hp);
    CUSTOM_SetPlayerHealth(playerid, hp);
}

My_SetPlayerArmour(playerid, Float:armour)
{
    SetPVarFloat(playerid, "armour", armour);
    CUSTOM_SetPlayerArmour(playerid, armour);
}

IsPlayerOnline(username[])
{
    foreach(new i : Player)
    {
        if(!strcmp(PlayerInfo[i][pCharacterName], username, true))
        {
            return 1;
        }
    }
    return 0;
}

IsPlayerOnlineID(username[])
{
    foreach(new i : Player)
    {
        if(!strcmp(PlayerInfo[i][pCharacterName], username, true))
        {
            return i;
        }
    }
    return -1;
}

forward OnAdminOfflineBan(playerid, username[], reason[]);
public OnAdminOfflineBan(playerid, username[], reason[])
{
    static rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);
    new tmpID;

    if(!rows)return
        HataMesajiC(playerid, "Bu isimde karakter bulunamadý.");

    cache_get_value_int(0, "id", tmpID);

    mysql_format(ourConnection, queryx, sizeof(queryx), "UPDATE characters SET banned = '1' WHERE id = '%i'", tmpID);
    mysql_tquery(ourConnection, queryx);
    
    mysql_format(ourConnection, queryx, sizeof(queryx), "INSERT INTO webbans (karakteradi, sebep, admin, tarih) VALUES ('%e', '%e', '%s', '%e')", username, reason, PlayerInfo[playerid][pUsername], ReturnDate());
    mysql_tquery(ourConnection, queryx);

    if(!PlayerInfo[playerid][pGizliAdmin]) {
       foreach(new i: Player)
            SendFormattedMessage(i, COLOR_ADMIN, "AdmCmd: %s tarafýndan %s adlý karakter yasaklandý. Sebep: %s [%s]", PlayerInfo[playerid][pUsername], username, reason, ReturnDate());
    } else {
        foreach(new i: Player)
            SendFormattedMessage(i, COLOR_ADMIN, "AdmCmd: %s adlý karakter yasaklandý. Sebep: %s [%s]", username, reason, ReturnDate());
    }

    return 1;
}

forward OnAdminOfflinePrison(playerid, username[], minutes, reason[]);
public OnAdminOfflinePrison(playerid, username[], minutes, reason[])
{
    static rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);
    new tmpID;

    if(!rows) return HataMesajiC(playerid, "Bu isimde karakter bulunamadý.");

    cache_get_value_int(0, "id", tmpID);

    mysql_format(ourConnection, queryx, sizeof(queryx), "UPDATE characters SET jail_time = '%i' WHERE id = '%i'", minutes * 60, tmpID);
    mysql_tquery(ourConnection, queryx);
    
    mysql_format(ourConnection, queryx, sizeof(queryx), "INSERT INTO webjails (karakteradi, sure, sebep, admin, tarih) VALUES ('%e', '%d', '%e', '%s', '%e')", username, minutes, reason, PlayerInfo[playerid][pUsername], ReturnDate());
    mysql_tquery(ourConnection, queryx);

    if(!PlayerInfo[playerid][pGizliAdmin]) {
        foreach(new i: Player)
            SendFormattedMessage(i, COLOR_ADMIN, "AdmCmd: %s, %s tarafýndan hapse atýldý. Süre: %i dakika - Sebep: %s [%s]", username, PlayerInfo[playerid][pUsername], minutes, reason, ReturnDate());
    } else {
        foreach(new i: Player)
            SendFormattedMessage(i, COLOR_ADMIN, "AdmCmd: %s hapse atýldý. Süre: %i dakika - Sebep: %s [%s]", username, minutes, reason, ReturnDate());
    }

    return 1;
}

KickPlayer(playerid, by[], reason[])
{
    if(PlayerInfo[playerid][pLogged])
        SaveCharacter(playerid);
    KickMesaji(playerid, "%s tarafýndan sunucudan atýldýn. Sebep: %s [%s]", by, reason, ReturnDate());

    return SetTimerEx("KickTimer", 100, false, "d", playerid);
}

KickTimer(playerid); public KickTimer(playerid)return
    Kick(playerid);

ReturnDate()
{
    new sendString[90], MonthStr[40], month, day, year;
    new hour, minute, second;

    gettime(hour, minute, second);
    getdate(year, month, day);
    switch(month)
    {
        case 1:  MonthStr = "01";
        case 2:  MonthStr = "02";
        case 3:  MonthStr = "03";
        case 4:  MonthStr = "04";
        case 5:  MonthStr = "05";
        case 6:  MonthStr = "06";
        case 7:  MonthStr = "07";
        case 8:  MonthStr = "08";
        case 9:  MonthStr = "09";
        case 10: MonthStr = "10";
        case 11: MonthStr = "11";
        case 12: MonthStr = "12";
    }

    format(sendString, 90, "%02d/%s/%d, %02d:%02d:%02d", day, MonthStr, year, hour, minute, second);
    return sendString;
}

ReturnHour()
{
    new hours, minutes, seconds;
    gettime(hours, minutes, seconds);
    return hours;
}

forward OnAdminOfflineCheck(playerid, username[]);
public OnAdminOfflineCheck(playerid, username[])
{
    static rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);
    new sqlid;

    if(!rows) return HataMesajiC(playerid, "Bu isimde karakter bulunamadý.");

    cache_get_value_int(0, "account_id", sqlid);

    mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT * FROM accounts WHERE id = '%d'", sqlid);
    mysql_tquery(ourConnection, queryx, "OfflineAccountCheck", "i", playerid);

    new para, banka, mevduat, maas,
    meslek, msaat, exp, osaati, seviye,
    factionid, frank, lastlogin[64];

    cache_get_value_int(0, "cash", para);
    cache_get_value_int(0, "cash_bank", banka);
    cache_get_value_int(0, "savings", mevduat);
    cache_get_value_int(0, "paycheck", maas);
    cache_get_value_int(0, "job", meslek);
    cache_get_value_int(0, "job_hours", msaat);
    cache_get_value_int(0, "experience", exp);
    cache_get_value_int(0, "playing_hours", osaati);
    cache_get_value_int(0, "level", seviye);
    cache_get_value_int(0, "faction_rank_id", frank);
    cache_get_value_int(0, "faction_id", factionid);
    cache_get_value(0, "last_login", lastlogin, 64);

    SetPVarInt(playerid, "para", para);
    SetPVarInt(playerid, "banka", banka);
    SetPVarInt(playerid, "mevduat", mevduat);
    SetPVarInt(playerid, "maas", maas);
    SetPVarInt(playerid, "meslek", meslek);
    SetPVarInt(playerid, "msaat", msaat);
    SetPVarInt(playerid, "exp", exp);
    SetPVarInt(playerid, "osaati", osaati);
    SetPVarInt(playerid, "seviye", seviye);
    SetPVarInt(playerid, "frank", frank);
    SetPVarInt(playerid, "factionid", factionid);
    SetPVarString(playerid, "lastlogin", lastlogin);
    SetPVarString(playerid, "ggusername", username);

    BasariMesaji(playerid, "Lütfen bekleyin, karakter verileri indiriliyor.");
    SetTimerEx("KBilgiYolla", 1000, false, "d", playerid);
    return 1;
}

forward KBilgiYolla(playerid);
public KBilgiYolla(playerid)
{
    new para, banka, mevduat, maas,
    meslek, exp, osaati, seviye,
    factionid, frank, lastlogin[64], username[24];

    para = GetPVarInt(playerid, "para");
    banka = GetPVarInt(playerid, "banka");
    mevduat = GetPVarInt(playerid, "mevduat");
    maas = GetPVarInt(playerid, "maas");
    meslek = GetPVarInt(playerid, "meslek");
    exp = GetPVarInt(playerid, "exp");
    osaati = GetPVarInt(playerid, "osaati");
    seviye = GetPVarInt(playerid, "seviye");
    frank = GetPVarInt(playerid, "frank");
    factionid = GetPVarInt(playerid, "factionid");
    GetPVarString(playerid, "lastlogin", lastlogin, 64);
    GetPVarString(playerid, "ggusername", username, 24);

    new premiumStr[32];
    switch(OACheck[playerid][OACPremium])
    {
        case 1: premiumStr = "Bronze";
        case 2: premiumStr = "Silver";
        case 3: premiumStr = "Gold";
        case 4: premiumStr = "Platinum";
        case 5: premiumStr = "Diamond";
        default: premiumStr = "Yok";
    }

    if(OACheck[playerid][OACPremium] > 0) format(premiumStr, sizeof(premiumStr), "%s", premiumStr);

    SunucuMesaji(playerid, "%s(%s) adlý kullanýcýnýn bilgileri:", username, OACheck[playerid][OACusername]);
    SunucuMesaji(playerid, "Ekonomi> Para:%d - Banka:%d - Maaþ:%d - Mevduat:%d", para, banka, maas, mevduat);
    if(factionid != -1) SunucuMesaji(playerid, "Detay> Oluþum:%s(%s) - Rütbe:%s [%d]", FactionInfo[factionid][fName], FactionInfo[factionid][fShortName], fRanks[factionid][frank - 1], frank);

    if(meslek != -1) SunucuMesaji(playerid, "Diðer> Meslek:%s - Exp:%d/%d - O.S:%d - S:%d", Jobs[meslek][jobName], exp, seviye*4, osaati, seviye);
    else if(factionid == -1) SunucuMesaji(playerid, "Diðer> Exp:%d/%d - Oynama Saati:%d - Seviye:%d (Oluþum/Meslek yok)", exp, seviye*4, osaati, seviye);
    else SunucuMesaji(playerid, "Diðer> Exp:%d/%d - Oynama Saati:%d - Seviye:%d (Meslek yok)", exp, seviye*4, osaati, seviye);

    SunucuMesaji(playerid, "OOC> Donator:%s - SA-Point:%d - Son Giriþ:%s - Uyarý Puaný: %d", premiumStr, OACheck[playerid][OACCoyn], lastlogin, OACheck[playerid][OAUyari]);
    SunucuMesaji(playerid, "%s tarihinde yukarýda bilgileri bulunan kullanýcýyý incelediniz.", ReturnDate());

    DeletePVar(playerid, "para");
    DeletePVar(playerid, "banka");
    DeletePVar(playerid, "maas");
    DeletePVar(playerid, "mevduat");
    DeletePVar(playerid, "meslek");
    DeletePVar(playerid, "msaat");
    DeletePVar(playerid, "exp");
    DeletePVar(playerid, "osaati");
    DeletePVar(playerid, "seviye");
    DeletePVar(playerid, "frank");
    DeletePVar(playerid, "factionid");
    DeletePVar(playerid, "lastlogin");
    DeletePVar(playerid, "ggusername");
    return 1;
}

forward OnAdminOfflineEnvanterCheck(playerid, username[]);
public OnAdminOfflineEnvanterCheck(playerid, username[])
{
    static rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);
    new string[256];

    if(!rows)return
        HataMesajiC(playerid, "Bu isimde karakter bulunamadý.");

    cache_get_value(0, "string_inventory", string, 256);
    sscanf(string, "p<|>dddddddddddddddddddddddddddddddddddddddd",
    OAECheck[playerid][EnvanterListe][0], OAECheck[playerid][EnvanterMiktar][0], OAECheck[playerid][EnvanterExtra][0],
    OAECheck[playerid][EnvanterListe][1], OAECheck[playerid][EnvanterMiktar][1], OAECheck[playerid][EnvanterExtra][1],
    OAECheck[playerid][EnvanterListe][2], OAECheck[playerid][EnvanterMiktar][2], OAECheck[playerid][EnvanterExtra][2],
    OAECheck[playerid][EnvanterListe][3], OAECheck[playerid][EnvanterMiktar][3], OAECheck[playerid][EnvanterExtra][3],
    OAECheck[playerid][EnvanterListe][4], OAECheck[playerid][EnvanterMiktar][4], OAECheck[playerid][EnvanterExtra][4],
    OAECheck[playerid][EnvanterListe][5], OAECheck[playerid][EnvanterMiktar][5], OAECheck[playerid][EnvanterExtra][5],
    OAECheck[playerid][EnvanterListe][6], OAECheck[playerid][EnvanterMiktar][6], OAECheck[playerid][EnvanterExtra][6],
    OAECheck[playerid][EnvanterListe][7], OAECheck[playerid][EnvanterMiktar][7], OAECheck[playerid][EnvanterExtra][7],
    OAECheck[playerid][EnvanterListe][8], OAECheck[playerid][EnvanterMiktar][8], OAECheck[playerid][EnvanterExtra][8],
    OAECheck[playerid][EnvanterListe][9], OAECheck[playerid][EnvanterMiktar][9], OAECheck[playerid][EnvanterExtra][9],
    OAECheck[playerid][EnvanterKalite][0], OAECheck[playerid][EnvanterKalite][1], OAECheck[playerid][EnvanterKalite][2],
    OAECheck[playerid][EnvanterKalite][3], OAECheck[playerid][EnvanterKalite][4], OAECheck[playerid][EnvanterKalite][5],
    OAECheck[playerid][EnvanterKalite][6], OAECheck[playerid][EnvanterKalite][7], OAECheck[playerid][EnvanterKalite][8],
    OAECheck[playerid][EnvanterKalite][9]);

    cache_get_value(0, "string_weapons", string, 256);
    sscanf(string, "p<|>dddddddddddddddddddddddd",
    OAECheck[playerid][Silahlar][0], OAECheck[playerid][Mermiler][0],
    OAECheck[playerid][Silahlar][1], OAECheck[playerid][Mermiler][1],
    OAECheck[playerid][Silahlar][2], OAECheck[playerid][Mermiler][2],
    OAECheck[playerid][Silahlar][3], OAECheck[playerid][Mermiler][3],
    OAECheck[playerid][Silahlar][4], OAECheck[playerid][Mermiler][4],
    OAECheck[playerid][Silahlar][5], OAECheck[playerid][Mermiler][5],
    OAECheck[playerid][Silahlar][6], OAECheck[playerid][Mermiler][6],
    OAECheck[playerid][Silahlar][7], OAECheck[playerid][Mermiler][7],
    OAECheck[playerid][Silahlar][8], OAECheck[playerid][Mermiler][8],
    OAECheck[playerid][Silahlar][9], OAECheck[playerid][Mermiler][9],
    OAECheck[playerid][Silahlar][10], OAECheck[playerid][Mermiler][10],
    OAECheck[playerid][Silahlar][11], OAECheck[playerid][Mermiler][11]);

    BasariMesaji(playerid, "%s adlý kullanýcýnýn envanteri ve silahlarý:", username);

    for(new x; x < MAX_INVENTORY_ITEMS; x++)
    {
        if(!OAECheck[playerid][EnvanterListe][x])continue;
        SunucuMesaji(playerid, "Slot %d: %s (Adet:%d / Kalite:%d)", x + 1, InventoryObjects[OAECheck[playerid][EnvanterListe][x]][invName], OAECheck[playerid][EnvanterMiktar][x], OAECheck[playerid][EnvanterKalite][x]);
    }

    for(new a; a < 12; a++)
    {
        if(!OAECheck[playerid][Silahlar][a] || !OAECheck[playerid][Mermiler][a])continue;
        SunucuMesaji(playerid, "%s(%d) - Mermi: %d", GetWeaponNameEx(OAECheck[playerid][Silahlar][a]), OAECheck[playerid][Silahlar][a], OAECheck[playerid][Mermiler][a]);
    }

    BasariMesaji(playerid, "%s tarihinde yukarýda bilgileri bulunan kullanýcýyý incelediniz.", ReturnDate());

    for(new x; x < MAX_INVENTORY_ITEMS; x++)
    {
        OAECheck[playerid][EnvanterListe][x] = 0;
        OAECheck[playerid][EnvanterExtra][x] = 0;
        OAECheck[playerid][EnvanterKalite][x] = 0;
        OAECheck[playerid][EnvanterMiktar][x] = 0;
    }

    for(new a; a < 12; a++)
    {
        OAECheck[playerid][Silahlar][a] = 0;
        OAECheck[playerid][Mermiler][a] = 0;
    }
    return 1;
}

forward OfflineAccountCheck(playerid);
public OfflineAccountCheck(playerid)
{
    static rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);

    if(!rows)return
        HataMesajiC(playerid, "Ýþlemi gerçekleþtirirken bir hata oluþtu, bazý veriler geçersiz olabilir.");

    cache_get_value(0, "username", OACheck[playerid][OACusername], 24);
    cache_get_value_int(0, "premium", OACheck[playerid][OACPremium]);
    cache_get_value_int(0, "coyn_points", OACheck[playerid][OACCoyn]);
    cache_get_value_int(0, "uyaripuani", OACheck[playerid][OAUyari]);
    return 1;
}

UyusturucuEk(playerid, type)
{
    new id = Iter_Free(EkilenUyusturucular);
    if(id >= MAX_EKILEN_UYUSTURUCU) return HataMesajiC(playerid, "Sunucu uyuþturucu ekme limitine ulaþtý, daha sonra tekrar deneyin.");

    EUBilgi[id][euID] = id;
    if(type == 2) EUBilgi[id][euObjectID] = 19473;//-2003;
    else if(type == 1) EUBilgi[id][euObjectID] = 19473;
    GetPlayerPos(playerid, EUBilgi[id][euPos][0], EUBilgi[id][euPos][1], EUBilgi[id][euPos][2]);
    EUBilgi[id][euInterior] = GetPlayerInterior(playerid);
    EUBilgi[id][euVWorld] = GetPlayerVirtualWorld(playerid);
    EUBilgi[id][euOwner] = PlayerInfo[playerid][pID];
    EUBilgi[id][euStatus] = true;
    EUBilgi[id][euType] = type;
    EUBilgi[id][euTime] = 0;

    if(!EUBilgi[id][euInterior] && !EUBilgi[id][euVWorld])
    {
        EUBilgi[id][euObject] = CreateDynamicObject(EUBilgi[id][euObjectID], EUBilgi[id][euPos][0], EUBilgi[id][euPos][1], EUBilgi[id][euPos][2]-1.2, 0.0, 0.0, 0.0, EUBilgi[id][euVWorld], EUBilgi[id][euInterior]);
    }
    else if(EUBilgi[id][euType] != 1) EUBilgi[id][euObject] = CreateDynamicObject(EUBilgi[id][euObjectID], EUBilgi[id][euPos][0], EUBilgi[id][euPos][1], EUBilgi[id][euPos][2]-0.3, 0.0, 0.0, 0.0, EUBilgi[id][euVWorld], EUBilgi[id][euInterior]);
    else EUBilgi[id][euObject] = CreateDynamicObject(EUBilgi[id][euObjectID], EUBilgi[id][euPos][0], EUBilgi[id][euPos][1], EUBilgi[id][euPos][2]-1.2, 0.0, 0.0, 0.0, EUBilgi[id][euVWorld], EUBilgi[id][euInterior]);

    new labelstring[64], timestring[32];

    format(timestring, 32, "{00FF00}Filizlenme");

    switch(type)
    {
        case 1: format(labelstring, 64, "Haþhaþ\n%s", timestring);
        case 2: format(labelstring, 64, "Marijuana\n%s", timestring);
    }

    EUBilgi[id][euLabel] = CreateDynamic3DTextLabel(labelstring, COLOR_WHITE, EUBilgi[id][euPos][0], EUBilgi[id][euPos][1], EUBilgi[id][euPos][2], 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, EUBilgi[id][euVWorld], EUBilgi[id][euInterior], -1);
    Iter_Add(EkilenUyusturucular, id);

    mysql_format(ourConnection, queryx, sizeof(queryx), "INSERT INTO plantdrugs (owner, type, px, py, pz, interior, vw, time) VALUES ('%d', '%d', '%f', '%f', '%f', '%d', '%d', '%d')",
    EUBilgi[id][euOwner],
    EUBilgi[id][euType],
    EUBilgi[id][euPos][0],
    EUBilgi[id][euPos][1],
    EUBilgi[id][euPos][2],
    EUBilgi[id][euInterior],
    EUBilgi[id][euVWorld],
    EUBilgi[id][euTime]);

    mysql_tquery(ourConnection, queryx, "OnQueryFinished", "dd", id, THREAD_CREATE_EU);

    Streamer_Update(playerid);
    return 1;
}

UyusturucuTopla(playerid, type)
{
    new id = YakindakiEU(playerid);
    if(id == -1) return HataMesajiC(playerid, "Yakýnýnýzda ekilmiþ uyuþturucu bulunamadý.");
    if(EUBilgi[id][euType] != type) return HataMesajiC(playerid, "Yakýnýnýzda istediðiniz uyuþturucudan bulunmuyor.");

    mysql_format(ourConnection, queryx, sizeof(queryx), "DELETE FROM plantdrugs WHERE id = %i", EUBilgi[id][euID]);
    mysql_tquery(ourConnection, queryx);

    DestroyDynamicObjectEx(EUBilgi[id][euObject]);
    DestroyDynamic3DTextLabelEx(EUBilgi[id][euLabel]);

    EUBilgi[id][euID] = -1;
    EUBilgi[id][euObjectID] = -1;
    EUBilgi[id][euPos][0] = 0.0;
    EUBilgi[id][euPos][1] = 0.0;
    EUBilgi[id][euPos][2] = 0.0;
    EUBilgi[id][euInterior] = -1;
    EUBilgi[id][euVWorld] = -1;
    EUBilgi[id][euOwner] = -1;
    EUBilgi[id][euStatus] = false;

    if(type == 1) format(xname, 32, "Haþhaþ");
    else if(type == 2) format(xname, 32, "Marijuana");

    if(EUBilgi[id][euTime] < 60)
    {
        xquality = 0;
        xamount = 0;
    }
    if(EUBilgi[id][euTime] >= 60 * 1)
    {
        xquality = randomEx(1, 39);
        xamount = 10;
    }
    if(EUBilgi[id][euTime] >= 60 * 2)
    {
        xquality = randomEx(40, 69);
        xamount = 15;
    }
    if(EUBilgi[id][euTime] >= 60 * 3)
    {
        xquality = randomEx(70, 100);
        xamount = 15;
    }
    if(EUBilgi[id][euTime] >= 60 * 4)
    {
        xquality = randomEx(40, 69);
        xamount = 10;
    }
    if(EUBilgi[id][euTime] >= 60 * 5)
    {
        xquality = randomEx(1, 39);
        xamount = 10;
    }
    if(EUBilgi[id][euTime] >= 60 * 6)
    {
        xquality = 0;
        xamount = 0;
    }

    if(xquality == 0 && xamount == 0)
    {
        HataMesajiC(playerid, "Üzgünüm, uyuþturucu üretme iþinde baþarýsýz oldun.");
    }
    else
    {
        BasariMesaji(playerid, "%s adlý uyuþturucudan %d adet ürettiniz. (Kalite: %d)", xname, xamount, xquality, "%");
        Inventory_AddItem(playerid, Inventory_FreeID(playerid), xname, xamount, xquality);
    }

    EUBilgi[id][euTime] = 0;
    EUBilgi[id][euType] = 0;
    Iter_Remove(EkilenUyusturucular, id);

    Streamer_Update(playerid);
    return 1;
}

stock randomEx(min, max)
{
    new rand = random(max-min)+min;
    return rand;
}

UyusturuculariYukle(); public UyusturuculariYukle()
{
    static rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);

    if(!rows) return 1;

    for(new i; i < rows; i++)
    {
        cache_get_value_int(i, "id", EUBilgi[i][euID]);
        cache_get_value_int(i, "owner", EUBilgi[i][euOwner]);
        cache_get_value_int(i, "type", EUBilgi[i][euType]);
        cache_get_value_float(i, "px", EUBilgi[i][euPos][0]);
        cache_get_value_float(i, "py", EUBilgi[i][euPos][1]);
        cache_get_value_float(i, "pz", EUBilgi[i][euPos][2]);
        cache_get_value_int(i, "interior", EUBilgi[i][euInterior]);
        cache_get_value_int(i, "vw", EUBilgi[i][euVWorld]);
        cache_get_value_int(i, "time", EUBilgi[i][euTime]);

        if(EUBilgi[i][euType] == 1) EUBilgi[i][euObjectID] = 19473;
        else EUBilgi[i][euObjectID] = 19473;//-2003;
        EUBilgi[i][euStatus] = true;

        if(!EUBilgi[i][euInterior] && !EUBilgi[i][euVWorld])
        {
            EUBilgi[i][euObject] = CreateDynamicObject(EUBilgi[i][euObjectID], EUBilgi[i][euPos][0], EUBilgi[i][euPos][1], EUBilgi[i][euPos][2]-1.2, 0.0, 0.0, 0.0, EUBilgi[i][euVWorld], EUBilgi[i][euInterior]);
        }
        else if(EUBilgi[i][euType] != 1) EUBilgi[i][euObject] = CreateDynamicObject(EUBilgi[i][euObjectID], EUBilgi[i][euPos][0], EUBilgi[i][euPos][1], EUBilgi[i][euPos][2]-0.3, 0.0, 0.0, 0.0, EUBilgi[i][euVWorld], EUBilgi[i][euInterior]);
        else EUBilgi[i][euObject] = CreateDynamicObject(EUBilgi[i][euObjectID], EUBilgi[i][euPos][0], EUBilgi[i][euPos][1], EUBilgi[i][euPos][2]-1.2, 0.0, 0.0, 0.0, EUBilgi[i][euVWorld], EUBilgi[i][euInterior]);

        xtime = EUBilgi[i][euTime];
        if(xtime < 60)
        {
            format(xtimestring, 32, "{00FF00}Filizlenme");
        }
        if(xtime >= 60)
        {
            format(xtimestring, 32, "{00FF00}1 saat");
        }
        if(xtime >= 60 * 2)
        {
            format(xtimestring, 32, "{00FF00}2 saat");
        }
        if(xtime >= 60 * 3)
        {
            format(xtimestring, 32, "{00FF00}3 saat");
        }
        if(xtime >= 60 * 4)
        {
            format(xtimestring, 32, "{00FF00}4 saat");
        }
        if(xtime >= 60 * 5)
        {
            format(xtimestring, 32, "{00FF00}5 saat");
        }
        if(xtime >= 60 * 6)
        {
            format(xtimestring, 32, "{FF0000}Solmuþ");
        }
        switch(EUBilgi[i][euType])
        {
            case 1: format(xlabelstring, 64, "Haþhaþ\n%s", xtimestring);
            case 2: format(xlabelstring, 64, "Marijuana\n%s", xtimestring);
        }
        EUBilgi[i][euLabel] = CreateDynamic3DTextLabel(xlabelstring, COLOR_WHITE, EUBilgi[i][euPos][0], EUBilgi[i][euPos][1], EUBilgi[i][euPos][2], 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, EUBilgi[i][euVWorld], EUBilgi[i][euInterior], -1);
        Iter_Add(EkilenUyusturucular, i);
    }
    printf("ekilen uyusturucular yuklendi");
    return 1;
}

YakindakiEU(playerid)
{
    for(new i = 0; i != MAX_EKILEN_UYUSTURUCU; i ++)
    {
        if(EUBilgi[i][euStatus] && IsPlayerInRangeOfPoint(playerid, 1.0, EUBilgi[i][euPos][0], EUBilgi[i][euPos][1], EUBilgi[i][euPos][2]))
        {
            if(EUBilgi[i][euInterior] != GetPlayerInterior(playerid)) return -1;
            if(EUBilgi[i][euVWorld] != GetPlayerVirtualWorld(playerid)) return -1;

            Streamer_Update(playerid);
            return i;
        }
    }
    return -1;
}

GetWeaponObjectSlot(weaponid)
{
    new objectslot;

    switch (weaponid)
    {
        case 22..24: objectslot = 0;
        case 25..27: objectslot = 1;
        case 28, 29, 32: objectslot = 2;
        case 30, 31: objectslot = 3;
        case 33, 34: objectslot = 4;
        case 35..38: objectslot = 5;
    }
    return objectslot;
}

GetWeaponModelEx(weaponid) //Will only return the model of wearable weapons (22-38)
{
    new model;

    switch(weaponid)
    {
        case 22..29: model = 324 + weaponid;
        case 30: model = 355;
        case 31: model = 356;
        case 32: model = 372;
        case 33..38: model = 324 + weaponid;
    }
    return model;
}

stock PlayerHasWeapon(playerid, weaponid)
{
    new weapon, ammo;

    for (new i; i < 13; i++)
    {
        GetPlayerWeaponData(playerid, i, weapon, ammo);
        if (weapon == weaponid && ammo) return 1;
    }
    return 0;
}

forward OnLoadWeapons(playerid);
public OnLoadWeapons(playerid)
{
    new rows, weaponid, index;
    cache_get_row_count(rows);

    if(!rows) return 1;

    for (new i; i < rows; i++)
    {
        cache_get_value_name_int(i, "WeaponID", weaponid);
        index = weaponid - 22;

        cache_get_value_name_float(i, "PosX", WeaponSettings[playerid][index][Position][0]);
        cache_get_value_name_float(i, "PosY", WeaponSettings[playerid][index][Position][1]);
        cache_get_value_name_float(i, "PosZ", WeaponSettings[playerid][index][Position][2]);

        cache_get_value_name_float(i, "RotX", WeaponSettings[playerid][index][Position][3]);
        cache_get_value_name_float(i, "RotY", WeaponSettings[playerid][index][Position][4]);
        cache_get_value_name_float(i, "RotZ", WeaponSettings[playerid][index][Position][5]);

        cache_get_value_name_int(i, "Bone", WeaponSettings[playerid][index][Bone]);
        cache_get_value_name_int(i, "Hidden", WeaponSettings[playerid][index][Hidden]);
        cache_get_value_name_int(i, "duzenlendi", WeaponSettings[playerid][index][duzenlendi]);
    }
    return 1;
}

IsWeaponWearable(weaponid)
    return (weaponid >= 22 && weaponid <= 38);

IsWeaponHideable(weaponid)
    return (weaponid >= 22 && weaponid <= 24 || weaponid == 28 || weaponid == 32);


SendAworkAlert(bool:forcedAlert, color, const str[], {Float,_}:...)
{
    static
        args,
        start,
        end,
        string[256];

    #emit LOAD.S.pri 8
    #emit STOR.pri args

    if(args > 8)
    {
        #emit ADDR.pri str
        #emit STOR.pri start

        for(end = start + (args - 8); end > start; end -= 4)
        {
            #emit LREF.pri end
            #emit PUSH.pri
        }

        #emit PUSH.S str
        #emit PUSH.C 256
        #emit PUSH.C string

        #emit LOAD.S.pri 8
        #emit ADD.C 4
        #emit PUSH.pri

        #emit SYSREQ.C format
        #emit LCTRL 5
        #emit SCTRL 4

        foreach(new i : Player)
        {
            if(!IsPlayerConnected(i) || !PlayerInfo[i][pLogged] || PlayerInfo[i][pAdmin] < GAMEADMIN1)continue;
            if(!forcedAlert && !PlayerInfo[i][pAdminAlert])continue;

            if(PlayerInfo[i][pAdminDuty]) SendClientMessageEx(i, color, string); //Admindutyleri aciklara gidiyor
        }

        return 1;
    }

    foreach(new i : Player)
    {
        if(!IsPlayerConnected(i) || !PlayerInfo[i][pLogged] || PlayerInfo[i][pAdmin] < GAMEADMIN1)continue;
        if(!forcedAlert && !PlayerInfo[i][pAdminAlert])continue;

        if(PlayerInfo[i][pAdminDuty]) SendClientMessageEx(i, color, str);
    }

    return 1;
}

RaporAlert(bool:forcedAlert, color, const str[], {Float,_}:...)
{
    static
        args,
        start,
        end,
        string[256];

    #emit LOAD.S.pri 8
    #emit STOR.pri args

    if(args > 8)
    {
        #emit ADDR.pri str
        #emit STOR.pri start

        for(end = start + (args - 8); end > start; end -= 4)
        {
            #emit LREF.pri end
            #emit PUSH.pri
        }

        #emit PUSH.S str
        #emit PUSH.C 256
        #emit PUSH.C string

        #emit LOAD.S.pri 8
        #emit ADD.C 4
        #emit PUSH.pri

        #emit SYSREQ.C format
        #emit LCTRL 5
        #emit SCTRL 4

        foreach(new i : Player)
        {
            if(!IsPlayerConnected(i) || !PlayerInfo[i][pLogged] || PlayerInfo[i][pAdmin] < 3)continue;
            if(!forcedAlert && !PlayerInfo[i][pAdminAlert])continue;

            if(PlayerInfo[i][pAdminDuty] || PlayerInfo[i][pSupporterDuty]) SendClientMessageEx(i, color, string); //Admindutyleri aciklara gidiyor
        }

        return 1;
    }

    foreach(new i : Player)
    {
        if(!IsPlayerConnected(i) || !PlayerInfo[i][pLogged] || PlayerInfo[i][pAdmin] < 3)continue;
        if(!forcedAlert && !PlayerInfo[i][pAdminAlert])continue;

        if(PlayerInfo[i][pAdminDuty] || PlayerInfo[i][pSupporterDuty]) SendClientMessageEx(i, color, str);
    }

    return 1;
}

SetFreezePos(playerid, Float:x, Float:y, Float:z)
{
    if(PlayerInfo[playerid][pFreezeTimer] >= 0)
    {
        KillTimer(PlayerInfo[playerid][pFreezeTimer]);
    }

    PlayerInfo[playerid][pFreezeTimer] = SetTimerEx("UnfreezePlayer", 1500 + GetPlayerPing(playerid) * 2, false, "ifff", playerid, x, y, z);
    TogglePlayerControllable(playerid, false);
    SetPlayerPos(playerid, x, y, z);

    PlayerInfo[playerid][pFreezed] = 1;
}

UnfreezePlayer(playerid, Float:x, Float:y, Float:z); public UnfreezePlayer(playerid, Float:x, Float:y, Float:z)
{
    PlayerInfo[playerid][pFreezed] = 0;
    TogglePlayerControllable(playerid, true);
    return 1;
}

ChangeVehiclePaintjobEx(vehicleid, id); public ChangeVehiclePaintjobEx(vehicleid, id)
{
    ChangeVehicleColor(vehicleid,1,1);
    ChangeVehiclePaintjob(vehicleid, id);
    //VehicleInfo[vehicleid][vPaintjob] = id;
    return 1;
}

function OnActorCreated(dynamicactorid)
{
    if (dynamicactorid == -1 || !AktorBilgi[dynamicactorid][dynamicActorExists])
        return 0;

    AktorBilgi[dynamicactorid][dynamicActorID] = cache_insert_id();

    Save_Dynamic_Actor(dynamicactorid);
    return 1;
}

LoadDynamicActors(); public LoadDynamicActors()
{
    new animationstring[200];
    for(new i, j = cache_num_rows(); i != j; i++)
    {
        if(i < MAX_DYNAMIC_ACTORS)
        {
            AktorBilgi[i][dynamicActorExists] = true;
            cache_get_value_int(i, "aID", AktorBilgi[i][dynamicActorID]);
            cache_get_value_float(i, "aX", AktorBilgi[i][dynamicActorPos][0]);
            cache_get_value_float(i, "aY", AktorBilgi[i][dynamicActorPos][1]);
            cache_get_value_float(i, "aZ", AktorBilgi[i][dynamicActorPos][2]);
            cache_get_value_float(i, "aA", AktorBilgi[i][dynamicActorPos][3]);
            cache_get_value_int(i, "aVW", AktorBilgi[i][dynamicActorVW]);
            cache_get_value_int(i, "aINT", AktorBilgi[i][dynamicActorInt]);
            cache_get_value_int(i, "aSkin", AktorBilgi[i][dynamicActorSkin]);
            cache_get_value(i, "aName", AktorBilgi[i][dynamicActorName], 32);
            cache_get_value(i, "anim", animationstring);
            sscanf(animationstring, "p<|>s[36]s[36]d",
            AktorBilgi[i][dynamicActorAnimLib],
            AktorBilgi[i][dynamicActorAnimName],
            AktorBilgi[i][dynamicActorAnimLoop]);
            Refresh_Dynamic_Actor(i);
            Iter_Add(Aktorler, i);
        }
    }
    return 1;
}

stock Create_Dynamic_Actor(playerid, aname[32], skin)
{
    new i = Iter_Free(Aktorler);
    Iter_Add(Aktorler, i);

    if (!AktorBilgi[i][dynamicActorExists])
    {
        AktorBilgi[i][dynamicActorExists] = true;

        AktorBilgi[i][dynamicActorSkin] = skin;

        format(AktorBilgi[i][dynamicActorName], 32, aname);

        GetPlayerPos(playerid, AktorBilgi[i][dynamicActorPos][0], AktorBilgi[i][dynamicActorPos][1], AktorBilgi[i][dynamicActorPos][2]);
        GetPlayerFacingAngle(playerid, AktorBilgi[i][dynamicActorPos][3]);

        AktorBilgi[i][dynamicActorPos][0] = AktorBilgi[i][dynamicActorPos][0] + (1.5 * floatsin(-AktorBilgi[i][dynamicActorPos][3], degrees));
        AktorBilgi[i][dynamicActorPos][1] = AktorBilgi[i][dynamicActorPos][1] + (1.5 * floatcos(-AktorBilgi[i][dynamicActorPos][3], degrees));

        AktorBilgi[i][dynamicActorVW] = GetPlayerVirtualWorld(playerid);
        AktorBilgi[i][dynamicActorAnimLoop] = -1;

        Refresh_Dynamic_Actor(i);

        mysql_format(ourConnection, queryx, sizeof(queryx), "INSERT INTO actors (aSkin) VALUES ('%d')",skin);
        mysql_tquery(ourConnection, queryx, "OnActorCreated", "d", i);
        return i;
    }
    return -1;
}

stock Remove_Dynamic_Actor(dynamicactorid)
{
    if (dynamicactorid != -1 && AktorBilgi[dynamicactorid][dynamicActorExists])
    {
        DestroyDynamicActor(AktorBilgi[dynamicactorid][dynamicActor]);

        Iter_Remove(Aktorler, dynamicactorid);

        new string[120];

        format(string, sizeof(string), "DELETE FROM `actors` WHERE `aID` = '%d'", AktorBilgi[dynamicactorid][dynamicActorID]);
        mysql_tquery(ourConnection, string);

        if (IsValidDynamic3DTextLabel(AktorBilgi[dynamicactorid][dynamicActorLabel])) DestroyDynamic3DTextLabelEx(AktorBilgi[dynamicactorid][dynamicActorLabel]);

        AktorBilgi[dynamicactorid][dynamicActorExists] = false;
        AktorBilgi[dynamicactorid][dynamicActorID] = 0;
    }
    return 1;
}

stock Refresh_Dynamic_Actor(dynamicactorid)
{
    if (dynamicactorid != -1 && AktorBilgi[dynamicactorid][dynamicActorExists])
    {
        if(IsValidDynamic3DTextLabel(AktorBilgi[dynamicactorid][dynamicActorLabel]))
            DestroyDynamic3DTextLabelEx(AktorBilgi[dynamicactorid][dynamicActorLabel]);

        new string[180];

        format(string, sizeof(string), "%s (%d)", AktorBilgi[dynamicactorid][dynamicActorName], dynamicactorid);

        AktorBilgi[dynamicactorid][dynamicActorLabel] = CreateDynamic3DTextLabel(string, -1, AktorBilgi[dynamicactorid][dynamicActorPos][0], AktorBilgi[dynamicactorid][dynamicActorPos][1], AktorBilgi[dynamicactorid][dynamicActorPos][2]+0.9, 8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, AktorBilgi[dynamicactorid][dynamicActorVW]);
        AktorBilgi[dynamicactorid][dynamicActor] = CreateDynamicActor(AktorBilgi[dynamicactorid][dynamicActorSkin], AktorBilgi[dynamicactorid][dynamicActorPos][0], AktorBilgi[dynamicactorid][dynamicActorPos][1], AktorBilgi[dynamicactorid][dynamicActorPos][2], AktorBilgi[dynamicactorid][dynamicActorPos][3]);
        SetActorInvulnerable(AktorBilgi[dynamicactorid][dynamicActor], 0);
        SetDynamicActorVirtualWorld(AktorBilgi[dynamicactorid][dynamicActor], AktorBilgi[dynamicactorid][dynamicActorVW]);
        if(AktorBilgi[dynamicactorid][dynamicActorAnimLoop] > -1) ApplyDynamicActorAnimation(AktorBilgi[dynamicactorid][dynamicActorID], AktorBilgi[dynamicactorid][dynamicActorAnimLib], AktorBilgi[dynamicactorid][dynamicActorAnimName], 4.1, AktorBilgi[dynamicactorid][dynamicActorAnimLoop], 0, 0, 0, 0);
    }
    return 1;
}

stock Save_Dynamic_Actor(dynamicactorid)
{
    new query[1000];
    mysql_format(ourConnection, query, sizeof(query), "UPDATE `actors` SET `aX` = '%.4f', `aY` = '%.4f', `aZ` = '%.4f', `aA` = '%.4f', `aINT` = '%d', `aVW` = '%d', `aSkin` = '%d', `aName` = '%e', `anim` = '%e|%e|%d' WHERE `aID` = '%d'",
        AktorBilgi[dynamicactorid][dynamicActorPos][0],
        AktorBilgi[dynamicactorid][dynamicActorPos][1],
        AktorBilgi[dynamicactorid][dynamicActorPos][2],
        AktorBilgi[dynamicactorid][dynamicActorPos][3],
        AktorBilgi[dynamicactorid][dynamicActorInt],
        AktorBilgi[dynamicactorid][dynamicActorVW],
        AktorBilgi[dynamicactorid][dynamicActorSkin],
        AktorBilgi[dynamicactorid][dynamicActorName],
        AktorBilgi[dynamicactorid][dynamicActorAnimLib],
        AktorBilgi[dynamicactorid][dynamicActorAnimName],
        AktorBilgi[dynamicactorid][dynamicActorAnimLoop],
        AktorBilgi[dynamicactorid][dynamicActorID]);

    return mysql_tquery(ourConnection, query);
}

Get_Nearest_Dynamic_Actor(playerid)
{
    new Float:fDistance[2] = {MAX_ACTORS_RANGE, 0.0}, iIndex = -1;
    for (new i = 0; i < MAX_DYNAMIC_ACTORS; i ++) if (AktorBilgi[i][dynamicActorExists] && GetPlayerVirtualWorld(playerid) == AktorBilgi[i][dynamicActorVW])
    {
        fDistance[1] = GetPlayerDistanceFromPoint(playerid, AktorBilgi[i][dynamicActorPos][0], AktorBilgi[i][dynamicActorPos][1], AktorBilgi[i][dynamicActorPos][2]);

        if (fDistance[1] < fDistance[0])
        {
            fDistance[0] = fDistance[1];
            iIndex = i;
        }
    }
    return iIndex;
}

flags:aktoryarat(CMD_jamyPlus);
CMD:aktoryarat(playerid, params[])
{
    if(!PlayerInfo[playerid][pAdmin]) return 0;

    static id = -1, aname[32], skin;
    if(sscanf(params, "s[32]d", aname, skin)) return KullanimMesajiC(playerid, "/aktoryarat [aktor adi] [skin id]");

    if(skin < 0) return HataMesajiC(playerid, "Hatalý parametre giriþi.");
    id = Create_Dynamic_Actor(playerid, aname, skin);

    if (id == -1) return HataMesajiC(playerid, "Sunucu dinamik aktör limitine ulaþtý.");

    BasariMesaji(playerid, "Baþarýyla aktör yarattýnýz. ID: %d - Skin: %d", id, skin);
    return 1;
}
flags:aktorsil(CMD_jamyPlus);
CMD:aktorsil(playerid, params[])
{
    if(!PlayerInfo[playerid][pAdmin]) return 0;

    static id = 0;

    if (sscanf(params, "d", id)) return KullanimMesajiC(playerid, "/aktorsil [actor id]");

    if ((id < 0 || id >= MAX_DYNAMIC_ACTORS) || !AktorBilgi[id][dynamicActorExists]) return HataMesajiC(playerid, "Hatalý aktor ID giriþi yaptýnýz.");

    Remove_Dynamic_Actor(id);
    SunucuMesaji(playerid, "%d nolu aktörü baþarýyla sildiniz.", id);
    return 1;
}
flags:aktorlerisil(CMD_jamyPlus);
CMD:aktorlerisil(playerid)
{
    if(!PlayerInfo[playerid][pAdmin]) return 0;
    for (new i = 0; i != MAX_DYNAMIC_ACTORS; i ++) if (AktorBilgi[i][dynamicActorExists]) Remove_Dynamic_Actor(i);

    SunucuMesajiC(playerid, "Tüm aktörleri baþarýyla kaldýrdýnýz.");
    return 1;
}

flags:aktoranimsil(CMD_jamyPlus);
CMD:aktoranimsil(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 2) return 0;
    new dynamicactorid;

    if(sscanf(params, "d", dynamicactorid)) return KullanimMesajiC(playerid, "/aktoranimsil [aktor id]");
    if(!AktorBilgi[dynamicactorid][dynamicActorExists]) return HataMesajiC(playerid, "Belirttiðiniz ID'de aktör bulunamadý.");

    AktorBilgi[dynamicactorid][dynamicActorAnimLoop] = -1;
    Save_Dynamic_Actor(dynamicactorid);
    ClearDynamicActorAnimations(dynamicactorid);
    BasariMesaji(playerid, "%d nolu aktörün animasyonlarýný temizledin.", dynamicactorid);
    return 1;
}

flags:aktorgit(CMD_jamyPlus);
CMD:aktorgit(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 11) return 0;
    new dynamicactorid;

    if(sscanf(params, "d", dynamicactorid)) return KullanimMesajiC(playerid, "/aktorgit [aktor id]");
    if(!AktorBilgi[dynamicactorid][dynamicActorExists]) return HataMesajiC(playerid, "Belirttiðiniz ID'de aktör bulunamadý.");

    SetPlayerPos(playerid, AktorBilgi[dynamicactorid][dynamicActorPos][0], AktorBilgi[dynamicactorid][dynamicActorPos][1], AktorBilgi[dynamicactorid][dynamicActorPos][2]);
    AC_SetPlayerVirtualWorld(playerid, AktorBilgi[dynamicactorid][dynamicActorVW]);
    BasariMesaji(playerid, "%d nolu aktöre ýþýnlandýn.", dynamicactorid);
    return 1;
}

flags:aktoranim(CMD_jamyPlus);
CMD:aktoranim(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 10) return 0;
    new dynamicactorid, aL[36], aN[36], animloop;

    if(sscanf(params, "ds[36]s[36]d", dynamicactorid, aL, aN, animloop))
        return KullanimMesajiC(playerid, "/aktoranim [aktor id] [animlib] [animname] [animloop(0,1)]");

    if(!AktorBilgi[dynamicactorid][dynamicActorExists]) return HataMesajiC(playerid, "Belirttiðiniz ID'de aktör bulunamadý.");
    if(0 < animloop > 1) return HataMesajiC(playerid, "Loop deðeri 0-1 arasýnda olmalýdýr.");
    if(strlen(params) < 4) return KullanimMesajiC(playerid, "/aktoranim [aktor id] [animlib] [animname] [animloop(0,1)]");

    format(AktorBilgi[dynamicactorid][dynamicActorAnimLib], 36, aL);
    format(AktorBilgi[dynamicactorid][dynamicActorAnimName], 36, aN);
    AktorBilgi[dynamicactorid][dynamicActorAnimLoop] = animloop;
    Save_Dynamic_Actor(dynamicactorid);
    ApplyDynamicActorAnimation(AktorBilgi[dynamicactorid][dynamicActor], AktorBilgi[dynamicactorid][dynamicActorAnimLib], AktorBilgi[dynamicactorid][dynamicActorAnimName], 4.1, AktorBilgi[dynamicactorid][dynamicActorAnimLoop], 0, 0, 0, 0);
    BasariMesaji(playerid, "%d nolu aktöre animasyon ekledin.", dynamicactorid);
    return 1;
}

flags:yakindakiaktor(CMD_jamyPlus);
CMD:yakindakiaktor(playerid, params[])
{
    if(!PlayerInfo[playerid][pAdmin]) return 0;
    new id = Get_Nearest_Dynamic_Actor(playerid);
    if (id == -1) return HataMesajiC(playerid, "Herhangi bir aktöre yakýn deðilsiniz.");
    AC_SetPlayerCheckpoint(playerid, AktorBilgi[id][dynamicActorPos][0], AktorBilgi[id][dynamicActorPos][1], AktorBilgi[id][dynamicActorPos][2], 2.5);
    SunucuMesajiC(playerid, "Yakýnýnýzdaki aktör haritanýzda iþaretlendi.");
    return 1;
}

getRandomPlayer()
{
    new count = 0, randomid = INVALID_PLAYER_ID;

    while(randomid == INVALID_PLAYER_ID || !IsPlayerConnected(randomid) || !PlayerInfo[randomid][pLogged])
    {
        count++;
        randomid = random(MAX_PLAYERS);
        if (count > 200 || IsPlayerConnected(randomid)) break;
    }
    return randomid;
}

DevletAraci(v)
{
    switch(Faction_GetType(VehicleInfo[v][vFaction]))
    {
        case 1: return 1;
        case 2: return 1;
        case 3: return 1;
        case 4: return 1;
        case 5: return 0;
        case 6: return 0;
    }
    return 0;
}

flags:akelepce(CMD_jamyPlus);
CMD:akelepce(playerid, params[])
{
    new id;
    if(sscanf(params, "k<m>", id))return
        KullanimMesaji(playerid, "/akelepce [id/isim]");

    if(!IsPlayerConnected(id))return
        HataMesaji(playerid, "Geçersiz ID.");

    PlayerInfo[id][pCuffed] = !PlayerInfo[id][pCuffed];

    if(PlayerInfo[id][pCuffed])
    {
        if(PlayerInfo[id][pMobile] != -1) {
            Phone_HangupCall(id);
            SendClientMessageEx(id, COLOR_GREY, "Kelepçelendiðiniz için telefon görüþmeniz sonlandýrýldý.");
        }

        SetPlayerSpecialAction(id, SPECIAL_ACTION_CUFFED);
        SetPlayerAttachedObject(id, 9, 19418, 6, -0.011000, 0.028000, -0.022000, -15.600012, -33.699977, -81.700035, 0.891999, 1.000000, 1.168000);
    }
    else
    {
        SetPlayerSpecialAction(id, SPECIAL_ACTION_NONE);
        RemovePlayerAttachedObject(id, 9);
    }
    return 1;
}

flags:amdc(CMD_jamyPlus);
CMD:amdc(playerid)
{
    if(PlayerInfo[playerid][pAdmin] > 11)
        Dialog_Show(playerid, DialogMDC, DIALOG_STYLE_TABLIST_HEADERS, "Mobile Data Computer", "Seçenek\tTip\nArama\tSivil\nArama\tPlaka\nArama\tNumara\nAPB\tEkle\nAPB\tListe\nCCW Lisansý\tDüzenle\nMülk\tÝþletme\nMülk\tEv\nSabýka Ekle\tSivil\nSabýka Kontrol\tSivil\nCeza Kontrol\tSivil\nÝhbar Listesi\tSon 12 ihbarý görmenizi saðlar.\nÇalýnan Araç Listesi\tSon 20 çalýnan aracý görmenizi saðlar.", "Ýleri", "Ýptal");
    return 1;
}

// WIGGYDEN GELENLER
CMD:mdc(playerid, params[])
{

    new buildingid = GetPlayerBuilding(playerid, true), vehid = GetPlayerVehicleID(playerid);

    if(IsPlayerInAnyVehicle(playerid) && (Faction_GetType(VehicleInfo[vehid][vFaction]) == POLICE || Faction_GetType(VehicleInfo[vehid][vFaction]) == GOVERNMENT) || (BuildingInfo[buildingid][bFaction] == 0 || BuildingInfo[buildingid][bFaction] == 2))
        return Dialog_Show(playerid, DialogMDC, DIALOG_STYLE_TABLIST_HEADERS, "Mobile Data Computer", "Seçenek\tTip\nArama\tSivil\nArama\tPlaka\nArama\tNumara\nAPB\tEkle\nAPB\tListe\nCCW Lisansý\tDüzenle\nMülk\tÝþletme\nMülk\tEv\nSabýka Ekle\tSivil\nSabýka Kontrol\tSivil\nCeza Kontrol\tSivil\nÝhbar Listesi\tSon 12 ihbarý görmenizi saðlar.\nÇalýnan Araç Listesi\tSon 20 çalýnan aracý görmenizi saðlar.\nSigorta Kontrol\tBir aracýn sigorta durumunu görmenizi saðlar.", "Ýleri", "Ýptal");

    HataMesajiC(playerid, "Bu komutu kullanmak için bir polis binasýnýn veya aracýnýn içinde olmalýsýnýz.");
    return 1;
}

MDC_Goster(playerid)
{
    if(Faction_GetType(PlayerInfo[playerid][pFaction]) == POLICE) {
        if(!PlayerInfo[playerid][pUsingMDC]) PlayerAME(playerid, "MDC sistemine giriþ yapar.");
        return Dialog_Show(playerid, DialogMDC, DIALOG_STYLE_TABLIST_HEADERS, "Mobile Data Computer", "Seçenek\tTip\nArama\tSivil\nArama\tPlaka\nArama\tNumara\nAPB\tEkle\nAPB\tListe\nCCW Lisansý\tDüzenle\nMülk\tÝþletme\nMülk\tEv\nSabýka Ekle\tSivil\nSabýka Kontrol\tSivil\nCeza Kontrol\tSivil\nÝhbar Listesi\tSon 12 ihbarý görmenizi saðlar.\nÇalýnan Araç Listesi\tSon 20 çalýnan aracý görmenizi saðlar.", "Ýleri", "Ýptal");
    } else if(Faction_GetType(PlayerInfo[playerid][pFaction]) == GOVERNMENT && PlayerInfo[playerid][pRank] <= 3) {
        if(!PlayerInfo[playerid][pUsingMDC]) PlayerAME(playerid, "MDC sistemine giriþ yapar.");
        return Dialog_Show(playerid, DialogMDC, DIALOG_STYLE_TABLIST_HEADERS, "Mobile Data Computer", "Seçenek\tTip\nArama\tSivil\nArama\tPlaka\nArama\tNumara\n{000000}APB\t{000000}Ekle\n{000000}APB\t{000000}Liste\n{000000}CCW Lisansý\t{000000}Düzenle\nMülk\tÝþletme\nMülk\tEv\nSabýka Ekle\tSivil\nSabýka Kontrol\tSivil\nCeza Kontrol\tSivil", "Ýleri", "Ýptal");
    } else return HataMesajiC(playerid, "Bu komutu kullanamazsýn.");
}

// AMPER

stock GetAvailableSeat(vehicleid, start = 1)
{
    new seats = GetVehicleMaxSeats(vehicleid);

    for (new i = start; i < seats; i ++) if (!IsVehicleSeatUsed(vehicleid, i)) {
        return i;
    }
    return -1;
}

stock InSafeZone(playerid)
{
    for(new i; i < sizeof(GuvenliBolge); ++i)
    {
        if(IsPlayerInDynamicArea(playerid, GuvenliBolge[i][Rectangle])) return 1;
    }

    foreach(new id : Dealers)
    {
        if(DealerInfo[id][dExists])
        {
            if(IsPlayerInRangeOfPoint(playerid, 75.0, DealerInfo[id][dPosX], DealerInfo[id][dPosY], DealerInfo[id][dPosZ]))
                return 1;
        }
    }

    new gise = GiseBul(playerid);
    if(gise != -1) return 1;
    return 0;
}

stock InSafeZoneVeh(vehicleid)
{
    new Float:x, Float:y, Float:z;
    GetVehicleDistanceFromPoint(vehicleid, x, y, z);
    for(new i; i < sizeof(GuvenliBolge); ++i)
    {
        if(IsPointInDynamicArea(GuvenliBolge[i][Rectangle], x, y, z)) return 1;
    }

    foreach(new id : Dealers)
    {
        if(DealerInfo[id][dExists])
        {
            if(IsVehicleRangeOfPoint(vehicleid, 50.0, DealerInfo[id][dPosX], DealerInfo[id][dPosY], DealerInfo[id][dPosZ]))
                return 1;
        }
    }

    new gise = GiseBulVeh(vehicleid);
    if(gise != -1) return 1;
    return 0;
}

IsPlayerInRangeOfDynamicObject(playerid, objectid, Float:radius)
{
    if(IsValidDynamicObject(objectid))
    {
        new
            interiorid = Streamer_GetIntData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_INTERIOR_ID),
            worldid = Streamer_GetIntData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_WORLD_ID),
            Float:x,
            Float:y,
            Float:z;

        GetDynamicObjectPos(objectid, x, y, z);

        if(interiorid == -1) {
            interiorid = GetPlayerInterior(playerid);
        } if(worldid == -1) {
            worldid = GetPlayerVirtualWorld(playerid);
        }

        if(IsPlayerInRangeOfPoint(playerid, radius, x, y, z) && GetPlayerInterior(playerid) == interiorid && GetPlayerVirtualWorld(playerid) == worldid)
        {
            return 1;
        }
    }

    return 0;
}

flags:oylama(CMD_iglead);
CMD:oylama(playerid, params[])
{
    Dialog_Show(playerid, Oylama, DIALOG_STYLE_LIST, "SA-RP - Oy Sistemi", "Oylama Durum\nOylama Sebebi\nOylama Seçeneði Sayýsý\nOylama Seçenekleri\nSeçenekleri Sýfýrla\nTüm Oylamayý Sýfýrla", "Seç", "Ýptal");
    return 1;
}

Dialog:Oylama(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        switch(listitem)
        {
            case 0:
            {
                if(!SunucuBilgi[OylamaSebebi])
                    return HataMesajiC(playerid, "Oylama sebebi giriþi yapýlmamýþ.");

                if(SunucuBilgi[Oylama])
                {
                    BasariMesaji(playerid, "Oy verme sistemi pasife alýndý.");
                    SunucuBilgi[Oylama] = 0;
                }
                else
                {
                    BasariMesaji(playerid, "Oy verme sistemi aktif edildi.");
                    SunucuBilgi[Oylama] = 1;
                }
            }
            case 1:
            {
                Dialog_Show(playerid, OylamaSebebi, DIALOG_STYLE_INPUT, "SA-RP - Oylama", "Oylama sebebini girin:", "Seç", "Ýptal");
            }
            case 2:
            {
                Dialog_Show(playerid, OylamaSecenekSayi, DIALOG_STYLE_INPUT, "SA-RP - Oylama", "Oylama seçenek sayýsýný girin:", "Seç", "Ýptal");
            }
            case 3:
            {
                if(!SunucuBilgi[OylamaSecenekSayi])
                    return HataMesajiC(playerid, "Oylama sistemi seçenek sayýsý yapýlandýrýlmamýþ.");

                new string[300];

                for(new i; i < 5; ++i)
                {
                    format(string, 300, "%s%s\n", string, OylamaSecenek[i]);
                    if(SunucuBilgi[OylamaSecenekSayi] == i + 1) break;
                }

                Dialog_Show(playerid, OylamaSecenekleri, DIALOG_STYLE_LIST, "SA-RP - Oylama", string, "Seç", "Ýptal");
            }
            case 4:
            {
                format(OylamaSecenek[0], 32, "Seçenek Yok");
                format(OylamaSecenek[1], 32, "Seçenek Yok");
                format(OylamaSecenek[2], 32, "Seçenek Yok");
                format(OylamaSecenek[3], 32, "Seçenek Yok");
                format(OylamaSecenek[4], 32, "Seçenek Yok");
                SunucuBilgi[Oylama] = 0;
                BasariMesaji(playerid, "Oy seçeneklerini sýfýrlayýp sistemi pasife aldýnýz, yeniden seçenek belirlemelisiniz.");
            }
            case 5:
            {
                Dialog_Show(playerid, OylamaSifirla, DIALOG_STYLE_MSGBOX, "SA-RP - Oylama Sýfýrla", "Dikkat! Tüm oylarý, seçenekleri ve tüm karakterlerin oy verme durumunu sýfýrlayacaksýnýz. Bu iþlemin geri dönüþü yoktur!", "Onay", "Ýptal");
            }
        }
    }
    return 1;
}

Dialog:OylamaSebebi(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        format(SunucuBilgi[OylamaSebebi], 120, inputtext);
        BasariMesaji(playerid, "Oylama sebebini baþarýyla deðiþtirdin.");
    }
    return 1;
}

Dialog:OylamaSecenekleri(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        SetPVarInt(playerid, "oylamaid", listitem);
        Dialog_Show(playerid, OylamaSecenekleriGirdi, DIALOG_STYLE_INPUT, "SA-RP - Oylama", "Seçenek girin:", "Seç", "Ýptal");
    }
    return 1;
}

Dialog:OylamaSecenekleriGirdi(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new id = GetPVarInt(playerid, "oylamaid");
        format(OylamaSecenek[id], 32, inputtext);
        BasariMesaji(playerid, "Oylama seçeneðini baþarýyla deðiþtirdin.");
    }
    DeletePVar(playerid, "oylamaid");
    return 1;
}

Dialog:OylamaSecenekSayi(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        if(!IsNumeric(inputtext)) return HataMesajiC(playerid, "Sadece sayýsal deðer giriþi yapýlabilir.");

        if(strval(inputtext) > 5 || strval(inputtext) < 2)
            return HataMesajiC(playerid, "En az 2, en fazla 5 seçenek olabilir.");

        SunucuBilgi[OylamaSecenekSayi] = strval(inputtext);
        BasariMesaji(playerid, "Oylama seçenek sayýsýný %d olarak deðiþtirdin.", strval(inputtext));
    }
    return 1;
}

flags:oylamadurum(CMD_iglead);
CMD:oylamadurum(playerid, params[])
{
    new string[500];
    for(new i; i < 5; ++i)
    {
        format(string, 500, "%s%s - %d adet oy\n", string, OylamaSecenek[i], SunucuBilgi[VerilenOy][i]);
        if(SunucuBilgi[OylamaSecenekSayi] == i + 1) break;
    }
    Dialog_Show(playerid, VerilenOy, DIALOG_STYLE_LIST, SunucuBilgi[OylamaSebebi], string, "OK", "");
    return 1;
}

flags:oyver(CMD_USER);
CMD:oyver(playerid, params[])
{
    if(!SunucuBilgi[Oylama])
        return HataMesajiC(playerid, "Þu anda herhangi bir oy verme iþlemi bulunmuyor.");

    if(PlayerInfo[playerid][pLevel] < 3)
        return HataMesajiC(playerid, "3 seviye altý kullanýcýlar bu sistemden yararlanamaz.");

    if(GetPlayerVirtualWorld(playerid) != 5550 && GetPlayerInterior(playerid) != 1)
        return HataMesajiC(playerid, "City Hall binasýndaki sandýklara yakýn deðilsiniz.");

    if(PlayerInfo[playerid][pAge] < 18)
        return HataMesajiC(playerid, "Oy vermek için yaþýnýzýn 18 yaþýndan yüksek olmasý gerekiyor.");

    if(PlayerInfo[playerid][OyVerdim]) return HataMesajiC(playerid, "Zaten oy vermiþsiniz.");

    new string[300];
    for(new i; i < 5; ++i)
    {
        format(string, 300, "%s%s\n", string, OylamaSecenek[i]);
        if(SunucuBilgi[OylamaSecenekSayi] == i + 1) break;
    }
    Dialog_Show(playerid, OyVer, DIALOG_STYLE_LIST, SunucuBilgi[OylamaSebebi], string, "Evet", "Hayýr");
    return 1;
}

Dialog:OyVer(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        PlayerInfo[playerid][OyVerdim] = 1;
        SunucuBilgi[VerilenOy][listitem] += 1;
        BasariMesaji(playerid, "%s seçeneðine baþarýyla olumlu yönde oy verdin.", OylamaSecenek[listitem]);
    }
    return 1;
}

Dialog:OylamaSifirla(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        foreach(new i : Player) if(IsPlayerConnected(i) && PlayerInfo[i][pLogged])
            PlayerInfo[i][OyVerdim] = 0;

        mysql_format(ourConnection, queryx, sizeof(queryx), "UPDATE characters SET oyverdi = '0'");
        mysql_tquery(ourConnection, queryx);

        format(OylamaSecenek[0], 32, "Seçenek Yok");
        format(OylamaSecenek[1], 32, "Seçenek Yok");
        format(OylamaSecenek[2], 32, "Seçenek Yok");
        format(OylamaSecenek[3], 32, "Seçenek Yok");
        format(OylamaSecenek[4], 32, "Seçenek Yok");

        for(new x; x < 5; ++x) SunucuBilgi[VerilenOy][x] = 0;

        Taxes_Update();

        SunucuBilgi[Oylama] = 0;
        SunucuBilgi[OylamaSecenekSayi] = 0;
        SunucuBilgi[OylamaSebebi] = 0;
        pc_cmd_a(playerid, "Oylama sistemi tarafýmca sýfýrlandý. Tüm oylar ve veriler baþarýyla silindi.");
    }
    else if(!response) SunucuMesajiC(playerid, "Oylama sistemini sýfýrlamaktan vazgeçtin, iyi tercih.");
    return 1;
}

TeleportToCoords(playerid, Float:x, Float:y, Float:z, Float:angle, interiorid, worldid, bool:freeze = false, bool:vehicle = true)
{
    new vehicleid = GetPlayerVehicleID(playerid);

    if((vehicle) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
    {
        foreach(Player, i)
        {
            if(IsPlayerInVehicle(i, vehicleid))
            {
                SetPlayerInterior(i, interiorid);
                SetPlayerVirtualWorld(i, worldid);
            }
        }

        TogglePlayerControllable(playerid, 1);
        SetVehiclePos(vehicleid, x, y, z);
        SetVehicleZAngle(vehicleid, angle);
        SetVehicleVirtualWorld(vehicleid, worldid);
        LinkVehicleToInterior(vehicleid, interiorid);
    }
    else
    {
        SetFreezePos(playerid, x, y, z);
        SetPlayerInterior(playerid, interiorid);
        AC_SetPlayerVirtualWorld(playerid, worldid);
        SetPlayerFacingAngle(playerid, angle);
        SetCameraBehindPlayer(playerid);
    }

    if((freeze) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
    {
        SetTimerEx("VehicleUnfreeze", 1000, false, "iifffii", playerid, GetPlayerVehicleID(playerid), x, y, z, interiorid, worldid);
        //GameTextForPlayer(playerid, "~w~OBJELER YUKLENIYOR...", 3000, 3);
        TogglePlayerControllable(playerid, 0);
    }
}

VehicleUnfreeze(playerid, vehicleid, Float:x, Float:y, Float:z, interior, world);
public VehicleUnfreeze(playerid, vehicleid, Float:x, Float:y, Float:z, interior, world)
{
    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER && IsPlayerInRangeOfPoint(playerid, 100.0, x, y, z) && GetPlayerInterior(playerid) == interior && GetPlayerVirtualWorld(playerid) == world)
    {
        SetVehiclePos(vehicleid, x, y, z);
    }

    TogglePlayerControllable(playerid, 1);
}

// Ekip sistemi
flags:ekip(CMD_LSPD);
CMD:ekip(playerid, params[])
{
    if(Faction_GetType(PlayerInfo[playerid][pFaction]) != POLICE)
        return HataMesajiC(playerid, "Polis deðilsin.");
    if(!PlayerInfo[playerid][pFactionDuty]) return HataMesajiC(playerid, "Bu komutu kullanmak için iþbaþýnda olmalýsýnýz.");
    new secenek[64], string[128];
    if(sscanf(params, "s[64]S()[128]", secenek, string))
        return KullanimMesajiC(playerid, "/ekip [kur/liste/sil/ayril]");

    if(!strcmp(secenek, "kur", true))
    {
        new merkez, kisaltma[12], id, ekip1, ekip2, ekip3, ekipno[12], tamNumara[20];
        if(sscanf(string, "ds[12]s[12]I(900)I(900)I(900)", merkez, kisaltma, ekipno, ekip1, ekip2, ekip3))
            return KullanimMesajiC(playerid, "/ekip <kur> [merkez no] [birim kodu] [ekip kodu] [ekip üyesi] [ekip üyesi] [ekip üyesi]");

        if(merkez == 0)
            return HataMesajiC(playerid, "Geçersiz merkez ID girdiniz.");

        if(playerid == ekip1 || playerid == ekip2 || playerid == ekip3) return HataMesajiC(playerid, "Geçersiz ekip üyesi ID girdiniz.");

        if(Ekip(playerid) != -1) return HataMesajiC(playerid, "Zaten bir ekiptesiniz.");

        if(ekip1 != 900)
        {
            if(!IsPlayerConnected(ekip1) || Faction_GetType(PlayerInfo[ekip1][pFaction]) != POLICE || Ekip(ekip1) != -1 || !PlayerInfo[ekip1][pFactionDuty])
                return HataMesajiC(playerid, "Geçersiz birincil ekip üyesi girildi.");
        }

        if(ekip2 != 900)
        {
            if(!IsPlayerConnected(ekip2) || Faction_GetType(PlayerInfo[ekip2][pFaction]) != POLICE || Ekip(ekip2) != -1 || !PlayerInfo[ekip2][pFactionDuty])
                return HataMesajiC(playerid, "Geçersiz ikincil ekip üyesi girildi.");
        }

        if(ekip3 != 900)
        {
            if(!IsPlayerConnected(ekip3) || Faction_GetType(PlayerInfo[ekip3][pFaction]) != POLICE  || Ekip(ekip3) != -1 || !PlayerInfo[ekip3][pFactionDuty])
                return HataMesajiC(playerid, "Geçersiz üçüncü ekip üyesi girildi.");
        }
        format(tamNumara, 20, "%d-%s-%s", merkez, kisaltma, ekipno);
        foreach(new i: Ekipler) if(EkipBilgi[i][eKullanim])
        {
            if(!strcmp(EkipBilgi[i][eTamNumara],tamNumara, true))
                return HataMesajiC(playerid, "Bu ekip no zaten sahada bulunuyor.");
        }

        id = Ekip_Ekle(playerid, merkez, kisaltma, ekip1, ekip2, ekip3, ekipno);

        if(id == -1)
            return HataMesajiC(playerid, "Sunucuda maksimum sayýda ekip var.");

        SunucuMesaji(playerid, "Ekip baþarýyla eklendi. (%d-%s-%s)", merkez, kisaltma, ekipno);
        new uyeString[100], count = 0;
        for(new j = 1; j < 4; j++) {
            if(j != 3) {
                if(EkipBilgi[id][eUye][j] != -1) {
                    format(uyeString, 100, "%s%s ", uyeString, ReturnRoleplayName(EkipBilgi[id][eUye][j]));
                    count++;
                }
            } else {
                if(EkipBilgi[id][eUye][j] != -1) {
                    format(uyeString, 100, "%s%s ", uyeString, ReturnRoleplayName(EkipBilgi[id][eUye][j]));
                    count++;
                }
            }
        }
        if(!count)
            SendFactionMessage(0, "HQ: %s %s, %d-%s-%s ekip kodu altýnda sahaya giriþ yapýyor.", fRanks[0][PlayerInfo[playerid][pRank] - 1], ReturnRoleplayName(playerid), EkipBilgi[id][eMerkez], EkipBilgi[id][eKisaltma], EkipBilgi[id][eNO]);
        else
            SendFactionMessage(0, "HQ: %s, %d-%s-%s ekip kodu altýnda sahaya giriþ yapýyor. Ekip Üyeleri: %s", ReturnRoleplayName(playerid), EkipBilgi[id][eMerkez], EkipBilgi[id][eKisaltma], EkipBilgi[id][eNO], uyeString);
    }

    else if(!strcmp(secenek, "liste", true))
    {
        new sayi = 0, uyeString[128];
        foreach(new i: Ekipler) if(EkipBilgi[i][eKullanim])
        {
            format(uyeString, 128, "");
            if(EkipBilgi[i][eUye][0] != -1)
                format(uyeString, 128, "%s%s - ", uyeString, ReturnRoleplayName(EkipBilgi[i][eUye][0]));
            else
                format(uyeString, 128, "%sYok - ", uyeString);
            if(EkipBilgi[i][eUye][1] != -1)
                format(uyeString, 128, "%s%s - ", uyeString, ReturnRoleplayName(EkipBilgi[i][eUye][1]));
            else
                format(uyeString, 128, "%sYok - ", uyeString);
            if(EkipBilgi[i][eUye][2] != -1)
                format(uyeString, 128, "%s%s - ", uyeString, ReturnRoleplayName(EkipBilgi[i][eUye][2]));
            else
                format(uyeString, 128, "%sYok - ", uyeString);
            if(EkipBilgi[i][eUye][3] != -1)
                format(uyeString, 128, "%s%s - ", uyeString, ReturnRoleplayName(EkipBilgi[i][eUye][3]));
            else
                format(uyeString, 128, "%sYok - ", uyeString);
            SunucuMesaji(playerid, "(#%d) %d-%s-%s | %s", EkipBilgi[i][eID], EkipBilgi[i][eMerkez], EkipBilgi[i][eKisaltma], EkipBilgi[i][eNO], uyeString);//, EkipBilgi[i][eDurum]);
            sayi++;
        }

        if(!sayi)
            return HataMesajiC(playerid, "Sahada ekip bulunmuyor.");
    }

    else if(!strcmp(secenek, "sil", true))
    {
        new id;
        if(sscanf(string, "d", id))
            return KullanimMesajiC(playerid, "/ekip <sil> [ekip ID]"), KullanimMesajiC(playerid, "/ekip liste ile aktif ekiplere bakabilirsiniz.");

        if(!EkipBilgi[id][eKullanim])
            return HataMesajiC(playerid, "Geçersiz ekip ID girdiniz.");

        SendFactionMessage(0, "HQ: %d-%s-%s sahadan ayrýlýyor, ekip kodu müsait durumda.", EkipBilgi[id][eMerkez], EkipBilgi[id][eKisaltma], EkipBilgi[id][eNO]);
        Ekip_Sil(id);
        SunucuMesaji(playerid, "Ekip %d baþarýyla silindi.", id);
    }
    else if(!strcmp(secenek, "ayril", true)) {
        new ekipID = Ekip(playerid);
        if(ekipID != -1) {
            new slot = -1;
            for(new i; i < 4; i++) {
                if(EkipBilgi[ekipID][eUye][i] == playerid) {
                    slot = i;
                    break;
                }
            }
            if(slot != -1) {
                EkipBilgi[ekipID][eUye][slot] = -1;
                EkipBilgi[ekipID][eUyeSayisi]--;
                SendFactionMessage(0, "HQ: %s %s, %s ekip kodundan ayrýlýyor.", fRanks[0][PlayerInfo[playerid][pRank] - 1], ReturnRoleplayName(playerid), EkipBilgi[ekipID][eTamNumara]);
            }
            new str[32];
            if(EkipBilgi[ekipID][eUyeSayisi] <= 0)
            {
                format(str, sizeof str, "sil %d", ekipID);
            } return pc_cmd_ekip(playerid, str);

        } else return HataMesajiC(playerid, "Bu seçeneði kullanmak için bir ekipte olmalýsýn.");
    } else return HataMesajiC(playerid, "Bilinmeyen bir seçenek girdin.");

    return 1;
}

Ekip_Sil(id)
{
    if(!EkipBilgi[id][eKullanim] || id == -1)
        return 0;

    EkipBilgi[id][eKullanim] = false;
    for(new i; i < 4; i++)
        EkipBilgi[id][eUye][i] = -1;
    new ihbar = EkipBilgi[id][eIhbaraGidiyor];
    if(ihbar != -1)
        IhbarInfo[ihbar][ihbarYonlenenEkipSayisi]--;
    if(EkipBilgi[id][eCalintiGidiyor] != -1)
        CalintiInfo[EkipBilgi[id][eCalintiGidiyor]][caYonlenenEkipSayisi]--;
    EkipBilgi[id][eIhbaraGidiyor] = -1;
    EkipBilgi[id][eCalintiGidiyor] = -1;
    EkipBilgi[id][eUyeSayisi] = 0;
    format(EkipBilgi[id][eUyeIsim1], MAX_PLAYER_NAME, "Yok");
    format(EkipBilgi[id][eUyeIsim2], MAX_PLAYER_NAME, "Yok");
    format(EkipBilgi[id][eUyeIsim3], MAX_PLAYER_NAME, "Yok");
    format(EkipBilgi[id][eUyeIsim4], MAX_PLAYER_NAME, "Yok");
    Iter_Remove(Ekipler, id);
    return 1;
}

Ekip_Ekle(playerid, merkez, kisaltma[], ekip1, ekip2, ekip3, ekipnn[])
{
    new i = Ekip_IDBul();
    if(i != -1) {
        Iter_Add(Ekipler, i);
        EkipBilgi[i][eKullanim] = true;
        EkipBilgi[i][eID] = i;
        EkipBilgi[i][eIhbaraGidiyor] = -1;
        EkipBilgi[i][eCalintiGidiyor] = -1;
        EkipBilgi[i][eMerkez] = merkez;
        format(EkipBilgi[i][eNO], 12, "%s", ekipnn);
        format(EkipBilgi[i][eKisaltma], 12, "%s", kisaltma);
        format(EkipBilgi[i][eTamNumara], 20, "%d-%s-%s", merkez, kisaltma, ekipnn);
        EkipBilgi[i][eUye][0] = playerid;
        format(EkipBilgi[i][eUyeIsim1], MAX_PLAYER_NAME, "%s", ReturnRoleplayName(playerid));
        EkipBilgi[i][eUye][1] = ekip1;
        if(ekip1 != -1) {
            format(EkipBilgi[i][eUyeIsim2], MAX_PLAYER_NAME, "%s", ReturnRoleplayName(ekip1));
        }
        if(ekip2 != -1) {
            format(EkipBilgi[i][eUyeIsim3], MAX_PLAYER_NAME, "%s", ReturnRoleplayName(ekip2));
        }
        if(ekip3 != -1) {
            format(EkipBilgi[i][eUyeIsim4], MAX_PLAYER_NAME, "%s", ReturnRoleplayName(ekip3));
        }
        EkipBilgi[i][eUye][2] = ekip2;
        EkipBilgi[i][eUye][3] = ekip3;
        EkipBilgi[i][eUyeSayisi] = 4;
        if(!IsPlayerConnected(ekip1)) {
            EkipBilgi[i][eUye][1] = -1;
            EkipBilgi[i][eUyeSayisi]--;
        }
        if(!IsPlayerConnected(ekip2)) {
            EkipBilgi[i][eUye][2] = -1;
            EkipBilgi[i][eUyeSayisi]--;
        }
        if(!IsPlayerConnected(ekip3)) {
            EkipBilgi[i][eUye][3] = -1;
            EkipBilgi[i][eUyeSayisi]--;
        }
    }
    return i;
}

Ekip_IDBul() {
    new id = Iter_Free(Ekipler);
    return id;
}

Ekip(playerid)
{
    foreach(new i : Ekipler) if(EkipBilgi[i][eKullanim])
    {
        for(new j; j < 4; j++) {
            if(EkipBilgi[i][eUye][j] == playerid)
                return i;
        }
    }
    return -1;
}

Dialog:DialogCK(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        if(isnull(inputtext))
            return HataMesajiC(playerid, "Hatalý onay kodu giriþi, iþlem baþarýsýz.");

        if(!strcmp("EVET", inputtext, true))
        {
            new cesetid = CesetIDBul(playerid);
            if(GetPVarInt(playerid, "CesetBulunamadi") == 1) {
                CesetSil(cesetid);
                DeletePVar(playerid, "CesetBulunamadi");
            }
            CesetInfo[cesetid][cID] = cesetid;
            format(CesetInfo[cesetid][cName], MAX_PLAYER_NAME, "%s", ReturnRoleplayName(playerid));
            CesetInfo[cesetid][cSkin] = PlayerInfo[playerid][pSkin];
            CesetInfo[cesetid][cExists] = 1;
            for(new i; i < MAX_DAMAGES_FOR_PLAYER; i++) {
                if(PlayerDamages[playerid][i][eOccupied]) {
                    CesetInfo[cesetid][cSilah][i] = PlayerDamages[playerid][i][eWeapon];
                    format(CesetBodyPart[cesetid][i], 32, "%s", PlayerDamages[playerid][i][eBodypart]);
                    CesetInfo[cesetid][cOccupied][i] = 1;
                }
                else
                    CesetInfo[cesetid][cOccupied][i] = -1;
            }
            Damages_Reset(playerid);
            GetPlayerPos(playerid, CesetInfo[cesetid][ceX], CesetInfo[cesetid][ceY], CesetInfo[cesetid][ceZ]);
            GetPlayerFacingAngle(playerid, CesetInfo[cesetid][ceA]);
            CesetInfo[cesetid][ceInterior] = GetPlayerInterior(playerid);
            CesetInfo[cesetid][ceVW] = GetPlayerVirtualWorld(playerid);
            GetPVarString(playerid, "OyuncuOlduren", CesetInfo[cesetid][cOlduren], MAX_PLAYER_NAME);
            DeletePVar(playerid, "OyuncuOlduren");
            CesetInfo[cesetid][cBagaj] = 0;
            CesetOlustur(cesetid);
            PlayerInfo[playerid][pTedaviSure] = 0;
            PlayerInfo[playerid][pAgirYarali] = 0;
            PlayerTextDrawHide(playerid, PlayerInfo[playerid][pTextdraws][0]);
            PlayerInfo[playerid][pDeathTime] = 0;

//          foreach(new v : Vehicles) if(IsValidVehicle(v) && VehicleInfo[v][vOwner] == PlayerInfo[playerid][pID]) Vehicle_Despawn(v);
            PlayerInfo[playerid][pBanned] = 1;
            LogYaz(playerid, "CK", -1);
            SetTimerEx("KickTimer", 200, false, "d", playerid);
            foreach(new i: Player) SendFormattedMessage(i, COLOR_ADMIN, "AdmCmd: %s (%s) adlý karakter yasaklandý. Sebep: CK (Kendi Ýsteði) [%s]", ReturnRoleplayName(playerid), PlayerInfo[playerid][pUsername], ReturnDate());
        }
        else HataMesajiC(playerid, "Hatalý onay kodu giriþi, iþlem baþarýsýz.");
    }
    return 1;
}

flags:fine(CMD_GAME2);
CMD:fine(playerid, params[])
{
    new id,cash;

    if(sscanf(params, "dd", id, cash))return
        KullanimMesajiC(playerid, "/fine [id] [miktar] (Negatif deðer girmeyin, para kesme komutu)");

    if(!IsPlayerConnected(id) || !PlayerInfo[id][pLogged])return
        HataMesajiC(playerid, "Geçersiz ID.");

    if(cash < 0) return HataMesajiC(playerid, "Geçersiz deðer.");

    AC_GivePlayerMoney(id, -cash, "/fine");

    LogYaz(playerid, "/fine", id, cash);

    BasariMesaji(id, "%s adlý yetkili $%d paranýza el koydu.", ReturnRoleplayName(playerid), cash);

    foreach(new j : Player) if(IsPlayerConnected(j) && PlayerInfo[j][pLogged] && PlayerInfo[j][pAdmin] >= LEVEL20 && PlayerInfo[j][pAdminAlert])
        SendFormattedMessage(j, COLOR_ADMIN, "AdmCmd: %s $%d miktarýndaki parayý %s kiþisinden kesti.", ReturnRoleplayName(playerid), cash, ReturnRoleplayName(id));

    return 1;
}

CMD:bworkerfix(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 5)
        return HataMesajiC(playerid, "Hatalý komut girdiniz, /soru komutuyla yardým alabilirsiniz.");

    new id;
    if(sscanf(params, "d", id)) return KullanimMesajiC(playerid, "/bworkerfix [isyeri-id]");
    if(!BuildingInfo[id][bExists]) return HataMesajiC(playerid, "Hatalý ID.");

    IsletmeCalisanlariSifirla(id);
    BasariMesaji(playerid, "%d nolu iþletmenin çalýþanlarýný sildiniz.", id);
    return 1;
}

YakindakiBarikatiBul(playerid) {
    new id = -1;
    for(new i; i < MAX_ROADBLOCKS; i++) {
        if(RoadBlockInfo[i][rbExists]) {
            if(IsPlayerInRangeOfPoint(playerid, 2.0, RoadBlockInfo[i][rbPosX], RoadBlockInfo[i][rbPosY], RoadBlockInfo[i][rbPosZ])) {
                id = i;
                break;
            }
        }
    }
    return id;
}

DestekBitir(playerid) {
    if(!PlayerInfo[playerid][pDestekIstedi][1] && !PlayerInfo[playerid][pDestekIstedi][0]) return HataMesajiC(playerid, "Zaten destek istememiþsiniz.");
    if(PlayerInfo[playerid][pDestekIstedi][0]) {
        PlayerInfo[playerid][pDestekIstedi][0] = 0;
        SendFactionMessage(0, "[OPERATÖR]: Destek isteyen %s %s artýk desteðe ihtiyaç duymuyor.", fRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pRank]-1], ReturnRoleplayName(playerid));
    }
    if(PlayerInfo[playerid][pDestekIstedi][1]) {
        PlayerInfo[playerid][pDestekIstedi][1] = 0;
        SendFactionMessage(0, "[OPERATÖR]: Destek isteyen %s %s artýk desteðe ihtiyaç duymuyor.", fRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pRank]-1], ReturnRoleplayName(playerid));
    }
    PlayerAME(playerid, "telsizindeki destek tuþuna basar.");
    SunucuMesajiC(playerid, "Destek talebinizi iptal ettiniz.");
    return 1;
}

TezgahFix(playerid) {
    new id = -1;
    foreach(new i: Tezgahlar) {
        if(!StandInfo[i][sExists])continue;
        if(StandInfo[i][sID] != PlayerInfo[playerid][pID])continue;
        id = i;
        break;
    }
    PlayerInfo[playerid][pActigiTezgah] = id;
    return 1;
}

TezgahCalisanCikar(tezgah, id) {
    new stid = -1;
    if(StandInfo[tezgah][sExists]) {
        for(new i; i < 3; i++) {
            if(StandInfo[tezgah][sCalisan][i] == id) {
                stid = i;
                break;
            }
        }
    }
    if(stid != -1) {
        SunucuMesajiC(StandInfo[tezgah][sCalisan][stid], "Çalýþtýðýnýz tezgahtan çýkarýldýnýz.");
        PlayerInfo[StandInfo[tezgah][sCalisan][stid]][pCalistigiTezgah] = -1;
        StandInfo[tezgah][sCalisan][stid] = -1;
        StandInfo[tezgah][sCalisanSayisi]--;
    }
    return stid;
}

TezgahTumCalisanCikar(tezgah) {
    if(StandInfo[tezgah][sExists]) {
        for(new i; i < 3; i++) {
            if(StandInfo[tezgah][sCalisan][i] != -1) {
                SunucuMesajiC(StandInfo[tezgah][sCalisan][i], "Çalýþtýðýnýz tezgahtan çýkarýldýnýz.");
                PlayerInfo[StandInfo[tezgah][sCalisan][i]][pCalistigiTezgah] = -1;
                StandInfo[tezgah][sCalisan][i] = -1;
            }
        }
        StandInfo[tezgah][sCalisanSayisi] = 0;
    }
    return 1;
}


stock PlaySoundEx(soundid, Float:x, Float:y, Float:z, range)
{
    foreach(Player, i)
    {
        if(!IsPlayerInRangeOfPoint(i, range, x, y, z)) continue;
        PlayerPlaySound(i, soundid, 0, 0, 0);
    }
}

LSDEBU(playerid)
{
    new Float:xx, Float:yy, Float:zz;
    GetPlayerPos(playerid, xx, yy, zz);
    if (xx > 72 && xx < 3000 && yy > -3000 && yy < -614) return 1;
    return 0;
}

EvLosSantosDaMi(houseid) {
    if (HouseInfo[houseid][hPosX] > 72 && HouseInfo[houseid][hPosX] < 3000 && HouseInfo[houseid][hPosY] > -3000 && HouseInfo[houseid][hPosY] < -614) return 1;
    return 0;
}

PiyangoSifirla() {
    for(new i; i < MAKSBILETNUMARASI; i++)
        PiyangoAlindi[i] = 0;
    foreach(new i: Player) {
        if(!PlayerInfo[i][pLogged])continue;
        if(!PlayerInfo[i][pAldigiBilet])continue;
        PlayerInfo[i][pAldigiBilet] = 0;
    }
    return 1;
}

flags:gateiade(CMD_USER);
CMD:gateiade(playerid, params[])
{
    new id = YakindakiGate(playerid);
    if(id != -1)
    {
        if(GateBilgi[id][gateOwner] != PlayerInfo[playerid][pID])
            return HataMesajiC(playerid, "Bu kapýyý geri iade edemezsiniz.");

        if(GateBilgi[id][GateGise] == 1)
            return HataMesajiC(playerid, "Giþe olarak atanan bir gateyi iade edemezsiniz.");

        new exists = GateSil(id);
        if(!exists) return HataMesajiC(playerid, "Bir hata oluþtu, geliþtirici ekibe baþvurun.");

        PlayerInfo[playerid][pCoyn] += 200;
        SunucuMesaji(playerid, "%d nolu gate geri iade edildi, karþýlýðýnda 200 SA-Point aldýnýz.", id);
    }
    else HataMesajiC(playerid, "Herhangi bir gateye yakýn deðilsiniz.");
    return 1;
}

flags:tpiade(CMD_USER);
CMD:tpiade(playerid, params[])
{
    new i = GetPlayerTeleport(playerid);
    if(i != -1)
    {
        if(TeleportInfo[i][tSahip] != PlayerInfo[playerid][pID])
            return HataMesajiC(playerid, "Bu TP noktasý size ait deðil.");

        mysql_format(ourConnection, queryx, sizeof(queryx), "DELETE FROM teleports WHERE id = '%d'", TeleportInfo[i][teleportID]);
        mysql_tquery(ourConnection, queryx);

        Pickup_Destroy(TeleportInfo[i][teleportPickup]);
        Pickup_Destroy(TeleportInfo[i][teleportGPickup]);
        TeleportInfo[i][teleportID] = 0;
        TeleportInfo[i][tExists] = 0;
        TeleportInfo[i][tSahip] = -1;
        Iter_Remove(Teleports, i);

        PlayerInfo[playerid][pCoyn] += 200;
        SunucuMesaji(playerid, "%d nolu TP noktasý geri iade edildi, karþýlýðýnda 200 SA-Point aldýnýz.", i);
    }
    else HataMesajiC(playerid, "Herhangi bir TP noktasýna yakýn deðilsiniz.");
    return 1;
}

flags:tpkilit(CMD_USER);
CMD:tpkilit(playerid, params[])
{
    new i = GetPlayerTeleport(playerid);
    if(i != -1)
    {
        if(TeleportInfo[i][tSahip] != PlayerInfo[playerid][pID] && !PlayerInfo[playerid][pAdminDuty])
            return HataMesajiC(playerid, "Bu TP noktasý size ait deðil.");

        if(TeleportInfo[i][tKilitli])
        {
            TeleportInfo[i][tKilitli] = 0;
            SunucuMesaji(playerid, "Giriþ / Çýkýþ noktasý aktif.");
        }
        else
        {
            TeleportInfo[i][tKilitli] = 1;
            SunucuMesaji(playerid, "Giriþ / Çýkýþ noktasý kilitlendi.");
        }
        mysql_format(ourConnection, queryx, sizeof(queryx), "UPDATE teleports SET kilit = '%d' WHERE id = '%d'", TeleportInfo[i][tKilitli], TeleportInfo[i][teleportID]);
        mysql_tquery(ourConnection, queryx);
    }
    else HataMesajiC(playerid, "Herhangi bir TP noktasýna yakýn deðilsiniz.");
    return 1;
}

flags:tpsifre(CMD_USER);
CMD:tpsifre(playerid, params[])
{
    new id = GetPlayerTeleport(playerid);
    static sifre[8];

    if(id != -1)
    {
        if(TeleportInfo[id][tSahip] != PlayerInfo[playerid][pID] && !PlayerInfo[playerid][pAdminDuty])
            return HataMesajiC(playerid, "Bu TP noktasý size ait deðil.");

        if(sscanf(params, "s[8]", sifre))
            return KullanimMesajiC(playerid, "/tpsifre [yeni þifre] (Kaldýrmak için: -1)");

        if(strlen(sifre) < 1 || strlen(sifre) > 8)
            return HataMesajiC(playerid, "Þifre en fazla 8 karakter olabilir.");

        if(!strcmp(sifre, "-1", true)) SunucuMesaji(playerid, "%d nolu TP noktasýnýn þifresini kaldýrdýnýz.", id);
        else SunucuMesaji(playerid, "%d nolu TP noktasýnýn þifresini deðiþtirdiniz.", id);
        
        format(TeleportInfo[id][tSifre], 8, sifre);
        
        mysql_format(ourConnection, queryx, sizeof(queryx), "UPDATE teleports SET sifre = '%s' WHERE id = '%d'", sifre, TeleportInfo[id][teleportID]);
        mysql_tquery(ourConnection, queryx);
    }
    else HataMesajiC(playerid, "Herhangi bir gateye yakýn deðilsiniz.");
    return 1;
}

Dialog:DialogTPSifre(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        if(!isnull(inputtext))
        {
            new i = GetPlayerTeleport(playerid);
            if(i != -1)
            {
                if(!strcmp(TeleportInfo[i][tSifre], "-1", true)) return HataMesajiC(playerid, "Bu kapýnýn þifre konsolu kapalý ve kapý kilitli.");
                if(!strcmp(TeleportInfo[i][tSifre], inputtext, true))
                {
                    if(IsPlayerInAnyVehicle(playerid) && GetPlayerVehicleSeat(playerid) != 0) return
                        SunucuMesajiC(playerid, "Bunu yapamazsýnýz.");

                    new vehicleid = GetPlayerVehicleID(playerid), seat;
                    new playerState = IsPlayerInAnyVehicle(playerid);

                    static const Float:teleportRange[] = {1.0, 7.0};

                    if(IsPlayerInRangeOfPoint(playerid, teleportRange[playerState], TeleportInfo[i][teleportX], TeleportInfo[i][teleportY], TeleportInfo[i][teleportZ]) && GetPlayerVirtualWorld(playerid) == TeleportInfo[i][teleportWorld] && GetPlayerInterior(playerid) == TeleportInfo[i][teleportInterior])
                    {
                        if(IsPlayerInAnyVehicle(playerid))
                        {
                            foreach(new pid : Player) if(playerid != pid && IsPlayerInAnyVehicle(pid) && GetPlayerVehicleID(pid) == vehicleid)
                            {
                                AC_SetPlayerVirtualWorld(pid, TeleportInfo[i][teleportGWorld]);
                                SetTimerEx("PutPlayerInVeh", 1500, false, "ddd", pid, vehicleid, seat);
                            }
                            SetVehiclePos(vehicleid, TeleportInfo[i][teleportGX] + 2.0, TeleportInfo[i][teleportGY], TeleportInfo[i][teleportGZ]);
                            SetVehicleZAngle(vehicleid, TeleportInfo[i][teleportGA]);
                            SetVehicleVirtualWorld(vehicleid, TeleportInfo[i][teleportGWorld]);
                            LinkVehicleToInterior(vehicleid, TeleportInfo[i][teleportGInterior]);
                        }
                        else SetFreezePos(playerid, TeleportInfo[i][teleportGX], TeleportInfo[i][teleportGY], TeleportInfo[i][teleportGZ]);

                        AC_SetPlayerVirtualWorld(playerid, TeleportInfo[i][teleportGWorld]);
                        SetPlayerInterior(playerid, TeleportInfo[i][teleportGInterior]);
                    }
                    else if(IsPlayerInRangeOfPoint(playerid, teleportRange[playerState], TeleportInfo[i][teleportGX], TeleportInfo[i][teleportGY], TeleportInfo[i][teleportGZ]) && GetPlayerVirtualWorld(playerid) == TeleportInfo[i][teleportGWorld] && GetPlayerInterior(playerid) == TeleportInfo[i][teleportGInterior])
                    {
                        if(IsPlayerInAnyVehicle(playerid))
                        {
                            foreach(new pid : Player) if(playerid != pid && IsPlayerInAnyVehicle(pid) && GetPlayerVehicleID(pid) == vehicleid)
                            {
                                AC_SetPlayerVirtualWorld(pid, TeleportInfo[i][teleportWorld]);
                                SetTimerEx("PutPlayerInVeh", 1500, false, "ddd", pid, vehicleid, seat);
                            }
                            SetVehiclePos(vehicleid, TeleportInfo[i][teleportX] + 2.0, TeleportInfo[i][teleportY], TeleportInfo[i][teleportZ]);
                            SetVehicleVirtualWorld(vehicleid, TeleportInfo[i][teleportWorld]);
                            SetVehicleZAngle(vehicleid, TeleportInfo[i][teleportA]);
                            LinkVehicleToInterior(vehicleid, TeleportInfo[i][teleportInterior]);
                        }
                        else SetFreezePos(playerid, TeleportInfo[i][teleportX], TeleportInfo[i][teleportY], TeleportInfo[i][teleportZ]);

                        AC_SetPlayerVirtualWorld(playerid, TeleportInfo[i][teleportWorld]);
                        SetPlayerInterior(playerid, TeleportInfo[i][teleportInterior]);
                    }
                }
                else HataMesajiC(playerid, "Hatalý þifre girdiniz, kapý kilitli olduðu için giremiyorsunuz.");
                return true;
            }
            else HataMesajiC(playerid, "Yakýnýnda kapý yok!");
        }
        else HataMesajiC(playerid, "Þifre giriþi baþarýsýz, kapý kilitli olduðu için giremiyorsunuz.");
    }
    return 1;
}

Dialog:DialogPMYolla(playerid, response, listitem, inputtext[])
{
    if(!response) DeletePVar(playerid, "pmid");

    if(response)
    {
        if(PlayerInfo[playerid][pJailTime] && !PlayerInfo[playerid][pJailC])
            return HataMesaji(playerid, "Bu fonksiyondan þu anda yararlanamazsýn.");
            
        new kod[128];
        new pmid = GetPVarInt(playerid, "pmid");

        if(isnull(inputtext))
            return Dialog_Show(playerid, DialogPMYolla, DIALOG_STYLE_INPUT, "Özel Mesaj", "Özel mesaj kutucuðu boþ býrakýlamaz.\n%s kiþisine göndermek istediðin özel mesajý gir:", "Gönder", "Kapat", ReturnRoleplayName(pmid));

        format(kod, sizeof(kod), "%d %s", pmid, inputtext);
        pc_cmd_pm(playerid, kod);

        DeletePVar(playerid, "pmid");
    }
    return 1;
}

ObjeYuklemeKontrol(world); public ObjeYuklemeKontrol(world)
{
    static rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);

    if(!rows)return 1;

    if(rows)
    {
        mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT * FROM furnitures WHERE world = '%d'", world);
        mysql_tquery(ourConnection, queryx, "GeciciObjeSil", "d", world);
    }
    return 1;
}

GeciciObjeSil(world); public GeciciObjeSil(world)
{
    static rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);

    if(!rows)return 1;

    new objectid;

    for(new j; j < rows; j++)
    {
        cache_get_value_int(j, "object_id", objectid);
        Streamer_GetArrayData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID, g_obj, siz_g_obj);
        g_obj[co_price] = 0;
        g_obj[co_database_id] = 0;
        g_obj[co_name] = EOS;
        Streamer_SetArrayData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID, g_obj, siz_g_obj);
        DestroyDynamicObjectEx(objectid);
    }
    mysql_format(ourConnection, queryx, sizeof(queryx), "DELETE FROM loaded_furnitures WHERE world = '%d'", world);
    mysql_tquery(ourConnection, queryx);

    mysql_format(ourConnection, queryx, sizeof(queryx), "UPDATE furnitures SET object_id = '0' WHERE world = '%d'", world);
    mysql_tquery(ourConnection, queryx);

    printf("%d nolu dunyadaki objeler saklandi. [%s]", world, ReturnDate());
    return 1;
}

flags:editfix(CMD_GAME1);
CMD:editfix(playerid, params[])
{
    new id;
    if(sscanf(params, "k<m>", id)) return KullanimMesajiC(playerid, "/editfix [oyuncu id]");

    if(!IsPlayerConnected(id) || !PlayerInfo[id][pLogged])return
        HataMesajiC(playerid, "Geçersiz ID.");

    PlayerInfo[id][pEditingMode] = 0;
    PlayerInfo[id][pSelectedItem] = -1;
    CancelEdit(id);

    if(id != playerid) BasariMesaji(playerid, "%s adlý oyuncunun obje düzenleme durumunu iptal ettiniz.", ReturnRoleplayName(id));
    BasariMesaji(id, "Bir yetkili obje düzenleme durumunuzu iptal etti.");
    return 1;
}

flags:objelerigizle(CMD_Marvellous);
CMD:objelerigizle(playerid, params[])
{
    new world, block = 0;
    if(sscanf(params, "d", world)) return KullanimMesajiC(playerid, "/objelerigizle [VW]");

    if(!SunucuBilgi[AntiDekorasyonSilme])
    {
        if(world >= HOUSE_WORLD)
        {
            foreach(new i : Player)
            {
                if(!PlayerInfo[i][pLogged])continue;
                if(GetPlayerVirtualWorld(i) == world) block += 1; break;
            }

            if(block < 1)
            {
                mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT * FROM loaded_furnitures WHERE world = '%d'", world);
                mysql_tquery(ourConnection, queryx, "ObjeYuklemeKontrol", "d", world);
                BasariMesaji(playerid, "Belirttiðin sanal dünyadaki tüm objeler gizlendi.");
            }
            else HataMesaji(playerid, "Bu sanal dünyada oyuncu var, bu iþlemi yapamazsýn.");
        }
        else HataMesaji(playerid, "Bu komut sadece ev ve iþletme dünyalarý için çalýþýr.");
    }
    else HataMesaji(playerid, "Bu sistem pasif durumdayken bu iþlemi yapamazsýn.");
    return 1;
}

CMD:objetest(playerid)
{
    if(!PlayerInfo[playerid][pAdmin]) return 1;
    
    BasariMesaji(playerid, "Sunucuda þu anda %d adet dinamik obje mevcut.", CountDynamicObjects());
    return 1;
}

Dialog:DialogConfirmPM(playerid, response, listitem, inputtext[])
{
    if(!response) return 0;
    new message[256];
    format(message, 256, PlayerInfo[playerid][pTmpText]);
    
    new id = PlayerInfo[playerid][pPM];
    new id_string[16];
    new string[256];
    format(string, sizeof string, "[PM] %s > %s: %s", ReturnRoleplayName(playerid), ReturnRoleplayName(id), message);
    printf("[PM] %s > %s: %s", ReturnRoleplayName(playerid), ReturnRoleplayName(id), message);

    if(!PlayerInfo[playerid][pAdminDuty] && !PlayerInfo[playerid][pSupporterDuty])
    {
        format(id_string, sizeof(id_string), (PlayerInfo[playerid][pMasked]) ? ("(//)") : ("(%d)"), playerid);
        SendFormattedMessage(id, COLOR_RECEIVEPM, "** PM alýndý %s %s: %s", ReturnRoleplayName(playerid, true), id_string, message);
    }
    else SendFormattedMessage(id, COLOR_RECEIVEPM, (PlayerInfo[playerid][pAdminDuty]) ? ("** PM alýndý {ff9900}%s (%d){FCF545}: %s") : ("** PM alýndý {FCF545}%s (%d){FCF545}: %s"), ReturnRoleplayName(playerid), playerid, message);

    if(!PlayerInfo[id][pAdminDuty] && !PlayerInfo[id][pSupporterDuty])
    {
        format(id_string, sizeof(id_string), (PlayerInfo[id][pMasked]) ? ("(//)") : ("(%d)"), id);
        SendFormattedMessage(playerid, COLOR_SENDPM, "** PM gönderildi %s %s: %s", ReturnRoleplayName(id, true), id_string, message);
    }
    else SendFormattedMessage(playerid, COLOR_SENDPM, (PlayerInfo[id][pAdminDuty]) ? ("** PM gönderildi {ff9900}%s (%d){FFE536}: %s") : ("** PM gönderildi {FCF545}%s (%d){FFE536}: %s"), ReturnRoleplayName(id), id, message);

    if(PlayerInfo[id][pAFKTime] > 3) Player_Info(playerid, "PM Gonderdiginiz Kisi AFK.");

    foreach(new j : Player)
    {
        if(!IsPlayerConnected(j) || !PlayerInfo[j][pLogged] || PlayerInfo[j][pAdmin] < GAMEADMIN1)continue;
        if(PlayerInfo[j][pInRecon] != playerid)continue;

        SendFormattedMessage(j, COLOR_YELLOW, "%s > PM > %s: %s", ReturnRoleplayName(playerid, true), ReturnRoleplayName(id, true), message);
    }

    foreach(new j : Player)
    {
        if(!IsPlayerConnected(j) || !PlayerInfo[j][pLogged] || PlayerInfo[j][pAdmin] < GAMEADMIN1)continue;
        if(PlayerInfo[j][pInRecon] != id)continue;

        SendFormattedMessage(j, COLOR_YELLOW, "%s > PM > %s: %s", ReturnRoleplayName(playerid, true), ReturnRoleplayName(id, true), message);
    }
    return 1;
}

CMD:kumaryarat(playerid, params[])
{
    new type;

    if(Iter_Count(Games) >= MAX_GAMES)return
        SunucuMesaji(playerid, "Maksimum oyun limitine ulaþýldý.");

    if(sscanf(params, "d", type))return
        KullanimMesajiC(playerid, "/kumaryarat <0: rulet - 1: Slot Makinesi>");

    new id = Iter_Free(Games);
    // new query[212];

    GetPlayerPos(playerid, GameInfo[id][gameX], GameInfo[id][gameY], GameInfo[id][gameZ]);
    GameInfo[id][gameWorld] = GetPlayerVirtualWorld(playerid);
    GameInfo[id][gameInterior] = GetPlayerInterior(playerid);
    GameInfo[id][gameType] = type;
    GameInfo[id][gameExists] = 1;

    GameInfo[id][gameArea] = CreateDynamicSphere(GameInfo[id][gameX], GameInfo[id][gameY], GameInfo[id][gameZ], 1.5, GameInfo[id][gameWorld], GameInfo[id][gameInterior]);
    switch(GameInfo[id][gameType])
    {
        case 0: GameInfo[id][gameText] = CreateDynamic3DTextLabel("{33AA33}RULET\n{c6c6c6}/casino oyna - /casino durdur", COLOR_WHITE, GameInfo[id][gameX], GameInfo[id][gameY], GameInfo[id][gameZ], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, GameInfo[id][gameWorld], GameInfo[id][gameInterior]);
        case 1:
        {
            new string[200];
            format(string, 200, "{33AA33}SLOT MAKÝNESÝ ($%d)\n{c6c6c6}/casino cevir", SunucuBilgi[CasinoCevir]);
            GameInfo[id][gameText] = CreateDynamic3DTextLabel(string, COLOR_WHITE, GameInfo[id][gameX], GameInfo[id][gameY], GameInfo[id][gameZ], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, GameInfo[id][gameWorld], GameInfo[id][gameInterior]);
        }
    }

    Iter_Add(Games, id);

    mysql_format(ourConnection, queryx, sizeof(queryx), "INSERT INTO games (type, x, y, z, world, interior) VALUES ('%d', '%f' ,'%f', '%f', '%d', '%d')",
    GameInfo[id][gameType],
    GameInfo[id][gameX],
    GameInfo[id][gameY],
    GameInfo[id][gameZ],
    GameInfo[id][gameWorld],
    GameInfo[id][gameInterior]);

    mysql_tquery(ourConnection, queryx, "OnQueryFinished", "dd", id, THREAD_CREATE_GAME);

    SendAworkAlert(false, COLOR_ADMIN, "AdmCmd: %s %d ID'li oyunu oluþturdu.", ReturnRoleplayName(playerid), id);

    return 1;
}

CMD:kumarsil(playerid, params[])
{
    new id = PlayerInfo[playerid][pCurrentGameID];

    if(id == -1)return
        SunucuMesaji(playerid, "Bir oyuna yakýn deðilsin.");

    // new query[128];

    mysql_format(ourConnection, queryx, sizeof queryx, "DELETE FROM `games` WHERE `id` = '%d'", GameInfo[id][gameID]);
    mysql_tquery(ourConnection, queryx);

    GameInfo[id][gameType] = -1;
    GameInfo[id][gameX] = 0.0;
    GameInfo[id][gameY] = 0.0;
    GameInfo[id][gameZ] = 0.0;
    GameInfo[id][gameWorld] = 0;
    GameInfo[id][gameInterior] = 0;
    GameInfo[id][gameExists] = 0;

    DestroyDynamicArea(GameInfo[id][gameArea]);
    DestroyDynamic3DTextLabelEx(GameInfo[id][gameText]);

    Iter_Remove(Games, id);

    SendAworkAlert(false, COLOR_ADMIN, "AdmCmd: %s %d ID'li oyunu sildi.", ReturnRoleplayName(playerid), id);

    foreach(new i : Player) if(IsPlayerConnected(i) && PlayerInfo[i][pCurrentGameID] == id)
        PlayerInfo[i][pCurrentGameID] = -1;

    return 1;
}

flags:kumarekle(CMD_USER);
CMD:kumarekle(playerid, params[])
{
    new b = GetPlayerMenuBiz(playerid);

    if(b == -1)return
        HataMesajiC(playerid, "Yetkiniz olan bir iþletmeye yakýn deðilsiniz.");

    if(BuildingInfo[b][bType] != KUMARHANE)
        return HataMesaji(playerid, "Bu komutu sadece sahibi olduðun kumarhane tipi iþletmelerde kullanabilirsin.");

    if(BuildingInfo[b][bMuhurlu] && PlayerInfo[playerid][pAdmin] < 2) return HataMesajiC(playerid, "Bu iþletme mühürlenmiþ, lütfen mührünü açtýrýn.");

    if(HasPlayerUserKey(playerid, KEY_BUILDING, BuildingInfo[b][bID]) == 0 && PlayerInfo[playerid][pID] != BuildingInfo[b][bOwner] && PlayerInfo[playerid][pCalistigiIsyeri][0] == b && PlayerInfo[playerid][pAdmin] < 6)
        return HataMesaji(playerid, "Sadece iþletme sahibi bu komuttan yararlanabilmektedir.");

    if(HasPlayerUserKey(playerid, KEY_BUILDING, BuildingInfo[b][bID]) > 0 && PlayerInfo[playerid][pID] != BuildingInfo[b][bOwner] && PlayerInfo[playerid][pAdmin] < 6)
        return HataMesaji(playerid, "Sadece iþletme sahibi bu komuttan yararlanabilmektedir.");

    if(PlayerInfo[playerid][pCash] < 10000) return HataMesaji(playerid, "Yeterli miktarda paranýz bulunmuyor. ($10.000)");

    new type;

    if(Iter_Count(Games) >= MAX_GAMES)return
        SunucuMesaji(playerid, "Kumarhaneler için maksimum oyun limitine ulaþýldý.");

    if(sscanf(params, "d", type))return
        KullanimMesajiC(playerid, "/kumaryarat <0: rulet - 1: Slot Makinesi>");

    new id = Iter_Free(Games);
    // new query[212];

    GetPlayerPos(playerid, GameInfo[id][gameX], GameInfo[id][gameY], GameInfo[id][gameZ]);
    GameInfo[id][gameWorld] = GetPlayerVirtualWorld(playerid);
    GameInfo[id][gameInterior] = GetPlayerInterior(playerid);
    GameInfo[id][gameType] = type;
    GameInfo[id][gameExists] = 1;

    GameInfo[id][gameArea] = CreateDynamicSphere(GameInfo[id][gameX], GameInfo[id][gameY], GameInfo[id][gameZ], 1.5, GameInfo[id][gameWorld], GameInfo[id][gameInterior]);
    switch(GameInfo[id][gameType])
    {
        case 0: GameInfo[id][gameText] = CreateDynamic3DTextLabel("{33AA33}RULET\n{c6c6c6}/casino oyna - /casino durdur", COLOR_WHITE, GameInfo[id][gameX], GameInfo[id][gameY], GameInfo[id][gameZ], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, GameInfo[id][gameWorld], GameInfo[id][gameInterior]);
        case 1:
        {
            new string[200];
            format(string, 200, "{33AA33}SLOT MAKÝNESÝ ($%d)\n{c6c6c6}/casino cevir", SunucuBilgi[CasinoCevir]);
            GameInfo[id][gameText] = CreateDynamic3DTextLabel(string, COLOR_WHITE, GameInfo[id][gameX], GameInfo[id][gameY], GameInfo[id][gameZ], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, GameInfo[id][gameWorld], GameInfo[id][gameInterior]);
        }
    }

    Iter_Add(Games, id);

    mysql_format(ourConnection, queryx, sizeof(queryx), "INSERT INTO games (type, x, y, z, world, interior) VALUES ('%d', '%f' ,'%f', '%f', '%d', '%d')",
    GameInfo[id][gameType],
    GameInfo[id][gameX],
    GameInfo[id][gameY],
    GameInfo[id][gameZ],
    GameInfo[id][gameWorld],
    GameInfo[id][gameInterior]);

    mysql_tquery(ourConnection, queryx, "OnQueryFinished", "dd", id, THREAD_CREATE_GAME);
    OAC_GivePlayerMoney(playerid, -10000);
    BasariMesaji(playerid, "Kumarhanenize $10.000 karþýlýðýnda %s makinesi satýn aldýnýz.", id ? ("slot") : ("rulet"));
    SendAworkAlert(false, COLOR_ADMIN, "AdmCmd: %s kumarhanesine %s satýn aldý.", ReturnRoleplayName(playerid), id ? ("slot makinesi") : ("rulet makinesi"));
    return 1;
}

flags:kumarkaldir(CMD_USER);
CMD:kumarkaldir(playerid, params[])
{
    new b = GetPlayerMenuBiz(playerid);

    if(b == -1)return
        HataMesajiC(playerid, "Yetkiniz olan bir iþletmeye yakýn deðilsiniz.");

    if(BuildingInfo[b][bType] != KUMARHANE)
        return HataMesaji(playerid, "Bu komutu sadece sahibi olduðun kumarhane tipi iþletmelerde kullanabilirsin.");

    if(BuildingInfo[b][bMuhurlu] && PlayerInfo[playerid][pAdmin] < 2) return HataMesajiC(playerid, "Bu iþletme mühürlenmiþ, lütfen mührünü açtýrýn.");

    if(HasPlayerUserKey(playerid, KEY_BUILDING, BuildingInfo[b][bID]) == 0 && PlayerInfo[playerid][pID] != BuildingInfo[b][bOwner] && PlayerInfo[playerid][pCalistigiIsyeri][0] == b && PlayerInfo[playerid][pAdmin] < 6)
        return HataMesaji(playerid, "Sadece iþletme sahibi bu komuttan yararlanabilmektedir.");

    if(HasPlayerUserKey(playerid, KEY_BUILDING, BuildingInfo[b][bID]) > 0 && PlayerInfo[playerid][pID] != BuildingInfo[b][bOwner] && PlayerInfo[playerid][pAdmin] < 6)
        return HataMesaji(playerid, "Sadece iþletme sahibi bu komuttan yararlanabilmektedir.");

    new id = PlayerInfo[playerid][pCurrentGameID];

    if(id == -1)return
        SunucuMesaji(playerid, "Bir oyuna yakýn deðilsin.");

    // new query[128];

    mysql_format(ourConnection, queryx, sizeof queryx, "DELETE FROM `games` WHERE `id` = '%d'", GameInfo[id][gameID]);
    mysql_tquery(ourConnection, queryx);

    GameInfo[id][gameType] = -1;
    GameInfo[id][gameX] = 0.0;
    GameInfo[id][gameY] = 0.0;
    GameInfo[id][gameZ] = 0.0;
    GameInfo[id][gameWorld] = 0;
    GameInfo[id][gameInterior] = 0;
    GameInfo[id][gameExists] = 0;

    DestroyDynamicArea(GameInfo[id][gameArea]);
    DestroyDynamic3DTextLabelEx(GameInfo[id][gameText]);

    Iter_Remove(Games, id);

    SendAworkAlert(false, COLOR_ADMIN, "AdmCmd: %s, %d nolu kumar makinesini sisteme iade etti.", ReturnRoleplayName(playerid), id);

    OAC_GivePlayerMoney(playerid, 2500);
    BasariMesaji(playerid, "%s makinesini $2.500 dolar karþýlýðýnda iade ettiniz.", id ? ("Slot") : ("Rulet"));

    foreach(new i : Player) if(IsPlayerConnected(i) && PlayerInfo[i][pCurrentGameID] == id)
        PlayerInfo[i][pCurrentGameID] = -1;

    return 1;
}

flags:esyaisinlan(CMD_GAME1);
CMD:esyaisinlan(playerid, params[])
{
    new itemid;
    if(sscanf(params, "d", itemid)) return KullanimMesajiC(playerid, "/esyaisinlan [ID]");
    if(itemid < 0 || !IDroppedInfo[itemid][idList]) return HataMesaji(playerid, "Hatalý deðer girdiniz.");

    SetPlayerPos(playerid, IDroppedInfo[itemid][idPosX], IDroppedInfo[itemid][idPosY], IDroppedInfo[itemid][idPosZ] + 1);
    AC_SetPlayerVirtualWorld(playerid, IDroppedInfo[itemid][idWorld]);
    SetPlayerInterior(playerid, IDroppedInfo[itemid][idInt]);

    BasariMesaji(playerid, "%d nolu yerde bulunan eþyaya ýþýnlandýn.", itemid);
    return 1;
}

flags:donatorkiyafet(CMD_USER);
CMD:donatorkiyafet(playerid, params[])
{
    if(!PlayerInfo[playerid][pDonateSkin][0] && !PlayerInfo[playerid][pDonateSkin][1] && !PlayerInfo[playerid][pDonateSkin][2] && !PlayerInfo[playerid][pDonateSkin][3] && !PlayerInfo[playerid][pDonateSkin][4])
        return HataMesaji(playerid, "Özel kýyafetiniz bulunmuyor.");

    if(GetPlayerVirtualWorld(playerid) == 0 && GetPlayerInterior(playerid) == 0)
        return HataMesaji(playerid, "Kýyafet giymek için uygun noktada deðilsin. (Interiorlarda giyebilirsin)");

    /*if(GetPlayerCustomSkin(playerid) == PlayerInfo[playerid][pDonateSkin])
        return HataMesaji(playerid, "Zaten üzerinizde özel kýyafet bulunuyor.");*/

    new string[5], count;
    for(new x; x < 5; x++)
    {
        if(PlayerInfo[playerid][pDonateSkin][x] != 0)
        {
            string[count] = PlayerInfo[playerid][pDonateSkin][x];
            count++;
        }
    }

    ShowModelSelectionMenuEx(playerid, string, count, "KIYAFETLERIM", DKIYAFET, 16.0, 0.0, -55.0);
    return 1;
}

flags:checkdonatorskin(CMD_GAME1);
CMD:checkdonatorskin(playerid, params[])
{
    new targetid;
    if(sscanf(params, "k<m>", targetid)) return KullanimMesajiC(playerid, "/checkdonatorskin [oyuncuid]");

    if(!IsPlayerConnected(targetid) || !PlayerInfo[targetid][pLogged])
        return HataMesajiC(playerid, "Geçersiz ID.");

    SunucuMesaji(playerid, "%s adlý oyuncunun özel kýyafetleri:", ReturnRoleplayName(targetid));

    if(PlayerInfo[targetid][pDonateSkin][0] != 0) SunucuMesaji(playerid, "Kýyafet ID: %d", PlayerInfo[targetid][pDonateSkin][0]);
    if(PlayerInfo[targetid][pDonateSkin][1] != 0) SunucuMesaji(playerid, "Kýyafet ID: %d", PlayerInfo[targetid][pDonateSkin][1]);
    if(PlayerInfo[targetid][pDonateSkin][2] != 0) SunucuMesaji(playerid, "Kýyafet ID: %d", PlayerInfo[targetid][pDonateSkin][2]);
    if(PlayerInfo[targetid][pDonateSkin][3] != 0) SunucuMesaji(playerid, "Kýyafet ID: %d", PlayerInfo[targetid][pDonateSkin][3]);
    if(PlayerInfo[targetid][pDonateSkin][4] != 0) SunucuMesaji(playerid, "Kýyafet ID: %d", PlayerInfo[targetid][pDonateSkin][4]);
    return 1;
}

flags:givedonatorskin(CMD_GAME1);
CMD:givedonatorskin(playerid, params[])
{
    new targetid, skinid;
    if(sscanf(params, "k<m>d", targetid, skinid)) return KullanimMesajiC(playerid, "/givedonatorskin [oyuncuid] [skinid]");

    if(!IsPlayerConnected(targetid) || !PlayerInfo[targetid][pLogged])
        return HataMesajiC(playerid, "Geçersiz ID.");

    //if(PlayerInfo[targetid][pPremium] != 3) return HataMesajiC(playerid, "Bu kullanýcý bu sistemden yararlanmýyor.");
    new bosslot = -1;
    for(new i; i < 5; i++)
    {
        if(PlayerInfo[targetid][pDonateSkin][i] == 0)
        {
            bosslot = i;
            break;
        }
    }
    if(bosslot == -1) return HataMesaji(playerid, "Bu kullanýcýnýn özel kýyafet slotlarý dolu.");

    PlayerInfo[targetid][pDonateSkin][bosslot] = skinid;
    BasariMesaji(targetid, "Administrator tarafýndan donator kýyafeti verildi. (%d)", skinid);
    BasariMesaji(playerid, "%s adlý oyuncunun özel skinini %d yaptýnýz.", ReturnRoleplayName(targetid), skinid);
    return 1;
}

flags:removedonatorskin(CMD_GAME1);
CMD:removedonatorskin(playerid, params[])
{
    new targetid, slotid;
    if(sscanf(params, "k<m>d", targetid, slotid)) return KullanimMesajiC(playerid, "/removedonatorskin [oyuncuid] [0/1/2/3/4]");

    //if(PlayerInfo[targetid][pPremium] != 3) return HataMesajiC(playerid, "Bu kullanýcý bu sistemden yararlanmýyor.");

    if(!IsPlayerConnected(targetid) || !PlayerInfo[targetid][pLogged])
        return HataMesajiC(playerid, "Geçersiz ID.");

    PlayerInfo[targetid][pDonateSkin][slotid] = 0;
    BasariMesaji(targetid, "Administrator tarafýndan donator kýyafetiniz silindi.");
    BasariMesaji(playerid, "%s adlý oyuncunun özel skinini sildiniz.", ReturnRoleplayName(targetid));
    return 1;
}

CMD:motortamiri(playerid)
{
    if(IsPlayerInRangeOfPoint(playerid, 5, EXTERIOR_TUNING_X, EXTERIOR_TUNING_Y, EXTERIOR_TUNING_Z) == 0)
    {
        AC_SetPlayerCheckpoint(playerid, EXTERIOR_TUNING_X, EXTERIOR_TUNING_Y, EXTERIOR_TUNING_Z, 1.0);
        return HataMesajiC(playerid, "Bu komutu \"modifiye noktasý\" üzerinde kullanabilirsin.");
    }
    
    if(!IsPlayerInAnyVehicle(playerid)) return HataMesajiC(playerid, "Herhangi bir araçta deðilsin.");
    if(PlayerInfo[playerid][pCash] < 12500) return HataMesajiC(playerid, "Yeterli miktarda paranýz yok. ($12.500)");
    if(GetPVarInt(playerid, "pTamir") > 0) return HataMesajiC(playerid, "Tamir iþlemi sürüyor lütfen bekleyin.");

    new vehicleid = GetPlayerVehicleID(playerid);
    if(!IsValidVehicle(vehicleid)) return HataMesajiC(playerid, "Araçta deðilsiniz.");
    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return HataMesajiC(playerid, "Araçta sürücü deðilsiniz.");
    if(VehicleInfo[vehicleid][vEngine]) return HataMesajiC(playerid, "Tamir iþlemi için motoru kapatmalýsýnýz.");

    OAC_GivePlayerMoney(playerid, -12500);
    SetTimerEx("MotorTamir", 10000, false, "dd", playerid, vehicleid);
    SetPVarInt(playerid, "pTamir", 1);
    DestroyDynamic3DTextLabelEx(PlayerInfo[playerid][pNameTag]);
    PlayerInfo[playerid][pNameTag] = CreateDynamic3DTextLabel("(( Kullanýcý þu anda aracýnýn motorunu tamir ediyor. ))", COLOR_ADMIN, 0, 0, 0.5, 30.0, playerid, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0);
    return 1;
}

CMD:kirafix(playerid)
{
    if(PlayerInfo[playerid][pAdmin] == 0) return HataMesajiC(playerid, "Bu komuta eriþemezsiniz.");
    if(!IsPlayerInAnyVehicle(playerid)) return HataMesajiC(playerid, "Herhangi bir araçta deðilsin.");

    new vehicleid = GetPlayerVehicleID(playerid);
    if(!IsValidVehicle(vehicleid)) return HataMesajiC(playerid, "Araçta deðilsiniz.");
    VehicleInfo[vehicleid][vKiralayan] = -1;
    VehicleInfo[vehicleid][vKiralik] = -1;
    BasariMesaji(playerid, "%d nolu aracýn kira deðerleri sýfýrlandý.", vehicleid);
    return 1;
}
    
CMD:akutamiri(playerid)
{
    if(IsPlayerInRangeOfPoint(playerid, 5, EXTERIOR_TUNING_X, EXTERIOR_TUNING_Y, EXTERIOR_TUNING_Z) == 0)
    {
        AC_SetPlayerCheckpoint(playerid, EXTERIOR_TUNING_X, EXTERIOR_TUNING_Y, EXTERIOR_TUNING_Z, 1.0);
        return HataMesajiC(playerid, "Bu komutu \"modifiye noktasý\" üzerinde kullanabilirsin.");
    }
    
    if(!IsPlayerInAnyVehicle(playerid)) return HataMesajiC(playerid, "Herhangi bir araçta deðilsin.");
    if(PlayerInfo[playerid][pCash] < 12500) return HataMesajiC(playerid, "Yeterli miktarda paranýz yok. ($12.500)");
    if(GetPVarInt(playerid, "pTamir") > 0) return HataMesajiC(playerid, "Tamir iþlemi sürüyor lütfen bekleyin.");

    new vehicleid = GetPlayerVehicleID(playerid);
    if(!IsValidVehicle(vehicleid)) return HataMesajiC(playerid, "Araçta deðilsiniz.");
    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return HataMesajiC(playerid, "Araçta sürücü deðilsiniz.");
    if(VehicleInfo[vehicleid][vEngine]) return HataMesajiC(playerid, "Tamir iþlemi için motoru kapatmalýsýnýz.");
    
    OAC_GivePlayerMoney(playerid, -12500);
    SetTimerEx("AkuTamir", 10000, false, "dd", playerid, vehicleid);
    SetPVarInt(playerid, "pTamir", 1);
    DestroyDynamic3DTextLabelEx(PlayerInfo[playerid][pNameTag]);
    PlayerInfo[playerid][pNameTag] = CreateDynamic3DTextLabel("(( Kullanýcý þu anda aracýnýn aküsünü tamir ediyor. ))", COLOR_ADMIN, 0, 0, 0.5, 30.0, playerid, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0);
    return 1;
}

AkuTamir(playerid, vehicleid); public AkuTamir(playerid, vehicleid)
{
    VehicleInfo[vehicleid][vBatteryHealth] = 1000.0;
    SunucuMesaji(playerid, "$12.500 karþýlýðýnda aracýnýn akü ömrünü yeniledin.");
    SaveVehicle(vehicleid);
    //SetPVarInt(playerid, "pTamir", 0);
    DeletePVar(playerid, "pTamir");
    RemoveTag(playerid);
    return 1;
}

MotorTamir(playerid, vehicleid); public MotorTamir(playerid, vehicleid)
{
    VehicleInfo[vehicleid][vEngineHealth] = 1000.0;
    SunucuMesaji(playerid, "$12.500 karþýlýðýnda aracýnýn motor ömrünü yeniledin.");
    SaveVehicle(vehicleid);
    //SetPVarInt(playerid, "pTamir", 0);
    DeletePVar(playerid, "pTamir");
    RemoveTag(playerid);
    return 1;
}

Dialog:IsletmeYeniMenu(playerid, response, listitem, inputtext[])
{
    if(!response)return 0;

    new buildingid = GetPlayerMenuBiz(playerid);

    if(buildingid == -1)return
        SunucuMesajiC(playerid, "Ýþletmenin yakýnýnda ya da içerisinde deðilsin.");
        
    if(response)
    {
        switch(listitem)
        {
            case 0:
            {
                if(!IsPlayerInRangeOfPoint(playerid, 2.0, BuildingInfo[buildingid][bPosIntX], BuildingInfo[buildingid][bPosIntY], BuildingInfo[buildingid][bPosIntZ]) && IsPlayerInRangeOfPoint(playerid, 2.0, BuildingInfo[buildingid][bPosX], BuildingInfo[buildingid][bPosY], BuildingInfo[buildingid][bPosZ]) == 0)return
                    SunucuMesajiC(playerid, "Bir kapýya yakýn deðilsin.");

                BuildingInfo[buildingid][bLocked] = !BuildingInfo[buildingid][bLocked];
                Player_Info(playerid, (!BuildingInfo[buildingid][bLocked]) ? ("Isyerinin artik ~g~kilidi acik~w~.") : ("Isyeri artik ~r~kilitli~w~."), true);

                SaveBuilding(buildingid);
            }
            case 1:
            {
                ShowRadioLinks(playerid, 0);
            }
            case 2:
            {
                if(BuildingInfo[buildingid][bStereo] == false)return
                    SunucuMesaji(playerid, "Müzik zaten kapalý.");

                BasariMesaji(playerid, "Müzik kapatýldý.");

                foreach(new i : Player) if(IsPlayerConnected(i) && GetPlayerBuilding(i, true) == buildingid)
                    StopAudioStreamForPlayer(i);

                BuildingInfo[buildingid][bStereo] = false;
            }
        }
    }
    return 1;
}
Dialog:DialogBincoSecim(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        switch(listitem)
        {
            case 0: pc_cmd_kiyafetal(playerid, NULL);
            case 1: pc_cmd_ekiyafetal(playerid);
            case 2: pc_cmd_aksesuaral(playerid);
        }
    }
    return 1;
}

flags:yakityukle(CMD_USER);
flags:yakitiptal(CMD_USER);
flags:yakitteslim(CMD_USER);

CMD:yakityukle(playerid)
{
    if(PlayerInfo[playerid][pJob] != 0)
        return HataMesajiC(playerid, "Trucker mesleðinde deðilsin.");
            
    if(!IsPlayerInAnyVehicle(playerid)) return HataMesajiC(playerid, "Herhangi bir araçta deðilsin.");
    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return HataMesajiC(playerid, "Araçta sürücü deðilsiniz.");
    new vehicleid = GetPlayerVehicleID(playerid);
    if(!IsValidVehicle(vehicleid)) return HataMesajiC(playerid, "Araçta deðilsiniz.");
    if(VehicleInfo[vehicleid][vModel] != 514 && VehicleInfo[vehicleid][vModel] != 515 && VehicleInfo[vehicleid][vModel] != 403)
        return HataMesajiC(playerid, "Bu mesleðe uygun araçta deðilsiniz.");
        
    if(!IsTrailerAttachedToVehicle(vehicleid)) return HataMesajiC(playerid, "Yakýt yükleme iþlemi için uygun dorseye sahip deðilsin. (Petrol Trailer)");

    if(VehicleInfo[vehicleid][vYakit]) return HataMesaji(playerid, "Zaten yakýt doldurmuþsunuz, kendinize bir rota çizin.");
    if(VehicleInfo[vehicleid][vEngine]) return HataMesajiC(playerid, "Yakýt yükleme iþlemi için motoru kapatmalýsýnýz.");

    if(IsPlayerInRangeOfPoint(playerid, 5.0, 250.074401, 1420.627807, 10.585937))
    {
        BasariMesaji(playerid, "Yakýt yükleme iþlemi baþladý, lütfen bekleyin.");
        SunucuMesaji(playerid, "Týrýn dorseden ayrýlmasý durumunda görev baþarýsýz olacaktýr.");

        PlayerInfo[playerid][pFreezed] = 1;
        TogglePlayerControllable(playerid, false);

        PlayerInfo[playerid][pKamyoncuTimer] = 60;
        PlayerTextDrawShow(playerid, PlayerText:Textdraw0[playerid]);
        PlayerTextDrawShow(playerid, PlayerText:Textdraw1[playerid]);
        PlayerTextDrawSetString(playerid, PlayerText:Textdraw1[playerid], "60 saniye");
        PlayerTextDrawSetString(playerid, PlayerText:Textdraw0[playerid], "YUK ALINIYOR");
    }
    else if(IsPlayerInRangeOfPoint(playerid, 5.0, 250.074401, 1395.342407, 10.585937))
    {
        BasariMesaji(playerid, "Yakýt yükleme iþlemi baþladý, lütfen bekleyin.");
        SunucuMesaji(playerid, "Týrýn dorseden ayrýlmasý durumunda görev baþarýsýz olacaktýr.");

        PlayerInfo[playerid][pFreezed] = 1;
        TogglePlayerControllable(playerid, false);

        PlayerInfo[playerid][pKamyoncuTimer] = 60;
        PlayerTextDrawShow(playerid, PlayerText:Textdraw0[playerid]);
        PlayerTextDrawShow(playerid, PlayerText:Textdraw1[playerid]);
        PlayerTextDrawSetString(playerid, PlayerText:Textdraw1[playerid], "60 saniye");
        PlayerTextDrawSetString(playerid, PlayerText:Textdraw0[playerid], "YUK ALINIYOR");
    }
    else if(IsPlayerInRangeOfPoint(playerid, 5.0, 250.074401, 1370.814941, 10.585937))
    {
        BasariMesaji(playerid, "Yakýt yükleme iþlemi baþladý, lütfen bekleyin.");
        SunucuMesaji(playerid, "Týrýn dorseden ayrýlmasý durumunda görev baþarýsýz olacaktýr.");

        PlayerInfo[playerid][pFreezed] = 1;
        TogglePlayerControllable(playerid, false);

        PlayerInfo[playerid][pKamyoncuTimer] = 60;
        PlayerTextDrawShow(playerid, PlayerText:Textdraw0[playerid]);
        PlayerTextDrawShow(playerid, PlayerText:Textdraw1[playerid]);
        PlayerTextDrawSetString(playerid, PlayerText:Textdraw1[playerid], "60 saniye");
        PlayerTextDrawSetString(playerid, PlayerText:Textdraw0[playerid], "YUK ALINIYOR");
    }
    else HataMesajiC(playerid, "Trucker yakýt yükleme noktasýna yakýn deðilsiniz.");
    return 1;
}
CMD:yakitiptal(playerid)
{
    if(PlayerInfo[playerid][pJob] != 0)
        return HataMesajiC(playerid, "Trucker mesleðinde deðilsin.");

    if(!IsPlayerInAnyVehicle(playerid)) return HataMesajiC(playerid, "Herhangi bir araçta deðilsin.");
    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return HataMesajiC(playerid, "Araçta sürücü deðilsiniz.");
    new vehicleid = GetPlayerVehicleID(playerid);
    if(!IsValidVehicle(vehicleid)) return HataMesajiC(playerid, "Araçta deðilsiniz.");
    if(VehicleInfo[vehicleid][vModel] != 514 && VehicleInfo[vehicleid][vModel] != 515 && VehicleInfo[vehicleid][vModel] != 403)
        return HataMesajiC(playerid, "Bu mesleðe uygun araçta deðilsiniz.");

    if(!IsTrailerAttachedToVehicle(vehicleid)) return HataMesajiC(playerid, "Yakýt iptali için uygun dorseye sahip deðilsin. (Petrol Trailer)");
    if(!VehicleInfo[vehicleid][vYakit]) return HataMesaji(playerid, "Zaten yakýt bulunmuyor.");

    VehicleInfo[vehicleid][vYakit] = 0;
    BasariMesaji(playerid, "Yakýt taþýma iþlemini iptal ettiniz, bu turun size bir kazancý olmadý.");
    return 1;
}
CMD:yakitteslim(playerid)
{
    if(PlayerInfo[playerid][pJob] != 0)
        return HataMesajiC(playerid, "Trucker mesleðinde deðilsin.");

    if(!IsPlayerInAnyVehicle(playerid)) return HataMesajiC(playerid, "Herhangi bir araçta deðilsin.");
    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return HataMesajiC(playerid, "Araçta sürücü deðilsiniz.");
    new vehicleid = GetPlayerVehicleID(playerid);
    if(!IsValidVehicle(vehicleid)) return HataMesajiC(playerid, "Araçta deðilsiniz.");
    if(VehicleInfo[vehicleid][vModel] != 514 && VehicleInfo[vehicleid][vModel] != 515 && VehicleInfo[vehicleid][vModel] != 403)
        return HataMesajiC(playerid, "Bu mesleðe uygun araçta deðilsiniz.");

    if(!IsTrailerAttachedToVehicle(vehicleid)) return HataMesajiC(playerid, "Yakýt teslimi için uygun dorseye sahip deðilsin. (Petrol Trailer)");
    if(!VehicleInfo[vehicleid][vYakit]) return HataMesaji(playerid, "Teslim baþarýsýz, araçta yakýt bulunmuyor.");

    if(IsPlayerInRangeOfPoint(playerid, 5.0, 2130.653564, 892.638488, 10.820312)) // $2750
    {
        BasariMesaji(playerid, "Yakýt teslim iþlemi baþladý, lütfen bekleyin. (Kazanç: $1750)");

        PlayerInfo[playerid][pFreezed] = 1;
        TogglePlayerControllable(playerid, false);

        PlayerInfo[playerid][pYakitTimer] = 60;
        PlayerTextDrawShow(playerid, PlayerText:Textdraw0[playerid]);
        PlayerTextDrawShow(playerid, PlayerText:Textdraw1[playerid]);
        PlayerTextDrawSetString(playerid, PlayerText:Textdraw1[playerid], "60 saniye");
        PlayerTextDrawSetString(playerid, PlayerText:Textdraw0[playerid], "YAKIT TESLIMI");
    }
    else if(IsPlayerInRangeOfPoint(playerid, 5.0, 665.944824, -582.788269, 16.335937)) // $3000
    {
        BasariMesaji(playerid, "Yakýt teslim iþlemi baþladý, lütfen bekleyin. (Kazanç: $2000)");

        PlayerInfo[playerid][pFreezed] = 1;
        TogglePlayerControllable(playerid, false);

        PlayerInfo[playerid][pYakitTimer] = 60;
        PlayerTextDrawShow(playerid, PlayerText:Textdraw0[playerid]);
        PlayerTextDrawShow(playerid, PlayerText:Textdraw1[playerid]);
        PlayerTextDrawSetString(playerid, PlayerText:Textdraw1[playerid], "60 saniye");
        PlayerTextDrawSetString(playerid, PlayerText:Textdraw0[playerid], "YAKIT TESLIMI");
    }
    else if(IsPlayerInRangeOfPoint(playerid, 5.0, -2430.835205, 953.155029, 45.296875)) // $4500
    {
        BasariMesaji(playerid, "Yakýt teslim iþlemi baþladý, lütfen bekleyin. (Kazanç: $3500)");

        PlayerInfo[playerid][pFreezed] = 1;
        TogglePlayerControllable(playerid, false);

        PlayerInfo[playerid][pYakitTimer] = 60;
        PlayerTextDrawShow(playerid, PlayerText:Textdraw0[playerid]);
        PlayerTextDrawShow(playerid, PlayerText:Textdraw1[playerid]);
        PlayerTextDrawSetString(playerid, PlayerText:Textdraw1[playerid], "60 saniye");
        PlayerTextDrawSetString(playerid, PlayerText:Textdraw0[playerid], "YAKIT TESLIMI");
    }
    else HataMesajiC(playerid, "Herhangi bir yakýt teslim noktasýna yakýn deðilsin.");
    return 1;
}

CMD:texturedurum(playerid)
{
    if(PlayerInfo[playerid][pAdmin] < 10) return HataMesaji(playerid, "Yetkiniz bulunmuyor.");
    if(SunucuBilgi[TextureliObje])
    {
        SunucuBilgi[TextureliObje] = 0;
        BasariMesaji(playerid, "Textureli obje kopyalamayý pasife aldýnýz.");
    }
    else
    {
        SunucuBilgi[TextureliObje] = 1;
        BasariMesaji(playerid, "Textureli obje kopyalamayý aktif hale getirdiniz.");
    }
    return 1;
}

CMD:galeridurum(playerid)
{
    if(PlayerInfo[playerid][pAdmin] < 10) return HataMesaji(playerid, "Yetkiniz bulunmuyor.");
    if(SunucuBilgi[GaleriDurum])
    {
        SunucuBilgi[GaleriDurum] = 0;
        BasariMesaji(playerid, "Galeri araç satýþlarýný aktif ettiniz.");
    }
    else
    {
        SunucuBilgi[GaleriDurum] = 1;
        BasariMesaji(playerid, "Galeri araç satýþlarýný pasife çektiniz.");
    }
    return 1;
}

CMD:illegaldurum(playerid)
{
    if(PlayerInfo[playerid][pAdmin] < 10) return HataMesaji(playerid, "Yetkiniz bulunmuyor.");
    if(SunucuBilgi[SiparisNoktalari])
    {
        SunucuBilgi[SiparisNoktalari] = 0;
        BasariMesaji(playerid, "Sipariþ noktalarý aktif edildi.");
    }
    else
    {
        SunucuBilgi[SiparisNoktalari] = 1;
        BasariMesaji(playerid, "Sipariþ noktalarý pasife çekildi.");
    }
    return 1;
}

CMD:yakit(playerid, params[])
{
    if(PlayerInfo[playerid][pJob] != 0)
        return HataMesajiC(playerid, "Trucker mesleðinde deðilsin.");
        
    new secenek[64];
    if(sscanf(params, "s[64]", secenek))
        return KullanimMesajiC(playerid, "/yakit [yukle/iptal/teslim/gps]");

    if(!strcmp(secenek, "yukle", true))
        pc_cmd_yakityukle(playerid);
    
    else if(!strcmp(secenek, "iptal", true))
        pc_cmd_yakitiptal(playerid);
    
    else if(!strcmp(secenek, "teslim", true))
        pc_cmd_yakitteslim(playerid);
    
    else if(!strcmp(secenek, "gps", true))
        Dialog_Show(playerid, TruckerYakit, DIALOG_STYLE_LIST, "Yakýt Taþýmacýlýðý", "Yakýt Yükleme Noktasý ($1000)\nYakýt Teslim Noktasý ($1750)\nYakýt Teslim Noktasý ($2000)\nYakýt Teslim Noktasý ($3500)", "Tamam", "Ýptal");

    return 1;
}

Dialog:TruckerYakit(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        switch(listitem)
        {
            case 0:
            {
                AC_SetPlayerCheckpoint(playerid, 250.074401, 1420.627807, 10.585937, 5.0);
                BasariMesaji(playerid, "Yakýt yükleme noktasý haritanýzda iþaretlendi.");
            }
            case 1:
            {
                AC_SetPlayerCheckpoint(playerid, 2130.653564, 892.638488, 10.820312, 5.0);
                BasariMesaji(playerid, "Yakýt teslim noktasý haritanýzda iþaretlendi.");
            }
            case 2:
            {
                AC_SetPlayerCheckpoint(playerid, 665.944824, -582.788269, 16.335937, 5.0);
                BasariMesaji(playerid, "Yakýt teslim noktasý haritanýzda iþaretlendi.");
            }
            case 3:
            {
                AC_SetPlayerCheckpoint(playerid, -2430.835205, 953.155029, 45.296875, 5.0);
                BasariMesaji(playerid, "Yakýt teslim noktasý haritanýzda iþaretlendi.");
            }
        }
    }
    return 1;
}

CMD:kilometresifirla(playerid)
{
    if(IsPlayerInRangeOfPoint(playerid, 5, EXTERIOR_TUNING_X, EXTERIOR_TUNING_Y, EXTERIOR_TUNING_Z) == 0)
    {
        AC_SetPlayerCheckpoint(playerid, EXTERIOR_TUNING_X, EXTERIOR_TUNING_Y, EXTERIOR_TUNING_Z, 1.0);
        return HataMesajiC(playerid, "Bu komutu \"modifiye noktasý\" üzerinde kullanabilirsin.");
    }

    if(!IsPlayerInAnyVehicle(playerid)) return HataMesajiC(playerid, "Herhangi bir araçta deðilsin.");
    if(GetPVarInt(playerid, "pTamir") > 0) return HataMesajiC(playerid, "Kilometre sýfýrlama sürüyor lütfen bekleyin.");

    new vehicleid = GetPlayerVehicleID(playerid);
    if(!IsValidVehicle(vehicleid)) return HataMesajiC(playerid, "Araçta deðilsiniz.");
    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return HataMesajiC(playerid, "Araçta sürücü deðilsiniz.");
    if(VehicleInfo[vehicleid][vEngine]) return HataMesajiC(playerid, "Kilometre sýfýrlama iþlemi için motoru kapatmalýsýnýz.");
    new tutar = VehicleInfo[vehicleid][vKMGosteren] * 50;
    
    if(PlayerInfo[playerid][pCash] < tutar)
        return HataMesaji(playerid, "Yeterli miktarda paranýz yok. ($%d)", tutar);

    OAC_GivePlayerMoney(playerid, -tutar);
    SetTimerEx("KilometreSifirla", 10000, false, "ddd", playerid, tutar, vehicleid);
    SunucuMesaji(playerid, "Kilometre sýfýrlama iþlemi baþladý, lütfen 10 saniye bekleyin.");
    SetPVarInt(playerid, "pTamir", 1);
    DestroyDynamic3DTextLabelEx(PlayerInfo[playerid][pNameTag]);
    PlayerInfo[playerid][pNameTag] = CreateDynamic3DTextLabel("(( Kullanýcý þu anda aracýnýn kilometresini sýfýrlýyor. ))", COLOR_ADMIN, 0, 0, 0.5, 30.0, playerid, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0);
    return 1;
}
KilometreSifirla(playerid, cash, vehicleid); public KilometreSifirla(playerid, cash, vehicleid)
{
    VehicleInfo[vehicleid][vKMGosteren] = 0;
    BasariMesaji(playerid, "$%d karþýlýðýnda aracýnýn kilometresini sýfýrladýn.", cash);
    SaveVehicle(vehicleid);
    //SetPVarInt(playerid, "pTamir", 0);
    DeletePVar(playerid, "pTamir");
    RemoveTag(playerid);
    return 1;
}

flags:vergiode(CMD_USER);
CMD:vergiode(playerid)
{
    if(GetPlayerVirtualWorld(playerid) != 5550 && GetPlayerInterior(playerid) != 1) return HataMesajiC(playerid, "City Hall binasýnda deðilsin.");
    Dialog_Show(playerid, CityHallVergi, DIALOG_STYLE_LIST, "City Hall - Vergi Ödeme Ýþlemleri", "Ev\nÝþletme ya da Garaj\nAraç", "Tamam", "Ýptal");
    return 1;
}
Dialog:CityHallVergi(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new qstring[1024], count;
            
        switch(listitem)
        {
            case 0:
            {
                foreach(new h : Houses) if(HouseInfo[h][hExists] && PlayerInfo[playerid][pID] == HouseInfo[h][hOwner])
                {
                    count++;
                    format(qstring, sizeof(qstring), "%sKapý no: %d (%s) - Tutar: $%d\n", qstring, h, House_GetAddress(h), HouseInfo[h][hVergi]);
                }
                if(!count) return HataMesajiC(playerid, "Üzerinize kayýtlý ev bulunamadý.");
                Dialog_Show(playerid, xEvVergiOde, DIALOG_STYLE_LIST, "City Hall - Ev Vergi Ödeme", qstring, "Öde", "Ýptal");
            }
            case 1:
            {
                foreach(new b : Buildings) if(BuildingInfo[b][bExists] && PlayerInfo[playerid][pID] == BuildingInfo[b][bOwner])
                {
                    count++;
                    format(qstring, sizeof(qstring), "%s %s - No: %d - Tutar: $%d\n", qstring, BuildingInfo[b][bName], b, BuildingInfo[b][bVergi]);
                }
                if(!count) return HataMesajiC(playerid, "Üzerinize kayýtlý iþletme ya da garaj bulunamadý.");
                Dialog_Show(playerid, xIsletmeVergiOde, DIALOG_STYLE_LIST, "City Hall - Ýþletme/Garaj Vergi Ödeme", qstring, "Öde", "Ýptal");
            }
            case 2:
            {
                mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT * FROM vehicles WHERE owner_id = '%d'", PlayerInfo[playerid][pID]);
                return mysql_tquery(ourConnection, queryx, "AraclariminListesi", "d", playerid);
            }
        }
    }
    return 1;
}

Dialog:xEvVergiOde(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new count, houseid;

        foreach(new h : Houses) if(HouseInfo[h][hExists] && PlayerInfo[playerid][pID] == HouseInfo[h][hOwner])
        {
            if(listitem == count)
            {
                houseid = h;
                break;
            }
            count++;
        }
        
        if(HouseInfo[houseid][hVergi] <= 0)
            return HataMesajiC(playerid, "Zaten vergi borcu bulunmuyor.");

        if(PlayerInfo[playerid][pCash] < HouseInfo[houseid][hVergi])
            return HataMesaji(playerid, "Yeterli miktarda paranýz yok. ($%d)", HouseInfo[houseid][hVergi]);

        OAC_GivePlayerMoney(playerid, -HouseInfo[houseid][hVergi]);
        BasariMesaji(playerid, "%d nolu evin $%d vergi borcunu ödediniz. (%s)", houseid, HouseInfo[houseid][hVergi], ReturnDate());
        HouseInfo[houseid][hVergi] = 0;
        SaveHouse(houseid);
    }
    return 1;
}

Dialog:xIsletmeVergiOde(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new buildingid, count;
        
        foreach(new b : Buildings) if(BuildingInfo[b][bExists] && PlayerInfo[playerid][pID] == BuildingInfo[b][bOwner])
        {
            if(listitem == count)
            {
                buildingid = b;
                break;
            }
            count++;
        }
        
        if(BuildingInfo[buildingid][bVergi] <= 0)
            return HataMesajiC(playerid, "Zaten vergi borcunuz bulunmuyor.");

        if(PlayerInfo[playerid][pCash] < BuildingInfo[buildingid][bVergi])
            return HataMesajiC(playerid, "Yeterli miktarda paranýz yok.");

        OAC_GivePlayerMoney(playerid, -BuildingInfo[buildingid][bVergi]);
        BasariMesaji(playerid, "%d iþletmenin $%d vergi borcunu ödediniz. (%s)", buildingid, BuildingInfo[buildingid][bVergi], ReturnDate());
        BuildingInfo[buildingid][bVergi] = 0;
        SaveBuilding(buildingid);
    }
    return 1;
}

Dialog:xAracVergiOde(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT * FROM vehicles WHERE owner_id = '%d'", PlayerInfo[playerid][pID]);
        return mysql_tquery(ourConnection, queryx, "AraciminVergisiniOde", "dd", playerid, listitem);
    }
    return 1;
}

AraclariminListesi(playerid); public AraclariminListesi(playerid)
{
    static rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);

    if(!rows) return SunucuMesajiC(playerid, "Araca sahip deðilsin.");
    new tmpID, tmpModel, tmpPlate[13], qvergi, ystring[1024];
    for(new i; i < rows; i++)
    {
        cache_get_value_int(i, "id", tmpID);
        cache_get_value_int(i, "model", tmpModel);
        cache_get_value_int(i, "vergi", qvergi);
        cache_get_value(i, "plate", tmpPlate, 13);

        if(tmpModel == 509 || tmpModel == 481 || tmpModel == 510) format(tmpPlate, sizeof(tmpPlate), "N/A");

        format(ystring, sizeof(ystring), "%s%s (%s) (SQLID: %d) - Tutar: $%d\n", ystring, GetVehicleModelName(tmpModel), tmpPlate, tmpID, qvergi);
    }
    Dialog_Show(playerid, xAracVergiOde, DIALOG_STYLE_LIST, "City Hall - Araç Vergi Ödeme", ystring, "Öde", "Ýptal");
    return 1;
}

AraciminVergisiniOde(playerid, listitem); public AraciminVergisiniOde(playerid, listitem)
{
    static rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);

    if(!rows) return SunucuMesajiC(playerid, "Araca sahip deðilsin.");
    new tmpID, tmpModel, tmpPlate[13], qvergi;
    for(new i; i < rows; i++)
    {
        cache_get_value_int(i, "id", tmpID);
        cache_get_value_int(i, "model", tmpModel);
        cache_get_value_int(i, "vergi", qvergi);
        cache_get_value(i, "plate", tmpPlate, 13);

        if(tmpModel == 509 || tmpModel == 481 || tmpModel == 510) format(tmpPlate, sizeof(tmpPlate), "N/A");
        if(listitem == i)
        {
            if(qvergi <= 0)
                return HataMesajiC(playerid, "Zaten bu aracýn vergi borcu bulunmuyor.");

            if(PlayerInfo[playerid][pCash] < qvergi)
                return HataMesaji(playerid, "Yeterli miktarda paranýz yok. ($%d)", qvergi);
        
            new vid = -1;

            foreach(new j : Vehicles) if(IsValidVehicle(j) && VehicleInfo[j][vID] == tmpID)
                vid = j;
                
            if(vid != -1)
            {
                VehicleInfo[vid][vVergi] = 0;
                OAC_GivePlayerMoney(playerid, -qvergi);
                SaveVehicle(vid);
                BasariMesaji(playerid, "%d nolu %s plakalý %s model aracýn $%d vergi borcunu ödediniz. (%s)", vid, tmpPlate, GetVehicleModelName(tmpModel), qvergi, ReturnDate());
            }
            else
            {
                OAC_GivePlayerMoney(playerid, -qvergi);
                mysql_format(ourConnection, queryx, sizeof(queryx), "UPDATE vehicles SET vergi = '0' WHERE id = '%d'", tmpID);
                mysql_tquery(ourConnection, queryx);
                BasariMesaji(playerid, "%d nolu %s plakalý %s model aracýn $%d vergi borcunu ödediniz. (%s)", tmpID, tmpPlate, GetVehicleModelName(tmpModel), qvergi, ReturnDate());
            }
            break;
        }
    }
    return 1;
}

Dialog:19pSatinAl(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        if(!isnull(inputtext))
        {
            if(IsNumeric(inputtext))
            {
                if(strval(inputtext) > 0)
                {
                    if(strval(inputtext) > 100)
                        return HataMesajiC(playerid, "Tek seferde en fazla 100 adet SA-Point alabilirsiniz.");
                        
                    new ucret = strval(inputtext) * 5000;
                    if(PlayerInfo[playerid][pCash] < ucret)
                        return HataMesaji(playerid, "Üzerinizde yeterli miktarda para bulunmuyor. ($%d)", ucret);

                    OAC_GivePlayerMoney(playerid, -ucret);
                    PlayerInfo[playerid][pCoyn] += strval(inputtext);
                    SaveCharacter(playerid);
                    BasariMesaji(playerid, "$%d karþýlýðýnda %d adet SA-Point satýn aldýn.", ucret, strval(inputtext));
                }
                else HataMesajiC(playerid, "0'dan büyük veri giriþi yapmalýsýnýz.");
            }
            else HataMesajiC(playerid, "Sadece sayýsal veri giriþi yapmalýsýnýz.");
        }
        else HataMesajiC(playerid, "Boþ veri giriþi yapamazsýnýz.");
    }
    return 1;
}

flags:isyeriayril(CMD_USER);
CMD:isyeriayril(playerid)
{
    new isyeri = GetPlayerMenuBiz(playerid);
    
    if(isyeri == -1)
        return HataMesajiC(playerid, "Yetkiniz olan herhangi bir iþletmeye yakýn deðilsiniz.");

    if(PlayerInfo[playerid][pCalistigiIsyeri][0] == -1 || PlayerInfo[playerid][pCalistigiIsyeri][1] == -1)
        return HataMesaji(playerid, "Herhangi bir iþletmede çalýþmýyorsunuz.");
        
    if(PlayerInfo[playerid][pCalistigiIsyeri][0] != isyeri)
       return HataMesaji(playerid, "Bu iþletmede çalýþmýyorsunuz.");

    for(new x; x < 20; x++)
    {
        if(BuildingInfo[isyeri][Calisan][x] == PlayerInfo[playerid][pID])
        {
            BuildingInfo[isyeri][Calisan][x] = 0;
            break;
        }
    }

    BuildingInfo[isyeri][bCalisanSayisi]--;
    PlayerInfo[playerid][pCalistigiIsyeri][0] = -1;
    PlayerInfo[playerid][pCalistigiIsyeri][1] = -1;
    BasariMesaji(playerid, "Çalýþtýðýnýz iþletmeden ayrýldýnýz");
    IsletmeCalisanKayit(isyeri);
    SaveCharacter(playerid);
    return 1;
}

CMD:arackirala(playerid, params[])
{
    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
        return HataMesajiC(playerid, "Bu komutu sadece aracýn sürücü koltuðunda kullanabilirsin.");

    new vehid = GetPlayerVehicleID(playerid);
    
    if(VehicleInfo[vehid][vIAKS])
    {
        new AracKiralamaKontrol, KID;
        foreach(new i : KiralikAraclar)
        {
            if(KiralikArac[i][kaID] == VehicleInfo[vehid][vID])
                KID = i;

            if(KiralikArac[i][kaKiralandi] && KiralikArac[i][kaKiralayan] == PlayerInfo[playerid][pID] && vehid != KiralikArac[i][kaID])
            {
                AracKiralamaKontrol = 1;
                break;
            }
        }

        if(AracKiralamaKontrol == 1)return
            HataMesajiC(playerid, "Þu anda zaten araç kiralama sisteminden yararlanýyorsunuz."), HataMesajiC(playerid, "Diðer kiralýk aracýn süresi bitmeden yenisini kiralayamazsýnýz!");

        if(VehicleInfo[vehid][vKiralik] > 0 && VehicleInfo[vehid][vKiralayan] != PlayerInfo[playerid][pID])
            return HataMesaji(playerid, "Bu aracýn kira süresi henüz dolmamýþ, bu iþlemi tekrar yapamazsýnýz.");

        new xstring[200];
        
        if(VehicleInfo[vehid][vKiralayan] == -1)
        {
            format(xstring, sizeof(xstring), "%s model aracý saatlik $%d ücret karþýlýðýnda kiralamak istiyor musunuz?\nOnaylýyorsanýz 'EVET' yazýn. (%s)", GetVehicleModelName(VehicleInfo[vehid][vModel]), VehicleInfo[vehid][vIAKS], ReturnDate());
            Dialog_Show(playerid, StatikAracKiralama, DIALOG_STYLE_INPUT, "Araç Kiralama Sistemi", xstring, "Onay", "Ýptal");
        }
        else if(VehicleInfo[vehid][vKiralayan] == PlayerInfo[playerid][pID])
        {
            format(xstring, sizeof(xstring), "%s model aracý saatlik $%d ücret karþýlýðýnda bir saat daha kiralamak istiyor musunuz?\nOnaylýyorsanýz 'EVET' yazýn. (%s)", GetVehicleModelName(VehicleInfo[vehid][vModel]), VehicleInfo[vehid][vIAKS], ReturnDate());
            Dialog_Show(playerid, StatikAracKiralama, DIALOG_STYLE_INPUT, "Araç Kiralama Sistemi", xstring, "Onay", "Ýptal");
        }
        SetPVarInt(playerid, "AKSID", vehid);
        SetPVarInt(playerid, "KID", KID);
    }
    else
    {
        if(Vehicle_IsOwner(playerid, vehid, true) == 0)
            return HataMesajiC(playerid, "Bu araç sana ait deðil, baþkasýna kiralatamazsýn.");

        new id, tutar;

        if(sscanf(params, "k<m>d", id, tutar))
            return KullanimMesajiC(playerid, "/arackirala [id/isim] [tutar]");

        if(!IsPlayerConnected(id) || !PlayerInfo[id][pLogged] || playerid == id)
            return HataMesajiC(playerid, "Geçersiz ID.");

        if(GetPVarInt(playerid, "IstekGonderildi") > 0 || GetPVarInt(playerid, "IstekAlindi") > 0)
            return HataMesajiC(playerid, "Bu iþlemi þu anda yapamazsýnýz.");

        if(GetPVarInt(id, "IstekGonderildi") > 0 || GetPVarInt(id, "IstekAlindi") > 0)
            return HataMesajiC(playerid, "Bu iþlemi þu anda yapamazsýnýz.");

        if(PlayerInfo[id][pCash] < tutar)
            return HataMesajiC(playerid, "Belirtilen oyuncunun üzerinde yeterli miktarda para bulunmuyor.");

        if(tutar < 1) return HataMesajiC(playerid, "Hatalý deðer giriþi tespit edildi.");

        if(!ProxDetectorS(5.0, playerid, id))
            return HataMesajiC(playerid, "Belirtilen oyuncuya yakýn deðilsiniz.");

        if(VehicleInfo[vehid][vKiralik] > 0 && VehicleInfo[vehid][vKiralayan] != PlayerInfo[id][pID])
            return HataMesaji(playerid, "Bu aracýn kira süresi henüz dolmamýþ, baþkasýna kiralayamazsýnýz.");

        new string[200];
        format(string, sizeof(string), "%s size %s model aracýný saatlik $%d ücret karþýlýðýnda kiralamak istiyor.\nOnaylýyorsanýz 'EVET' yazýn. (%s)", ReturnRoleplayName(playerid), GetVehicleModelName(VehicleInfo[vehid][vModel]), tutar, ReturnDate());
        Dialog_Show(id, AracKiralamaIstegi, DIALOG_STYLE_INPUT, "Araç Kiralama Teklifi", string, "Onay", "Ýptal");
        BasariMesaji(playerid, "%s adlý oyuncuya araç kiralama isteði gönderdiniz. (%s)", ReturnRoleplayName(id), ReturnDate());

        SetPVarInt(playerid, "IstekGonderildi", 1);
        SetPVarInt(playerid, "IstekGonderilenAracID", VehicleInfo[vehid][vID]);
        SetPVarInt(playerid, "IstekGonderdigimKisi", id);

        SetPVarInt(id, "IstekAlindi", 1);
        SetPVarInt(id, "IstekGonderen", playerid);
        SetPVarInt(id, "IstekGonderenVehID", vehid);
        SetPVarInt(id, "IstekTutar", tutar);
    }
    return 1;
}

Dialog:StatikAracKiralama(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        if(isnull(inputtext))
        {
            HataMesajiC(playerid, "Hatalý onay kodu giriþi, iþlem baþarýsýz.");
            return 1;
        }

        if(!strcmp("EVET", inputtext, true))
        {
            new vid = GetPVarInt(playerid, "AKSID");
            new KID = GetPVarInt(playerid, "KID");
            DeletePVar(playerid, "AKSID");
            DeletePVar(playerid, "KID");

            if(vid != GetPlayerVehicleID(playerid))
                return HataMesajiC(playerid, "Teklif menüsündeyken araç deðiþtirip baþka aracý kiralayamazsýnýz.");

            if(VehicleInfo[vid][vIAKS])
            {
                new tutar = VehicleInfo[vid][vIAKS];
                
                VehicleInfo[vid][vKiralayan] = PlayerInfo[playerid][pID];
                VehicleInfo[vid][vKiralik] += 60;

                OAC_GivePlayerMoney(playerid, -tutar);
                
                KiralikArac[KID][kaKiralandi] = true;
                KiralikArac[KID][kaKiralayan] = VehicleInfo[vid][vKiralayan];

                printf("(Kira: %s - %d) %s > $%d > %s (%s)", GetVehicleModelName(VehicleInfo[vid][vModel]), VehicleInfo[vid][vID], "Sistem", tutar, ReturnRoleplayName(playerid), ReturnDate());

                if(VehicleInfo[vid][vKiralik] < 61) BasariMesaji(playerid, "%s model aracý $%d karþýlýðýnda bir saatliðine kiraladýnýz.", GetVehicleModelName(VehicleInfo[vid][vModel]), tutar);
                else BasariMesaji(playerid, "%s model aracý $%d karþýlýðýnda bir saatliðine daha kiraladýnýz.", GetVehicleModelName(VehicleInfo[vid][vModel]), tutar);
            }
            else HataMesajiC(playerid, "Üzgünüm, bir hata oluþtu. Lütfen daha sonra tekrar deneyin.");
        }
        else HataMesajiC(playerid, "Hatalý onay kodu giriþi, iþlem baþarýsýz.");
    }
    return 1;
}

Dialog:AracKiralamaIstegi(playerid, response, listitem, inputtext[])
{
    if(GetPVarInt(playerid, "IstekAlindi") > 0)
    {
        new id = GetPVarInt(playerid, "IstekGonderen");
        new tutar = GetPVarInt(playerid, "IstekTutar");
        
        if(!IsPlayerConnected(id) || !PlayerInfo[id][pLogged])
        {
            DeletePVar(playerid, "IstekAlindi");
            DeletePVar(playerid, "IstekGonderen");
            DeletePVar(playerid, "IstekGonderenVehID");
            DeletePVar(playerid, "IstekTutar");

            return HataMesajiC(playerid, "Ýstek gönderen kiþi oyundan ayrýlmýþ.");
        }
        
        if(!response)
        {
            DeletePVar(playerid, "IstekAlindi");
            DeletePVar(playerid, "IstekGonderen");
            DeletePVar(playerid, "IstekGonderenVehID");
            DeletePVar(playerid, "IstekTutar");
            
            if(IsPlayerConnected(id) && PlayerInfo[id][pLogged])
            {
                DeletePVar(id, "IstekGonderildi");
                DeletePVar(id, "IstekGonderilenAracID");
                DeletePVar(id, "IstekGonderdigimKisi");
            }
            return 1;
        }
            
        new vid = GetPVarInt(playerid, "IstekGonderenVehID");
        new vsqlid = GetPVarInt(id, "IstekGonderilenAracID");
        
        if(VehicleInfo[vid][vID] != vsqlid)
        {
            DeletePVar(playerid, "IstekAlindi");
            DeletePVar(playerid, "IstekGonderen");
            DeletePVar(playerid, "IstekGonderenVehID");
            DeletePVar(playerid, "IstekTutar");

            if(IsPlayerConnected(id) && PlayerInfo[id][pLogged])
            {
                DeletePVar(id, "IstekGonderildi");
                DeletePVar(id, "IstekGonderilenAracID");
                DeletePVar(id, "IstekGonderdigimKisi");
            }
            return HataMesajiC(playerid, "Bir hata oluþtu, istek geçersiz durumda.");
        }

        if(isnull(inputtext))
        {
            HataMesajiC(playerid, "Hatalý onay kodu giriþi, iþlem baþarýsýz.");
            return 1;
        }

        if(!strcmp("EVET", inputtext, true))
        {
            if(VehicleInfo[vid][vKiralik] > 0 && VehicleInfo[vid][vKiralayan] != PlayerInfo[playerid][pID])
            {
                DeletePVar(playerid, "IstekAlindi");
                DeletePVar(playerid, "IstekGonderen");
                DeletePVar(playerid, "IstekGonderenVehID");
                DeletePVar(playerid, "IstekTutar");

                if(IsPlayerConnected(id) && PlayerInfo[id][pLogged])
                {
                    DeletePVar(id, "IstekGonderildi");
                    DeletePVar(id, "IstekGonderilenAracID");
                    DeletePVar(id, "IstekGonderdigimKisi");
                }
                return HataMesajiC(playerid, "Bu araç baþkasýna kiralanmýþ ve kira süresi henüz dolmamýþ.");
            }
                
            VehicleInfo[vid][vKiralayan] = PlayerInfo[playerid][pID];
            VehicleInfo[vid][vKiralik] += 60;
            
            OAC_GivePlayerMoney(playerid, -tutar);
            OAC_GivePlayerMoney(id, tutar);
            
            if(VehicleInfo[vid][vKiralik] < 61) BasariMesaji(id, "%s model araç $%d karþýlýðýnda 1 saatliðine kiralandý.", GetVehicleModelName(VehicleInfo[vid][vModel]), tutar);
            else BasariMesaji(id, "%s model araç $%d karþýlýðýnda 1 saatliðine daha kiralandý.", GetVehicleModelName(VehicleInfo[vid][vModel]), tutar);

            if(tutar > 0)
            {
                DeletePVar(playerid, "IstekAlindi");
                DeletePVar(playerid, "IstekGonderen");
                DeletePVar(playerid, "IstekGonderenVehID");
                DeletePVar(playerid, "IstekTutar");
                if(IsPlayerConnected(id) && PlayerInfo[id][pLogged])
                {
                    DeletePVar(id, "IstekGonderildi");
                    DeletePVar(id, "IstekGonderilenAracID");
                    DeletePVar(id, "IstekGonderdigimKisi");
                }
            }

            printf("(Kira: %s - %d) %s > $%d > %s (%s)", GetVehicleModelName(VehicleInfo[vid][vModel]), VehicleInfo[vid][vID], ReturnRoleplayName(id), tutar, ReturnRoleplayName(playerid), ReturnDate());

            if(VehicleInfo[vid][vKiralik] < 61) return BasariMesaji(playerid, "%s model aracý $%d karþýlýðýnda bir saatliðine kiraladýnýz.", GetVehicleModelName(VehicleInfo[vid][vModel]), tutar);
            else return BasariMesaji(playerid, "%s model aracý $%d karþýlýðýnda bir saatliðine daha kiraladýnýz.", GetVehicleModelName(VehicleInfo[vid][vModel]), tutar);
        }
        else
        {
            DeletePVar(playerid, "IstekAlindi");
            DeletePVar(playerid, "IstekGonderen");
            DeletePVar(playerid, "IstekGonderenVehID");
            DeletePVar(playerid, "IstekTutar");

            if(IsPlayerConnected(id) && PlayerInfo[id][pLogged])
            {
                DeletePVar(id, "IstekGonderildi");
                DeletePVar(id, "IstekGonderilenAracID");
                DeletePVar(id, "IstekGonderdigimKisi");
            }
            return HataMesajiC(playerid, "Hatalý onay kodu giriþi, iþlem baþarýsýz.");
        }
    }
    else
    {
        new cid = GetPVarInt(playerid, "IstekGonderen");

        DeletePVar(playerid, "IstekAlindi");
        DeletePVar(playerid, "IstekGonderen");
        DeletePVar(playerid, "IstekGonderenVehID");
        DeletePVar(playerid, "IstekTutar");
        
        if(IsPlayerConnected(cid) && PlayerInfo[cid][pLogged])
        {
            DeletePVar(cid, "IstekGonderildi");
            DeletePVar(cid, "IstekGonderilenAracID");
            DeletePVar(cid, "IstekGonderdigimKisi");
        }
    }
    return 1;
}

CMD:hspecoff(playerid)
{
    if(PlayerInfo[playerid][pAdmin] != 3)
        return HataMesaji(playerid, "Bu komutu kullanmak için yetkiniz yok.");

    if(GetPlayerState(playerid) != PLAYER_STATE_SPECTATING)
        return HataMesajiC(playerid, "Zaten bir oyuncuyu izlemiyorsunuz.");

    if(PlayerInfo[playerid][pInRecon] != -1)
    {
        PlayerInfo[PlayerInfo[playerid][pInRecon]][pIzleniyor] = -1;
    }

    TogglePlayerSpectating(playerid, 0);
    PlayerSpectatePlayer(playerid, INVALID_PLAYER_ID);
    PlayerSpectateVehicle(playerid, INVALID_VEHICLE_ID);
    PlayerInfo[playerid][pInRecon] = -1;
    AC_ResetTimer(playerid);
    PreloadAnimations(playerid);
    AC_SetPlayerHealth(playerid, 100);
    SetPlayerPos(playerid, GetPVarFloat(playerid, "SpecX"), GetPVarFloat(playerid, "SpecY"), GetPVarFloat(playerid, "SpecZ"));
    SetPlayerFacingAngle(playerid, GetPVarFloat(playerid, "SpecA"));
    SetPlayerInterior(playerid, GetPVarInt(playerid, "SpecINT"));
    AC_SetPlayerVirtualWorld(playerid, GetPVarInt(playerid, "SpecVW"));
    if(GetPVarInt(playerid, "SpecVW") < 1)
    {
        SetPlayerWeather(playerid, SunucuBilgi[CurrentWeather]);
        SetPlayerTime(playerid, SunucuBilgi[CurrentHour], 0);
    }
    SetCameraBehindPlayer(playerid);
    PlayerInfo[playerid][pJustSpawned] = true;
    SetTimerEx("OnPlayerSetData", 1000, false, "d", playerid);
    return 1;
}

CMD:hspec(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] != 3)
        return HataMesaji(playerid, "Bu komutu kullanmak için yetkiniz yok.");

    new id;

    if(sscanf(params, "u", id))return
        KullanimMesajiC(playerid, "/hspec [id/isim] || /hspecoff");

    if(!IsPlayerConnected(id) || id == playerid)return
        HataMesajiC(playerid, "Geçersiz ID.");

    if(PlayerInfo[id][pAdmin] >= 4 && PlayerInfo[playerid][pAdmin] < 20)
        return HataMesajiC(playerid, "Yöneticileri izleyemezsin.");
        
    if(PlayerInfo[id][pLevel] > 3) return HataMesajiC(playerid, "3 seviye üstünü izleyemezsin.");
    
    if(GetPlayerState(playerid) != PLAYER_STATE_SPECTATING)
    {
        new weapons[12];
        new ammo[12];

        for(new x; x < 12; x++)
        {
            GetPlayerWeaponData(playerid, x, weapons[x], ammo[x]);
            if(!AC_PlayerHasWeapon(playerid, weapons[x]) || !ammo[x])
            {
                weapons[x] = 0;
                ammo[x] = 0;
            }
            PlayerInfo[playerid][pWeapons][x] = weapons[x];
            PlayerInfo[playerid][pAmmo][x] = ammo[x];
        }

        AC_GetPlayerHealth(playerid, PlayerInfo[playerid][pHealth]);
        AC_GetPlayerArmour(playerid, PlayerInfo[playerid][pArmour]);
    }

    Player_Recon(playerid, id);
    PlayerInfo[playerid][pSpecMode] = 1;

    return 1;
}

CMD:ilacal(playerid)
{
    if(!PlayerInfo[playerid][pDrugster]) return HataMesajiC(playerid, "Madde baðýmlýsý deðilsiniz.");

    new buildingid = GetPlayerBuilding(playerid, true);

    if(buildingid != -1 && BuildingInfo[buildingid][bType] == HASTANE)
    {
        new ilacmiktar;

        if(PlayerInfo[playerid][pDrugster] <= 25) ilacmiktar = 1;
        if(PlayerInfo[playerid][pDrugster] >= 26) ilacmiktar = 2;
        if(PlayerInfo[playerid][pDrugster] >= 51) ilacmiktar = 3;
        if(PlayerInfo[playerid][pDrugster] >= 76) ilacmiktar = 4;

        if(ilacmiktar == 0) return HataMesajiC(playerid, "Bir sorun oluþtu, daha sonra tekrar deneyin.");
        
        if(PlayerInfo[playerid][pCash] < (ilacmiktar * 1750))
            return HataMesaji(playerid, "Üzerinizde yeterli para yok. (%d paket Suboxone: $%d)", ilacmiktar, (ilacmiktar * 1750));
        
        new string[222];
        format(string, sizeof(string), "$%d karþýlýðýnda %d paket Suboxone türevi ilaç satýn almak istiyor musunuz?\nÖdemeyi onaylýyorsanýz kutucuða 'EVET' yazýn.", (ilacmiktar * 1750), ilacmiktar);
        Dialog_Show(playerid, SuboxoneTemini, DIALOG_STYLE_INPUT, "Suboxone", string, "Onay", "Iptal");
    }
    else HataMesajiC(playerid, "Hastane ya da klinikte deðilsiniz.");
    return 1;
}

Dialog:SuboxoneTemini(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        if(isnull(inputtext))
        {
            HataMesajiC(playerid, "Hatalý onay kodu giriþi, iþlem baþarýsýz.");
            return 1;
        }

        if(!strcmp("EVET", inputtext, true))
        {
            if(!PlayerInfo[playerid][pDrugster]) return HataMesajiC(playerid, "Madde baðýmlýsý deðilsiniz.");

            new buildingid = GetPlayerBuilding(playerid, true);

            if(buildingid != -1 && BuildingInfo[buildingid][bType] == HASTANE)
            {
                new ilacmiktar;

                if(PlayerInfo[playerid][pDrugster] <= 25) ilacmiktar = 1;
                if(PlayerInfo[playerid][pDrugster] >= 26) ilacmiktar = 2;
                if(PlayerInfo[playerid][pDrugster] >= 51) ilacmiktar = 3;
                if(PlayerInfo[playerid][pDrugster] >= 76) ilacmiktar = 4;

                if(ilacmiktar == 0) return HataMesajiC(playerid, "Bir sorun oluþtu, daha sonra tekrar deneyin.");

                if(Inventory_HasItem(playerid, "Suboxone", ITEM_INGREDIENT) == -1)
                {
                    if(PlayerInfo[playerid][pCash] < (ilacmiktar * 1750))
                        return HataMesaji(playerid, "Üzerinizde yeterli para yok. (%d paket Suboxone: $%d)", ilacmiktar, (ilacmiktar * 1750));

                    PlayerInfo[playerid][BagimlilikTedavi] = 2;
                    Inventory_AddItem(playerid, Inventory_FreeID(playerid), "Suboxone", ilacmiktar);
                    BasariMesaji(playerid, "$%d karþýlýðýnda %d paket Suboxone türevi ilaç satýn aldýnýz.", (ilacmiktar * 1750), ilacmiktar);
                    OAC_GivePlayerMoney(playerid, -(ilacmiktar * 1750));
                    BuildingInfo[buildingid][bCash] += (ilacmiktar * 175);
                    LogYaz(playerid, "/ilacal", -1);
                }
                else HataMesajiC(playerid, "Zaten üzerinizde Suboxone türevi ilaç bulunuyor, yenisini alamazsýnýz.");
            }
            else HataMesajiC(playerid, "Hastane ya da klinikte deðilsiniz.");
        }
        else HataMesajiC(playerid, "Hatalý onay kodu giriþi, iþlem baþarýsýz.");
    }
    return 1;
}

flags:addskin(CMD_Marvellous);
CMD:addskin(playerid, params[])
{
    new skinID, baseID, skinName[32];

    if(sscanf(params, "dds[32]", skinID, baseID, skinName))
        return KullanimMesajiC(playerid, "/addskin [skin id] [kemik id] [dosya adý] (skinler için)");

    new txd[32 + 4], dff[32 + 4];

    format(txd, sizeof txd, "%s.txd", skinName);
    format(dff, sizeof dff, "%s.dff", skinName);

    if(AddCharModel(baseID, skinID, dff, txd))
    {
        g_ModelsAwaiting += 1;
        SunucuMesaji(playerid, "Skin eklendi, /reloadmodels komutuyla yeni skinleri kullanýma açabilirsin.");
    }
    else HataMesaji(playerid, "Dosya adýnda .txd ve .dff kullanmadýðýndan ve bu dosyalarýn yüklü olduðundan emin ol.");

    return 1;
}

flags:addmodel(CMD_Marvellous);
CMD:addmodel(playerid, params[])
{
    new skinID, baseID, skinName[32];

    if(sscanf(params, "dds[32]", skinID, baseID, skinName))
        return KullanimMesajiC(playerid, "/addmodel [yeni model id] [model kemik id] [dosya adý] (objeler için)");

    new txd[32 + 4], dff[32 + 4];

    format(txd, sizeof txd, "%s.txd", skinName);
    format(dff, sizeof dff, "%s.dff", skinName);

    if(AddSimpleModel(-1, baseID, skinID, dff, txd))
    {
        g_ModelsAwaiting += 1;
        SunucuMesaji(playerid, "Model eklendi, /reloadmodels komutuyla yeni modelleri kullanýma açabilirsin.");
    }
    else HataMesaji(playerid, "Dosya adýnda .txd ve .dff kullanmadýðýndan ve bu dosyalarýn yüklü olduðundan emin ol.");

    return 1;
}

flags:reloadmodels(CMD_Marvellous);
CMD:reloadmodels(playerid)
{
    if(!g_ModelsAwaiting)
        return HataMesajiC(playerid, "Yüklenecek bir model bulunamadý.");

    foreach(new j : Player)
    {
        if(IsPlayerConnected(j) && PlayerInfo[j][pLogged])
        {
            AC_SetPlayerVirtualWorld(j, 31);
            PlayerInfo[j][pFreezed] = 1;
            TogglePlayerControllable(j, false);
            PlayerInfo[j][pSkinWorld] = GetPlayerVirtualWorld(j);
            SendFormattedMessage(j, COLOR_ADMIN, "%s yeni modelleri sunucuya entegre etti. [%s]", ReturnRoleplayName(playerid), ReturnDate());
        }
    }
    g_ModelsAwaiting = 0;
    return 1;
}

forward APBSuclu(playerid, username[]);
public APBSuclu(playerid, username[])
{
    static rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);

    if(!rows) return HataMesajiC(playerid, "Bu isimde karakter bulunamadý.");
    
    new APB = PlayerInfo[playerid][pMdcID];
    
    strreplace(username, ' ', '_');

    mysql_format(ourConnection, queryx, sizeof(queryx), "UPDATE wanteds SET suclu = '%e' WHERE id = '%d'", username, APB);
    mysql_tquery(ourConnection, queryx);

    SendFactionMessage(PlayerInfo[playerid][pFaction], "** HQ: %s #%d ID'li APB'nin þüphelisini güncelledi.", ReturnRoleplayName(playerid), APB);
    return 1;
}

stock IsVehicleRangeOfPoint(vehicleid,Float:range,Float:x,Float:y,Float:z)
{
    if(vehicleid == INVALID_VEHICLE_ID) return 0;

    new Float:DistantaCar = GetVehicleDistanceFromPoint(vehicleid, x, y, z);

    if(DistantaCar <= range) return 1;
    return 0;
}

NCKontrol(playerid); public NCKontrol(playerid)
{
    static rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);

    if(rows)
    {
        new accid;
        cache_get_value_int(0, "accid", accid);

        if(PlayerInfo[playerid][pAccountID] == accid)
        {
            if(PlayerInfo[playerid][pJailTime] && PlayerInfo[playerid][pJailC] != 0)
            {
                PlayerInfo[playerid][pJailTime] = 0;
                PlayerInfo[playerid][pJailC] = 0;
            }

            format(queryx, sizeof(queryx), "%s > NC > %s", PlayerInfo[playerid][pCharacterName], PlayerInfo[playerid][pTempName]);
            LogYaz(playerid, queryx, playerid);

            mysql_format(ourConnection, queryx, sizeof(queryx), "UPDATE characters SET char_name = '%e' WHERE id = '%d'", PlayerInfo[playerid][pTempName], PlayerInfo[playerid][pID]);
            mysql_tquery(ourConnection, queryx);

            mysql_format(ourConnection, queryx, sizeof(queryx), "INSERT INTO namechanges (accid, charid, username, charname, newname) VALUES ('%d', '%d', '%s', '%s', '%s')", PlayerInfo[playerid][pAccountID], PlayerInfo[playerid][pID], PlayerInfo[playerid][pUsername], PlayerInfo[playerid][pCharacterName], PlayerInfo[playerid][pTempName]);
            mysql_tquery(ourConnection, queryx);

            BasariMesaji(playerid, "Ýsmin %s iken %s olarak deðiþtirildi.", ReturnRoleplayName(playerid), PlayerInfo[playerid][pTempName]);
            PlayerInfo[playerid][pNickChange]--;
            PlayerInfo[playerid][pKarakterYapti] = 0;

            for(new i; i < 3; i++)
                PlayerInfo[playerid][pLicenses][i] = 0;

            PlayerInfo[playerid][pLicenseWarn] = 0;
            PlayerInfo[playerid][pBalikYetenegi] = 0;
            KickPlayer(playerid , "SA-RP", "Ýsim Deðiþikliði");
            mysql_format(ourConnection, queryx, sizeof queryx, "DELETE FROM user_keys WHERE owner_id = '%d'", PlayerInfo[playerid][pID]);
            mysql_tquery(ourConnection, queryx);
        }
        else HataMesajiC(playerid, "Bu isim kullanýlýyor.");
    }
    else
    {
        if(PlayerInfo[playerid][pJailTime] && PlayerInfo[playerid][pJailC] != 0)
        {
            PlayerInfo[playerid][pJailTime] = 0;
            PlayerInfo[playerid][pJailC] = 0;
        }

        format(queryx, sizeof(queryx), "%s > NC > %s", PlayerInfo[playerid][pCharacterName], PlayerInfo[playerid][pTempName]);
        LogYaz(playerid, queryx, playerid);

        mysql_format(ourConnection, queryx, sizeof(queryx), "UPDATE characters SET char_name = '%e' WHERE id = '%d'", PlayerInfo[playerid][pTempName], PlayerInfo[playerid][pID]);
        mysql_tquery(ourConnection, queryx);

        mysql_format(ourConnection, queryx, sizeof(queryx), "INSERT INTO namechanges (accid, charid, username, charname, newname) VALUES ('%d', '%d', '%s', '%s', '%s')", PlayerInfo[playerid][pAccountID], PlayerInfo[playerid][pID], PlayerInfo[playerid][pUsername], PlayerInfo[playerid][pCharacterName], PlayerInfo[playerid][pTempName]);
        mysql_tquery(ourConnection, queryx);

        BasariMesaji(playerid, "Ýsmin %s iken %s olarak deðiþtirildi.", ReturnRoleplayName(playerid), PlayerInfo[playerid][pTempName]);
        PlayerInfo[playerid][pNickChange]--;
        PlayerInfo[playerid][pKarakterYapti] = 0;
        PlayerInfo[playerid][pKamyoncuYetenegi] = 0;
        for(new i; i < 3; i++)
            PlayerInfo[playerid][pLicenses][i] = 0;

        PlayerInfo[playerid][pLicenseWarn] = 0;

        KickPlayer(playerid , "SA-RP", "Ýsim Deðiþikliði");
        mysql_format(ourConnection, queryx, sizeof queryx, "DELETE FROM user_keys WHERE owner_id = '%d'", PlayerInfo[playerid][pID]);
        mysql_tquery(ourConnection, queryx);
    }
    return 1;
}

NCKontrolUcretsiz(playerid); public NCKontrolUcretsiz(playerid)
{
    static rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);

    if(rows)
    {
        new accid;
        cache_get_value_int(0, "accid", accid);

        if(PlayerInfo[playerid][pAccountID] == accid)
        {
            if(PlayerInfo[playerid][pJailTime] && PlayerInfo[playerid][pJailC] != 0)
            {
                PlayerInfo[playerid][pJailTime] = 0;
                PlayerInfo[playerid][pJailC] = 0;
            }

            format(queryx, sizeof(queryx), "%s > NC > %s", PlayerInfo[playerid][pCharacterName], PlayerInfo[playerid][pTempName]);
            LogYaz(playerid, queryx, playerid);

            mysql_format(ourConnection, queryx, sizeof(queryx), "UPDATE characters SET char_name = '%e' WHERE id = '%d'", PlayerInfo[playerid][pTempName], PlayerInfo[playerid][pID]);
            mysql_tquery(ourConnection, queryx);

            mysql_format(ourConnection, queryx, sizeof(queryx), "INSERT INTO namechanges (accid, charid, username, charname, newname) VALUES ('%d', '%d', '%s', '%s', '%s')", PlayerInfo[playerid][pAccountID], PlayerInfo[playerid][pID], PlayerInfo[playerid][pUsername], PlayerInfo[playerid][pCharacterName], PlayerInfo[playerid][pTempName]);
            mysql_tquery(ourConnection, queryx);

            BasariMesaji(playerid, "Ýsmin %s iken %s olarak deðiþtirildi.", ReturnRoleplayName(playerid), PlayerInfo[playerid][pTempName]);
            PlayerInfo[playerid][pKarakterYapti] = 0;

            for(new i; i < 3; i++)
                PlayerInfo[playerid][pLicenses][i] = 0;

            PlayerInfo[playerid][pLicenseWarn] = 0;

            KickPlayer(playerid , "SA-RP", "Ýsim Deðiþikliði");
            mysql_format(ourConnection, queryx, sizeof queryx, "DELETE FROM user_keys WHERE owner_id = '%d'", PlayerInfo[playerid][pID]);
            mysql_tquery(ourConnection, queryx);
        }
        else HataMesajiC(playerid, "Bu isim kullanýlýyor.");
    }
    else
    {
        if(PlayerInfo[playerid][pJailTime] && PlayerInfo[playerid][pJailC] != 0)
        {
            PlayerInfo[playerid][pJailTime] = 0;
            PlayerInfo[playerid][pJailC] = 0;
        }

        format(queryx, sizeof(queryx), "%s > NC > %s", PlayerInfo[playerid][pCharacterName], PlayerInfo[playerid][pTempName]);
        LogYaz(playerid, queryx, playerid);

        mysql_format(ourConnection, queryx, sizeof(queryx), "UPDATE characters SET char_name = '%e' WHERE id = '%d'", PlayerInfo[playerid][pTempName], PlayerInfo[playerid][pID]);
        mysql_tquery(ourConnection, queryx);

        mysql_format(ourConnection, queryx, sizeof(queryx), "INSERT INTO namechanges (accid, charid, username, charname, newname) VALUES ('%d', '%d', '%s', '%s', '%s')", PlayerInfo[playerid][pAccountID], PlayerInfo[playerid][pID], PlayerInfo[playerid][pUsername], PlayerInfo[playerid][pCharacterName], PlayerInfo[playerid][pTempName]);
        mysql_tquery(ourConnection, queryx);

        BasariMesaji(playerid, "Ýsmin %s iken %s olarak deðiþtirildi.", ReturnRoleplayName(playerid), PlayerInfo[playerid][pTempName]);
        PlayerInfo[playerid][pKarakterYapti] = 0;

        for(new i; i < 3; i++)
            PlayerInfo[playerid][pLicenses][i] = 0;

        PlayerInfo[playerid][pLicenseWarn] = 0;

        KickPlayer(playerid , "SA-RP", "Ýsim Deðiþikliði");
        mysql_format(ourConnection, queryx, sizeof queryx, "DELETE FROM user_keys WHERE owner_id = '%d'", PlayerInfo[playerid][pID]);
        mysql_tquery(ourConnection, queryx);

    }
    return 1;
}

/*ReferansKontrol(playerid); public ReferansKontrol(playerid)
{
    static rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);

    if(rows)
    {
        new referans = -1;
        new kontrol = -1;
        
        cache_get_value_int(0, "referans", referans);
        
        if(referans > 0) kontrol = 1;
        else kontrol = 0;
        
        if(kontrol == 0)
        {
            Dialog_Show(playerid, DialogReferans, DIALOG_STYLE_INPUT, "Referans Sistemi", "Size referans olan oyuncunun forum adýný ya da karakter adýný (Ad_Soyad formatýnda) girin.", "Gir", "Ýptal");
        }
    }
    return 1;
}

Dialog:DialogReferans(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        if(!isnull(inputtext))
        {
            if(!IsNumeric(inputtext))
            {
                if(strlen(inputtext) >= 3 || strlen(inputtext) <= 30)
                {
                    if(strfind(inputtext, "_", true) == -1)
                    {
                        //accounts
                        mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT * FROM accounts WHERE username = '%e' AND banned = '0'", inputtext);
                        mysql_tquery(ourConnection, queryx, "RefKontrol", "d", playerid);
                    }
                    else
                    {
                        mysql_format(ourConnection, queryx, sizeof(queryx), "SELECT * FROM characters WHERE char_name = '%e' AND banned = '0'", inputtext);
                        mysql_tquery(ourConnection, queryx, "RefKontrolu", "d", playerid);
                    }
                }
                else Dialog_Show(playerid, DialogReferans, DIALOG_STYLE_INPUT, "Referans Sistemi", "Hatalý veri giriþi tespit edildi!\nSize referans olan oyuncunun forum adýný ya da karakter adýný (Ad_Soyad formatýnda) girin.", "Gir", "Ýptal");
            }
            else Dialog_Show(playerid, DialogReferans, DIALOG_STYLE_INPUT, "Referans Sistemi", "Hatalý veri giriþi tespit edildi!\nSize referans olan oyuncunun forum adýný ya da karakter adýný (Ad_Soyad formatýnda) girin.", "Gir", "Ýptal");
        }
        else Dialog_Show(playerid, DialogReferans, DIALOG_STYLE_INPUT, "Referans Sistemi", "Hatalý veri giriþi tespit edildi!\nSize referans olan oyuncunun forum adýný ya da karakter adýný (Ad_Soyad formatýnda) girin.", "Gir", "Ýptal");
    }
    else
    {
        printf("%s referans olan oyuncuyu yazmadi.", PlayerInfo[playerid][pUsername]);
        mysql_format(ourConnection, queryx, sizeof(queryx), "UPDATE accounts SET referans = '0' WHERE username = '%e'", PlayerInfo[playerid][pUsername]);
        mysql_tquery(ourConnection, queryx);
    }
    return 1;
}

RefKontrol(playerid); public RefKontrol(playerid)
{
    static rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);

    if(rows)
    {
        new tmpid, username[30];
        cache_get_value_int(0, "id", tmpid);
        cache_get_value(0, "username", username, 30);
        
        mysql_format(ourConnection, queryx, sizeof(queryx), "UPDATE accounts SET referans = '%d' WHERE username = '%e'", tmpid, PlayerInfo[playerid][pUsername]);
        mysql_tquery(ourConnection, queryx);
        
        printf("%s oyuncusuna ref olan kisi: %s.", PlayerInfo[playerid][pUsername], username);
        
        BasariMesaji(playerid, "%s kiþisini kendine referans gösterdin, 10. seviyeye ulaþtýðýnda kullanýcý ödüllendirilecektir.", username);
    }
    else
    {
        Dialog_Show(playerid, DialogReferans, DIALOG_STYLE_INPUT, "Referans Sistemi", "Hatalý veri giriþi tespit edildi!\nSize referans olan oyuncunun forum adýný ya da karakter adýný (Ad_Soyad formatýnda) girin.", "Gir", "Ýptal");
    }
    return 1;
}

RefKontrolu(playerid); public RefKontrolu(playerid)
{
    static rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);

    if(rows)
    {
        new tmpid, username[30];
        cache_get_value_int(0, "account_id", tmpid);
        cache_get_value(0, "char_name", username, 30);
        
        mysql_format(ourConnection, queryx, sizeof(queryx), "UPDATE accounts SET referans = '%d' WHERE username = '%e'", tmpid, PlayerInfo[playerid][pUsername]);
        mysql_tquery(ourConnection, queryx);

        BasariMesaji(playerid, "%s kiþisini kendine referans gösterdin, 10. seviyeye ulaþtýðýnda kullanýcý ödüllendirilecektir.", username);
        printf("%s oyuncusuna ref olan kisi: %s.", PlayerInfo[playerid][pUsername], username);
    }
    else
    {
        Dialog_Show(playerid, DialogReferans, DIALOG_STYLE_INPUT, "Referans Sistemi", "Hatalý veri giriþi tespit edildi!\nSize referans olan oyuncunun forum adýný ya da karakter adýný (Ad_Soyad formatýnda) girin.", "Gir", "Ýptal");
    }
    return 1;
}*/

CMD:esyacal(playerid, params[])
{
    if(PlayerInfo[playerid][pHirsizlik] >= 150)
        return HataMesaji(playerid, "Günlük hýrsýzlýk limitine ulaþmýþsýnýz. (Limit: 150 eþya)");
    if(SunucuBilgi[AntiDinamikObje])
        return HataMesaji(playerid, "Bu sistem geçici olarak geliþtirici ekip tarafýndan pasife çekildi.");
    if(GetPlayerInterior(playerid) == 0 && GetPlayerVirtualWorld(playerid) == 0)
        return HataMesaji(playerid, "Bu komutu burada kullanamazsýnýz.");
    if(PlayerInfo[playerid][pLevel] < 3) return
        SunucuMesaji(playerid, "Seviye 3 ve üstü kullanýcýlar bunu yapabilirler.");
    if(GetPlayerHouse(playerid, true) != -1)
    {
        new h = GetPlayerHouse(playerid, true);

        if(HouseInfo[h][hOwner] == PlayerInfo[playerid][pID])
            return HataMesajiC(playerid, "Kendi evinizden eþya çalamazsýnýz.");

        if(HasPlayerUserKey(playerid, KEY_HOUSE, HouseInfo[h][hID]) > 0 && HouseInfo[h][hOwner] != PlayerInfo[playerid][pID])
            return HataMesajiC(playerid, "Anahtarýna sahip olduðunuz evden eþya çalamazsýnýz.");
        
        new saat, dakika, saniye;
        gettime(saat, dakika, saniye);

        if(PlayerInfo[playerid][pAdmin] == 22 || saat == 23 || saat == 0 || saat == 1 || saat == 2 || saat == 3 || saat == 4 || saat == 5)
        {
            BasariMesaji(playerid, "Eþya çalma moduna geçiþ yaptýn, elektronik eþyalarý ya da donator eþyalarýný çalabilirsin.");
            BasariMesaji(playerid, "Unutma! Bu koliye giren eþya, bir daha çýkmaz.");

            SetPVarInt(playerid, "EsyaCalmaMod", 1);
            SelectObject(playerid);
        }
        else return HataMesajiC(playerid, "Bu sistemden sadece 23:00 ve 05:00 arasý yararlanabilirsiniz.");
    }
    else return HataMesajiC(playerid, "Bu komutu sadece bir evin içerisindeyken kullanabilirsin.");
    return 1;
}

Dialog:EsyaCalObjeSil(playerid, response, listitem, inputtext[])
{
    if(!response)return 0;
    
    if(isnull(inputtext)) return HataMesajiC(playerid, "Hatalý onay kodu giriþi, iþlem baþarýsýz.");

    if(!strcmp("EVET", inputtext, true))
    {
        if(PlayerInfo[playerid][pHirsizlik] >= 150)
            return HataMesaji(playerid, "Günlük hýrsýzlýk limitine ulaþmýþsýnýz. (Limit: 150 eþya)");
    
        new id = PlayerInfo[playerid][pSelectedItem];

        Streamer_GetArrayData(STREAMER_TYPE_OBJECT, id, E_STREAMER_EXTRA_ID, g_obj, siz_g_obj);

        BasariMesaji(playerid, "%s adlý mobilyayý çalmak üzere kucakladýn.", g_obj[co_name]);

        mysql_format(ourConnection, queryx, sizeof(queryx), "DELETE FROM furnitures WHERE id = '%d'", g_obj[co_database_id]);
        mysql_tquery(ourConnection, queryx);

        g_obj[co_name] = EOS;
        g_obj[co_price] = 0;
        g_obj[co_database_id] = 0;
        Streamer_SetArrayData(STREAMER_TYPE_OBJECT, id, E_STREAMER_EXTRA_ID, g_obj, siz_g_obj);

        DestroyDynamicObjectEx(id);
        PlayerInfo[playerid][pSelectedItem] = -1;

        if(PlayerInfo[playerid][pShowingID])
        {
            Furniture_DestroyLabels(playerid);
            pc_cmd_dekorasyonid(playerid, NULL);
        }

        new bugfix = -1;
        if(SunucuBilgi[HirsizlikNokta] == -1)
        {
            foreach(new j : Companies) if(CompanyInfo[j][cReference])
            {
                if(CompanyInfo[j][cBuyType] == HIRSIZLIK)
                {
                    SunucuBilgi[HirsizlikNokta] = j;
                    bugfix = j;
                }
            }
        }
        else
        {
            bugfix = SunucuBilgi[HirsizlikNokta];
        }

        new koliid = Crate_FreeID();
        if(koliid == -1 || bugfix == -1)return 1;

        CrateInfo[koliid][crExists] = 1;
        CrateInfo[koliid][crType] = HIRSIZLIK;
        CrateInfo[koliid][crAmount] = 1;
        CrateInfo[koliid][crVehicleID] = -1;
        CrateInfo[koliid][crPosX] = 0.0;
        CrateInfo[koliid][crPosY] = 0.0;
        CrateInfo[koliid][crPosZ] = 0.0;
        CrateInfo[koliid][crInterior] = GetPlayerInterior(playerid);
        CrateInfo[koliid][crWorld] = GetPlayerVirtualWorld(playerid);
        CrateInfo[koliid][crPlayer] = playerid;

        if(SunucuBilgi[HirsizlikNokta] != -1 && bugfix != -1)
            CrateInfo[koliid][crCompany] = bugfix;

        Iter_Add(Crates, koliid);
        PlayerInfo[playerid][pCarryCrate] = koliid;

        ApplyAnimation(playerid, "CARRY", "liftup", 4.1, 0, 0, 0, 0, 0, 1);
        SetPlayerAttachedObject(playerid, 9, BOX_OBJECT, 1, -0.067019, 0.413313, -0.040999, 0.000000, 88.000000, 180.000000, 0.500000, 0.500000, 0.500000);
        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
        PlayerInfo[playerid][pHirsizlik] += 1;
    }
    else HataMesajiC(playerid, "Onay kodu giriþi baþarýsýzlýkla sonuçlandý.");
    return 1;
}

CalinabilirObje(objeid)
{
    switch(objeid)
    {
        case 2785, 2783, 8668, 1978, 19474, 2188, 14434, 2960, 55, 356, 357, 348, 352, 49, 344, 2044, 2035, 2041, 2710, 3082, 3496,
        550, 1829, 19917, 1212, 19418, 372, 19995, 14608, 6865, 1896, 3384, 19942, 19421, 19422, 9423, 19424, 9893, 19894, 2190,
        19808, 515, 2681, 2778, 2779, 2028, 1719, 1718, 14820, 1785, 782, 1783, 787, 1788, 1790, 2101, 2225, 2227, 839, 1841, 2229,
        230, 2104, 2231, 2232, 2233, 226, 2102, 2103, 2099, 2100, 1518, 1747, 748, 1749, 1750, 1751, 1752, 1781, 1786, 791, 1792,
        2224, 2595, 2596, 2606, 2648, 14604, 14772, 19786, 19787, 1622, 1616, 1886, 2921, 1892, 2412, 19623, 2202, 2186, 18865,
        18866, 18867, 18868, 18869, 18870, 18871, 18872, 18873, 18874, 2967, 1514, 959, 2753, 19273, 2192, 2750, 19317, 19318, 19319,
        11743, 19830, 19807, 19933, 2149, 2421, 1780, 2147, 2531, 2532, 2533, 2534, 2577, 2452, 2360, 2361, 2425, 2427, 2296,
        2297, 2091, 11728, 19610, 1960, 1961, 1962, 19609, 19915, 1208, 19612, 19613, 19614, 19615, 19616, 19920, 11705, 330: return 1;
    }
    return 0;
}

flags:kirabelirle(CMD_Marvellous);
CMD:kirabelirle(playerid, params[])
{
    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
        return HataMesajiC(playerid, "Bu komutu sadece aracýn sürücü koltuðunda kullanabilirsin.");

    new vehid = GetPlayerVehicleID(playerid);

    if(IsValidVehicle(vehid))
    {
        new fiyat;
        if(sscanf(params, "d", fiyat)) return KullanimMesaji(playerid, "/kirabelirle [fiyat] (0 sistemden çýkarýr)");
        
        if(fiyat == 0)
        {
            if(VehicleInfo[vehid][vIAKS])
            {
                foreach(new i : KiralikAraclar)
                {
                    if(KiralikArac[i][kaID] == VehicleInfo[vehid][vID])
                    {
                        KiralikArac[i][kaID] = 0;
                        KiralikArac[i][kaSQLID] = 0;

                        KiralikArac[i][kaKiralandi] = false;
                        KiralikArac[i][kaKiralayan] = -1;
            
                        Iter_Remove(KiralikAraclar, i);
                        break;
                    }
                }
            }
            BasariMesaji(playerid, "Bu araç artýk ikincil araç kiralama sistemine baðlý deðil.");
        }
        else BasariMesaji(playerid, "Bu aracýn saatlik kira ücretini $%d olarak belirlediniz.", fiyat);
        
        VehicleInfo[vehid][vIAKS] = fiyat;
        SaveVehicle(vehid);
    }
    return 1;
}

flags:arackemer(CMD_USER);
CMD:arackemer(playerid)
{
    if(!IsPlayerInAnyVehicle(playerid))return
        HataMesajiC(playerid, "Herhangi bir araçta deðilsin.");
        
    if(PlayerInfo[playerid][pEmniyetKemeri])
    {
        PlayerInfo[playerid][pEmniyetKemeri] = 0;
        PlayerAME(playerid, "emniyet kemerini çýkarýr.");
    }
    else
    {
        PlayerInfo[playerid][pEmniyetKemeri] = 1;
        PlayerAME(playerid, "emniyet kemerini takar.");
    }
    return 1;
}

Dialog:DialogCopEsyaSecenek(playerid, response, listitem, inputtext[]) {
    if(response) {
        if(PlayerInfo[playerid][pCopEsyaEnvanter][listitem] == -1) return HataMesajiC(playerid, "Seçtiðiniz slotta eþya yok.");
        if(!IsPlayerInRangeOfPoint(playerid, 3.0, 2102.3074,-2001.5436,13.5469)) return HataMesaji(playerid, "Çöp satýþ noktasýnda deðilsin.");
        new esya = PlayerInfo[playerid][pCopEsyaEnvanter][listitem];
        PlayerInfo[playerid][pCopEsyaEnvanter][listitem] = -1;
        new alacagiPara = CopEsya[esya][esyaPara];
        AC_GivePlayerMoney(playerid, alacagiPara, "/cop envanter");
        SunucuMesaji(playerid, "Çöp satýþ noktasýnda %s satarak $%d kazandýn.", CopEsya[esya][esyaIsim], CopEsya[esya][esyaPara]);
        PlayerAME(playerid, "çöp satar.");
    }
    return 1;
}

flags:copcu(CMD_GOV);
CMD:copcu(playerid, params[]) {
    new opsiyon[32];
    if(sscanf(params, "s[32]", opsiyon)) return KullanimMesajiC(playerid, "/copcu <al/birak/sil/yerdenal/yerebirak/yukle>");
    if(!strcmp(params, "al", true)) {
        if(PlayerInfo[playerid][pCopTasiyor]) return HataMesajiC(playerid, "Sadece 1 çöp poþeti taþýyabilirsin.");
        new id = YakindakiCopKutusunuBul(playerid);
        if(id != -1) {
            new sonuc = CopKutusuCopAl(id);
            if(!sonuc) return HataMesajiC(playerid, "Bu çöp konteynýrýnda daha fazla çöp kalmamýþ.");
            PlayerInfo[playerid][pCopTasiyor] = true;
            PlayerAME(playerid, "çöp konteynýrýndan bir çöp poþeti alýr.");
            SunucuMesaji(playerid, "Çöp konteynýrýndan bir poþet aldýnýz. /copcu birak ile bir çöp kamyonuna býrakabilirsiniz.");
            SunucuMesaji(playerid, "Alternatif olarak /copcu yerebirak komutu ile çöpü yere tam önünüze býrakabilirsiniz.");
            new slot = -1;
            for(new i = 6; i < MAX_PLAYER_ATTACHED_OBJECTS; i++) {
                if(!IsPlayerAttachedObjectSlotUsed(playerid, i)) {
                    slot = i;
                    PlayerInfo[playerid][pCopObjeSlot] = slot;
                    break;
                }
            }
            if(slot != -1)
                SetPlayerAttachedObject(playerid, slot, 1265, 6, 0.220999, 0.091000, -0.072999, 9.899993, -48.500034, -130.899978, 0.370000, 0.577000, 0.989000);
            else return HataMesajiC(playerid, "Boþ aksesuar slotu olmadýðý için elinize çöp poþeti objesi verilmeyecek.");

        } else return HataMesajiC(playerid, "Yakýnýnýzda bir çöp konteynýrý yok.");
    }
    else if(!strcmp(params, "birak", true)) {
        if(!PlayerInfo[playerid][pCopTasiyor]) return HataMesajiC(playerid, "Çöp taþýmýyorsun.");
        new veh = GetNearestTrashMaster(playerid);
        if(!IsValidVehicle(veh)) return HataMesajiC(playerid, "Yakýnýnýzda bir araç yok ya da araç çöp kamyonu deðil.");
        new Float:tX, Float:tY, Float:tZ;
        GetPosBehindVehicle(veh, tX, tY, tZ, 0.0);
        if(!IsPlayerInRangeOfPoint(playerid, 2.2, tX, tY, tZ)) return HataMesajiC(playerid, "Çöp kamyonunun bagajýna yakýn deðilsin.");
        PlayerInfo[playerid][pCopTasiyor] = false;
        PlayerAME(playerid, "elindeki çöp poþetini kamyonun içine atar.");
        SunucuMesaji(playerid, "Elinizdeki çöp poþetini kamyonun içine atýp öðüttünüz.");
        if(PlayerInfo[playerid][pCopObjeSlot] != -1)
            RemovePlayerAttachedObject(playerid, PlayerInfo[playerid][pCopObjeSlot]);
        PlayerInfo[playerid][pCopObjeSlot] = -1;
    }
    else if(!strcmp(params, "sil", true)) {
        if(!PlayerInfo[playerid][pCopTasiyor]) return HataMesajiC(playerid, "Zaten çöp taþýmýyorsun.");
        if(PlayerInfo[playerid][pCopObjeSlot] != -1)
            RemovePlayerAttachedObject(playerid, PlayerInfo[playerid][pCopObjeSlot]);
        PlayerInfo[playerid][pCopObjeSlot] = -1;
        PlayerInfo[playerid][pCopTasiyor] = false;
        SunucuMesaji(playerid, "Elinde olan çöp poþetini sildin.");
    }
    else if(!strcmp(params, "yerdenal", true)) {
        if(PlayerInfo[playerid][pCopTasiyor]) return HataMesajiC(playerid, "Sadece 1 çöp poþeti taþýyabilirsin.");
        new id = -1;
        foreach(new i: YerdekiCopler) {
            if(YerdekiCopInfo[i][ycopExists]) {
                if(IsPlayerInRangeOfPoint(playerid, 3.0, YerdekiCopInfo[i][ycopPosX], YerdekiCopInfo[i][ycopPosY], YerdekiCopInfo[i][ycopPosZ]) && GetPlayerInterior(playerid) == YerdekiCopInfo[i][ycopInterior] && GetPlayerVirtualWorld(playerid) == YerdekiCopInfo[i][ycopVW]) {
                    id = i;
                    break;
                }
            }
        }
        if(id == -1) return HataMesajiC(playerid, "Yakýnýnýzda yerde çöp yok.");
        Iter_Remove(YerdekiCopler, id);
        DestroyDynamicObjectEx(YerdekiCopInfo[id][ycopObje]);
        DestroyDynamic3DTextLabelEx(YerdekiCopInfo[id][ycopLabel]);
        PlayerInfo[playerid][pCopTasiyor] = true;
        YerdekiCopInfo[id][ycopExists] = 0;
        PlayerAME(playerid, "yerden bir çöp poþeti alýr.");
        SunucuMesaji(playerid, "Yerden bir poþet aldýnýz. /copcu birak ile bir çöp kamyonuna býrakabilirsiniz.");
        SunucuMesaji(playerid, "Alternatif olarak /copcu yerebirak komutu ile çöpü yere tam önünüze býrakabilirsiniz.");
        new slot = -1;
        for(new i = 6; i < MAX_PLAYER_ATTACHED_OBJECTS; i++) {
            if(!IsPlayerAttachedObjectSlotUsed(playerid, i)) {
                slot = i;
                PlayerInfo[playerid][pCopObjeSlot] = slot;
                break;
            }
        }
        if(slot != -1)
            SetPlayerAttachedObject(playerid, slot, 1265, 6, 0.220999, 0.091000, -0.072999, 9.899993, -48.500034, -130.899978, 0.370000, 0.577000, 0.989000);
        else return HataMesajiC(playerid, "Boþ aksesuar slotu olmadýðý için elinize çöp poþeti objesi verilmeyecek.");
    }
    else if(!strcmp(params, "yerebirak", true)) {
        if(!PlayerInfo[playerid][pCopTasiyor]) return HataMesajiC(playerid, "Çöp taþýmýyorsun.");
        PlayerInfo[playerid][pCopTasiyor] = false;
        if(PlayerInfo[playerid][pCopObjeSlot] != -1)
            RemovePlayerAttachedObject(playerid, PlayerInfo[playerid][pCopObjeSlot]);
        PlayerInfo[playerid][pCopObjeSlot] = -1;
        new id = Iter_Free(YerdekiCopler);
        Iter_Add(YerdekiCopler, id);
        YerdekiCopInfo[id][ycopExists] = 1;
        YerdekiCopInfo[id][ycopID] = id;
        new Float:pX, Float:pY, Float:pZ;
        GetPlayerPos(playerid, pX, pY, pZ);
        YerdekiCopInfo[id][ycopPosZ] = pZ - 0.7;
        GetXYInFrontOfPlayer(playerid, pX, pY, 1.5);
        YerdekiCopInfo[id][ycopPosX] = pX;
        YerdekiCopInfo[id][ycopPosY] = pY;
        YerdekiCopInfo[id][ycopInterior] = GetPlayerInterior(playerid);
        YerdekiCopInfo[id][ycopVW] = GetPlayerVirtualWorld(playerid);
        YerdekiCopInfo[id][ycopObje] = CreateDynamicObject(1265, YerdekiCopInfo[id][ycopPosX], YerdekiCopInfo[id][ycopPosY], YerdekiCopInfo[id][ycopPosZ], 0.0, 0.0, 0.0,  YerdekiCopInfo[id][ycopVW], YerdekiCopInfo[id][ycopInterior]);
        YerdekiCopInfo[id][ycopLabel] = CreateDynamic3DTextLabel("[Çöp]", COLOR_WHITE, YerdekiCopInfo[id][ycopPosX], YerdekiCopInfo[id][ycopPosY], YerdekiCopInfo[id][ycopPosZ] + 0.75, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, YerdekiCopInfo[id][ycopVW]);
        PlayerAME(playerid, "yere bir çöp poþeti býrakýr.");
        SunucuMesaji(playerid, "Yere bir poþet býraktýnýz. /copcu yerdenal ile tekrar alabilirsiniz.");
    }
    else if(!strcmp(params, "yukle", true)) {
        new vid = GetPlayerVehicleID(playerid);
        if(vid == -1 || VehicleInfo[vid][vModel] != 408) return HataMesaji(playerid, "Bir çöp kamyonunun içinde deðilsin.");
        new id = YakindakiCopKutusunuBul(playerid, 10.0);
        if(id == -1) return HataMesaji(playerid, "Yakýnýnda çöp kutusu yok.");
        if(!CopKutusuInfo[id][copSayisi]) return HataMesaji(playerid, "Bu çöp kutusunda çöp kalmamýþ.");
        PlayerAME(playerid, "çöpleri toplamaya baþlar.");
        SunucuMesaji(playerid, "Konteynýrda bulunan tüm çöpleri toplamaya baþladýnýz, lütfen bekleyin.");
        PlayerInfo[playerid][pCopTopla] = 5;
        TogglePlayerControllable(playerid, false);
        PlayerInfo[playerid][pFreezed] = 1;
    }
    else return HataMesajiC(playerid, "Bilinmeyen bir seçenek girdiniz.");
    return 1;
}

GetNearestTrashMaster(playerid, Float:radius = 4.0)
{
    new result = -1, Float:dist;
    new Float:fX, Float:fY, Float:fZ;

    radius *= radius;

    foreach(new i : Vehicles) if(IsValidVehicle(i) && VehicleInfo[i][vScript] && VehicleInfo[i][vModel] == 408)
    {
        GetVehiclePos(i, fX, fY, fZ);
        dist = GetPlayerDistanceFromPoint(playerid, fX, fY, fZ);
        if(dist < radius)
        {
            radius = dist;
            result = i;
        }
        continue;
    }

    return result;
}

flags:evkira(CMD_USER);
CMD:evkira(playerid, params[])
{
    new h = GetPlayerHouse(playerid, false);

    if(h == -1)
        return HataMesaji(playerid, "Herhangi bir eve yakýn deðilsiniz.");
    
    new opsiyon[32], fiyat;
    
    if(sscanf(params, "s[32]d", opsiyon, fiyat))
    {
        if(HouseInfo[h][hOwner] == PlayerInfo[playerid][pID])
            return KullanimMesajiC(playerid, "/evkira <belirle> [fiyat girin (0: kiracýyý kovar ve sistemi pasife alýr)]");
    
        if(HouseInfo[h][hOwner] != PlayerInfo[playerid][pID] && HouseInfo[h][Kiraci] != PlayerInfo[playerid][pID])
            return KullanimMesaji(playerid, "/evkira <kirala> (Kira ücreti: $%d)", HouseInfo[h][Kira]);
        
        if(HouseInfo[h][Kiraci] == PlayerInfo[playerid][pID])
            return KullanimMesajiC(playerid, "/evkira <ayril>");
    }
        
    if(!strcmp(opsiyon, "belirle", true))
    {
        if(HouseInfo[h][hOwner] == PlayerInfo[playerid][pID])
        {
            if(fiyat == 0 || fiyat < 0)
            {
                if(HouseInfo[h][Kiraci]) BasariMesaji(playerid, "Evin kira ücretini kaldýrdýnýz ve kiracýyý kovdunuz.");
                else BasariMesaji(playerid, "Evin kira ücretini kaldýrdýnýz.");
                
                HouseInfo[h][Kiraci] = 0;
                HouseInfo[h][Kira] = 0;
            }
            else if(fiyat > 0)
            {
                if(HouseInfo[h][Kiraci]) BasariMesaji(playerid, "Evin kira ücretini %d olarak belirlediniz ve eski kiracýyý kovdunuz.", fiyat);
                else BasariMesaji(playerid, "Evin kira ücretini %d olarak belirlediniz.", fiyat);
                
                HouseInfo[h][Kiraci] = 0;
                HouseInfo[h][Kira] = fiyat;
            }
        }
    }
    else if(!strcmp(opsiyon, "ayril", true))
    {
        if(HouseInfo[h][hOwner] == PlayerInfo[playerid][pID])
            HataMesajiC(playerid, "Ev sahibi kendi evinin kirasýndan ayrýlamaz.");
            
        if(HouseInfo[h][Kiraci] == PlayerInfo[playerid][pID])
        {
            if(IsPlayerOnlineID(HouseInfo[h][hOwner]) && PlayerInfo[HouseInfo[h][hOwner]][pLogged])
                SunucuMesaji(IsPlayerOnlineID(HouseInfo[h][hOwner]), "%d nolu evinizdeki kiracý (%s) kira sözleþmesini iptal etti. (%d)", h, GetCharacterName(HouseInfo[h][Kiraci]), ReturnDate());

            HouseInfo[h][Kiraci] = 0;
            BasariMesaji(playerid, "Kiradan ayrýldýnýz.");
        }
    }
    else if(!strcmp(opsiyon, "kirala", true))
    {
        if(HouseInfo[h][Kira] == 0)
            return HataMesajiC(playerid, "Bir hata oluþtu, bu ev kiralýk deðil.");
            
        if(HouseInfo[h][hOwner] == PlayerInfo[playerid][pID])
            return HataMesajiC(playerid, "Bir hata oluþtu, ev sahibi kendi evini kiralayamaz.");
            
        if(HouseInfo[h][Kiraci] != 0)
        {
            BasariMesaji(playerid, "%s adlý ev sahibiyle saatlik $%d karþýlýðýnda kira sözleþmesi yaptýnýz.");
            HouseInfo[h][Kiraci] = PlayerInfo[playerid][pID];
            
            if(IsPlayerOnlineID(HouseInfo[h][hOwner]) && PlayerInfo[HouseInfo[h][hOwner]][pLogged])
                SunucuMesaji(IsPlayerOnlineID(HouseInfo[h][hOwner]), "%d nolu eviniz %s tarafýndan $%d karþýlýðýnda kiralandý. (%d)", h, GetCharacterName(HouseInfo[h][Kiraci]), HouseInfo[h][Kira], ReturnDate());
        }
        else
        {
            if(HouseInfo[h][Kiraci] == PlayerInfo[playerid][pID]) HataMesajiC(playerid, "Bu evi zaten kiralamýþsýnýz. (/evkira ayril)");
            else HataMesajiC(playerid, "Bir hata oluþtu, bu ev zaten baþkasý tarafýndan kiralanmýþ.");
        }
    }

    return 1;
}

YarislariSifirla() {
    for(new i; i < MAX_YARIS; i++) {
        YarisInfo[i][yarisBaslatildi] = 0;
        YarisInfo[i][yarisAktif] = 0;
        format(YarisInfo[i][yarisIsmi], 32, "Yok");
        YarisInfo[i][yarisSahibi] = -1;
        for(new j; j < MAX_YARIS_CHECKPOINT; j++) {
            YarisInfo[i][yarisCheckpointX][j] = 0.0;
            YarisInfo[i][yarisCheckpointY][j] = 0.0;
            YarisInfo[i][yarisCheckpointZ][j] = 0.0;
            YarisInfo[i][yarisCheckpointInterior][j] = 0;
            YarisInfo[i][yarisCheckpointVirtualWorld][j] = 0;
        }
        YarisInfo[i][yarisKatilanSayisi] = 0;
        YarisInfo[i][yarisKazananlar][0] = -1;
        YarisInfo[i][yarisKazananlar][1] = -1;
        YarisInfo[i][yarisKazananlar][2] = -1;
        YarisInfo[i][yarisAktifCheckpoint] = 0;
    }
    print("Yarislar sifirlandi+");
    return 1;
}

YarisSifirla(id) {
    YarisInfo[id][yarisBaslatildi] = 0;
    YarisInfo[id][yarisAktif] = 0;
    format(YarisInfo[id][yarisIsmi], 32, "Yok");
    YarisInfo[id][yarisSahibi] = -1;
    for(new j; j < MAX_YARIS_CHECKPOINT; j++) {
        YarisInfo[id][yarisCheckpointX][j] = 0.0;
        YarisInfo[id][yarisCheckpointY][j] = 0.0;
        YarisInfo[id][yarisCheckpointZ][j] = 0.0;
        YarisInfo[id][yarisCheckpointInterior][j] = 0;
        YarisInfo[id][yarisCheckpointVirtualWorld][j] = 0;
    }
    YarisInfo[id][yarisKatilanSayisi] = 0;
    YarisInfo[id][yarisKazananlar][0] = -1;
    YarisInfo[id][yarisKazananlar][1] = -1;
    YarisInfo[id][yarisKazananlar][2] = -1;
    YarisInfo[id][yarisAktifCheckpoint] = 0;
    foreach(new yeter: Player) {
        if(!PlayerInfo[yeter][pLogged]) continue;
        if(PlayerInfo[yeter][pKatildigiYaris] != id && PlayerInfo[yeter][pYarisSahibi] != id) continue;
        PlayerInfo[yeter][pKatildigiYaris] = -1;
        PlayerInfo[yeter][pYarisSahibi] = -1;
        SunucuMesajiC(yeter, "Katýldýðýnýz yarýþ sýfýrlandý.");
    }
    return 1;
}

YarisBaslat(playerid, id) {
    if(YarisInfo[id][yarisKatilanSayisi] < 3) return HataMesajiC(playerid, "3 kiþiden az kiþiyle yarýþý baþlatamazsýn.");
    YarisInfo[id][yarisAktif] = 1;
    YarisInfo[id][yarisBaslatildi] = 1;
    new oyuncuCP;
    foreach(new yeter: Player) {
        if(!PlayerInfo[yeter][pLogged]) continue;
        if(PlayerInfo[yeter][pKatildigiYaris] != id && PlayerInfo[yeter][pYarisSahibi] != id) continue;
        SunucuMesajiC(yeter, "Katýldýðýnýz yarýþ organizatör tarafýndan baþlatýldý, lütfen organizatörün komutlarýný dinleyin.");
        oyuncuCP = PlayerInfo[yeter][pYarisCP];
        PlayerInfo[yeter][pGidilecekCP] = CreateDynamicRaceCP(0, YarisInfo[id][yarisCheckpointX][oyuncuCP], YarisInfo[id][yarisCheckpointY][oyuncuCP], YarisInfo[id][yarisCheckpointZ][oyuncuCP], YarisInfo[id][yarisCheckpointX][oyuncuCP+1], YarisInfo[id][yarisCheckpointY][oyuncuCP+1], YarisInfo[id][yarisCheckpointZ][oyuncuCP+1], 5.0, YarisInfo[id][yarisCheckpointVirtualWorld][oyuncuCP], YarisInfo[id][yarisCheckpointInterior][oyuncuCP], yeter);
    }
    return 1;
}

YarisBitir(id) {
    foreach(new yeter: Player) {
        if(!PlayerInfo[yeter][pLogged]) continue;
        if(PlayerInfo[yeter][pKatildigiYaris] != id && PlayerInfo[yeter][pYarisSahibi] != id) continue;
        SunucuMesaji(yeter, "Yarýþ birincisi: %s, ikincisi: %s, üçüncüsü: %s", ReturnRoleplayName(YarisInfo[id][yarisKazananlar][0]), ReturnRoleplayName(YarisInfo[id][yarisKazananlar][1]), ReturnRoleplayName(YarisInfo[id][yarisKazananlar][2]));
        PlayerInfo[yeter][pKatildigiYaris] = -1;
        PlayerInfo[yeter][pYarisSahibi] = -1;
        PlayerInfo[yeter][pYarisCP] = -1;
        SunucuMesajiC(yeter, "Katýldýðýnýz yarýþ sýfýrlandý.");
    }
    YarisSifirla(id);
}

AtYarisiSifirla() {
    bahisAktif = 0;
    bahisOyunAktif = 0;
    bahisTimer = 0;
    for(new i; i < MAX_YARIS_ATI; i++) {
        atlarinDurumu[i] = 0;
    }
    format(atIsimleri[0], 32, "Blackjack");
    format(atIsimleri[1], 32, "Blaze");
    format(atIsimleri[2], 32, "Red Fox");
    format(atIsimleri[3], 32, "Dancing Queen");
    print("At yarisi sifirlandi+");
}

PizzaEvSec(playerid) {
    new secilenEv = -1, count = 0;
    do {
        secilenEv = random(Iter_Count(Houses));
        count++;
    } while((HouseInfo[secilenEv][hPosInterior] != 0 || HouseInfo[secilenEv][hPosWorld] != 0 || secilenEv == PlayerInfo[playerid][pPizzaSonEv] || !EvLosSantosDaMi(secilenEv)) && count < 20);
    if(secilenEv != -1) {
        if(!PlayerInfo[playerid][pJobDuty]) return HataMesajiC(playerid, "Ýþbaþýndan ayrýldýðýnýz için sipariþiniz iptal edildi.");
        AC_SetPlayerCheckpoint(playerid, HouseInfo[secilenEv][hPosX], HouseInfo[secilenEv][hPosY], HouseInfo[secilenEv][hPosZ], 5.0);
        SetPVarInt(playerid, "SiparisAldi", 1);
        SetPVarFloat(playerid, "SiparisX", HouseInfo[secilenEv][hPosX]);
        SetPVarFloat(playerid, "SiparisY", HouseInfo[secilenEv][hPosY]);
        SetPVarFloat(playerid, "SiparisZ", HouseInfo[secilenEv][hPosZ]);
        return 1;
    }
    else return 0;
}

/*ReloadPlayerHud(playerid, day, year, hour, minute, monthstr[])
{
    new string[32];

    format(string, 32, "%02d/%s/%d", day, monthstr, year);
    PlayerTextDrawSetString(playerid, YeniSunucuHud[1][playerid], string);

    format(string, 32, "%02d:%02d", hour, minute);
    PlayerTextDrawSetString(playerid, YeniSunucuHud[2][playerid], string);
    return 1;
}

ShowPlayerHud(playerid)
{
    new hmonth, hday, hyear, hhour, hminute, hmonthstr[5], string[32];

    PlayerTextDrawSetString(playerid, YeniSunucuHud[0][playerid], "SA-RP");

    gettime(hhour, hminute);
    getdate(hyear, hmonth, hday);
    switch(hmonth)
    {
        case 1:  hmonthstr = "01";
        case 2:  hmonthstr = "02";
        case 3:  hmonthstr = "03";
        case 4:  hmonthstr = "04";
        case 5:  hmonthstr = "05";
        case 6:  hmonthstr = "06";
        case 7:  hmonthstr = "07";
        case 8:  hmonthstr = "08";
        case 9:  hmonthstr = "09";
        case 10: hmonthstr = "10";
        case 11: hmonthstr = "11";
        case 12: hmonthstr = "12";
    }

    format(string, 32, "%02d/%s/%d", hday, hmonthstr, hyear);
    PlayerTextDrawSetString(playerid, YeniSunucuHud[1][playerid], string);

    format(string, 32,"%02d:%02d", hhour, hminute);
    PlayerTextDrawSetString(playerid, YeniSunucuHud[2][playerid], string);

    for( new text; text != 3; text++) TextDrawShowForPlayer(playerid, SunucuHud[text]);
    for( new text; text != 3; text++) PlayerTextDrawShow(playerid, YeniSunucuHud[text][playerid]);

    return 1;
}

HidePlayerHud(playerid)
{
    for( new text; text != 3; text++) TextDrawHideForPlayer(playerid, SunucuHud[text]);
    for( new text; text != 3; text++) PlayerTextDrawHide(playerid, YeniSunucuHud[text][playerid]);
    return 1;
}*/

ArtanPara(playerid, money)
{
    if(PlayerInfo[playerid][pNotifications][0])
    {
        KillTimer(PlayerInfo[playerid][pNotificationsTimer][0]);
        PlayerInfo[playerid][pNotifications][0] = false;
        PlayerInfo[playerid][pNotificationsTimer][0] = 0;
        PlayerTextDrawHide(playerid, ParaBilgilendirme[0][playerid]);
    }
        
    if(money < 0)
        printf("%s bug abuse yapiyor olabilir. (Para: %d)", ReturnRoleplayName(playerid), money);
        
    new string[32];
    format(string, 32, "+$%d", money);
    PlayerTextDrawSetString(playerid, ParaBilgilendirme[0][playerid], string);
    PlayerTextDrawShow(playerid, ParaBilgilendirme[0][playerid]);
    PlayerInfo[playerid][pNotificationsTimer][0] = SetTimerEx("AParaTDGizle", 2000, false, "d", playerid);
    PlayerInfo[playerid][pNotifications][0] = true;
    return 1;
}

EksilenPara(playerid, money)
{
    if(PlayerInfo[playerid][pNotifications][1])
    {
        KillTimer(PlayerInfo[playerid][pNotificationsTimer][1]);
        PlayerInfo[playerid][pNotifications][1] = false;
        PlayerInfo[playerid][pNotificationsTimer][1] = 0;
        PlayerTextDrawHide(playerid, ParaBilgilendirme[1][playerid]);
    }
    
    if(money < 0)
        money *= -1;

    new string[32];
    format(string, 32, "-$%d", money);
    PlayerTextDrawSetString(playerid, ParaBilgilendirme[1][playerid], string);
    PlayerTextDrawShow(playerid, ParaBilgilendirme[1][playerid]);
    PlayerInfo[playerid][pNotificationsTimer][1] = SetTimerEx("EParaTDGizle", 2000, false, "d", playerid);
    PlayerInfo[playerid][pNotifications][1] = true;
    return 1;
}

AParaTDGizle(playerid); public AParaTDGizle(playerid)
{
    PlayerInfo[playerid][pNotificationsTimer][0] = 0;
    PlayerInfo[playerid][pNotifications][0] = false;
    PlayerTextDrawHide(playerid, ParaBilgilendirme[0][playerid]);
    return 1;
}

EParaTDGizle(playerid); public EParaTDGizle(playerid)
{
    PlayerInfo[playerid][pNotifications][1] = false;
    PlayerInfo[playerid][pNotificationsTimer][1] = 0;
    PlayerTextDrawHide(playerid, ParaBilgilendirme[1][playerid]);
    return 1;
}

ParaTDGizle(playerid)
{
    PlayerInfo[playerid][pNotificationsTimer][0] = 0;
    PlayerInfo[playerid][pNotificationsTimer][1] = 0;
    PlayerInfo[playerid][pNotifications][0] = false;
    PlayerInfo[playerid][pNotifications][1] = false;
    PlayerTextDrawHide(playerid, ParaBilgilendirme[0][playerid]);
    PlayerTextDrawHide(playerid, ParaBilgilendirme[1][playerid]);
    return 1;
}

/*StadyumObjeler()
{
    new lsforum;
    lsforum = CreateDynamicObject(1660, 2812.436279, -1674.667358, 7.713069, -18.599971, 0.000000, -0.099999, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(lsforum, 0, 10806, "airfence_sfse", "ws_oldpainted", 0x00000000);
    lsforum = CreateDynamicObject(1660, 2809.115722, -1674.659423, 7.713069, -18.599971, 0.099999, -0.099999, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(lsforum, 0, 10806, "airfence_sfse", "ws_oldpainted", 0x00000000);
    lsforum = CreateDynamicObject(1660, 2805.302734, -1674.652832, 7.713069, -18.599971, 0.000000, -0.099999, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(lsforum, 0, 10806, "airfence_sfse", "ws_oldpainted", 0x00000000);
    lsforum = CreateDynamicObject(19380, 2823.629394, -1726.144653, 9.134755, -0.099999, 81.699958, -8.899995, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(lsforum, 0, 10806, "airfence_sfse", "ws_oldpainted", 0x00000000);
    lsforum = CreateDynamicObject(19380, 2822.521728, -1732.673095, 8.934049, -0.099999, 78.899909, -8.899995, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(lsforum, 0, 10806, "airfence_sfse", "ws_oldpainted", 0x00000000);
    lsforum = CreateDynamicObject(19380, 2658.084472, -1733.314208, 9.389281, -0.099999, 94.799758, -0.500001, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(lsforum, 0, 10806, "airfence_sfse", "ws_oldpainted", 0x00000000);
    lsforum = CreateDynamicObject(19380, 2658.016113, -1723.731323, 9.375144, -0.099999, 94.799758, -0.100000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(lsforum, 0, 10806, "airfence_sfse", "ws_oldpainted", 0x00000000);
    lsforum = CreateDynamicObject(-2055, 2748.889404, -1774.641845, 10.589130, 0.000000, 0.000000, 0.299997, -1, -1, -1, 300.00, 300.00);
    lsforum = CreateDynamicObject(-2056, 2750.535644, -1770.575439, 17.519727, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    lsforum = CreateDynamicObject(-2057, 2746.335937, -1694.640136, 14.006608, 0.000000, 0.000000, 0.299997, -1, -1, -1, 300.00, 300.00);
    lsforum = CreateDynamicObject(-2058, 2748.507080, -1774.595092, 17.809236, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    lsforum = CreateDynamicObject(-2059, 2808.419921, -1796.844726, 13.377365, -0.099999, -0.099999, 0.000000, -1, -1, -1, 300.00, 300.00);
    lsforum = CreateDynamicObject(14407, 2739.507324, -1748.493896, 6.876442, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    lsforum = CreateDynamicObject(14407, 2735.584228, -1748.493896, 6.876442, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    lsforum = CreateDynamicObject(14407, 2731.640869, -1748.493896, 6.876442, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    lsforum = CreateDynamicObject(14407, 2773.680908, -1795.554565, 7.263429, 8.299998, -0.199999, -89.199943, -1, -1, -1, 300.00, 300.00);
    lsforum = CreateDynamicObject(14407, 2773.628417, -1791.625000, 7.249853, 8.299998, -0.199999, -89.199943, -1, -1, -1, 300.00, 300.00);
    lsforum = CreateDynamicObject(14407, 2773.573486, -1787.695068, 7.246170, 8.299998, -0.199999, -89.199943, -1, -1, -1, 300.00, 300.00);
    lsforum = CreateDynamicObject(946, 2713.529785, -1802.757324, 12.365053, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    lsforum = CreateDynamicObject(946, 2713.522216, -1777.519775, 12.365053, 0.000000, 0.000000, -178.600219, -1, -1, -1, 300.00, 300.00);
    lsforum = CreateDynamicObject(19325, 2730.867919, -1866.543579, 10.970028, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    lsforum = CreateDynamicObject(19325, 2730.867919, -1875.323608, 10.970028, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    lsforum = CreateDynamicObject(1522, 2730.948730, -1870.037475, 10.001843, 0.000000, 0.000000, 5.699996, -1, -1, -1, 300.00, 300.00);
    lsforum = CreateDynamicObject(615, 2756.283935, -1762.501342, 9.644412, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    return 1;
}*/

/*StadyumTemizle(playerid)
{
    RemoveBuildingForPlayer(playerid, 17512, 2737.750, -1760.062, 26.225, 0.250);
    RemoveBuildingForPlayer(playerid, 17582, 2739.218, -1770.083, 17.554, 0.250);
    RemoveBuildingForPlayer(playerid, 17583, 2739.541, -1770.062, 13.319, 0.250);
    RemoveBuildingForPlayer(playerid, 17711, 2556.351, -1612.911, 15.906, 0.250);
    RemoveBuildingForPlayer(playerid, 17745, 2739.218, -1770.083, 17.554, 0.250);
    RemoveBuildingForPlayer(playerid, 1530, 2767.757, -1819.942, 12.225, 0.250);
    RemoveBuildingForPlayer(playerid, 760, 2719.476, -1841.364, 9.350, 0.250);
    RemoveBuildingForPlayer(playerid, 760, 2713.104, -1839.427, 9.350, 0.250);
    RemoveBuildingForPlayer(playerid, 678, 2709.906, -1839.067, 9.397, 0.250);
    RemoveBuildingForPlayer(playerid, 700, 2711.562, -1839.177, 9.538, 0.250);
    RemoveBuildingForPlayer(playerid, 760, 2701.726, -1835.614, 9.350, 0.250);
    RemoveBuildingForPlayer(playerid, 678, 2699.468, -1834.958, 9.397, 0.250);
    RemoveBuildingForPlayer(playerid, 760, 2747.257, -1844.234, 9.350, 0.250);
    RemoveBuildingForPlayer(playerid, 760, 2742.333, -1845.343, 9.350, 0.250);
    RemoveBuildingForPlayer(playerid, 700, 2743.906, -1845.270, 9.390, 0.250);
    RemoveBuildingForPlayer(playerid, 760, 2757.895, -1840.843, 9.350, 0.250);
    RemoveBuildingForPlayer(playerid, 700, 2759.976, -1839.812, 9.390, 0.250);
    RemoveBuildingForPlayer(playerid, 760, 2767.906, -1836.708, 9.444, 0.250);
    RemoveBuildingForPlayer(playerid, 678, 2766.687, -1838.395, 9.397, 0.250);
    RemoveBuildingForPlayer(playerid, 760, 2688.570, -1826.427, 9.350, 0.250);
    RemoveBuildingForPlayer(playerid, 678, 2686.320, -1825.770, 9.397, 0.250);
    RemoveBuildingForPlayer(playerid, 700, 2694.416, -1831.067, 9.225, 0.250);
    RemoveBuildingForPlayer(playerid, 760, 2778.333, -1832.395, 9.444, 0.250);
    RemoveBuildingForPlayer(playerid, 700, 2779.312, -1830.864, 9.390, 0.250);
    RemoveBuildingForPlayer(playerid, 700, 2678.687, -1815.927, 9.380, 0.250);
    RemoveBuildingForPlayer(playerid, 760, 2799.695, -1813.671, 9.444, 0.250);
    RemoveBuildingForPlayer(playerid, 700, 2803.041, -1810.833, 9.390, 0.250);
    RemoveBuildingForPlayer(playerid, 760, 2806.031, -1805.364, 9.444, 0.250);
    RemoveBuildingForPlayer(playerid, 700, 2666.664, -1724.677, 9.397, 0.250);
    RemoveBuildingForPlayer(playerid, 760, 2806.625, -1803.203, 9.444, 0.250);
    RemoveBuildingForPlayer(playerid, 17511, 2737.750, -1760.062, 26.225, 0.250);
    RemoveBuildingForPlayer(playerid, 700, 2669.156, -1716.989, 9.562, 0.250);
    RemoveBuildingForPlayer(playerid, 616, 2676.020, -1707.812, 7.434, 0.250);
    RemoveBuildingForPlayer(playerid, 700, 2682.281, -1700.989, 9.156, 0.250);
    RemoveBuildingForPlayer(playerid, 700, 2707.718, -1684.380, 9.413, 0.250);
    RemoveBuildingForPlayer(playerid, 700, 2764.976, -1681.359, 9.343, 0.250);
    RemoveBuildingForPlayer(playerid, 700, 2775.604, -1686.031, 9.343, 0.250);
    RemoveBuildingForPlayer(playerid, 700, 2724.197, -1678.593, 9.295, 0.250);
    RemoveBuildingForPlayer(playerid, 616, 2738.572, -1677.614, 7.434, 0.250);
    RemoveBuildingForPlayer(playerid, 17654, 2556.351, -1612.911, 15.906, 0.250);
    return 1;
}*/

public GYM(playerid)
{
    if(PlayerInfo[playerid][GYMLoop] > 30)
    {
        GYMBitir(playerid); return 1;
    }
    
    new tus = random(4)+1;
    
    while(tus == PlayerInfo[playerid][GYMYonTusu])
    {
        tus = random(4)+1;
    }
    
    PlayerTextDrawHide(playerid, YonTusu[playerid]);
    PlayerTextDrawSetString(playerid, YonTusu[playerid], YonTusuBelirle(PlayerInfo[playerid][GYMYonTusu]));
    PlayerTextDrawShow(playerid, YonTusu[playerid]);
    SporAletineYolla(playerid, PlayerInfo[playerid][KullandigimAlet], 0);
    
    new Keys, ud, lr;
    GetPlayerKeys(playerid, Keys, ud, lr);
    
    switch(PlayerInfo[playerid][KullandigimAlet])
    {
        case 7:
        {
            if(IsValidObject(lsbarbell))
            {
                DestroyObject(lsbarbell);
                SetPlayerAttachedObject(playerid, 9, 2913, 6);
            }
        }
        case 8:
        {
            if(IsValidObject(sfbarbell))
            {
                DestroyObject(sfbarbell);
                SetPlayerAttachedObject(playerid, 9, 2913, 6);
            }
        }
        case 9:
        {
            if(IsValidObject(lvbarbell))
            {
                DestroyObject(lvbarbell);
                SetPlayerAttachedObject(playerid, 9, 2913, 6);
            }
        }
        case 10:
        {
            if(IsValidObject(lvbarbell2))
            {
                DestroyObject(lvbarbell2);
                SetPlayerAttachedObject(playerid, 9, 2913, 6);
            }
        }
    }
    
    if((ud < 0 && PlayerInfo[playerid][GYMYonTusu] == 1 && lr == 0) || (ud > 0 && PlayerInfo[playerid][GYMYonTusu] == 2 && lr == 0) || (ud == 0 && PlayerInfo[playerid][GYMYonTusu] == 3 && lr < 0) || (ud == 0 && PlayerInfo[playerid][GYMYonTusu] == 4 && lr > 0))
    {
        PlayerInfo[playerid][GYMPuaniVar] += 1; PlayerInfo[playerid][GYMPuaniX] += 1;
        switch(PlayerInfo[playerid][KullandigimAlet])
        {
            case 1 .. 3:
            {
                if(PlayerInfo[playerid][GYMPuaniX] < 10)
                {
                    ApplyAnimation(playerid,"GYMNASIUM","gym_bike_slow",4.0,1,0,0,1,0,1);
                }
                else
                {
                    ApplyAnimation(playerid,"GYMNASIUM","gym_bike_fast",4.0,1,0,0,1,0,1);
                }
            }
            case 4 .. 6:
            {
                if(PlayerInfo[playerid][GYMPuaniX] < 10)
                {
                    ApplyAnimation(playerid,"GYMNASIUM","gym_tread_sprint",4.0,1,0,0,1,0,1);
                }
                else
                {
                    ApplyAnimation(playerid,"GYMNASIUM","gym_tread_sprint",4.0,1,0,0,1,0,1);
                }
            }
            case 7 .. 10:
            {
                if(PlayerInfo[playerid][GYMPuaniX] < 10)
                {
                    ApplyAnimation(playerid, "benchpress", "gym_bp_up_A", 2.0, 1, 0, 0, 1, 2000, 1);
                }
                else
                {
                    ApplyAnimation(playerid, "benchpress", "gym_bp_up_smooth", 4.0, 1, 0, 0, 1, 2000, 1);
                }
            }
        }
    }
    else
    {
        PlayerInfo[playerid][GYMPuaniVar] -= 1; PlayerInfo[playerid][GYMPuaniX] = 0;
        switch(PlayerInfo[playerid][KullandigimAlet])
        {
            case 1 .. 3: ApplyAnimation(playerid,"GYMNASIUM","gym_bike_still",4.0,1,0,0,1,0,1);
            case 4 .. 6: ApplyAnimation(playerid,"GYMNASIUM","gym_tread_walk",4.0,1,0,0,1,0,1);
            case 7 .. 10: ApplyAnimation(playerid,"benchpress","gym_bp_up_B",2.0,1,0,0,1,2000,1);
        }
    }
    
    PlayerInfo[playerid][GYMLoop] += 1;
    PlayerInfo[playerid][GYMYonTusu] = tus;
    return 1;
}

GYMBitir(playerid)
{
    PlayerTextDrawHide(playerid, YonTusu[playerid]);
    if(PlayerInfo[playerid][GYMPuaniVar] == 0)
    {
        SunucuMesaji(playerid, "Hiç puan kazanamadýnýz, daha fazla çalýþmalýsýnýz.");
    }
    else if(PlayerInfo[playerid][GYMPuaniVar] > 0)
    {
        BasariMesaji(playerid, "+%d geliþim puaný kazanýldý.", PlayerInfo[playerid][GYMPuaniVar]);
    }
    else
    {
        SunucuMesaji(playerid, "%d geliþim puaný kaybedildi.", PlayerInfo[playerid][GYMPuaniVar]);
    }

    KillTimer(PlayerInfo[playerid][GYMTimer]);
    
    switch(PlayerInfo[playerid][KullandigimAlet])
    {
        case 1 .. 3: ApplyAnimation(playerid,"GYMNASIUM","gym_bike_getoff",4.0,0,0,0,0,0,0);
        case 4 .. 6: ApplyAnimation(playerid,"GYMNASIUM","gym_tread_getoff",4.0,0,0,0,0,0,0);
        case 7 .. 10: ApplyAnimation(playerid,"benchpress","gym_bp_getoff",4.0,0,0,0,0,0,0);
    }
    
    RemovePlayerAttachedObject(playerid, 9);
    SetCameraBehindPlayer(playerid);
    
    switch(PlayerInfo[playerid][KullandigimAlet])
    {
        case 7:
        {
            if(IsValidObject(lsbarbell))
            {
                DestroyObject(lsbarbell);
            }
            lsbarbell = CreateObject(2913, 774.4290, 1.883098, 1000.4883, 0, 270.0, 88.000,150);
        }
        case 8:
        {
            if(IsValidObject(sfbarbell))
            {
                DestroyObject(sfbarbell);
            }
            sfbarbell = CreateObject(2913, 765.8552, -48.8685, 1000.6409, 0, 89.50, 0.0000,150);
        }
        case 9:
        {
            if(IsValidObject(lvbarbell))
            {
                DestroyObject(lvbarbell);
            }
            lvbarbell = CreateObject(2913, 765.3403, -59.1827, 1000.6379, 0, 89.50, 181.25,150);
        }
        case 10:
        {
            if(IsValidObject(lvbarbell2))
            {
                DestroyObject(lvbarbell2);
            }
            lvbarbell2 = CreateObject(2913, 768.080, -59.0295, 1000.6379, 0, 90.0, 0, 150);
        }
    }
    new gympuan = PlayerInfo[playerid][GYMPuani];
    new kasseviye = PlayerInfo[playerid][KasSeviyesi];
    
    if(gympuan+PlayerInfo[playerid][GYMPuaniVar] >= kasseviye*1000)
    {
        BasariMesaji(playerid, "%d. kas seviyesine ulaþtýnýz, tebrikler!", kasseviye+1);
        PlayerInfo[playerid][GYMPuani] = 0;
        PlayerInfo[playerid][KasSeviyesi] = kasseviye+1;
    }
    else
    {
        PlayerInfo[playerid][GYMPuani] = PlayerInfo[playerid][GYMPuani]+PlayerInfo[playerid][GYMPuaniVar];
    }
    PlayerInfo[playerid][GYMYonTusu] = 0;
    PlayerInfo[playerid][GYMLoop] = 0;
    PlayerInfo[playerid][GYMPuaniVar] = 0;
    PlayerInfo[playerid][GYMPuaniX] = 0;
    KullanilanAletler[PlayerInfo[playerid][KullandigimAlet]] = 0;
    PlayerInfo[playerid][KullandigimAlet] = 0;
    return 1;
}

YonTusuBelirle(id)
{
    new ok[15];
    switch(id)
    {
        case 1: ok = "ld_beat:up";
        case 2: ok = "ld_beat:down";
        case 3: ok = "ld_beat:left";
        case 4: ok = "ld_beat:right";
    }
    return ok;
}

SporAletleri(playerid)
{
    if(IsPlayerInRangeOfPoint(playerid, 1.5, 772.5529, 9.423600, 1000.7247) && GetPlayerInterior(playerid) == 5)
        return 1;
        
    else if(IsPlayerInRangeOfPoint(playerid, 1.5, 769.6011, -47.9109, 1000.5859) && GetPlayerInterior(playerid) == 6)
        return 2;

    else if(IsPlayerInRangeOfPoint(playerid, 1.5, 775.0284, -68.6539, 1000.6563) && GetPlayerInterior(playerid) == 7)
        return 3;

    else if(IsPlayerInRangeOfPoint(playerid, 1.5, 773.4804, -2.36510, 1000.7247) && GetPlayerInterior(playerid) == 5)
        return 4;

    else if(IsPlayerInRangeOfPoint(playerid, 1.5, 759.5977, -47.8843, 1000.5859) && GetPlayerInterior(playerid) == 6)
        return 5;

    else if(IsPlayerInRangeOfPoint(playerid, 1.5, 758.3638, -65.3969, 1000.6563) && GetPlayerInterior(playerid) == 7) 
        return 6;

    else if(IsPlayerInRangeOfPoint(playerid, 1.5, 773.8289, 1.403700, 1000.7247) && GetPlayerInterior(playerid) == 5)
        return 7;

    else if(IsPlayerInRangeOfPoint(playerid, 1.5, 766.2886, -48.1480, 1000.5859) && GetPlayerInterior(playerid) == 6)
        return 8;

    else if(IsPlayerInRangeOfPoint(playerid, 1.5, 764.8702, -59.6601, 1000.6563) && GetPlayerInterior(playerid) == 7)
        return 9;

    else if(IsPlayerInRangeOfPoint(playerid, 1.5, 768.5298, -59.6601, 1000.6563) && GetPlayerInterior(playerid) == 7)
        return 10;

    return 0;
}

SporAletineYolla(playerid, alet, mod)
{
    new Float:aX, Float:aY, Float:aZ, Float:aA, Float:pA;
    
    switch(alet)
    {
        case 1:
        {
            aX = 772.6419; aY = 8.891200; aZ = 1000.7067; aA = 90;
        }
        case 2:
        {
            aX = 769.6946; aY = -48.4113; aZ = 1000.6559; aA = 90;
        }
        case 3:
        {
            aX = 775.1604; aY = -69.1313; aZ = 1000.6539; aA = 90;
        }
        case 4:
        {
            aX = 773.4711; aY = -1.19060; aZ = 1000.7262; aA = 180;
        }
        case 5:
        {
            aX = 759.6171; aY = -46.7707; aZ = 1000.5859; aA = 180;
        }
        case 6:
        {
            aX = 758.3710; aY = -64.0923; aZ = 1000.6528; aA = 180;
        }
        case 7:
        {
            aX = 772.9553; aY = 1.461400; aZ = 1000.7209; aA = 270;
        }
        case 8:
        {
            aX = 766.3169; aY = -47.3577; aZ = 1000.5859; aA = 180;
        }
        case 9:
        {
            aX = 764.8354; aY = -60.5658; aZ = 1000.6563; aA = 0;
        }
        case 10:
        {
            aX = 768.5437; aY = -60.4008; aZ = 1000.6563; aA = 0;
        }
    }
    
    if(mod == 1)
    {
        SetPlayerPos(playerid, aX, aY, aZ);
        SetPlayerFacingAngle(playerid, aA);
    }
    else
    {
        if(!IsPlayerInRangeOfPoint(playerid, 1.5, aX, aY, aZ))
            SetPlayerPos(playerid, aX, aY, aZ);

        GetPlayerFacingAngle(playerid, pA);
        
        if(pA != aA)
            SetPlayerFacingAngle(playerid, aA);
    }
    return 1;
}

GetPlayerOtel(playerid) {
    new otel = -1;
    if(GetPlayerVirtualWorld(playerid) >= 10000) {
        if(OtelInfo[GetPlayerVirtualWorld(playerid) - 10000][otelExists]) {
            otel = GetPlayerVirtualWorld(playerid) - 10000;
        }
    }
    return otel;
}

AracSigortaDuzelt(aracSQL, seviye) {
    foreach(new i: Vehicles) {
        if(VehicleInfo[i][vID] != aracSQL)continue;
        VehicleInfo[i][vSigortaSeviyesi] = seviye;
        break;
    }
    return 1;
}
